{
  "version": 3,
  "sources": ["browser-external:fs", "browser-external:canvas", "browser-external:url", "browser-external:http", "browser-external:https", "browser-external:zlib", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/webpack/universalModuleDefinition", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/util.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/api.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/annotation_storage.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/editor.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/tools.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/display_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/base_factory.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/murmurhash3.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/font_loader.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/node_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/canvas.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/pattern_helper.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/image_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/worker_options.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/message_handler.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/metadata.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/optional_content_config.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/transport_stream.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/fetch_stream.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/network_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/content_disposition.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/network.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/node_stream.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/svg.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/xfa_text.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/text_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/annotation_editor_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/freetext.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/annotation_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/shared/scripting_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/web/l10n_utils.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/xfa_layer.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/ink.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/display/editor/stamp.js", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/webpack/bootstrap", "../../pdfjs-dist/build/webpack:/pdfjs-dist/build/pdf/src/pdf.js", "../../@tato30/vue-pdf/dist/index.mjs"],
  "sourcesContent": ["module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"fs\" has been externalized for browser compatibility. Cannot access \"fs.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"canvas\" has been externalized for browser compatibility. Cannot access \"canvas.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"url\" has been externalized for browser compatibility. Cannot access \"url.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"http\" has been externalized for browser compatibility. Cannot access \"http.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"https\" has been externalized for browser compatibility. Cannot access \"https.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "module.exports = Object.create(new Proxy({}, {\n  get(_, key) {\n    if (\n      key !== '__esModule' &&\n      key !== '__proto__' &&\n      key !== 'constructor' &&\n      key !== 'splice'\n    ) {\n      console.warn(`Module \"zlib\" has been externalized for browser compatibility. Cannot access \"zlib.${key}\" in client code. See http://vitejs.dev/guide/troubleshooting.html#module-externalized-for-browser-compatibility for more details.`)\n    }\n  }\n}))", "(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = root.pdfjsLib = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"pdfjs-dist/build/pdf\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"pdfjs-dist/build/pdf\"] = factory();\n\telse\n\t\troot[\"pdfjs-dist/build/pdf\"] = factory();\n})(globalThis, () => {\nreturn ", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals process */\n\n// NW.js / Electron is a browser context, but copies some Node.js objects; see\n// http://docs.nwjs.io/en/latest/For%20Users/Advanced/JavaScript%20Contexts%20in%20NW.js/#access-nodejs-and-nwjs-api-in-browser-context\n// https://www.electronjs.org/docs/api/process#processversionselectron-readonly\n// https://www.electronjs.org/docs/api/process#processtype-readonly\nconst isNodeJS =\n  (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n  typeof process === \"object\" &&\n  process + \"\" === \"[object process]\" &&\n  !process.versions.nw &&\n  !(process.versions.electron && process.type && process.type !== \"browser\");\n\nconst IDENTITY_MATRIX = [1, 0, 0, 1, 0, 0];\nconst FONT_IDENTITY_MATRIX = [0.001, 0, 0, 0.001, 0, 0];\n\nconst MAX_IMAGE_SIZE_TO_CACHE = 10e6; // Ten megabytes.\n\n// Represent the percentage of the height of a single-line field over\n// the font size. Acrobat seems to use this value.\nconst LINE_FACTOR = 1.35;\nconst LINE_DESCENT_FACTOR = 0.35;\nconst BASELINE_FACTOR = LINE_DESCENT_FACTOR / LINE_FACTOR;\n\n/**\n * Refer to the `WorkerTransport.getRenderingIntent`-method in the API, to see\n * how these flags are being used:\n *  - ANY, DISPLAY, and PRINT are the normal rendering intents, note the\n *    `PDFPageProxy.{render, getOperatorList, getAnnotations}`-methods.\n *  - ANNOTATIONS_FORMS, ANNOTATIONS_STORAGE, ANNOTATIONS_DISABLE control which\n *    annotations are rendered onto the canvas (i.e. by being included in the\n *    operatorList), note the `PDFPageProxy.{render, getOperatorList}`-methods\n *    and their `annotationMode`-option.\n *  - OPLIST is used with the `PDFPageProxy.getOperatorList`-method, note the\n *    `OperatorList`-constructor (on the worker-thread).\n */\nconst RenderingIntentFlag = {\n  ANY: 0x01,\n  DISPLAY: 0x02,\n  PRINT: 0x04,\n  SAVE: 0x08,\n  ANNOTATIONS_FORMS: 0x10,\n  ANNOTATIONS_STORAGE: 0x20,\n  ANNOTATIONS_DISABLE: 0x40,\n  OPLIST: 0x100,\n};\n\nconst AnnotationMode = {\n  DISABLE: 0,\n  ENABLE: 1,\n  ENABLE_FORMS: 2,\n  ENABLE_STORAGE: 3,\n};\n\nconst AnnotationEditorPrefix = \"pdfjs_internal_editor_\";\n\nconst AnnotationEditorType = {\n  DISABLE: -1,\n  NONE: 0,\n  FREETEXT: 3,\n  STAMP: 13,\n  INK: 15,\n};\n\nconst AnnotationEditorParamsType = {\n  RESIZE: 1,\n  CREATE: 2,\n  FREETEXT_SIZE: 11,\n  FREETEXT_COLOR: 12,\n  FREETEXT_OPACITY: 13,\n  INK_COLOR: 21,\n  INK_THICKNESS: 22,\n  INK_OPACITY: 23,\n};\n\n// Permission flags from Table 22, Section 7.6.3.2 of the PDF specification.\nconst PermissionFlag = {\n  PRINT: 0x04,\n  MODIFY_CONTENTS: 0x08,\n  COPY: 0x10,\n  MODIFY_ANNOTATIONS: 0x20,\n  FILL_INTERACTIVE_FORMS: 0x100,\n  COPY_FOR_ACCESSIBILITY: 0x200,\n  ASSEMBLE: 0x400,\n  PRINT_HIGH_QUALITY: 0x800,\n};\n\nconst TextRenderingMode = {\n  FILL: 0,\n  STROKE: 1,\n  FILL_STROKE: 2,\n  INVISIBLE: 3,\n  FILL_ADD_TO_PATH: 4,\n  STROKE_ADD_TO_PATH: 5,\n  FILL_STROKE_ADD_TO_PATH: 6,\n  ADD_TO_PATH: 7,\n  FILL_STROKE_MASK: 3,\n  ADD_TO_PATH_FLAG: 4,\n};\n\nconst ImageKind = {\n  GRAYSCALE_1BPP: 1,\n  RGB_24BPP: 2,\n  RGBA_32BPP: 3,\n};\n\nconst AnnotationType = {\n  TEXT: 1,\n  LINK: 2,\n  FREETEXT: 3,\n  LINE: 4,\n  SQUARE: 5,\n  CIRCLE: 6,\n  POLYGON: 7,\n  POLYLINE: 8,\n  HIGHLIGHT: 9,\n  UNDERLINE: 10,\n  SQUIGGLY: 11,\n  STRIKEOUT: 12,\n  STAMP: 13,\n  CARET: 14,\n  INK: 15,\n  POPUP: 16,\n  FILEATTACHMENT: 17,\n  SOUND: 18,\n  MOVIE: 19,\n  WIDGET: 20,\n  SCREEN: 21,\n  PRINTERMARK: 22,\n  TRAPNET: 23,\n  WATERMARK: 24,\n  THREED: 25,\n  REDACT: 26,\n};\n\nconst AnnotationReplyType = {\n  GROUP: \"Group\",\n  REPLY: \"R\",\n};\n\nconst AnnotationFlag = {\n  INVISIBLE: 0x01,\n  HIDDEN: 0x02,\n  PRINT: 0x04,\n  NOZOOM: 0x08,\n  NOROTATE: 0x10,\n  NOVIEW: 0x20,\n  READONLY: 0x40,\n  LOCKED: 0x80,\n  TOGGLENOVIEW: 0x100,\n  LOCKEDCONTENTS: 0x200,\n};\n\nconst AnnotationFieldFlag = {\n  READONLY: 0x0000001,\n  REQUIRED: 0x0000002,\n  NOEXPORT: 0x0000004,\n  MULTILINE: 0x0001000,\n  PASSWORD: 0x0002000,\n  NOTOGGLETOOFF: 0x0004000,\n  RADIO: 0x0008000,\n  PUSHBUTTON: 0x0010000,\n  COMBO: 0x0020000,\n  EDIT: 0x0040000,\n  SORT: 0x0080000,\n  FILESELECT: 0x0100000,\n  MULTISELECT: 0x0200000,\n  DONOTSPELLCHECK: 0x0400000,\n  DONOTSCROLL: 0x0800000,\n  COMB: 0x1000000,\n  RICHTEXT: 0x2000000,\n  RADIOSINUNISON: 0x2000000,\n  COMMITONSELCHANGE: 0x4000000,\n};\n\nconst AnnotationBorderStyleType = {\n  SOLID: 1,\n  DASHED: 2,\n  BEVELED: 3,\n  INSET: 4,\n  UNDERLINE: 5,\n};\n\nconst AnnotationActionEventType = {\n  E: \"Mouse Enter\",\n  X: \"Mouse Exit\",\n  D: \"Mouse Down\",\n  U: \"Mouse Up\",\n  Fo: \"Focus\",\n  Bl: \"Blur\",\n  PO: \"PageOpen\",\n  PC: \"PageClose\",\n  PV: \"PageVisible\",\n  PI: \"PageInvisible\",\n  K: \"Keystroke\",\n  F: \"Format\",\n  V: \"Validate\",\n  C: \"Calculate\",\n};\n\nconst DocumentActionEventType = {\n  WC: \"WillClose\",\n  WS: \"WillSave\",\n  DS: \"DidSave\",\n  WP: \"WillPrint\",\n  DP: \"DidPrint\",\n};\n\nconst PageActionEventType = {\n  O: \"PageOpen\",\n  C: \"PageClose\",\n};\n\nconst VerbosityLevel = {\n  ERRORS: 0,\n  WARNINGS: 1,\n  INFOS: 5,\n};\n\nconst CMapCompressionType = {\n  NONE: 0,\n  BINARY: 1,\n};\n\n// All the possible operations for an operator list.\nconst OPS = {\n  // Intentionally start from 1 so it is easy to spot bad operators that will be\n  // 0's.\n  // PLEASE NOTE: We purposely keep any removed operators commented out, since\n  //              re-numbering the list would risk breaking third-party users.\n  dependency: 1,\n  setLineWidth: 2,\n  setLineCap: 3,\n  setLineJoin: 4,\n  setMiterLimit: 5,\n  setDash: 6,\n  setRenderingIntent: 7,\n  setFlatness: 8,\n  setGState: 9,\n  save: 10,\n  restore: 11,\n  transform: 12,\n  moveTo: 13,\n  lineTo: 14,\n  curveTo: 15,\n  curveTo2: 16,\n  curveTo3: 17,\n  closePath: 18,\n  rectangle: 19,\n  stroke: 20,\n  closeStroke: 21,\n  fill: 22,\n  eoFill: 23,\n  fillStroke: 24,\n  eoFillStroke: 25,\n  closeFillStroke: 26,\n  closeEOFillStroke: 27,\n  endPath: 28,\n  clip: 29,\n  eoClip: 30,\n  beginText: 31,\n  endText: 32,\n  setCharSpacing: 33,\n  setWordSpacing: 34,\n  setHScale: 35,\n  setLeading: 36,\n  setFont: 37,\n  setTextRenderingMode: 38,\n  setTextRise: 39,\n  moveText: 40,\n  setLeadingMoveText: 41,\n  setTextMatrix: 42,\n  nextLine: 43,\n  showText: 44,\n  showSpacedText: 45,\n  nextLineShowText: 46,\n  nextLineSetSpacingShowText: 47,\n  setCharWidth: 48,\n  setCharWidthAndBounds: 49,\n  setStrokeColorSpace: 50,\n  setFillColorSpace: 51,\n  setStrokeColor: 52,\n  setStrokeColorN: 53,\n  setFillColor: 54,\n  setFillColorN: 55,\n  setStrokeGray: 56,\n  setFillGray: 57,\n  setStrokeRGBColor: 58,\n  setFillRGBColor: 59,\n  setStrokeCMYKColor: 60,\n  setFillCMYKColor: 61,\n  shadingFill: 62,\n  beginInlineImage: 63,\n  beginImageData: 64,\n  endInlineImage: 65,\n  paintXObject: 66,\n  markPoint: 67,\n  markPointProps: 68,\n  beginMarkedContent: 69,\n  beginMarkedContentProps: 70,\n  endMarkedContent: 71,\n  beginCompat: 72,\n  endCompat: 73,\n  paintFormXObjectBegin: 74,\n  paintFormXObjectEnd: 75,\n  beginGroup: 76,\n  endGroup: 77,\n  // beginAnnotations: 78,\n  // endAnnotations: 79,\n  beginAnnotation: 80,\n  endAnnotation: 81,\n  // paintJpegXObject: 82,\n  paintImageMaskXObject: 83,\n  paintImageMaskXObjectGroup: 84,\n  paintImageXObject: 85,\n  paintInlineImageXObject: 86,\n  paintInlineImageXObjectGroup: 87,\n  paintImageXObjectRepeat: 88,\n  paintImageMaskXObjectRepeat: 89,\n  paintSolidColorImageMask: 90,\n  constructPath: 91,\n};\n\nconst PasswordResponses = {\n  NEED_PASSWORD: 1,\n  INCORRECT_PASSWORD: 2,\n};\n\nlet verbosity = VerbosityLevel.WARNINGS;\n\nfunction setVerbosityLevel(level) {\n  if (Number.isInteger(level)) {\n    verbosity = level;\n  }\n}\n\nfunction getVerbosityLevel() {\n  return verbosity;\n}\n\n// A notice for devs. These are good for things that are helpful to devs, such\n// as warning that Workers were disabled, which is important to devs but not\n// end users.\nfunction info(msg) {\n  if (verbosity >= VerbosityLevel.INFOS) {\n    console.log(`Info: ${msg}`);\n  }\n}\n\n// Non-fatal warnings.\nfunction warn(msg) {\n  if (verbosity >= VerbosityLevel.WARNINGS) {\n    console.log(`Warning: ${msg}`);\n  }\n}\n\nfunction unreachable(msg) {\n  throw new Error(msg);\n}\n\nfunction assert(cond, msg) {\n  if (!cond) {\n    unreachable(msg);\n  }\n}\n\n// Checks if URLs use one of the allowed protocols, e.g. to avoid XSS.\nfunction _isValidProtocol(url) {\n  switch (url?.protocol) {\n    case \"http:\":\n    case \"https:\":\n    case \"ftp:\":\n    case \"mailto:\":\n    case \"tel:\":\n      return true;\n    default:\n      return false;\n  }\n}\n\n/**\n * Attempts to create a valid absolute URL.\n *\n * @param {URL|string} url - An absolute, or relative, URL.\n * @param {URL|string} [baseUrl] - An absolute URL.\n * @param {Object} [options]\n * @returns Either a valid {URL}, or `null` otherwise.\n */\nfunction createValidAbsoluteUrl(url, baseUrl = null, options = null) {\n  if (!url) {\n    return null;\n  }\n  try {\n    if (options && typeof url === \"string\") {\n      // Let URLs beginning with \"www.\" default to using the \"http://\" protocol.\n      if (options.addDefaultProtocol && url.startsWith(\"www.\")) {\n        const dots = url.match(/\\./g);\n        // Avoid accidentally matching a *relative* URL pointing to a file named\n        // e.g. \"www.pdf\" or similar.\n        if (dots?.length >= 2) {\n          url = `http://${url}`;\n        }\n      }\n\n      // According to ISO 32000-1:2008, section 12.6.4.7, URIs should be encoded\n      // in 7-bit ASCII. Some bad PDFs use UTF-8 encoding; see bug 1122280.\n      if (options.tryConvertEncoding) {\n        try {\n          url = stringToUTF8String(url);\n        } catch {}\n      }\n    }\n\n    const absoluteUrl = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    if (_isValidProtocol(absoluteUrl)) {\n      return absoluteUrl;\n    }\n  } catch {\n    /* `new URL()` will throw on incorrect data. */\n  }\n  return null;\n}\n\nfunction shadow(obj, prop, value, nonSerializable = false) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      prop in obj,\n      `shadow: Property \"${prop && prop.toString()}\" not found in object.`\n    );\n  }\n  Object.defineProperty(obj, prop, {\n    value,\n    enumerable: !nonSerializable,\n    configurable: true,\n    writable: false,\n  });\n  return value;\n}\n\n/**\n * @type {any}\n */\nconst BaseException = (function BaseExceptionClosure() {\n  // eslint-disable-next-line no-shadow\n  function BaseException(message, name) {\n    if (this.constructor === BaseException) {\n      unreachable(\"Cannot initialize BaseException.\");\n    }\n    this.message = message;\n    this.name = name;\n  }\n  BaseException.prototype = new Error();\n  BaseException.constructor = BaseException;\n\n  return BaseException;\n})();\n\nclass PasswordException extends BaseException {\n  constructor(msg, code) {\n    super(msg, \"PasswordException\");\n    this.code = code;\n  }\n}\n\nclass UnknownErrorException extends BaseException {\n  constructor(msg, details) {\n    super(msg, \"UnknownErrorException\");\n    this.details = details;\n  }\n}\n\nclass InvalidPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"InvalidPDFException\");\n  }\n}\n\nclass MissingPDFException extends BaseException {\n  constructor(msg) {\n    super(msg, \"MissingPDFException\");\n  }\n}\n\nclass UnexpectedResponseException extends BaseException {\n  constructor(msg, status) {\n    super(msg, \"UnexpectedResponseException\");\n    this.status = status;\n  }\n}\n\n/**\n * Error caused during parsing PDF data.\n */\nclass FormatError extends BaseException {\n  constructor(msg) {\n    super(msg, \"FormatError\");\n  }\n}\n\n/**\n * Error used to indicate task cancellation.\n */\nclass AbortException extends BaseException {\n  constructor(msg) {\n    super(msg, \"AbortException\");\n  }\n}\n\nfunction bytesToString(bytes) {\n  if (typeof bytes !== \"object\" || bytes?.length === undefined) {\n    unreachable(\"Invalid argument for bytesToString\");\n  }\n  const length = bytes.length;\n  const MAX_ARGUMENT_COUNT = 8192;\n  if (length < MAX_ARGUMENT_COUNT) {\n    return String.fromCharCode.apply(null, bytes);\n  }\n  const strBuf = [];\n  for (let i = 0; i < length; i += MAX_ARGUMENT_COUNT) {\n    const chunkEnd = Math.min(i + MAX_ARGUMENT_COUNT, length);\n    const chunk = bytes.subarray(i, chunkEnd);\n    strBuf.push(String.fromCharCode.apply(null, chunk));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToBytes(str) {\n  if (typeof str !== \"string\") {\n    unreachable(\"Invalid argument for stringToBytes\");\n  }\n  const length = str.length;\n  const bytes = new Uint8Array(length);\n  for (let i = 0; i < length; ++i) {\n    bytes[i] = str.charCodeAt(i) & 0xff;\n  }\n  return bytes;\n}\n\nfunction string32(value) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      typeof value === \"number\" && Math.abs(value) < 2 ** 32,\n      `string32: Unexpected input \"${value}\".`\n    );\n  }\n  return String.fromCharCode(\n    (value >> 24) & 0xff,\n    (value >> 16) & 0xff,\n    (value >> 8) & 0xff,\n    value & 0xff\n  );\n}\n\nfunction objectSize(obj) {\n  return Object.keys(obj).length;\n}\n\n// Ensure that the returned Object has a `null` prototype; hence why\n// `Object.fromEntries(...)` is not used.\nfunction objectFromMap(map) {\n  const obj = Object.create(null);\n  for (const [key, value] of map) {\n    obj[key] = value;\n  }\n  return obj;\n}\n\n// Checks the endianness of the platform.\nfunction isLittleEndian() {\n  const buffer8 = new Uint8Array(4);\n  buffer8[0] = 1;\n  const view32 = new Uint32Array(buffer8.buffer, 0, 1);\n  return view32[0] === 1;\n}\n\n// Checks if it's possible to eval JS expressions.\nfunction isEvalSupported() {\n  try {\n    new Function(\"\"); // eslint-disable-line no-new, no-new-func\n    return true;\n  } catch {\n    return false;\n  }\n}\n\nclass FeatureTest {\n  static get isLittleEndian() {\n    return shadow(this, \"isLittleEndian\", isLittleEndian());\n  }\n\n  static get isEvalSupported() {\n    return shadow(this, \"isEvalSupported\", isEvalSupported());\n  }\n\n  static get isOffscreenCanvasSupported() {\n    return shadow(\n      this,\n      \"isOffscreenCanvasSupported\",\n      typeof OffscreenCanvas !== \"undefined\"\n    );\n  }\n\n  static get platform() {\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      typeof navigator === \"undefined\"\n    ) {\n      return shadow(this, \"platform\", { isWin: false, isMac: false });\n    }\n    return shadow(this, \"platform\", {\n      isWin: navigator.platform.includes(\"Win\"),\n      isMac: navigator.platform.includes(\"Mac\"),\n    });\n  }\n\n  static get isCSSRoundSupported() {\n    return shadow(\n      this,\n      \"isCSSRoundSupported\",\n      globalThis.CSS?.supports?.(\"width: round(1.5px, 1px)\")\n    );\n  }\n}\n\nconst hexNumbers = [...Array(256).keys()].map(n =>\n  n.toString(16).padStart(2, \"0\")\n);\n\nclass Util {\n  static makeHexColor(r, g, b) {\n    return `#${hexNumbers[r]}${hexNumbers[g]}${hexNumbers[b]}`;\n  }\n\n  // Apply a scaling matrix to some min/max values.\n  // If a scaling factor is negative then min and max must be\n  // swaped.\n  static scaleMinMax(transform, minMax) {\n    let temp;\n    if (transform[0]) {\n      if (transform[0] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[1];\n        minMax[1] = temp;\n      }\n      minMax[0] *= transform[0];\n      minMax[1] *= transform[0];\n\n      if (transform[3] < 0) {\n        temp = minMax[2];\n        minMax[2] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[2] *= transform[3];\n      minMax[3] *= transform[3];\n    } else {\n      temp = minMax[0];\n      minMax[0] = minMax[2];\n      minMax[2] = temp;\n      temp = minMax[1];\n      minMax[1] = minMax[3];\n      minMax[3] = temp;\n\n      if (transform[1] < 0) {\n        temp = minMax[2];\n        minMax[2] = minMax[3];\n        minMax[3] = temp;\n      }\n      minMax[2] *= transform[1];\n      minMax[3] *= transform[1];\n\n      if (transform[2] < 0) {\n        temp = minMax[0];\n        minMax[0] = minMax[1];\n        minMax[1] = temp;\n      }\n      minMax[0] *= transform[2];\n      minMax[1] *= transform[2];\n    }\n    minMax[0] += transform[4];\n    minMax[1] += transform[4];\n    minMax[2] += transform[5];\n    minMax[3] += transform[5];\n  }\n\n  // Concatenates two transformation matrices together and returns the result.\n  static transform(m1, m2) {\n    return [\n      m1[0] * m2[0] + m1[2] * m2[1],\n      m1[1] * m2[0] + m1[3] * m2[1],\n      m1[0] * m2[2] + m1[2] * m2[3],\n      m1[1] * m2[2] + m1[3] * m2[3],\n      m1[0] * m2[4] + m1[2] * m2[5] + m1[4],\n      m1[1] * m2[4] + m1[3] * m2[5] + m1[5],\n    ];\n  }\n\n  // For 2d affine transforms\n  static applyTransform(p, m) {\n    const xt = p[0] * m[0] + p[1] * m[2] + m[4];\n    const yt = p[0] * m[1] + p[1] * m[3] + m[5];\n    return [xt, yt];\n  }\n\n  static applyInverseTransform(p, m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    const xt = (p[0] * m[3] - p[1] * m[2] + m[2] * m[5] - m[4] * m[3]) / d;\n    const yt = (-p[0] * m[1] + p[1] * m[0] + m[4] * m[1] - m[5] * m[0]) / d;\n    return [xt, yt];\n  }\n\n  // Applies the transform to the rectangle and finds the minimum axially\n  // aligned bounding box.\n  static getAxialAlignedBoundingBox(r, m) {\n    const p1 = this.applyTransform(r, m);\n    const p2 = this.applyTransform(r.slice(2, 4), m);\n    const p3 = this.applyTransform([r[0], r[3]], m);\n    const p4 = this.applyTransform([r[2], r[1]], m);\n    return [\n      Math.min(p1[0], p2[0], p3[0], p4[0]),\n      Math.min(p1[1], p2[1], p3[1], p4[1]),\n      Math.max(p1[0], p2[0], p3[0], p4[0]),\n      Math.max(p1[1], p2[1], p3[1], p4[1]),\n    ];\n  }\n\n  static inverseTransform(m) {\n    const d = m[0] * m[3] - m[1] * m[2];\n    return [\n      m[3] / d,\n      -m[1] / d,\n      -m[2] / d,\n      m[0] / d,\n      (m[2] * m[5] - m[4] * m[3]) / d,\n      (m[4] * m[1] - m[5] * m[0]) / d,\n    ];\n  }\n\n  // This calculation uses Singular Value Decomposition.\n  // The SVD can be represented with formula A = USV. We are interested in the\n  // matrix S here because it represents the scale values.\n  static singularValueDecompose2dScale(m) {\n    const transpose = [m[0], m[2], m[1], m[3]];\n\n    // Multiply matrix m with its transpose.\n    const a = m[0] * transpose[0] + m[1] * transpose[2];\n    const b = m[0] * transpose[1] + m[1] * transpose[3];\n    const c = m[2] * transpose[0] + m[3] * transpose[2];\n    const d = m[2] * transpose[1] + m[3] * transpose[3];\n\n    // Solve the second degree polynomial to get roots.\n    const first = (a + d) / 2;\n    const second = Math.sqrt((a + d) ** 2 - 4 * (a * d - c * b)) / 2;\n    const sx = first + second || 1;\n    const sy = first - second || 1;\n\n    // Scale values are the square roots of the eigenvalues.\n    return [Math.sqrt(sx), Math.sqrt(sy)];\n  }\n\n  // Normalize rectangle rect=[x1, y1, x2, y2] so that (x1,y1) < (x2,y2)\n  // For coordinate systems whose origin lies in the bottom-left, this\n  // means normalization to (BL,TR) ordering. For systems with origin in the\n  // top-left, this means (TL,BR) ordering.\n  static normalizeRect(rect) {\n    const r = rect.slice(0); // clone rect\n    if (rect[0] > rect[2]) {\n      r[0] = rect[2];\n      r[2] = rect[0];\n    }\n    if (rect[1] > rect[3]) {\n      r[1] = rect[3];\n      r[3] = rect[1];\n    }\n    return r;\n  }\n\n  // Returns a rectangle [x1, y1, x2, y2] corresponding to the\n  // intersection of rect1 and rect2. If no intersection, returns 'null'\n  // The rectangle coordinates of rect1, rect2 should be [x1, y1, x2, y2]\n  static intersect(rect1, rect2) {\n    const xLow = Math.max(\n      Math.min(rect1[0], rect1[2]),\n      Math.min(rect2[0], rect2[2])\n    );\n    const xHigh = Math.min(\n      Math.max(rect1[0], rect1[2]),\n      Math.max(rect2[0], rect2[2])\n    );\n    if (xLow > xHigh) {\n      return null;\n    }\n    const yLow = Math.max(\n      Math.min(rect1[1], rect1[3]),\n      Math.min(rect2[1], rect2[3])\n    );\n    const yHigh = Math.min(\n      Math.max(rect1[1], rect1[3]),\n      Math.max(rect2[1], rect2[3])\n    );\n    if (yLow > yHigh) {\n      return null;\n    }\n\n    return [xLow, yLow, xHigh, yHigh];\n  }\n\n  // From https://github.com/adobe-webplatform/Snap.svg/blob/b365287722a72526000ac4bfcf0ce4cac2faa015/src/path.js#L852\n  static bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3) {\n    const tvalues = [],\n      bounds = [[], []];\n    let a, b, c, t, t1, t2, b2ac, sqrtb2ac;\n    for (let i = 0; i < 2; ++i) {\n      if (i === 0) {\n        b = 6 * x0 - 12 * x1 + 6 * x2;\n        a = -3 * x0 + 9 * x1 - 9 * x2 + 3 * x3;\n        c = 3 * x1 - 3 * x0;\n      } else {\n        b = 6 * y0 - 12 * y1 + 6 * y2;\n        a = -3 * y0 + 9 * y1 - 9 * y2 + 3 * y3;\n        c = 3 * y1 - 3 * y0;\n      }\n      if (Math.abs(a) < 1e-12) {\n        if (Math.abs(b) < 1e-12) {\n          continue;\n        }\n        t = -c / b;\n        if (0 < t && t < 1) {\n          tvalues.push(t);\n        }\n        continue;\n      }\n      b2ac = b * b - 4 * c * a;\n      sqrtb2ac = Math.sqrt(b2ac);\n      if (b2ac < 0) {\n        continue;\n      }\n      t1 = (-b + sqrtb2ac) / (2 * a);\n      if (0 < t1 && t1 < 1) {\n        tvalues.push(t1);\n      }\n      t2 = (-b - sqrtb2ac) / (2 * a);\n      if (0 < t2 && t2 < 1) {\n        tvalues.push(t2);\n      }\n    }\n\n    let j = tvalues.length,\n      mt;\n    const jlen = j;\n    while (j--) {\n      t = tvalues[j];\n      mt = 1 - t;\n      bounds[0][j] =\n        mt * mt * mt * x0 +\n        3 * mt * mt * t * x1 +\n        3 * mt * t * t * x2 +\n        t * t * t * x3;\n      bounds[1][j] =\n        mt * mt * mt * y0 +\n        3 * mt * mt * t * y1 +\n        3 * mt * t * t * y2 +\n        t * t * t * y3;\n    }\n\n    bounds[0][jlen] = x0;\n    bounds[1][jlen] = y0;\n    bounds[0][jlen + 1] = x3;\n    bounds[1][jlen + 1] = y3;\n    bounds[0].length = bounds[1].length = jlen + 2;\n\n    return [\n      Math.min(...bounds[0]),\n      Math.min(...bounds[1]),\n      Math.max(...bounds[0]),\n      Math.max(...bounds[1]),\n    ];\n  }\n}\n\nconst PDFStringTranslateTable = [\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0x2d8,\n  0x2c7, 0x2c6, 0x2d9, 0x2dd, 0x2db, 0x2da, 0x2dc, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\n  0, 0, 0, 0, 0, 0, 0, 0, 0x2022, 0x2020, 0x2021, 0x2026, 0x2014, 0x2013, 0x192,\n  0x2044, 0x2039, 0x203a, 0x2212, 0x2030, 0x201e, 0x201c, 0x201d, 0x2018,\n  0x2019, 0x201a, 0x2122, 0xfb01, 0xfb02, 0x141, 0x152, 0x160, 0x178, 0x17d,\n  0x131, 0x142, 0x153, 0x161, 0x17e, 0, 0x20ac,\n];\n\nfunction stringToPDFString(str) {\n  if (str[0] >= \"\\xEF\") {\n    let encoding;\n    if (str[0] === \"\\xFE\" && str[1] === \"\\xFF\") {\n      encoding = \"utf-16be\";\n    } else if (str[0] === \"\\xFF\" && str[1] === \"\\xFE\") {\n      encoding = \"utf-16le\";\n    } else if (str[0] === \"\\xEF\" && str[1] === \"\\xBB\" && str[2] === \"\\xBF\") {\n      encoding = \"utf-8\";\n    }\n\n    if (encoding) {\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(str);\n        return decoder.decode(buffer);\n      } catch (ex) {\n        warn(`stringToPDFString: \"${ex}\".`);\n      }\n    }\n  }\n  // ISO Latin 1\n  const strBuf = [];\n  for (let i = 0, ii = str.length; i < ii; i++) {\n    const code = PDFStringTranslateTable[str.charCodeAt(i)];\n    strBuf.push(code ? String.fromCharCode(code) : str.charAt(i));\n  }\n  return strBuf.join(\"\");\n}\n\nfunction stringToUTF8String(str) {\n  return decodeURIComponent(escape(str));\n}\n\nfunction utf8StringToString(str) {\n  return unescape(encodeURIComponent(str));\n}\n\nfunction isArrayBuffer(v) {\n  return typeof v === \"object\" && v?.byteLength !== undefined;\n}\n\nfunction isArrayEqual(arr1, arr2) {\n  if (arr1.length !== arr2.length) {\n    return false;\n  }\n  for (let i = 0, ii = arr1.length; i < ii; i++) {\n    if (arr1[i] !== arr2[i]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nfunction getModificationDate(date = new Date()) {\n  const buffer = [\n    date.getUTCFullYear().toString(),\n    (date.getUTCMonth() + 1).toString().padStart(2, \"0\"),\n    date.getUTCDate().toString().padStart(2, \"0\"),\n    date.getUTCHours().toString().padStart(2, \"0\"),\n    date.getUTCMinutes().toString().padStart(2, \"0\"),\n    date.getUTCSeconds().toString().padStart(2, \"0\"),\n  ];\n\n  return buffer.join(\"\");\n}\n\nclass PromiseCapability {\n  #settled = false;\n\n  constructor() {\n    /**\n     * @type {Promise<any>} The Promise object.\n     */\n    this.promise = new Promise((resolve, reject) => {\n      /**\n       * @type {function} Fulfills the Promise.\n       */\n      this.resolve = data => {\n        this.#settled = true;\n        resolve(data);\n      };\n\n      /**\n       * @type {function} Rejects the Promise.\n       */\n      this.reject = reason => {\n        if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n          assert(reason instanceof Error, 'Expected valid \"reason\" argument.');\n        }\n        this.#settled = true;\n        reject(reason);\n      };\n    });\n  }\n\n  /**\n   * @type {boolean} If the Promise has been fulfilled/rejected.\n   */\n  get settled() {\n    return this.#settled;\n  }\n}\n\nlet NormalizeRegex = null;\nlet NormalizationMap = null;\nfunction normalizeUnicode(str) {\n  if (!NormalizeRegex) {\n    // In order to generate the following regex:\n    //  - create a PDF containing all the chars in the range 0000-FFFF with\n    //    a NFKC which is different of the char.\n    //  - copy and paste all those chars and get the ones where NFKC is\n    //    required.\n    // It appears that most the chars here contain some ligatures.\n    NormalizeRegex =\n      /([\\u00a0\\u00b5\\u037e\\u0eb3\\u2000-\\u200a\\u202f\\u2126\\ufb00-\\ufb04\\ufb06\\ufb20-\\ufb36\\ufb38-\\ufb3c\\ufb3e\\ufb40-\\ufb41\\ufb43-\\ufb44\\ufb46-\\ufba1\\ufba4-\\ufba9\\ufbae-\\ufbb1\\ufbd3-\\ufbdc\\ufbde-\\ufbe7\\ufbea-\\ufbf8\\ufbfc-\\ufbfd\\ufc00-\\ufc5d\\ufc64-\\ufcf1\\ufcf5-\\ufd3d\\ufd88\\ufdf4\\ufdfa-\\ufdfb\\ufe71\\ufe77\\ufe79\\ufe7b\\ufe7d]+)|(\\ufb05+)/gu;\n    NormalizationMap = new Map([[\"ﬅ\", \"ſt\"]]);\n  }\n  return str.replaceAll(NormalizeRegex, (_, p1, p2) => {\n    return p1 ? p1.normalize(\"NFKC\") : NormalizationMap.get(p2);\n  });\n}\n\nfunction getUuid() {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    (typeof crypto !== \"undefined\" && typeof crypto?.randomUUID === \"function\")\n  ) {\n    return crypto.randomUUID();\n  }\n  const buf = new Uint8Array(32);\n  if (\n    typeof crypto !== \"undefined\" &&\n    typeof crypto?.getRandomValues === \"function\"\n  ) {\n    crypto.getRandomValues(buf);\n  } else {\n    for (let i = 0; i < 32; i++) {\n      buf[i] = Math.floor(Math.random() * 255);\n    }\n  }\n  return bytesToString(buf);\n}\n\nconst AnnotationPrefix = \"pdfjs_internal_id_\";\n\nexport {\n  AbortException,\n  AnnotationActionEventType,\n  AnnotationBorderStyleType,\n  AnnotationEditorParamsType,\n  AnnotationEditorPrefix,\n  AnnotationEditorType,\n  AnnotationFieldFlag,\n  AnnotationFlag,\n  AnnotationMode,\n  AnnotationPrefix,\n  AnnotationReplyType,\n  AnnotationType,\n  assert,\n  BaseException,\n  BASELINE_FACTOR,\n  bytesToString,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  DocumentActionEventType,\n  FeatureTest,\n  FONT_IDENTITY_MATRIX,\n  FormatError,\n  getModificationDate,\n  getUuid,\n  getVerbosityLevel,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isArrayEqual,\n  isNodeJS,\n  LINE_DESCENT_FACTOR,\n  LINE_FACTOR,\n  MAX_IMAGE_SIZE_TO_CACHE,\n  MissingPDFException,\n  normalizeUnicode,\n  objectFromMap,\n  objectSize,\n  OPS,\n  PageActionEventType,\n  PasswordException,\n  PasswordResponses,\n  PermissionFlag,\n  PromiseCapability,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  string32,\n  stringToBytes,\n  stringToPDFString,\n  stringToUTF8String,\n  TextRenderingMode,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  utf8StringToString,\n  Util,\n  VerbosityLevel,\n  warn,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @module pdfjsLib\n */\n\nimport {\n  AbortException,\n  AnnotationMode,\n  assert,\n  getVerbosityLevel,\n  info,\n  InvalidPDFException,\n  isArrayBuffer,\n  isNodeJS,\n  MAX_IMAGE_SIZE_TO_CACHE,\n  MissingPDFException,\n  PasswordException,\n  PromiseCapability,\n  RenderingIntentFlag,\n  setVerbosityLevel,\n  shadow,\n  stringToBytes,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  AnnotationStorage,\n  PrintAnnotationStorage,\n  SerializableEmpty,\n} from \"./annotation_storage.js\";\nimport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMFilterFactory,\n  DOMStandardFontDataFactory,\n  isDataScheme,\n  isValidFetchUrl,\n  loadScript,\n  PageViewport,\n  RenderingCancelledException,\n  StatTimer,\n} from \"./display_utils.js\";\nimport { FontFaceObject, FontLoader } from \"./font_loader.js\";\nimport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeFilterFactory,\n  NodeStandardFontDataFactory,\n} from \"display-node_utils\";\nimport { CanvasGraphics } from \"./canvas.js\";\nimport { GlobalWorkerOptions } from \"./worker_options.js\";\nimport { MessageHandler } from \"../shared/message_handler.js\";\nimport { Metadata } from \"./metadata.js\";\nimport { OptionalContentConfig } from \"./optional_content_config.js\";\nimport { PDFDataTransportStream } from \"./transport_stream.js\";\nimport { PDFFetchStream } from \"display-fetch_stream\";\nimport { PDFNetworkStream } from \"display-network\";\nimport { PDFNodeStream } from \"display-node_stream\";\nimport { SVGGraphics } from \"display-svg\";\nimport { XfaText } from \"./xfa_text.js\";\n\nconst DEFAULT_RANGE_CHUNK_SIZE = 65536; // 2^16 = 65536\nconst RENDERING_CANCELLED_TIMEOUT = 100; // ms\nconst DELAYED_CLEANUP_TIMEOUT = 5000; // ms\n\nconst DefaultCanvasFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeCanvasFactory\n    : DOMCanvasFactory;\nconst DefaultCMapReaderFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeCMapReaderFactory\n    : DOMCMapReaderFactory;\nconst DefaultFilterFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeFilterFactory\n    : DOMFilterFactory;\nconst DefaultStandardFontDataFactory =\n  typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC\") && isNodeJS\n    ? NodeStandardFontDataFactory\n    : DOMStandardFontDataFactory;\n\n/**\n * @typedef { Int8Array | Uint8Array | Uint8ClampedArray |\n *            Int16Array | Uint16Array |\n *            Int32Array | Uint32Array | Float32Array |\n *            Float64Array\n * } TypedArray\n */\n\n/**\n * @typedef { TypedArray | ArrayBuffer | Array<number> | string } BinaryData\n */\n\n/**\n * @typedef {Object} RefProxy\n * @property {number} num\n * @property {number} gen\n */\n\n/**\n * Document initialization / loading parameters object.\n *\n * @typedef {Object} DocumentInitParameters\n * @property {string | URL} [url] - The URL of the PDF.\n * @property {BinaryData} [data] - Binary PDF data.\n *   Use TypedArrays (Uint8Array) to improve the memory usage. If PDF data is\n *   BASE64-encoded, use `atob()` to convert it to a binary string first.\n *\n *   NOTE: If TypedArrays are used they will generally be transferred to the\n *   worker-thread. This will help reduce main-thread memory usage, however\n *   it will take ownership of the TypedArrays.\n * @property {Object} [httpHeaders] - Basic authentication headers.\n * @property {boolean} [withCredentials] - Indicates whether or not\n *   cross-site Access-Control requests should be made using credentials such\n *   as cookies or authorization headers. The default is `false`.\n * @property {string} [password] - For decrypting password-protected PDFs.\n * @property {number} [length] - The PDF file length. It's used for progress\n *   reports and range requests operations.\n * @property {PDFDataRangeTransport} [range] - Allows for using a custom range\n *   transport implementation.\n * @property {number} [rangeChunkSize] - Specify maximum number of bytes fetched\n *   per range request. The default value is {@link DEFAULT_RANGE_CHUNK_SIZE}.\n * @property {PDFWorker} [worker] - The worker that will be used for loading and\n *   parsing the PDF data.\n * @property {number} [verbosity] - Controls the logging level; the constants\n *   from {@link VerbosityLevel} should be used.\n * @property {string} [docBaseUrl] - The base URL of the document, used when\n *   attempting to recover valid absolute URLs for annotations, and outline\n *   items, that (incorrectly) only specify relative URLs.\n * @property {string} [cMapUrl] - The URL where the predefined Adobe CMaps are\n *   located. Include the trailing slash.\n * @property {boolean} [cMapPacked] - Specifies if the Adobe CMaps are binary\n *   packed or not. The default value is `true`.\n * @property {Object} [CMapReaderFactory] - The factory that will be used when\n *   reading built-in CMap files. Providing a custom factory is useful for\n *   environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMCMapReaderFactory}.\n * @property {boolean} [useSystemFonts] - When `true`, fonts that aren't\n *   embedded in the PDF document will fallback to a system font.\n *   The default value is `true` in web environments and `false` in Node.js;\n *   unless `disableFontFace === true` in which case this defaults to `false`\n *   regardless of the environment (to prevent completely broken fonts).\n * @property {string} [standardFontDataUrl] - The URL where the standard font\n *   files are located. Include the trailing slash.\n * @property {Object} [StandardFontDataFactory] - The factory that will be used\n *   when reading the standard font files. Providing a custom factory is useful\n *   for environments without Fetch API or `XMLHttpRequest` support, such as\n *   Node.js. The default value is {DOMStandardFontDataFactory}.\n * @property {boolean} [useWorkerFetch] - Enable using the Fetch API in the\n *   worker-thread when reading CMap and standard font files. When `true`,\n *   the `CMapReaderFactory` and `StandardFontDataFactory` options are ignored.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {boolean} [stopAtErrors] - Reject certain promises, e.g.\n *   `getOperatorList`, `getTextContent`, and `RenderTask`, when the associated\n *   PDF data cannot be successfully parsed, instead of attempting to recover\n *   whatever possible of the data. The default value is `false`.\n * @property {number} [maxImageSize] - The maximum allowed image size in total\n *   pixels, i.e. width * height. Images above this value will not be rendered.\n *   Use -1 for no limit, which is also the default value.\n * @property {boolean} [isEvalSupported] - Determines if we can evaluate strings\n *   as JavaScript. Primarily used to improve performance of font rendering, and\n *   when parsing PDF functions. The default value is `true`.\n * @property {boolean} [isOffscreenCanvasSupported] - Determines if we can use\n *   `OffscreenCanvas` in the worker. Primarily used to improve performance of\n *   image conversion/rendering.\n *   The default value is `true` in web environments and `false` in Node.js.\n * @property {number} [canvasMaxAreaInBytes] - The integer value is used to\n *   know when an image must be resized (uses `OffscreenCanvas` in the worker).\n *   If it's -1 then a possibly slow algorithm is used to guess the max value.\n * @property {boolean} [disableFontFace] - By default fonts are converted to\n *   OpenType fonts and loaded via the Font Loading API or `@font-face` rules.\n *   If disabled, fonts will be rendered using a built-in font renderer that\n *   constructs the glyphs with primitive path commands.\n *   The default value is `false` in web environments and `true` in Node.js.\n * @property {boolean} [fontExtraProperties] - Include additional properties,\n *   which are unused during rendering of PDF documents, when exporting the\n *   parsed font data from the worker-thread. This may be useful for debugging\n *   purposes (and backwards compatibility), but note that it will lead to\n *   increased memory usage. The default value is `false`.\n * @property {boolean} [enableXfa] - Render Xfa forms if any.\n *   The default value is `false`.\n * @property {HTMLDocument} [ownerDocument] - Specify an explicit document\n *   context to create elements with and to load resources, such as fonts,\n *   into. Defaults to the current document.\n * @property {boolean} [disableRange] - Disable range request loading of PDF\n *   files. When enabled, and if the server supports partial content requests,\n *   then the PDF will be fetched in chunks. The default value is `false`.\n * @property {boolean} [disableStream] - Disable streaming of PDF file data.\n *   By default PDF.js attempts to load PDF files in chunks. The default value\n *   is `false`.\n * @property {boolean} [disableAutoFetch] - Disable pre-fetching of PDF file\n *   data. When range requests are enabled PDF.js will automatically keep\n *   fetching more data even if it isn't needed to display the current page.\n *   The default value is `false`.\n *\n *   NOTE: It is also necessary to disable streaming, see above, in order for\n *   disabling of pre-fetching to work correctly.\n * @property {boolean} [pdfBug] - Enables special hooks for debugging PDF.js\n *   (see `web/debugger.js`). The default value is `false`.\n * @property {Object} [canvasFactory] - The factory instance that will be used\n *   when creating canvases. The default value is {new DOMCanvasFactory()}.\n * @property {Object} [filterFactory] - A factory instance that will be used\n *   to create SVG filters when rendering some images on the main canvas.\n */\n\n/**\n * This is the main entry point for loading a PDF and interacting with it.\n *\n * NOTE: If a URL is used to fetch the PDF data a standard Fetch API call (or\n * XHR as fallback) is used, which means it must follow same origin rules,\n * e.g. no cross-domain requests without CORS.\n *\n * @param {string | URL | TypedArray | ArrayBuffer | DocumentInitParameters}\n *   src - Can be a URL where a PDF file is located, a typed array (Uint8Array)\n *         already populated with data, or a parameter object.\n * @returns {PDFDocumentLoadingTask}\n */\nfunction getDocument(src) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n    if (typeof src === \"string\" || src instanceof URL) {\n      src = { url: src };\n    } else if (isArrayBuffer(src)) {\n      src = { data: src };\n    }\n  }\n  if (typeof src !== \"object\") {\n    throw new Error(\"Invalid parameter in getDocument, need parameter object.\");\n  }\n  if (!src.url && !src.data && !src.range) {\n    throw new Error(\n      \"Invalid parameter object: need either .data, .range or .url\"\n    );\n  }\n  const task = new PDFDocumentLoadingTask();\n  const { docId } = task;\n\n  const url = src.url ? getUrlProp(src.url) : null;\n  const data = src.data ? getDataProp(src.data) : null;\n  const httpHeaders = src.httpHeaders || null;\n  const withCredentials = src.withCredentials === true;\n  const password = src.password ?? null;\n  const rangeTransport =\n    src.range instanceof PDFDataRangeTransport ? src.range : null;\n  const rangeChunkSize =\n    Number.isInteger(src.rangeChunkSize) && src.rangeChunkSize > 0\n      ? src.rangeChunkSize\n      : DEFAULT_RANGE_CHUNK_SIZE;\n  let worker = src.worker instanceof PDFWorker ? src.worker : null;\n  const verbosity = src.verbosity;\n  // Ignore \"data:\"-URLs, since they can't be used to recover valid absolute\n  // URLs anyway. We want to avoid sending them to the worker-thread, since\n  // they contain the *entire* PDF document and can thus be arbitrarily long.\n  const docBaseUrl =\n    typeof src.docBaseUrl === \"string\" && !isDataScheme(src.docBaseUrl)\n      ? src.docBaseUrl\n      : null;\n  const cMapUrl = typeof src.cMapUrl === \"string\" ? src.cMapUrl : null;\n  const cMapPacked = src.cMapPacked !== false;\n  const CMapReaderFactory = src.CMapReaderFactory || DefaultCMapReaderFactory;\n  const standardFontDataUrl =\n    typeof src.standardFontDataUrl === \"string\"\n      ? src.standardFontDataUrl\n      : null;\n  const StandardFontDataFactory =\n    src.StandardFontDataFactory || DefaultStandardFontDataFactory;\n  const ignoreErrors = src.stopAtErrors !== true;\n  const maxImageSize =\n    Number.isInteger(src.maxImageSize) && src.maxImageSize > -1\n      ? src.maxImageSize\n      : -1;\n  const isEvalSupported = src.isEvalSupported !== false;\n  const isOffscreenCanvasSupported =\n    typeof src.isOffscreenCanvasSupported === \"boolean\"\n      ? src.isOffscreenCanvasSupported\n      : !isNodeJS;\n  const canvasMaxAreaInBytes = Number.isInteger(src.canvasMaxAreaInBytes)\n    ? src.canvasMaxAreaInBytes\n    : -1;\n  const disableFontFace =\n    typeof src.disableFontFace === \"boolean\" ? src.disableFontFace : isNodeJS;\n  const fontExtraProperties = src.fontExtraProperties === true;\n  const enableXfa = src.enableXfa === true;\n  const ownerDocument = src.ownerDocument || globalThis.document;\n  const disableRange = src.disableRange === true;\n  const disableStream = src.disableStream === true;\n  const disableAutoFetch = src.disableAutoFetch === true;\n  const pdfBug = src.pdfBug === true;\n\n  // Parameters whose default values depend on other parameters.\n  const length = rangeTransport ? rangeTransport.length : src.length ?? NaN;\n  const useSystemFonts =\n    typeof src.useSystemFonts === \"boolean\"\n      ? src.useSystemFonts\n      : !isNodeJS && !disableFontFace;\n  const useWorkerFetch =\n    typeof src.useWorkerFetch === \"boolean\"\n      ? src.useWorkerFetch\n      : (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n        (CMapReaderFactory === DOMCMapReaderFactory &&\n          StandardFontDataFactory === DOMStandardFontDataFactory &&\n          cMapUrl &&\n          standardFontDataUrl &&\n          isValidFetchUrl(cMapUrl, document.baseURI) &&\n          isValidFetchUrl(standardFontDataUrl, document.baseURI));\n  const canvasFactory =\n    src.canvasFactory || new DefaultCanvasFactory({ ownerDocument });\n  const filterFactory =\n    src.filterFactory || new DefaultFilterFactory({ docId, ownerDocument });\n\n  // Parameters only intended for development/testing purposes.\n  const styleElement =\n    typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")\n      ? src.styleElement\n      : null;\n\n  // Set the main-thread verbosity level.\n  setVerbosityLevel(verbosity);\n\n  // Ensure that the various factories can be initialized, when necessary,\n  // since the user may provide *custom* ones.\n  const transportFactory = {\n    canvasFactory,\n    filterFactory,\n  };\n  if (!useWorkerFetch) {\n    transportFactory.cMapReaderFactory = new CMapReaderFactory({\n      baseUrl: cMapUrl,\n      isCompressed: cMapPacked,\n    });\n    transportFactory.standardFontDataFactory = new StandardFontDataFactory({\n      baseUrl: standardFontDataUrl,\n    });\n  }\n\n  if (!worker) {\n    const workerParams = {\n      verbosity,\n      port: GlobalWorkerOptions.workerPort,\n    };\n    // Worker was not provided -- creating and owning our own. If message port\n    // is specified in global worker options, using it.\n    worker = workerParams.port\n      ? PDFWorker.fromPort(workerParams)\n      : new PDFWorker(workerParams);\n    task._worker = worker;\n  }\n\n  const fetchDocParams = {\n    docId,\n    apiVersion:\n      typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"TESTING\")\n        ? PDFJSDev.eval(\"BUNDLE_VERSION\")\n        : null,\n    data,\n    password,\n    disableAutoFetch,\n    rangeChunkSize,\n    length,\n    docBaseUrl,\n    enableXfa,\n    evaluatorOptions: {\n      maxImageSize,\n      disableFontFace,\n      ignoreErrors,\n      isEvalSupported,\n      isOffscreenCanvasSupported,\n      canvasMaxAreaInBytes,\n      fontExtraProperties,\n      useSystemFonts,\n      cMapUrl: useWorkerFetch ? cMapUrl : null,\n      standardFontDataUrl: useWorkerFetch ? standardFontDataUrl : null,\n    },\n  };\n  const transportParams = {\n    ignoreErrors,\n    isEvalSupported,\n    disableFontFace,\n    fontExtraProperties,\n    enableXfa,\n    ownerDocument,\n    disableAutoFetch,\n    pdfBug,\n    styleElement,\n  };\n\n  worker.promise\n    .then(function () {\n      if (task.destroyed) {\n        throw new Error(\"Loading aborted\");\n      }\n\n      const workerIdPromise = _fetchDocument(worker, fetchDocParams);\n      const networkStreamPromise = new Promise(function (resolve) {\n        let networkStream;\n        if (rangeTransport) {\n          networkStream = new PDFDataTransportStream(\n            {\n              length,\n              initialData: rangeTransport.initialData,\n              progressiveDone: rangeTransport.progressiveDone,\n              contentDispositionFilename:\n                rangeTransport.contentDispositionFilename,\n              disableRange,\n              disableStream,\n            },\n            rangeTransport\n          );\n        } else if (!data) {\n          if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n            throw new Error(\"Not implemented: createPDFNetworkStream\");\n          }\n          const createPDFNetworkStream = params => {\n            if (\n              typeof PDFJSDev !== \"undefined\" &&\n              PDFJSDev.test(\"GENERIC\") &&\n              isNodeJS\n            ) {\n              return new PDFNodeStream(params);\n            }\n            return isValidFetchUrl(params.url)\n              ? new PDFFetchStream(params)\n              : new PDFNetworkStream(params);\n          };\n\n          networkStream = createPDFNetworkStream({\n            url,\n            length,\n            httpHeaders,\n            withCredentials,\n            rangeChunkSize,\n            disableRange,\n            disableStream,\n          });\n        }\n        resolve(networkStream);\n      });\n\n      return Promise.all([workerIdPromise, networkStreamPromise]).then(\n        function ([workerId, networkStream]) {\n          if (task.destroyed) {\n            throw new Error(\"Loading aborted\");\n          }\n\n          const messageHandler = new MessageHandler(\n            docId,\n            workerId,\n            worker.port\n          );\n          const transport = new WorkerTransport(\n            messageHandler,\n            task,\n            networkStream,\n            transportParams,\n            transportFactory\n          );\n          task._transport = transport;\n          messageHandler.send(\"Ready\", null);\n        }\n      );\n    })\n    .catch(task._capability.reject);\n\n  return task;\n}\n\n/**\n * Starts fetching of specified PDF document/data.\n *\n * @param {PDFWorker} worker\n * @param {Object} source\n * @returns {Promise<string>} A promise that is resolved when the worker ID of\n *   the `MessageHandler` is known.\n * @private\n */\nasync function _fetchDocument(worker, source) {\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  const workerId = await worker.messageHandler.sendWithPromise(\n    \"GetDocRequest\",\n    source,\n    source.data ? [source.data.buffer] : null\n  );\n\n  if (worker.destroyed) {\n    throw new Error(\"Worker was destroyed\");\n  }\n  return workerId;\n}\n\nfunction getUrlProp(val) {\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n    return null; // The 'url' is unused with `PDFDataRangeTransport`.\n  }\n  if (val instanceof URL) {\n    return val.href;\n  }\n  try {\n    // The full path is required in the 'url' field.\n    return new URL(val, window.location).href;\n  } catch {\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"GENERIC\") &&\n      isNodeJS &&\n      typeof val === \"string\"\n    ) {\n      return val; // Use the url as-is in Node.js environments.\n    }\n  }\n  throw new Error(\n    \"Invalid PDF url data: \" +\n      \"either string or URL-object is expected in the url property.\"\n  );\n}\n\nfunction getDataProp(val) {\n  // Converting string or array-like data to Uint8Array.\n  if (\n    typeof PDFJSDev !== \"undefined\" &&\n    PDFJSDev.test(\"GENERIC\") &&\n    isNodeJS &&\n    typeof Buffer !== \"undefined\" && // eslint-disable-line no-undef\n    val instanceof Buffer // eslint-disable-line no-undef\n  ) {\n    throw new Error(\n      \"Please provide binary data as `Uint8Array`, rather than `Buffer`.\"\n    );\n  }\n  if (val instanceof Uint8Array && val.byteLength === val.buffer.byteLength) {\n    // Use the data as-is when it's already a Uint8Array that completely\n    // \"utilizes\" its underlying ArrayBuffer, to prevent any possible\n    // issues when transferring it to the worker-thread.\n    return val;\n  }\n  if (typeof val === \"string\") {\n    return stringToBytes(val);\n  }\n  if ((typeof val === \"object\" && !isNaN(val?.length)) || isArrayBuffer(val)) {\n    return new Uint8Array(val);\n  }\n  throw new Error(\n    \"Invalid PDF binary data: either TypedArray, \" +\n      \"string, or array-like object is expected in the data property.\"\n  );\n}\n\n/**\n * @typedef {Object} OnProgressParameters\n * @property {number} loaded - Currently loaded number of bytes.\n * @property {number} total - Total number of bytes in the PDF file.\n */\n\n/**\n * The loading task controls the operations required to load a PDF document\n * (such as network requests) and provides a way to listen for completion,\n * after which individual pages can be rendered.\n */\nclass PDFDocumentLoadingTask {\n  static #docId = 0;\n\n  constructor() {\n    this._capability = new PromiseCapability();\n    this._transport = null;\n    this._worker = null;\n\n    /**\n     * Unique identifier for the document loading task.\n     * @type {string}\n     */\n    this.docId = `d${PDFDocumentLoadingTask.#docId++}`;\n\n    /**\n     * Whether the loading task is destroyed or not.\n     * @type {boolean}\n     */\n    this.destroyed = false;\n\n    /**\n     * Callback to request a password if a wrong or no password was provided.\n     * The callback receives two parameters: a function that should be called\n     * with the new password, and a reason (see {@link PasswordResponses}).\n     * @type {function}\n     */\n    this.onPassword = null;\n\n    /**\n     * Callback to be able to monitor the loading progress of the PDF file\n     * (necessary to implement e.g. a loading bar).\n     * The callback receives an {@link OnProgressParameters} argument.\n     * @type {function}\n     */\n    this.onProgress = null;\n  }\n\n  /**\n   * Promise for document loading task completion.\n   * @type {Promise<PDFDocumentProxy>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Abort all network requests and destroy the worker.\n   * @returns {Promise<void>} A promise that is resolved when destruction is\n   *   completed.\n   */\n  async destroy() {\n    this.destroyed = true;\n    try {\n      if (this._worker?.port) {\n        this._worker._pendingDestroy = true;\n      }\n      await this._transport?.destroy();\n    } catch (ex) {\n      if (this._worker?.port) {\n        delete this._worker._pendingDestroy;\n      }\n      throw ex;\n    }\n\n    this._transport = null;\n    if (this._worker) {\n      this._worker.destroy();\n      this._worker = null;\n    }\n  }\n}\n\n/**\n * Abstract class to support range requests file loading.\n *\n * NOTE: The TypedArrays passed to the constructor and relevant methods below\n * will generally be transferred to the worker-thread. This will help reduce\n * main-thread memory usage, however it will take ownership of the TypedArrays.\n */\nclass PDFDataRangeTransport {\n  /**\n   * @param {number} length\n   * @param {Uint8Array|null} initialData\n   * @param {boolean} [progressiveDone]\n   * @param {string} [contentDispositionFilename]\n   */\n  constructor(\n    length,\n    initialData,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this.length = length;\n    this.initialData = initialData;\n    this.progressiveDone = progressiveDone;\n    this.contentDispositionFilename = contentDispositionFilename;\n\n    this._rangeListeners = [];\n    this._progressListeners = [];\n    this._progressiveReadListeners = [];\n    this._progressiveDoneListeners = [];\n    this._readyCapability = new PromiseCapability();\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addRangeListener(listener) {\n    this._rangeListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressListener(listener) {\n    this._progressListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressiveReadListener(listener) {\n    this._progressiveReadListeners.push(listener);\n  }\n\n  /**\n   * @param {function} listener\n   */\n  addProgressiveDoneListener(listener) {\n    this._progressiveDoneListeners.push(listener);\n  }\n\n  /**\n   * @param {number} begin\n   * @param {Uint8Array|null} chunk\n   */\n  onDataRange(begin, chunk) {\n    for (const listener of this._rangeListeners) {\n      listener(begin, chunk);\n    }\n  }\n\n  /**\n   * @param {number} loaded\n   * @param {number|undefined} total\n   */\n  onDataProgress(loaded, total) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressListeners) {\n        listener(loaded, total);\n      }\n    });\n  }\n\n  /**\n   * @param {Uint8Array|null} chunk\n   */\n  onDataProgressiveRead(chunk) {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveReadListeners) {\n        listener(chunk);\n      }\n    });\n  }\n\n  onDataProgressiveDone() {\n    this._readyCapability.promise.then(() => {\n      for (const listener of this._progressiveDoneListeners) {\n        listener();\n      }\n    });\n  }\n\n  transportReady() {\n    this._readyCapability.resolve();\n  }\n\n  /**\n   * @param {number} begin\n   * @param {number} end\n   */\n  requestDataRange(begin, end) {\n    unreachable(\"Abstract method PDFDataRangeTransport.requestDataRange\");\n  }\n\n  abort() {}\n}\n\n/**\n * Proxy to a `PDFDocument` in the worker thread.\n */\nclass PDFDocumentProxy {\n  constructor(pdfInfo, transport) {\n    this._pdfInfo = pdfInfo;\n    this._transport = transport;\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n      Object.defineProperty(this, \"getJavaScript\", {\n        value: () => {\n          deprecated(\n            \"`PDFDocumentProxy.getJavaScript`, \" +\n              \"please use `PDFDocumentProxy.getJSActions` instead.\"\n          );\n          return this.getJSActions().then(js => {\n            if (!js) {\n              return js;\n            }\n            const jsArr = [];\n            for (const name in js) {\n              jsArr.push(...js[name]);\n            }\n            return jsArr;\n          });\n        },\n      });\n    }\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"getXFADatasets\", {\n        value: () => {\n          return this._transport.getXFADatasets();\n        },\n      });\n      Object.defineProperty(this, \"getXRefPrevValue\", {\n        value: () => {\n          return this._transport.getXRefPrevValue();\n        },\n      });\n      Object.defineProperty(this, \"getAnnotArray\", {\n        value: pageIndex => {\n          return this._transport.getAnnotArray(pageIndex);\n        },\n      });\n    }\n  }\n\n  /**\n   * @type {AnnotationStorage} Storage for annotation data in forms.\n   */\n  get annotationStorage() {\n    return this._transport.annotationStorage;\n  }\n\n  /**\n   * @type {Object} The filter factory instance.\n   */\n  get filterFactory() {\n    return this._transport.filterFactory;\n  }\n\n  /**\n   * @type {number} Total number of pages in the PDF file.\n   */\n  get numPages() {\n    return this._pdfInfo.numPages;\n  }\n\n  /**\n   * @type {Array<string, string|null>} A (not guaranteed to be) unique ID to\n   *   identify the PDF document.\n   *   NOTE: The first element will always be defined for all PDF documents,\n   *   whereas the second element is only defined for *modified* PDF documents.\n   */\n  get fingerprints() {\n    return this._pdfInfo.fingerprints;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n\n  /**\n   * NOTE: This is (mostly) intended to support printing of XFA forms.\n   *\n   * @type {Object | null} An object representing a HTML tree structure\n   *   to render the XFA, or `null` when no XFA form exists.\n   */\n  get allXfaHtml() {\n    return this._transport._htmlForXfa;\n  }\n\n  /**\n   * @param {number} pageNumber - The page number to get. The first page is 1.\n   * @returns {Promise<PDFPageProxy>} A promise that is resolved with\n   *   a {@link PDFPageProxy} object.\n   */\n  getPage(pageNumber) {\n    return this._transport.getPage(pageNumber);\n  }\n\n  /**\n   * @param {RefProxy} ref - The page reference.\n   * @returns {Promise<number>} A promise that is resolved with the page index,\n   *   starting from zero, that is associated with the reference.\n   */\n  getPageIndex(ref) {\n    return this._transport.getPageIndex(ref);\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<any>>>} A promise that is resolved\n   *   with a mapping from named destinations to references.\n   *\n   * This can be slow for large documents. Use `getDestination` instead.\n   */\n  getDestinations() {\n    return this._transport.getDestinations();\n  }\n\n  /**\n   * @param {string} id - The named destination to get.\n   * @returns {Promise<Array<any> | null>} A promise that is resolved with all\n   *   information of the given named destination, or `null` when the named\n   *   destination is not present in the PDF file.\n   */\n  getDestination(id) {\n    return this._transport.getDestination(id);\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with\n   *   an {Array} containing the page labels that correspond to the page\n   *   indexes, or `null` when no page labels are present in the PDF file.\n   */\n  getPageLabels() {\n    return this._transport.getPageLabels();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page layout name.\n   */\n  getPageLayout() {\n    return this._transport.getPageLayout();\n  }\n\n  /**\n   * @returns {Promise<string>} A promise that is resolved with a {string}\n   *   containing the page mode name.\n   */\n  getPageMode() {\n    return this._transport.getPageMode();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with an\n   *   {Object} containing the viewer preferences, or `null` when no viewer\n   *   preferences are present in the PDF file.\n   */\n  getViewerPreferences() {\n    return this._transport.getViewerPreferences();\n  }\n\n  /**\n   * @returns {Promise<any | null>} A promise that is resolved with an {Array}\n   *   containing the destination, or `null` when no open action is present\n   *   in the PDF.\n   */\n  getOpenAction() {\n    return this._transport.getOpenAction();\n  }\n\n  /**\n   * @returns {Promise<any>} A promise that is resolved with a lookup table\n   *   for mapping named attachments to their content.\n   */\n  getAttachments() {\n    return this._transport.getAttachments();\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with the JavaScript actions:\n   *     - from the name tree.\n   *     - from A or AA entries in the catalog dictionary.\n   *   , or `null` if no JavaScript exists.\n   */\n  getJSActions() {\n    return this._transport.getDocJSActions();\n  }\n\n  /**\n   * @typedef {Object} OutlineNode\n   * @property {string} title\n   * @property {boolean} bold\n   * @property {boolean} italic\n   * @property {Uint8ClampedArray} color - The color in RGB format to use for\n   *   display purposes.\n   * @property {string | Array<any> | null} dest\n   * @property {string | null} url\n   * @property {string | undefined} unsafeUrl\n   * @property {boolean | undefined} newWindow\n   * @property {number | undefined} count\n   * @property {Array<OutlineNode>} items\n   */\n\n  /**\n   * @returns {Promise<Array<OutlineNode>>} A promise that is resolved with an\n   *   {Array} that is a tree outline (if it has one) of the PDF file.\n   */\n  getOutline() {\n    return this._transport.getOutline();\n  }\n\n  /**\n   * @returns {Promise<OptionalContentConfig>} A promise that is resolved with\n   *   an {@link OptionalContentConfig} that contains all the optional content\n   *   groups (assuming that the document has any).\n   */\n  getOptionalContentConfig() {\n    return this._transport.getOptionalContentConfig();\n  }\n\n  /**\n   * @returns {Promise<Array<number> | null>} A promise that is resolved with\n   *   an {Array} that contains the permission flags for the PDF document, or\n   *   `null` when no permissions are present in the PDF file.\n   */\n  getPermissions() {\n    return this._transport.getPermissions();\n  }\n\n  /**\n   * @returns {Promise<{ info: Object, metadata: Metadata }>} A promise that is\n   *   resolved with an {Object} that has `info` and `metadata` properties.\n   *   `info` is an {Object} filled with anything available in the information\n   *   dictionary and similarly `metadata` is a {Metadata} object with\n   *   information from the metadata section of the PDF.\n   */\n  getMetadata() {\n    return this._transport.getMetadata();\n  }\n\n  /**\n   * @typedef {Object} MarkInfo\n   * Properties correspond to Table 321 of the PDF 32000-1:2008 spec.\n   * @property {boolean} Marked\n   * @property {boolean} UserProperties\n   * @property {boolean} Suspects\n   */\n\n  /**\n   * @returns {Promise<MarkInfo | null>} A promise that is resolved with\n   *   a {MarkInfo} object that contains the MarkInfo flags for the PDF\n   *   document, or `null` when no MarkInfo values are present in the PDF file.\n   */\n  getMarkInfo() {\n    return this._transport.getMarkInfo();\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the raw data of the PDF document.\n   */\n  getData() {\n    return this._transport.getData();\n  }\n\n  /**\n   * @returns {Promise<Uint8Array>} A promise that is resolved with a\n   *   {Uint8Array} containing the full data of the saved document.\n   */\n  saveDocument() {\n    return this._transport.saveDocument();\n  }\n\n  /**\n   * @returns {Promise<{ length: number }>} A promise that is resolved when the\n   *   document's data is loaded. It is resolved with an {Object} that contains\n   *   the `length` property that indicates size of the PDF data in bytes.\n   */\n  getDownloadInfo() {\n    return this._transport.downloadInfoCapability.promise;\n  }\n\n  /**\n   * Cleans up resources allocated by the document on both the main and worker\n   * threads.\n   *\n   * NOTE: Do not, under any circumstances, call this method when rendering is\n   * currently ongoing since that may lead to rendering errors.\n   *\n   * @param {boolean} [keepLoadedFonts] - Let fonts remain attached to the DOM.\n   *   NOTE: This will increase persistent memory usage, hence don't use this\n   *   option unless absolutely necessary. The default value is `false`.\n   * @returns {Promise} A promise that is resolved when clean-up has finished.\n   */\n  cleanup(keepLoadedFonts = false) {\n    return this._transport.startCleanup(keepLoadedFonts || this.isPureXfa);\n  }\n\n  /**\n   * Destroys the current document instance and terminates the worker.\n   */\n  destroy() {\n    return this.loadingTask.destroy();\n  }\n\n  /**\n   * @type {DocumentInitParameters} A subset of the current\n   *   {DocumentInitParameters}, which are needed in the viewer.\n   */\n  get loadingParams() {\n    return this._transport.loadingParams;\n  }\n\n  /**\n   * @type {PDFDocumentLoadingTask} The loadingTask for the current document.\n   */\n  get loadingTask() {\n    return this._transport.loadingTask;\n  }\n\n  /**\n   * @returns {Promise<Object<string, Array<Object>> | null>} A promise that is\n   *   resolved with an {Object} containing /AcroForm field data for the JS\n   *   sandbox, or `null` when no field data is present in the PDF file.\n   */\n  getFieldObjects() {\n    return this._transport.getFieldObjects();\n  }\n\n  /**\n   * @returns {Promise<boolean>} A promise that is resolved with `true`\n   *   if some /AcroForm fields have JavaScript actions.\n   */\n  hasJSActions() {\n    return this._transport.hasJSActions();\n  }\n\n  /**\n   * @returns {Promise<Array<string> | null>} A promise that is resolved with an\n   *   {Array<string>} containing IDs of annotations that have a calculation\n   *   action, or `null` when no such annotations are present in the PDF file.\n   */\n  getCalculationOrderIds() {\n    return this._transport.getCalculationOrderIds();\n  }\n}\n\n/**\n * Page getViewport parameters.\n *\n * @typedef {Object} GetViewportParameters\n * @property {number} scale - The desired scale of the viewport.\n * @property {number} [rotation] - The desired rotation, in degrees, of\n *   the viewport. If omitted it defaults to the page rotation.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be\n *   flipped. The default value is `false`.\n */\n\n/**\n * Page getTextContent parameters.\n *\n * @typedef {Object} getTextContentParameters\n * @property {boolean} [includeMarkedContent] - When true include marked\n *   content items in the items array of TextContent. The default is `false`.\n * @property {boolean} [disableNormalization] - When true the text is *not*\n *   normalized in the worker-thread. The default is `false`.\n */\n\n/**\n * Page text content.\n *\n * @typedef {Object} TextContent\n * @property {Array<TextItem | TextMarkedContent>} items - Array of\n *   {@link TextItem} and {@link TextMarkedContent} objects. TextMarkedContent\n *   items are included when includeMarkedContent is true.\n * @property {Object<string, TextStyle>} styles - {@link TextStyle} objects,\n *   indexed by font name.\n */\n\n/**\n * Page text content part.\n *\n * @typedef {Object} TextItem\n * @property {string} str - Text content.\n * @property {string} dir - Text direction: 'ttb', 'ltr' or 'rtl'.\n * @property {Array<any>} transform - Transformation matrix.\n * @property {number} width - Width in device space.\n * @property {number} height - Height in device space.\n * @property {string} fontName - Font name used by PDF.js for converted font.\n * @property {boolean} hasEOL - Indicating if the text content is followed by a\n *   line-break.\n */\n\n/**\n * Page text marked content part.\n *\n * @typedef {Object} TextMarkedContent\n * @property {string} type - Either 'beginMarkedContent',\n *   'beginMarkedContentProps', or 'endMarkedContent'.\n * @property {string} id - The marked content identifier. Only used for type\n *   'beginMarkedContentProps'.\n */\n\n/**\n * Text style.\n *\n * @typedef {Object} TextStyle\n * @property {number} ascent - Font ascent.\n * @property {number} descent - Font descent.\n * @property {boolean} vertical - Whether or not the text is in vertical mode.\n * @property {string} fontFamily - The possible font family.\n */\n\n/**\n * Page annotation parameters.\n *\n * @typedef {Object} GetAnnotationsParameters\n * @property {string} [intent] - Determines the annotations that are fetched,\n *   can be 'display' (viewable annotations), 'print' (printable annotations),\n *   or 'any' (all annotations). The default value is 'display'.\n */\n\n/**\n * Page render parameters.\n *\n * @typedef {Object} RenderParameters\n * @property {CanvasRenderingContext2D} canvasContext - A 2D context of a DOM\n *   Canvas object.\n * @property {PageViewport} viewport - Rendering viewport obtained by calling\n *   the `PDFPageProxy.getViewport` method.\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are rendered\n *   onto the canvas, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {Array<any>} [transform] - Additional transform, applied just\n *   before viewport transform.\n * @property {CanvasGradient | CanvasPattern | string} [background] - Background\n *   to use for the canvas.\n *   Any valid `canvas.fillStyle` can be used: a `DOMString` parsed as CSS\n *   <color> value, a `CanvasGradient` object (a linear or radial gradient) or\n *   a `CanvasPattern` object (a repetitive image). The default value is\n *   'rgb(255,255,255)'.\n *\n *   NOTE: This option may be partially, or completely, ignored when the\n *   `pageColors`-option is used.\n * @property {Object} [pageColors] - Overwrites background and foreground colors\n *   with user defined ones in order to improve readability in high contrast\n *   mode.\n * @property {Promise<OptionalContentConfig>} [optionalContentConfigPromise] -\n *   A promise that should resolve with an {@link OptionalContentConfig}\n *   created from `PDFDocumentProxy.getOptionalContentConfig`. If `null`,\n *   the configuration will be fetched automatically with the default visibility\n *   states set.\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap] - Map some\n *   annotation ids with canvases used to render them.\n * @property {PrintAnnotationStorage} [printAnnotationStorage]\n */\n\n/**\n * Page getOperatorList parameters.\n *\n * @typedef {Object} GetOperatorListParameters\n * @property {string} [intent] - Rendering intent, can be 'display', 'print',\n *   or 'any'. The default value is 'display'.\n * @property {number} [annotationMode] Controls which annotations are included\n *   in the operatorList, for annotations with appearance-data; the values from\n *   {@link AnnotationMode} should be used. The following values are supported:\n *    - `AnnotationMode.DISABLE`, which disables all annotations.\n *    - `AnnotationMode.ENABLE`, which includes all possible annotations (thus\n *      it also depends on the `intent`-option, see above).\n *    - `AnnotationMode.ENABLE_FORMS`, which excludes annotations that contain\n *      interactive form elements (those will be rendered in the display layer).\n *    - `AnnotationMode.ENABLE_STORAGE`, which includes all possible annotations\n *      (as above) but where interactive form elements are updated with data\n *      from the {@link AnnotationStorage}-instance; useful e.g. for printing.\n *   The default value is `AnnotationMode.ENABLE`.\n * @property {PrintAnnotationStorage} [printAnnotationStorage]\n */\n\n/**\n * Structure tree node. The root node will have a role \"Root\".\n *\n * @typedef {Object} StructTreeNode\n * @property {Array<StructTreeNode | StructTreeContent>} children - Array of\n *   {@link StructTreeNode} and {@link StructTreeContent} objects.\n * @property {string} role - element's role, already mapped if a role map exists\n * in the PDF.\n */\n\n/**\n * Structure tree content.\n *\n * @typedef {Object} StructTreeContent\n * @property {string} type - either \"content\" for page and stream structure\n *   elements or \"object\" for object references.\n * @property {string} id - unique id that will map to the text layer.\n */\n\n/**\n * PDF page operator list.\n *\n * @typedef {Object} PDFOperatorList\n * @property {Array<number>} fnArray - Array containing the operator functions.\n * @property {Array<any>} argsArray - Array containing the arguments of the\n *   functions.\n */\n\n/**\n * Proxy to a `PDFPage` in the worker thread.\n */\nclass PDFPageProxy {\n  #delayedCleanupTimeout = null;\n\n  #pendingCleanup = false;\n\n  constructor(pageIndex, pageInfo, transport, pdfBug = false) {\n    this._pageIndex = pageIndex;\n    this._pageInfo = pageInfo;\n    this._transport = transport;\n    this._stats = pdfBug ? new StatTimer() : null;\n    this._pdfBug = pdfBug;\n    /** @type {PDFObjects} */\n    this.commonObjs = transport.commonObjs;\n    this.objs = new PDFObjects();\n\n    this._maybeCleanupAfterRender = false;\n    this._intentStates = new Map();\n    this.destroyed = false;\n  }\n\n  /**\n   * @type {number} Page number of the page. First page is 1.\n   */\n  get pageNumber() {\n    return this._pageIndex + 1;\n  }\n\n  /**\n   * @type {number} The number of degrees the page is rotated clockwise.\n   */\n  get rotate() {\n    return this._pageInfo.rotate;\n  }\n\n  /**\n   * @type {RefProxy | null} The reference that points to this page.\n   */\n  get ref() {\n    return this._pageInfo.ref;\n  }\n\n  /**\n   * @type {number} The default size of units in 1/72nds of an inch.\n   */\n  get userUnit() {\n    return this._pageInfo.userUnit;\n  }\n\n  /**\n   * @type {Array<number>} An array of the visible portion of the PDF page in\n   *   user space units [x1, y1, x2, y2].\n   */\n  get view() {\n    return this._pageInfo.view;\n  }\n\n  /**\n   * @param {GetViewportParameters} params - Viewport parameters.\n   * @returns {PageViewport} Contains 'width' and 'height' properties\n   *   along with transforms required for rendering.\n   */\n  getViewport({\n    scale,\n    rotation = this.rotate,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.view,\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * @param {GetAnnotationsParameters} params - Annotation parameters.\n   * @returns {Promise<Array<any>>} A promise that is resolved with an\n   *   {Array} of the annotation objects.\n   */\n  getAnnotations({ intent = \"display\" } = {}) {\n    const intentArgs = this._transport.getRenderingIntent(intent);\n\n    return this._transport.getAnnotations(\n      this._pageIndex,\n      intentArgs.renderingIntent\n    );\n  }\n\n  /**\n   * @returns {Promise<Object>} A promise that is resolved with an\n   *   {Object} with JS actions.\n   */\n  getJSActions() {\n    return this._transport.getPageJSActions(this._pageIndex);\n  }\n\n  /**\n   * @type {Object} The filter factory instance.\n   */\n  get filterFactory() {\n    return this._transport.filterFactory;\n  }\n\n  /**\n   * @type {boolean} True if only XFA form.\n   */\n  get isPureXfa() {\n    return shadow(this, \"isPureXfa\", !!this._transport._htmlForXfa);\n  }\n\n  /**\n   * @returns {Promise<Object | null>} A promise that is resolved with\n   *   an {Object} with a fake DOM object (a tree structure where elements\n   *   are {Object} with a name, attributes (class, style, ...), value and\n   *   children, very similar to a HTML DOM tree), or `null` if no XFA exists.\n   */\n  async getXfa() {\n    return this._transport._htmlForXfa?.children[this._pageIndex] || null;\n  }\n\n  /**\n   * Begins the process of rendering a page to the desired context.\n   *\n   * @param {RenderParameters} params - Page render parameters.\n   * @returns {RenderTask} An object that contains a promise that is\n   *   resolved when the page finishes rendering.\n   */\n  render({\n    canvasContext,\n    viewport,\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    transform = null,\n    background = null,\n    optionalContentConfigPromise = null,\n    annotationCanvasMap = null,\n    pageColors = null,\n    printAnnotationStorage = null,\n  }) {\n    this._stats?.time(\"Overall\");\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      printAnnotationStorage\n    );\n    // If there was a pending destroy, cancel it so no cleanup happens during\n    // this call to render...\n    this.#pendingCleanup = false;\n    // ... and ensure that a delayed cleanup is always aborted.\n    this.#abortDelayedCleanup();\n\n    if (!optionalContentConfigPromise) {\n      optionalContentConfigPromise = this._transport.getOptionalContentConfig();\n    }\n\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    const intentPrint = !!(\n      intentArgs.renderingIntent & RenderingIntentFlag.PRINT\n    );\n\n    // If there's no displayReadyCapability yet, then the operatorList\n    // was never requested before. Make the request and create the promise.\n    if (!intentState.displayReadyCapability) {\n      intentState.displayReadyCapability = new PromiseCapability();\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null,\n      };\n\n      this._stats?.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n\n    const complete = error => {\n      intentState.renderTasks.delete(internalRenderTask);\n\n      // Attempt to reduce memory usage during *printing*, by always running\n      // cleanup immediately once rendering has finished.\n      if (this._maybeCleanupAfterRender || intentPrint) {\n        this.#pendingCleanup = true;\n      }\n      this.#tryCleanup(/* delayed = */ !intentPrint);\n\n      if (error) {\n        internalRenderTask.capability.reject(error);\n\n        this._abortOperatorList({\n          intentState,\n          reason: error instanceof Error ? error : new Error(error),\n        });\n      } else {\n        internalRenderTask.capability.resolve();\n      }\n\n      this._stats?.timeEnd(\"Rendering\");\n      this._stats?.timeEnd(\"Overall\");\n    };\n\n    const internalRenderTask = new InternalRenderTask({\n      callback: complete,\n      // Only include the required properties, and *not* the entire object.\n      params: {\n        canvasContext,\n        viewport,\n        transform,\n        background,\n      },\n      objs: this.objs,\n      commonObjs: this.commonObjs,\n      annotationCanvasMap,\n      operatorList: intentState.operatorList,\n      pageIndex: this._pageIndex,\n      canvasFactory: this._transport.canvasFactory,\n      filterFactory: this._transport.filterFactory,\n      useRequestAnimationFrame: !intentPrint,\n      pdfBug: this._pdfBug,\n      pageColors,\n    });\n\n    (intentState.renderTasks ||= new Set()).add(internalRenderTask);\n    const renderTask = internalRenderTask.task;\n\n    Promise.all([\n      intentState.displayReadyCapability.promise,\n      optionalContentConfigPromise,\n    ])\n      .then(([transparency, optionalContentConfig]) => {\n        if (this.destroyed) {\n          complete();\n          return;\n        }\n        this._stats?.time(\"Rendering\");\n\n        internalRenderTask.initializeGraphics({\n          transparency,\n          optionalContentConfig,\n        });\n        internalRenderTask.operatorListChanged();\n      })\n      .catch(complete);\n\n    return renderTask;\n  }\n\n  /**\n   * @param {GetOperatorListParameters} params - Page getOperatorList\n   *   parameters.\n   * @returns {Promise<PDFOperatorList>} A promise resolved with an\n   *   {@link PDFOperatorList} object that represents the page's operator list.\n   */\n  getOperatorList({\n    intent = \"display\",\n    annotationMode = AnnotationMode.ENABLE,\n    printAnnotationStorage = null,\n  } = {}) {\n    if (typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"GENERIC\")) {\n      throw new Error(\"Not implemented: getOperatorList\");\n    }\n    function operatorListChanged() {\n      if (intentState.operatorList.lastChunk) {\n        intentState.opListReadCapability.resolve(intentState.operatorList);\n\n        intentState.renderTasks.delete(opListTask);\n      }\n    }\n\n    const intentArgs = this._transport.getRenderingIntent(\n      intent,\n      annotationMode,\n      printAnnotationStorage,\n      /* isOpList = */ true\n    );\n    let intentState = this._intentStates.get(intentArgs.cacheKey);\n    if (!intentState) {\n      intentState = Object.create(null);\n      this._intentStates.set(intentArgs.cacheKey, intentState);\n    }\n    let opListTask;\n\n    if (!intentState.opListReadCapability) {\n      opListTask = Object.create(null);\n      opListTask.operatorListChanged = operatorListChanged;\n      intentState.opListReadCapability = new PromiseCapability();\n      (intentState.renderTasks ||= new Set()).add(opListTask);\n      intentState.operatorList = {\n        fnArray: [],\n        argsArray: [],\n        lastChunk: false,\n        separateAnnots: null,\n      };\n\n      this._stats?.time(\"Page Request\");\n      this._pumpOperatorList(intentArgs);\n    }\n    return intentState.opListReadCapability.promise;\n  }\n\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {ReadableStream} Stream for reading text content chunks.\n   */\n  streamTextContent({\n    includeMarkedContent = false,\n    disableNormalization = false,\n  } = {}) {\n    const TEXT_CONTENT_CHUNK_SIZE = 100;\n\n    return this._transport.messageHandler.sendWithStream(\n      \"GetTextContent\",\n      {\n        pageIndex: this._pageIndex,\n        includeMarkedContent: includeMarkedContent === true,\n        disableNormalization: disableNormalization === true,\n      },\n      {\n        highWaterMark: TEXT_CONTENT_CHUNK_SIZE,\n        size(textContent) {\n          return textContent.items.length;\n        },\n      }\n    );\n  }\n\n  /**\n   * NOTE: All occurrences of whitespace will be replaced by\n   * standard spaces (0x20).\n   *\n   * @param {getTextContentParameters} params - getTextContent parameters.\n   * @returns {Promise<TextContent>} A promise that is resolved with a\n   *   {@link TextContent} object that represents the page's text content.\n   */\n  getTextContent(params = {}) {\n    if (this._transport._htmlForXfa) {\n      // TODO: We need to revisit this once the XFA foreground patch lands and\n      // only do this for non-foreground XFA.\n      return this.getXfa().then(xfa => {\n        return XfaText.textContent(xfa);\n      });\n    }\n    const readableStream = this.streamTextContent(params);\n\n    return new Promise(function (resolve, reject) {\n      function pump() {\n        reader.read().then(function ({ value, done }) {\n          if (done) {\n            resolve(textContent);\n            return;\n          }\n          Object.assign(textContent.styles, value.styles);\n          textContent.items.push(...value.items);\n          pump();\n        }, reject);\n      }\n\n      const reader = readableStream.getReader();\n      const textContent = {\n        items: [],\n        styles: Object.create(null),\n      };\n      pump();\n    });\n  }\n\n  /**\n   * @returns {Promise<StructTreeNode>} A promise that is resolved with a\n   *   {@link StructTreeNode} object that represents the page's structure tree,\n   *   or `null` when no structure tree is present for the current page.\n   */\n  getStructTree() {\n    return this._transport.getStructTree(this._pageIndex);\n  }\n\n  /**\n   * Destroys the page object.\n   * @private\n   */\n  _destroy() {\n    this.destroyed = true;\n\n    const waitOn = [];\n    for (const intentState of this._intentStates.values()) {\n      this._abortOperatorList({\n        intentState,\n        reason: new Error(\"Page was destroyed.\"),\n        force: true,\n      });\n\n      if (intentState.opListReadCapability) {\n        // Avoid errors below, since the renderTasks are just stubs.\n        continue;\n      }\n      for (const internalRenderTask of intentState.renderTasks) {\n        waitOn.push(internalRenderTask.completed);\n        internalRenderTask.cancel();\n      }\n    }\n    this.objs.clear();\n    this.#pendingCleanup = false;\n    this.#abortDelayedCleanup();\n\n    return Promise.all(waitOn);\n  }\n\n  /**\n   * Cleans up resources allocated by the page.\n   *\n   * @param {boolean} [resetStats] - Reset page stats, if enabled.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  cleanup(resetStats = false) {\n    this.#pendingCleanup = true;\n    const success = this.#tryCleanup(/* delayed = */ false);\n\n    if (resetStats && success) {\n      this._stats &&= new StatTimer();\n    }\n    return success;\n  }\n\n  /**\n   * Attempts to clean up if rendering is in a state where that's possible.\n   * @param {boolean} [delayed] - Delay the cleanup, to e.g. improve zooming\n   *   performance in documents with large images.\n   *   The default value is `false`.\n   * @returns {boolean} Indicates if clean-up was successfully run.\n   */\n  #tryCleanup(delayed = false) {\n    this.#abortDelayedCleanup();\n\n    if (!this.#pendingCleanup || this.destroyed) {\n      return false;\n    }\n    if (delayed) {\n      this.#delayedCleanupTimeout = setTimeout(() => {\n        this.#delayedCleanupTimeout = null;\n        this.#tryCleanup(/* delayed = */ false);\n      }, DELAYED_CLEANUP_TIMEOUT);\n\n      return false;\n    }\n    for (const { renderTasks, operatorList } of this._intentStates.values()) {\n      if (renderTasks.size > 0 || !operatorList.lastChunk) {\n        return false;\n      }\n    }\n    this._intentStates.clear();\n    this.objs.clear();\n    this.#pendingCleanup = false;\n    return true;\n  }\n\n  #abortDelayedCleanup() {\n    if (this.#delayedCleanupTimeout) {\n      clearTimeout(this.#delayedCleanupTimeout);\n      this.#delayedCleanupTimeout = null;\n    }\n  }\n\n  /**\n   * @private\n   */\n  _startRenderPage(transparency, cacheKey) {\n    const intentState = this._intentStates.get(cacheKey);\n    if (!intentState) {\n      return; // Rendering was cancelled.\n    }\n    this._stats?.timeEnd(\"Page Request\");\n\n    // TODO Refactor RenderPageRequest to separate rendering\n    // and operator list logic\n    intentState.displayReadyCapability?.resolve(transparency);\n  }\n\n  /**\n   * @private\n   */\n  _renderPageChunk(operatorListChunk, intentState) {\n    // Add the new chunk to the current operator list.\n    for (let i = 0, ii = operatorListChunk.length; i < ii; i++) {\n      intentState.operatorList.fnArray.push(operatorListChunk.fnArray[i]);\n      intentState.operatorList.argsArray.push(operatorListChunk.argsArray[i]);\n    }\n    intentState.operatorList.lastChunk = operatorListChunk.lastChunk;\n    intentState.operatorList.separateAnnots = operatorListChunk.separateAnnots;\n\n    // Notify all the rendering tasks there are more operators to be consumed.\n    for (const internalRenderTask of intentState.renderTasks) {\n      internalRenderTask.operatorListChanged();\n    }\n\n    if (operatorListChunk.lastChunk) {\n      this.#tryCleanup(/* delayed = */ true);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _pumpOperatorList({\n    renderingIntent,\n    cacheKey,\n    annotationStorageSerializable,\n  }) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        Number.isInteger(renderingIntent) && renderingIntent > 0,\n        '_pumpOperatorList: Expected valid \"renderingIntent\" argument.'\n      );\n    }\n    const { map, transfers } = annotationStorageSerializable;\n\n    const readableStream = this._transport.messageHandler.sendWithStream(\n      \"GetOperatorList\",\n      {\n        pageIndex: this._pageIndex,\n        intent: renderingIntent,\n        cacheKey,\n        annotationStorage: map,\n      },\n      transfers\n    );\n    const reader = readableStream.getReader();\n\n    const intentState = this._intentStates.get(cacheKey);\n    intentState.streamReader = reader;\n\n    const pump = () => {\n      reader.read().then(\n        ({ value, done }) => {\n          if (done) {\n            intentState.streamReader = null;\n            return;\n          }\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          this._renderPageChunk(value, intentState);\n          pump();\n        },\n        reason => {\n          intentState.streamReader = null;\n\n          if (this._transport.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          if (intentState.operatorList) {\n            // Mark operator list as complete.\n            intentState.operatorList.lastChunk = true;\n\n            for (const internalRenderTask of intentState.renderTasks) {\n              internalRenderTask.operatorListChanged();\n            }\n            this.#tryCleanup(/* delayed = */ true);\n          }\n\n          if (intentState.displayReadyCapability) {\n            intentState.displayReadyCapability.reject(reason);\n          } else if (intentState.opListReadCapability) {\n            intentState.opListReadCapability.reject(reason);\n          } else {\n            throw reason;\n          }\n        }\n      );\n    };\n    pump();\n  }\n\n  /**\n   * @private\n   */\n  _abortOperatorList({ intentState, reason, force = false }) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        reason instanceof Error,\n        '_abortOperatorList: Expected valid \"reason\" argument.'\n      );\n    }\n\n    if (!intentState.streamReader) {\n      return;\n    }\n    // Ensure that a pending `streamReader` cancel timeout is always aborted.\n    if (intentState.streamReaderCancelTimeout) {\n      clearTimeout(intentState.streamReaderCancelTimeout);\n      intentState.streamReaderCancelTimeout = null;\n    }\n\n    if (!force) {\n      // Ensure that an Error occurring in *only* one `InternalRenderTask`, e.g.\n      // multiple render() calls on the same canvas, won't break all rendering.\n      if (intentState.renderTasks.size > 0) {\n        return;\n      }\n      // Don't immediately abort parsing on the worker-thread when rendering is\n      // cancelled, since that will unnecessarily delay re-rendering when (for\n      // partially parsed pages) e.g. zooming/rotation occurs in the viewer.\n      if (reason instanceof RenderingCancelledException) {\n        let delay = RENDERING_CANCELLED_TIMEOUT;\n        if (reason.extraDelay > 0 && reason.extraDelay < /* ms = */ 1000) {\n          // Above, we prevent the total delay from becoming arbitrarily large.\n          delay += reason.extraDelay;\n        }\n\n        intentState.streamReaderCancelTimeout = setTimeout(() => {\n          intentState.streamReaderCancelTimeout = null;\n          this._abortOperatorList({ intentState, reason, force: true });\n        }, delay);\n        return;\n      }\n    }\n    intentState.streamReader\n      .cancel(new AbortException(reason.message))\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n    intentState.streamReader = null;\n\n    if (this._transport.destroyed) {\n      return; // Ignore any pending requests if the worker was terminated.\n    }\n    // Remove the current `intentState`, since a cancelled `getOperatorList`\n    // call on the worker-thread cannot be re-started...\n    for (const [curCacheKey, curIntentState] of this._intentStates) {\n      if (curIntentState === intentState) {\n        this._intentStates.delete(curCacheKey);\n        break;\n      }\n    }\n    // ... and force clean-up to ensure that any old state is always removed.\n    this.cleanup();\n  }\n\n  /**\n   * @type {StatTimer | null} Returns page stats, if enabled; returns `null`\n   *   otherwise.\n   */\n  get stats() {\n    return this._stats;\n  }\n}\n\nclass LoopbackPort {\n  #listeners = new Set();\n\n  #deferred = Promise.resolve();\n\n  postMessage(obj, transfer) {\n    const event = {\n      data: structuredClone(\n        obj,\n        (typeof PDFJSDev === \"undefined\" ||\n          PDFJSDev.test(\"SKIP_BABEL || TESTING\")) &&\n          transfer\n          ? { transfer }\n          : null\n      ),\n    };\n\n    this.#deferred.then(() => {\n      for (const listener of this.#listeners) {\n        listener.call(this, event);\n      }\n    });\n  }\n\n  addEventListener(name, listener) {\n    this.#listeners.add(listener);\n  }\n\n  removeEventListener(name, listener) {\n    this.#listeners.delete(listener);\n  }\n\n  terminate() {\n    this.#listeners.clear();\n  }\n}\n\n/**\n * @typedef {Object} PDFWorkerParameters\n * @property {string} [name] - The name of the worker.\n * @property {Worker} [port] - The `workerPort` object.\n * @property {number} [verbosity] - Controls the logging level;\n *   the constants from {@link VerbosityLevel} should be used.\n */\n\nconst PDFWorkerUtil = {\n  isWorkerDisabled: false,\n  fallbackWorkerSrc: null,\n  fakeWorkerId: 0,\n};\nif (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) {\n  // eslint-disable-next-line no-undef\n  if (isNodeJS && typeof __non_webpack_require__ === \"function\") {\n    // Workers aren't supported in Node.js, force-disabling them there.\n    PDFWorkerUtil.isWorkerDisabled = true;\n\n    PDFWorkerUtil.fallbackWorkerSrc = PDFJSDev.test(\"LIB\")\n      ? \"../pdf.worker.js\"\n      : \"./pdf.worker.js\";\n  } else if (typeof document === \"object\") {\n    const pdfjsFilePath = document?.currentScript?.src;\n    if (pdfjsFilePath) {\n      PDFWorkerUtil.fallbackWorkerSrc = pdfjsFilePath.replace(\n        /(\\.(?:min\\.)?js)(\\?.*)?$/i,\n        \".worker$1$2\"\n      );\n    }\n  }\n\n  // Check if URLs have the same origin. For non-HTTP based URLs, returns false.\n  PDFWorkerUtil.isSameOrigin = function (baseUrl, otherUrl) {\n    let base;\n    try {\n      base = new URL(baseUrl);\n      if (!base.origin || base.origin === \"null\") {\n        return false; // non-HTTP url\n      }\n    } catch {\n      return false;\n    }\n\n    const other = new URL(otherUrl, base);\n    return base.origin === other.origin;\n  };\n\n  PDFWorkerUtil.createCDNWrapper = function (url) {\n    // We will rely on blob URL's property to specify origin.\n    // We want this function to fail in case if createObjectURL or Blob do not\n    // exist or fail for some reason -- our Worker creation will fail anyway.\n    const wrapper = `importScripts(\"${url}\");`;\n    return URL.createObjectURL(new Blob([wrapper]));\n  };\n}\n\n/**\n * PDF.js web worker abstraction that controls the instantiation of PDF\n * documents. Message handlers are used to pass information from the main\n * thread to the worker thread and vice versa. If the creation of a web\n * worker is not possible, a \"fake\" worker will be used instead.\n *\n * @param {PDFWorkerParameters} params - The worker initialization parameters.\n */\nclass PDFWorker {\n  static #workerPorts;\n\n  constructor({\n    name = null,\n    port = null,\n    verbosity = getVerbosityLevel(),\n  } = {}) {\n    this.name = name;\n    this.destroyed = false;\n    this.verbosity = verbosity;\n\n    this._readyCapability = new PromiseCapability();\n    this._port = null;\n    this._webWorker = null;\n    this._messageHandler = null;\n\n    if (\n      (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"MOZCENTRAL\")) &&\n      port\n    ) {\n      if (PDFWorker.#workerPorts?.has(port)) {\n        throw new Error(\"Cannot use more than one PDFWorker per port.\");\n      }\n      (PDFWorker.#workerPorts ||= new WeakMap()).set(port, this);\n      this._initializeFromPort(port);\n      return;\n    }\n    this._initialize();\n  }\n\n  /**\n   * Promise for worker initialization completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._readyCapability.promise;\n  }\n\n  /**\n   * The current `workerPort`, when it exists.\n   * @type {Worker}\n   */\n  get port() {\n    return this._port;\n  }\n\n  /**\n   * The current MessageHandler-instance.\n   * @type {MessageHandler}\n   */\n  get messageHandler() {\n    return this._messageHandler;\n  }\n\n  _initializeFromPort(port) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _initializeFromPort\");\n    }\n    this._port = port;\n    this._messageHandler = new MessageHandler(\"main\", \"worker\", port);\n    this._messageHandler.on(\"ready\", function () {\n      // Ignoring \"ready\" event -- MessageHandler should already be initialized\n      // and ready to accept messages.\n    });\n    this._readyCapability.resolve();\n    // Send global setting, e.g. verbosity level.\n    this._messageHandler.send(\"configure\", {\n      verbosity: this.verbosity,\n    });\n  }\n\n  _initialize() {\n    // If worker support isn't disabled explicit and the browser has worker\n    // support, create a new web worker and test if it/the browser fulfills\n    // all requirements to run parts of pdf.js in a web worker.\n    // Right now, the requirement is, that an Uint8Array is still an\n    // Uint8Array as it arrives on the worker. (Chrome added this with v.15.)\n    if (\n      !PDFWorkerUtil.isWorkerDisabled &&\n      !PDFWorker._mainThreadWorkerMessageHandler\n    ) {\n      let { workerSrc } = PDFWorker;\n\n      try {\n        // Wraps workerSrc path into blob URL, if the former does not belong\n        // to the same origin.\n        if (\n          typeof PDFJSDev !== \"undefined\" &&\n          PDFJSDev.test(\"GENERIC\") &&\n          !PDFWorkerUtil.isSameOrigin(window.location.href, workerSrc)\n        ) {\n          workerSrc = PDFWorkerUtil.createCDNWrapper(\n            new URL(workerSrc, window.location).href\n          );\n        }\n\n        const worker =\n          typeof PDFJSDev === \"undefined\" &&\n          !workerSrc.endsWith(\"/build/pdf.worker.js\")\n            ? new Worker(workerSrc, { type: \"module\" })\n            : new Worker(workerSrc);\n        const messageHandler = new MessageHandler(\"main\", \"worker\", worker);\n        const terminateEarly = () => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          messageHandler.destroy();\n          worker.terminate();\n          if (this.destroyed) {\n            this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          } else {\n            // Fall back to fake worker if the termination is caused by an\n            // error (e.g. NetworkError / SecurityError).\n            this._setupFakeWorker();\n          }\n        };\n\n        const onWorkerError = () => {\n          if (!this._webWorker) {\n            // Worker failed to initialize due to an error. Clean up and fall\n            // back to the fake worker.\n            terminateEarly();\n          }\n        };\n        worker.addEventListener(\"error\", onWorkerError);\n\n        messageHandler.on(\"test\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          if (data) {\n            this._messageHandler = messageHandler;\n            this._port = worker;\n            this._webWorker = worker;\n\n            this._readyCapability.resolve();\n            // Send global setting, e.g. verbosity level.\n            messageHandler.send(\"configure\", {\n              verbosity: this.verbosity,\n            });\n          } else {\n            this._setupFakeWorker();\n            messageHandler.destroy();\n            worker.terminate();\n          }\n        });\n\n        messageHandler.on(\"ready\", data => {\n          worker.removeEventListener(\"error\", onWorkerError);\n          if (this.destroyed) {\n            terminateEarly();\n            return; // worker was destroyed\n          }\n          try {\n            sendTest();\n          } catch {\n            // We need fallback to a faked worker.\n            this._setupFakeWorker();\n          }\n        });\n\n        const sendTest = () => {\n          const testObj = new Uint8Array();\n          // Ensure that we can use `postMessage` transfers.\n          messageHandler.send(\"test\", testObj, [testObj.buffer]);\n        };\n\n        // It might take time for the worker to initialize. We will try to send\n        // the \"test\" message immediately, and once the \"ready\" message arrives.\n        // The worker shall process only the first received \"test\" message.\n        sendTest();\n        return;\n      } catch {\n        info(\"The worker has been disabled.\");\n      }\n    }\n    // Either workers are disabled, not supported or have thrown an exception.\n    // Thus, we fallback to a faked worker.\n    this._setupFakeWorker();\n  }\n\n  _setupFakeWorker() {\n    if (!PDFWorkerUtil.isWorkerDisabled) {\n      warn(\"Setting up fake worker.\");\n      PDFWorkerUtil.isWorkerDisabled = true;\n    }\n\n    PDFWorker._setupFakeWorkerGlobal\n      .then(WorkerMessageHandler => {\n        if (this.destroyed) {\n          this._readyCapability.reject(new Error(\"Worker was destroyed\"));\n          return;\n        }\n        const port = new LoopbackPort();\n        this._port = port;\n\n        // All fake workers use the same port, making id unique.\n        const id = `fake${PDFWorkerUtil.fakeWorkerId++}`;\n\n        // If the main thread is our worker, setup the handling for the\n        // messages -- the main thread sends to it self.\n        const workerHandler = new MessageHandler(id + \"_worker\", id, port);\n        WorkerMessageHandler.setup(workerHandler, port);\n\n        const messageHandler = new MessageHandler(id, id + \"_worker\", port);\n        this._messageHandler = messageHandler;\n        this._readyCapability.resolve();\n        // Send global setting, e.g. verbosity level.\n        messageHandler.send(\"configure\", {\n          verbosity: this.verbosity,\n        });\n      })\n      .catch(reason => {\n        this._readyCapability.reject(\n          new Error(`Setting up fake worker failed: \"${reason.message}\".`)\n        );\n      });\n  }\n\n  /**\n   * Destroys the worker instance.\n   */\n  destroy() {\n    this.destroyed = true;\n    if (this._webWorker) {\n      // We need to terminate only web worker created resource.\n      this._webWorker.terminate();\n      this._webWorker = null;\n    }\n    PDFWorker.#workerPorts?.delete(this._port);\n    this._port = null;\n    if (this._messageHandler) {\n      this._messageHandler.destroy();\n      this._messageHandler = null;\n    }\n  }\n\n  /**\n   * @param {PDFWorkerParameters} params - The worker initialization parameters.\n   */\n  static fromPort(params) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: fromPort\");\n    }\n    if (!params?.port) {\n      throw new Error(\"PDFWorker.fromPort - invalid method signature.\");\n    }\n    const cachedPort = this.#workerPorts?.get(params.port);\n    if (cachedPort) {\n      if (cachedPort._pendingDestroy) {\n        throw new Error(\n          \"PDFWorker.fromPort - the worker is being destroyed.\\n\" +\n            \"Please remember to await `PDFDocumentLoadingTask.destroy()`-calls.\"\n        );\n      }\n      return cachedPort;\n    }\n    return new PDFWorker(params);\n  }\n\n  /**\n   * The current `workerSrc`, when it exists.\n   * @type {string}\n   */\n  static get workerSrc() {\n    if (GlobalWorkerOptions.workerSrc) {\n      return GlobalWorkerOptions.workerSrc;\n    }\n    if (\n      (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n      PDFWorkerUtil.fallbackWorkerSrc !== null\n    ) {\n      if (!isNodeJS) {\n        deprecated('No \"GlobalWorkerOptions.workerSrc\" specified.');\n      }\n      return PDFWorkerUtil.fallbackWorkerSrc;\n    }\n    throw new Error('No \"GlobalWorkerOptions.workerSrc\" specified.');\n  }\n\n  static get _mainThreadWorkerMessageHandler() {\n    try {\n      return globalThis.pdfjsWorker?.WorkerMessageHandler || null;\n    } catch {\n      return null;\n    }\n  }\n\n  // Loads worker code into the main-thread.\n  static get _setupFakeWorkerGlobal() {\n    const loader = async () => {\n      const mainWorkerMessageHandler = this._mainThreadWorkerMessageHandler;\n\n      if (mainWorkerMessageHandler) {\n        // The worker was already loaded using e.g. a `<script>` tag.\n        return mainWorkerMessageHandler;\n      }\n      if (typeof PDFJSDev === \"undefined\") {\n        const worker = await import(\"pdfjs/pdf.worker.js\");\n        return worker.WorkerMessageHandler;\n      }\n      if (\n        PDFJSDev.test(\"GENERIC\") &&\n        isNodeJS &&\n        // eslint-disable-next-line no-undef\n        typeof __non_webpack_require__ === \"function\"\n      ) {\n        // Since bundlers, such as Webpack, cannot be told to leave `require`\n        // statements alone we are thus forced to jump through hoops in order\n        // to prevent `Critical dependency: ...` warnings in third-party\n        // deployments of the built `pdf.js`/`pdf.worker.js` files; see\n        // https://github.com/webpack/webpack/issues/8826\n        //\n        // The following hack is based on the assumption that code running in\n        // Node.js won't ever be affected by e.g. Content Security Policies that\n        // prevent the use of `eval`. If that ever occurs, we should revert this\n        // to a normal `__non_webpack_require__` statement and simply document\n        // the Webpack warnings instead (telling users to ignore them).\n        //\n        // eslint-disable-next-line no-eval\n        const worker = eval(\"require\")(this.workerSrc);\n        return worker.WorkerMessageHandler;\n      }\n      await loadScript(this.workerSrc);\n      return window.pdfjsWorker.WorkerMessageHandler;\n    };\n\n    return shadow(this, \"_setupFakeWorkerGlobal\", loader());\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass WorkerTransport {\n  #methodPromises = new Map();\n\n  #pageCache = new Map();\n\n  #pagePromises = new Map();\n\n  #passwordCapability = null;\n\n  constructor(messageHandler, loadingTask, networkStream, params, factory) {\n    this.messageHandler = messageHandler;\n    this.loadingTask = loadingTask;\n    this.commonObjs = new PDFObjects();\n    this.fontLoader = new FontLoader({\n      ownerDocument: params.ownerDocument,\n      styleElement: params.styleElement,\n    });\n    this._params = params;\n\n    this.canvasFactory = factory.canvasFactory;\n    this.filterFactory = factory.filterFactory;\n    this.cMapReaderFactory = factory.cMapReaderFactory;\n    this.standardFontDataFactory = factory.standardFontDataFactory;\n\n    this.destroyed = false;\n    this.destroyCapability = null;\n\n    this._networkStream = networkStream;\n    this._fullReader = null;\n    this._lastProgress = null;\n    this.downloadInfoCapability = new PromiseCapability();\n\n    this.setupMessageHandler();\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"getXFADatasets\", {\n        value: () => {\n          return this.messageHandler.sendWithPromise(\"GetXFADatasets\", null);\n        },\n      });\n      Object.defineProperty(this, \"getXRefPrevValue\", {\n        value: () => {\n          return this.messageHandler.sendWithPromise(\"GetXRefPrevValue\", null);\n        },\n      });\n      Object.defineProperty(this, \"getAnnotArray\", {\n        value: pageIndex => {\n          return this.messageHandler.sendWithPromise(\"GetAnnotArray\", {\n            pageIndex,\n          });\n        },\n      });\n    }\n  }\n\n  #cacheSimpleMethod(name, data = null) {\n    const cachedPromise = this.#methodPromises.get(name);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler.sendWithPromise(name, data);\n\n    this.#methodPromises.set(name, promise);\n    return promise;\n  }\n\n  get annotationStorage() {\n    return shadow(this, \"annotationStorage\", new AnnotationStorage());\n  }\n\n  getRenderingIntent(\n    intent,\n    annotationMode = AnnotationMode.ENABLE,\n    printAnnotationStorage = null,\n    isOpList = false\n  ) {\n    let renderingIntent = RenderingIntentFlag.DISPLAY; // Default value.\n    let annotationStorageSerializable = SerializableEmpty;\n\n    switch (intent) {\n      case \"any\":\n        renderingIntent = RenderingIntentFlag.ANY;\n        break;\n      case \"display\":\n        break;\n      case \"print\":\n        renderingIntent = RenderingIntentFlag.PRINT;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid intent: ${intent}`);\n    }\n\n    switch (annotationMode) {\n      case AnnotationMode.DISABLE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_DISABLE;\n        break;\n      case AnnotationMode.ENABLE:\n        break;\n      case AnnotationMode.ENABLE_FORMS:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_FORMS;\n        break;\n      case AnnotationMode.ENABLE_STORAGE:\n        renderingIntent += RenderingIntentFlag.ANNOTATIONS_STORAGE;\n\n        const annotationStorage =\n          renderingIntent & RenderingIntentFlag.PRINT &&\n          printAnnotationStorage instanceof PrintAnnotationStorage\n            ? printAnnotationStorage\n            : this.annotationStorage;\n\n        annotationStorageSerializable = annotationStorage.serializable;\n        break;\n      default:\n        warn(`getRenderingIntent - invalid annotationMode: ${annotationMode}`);\n    }\n\n    if (isOpList) {\n      renderingIntent += RenderingIntentFlag.OPLIST;\n    }\n\n    return {\n      renderingIntent,\n      cacheKey: `${renderingIntent}_${annotationStorageSerializable.hash}`,\n      annotationStorageSerializable,\n    };\n  }\n\n  destroy() {\n    if (this.destroyCapability) {\n      return this.destroyCapability.promise;\n    }\n\n    this.destroyed = true;\n    this.destroyCapability = new PromiseCapability();\n\n    this.#passwordCapability?.reject(\n      new Error(\"Worker was destroyed during onPassword callback\")\n    );\n\n    const waitOn = [];\n    // We need to wait for all renderings to be completed, e.g.\n    // timeout/rAF can take a long time.\n    for (const page of this.#pageCache.values()) {\n      waitOn.push(page._destroy());\n    }\n    this.#pageCache.clear();\n    this.#pagePromises.clear();\n    // Allow `AnnotationStorage`-related clean-up when destroying the document.\n    if (this.hasOwnProperty(\"annotationStorage\")) {\n      this.annotationStorage.resetModified();\n    }\n    // We also need to wait for the worker to finish its long running tasks.\n    const terminated = this.messageHandler.sendWithPromise(\"Terminate\", null);\n    waitOn.push(terminated);\n\n    Promise.all(waitOn).then(() => {\n      this.commonObjs.clear();\n      this.fontLoader.clear();\n      this.#methodPromises.clear();\n      this.filterFactory.destroy();\n\n      this._networkStream?.cancelAllRequests(\n        new AbortException(\"Worker was terminated.\")\n      );\n\n      if (this.messageHandler) {\n        this.messageHandler.destroy();\n        this.messageHandler = null;\n      }\n      this.destroyCapability.resolve();\n    }, this.destroyCapability.reject);\n    return this.destroyCapability.promise;\n  }\n\n  setupMessageHandler() {\n    const { messageHandler, loadingTask } = this;\n\n    messageHandler.on(\"GetReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetReader - no `IPDFStream` instance available.\"\n      );\n      this._fullReader = this._networkStream.getFullReader();\n      this._fullReader.onProgress = evt => {\n        this._lastProgress = {\n          loaded: evt.loaded,\n          total: evt.total,\n        };\n      };\n      sink.onPull = () => {\n        this._fullReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              value instanceof ArrayBuffer,\n              \"GetReader - expected an ArrayBuffer.\"\n            );\n            // Enqueue data chunk into sink, and transfer it\n            // to other side as `Transferable` object.\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        this._fullReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"ReaderHeadersReady\", data => {\n      const headersCapability = new PromiseCapability();\n      const fullReader = this._fullReader;\n      fullReader.headersReady.then(() => {\n        // If stream or range are disabled, it's our only way to report\n        // loading progress.\n        if (!fullReader.isStreamingSupported || !fullReader.isRangeSupported) {\n          if (this._lastProgress) {\n            loadingTask.onProgress?.(this._lastProgress);\n          }\n          fullReader.onProgress = evt => {\n            loadingTask.onProgress?.({\n              loaded: evt.loaded,\n              total: evt.total,\n            });\n          };\n        }\n\n        headersCapability.resolve({\n          isStreamingSupported: fullReader.isStreamingSupported,\n          isRangeSupported: fullReader.isRangeSupported,\n          contentLength: fullReader.contentLength,\n        });\n      }, headersCapability.reject);\n\n      return headersCapability.promise;\n    });\n\n    messageHandler.on(\"GetRangeReader\", (data, sink) => {\n      assert(\n        this._networkStream,\n        \"GetRangeReader - no `IPDFStream` instance available.\"\n      );\n      const rangeReader = this._networkStream.getRangeReader(\n        data.begin,\n        data.end\n      );\n\n      // When streaming is enabled, it's possible that the data requested here\n      // has already been fetched via the `_fullRequestReader` implementation.\n      // However, given that the PDF data is loaded asynchronously on the\n      // main-thread and then sent via `postMessage` to the worker-thread,\n      // it may not have been available during parsing (hence the attempt to\n      // use range requests here).\n      //\n      // To avoid wasting time and resources here, we'll thus *not* dispatch\n      // range requests if the data was already loaded but has not been sent to\n      // the worker-thread yet (which will happen via the `_fullRequestReader`).\n      if (!rangeReader) {\n        sink.close();\n        return;\n      }\n\n      sink.onPull = () => {\n        rangeReader\n          .read()\n          .then(function ({ value, done }) {\n            if (done) {\n              sink.close();\n              return;\n            }\n            assert(\n              value instanceof ArrayBuffer,\n              \"GetRangeReader - expected an ArrayBuffer.\"\n            );\n            sink.enqueue(new Uint8Array(value), 1, [value]);\n          })\n          .catch(reason => {\n            sink.error(reason);\n          });\n      };\n\n      sink.onCancel = reason => {\n        rangeReader.cancel(reason);\n\n        sink.ready.catch(readyReason => {\n          if (this.destroyed) {\n            return; // Ignore any pending requests if the worker was terminated.\n          }\n          throw readyReason;\n        });\n      };\n    });\n\n    messageHandler.on(\"GetDoc\", ({ pdfInfo }) => {\n      this._numPages = pdfInfo.numPages;\n      this._htmlForXfa = pdfInfo.htmlForXfa;\n      delete pdfInfo.htmlForXfa;\n      loadingTask._capability.resolve(new PDFDocumentProxy(pdfInfo, this));\n    });\n\n    messageHandler.on(\"DocException\", function (ex) {\n      let reason;\n      switch (ex.name) {\n        case \"PasswordException\":\n          reason = new PasswordException(ex.message, ex.code);\n          break;\n        case \"InvalidPDFException\":\n          reason = new InvalidPDFException(ex.message);\n          break;\n        case \"MissingPDFException\":\n          reason = new MissingPDFException(ex.message);\n          break;\n        case \"UnexpectedResponseException\":\n          reason = new UnexpectedResponseException(ex.message, ex.status);\n          break;\n        case \"UnknownErrorException\":\n          reason = new UnknownErrorException(ex.message, ex.details);\n          break;\n        default:\n          unreachable(\"DocException - expected a valid Error.\");\n      }\n      loadingTask._capability.reject(reason);\n    });\n\n    messageHandler.on(\"PasswordRequest\", exception => {\n      this.#passwordCapability = new PromiseCapability();\n\n      if (loadingTask.onPassword) {\n        const updatePassword = password => {\n          if (password instanceof Error) {\n            this.#passwordCapability.reject(password);\n          } else {\n            this.#passwordCapability.resolve({ password });\n          }\n        };\n        try {\n          loadingTask.onPassword(updatePassword, exception.code);\n        } catch (ex) {\n          this.#passwordCapability.reject(ex);\n        }\n      } else {\n        this.#passwordCapability.reject(\n          new PasswordException(exception.message, exception.code)\n        );\n      }\n      return this.#passwordCapability.promise;\n    });\n\n    messageHandler.on(\"DataLoaded\", data => {\n      // For consistency: Ensure that progress is always reported when the\n      // entire PDF file has been loaded, regardless of how it was fetched.\n      loadingTask.onProgress?.({\n        loaded: data.length,\n        total: data.length,\n      });\n\n      this.downloadInfoCapability.resolve(data);\n    });\n\n    messageHandler.on(\"StartRenderPage\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      const page = this.#pageCache.get(data.pageIndex);\n      page._startRenderPage(data.transparency, data.cacheKey);\n    });\n\n    messageHandler.on(\"commonobj\", ([id, type, exportedData]) => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n\n      if (this.commonObjs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Font\":\n          const params = this._params;\n\n          if (\"error\" in exportedData) {\n            const exportedError = exportedData.error;\n            warn(`Error during font loading: ${exportedError}`);\n            this.commonObjs.resolve(id, exportedError);\n            break;\n          }\n\n          const inspectFont =\n            params.pdfBug && globalThis.FontInspector?.enabled\n              ? (font, url) => globalThis.FontInspector.fontAdded(font, url)\n              : null;\n          const font = new FontFaceObject(exportedData, {\n            isEvalSupported: params.isEvalSupported,\n            disableFontFace: params.disableFontFace,\n            ignoreErrors: params.ignoreErrors,\n            inspectFont,\n          });\n\n          this.fontLoader\n            .bind(font)\n            .catch(reason => {\n              return messageHandler.sendWithPromise(\"FontFallback\", { id });\n            })\n            .finally(() => {\n              if (!params.fontExtraProperties && font.data) {\n                // Immediately release the `font.data` property once the font\n                // has been attached to the DOM, since it's no longer needed,\n                // rather than waiting for a `PDFDocumentProxy.cleanup` call.\n                // Since `font.data` could be very large, e.g. in some cases\n                // multiple megabytes, this will help reduce memory usage.\n                font.data = null;\n              }\n              this.commonObjs.resolve(id, font);\n            });\n          break;\n        case \"FontPath\":\n        case \"Image\":\n        case \"Pattern\":\n          this.commonObjs.resolve(id, exportedData);\n          break;\n        default:\n          throw new Error(`Got unknown common object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"obj\", ([id, pageIndex, type, imageData]) => {\n      if (this.destroyed) {\n        // Ignore any pending requests if the worker was terminated.\n        return;\n      }\n\n      const pageProxy = this.#pageCache.get(pageIndex);\n      if (pageProxy.objs.has(id)) {\n        return;\n      }\n\n      switch (type) {\n        case \"Image\":\n          pageProxy.objs.resolve(id, imageData);\n\n          // Heuristic that will allow us not to store large data.\n          if (imageData) {\n            let length;\n            if (imageData.bitmap) {\n              const { width, height } = imageData;\n              length = width * height * 4;\n            } else {\n              length = imageData.data?.length || 0;\n            }\n\n            if (length > MAX_IMAGE_SIZE_TO_CACHE) {\n              pageProxy._maybeCleanupAfterRender = true;\n            }\n          }\n          break;\n        case \"Pattern\":\n          pageProxy.objs.resolve(id, imageData);\n          break;\n        default:\n          throw new Error(`Got unknown object type ${type}`);\n      }\n    });\n\n    messageHandler.on(\"DocProgress\", data => {\n      if (this.destroyed) {\n        return; // Ignore any pending requests if the worker was terminated.\n      }\n      loadingTask.onProgress?.({\n        loaded: data.loaded,\n        total: data.total,\n      });\n    });\n\n    messageHandler.on(\"FetchBuiltInCMap\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.cMapReaderFactory) {\n        return Promise.reject(\n          new Error(\n            \"CMapReaderFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.cMapReaderFactory.fetch(data);\n    });\n\n    messageHandler.on(\"FetchStandardFontData\", data => {\n      if (this.destroyed) {\n        return Promise.reject(new Error(\"Worker was destroyed.\"));\n      }\n      if (!this.standardFontDataFactory) {\n        return Promise.reject(\n          new Error(\n            \"StandardFontDataFactory not initialized, see the `useWorkerFetch` parameter.\"\n          )\n        );\n      }\n      return this.standardFontDataFactory.fetch(data);\n    });\n  }\n\n  getData() {\n    return this.messageHandler.sendWithPromise(\"GetData\", null);\n  }\n\n  saveDocument() {\n    if (this.annotationStorage.size <= 0) {\n      warn(\n        \"saveDocument called while `annotationStorage` is empty, \" +\n          \"please use the getData-method instead.\"\n      );\n    }\n    const { map, transfers } = this.annotationStorage.serializable;\n\n    return this.messageHandler\n      .sendWithPromise(\n        \"SaveDocument\",\n        {\n          isPureXfa: !!this._htmlForXfa,\n          numPages: this._numPages,\n          annotationStorage: map,\n          filename: this._fullReader?.filename ?? null,\n        },\n        transfers\n      )\n      .finally(() => {\n        this.annotationStorage.resetModified();\n      });\n  }\n\n  getPage(pageNumber) {\n    if (\n      !Number.isInteger(pageNumber) ||\n      pageNumber <= 0 ||\n      pageNumber > this._numPages\n    ) {\n      return Promise.reject(new Error(\"Invalid page request.\"));\n    }\n\n    const pageIndex = pageNumber - 1,\n      cachedPromise = this.#pagePromises.get(pageIndex);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(\"GetPage\", {\n        pageIndex,\n      })\n      .then(pageInfo => {\n        if (this.destroyed) {\n          throw new Error(\"Transport destroyed\");\n        }\n        const page = new PDFPageProxy(\n          pageIndex,\n          pageInfo,\n          this,\n          this._params.pdfBug\n        );\n        this.#pageCache.set(pageIndex, page);\n        return page;\n      });\n    this.#pagePromises.set(pageIndex, promise);\n    return promise;\n  }\n\n  getPageIndex(ref) {\n    if (\n      typeof ref !== \"object\" ||\n      ref === null ||\n      !Number.isInteger(ref.num) ||\n      ref.num < 0 ||\n      !Number.isInteger(ref.gen) ||\n      ref.gen < 0\n    ) {\n      return Promise.reject(new Error(\"Invalid pageIndex request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetPageIndex\", {\n      num: ref.num,\n      gen: ref.gen,\n    });\n  }\n\n  getAnnotations(pageIndex, intent) {\n    return this.messageHandler.sendWithPromise(\"GetAnnotations\", {\n      pageIndex,\n      intent,\n    });\n  }\n\n  getFieldObjects() {\n    return this.#cacheSimpleMethod(\"GetFieldObjects\");\n  }\n\n  hasJSActions() {\n    return this.#cacheSimpleMethod(\"HasJSActions\");\n  }\n\n  getCalculationOrderIds() {\n    return this.messageHandler.sendWithPromise(\"GetCalculationOrderIds\", null);\n  }\n\n  getDestinations() {\n    return this.messageHandler.sendWithPromise(\"GetDestinations\", null);\n  }\n\n  getDestination(id) {\n    if (typeof id !== \"string\") {\n      return Promise.reject(new Error(\"Invalid destination request.\"));\n    }\n    return this.messageHandler.sendWithPromise(\"GetDestination\", {\n      id,\n    });\n  }\n\n  getPageLabels() {\n    return this.messageHandler.sendWithPromise(\"GetPageLabels\", null);\n  }\n\n  getPageLayout() {\n    return this.messageHandler.sendWithPromise(\"GetPageLayout\", null);\n  }\n\n  getPageMode() {\n    return this.messageHandler.sendWithPromise(\"GetPageMode\", null);\n  }\n\n  getViewerPreferences() {\n    return this.messageHandler.sendWithPromise(\"GetViewerPreferences\", null);\n  }\n\n  getOpenAction() {\n    return this.messageHandler.sendWithPromise(\"GetOpenAction\", null);\n  }\n\n  getAttachments() {\n    return this.messageHandler.sendWithPromise(\"GetAttachments\", null);\n  }\n\n  getDocJSActions() {\n    return this.#cacheSimpleMethod(\"GetDocJSActions\");\n  }\n\n  getPageJSActions(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetPageJSActions\", {\n      pageIndex,\n    });\n  }\n\n  getStructTree(pageIndex) {\n    return this.messageHandler.sendWithPromise(\"GetStructTree\", {\n      pageIndex,\n    });\n  }\n\n  getOutline() {\n    return this.messageHandler.sendWithPromise(\"GetOutline\", null);\n  }\n\n  getOptionalContentConfig() {\n    return this.messageHandler\n      .sendWithPromise(\"GetOptionalContentConfig\", null)\n      .then(results => {\n        return new OptionalContentConfig(results);\n      });\n  }\n\n  getPermissions() {\n    return this.messageHandler.sendWithPromise(\"GetPermissions\", null);\n  }\n\n  getMetadata() {\n    const name = \"GetMetadata\",\n      cachedPromise = this.#methodPromises.get(name);\n    if (cachedPromise) {\n      return cachedPromise;\n    }\n    const promise = this.messageHandler\n      .sendWithPromise(name, null)\n      .then(results => {\n        return {\n          info: results[0],\n          metadata: results[1] ? new Metadata(results[1]) : null,\n          contentDispositionFilename: this._fullReader?.filename ?? null,\n          contentLength: this._fullReader?.contentLength ?? null,\n        };\n      });\n    this.#methodPromises.set(name, promise);\n    return promise;\n  }\n\n  getMarkInfo() {\n    return this.messageHandler.sendWithPromise(\"GetMarkInfo\", null);\n  }\n\n  async startCleanup(keepLoadedFonts = false) {\n    if (this.destroyed) {\n      return; // No need to manually clean-up when destruction has started.\n    }\n    await this.messageHandler.sendWithPromise(\"Cleanup\", null);\n\n    for (const page of this.#pageCache.values()) {\n      const cleanupSuccessful = page.cleanup();\n\n      if (!cleanupSuccessful) {\n        throw new Error(\n          `startCleanup: Page ${page.pageNumber} is currently rendering.`\n        );\n      }\n    }\n    this.commonObjs.clear();\n    if (!keepLoadedFonts) {\n      this.fontLoader.clear();\n    }\n    this.#methodPromises.clear();\n    this.filterFactory.destroy(/* keepHCM = */ true);\n  }\n\n  get loadingParams() {\n    const { disableAutoFetch, enableXfa } = this._params;\n    return shadow(this, \"loadingParams\", {\n      disableAutoFetch,\n      enableXfa,\n    });\n  }\n}\n\n/**\n * A PDF document and page is built of many objects. E.g. there are objects for\n * fonts, images, rendering code, etc. These objects may get processed inside of\n * a worker. This class implements some basic methods to manage these objects.\n */\nclass PDFObjects {\n  #objs = Object.create(null);\n\n  /**\n   * Ensures there is an object defined for `objId`.\n   *\n   * @param {string} objId\n   * @returns {Object}\n   */\n  #ensureObj(objId) {\n    return (this.#objs[objId] ||= {\n      capability: new PromiseCapability(),\n      data: null,\n    });\n  }\n\n  /**\n   * If called *without* callback, this returns the data of `objId` but the\n   * object needs to be resolved. If it isn't, this method throws.\n   *\n   * If called *with* a callback, the callback is called with the data of the\n   * object once the object is resolved. That means, if you call this method\n   * and the object is already resolved, the callback gets called right away.\n   *\n   * @param {string} objId\n   * @param {function} [callback]\n   * @returns {any}\n   */\n  get(objId, callback = null) {\n    // If there is a callback, then the get can be async and the object is\n    // not required to be resolved right now.\n    if (callback) {\n      const obj = this.#ensureObj(objId);\n      obj.capability.promise.then(() => callback(obj.data));\n      return null;\n    }\n    // If there isn't a callback, the user expects to get the resolved data\n    // directly.\n    const obj = this.#objs[objId];\n    // If there isn't an object yet or the object isn't resolved, then the\n    // data isn't ready yet!\n    if (!obj?.capability.settled) {\n      throw new Error(`Requesting object that isn't resolved yet ${objId}.`);\n    }\n    return obj.data;\n  }\n\n  /**\n   * @param {string} objId\n   * @returns {boolean}\n   */\n  has(objId) {\n    const obj = this.#objs[objId];\n    return obj?.capability.settled || false;\n  }\n\n  /**\n   * Resolves the object `objId` with optional `data`.\n   *\n   * @param {string} objId\n   * @param {any} [data]\n   */\n  resolve(objId, data = null) {\n    const obj = this.#ensureObj(objId);\n    obj.data = data;\n    obj.capability.resolve();\n  }\n\n  clear() {\n    for (const objId in this.#objs) {\n      const { data } = this.#objs[objId];\n      data?.bitmap?.close(); // Release any `ImageBitmap` data.\n    }\n    this.#objs = Object.create(null);\n  }\n}\n\n/**\n * Allows controlling of the rendering tasks.\n */\nclass RenderTask {\n  #internalRenderTask = null;\n\n  constructor(internalRenderTask) {\n    this.#internalRenderTask = internalRenderTask;\n\n    /**\n     * Callback for incremental rendering -- a function that will be called\n     * each time the rendering is paused.  To continue rendering call the\n     * function that is the first argument to the callback.\n     * @type {function}\n     */\n    this.onContinue = null;\n  }\n\n  /**\n   * Promise for rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this.#internalRenderTask.capability.promise;\n  }\n\n  /**\n   * Cancels the rendering task. If the task is currently rendering it will\n   * not be cancelled until graphics pauses with a timeout. The promise that\n   * this object extends will be rejected when cancelled.\n   *\n   * @param {number} [extraDelay]\n   */\n  cancel(extraDelay = 0) {\n    this.#internalRenderTask.cancel(/* error = */ null, extraDelay);\n  }\n\n  /**\n   * Whether form fields are rendered separately from the main operatorList.\n   * @type {boolean}\n   */\n  get separateAnnots() {\n    const { separateAnnots } = this.#internalRenderTask.operatorList;\n    if (!separateAnnots) {\n      return false;\n    }\n    const { annotationCanvasMap } = this.#internalRenderTask;\n    return (\n      separateAnnots.form ||\n      (separateAnnots.canvas && annotationCanvasMap?.size > 0)\n    );\n  }\n}\n\n/**\n * For internal use only.\n * @ignore\n */\nclass InternalRenderTask {\n  static #canvasInUse = new WeakSet();\n\n  constructor({\n    callback,\n    params,\n    objs,\n    commonObjs,\n    annotationCanvasMap,\n    operatorList,\n    pageIndex,\n    canvasFactory,\n    filterFactory,\n    useRequestAnimationFrame = false,\n    pdfBug = false,\n    pageColors = null,\n  }) {\n    this.callback = callback;\n    this.params = params;\n    this.objs = objs;\n    this.commonObjs = commonObjs;\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.operatorListIdx = null;\n    this.operatorList = operatorList;\n    this._pageIndex = pageIndex;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this._pdfBug = pdfBug;\n    this.pageColors = pageColors;\n\n    this.running = false;\n    this.graphicsReadyCallback = null;\n    this.graphicsReady = false;\n    this._useRequestAnimationFrame =\n      useRequestAnimationFrame === true && typeof window !== \"undefined\";\n    this.cancelled = false;\n    this.capability = new PromiseCapability();\n    this.task = new RenderTask(this);\n    // caching this-bound methods\n    this._cancelBound = this.cancel.bind(this);\n    this._continueBound = this._continue.bind(this);\n    this._scheduleNextBound = this._scheduleNext.bind(this);\n    this._nextBound = this._next.bind(this);\n    this._canvas = params.canvasContext.canvas;\n  }\n\n  get completed() {\n    return this.capability.promise.catch(function () {\n      // Ignoring errors, since we only want to know when rendering is\n      // no longer pending.\n    });\n  }\n\n  initializeGraphics({ transparency = false, optionalContentConfig }) {\n    if (this.cancelled) {\n      return;\n    }\n    if (this._canvas) {\n      if (InternalRenderTask.#canvasInUse.has(this._canvas)) {\n        throw new Error(\n          \"Cannot use the same canvas during multiple render() operations. \" +\n            \"Use different canvas or ensure previous operations were \" +\n            \"cancelled or completed.\"\n        );\n      }\n      InternalRenderTask.#canvasInUse.add(this._canvas);\n    }\n\n    if (this._pdfBug && globalThis.StepperManager?.enabled) {\n      this.stepper = globalThis.StepperManager.create(this._pageIndex);\n      this.stepper.init(this.operatorList);\n      this.stepper.nextBreakPoint = this.stepper.getNextBreakPoint();\n    }\n    const { canvasContext, viewport, transform, background } = this.params;\n\n    this.gfx = new CanvasGraphics(\n      canvasContext,\n      this.commonObjs,\n      this.objs,\n      this.canvasFactory,\n      this.filterFactory,\n      { optionalContentConfig },\n      this.annotationCanvasMap,\n      this.pageColors\n    );\n    this.gfx.beginDrawing({\n      transform,\n      viewport,\n      transparency,\n      background,\n    });\n    this.operatorListIdx = 0;\n    this.graphicsReady = true;\n    this.graphicsReadyCallback?.();\n  }\n\n  cancel(error = null, extraDelay = 0) {\n    this.running = false;\n    this.cancelled = true;\n    this.gfx?.endDrawing();\n    InternalRenderTask.#canvasInUse.delete(this._canvas);\n\n    this.callback(\n      error ||\n        new RenderingCancelledException(\n          `Rendering cancelled, page ${this._pageIndex + 1}`,\n          extraDelay\n        )\n    );\n  }\n\n  operatorListChanged() {\n    if (!this.graphicsReady) {\n      this.graphicsReadyCallback ||= this._continueBound;\n      return;\n    }\n    this.stepper?.updateOperatorList(this.operatorList);\n\n    if (this.running) {\n      return;\n    }\n    this._continue();\n  }\n\n  _continue() {\n    this.running = true;\n    if (this.cancelled) {\n      return;\n    }\n    if (this.task.onContinue) {\n      this.task.onContinue(this._scheduleNextBound);\n    } else {\n      this._scheduleNext();\n    }\n  }\n\n  _scheduleNext() {\n    if (this._useRequestAnimationFrame) {\n      window.requestAnimationFrame(() => {\n        this._nextBound().catch(this._cancelBound);\n      });\n    } else {\n      Promise.resolve().then(this._nextBound).catch(this._cancelBound);\n    }\n  }\n\n  async _next() {\n    if (this.cancelled) {\n      return;\n    }\n    this.operatorListIdx = this.gfx.executeOperatorList(\n      this.operatorList,\n      this.operatorListIdx,\n      this._continueBound,\n      this.stepper\n    );\n    if (this.operatorListIdx === this.operatorList.argsArray.length) {\n      this.running = false;\n      if (this.operatorList.lastChunk) {\n        this.gfx.endDrawing();\n        InternalRenderTask.#canvasInUse.delete(this._canvas);\n\n        this.callback();\n      }\n    }\n  }\n}\n\n/** @type {string} */\nconst version =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : null;\n/** @type {string} */\nconst build =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : null;\n\nexport {\n  build,\n  DefaultCanvasFactory,\n  DefaultCMapReaderFactory,\n  DefaultFilterFactory,\n  DefaultStandardFontDataFactory,\n  getDocument,\n  LoopbackPort,\n  PDFDataRangeTransport,\n  PDFDocumentLoadingTask,\n  PDFDocumentProxy,\n  PDFPageProxy,\n  PDFWorker,\n  PDFWorkerUtil,\n  RenderTask,\n  SVGGraphics,\n  version,\n};\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap, unreachable } from \"../shared/util.js\";\nimport { AnnotationEditor } from \"./editor/editor.js\";\nimport { MurmurHash3_64 } from \"../shared/murmurhash3.js\";\n\nconst SerializableEmpty = Object.freeze({\n  map: null,\n  hash: \"\",\n  transfers: undefined,\n});\n\n/**\n * Key/value storage for annotation data in forms.\n */\nclass AnnotationStorage {\n  #modified = false;\n\n  #storage = new Map();\n\n  constructor() {\n    // Callbacks to signal when the modification state is set or reset.\n    // This is used by the viewer to only bind on `beforeunload` if forms\n    // are actually edited to prevent doing so unconditionally since that\n    // can have undesirable effects.\n    this.onSetModified = null;\n    this.onResetModified = null;\n    this.onAnnotationEditor = null;\n  }\n\n  /**\n   * Get the value for a given key if it exists, or return the default value.\n   * @param {string} key\n   * @param {Object} defaultValue\n   * @returns {Object}\n   */\n  getValue(key, defaultValue) {\n    const value = this.#storage.get(key);\n    if (value === undefined) {\n      return defaultValue;\n    }\n\n    return Object.assign(defaultValue, value);\n  }\n\n  /**\n   * Get the value for a given key.\n   * @param {string} key\n   * @returns {Object}\n   */\n  getRawValue(key) {\n    return this.#storage.get(key);\n  }\n\n  /**\n   * Remove a value from the storage.\n   * @param {string} key\n   */\n  remove(key) {\n    this.#storage.delete(key);\n\n    if (this.#storage.size === 0) {\n      this.resetModified();\n    }\n\n    if (typeof this.onAnnotationEditor === \"function\") {\n      for (const value of this.#storage.values()) {\n        if (value instanceof AnnotationEditor) {\n          return;\n        }\n      }\n      this.onAnnotationEditor(null);\n    }\n  }\n\n  /**\n   * Set the value for a given key\n   * @param {string} key\n   * @param {Object} value\n   */\n  setValue(key, value) {\n    const obj = this.#storage.get(key);\n    let modified = false;\n    if (obj !== undefined) {\n      for (const [entry, val] of Object.entries(value)) {\n        if (obj[entry] !== val) {\n          modified = true;\n          obj[entry] = val;\n        }\n      }\n    } else {\n      modified = true;\n      this.#storage.set(key, value);\n    }\n    if (modified) {\n      this.#setModified();\n    }\n\n    if (\n      value instanceof AnnotationEditor &&\n      typeof this.onAnnotationEditor === \"function\"\n    ) {\n      this.onAnnotationEditor(value.constructor._type);\n    }\n  }\n\n  /**\n   * Check if the storage contains the given key.\n   * @param {string} key\n   * @returns {boolean}\n   */\n  has(key) {\n    return this.#storage.has(key);\n  }\n\n  /**\n   * @returns {Object | null}\n   */\n  getAll() {\n    return this.#storage.size > 0 ? objectFromMap(this.#storage) : null;\n  }\n\n  /**\n   * @param {Object} obj\n   */\n  setAll(obj) {\n    for (const [key, val] of Object.entries(obj)) {\n      this.setValue(key, val);\n    }\n  }\n\n  get size() {\n    return this.#storage.size;\n  }\n\n  #setModified() {\n    if (!this.#modified) {\n      this.#modified = true;\n      if (typeof this.onSetModified === \"function\") {\n        this.onSetModified();\n      }\n    }\n  }\n\n  resetModified() {\n    if (this.#modified) {\n      this.#modified = false;\n      if (typeof this.onResetModified === \"function\") {\n        this.onResetModified();\n      }\n    }\n  }\n\n  /**\n   * @returns {PrintAnnotationStorage}\n   */\n  get print() {\n    return new PrintAnnotationStorage(this);\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    if (this.#storage.size === 0) {\n      return SerializableEmpty;\n    }\n    const map = new Map(),\n      hash = new MurmurHash3_64(),\n      transfers = [];\n    const context = Object.create(null);\n    let hasBitmap = false;\n\n    for (const [key, val] of this.#storage) {\n      const serialized =\n        val instanceof AnnotationEditor\n          ? val.serialize(/* isForCopying = */ false, context)\n          : val;\n      if (serialized) {\n        map.set(key, serialized);\n\n        hash.update(`${key}:${JSON.stringify(serialized)}`);\n        hasBitmap ||= !!serialized.bitmap;\n      }\n    }\n\n    if (hasBitmap) {\n      // We must transfer the bitmap data separately, since it can be changed\n      // during serialization with SVG images.\n      for (const value of map.values()) {\n        if (value.bitmap) {\n          transfers.push(value.bitmap);\n        }\n      }\n    }\n\n    return map.size > 0\n      ? { map, hash: hash.hexdigest(), transfers }\n      : SerializableEmpty;\n  }\n}\n\n/**\n * A special `AnnotationStorage` for use during printing, where the serializable\n * data is *frozen* upon initialization, to prevent scripting from modifying its\n * contents. (Necessary since printing is triggered synchronously in browsers.)\n */\nclass PrintAnnotationStorage extends AnnotationStorage {\n  #serializable;\n\n  constructor(parent) {\n    super();\n    const { map, hash, transfers } = parent.serializable;\n    // Create a *copy* of the data, since Objects are passed by reference in JS.\n    const clone = structuredClone(\n      map,\n      (typeof PDFJSDev === \"undefined\" ||\n        PDFJSDev.test(\"SKIP_BABEL || TESTING\")) &&\n        transfers\n        ? { transfer: transfers }\n        : null\n    );\n    this.#serializable = { map: clone, hash, transfers };\n  }\n\n  /**\n   * @returns {PrintAnnotationStorage}\n   */\n  // eslint-disable-next-line getter-return\n  get print() {\n    unreachable(\"Should not call PrintAnnotationStorage.print\");\n  }\n\n  /**\n   * PLEASE NOTE: Only intended for usage within the API itself.\n   * @ignore\n   */\n  get serializable() {\n    return this.#serializable;\n  }\n}\n\nexport { AnnotationStorage, PrintAnnotationStorage, SerializableEmpty };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./tools.js\").AnnotationEditorUIManager} AnnotationEditorUIManager */\n\nimport { bindEvents, ColorManager } from \"./tools.js\";\nimport { FeatureTest, shadow, unreachable } from \"../../shared/util.js\";\nimport { noContextMenu } from \"../display_utils.js\";\n\n/**\n * @typedef {Object} AnnotationEditorParameters\n * @property {AnnotationEditorUIManager} uiManager - the global manager\n * @property {AnnotationEditorLayer} parent - the layer containing this editor\n * @property {string} id - editor id\n * @property {number} x - x-coordinate\n * @property {number} y - y-coordinate\n */\n\n/**\n * Base class for editors.\n */\nclass AnnotationEditor {\n  #altText = \"\";\n\n  #altTextDecorative = false;\n\n  #altTextButton = null;\n\n  #altTextTooltip = null;\n\n  #altTextTooltipTimeout = null;\n\n  #keepAspectRatio = false;\n\n  #resizersDiv = null;\n\n  #boundFocusin = this.focusin.bind(this);\n\n  #boundFocusout = this.focusout.bind(this);\n\n  #hasBeenClicked = false;\n\n  #isEditing = false;\n\n  #isInEditMode = false;\n\n  _initialOptions = Object.create(null);\n\n  _uiManager = null;\n\n  _focusEventsAllowed = true;\n\n  _l10nPromise = null;\n\n  #isDraggable = false;\n\n  #zIndex = AnnotationEditor._zIndex++;\n\n  static _borderLineWidth = -1;\n\n  static _colorManager = new ColorManager();\n\n  static _zIndex = 1;\n\n  // When one of the dimensions of an editor is smaller than this value, the\n  // button to edit the alt text is visually moved outside of the editor.\n  static SMALL_EDITOR_SIZE = 0;\n\n  /**\n   * @param {AnnotationEditorParameters} parameters\n   */\n  constructor(parameters) {\n    if (this.constructor === AnnotationEditor) {\n      unreachable(\"Cannot initialize AnnotationEditor.\");\n    }\n\n    this.parent = parameters.parent;\n    this.id = parameters.id;\n    this.width = this.height = null;\n    this.pageIndex = parameters.parent.pageIndex;\n    this.name = parameters.name;\n    this.div = null;\n    this._uiManager = parameters.uiManager;\n    this.annotationElementId = null;\n    this._willKeepAspectRatio = false;\n    this._initialOptions.isCentered = parameters.isCentered;\n    this._structTreeParentId = null;\n\n    const {\n      rotation,\n      rawDims: { pageWidth, pageHeight, pageX, pageY },\n    } = this.parent.viewport;\n\n    this.rotation = rotation;\n    this.pageRotation =\n      (360 + rotation - this._uiManager.viewParameters.rotation) % 360;\n    this.pageDimensions = [pageWidth, pageHeight];\n    this.pageTranslation = [pageX, pageY];\n\n    const [width, height] = this.parentDimensions;\n    this.x = parameters.x / width;\n    this.y = parameters.y / height;\n\n    this.isAttachedToDOM = false;\n    this.deleted = false;\n  }\n\n  get editorType() {\n    return Object.getPrototypeOf(this).constructor._type;\n  }\n\n  static get _defaultLineColor() {\n    return shadow(\n      this,\n      \"_defaultLineColor\",\n      this._colorManager.getHexCode(\"CanvasText\")\n    );\n  }\n\n  static deleteAnnotationElement(editor) {\n    const fakeEditor = new FakeEditor({\n      id: editor.parent.getNextId(),\n      parent: editor.parent,\n      uiManager: editor._uiManager,\n    });\n    fakeEditor.annotationElementId = editor.annotationElementId;\n    fakeEditor.deleted = true;\n    fakeEditor._uiManager.addToAnnotationStorage(fakeEditor);\n  }\n\n  /**\n   * Initialize the l10n stuff for this type of editor.\n   * @param {Object} l10n\n   */\n  static initialize(l10n, options = null) {\n    AnnotationEditor._l10nPromise ||= new Map(\n      [\n        \"editor_alt_text_button_label\",\n        \"editor_alt_text_edit_button_label\",\n        \"editor_alt_text_decorative_tooltip\",\n      ].map(str => [str, l10n.get(str)])\n    );\n    if (options?.strings) {\n      for (const str of options.strings) {\n        AnnotationEditor._l10nPromise.set(str, l10n.get(str));\n      }\n    }\n    if (AnnotationEditor._borderLineWidth !== -1) {\n      return;\n    }\n    const style = getComputedStyle(document.documentElement);\n    AnnotationEditor._borderLineWidth =\n      parseFloat(style.getPropertyValue(\"--outline-width\")) || 0;\n  }\n\n  /**\n   * Update the default parameters for this type of editor.\n   * @param {number} _type\n   * @param {*} _value\n   */\n  static updateDefaultParams(_type, _value) {}\n\n  /**\n   * Get the default properties to set in the UI for this type of editor.\n   * @returns {Array}\n   */\n  static get defaultPropertiesToUpdate() {\n    return [];\n  }\n\n  /**\n   * Check if this kind of editor is able to handle the given mime type for\n   * pasting.\n   * @param {string} mime\n   * @returns {boolean}\n   */\n  static isHandlingMimeForPasting(mime) {\n    return false;\n  }\n\n  /**\n   * Extract the data from the clipboard item and delegate the creation of the\n   * editor to the parent.\n   * @param {DataTransferItem} item\n   * @param {AnnotationEditorLayer} parent\n   */\n  static paste(item, parent) {\n    unreachable(\"Not implemented\");\n  }\n\n  /**\n   * Get the properties to update in the UI for this editor.\n   * @returns {Array}\n   */\n  get propertiesToUpdate() {\n    return [];\n  }\n\n  get _isDraggable() {\n    return this.#isDraggable;\n  }\n\n  set _isDraggable(value) {\n    this.#isDraggable = value;\n    this.div?.classList.toggle(\"draggable\", value);\n  }\n\n  center() {\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    switch (this.parentRotation) {\n      case 90:\n        this.x -= (this.height * pageHeight) / (pageWidth * 2);\n        this.y += (this.width * pageWidth) / (pageHeight * 2);\n        break;\n      case 180:\n        this.x += this.width / 2;\n        this.y += this.height / 2;\n        break;\n      case 270:\n        this.x += (this.height * pageHeight) / (pageWidth * 2);\n        this.y -= (this.width * pageWidth) / (pageHeight * 2);\n        break;\n      default:\n        this.x -= this.width / 2;\n        this.y -= this.height / 2;\n        break;\n    }\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Add some commands into the CommandManager (undo/redo stuff).\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this._uiManager.addCommands(params);\n  }\n\n  get currentLayer() {\n    return this._uiManager.currentLayer;\n  }\n\n  /**\n   * This editor will be behind the others.\n   */\n  setInBackground() {\n    this.div.style.zIndex = 0;\n  }\n\n  /**\n   * This editor will be in the foreground.\n   */\n  setInForeground() {\n    this.div.style.zIndex = this.#zIndex;\n  }\n\n  setParent(parent) {\n    if (parent !== null) {\n      this.pageIndex = parent.pageIndex;\n      this.pageDimensions = parent.pageDimensions;\n    }\n    this.parent = parent;\n  }\n\n  /**\n   * onfocus callback.\n   */\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    if (!this.#hasBeenClicked) {\n      this.parent.setSelected(this);\n    } else {\n      this.#hasBeenClicked = false;\n    }\n  }\n\n  /**\n   * onblur callback.\n   * @param {FocusEvent} event\n   */\n  focusout(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n\n    if (!this.isAttachedToDOM) {\n      return;\n    }\n\n    // In case of focusout, the relatedTarget is the element which\n    // is grabbing the focus.\n    // So if the related target is an element under the div for this\n    // editor, then the editor isn't unactive.\n    const target = event.relatedTarget;\n    if (target?.closest(`#${this.id}`)) {\n      return;\n    }\n\n    event.preventDefault();\n\n    if (!this.parent?.isMultipleSelection) {\n      this.commitOrRemove();\n    }\n  }\n\n  commitOrRemove() {\n    if (this.isEmpty()) {\n      this.remove();\n    } else {\n      this.commit();\n    }\n  }\n\n  /**\n   * Commit the data contained in this editor.\n   */\n  commit() {\n    this.addToAnnotationStorage();\n  }\n\n  addToAnnotationStorage() {\n    this._uiManager.addToAnnotationStorage(this);\n  }\n\n  /**\n   * Set the editor position within its parent.\n   * @param {number} x\n   * @param {number} y\n   * @param {number} tx - x-translation in screen coordinates.\n   * @param {number} ty - y-translation in screen coordinates.\n   */\n  setAt(x, y, tx, ty) {\n    const [width, height] = this.parentDimensions;\n    [tx, ty] = this.screenToPageTranslation(tx, ty);\n\n    this.x = (x + tx) / width;\n    this.y = (y + ty) / height;\n\n    this.fixAndSetPosition();\n  }\n\n  #translate([width, height], x, y) {\n    [x, y] = this.screenToPageTranslation(x, y);\n\n    this.x += x / width;\n    this.y += y / height;\n\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Translate the editor position within its parent.\n   * @param {number} x - x-translation in screen coordinates.\n   * @param {number} y - y-translation in screen coordinates.\n   */\n  translate(x, y) {\n    this.#translate(this.parentDimensions, x, y);\n  }\n\n  /**\n   * Translate the editor position within its page and adjust the scroll\n   * in order to have the editor in the view.\n   * @param {number} x - x-translation in page coordinates.\n   * @param {number} y - y-translation in page coordinates.\n   */\n  translateInPage(x, y) {\n    this.#translate(this.pageDimensions, x, y);\n    this.div.scrollIntoView({ block: \"nearest\" });\n  }\n\n  drag(tx, ty) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.x += tx / parentWidth;\n    this.y += ty / parentHeight;\n    if (this.parent && (this.x < 0 || this.x > 1 || this.y < 0 || this.y > 1)) {\n      // It's possible to not have a parent: for example, when the user is\n      // dragging all the selected editors but this one on a page which has been\n      // destroyed.\n      // It's why we need to check for it. In such a situation, it isn't really\n      // a problem to not find a new parent: it's something which is related to\n      // what the user is seeing, hence it depends on how pages are layed out.\n\n      // The element will be outside of its parent so change the parent.\n      const { x, y } = this.div.getBoundingClientRect();\n      if (this.parent.findNewParent(this, x, y)) {\n        this.x -= Math.floor(this.x);\n        this.y -= Math.floor(this.y);\n      }\n    }\n\n    // The editor can be moved wherever the user wants, so we don't need to fix\n    // the position: it'll be done when the user will release the mouse button.\n\n    let { x, y } = this;\n    const [bx, by] = this.#getBaseTranslation();\n    x += bx;\n    y += by;\n\n    this.div.style.left = `${(100 * x).toFixed(2)}%`;\n    this.div.style.top = `${(100 * y).toFixed(2)}%`;\n    this.div.scrollIntoView({ block: \"nearest\" });\n  }\n\n  #getBaseTranslation() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    const { _borderLineWidth } = AnnotationEditor;\n    const x = _borderLineWidth / parentWidth;\n    const y = _borderLineWidth / parentHeight;\n    switch (this.rotation) {\n      case 90:\n        return [-x, y];\n      case 180:\n        return [x, y];\n      case 270:\n        return [x, -y];\n      default:\n        return [-x, -y];\n    }\n  }\n\n  fixAndSetPosition() {\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    let { x, y, width, height } = this;\n    width *= pageWidth;\n    height *= pageHeight;\n    x *= pageWidth;\n    y *= pageHeight;\n\n    switch (this.rotation) {\n      case 0:\n        x = Math.max(0, Math.min(pageWidth - width, x));\n        y = Math.max(0, Math.min(pageHeight - height, y));\n        break;\n      case 90:\n        x = Math.max(0, Math.min(pageWidth - height, x));\n        y = Math.min(pageHeight, Math.max(width, y));\n        break;\n      case 180:\n        x = Math.min(pageWidth, Math.max(width, x));\n        y = Math.min(pageHeight, Math.max(height, y));\n        break;\n      case 270:\n        x = Math.min(pageWidth, Math.max(height, x));\n        y = Math.max(0, Math.min(pageHeight - width, y));\n        break;\n    }\n\n    this.x = x /= pageWidth;\n    this.y = y /= pageHeight;\n\n    const [bx, by] = this.#getBaseTranslation();\n    x += bx;\n    y += by;\n\n    const { style } = this.div;\n    style.left = `${(100 * x).toFixed(2)}%`;\n    style.top = `${(100 * y).toFixed(2)}%`;\n\n    this.moveInDOM();\n  }\n\n  static #rotatePoint(x, y, angle) {\n    switch (angle) {\n      case 90:\n        return [y, -x];\n      case 180:\n        return [-x, -y];\n      case 270:\n        return [-y, x];\n      default:\n        return [x, y];\n    }\n  }\n\n  /**\n   * Convert a screen translation into a page one.\n   * @param {number} x\n   * @param {number} y\n   */\n  screenToPageTranslation(x, y) {\n    return AnnotationEditor.#rotatePoint(x, y, this.parentRotation);\n  }\n\n  /**\n   * Convert a page translation into a screen one.\n   * @param {number} x\n   * @param {number} y\n   */\n  pageTranslationToScreen(x, y) {\n    return AnnotationEditor.#rotatePoint(x, y, 360 - this.parentRotation);\n  }\n\n  #getRotationMatrix(rotation) {\n    switch (rotation) {\n      case 90: {\n        const [pageWidth, pageHeight] = this.pageDimensions;\n        return [0, -pageWidth / pageHeight, pageHeight / pageWidth, 0];\n      }\n      case 180:\n        return [-1, 0, 0, -1];\n      case 270: {\n        const [pageWidth, pageHeight] = this.pageDimensions;\n        return [0, pageWidth / pageHeight, -pageHeight / pageWidth, 0];\n      }\n      default:\n        return [1, 0, 0, 1];\n    }\n  }\n\n  get parentScale() {\n    return this._uiManager.viewParameters.realScale;\n  }\n\n  get parentRotation() {\n    return (this._uiManager.viewParameters.rotation + this.pageRotation) % 360;\n  }\n\n  get parentDimensions() {\n    const {\n      parentScale,\n      pageDimensions: [pageWidth, pageHeight],\n    } = this;\n    const scaledWidth = pageWidth * parentScale;\n    const scaledHeight = pageHeight * parentScale;\n    return FeatureTest.isCSSRoundSupported\n      ? [Math.round(scaledWidth), Math.round(scaledHeight)]\n      : [scaledWidth, scaledHeight];\n  }\n\n  /**\n   * Set the dimensions of this editor.\n   * @param {number} width\n   * @param {number} height\n   */\n  setDims(width, height) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.div.style.width = `${((100 * width) / parentWidth).toFixed(2)}%`;\n    if (!this.#keepAspectRatio) {\n      this.div.style.height = `${((100 * height) / parentHeight).toFixed(2)}%`;\n    }\n    this.#altTextButton?.classList.toggle(\n      \"small\",\n      width < AnnotationEditor.SMALL_EDITOR_SIZE ||\n        height < AnnotationEditor.SMALL_EDITOR_SIZE\n    );\n  }\n\n  fixDims() {\n    const { style } = this.div;\n    const { height, width } = style;\n    const widthPercent = width.endsWith(\"%\");\n    const heightPercent = !this.#keepAspectRatio && height.endsWith(\"%\");\n    if (widthPercent && heightPercent) {\n      return;\n    }\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    if (!widthPercent) {\n      style.width = `${((100 * parseFloat(width)) / parentWidth).toFixed(2)}%`;\n    }\n    if (!this.#keepAspectRatio && !heightPercent) {\n      style.height = `${((100 * parseFloat(height)) / parentHeight).toFixed(\n        2\n      )}%`;\n    }\n  }\n\n  /**\n   * Get the translation used to position this editor when it's created.\n   * @returns {Array<number>}\n   */\n  getInitialTranslation() {\n    return [0, 0];\n  }\n\n  #createResizers() {\n    if (this.#resizersDiv) {\n      return;\n    }\n    this.#resizersDiv = document.createElement(\"div\");\n    this.#resizersDiv.classList.add(\"resizers\");\n    const classes = [\"topLeft\", \"topRight\", \"bottomRight\", \"bottomLeft\"];\n    if (!this._willKeepAspectRatio) {\n      classes.push(\"topMiddle\", \"middleRight\", \"bottomMiddle\", \"middleLeft\");\n    }\n    for (const name of classes) {\n      const div = document.createElement(\"div\");\n      this.#resizersDiv.append(div);\n      div.classList.add(\"resizer\", name);\n      div.addEventListener(\n        \"pointerdown\",\n        this.#resizerPointerdown.bind(this, name)\n      );\n      div.addEventListener(\"contextmenu\", noContextMenu);\n    }\n    this.div.prepend(this.#resizersDiv);\n  }\n\n  #resizerPointerdown(name, event) {\n    event.preventDefault();\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      return;\n    }\n\n    const boundResizerPointermove = this.#resizerPointermove.bind(this, name);\n    const savedDraggable = this._isDraggable;\n    this._isDraggable = false;\n    const pointerMoveOptions = { passive: true, capture: true };\n    window.addEventListener(\n      \"pointermove\",\n      boundResizerPointermove,\n      pointerMoveOptions\n    );\n    const savedX = this.x;\n    const savedY = this.y;\n    const savedWidth = this.width;\n    const savedHeight = this.height;\n    const savedParentCursor = this.parent.div.style.cursor;\n    const savedCursor = this.div.style.cursor;\n    this.div.style.cursor = this.parent.div.style.cursor =\n      window.getComputedStyle(event.target).cursor;\n\n    const pointerUpCallback = () => {\n      this._isDraggable = savedDraggable;\n      window.removeEventListener(\"pointerup\", pointerUpCallback);\n      window.removeEventListener(\"blur\", pointerUpCallback);\n      window.removeEventListener(\n        \"pointermove\",\n        boundResizerPointermove,\n        pointerMoveOptions\n      );\n      this.parent.div.style.cursor = savedParentCursor;\n      this.div.style.cursor = savedCursor;\n\n      const newX = this.x;\n      const newY = this.y;\n      const newWidth = this.width;\n      const newHeight = this.height;\n      if (\n        newX === savedX &&\n        newY === savedY &&\n        newWidth === savedWidth &&\n        newHeight === savedHeight\n      ) {\n        return;\n      }\n\n      this.addCommands({\n        cmd: () => {\n          this.width = newWidth;\n          this.height = newHeight;\n          this.x = newX;\n          this.y = newY;\n          const [parentWidth, parentHeight] = this.parentDimensions;\n          this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n          this.fixAndSetPosition();\n        },\n        undo: () => {\n          this.width = savedWidth;\n          this.height = savedHeight;\n          this.x = savedX;\n          this.y = savedY;\n          const [parentWidth, parentHeight] = this.parentDimensions;\n          this.setDims(parentWidth * savedWidth, parentHeight * savedHeight);\n          this.fixAndSetPosition();\n        },\n        mustExec: true,\n      });\n    };\n    window.addEventListener(\"pointerup\", pointerUpCallback);\n    // If the user switches to another window (with alt+tab), then we end the\n    // resize session.\n    window.addEventListener(\"blur\", pointerUpCallback);\n  }\n\n  #resizerPointermove(name, event) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    const savedX = this.x;\n    const savedY = this.y;\n    const savedWidth = this.width;\n    const savedHeight = this.height;\n    const minWidth = AnnotationEditor.MIN_SIZE / parentWidth;\n    const minHeight = AnnotationEditor.MIN_SIZE / parentHeight;\n\n    // 10000 because we multiply by 100 and use toFixed(2) in fixAndSetPosition.\n    // Without rounding, the positions of the corners other than the top left\n    // one can be slightly wrong.\n    const round = x => Math.round(x * 10000) / 10000;\n    const rotationMatrix = this.#getRotationMatrix(this.rotation);\n    const transf = (x, y) => [\n      rotationMatrix[0] * x + rotationMatrix[2] * y,\n      rotationMatrix[1] * x + rotationMatrix[3] * y,\n    ];\n    const invRotationMatrix = this.#getRotationMatrix(360 - this.rotation);\n    const invTransf = (x, y) => [\n      invRotationMatrix[0] * x + invRotationMatrix[2] * y,\n      invRotationMatrix[1] * x + invRotationMatrix[3] * y,\n    ];\n    let getPoint;\n    let getOpposite;\n    let isDiagonal = false;\n    let isHorizontal = false;\n\n    switch (name) {\n      case \"topLeft\":\n        isDiagonal = true;\n        getPoint = (w, h) => [0, 0];\n        getOpposite = (w, h) => [w, h];\n        break;\n      case \"topMiddle\":\n        getPoint = (w, h) => [w / 2, 0];\n        getOpposite = (w, h) => [w / 2, h];\n        break;\n      case \"topRight\":\n        isDiagonal = true;\n        getPoint = (w, h) => [w, 0];\n        getOpposite = (w, h) => [0, h];\n        break;\n      case \"middleRight\":\n        isHorizontal = true;\n        getPoint = (w, h) => [w, h / 2];\n        getOpposite = (w, h) => [0, h / 2];\n        break;\n      case \"bottomRight\":\n        isDiagonal = true;\n        getPoint = (w, h) => [w, h];\n        getOpposite = (w, h) => [0, 0];\n        break;\n      case \"bottomMiddle\":\n        getPoint = (w, h) => [w / 2, h];\n        getOpposite = (w, h) => [w / 2, 0];\n        break;\n      case \"bottomLeft\":\n        isDiagonal = true;\n        getPoint = (w, h) => [0, h];\n        getOpposite = (w, h) => [w, 0];\n        break;\n      case \"middleLeft\":\n        isHorizontal = true;\n        getPoint = (w, h) => [0, h / 2];\n        getOpposite = (w, h) => [w, h / 2];\n        break;\n    }\n\n    const point = getPoint(savedWidth, savedHeight);\n    const oppositePoint = getOpposite(savedWidth, savedHeight);\n    let transfOppositePoint = transf(...oppositePoint);\n    const oppositeX = round(savedX + transfOppositePoint[0]);\n    const oppositeY = round(savedY + transfOppositePoint[1]);\n    let ratioX = 1;\n    let ratioY = 1;\n\n    let [deltaX, deltaY] = this.screenToPageTranslation(\n      event.movementX,\n      event.movementY\n    );\n    [deltaX, deltaY] = invTransf(deltaX / parentWidth, deltaY / parentHeight);\n\n    if (isDiagonal) {\n      const oldDiag = Math.hypot(savedWidth, savedHeight);\n      ratioX = ratioY = Math.max(\n        Math.min(\n          Math.hypot(\n            oppositePoint[0] - point[0] - deltaX,\n            oppositePoint[1] - point[1] - deltaY\n          ) / oldDiag,\n          // Avoid the editor to be larger than the page.\n          1 / savedWidth,\n          1 / savedHeight\n        ),\n        // Avoid the editor to be smaller than the minimum size.\n        minWidth / savedWidth,\n        minHeight / savedHeight\n      );\n    } else if (isHorizontal) {\n      ratioX =\n        Math.max(\n          minWidth,\n          Math.min(1, Math.abs(oppositePoint[0] - point[0] - deltaX))\n        ) / savedWidth;\n    } else {\n      ratioY =\n        Math.max(\n          minHeight,\n          Math.min(1, Math.abs(oppositePoint[1] - point[1] - deltaY))\n        ) / savedHeight;\n    }\n\n    const newWidth = round(savedWidth * ratioX);\n    const newHeight = round(savedHeight * ratioY);\n    transfOppositePoint = transf(...getOpposite(newWidth, newHeight));\n    const newX = oppositeX - transfOppositePoint[0];\n    const newY = oppositeY - transfOppositePoint[1];\n\n    this.width = newWidth;\n    this.height = newHeight;\n    this.x = newX;\n    this.y = newY;\n\n    this.setDims(parentWidth * newWidth, parentHeight * newHeight);\n    this.fixAndSetPosition();\n  }\n\n  async addAltTextButton() {\n    if (this.#altTextButton) {\n      return;\n    }\n    const altText = (this.#altTextButton = document.createElement(\"button\"));\n    altText.className = \"altText\";\n    const msg = await AnnotationEditor._l10nPromise.get(\n      \"editor_alt_text_button_label\"\n    );\n    altText.textContent = msg;\n    altText.setAttribute(\"aria-label\", msg);\n    altText.tabIndex = \"0\";\n    altText.addEventListener(\"contextmenu\", noContextMenu);\n    altText.addEventListener(\"pointerdown\", event => event.stopPropagation());\n    altText.addEventListener(\n      \"click\",\n      event => {\n        event.preventDefault();\n        this._uiManager.editAltText(this);\n      },\n      { capture: true }\n    );\n    altText.addEventListener(\"keydown\", event => {\n      if (event.target === altText && event.key === \"Enter\") {\n        event.preventDefault();\n        this._uiManager.editAltText(this);\n      }\n    });\n    this.#setAltTextButtonState();\n    this.div.append(altText);\n    if (!AnnotationEditor.SMALL_EDITOR_SIZE) {\n      // We take the width of the alt text button and we add 40% to it to be\n      // sure to have enough space for it.\n      const PERCENT = 40;\n      AnnotationEditor.SMALL_EDITOR_SIZE = Math.min(\n        128,\n        Math.round(altText.getBoundingClientRect().width * (1 + PERCENT / 100))\n      );\n    }\n  }\n\n  async #setAltTextButtonState() {\n    const button = this.#altTextButton;\n    if (!button) {\n      return;\n    }\n    if (!this.#altText && !this.#altTextDecorative) {\n      button.classList.remove(\"done\");\n      this.#altTextTooltip?.remove();\n      return;\n    }\n    AnnotationEditor._l10nPromise\n      .get(\"editor_alt_text_edit_button_label\")\n      .then(msg => {\n        button.setAttribute(\"aria-label\", msg);\n      });\n\n    let tooltip = this.#altTextTooltip;\n    if (!tooltip) {\n      this.#altTextTooltip = tooltip = document.createElement(\"span\");\n      tooltip.className = \"tooltip\";\n      tooltip.setAttribute(\"role\", \"tooltip\");\n      const id = (tooltip.id = `alt-text-tooltip-${this.id}`);\n      button.setAttribute(\"aria-describedby\", id);\n\n      const DELAY_TO_SHOW_TOOLTIP = 100;\n      button.addEventListener(\"mouseenter\", () => {\n        this.#altTextTooltipTimeout = setTimeout(() => {\n          this.#altTextTooltipTimeout = null;\n          this.#altTextTooltip.classList.add(\"show\");\n          this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n            source: this,\n            details: {\n              type: \"editing\",\n              subtype: this.editorType,\n              data: {\n                action: \"alt_text_tooltip\",\n              },\n            },\n          });\n        }, DELAY_TO_SHOW_TOOLTIP);\n      });\n      button.addEventListener(\"mouseleave\", () => {\n        clearTimeout(this.#altTextTooltipTimeout);\n        this.#altTextTooltipTimeout = null;\n        this.#altTextTooltip?.classList.remove(\"show\");\n      });\n    }\n    button.classList.add(\"done\");\n    tooltip.innerText = this.#altTextDecorative\n      ? await AnnotationEditor._l10nPromise.get(\n          \"editor_alt_text_decorative_tooltip\"\n        )\n      : this.#altText;\n\n    if (!tooltip.parentNode) {\n      button.append(tooltip);\n    }\n  }\n\n  getClientDimensions() {\n    return this.div.getBoundingClientRect();\n  }\n\n  get altTextData() {\n    return {\n      altText: this.#altText,\n      decorative: this.#altTextDecorative,\n    };\n  }\n\n  set altTextData({ altText, decorative }) {\n    if (this.#altText === altText && this.#altTextDecorative === decorative) {\n      return;\n    }\n    this.#altText = altText;\n    this.#altTextDecorative = decorative;\n    this.#setAltTextButtonState();\n  }\n\n  /**\n   * Render this editor in a div.\n   * @returns {HTMLDivElement}\n   */\n  render() {\n    this.div = document.createElement(\"div\");\n    this.div.setAttribute(\"data-editor-rotation\", (360 - this.rotation) % 360);\n    this.div.className = this.name;\n    this.div.setAttribute(\"id\", this.id);\n    this.div.setAttribute(\"tabIndex\", 0);\n\n    this.setInForeground();\n\n    this.div.addEventListener(\"focusin\", this.#boundFocusin);\n    this.div.addEventListener(\"focusout\", this.#boundFocusout);\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    if (this.parentRotation % 180 !== 0) {\n      this.div.style.maxWidth = `${((100 * parentHeight) / parentWidth).toFixed(\n        2\n      )}%`;\n      this.div.style.maxHeight = `${(\n        (100 * parentWidth) /\n        parentHeight\n      ).toFixed(2)}%`;\n    }\n\n    const [tx, ty] = this.getInitialTranslation();\n    this.translate(tx, ty);\n\n    bindEvents(this, this.div, [\"pointerdown\"]);\n\n    return this.div;\n  }\n\n  /**\n   * Onpointerdown callback.\n   * @param {PointerEvent} event\n   */\n  pointerdown(event) {\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Avoid to focus this editor because of a non-left click.\n      event.preventDefault();\n      return;\n    }\n\n    this.#hasBeenClicked = true;\n\n    this.#setUpDragSession(event);\n  }\n\n  #setUpDragSession(event) {\n    if (!this._isDraggable) {\n      return;\n    }\n\n    const isSelected = this._uiManager.isSelected(this);\n    this._uiManager.setUpDragSession();\n\n    let pointerMoveOptions, pointerMoveCallback;\n    if (isSelected) {\n      pointerMoveOptions = { passive: true, capture: true };\n      pointerMoveCallback = e => {\n        const [tx, ty] = this.screenToPageTranslation(e.movementX, e.movementY);\n        this._uiManager.dragSelectedEditors(tx, ty);\n      };\n      window.addEventListener(\n        \"pointermove\",\n        pointerMoveCallback,\n        pointerMoveOptions\n      );\n    }\n\n    const pointerUpCallback = () => {\n      window.removeEventListener(\"pointerup\", pointerUpCallback);\n      window.removeEventListener(\"blur\", pointerUpCallback);\n      if (isSelected) {\n        window.removeEventListener(\n          \"pointermove\",\n          pointerMoveCallback,\n          pointerMoveOptions\n        );\n      }\n\n      this.#hasBeenClicked = false;\n      if (!this._uiManager.endDragSession()) {\n        const { isMac } = FeatureTest.platform;\n        if (\n          (event.ctrlKey && !isMac) ||\n          event.shiftKey ||\n          (event.metaKey && isMac)\n        ) {\n          this.parent.toggleSelected(this);\n        } else {\n          this.parent.setSelected(this);\n        }\n      }\n    };\n    window.addEventListener(\"pointerup\", pointerUpCallback);\n    // If the user is using alt+tab during the dragging session, the pointerup\n    // event could be not fired, but a blur event is fired so we can use it in\n    // order to interrupt the dragging session.\n    window.addEventListener(\"blur\", pointerUpCallback);\n  }\n\n  moveInDOM() {\n    this.parent?.moveEditorInDOM(this);\n  }\n\n  _setParentAndPosition(parent, x, y) {\n    parent.changeParent(this);\n    this.x = x;\n    this.y = y;\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Convert the current rect into a page one.\n   */\n  getRect(tx, ty) {\n    const scale = this.parentScale;\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    const [pageX, pageY] = this.pageTranslation;\n    const shiftX = tx / scale;\n    const shiftY = ty / scale;\n    const x = this.x * pageWidth;\n    const y = this.y * pageHeight;\n    const width = this.width * pageWidth;\n    const height = this.height * pageHeight;\n\n    switch (this.rotation) {\n      case 0:\n        return [\n          x + shiftX + pageX,\n          pageHeight - y - shiftY - height + pageY,\n          x + shiftX + width + pageX,\n          pageHeight - y - shiftY + pageY,\n        ];\n      case 90:\n        return [\n          x + shiftY + pageX,\n          pageHeight - y + shiftX + pageY,\n          x + shiftY + height + pageX,\n          pageHeight - y + shiftX + width + pageY,\n        ];\n      case 180:\n        return [\n          x - shiftX - width + pageX,\n          pageHeight - y + shiftY + pageY,\n          x - shiftX + pageX,\n          pageHeight - y + shiftY + height + pageY,\n        ];\n      case 270:\n        return [\n          x - shiftY - height + pageX,\n          pageHeight - y - shiftX - width + pageY,\n          x - shiftY + pageX,\n          pageHeight - y - shiftX + pageY,\n        ];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n\n  getRectInCurrentCoords(rect, pageHeight) {\n    const [x1, y1, x2, y2] = rect;\n\n    const width = x2 - x1;\n    const height = y2 - y1;\n\n    switch (this.rotation) {\n      case 0:\n        return [x1, pageHeight - y2, width, height];\n      case 90:\n        return [x1, pageHeight - y1, height, width];\n      case 180:\n        return [x2, pageHeight - y1, width, height];\n      case 270:\n        return [x2, pageHeight - y2, height, width];\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n  }\n\n  /**\n   * Executed once this editor has been rendered.\n   */\n  onceAdded() {}\n\n  /**\n   * Check if the editor contains something.\n   * @returns {boolean}\n   */\n  isEmpty() {\n    return false;\n  }\n\n  /**\n   * Enable edit mode.\n   */\n  enableEditMode() {\n    this.#isInEditMode = true;\n  }\n\n  /**\n   * Disable edit mode.\n   */\n  disableEditMode() {\n    this.#isInEditMode = false;\n  }\n\n  /**\n   * Check if the editor is edited.\n   * @returns {boolean}\n   */\n  isInEditMode() {\n    return this.#isInEditMode;\n  }\n\n  /**\n   * If it returns true, then this editor handle the keyboard\n   * events itself.\n   * @returns {boolean}\n   */\n  shouldGetKeyboardEvents() {\n    return false;\n  }\n\n  /**\n   * Check if this editor needs to be rebuilt or not.\n   * @returns {boolean}\n   */\n  needsToBeRebuilt() {\n    return this.div && !this.isAttachedToDOM;\n  }\n\n  /**\n   * Rebuild the editor in case it has been removed on undo.\n   *\n   * To implement in subclasses.\n   */\n  rebuild() {\n    this.div?.addEventListener(\"focusin\", this.#boundFocusin);\n    this.div?.addEventListener(\"focusout\", this.#boundFocusout);\n  }\n\n  /**\n   * Serialize the editor.\n   * The result of the serialization will be used to construct a\n   * new annotation to add to the pdf document.\n   *\n   * To implement in subclasses.\n   * @param {boolean} isForCopying\n   * @param {Object} [context]\n   */\n  serialize(isForCopying = false, context = null) {\n    unreachable(\"An editor must be serializable\");\n  }\n\n  /**\n   * Deserialize the editor.\n   * The result of the deserialization is a new editor.\n   *\n   * @param {Object} data\n   * @param {AnnotationEditorLayer} parent\n   * @param {AnnotationEditorUIManager} uiManager\n   * @returns {AnnotationEditor}\n   */\n  static deserialize(data, parent, uiManager) {\n    const editor = new this.prototype.constructor({\n      parent,\n      id: parent.getNextId(),\n      uiManager,\n    });\n    editor.rotation = data.rotation;\n\n    const [pageWidth, pageHeight] = editor.pageDimensions;\n    const [x, y, width, height] = editor.getRectInCurrentCoords(\n      data.rect,\n      pageHeight\n    );\n    editor.x = x / pageWidth;\n    editor.y = y / pageHeight;\n    editor.width = width / pageWidth;\n    editor.height = height / pageHeight;\n\n    return editor;\n  }\n\n  /**\n   * Remove this editor.\n   * It's used on ctrl+backspace action.\n   */\n  remove() {\n    this.div.removeEventListener(\"focusin\", this.#boundFocusin);\n    this.div.removeEventListener(\"focusout\", this.#boundFocusout);\n\n    if (!this.isEmpty()) {\n      // The editor is removed but it can be back at some point thanks to\n      // undo/redo so we must commit it before.\n      this.commit();\n    }\n    if (this.parent) {\n      this.parent.remove(this);\n    } else {\n      this._uiManager.removeEditor(this);\n    }\n\n    // The editor is removed so we can remove the alt text button and if it's\n    // restored then it's up to the subclass to add it back.\n    this.#altTextButton?.remove();\n    this.#altTextButton = null;\n    this.#altTextTooltip = null;\n  }\n\n  /**\n   * @returns {boolean} true if this editor can be resized.\n   */\n  get isResizable() {\n    return false;\n  }\n\n  /**\n   * Add the resizers to this editor.\n   */\n  makeResizable() {\n    if (this.isResizable) {\n      this.#createResizers();\n      this.#resizersDiv.classList.remove(\"hidden\");\n    }\n  }\n\n  /**\n   * Select this editor.\n   */\n  select() {\n    this.makeResizable();\n    this.div?.classList.add(\"selectedEditor\");\n  }\n\n  /**\n   * Unselect this editor.\n   */\n  unselect() {\n    this.#resizersDiv?.classList.add(\"hidden\");\n    this.div?.classList.remove(\"selectedEditor\");\n    if (this.div?.contains(document.activeElement)) {\n      // Don't use this.div.blur() because we don't know where the focus will\n      // go.\n      this._uiManager.currentLayer.div.focus();\n    }\n  }\n\n  /**\n   * Update some parameters which have been changed through the UI.\n   * @param {number} type\n   * @param {*} value\n   */\n  updateParams(type, value) {}\n\n  /**\n   * When the user disables the editing mode some editors can change some of\n   * their properties.\n   */\n  disableEditing() {\n    if (this.#altTextButton) {\n      this.#altTextButton.hidden = true;\n    }\n  }\n\n  /**\n   * When the user enables the editing mode some editors can change some of\n   * their properties.\n   */\n  enableEditing() {\n    if (this.#altTextButton) {\n      this.#altTextButton.hidden = false;\n    }\n  }\n\n  /**\n   * The editor is about to be edited.\n   */\n  enterInEditMode() {}\n\n  /**\n   * Get the div which really contains the displayed content.\n   */\n  get contentDiv() {\n    return this.div;\n  }\n\n  /**\n   * If true then the editor is currently edited.\n   * @type {boolean}\n   */\n  get isEditing() {\n    return this.#isEditing;\n  }\n\n  /**\n   * When set to true, it means that this editor is currently edited.\n   * @param {boolean} value\n   */\n  set isEditing(value) {\n    this.#isEditing = value;\n    if (!this.parent) {\n      return;\n    }\n    if (value) {\n      this.parent.setSelected(this);\n      this.parent.setActiveEditor(this);\n    } else {\n      this.parent.setActiveEditor(null);\n    }\n  }\n\n  /**\n   * Set the aspect ratio to use when resizing.\n   * @param {number} width\n   * @param {number} height\n   */\n  setAspectRatio(width, height) {\n    this.#keepAspectRatio = true;\n    const aspectRatio = width / height;\n    const { style } = this.div;\n    style.aspectRatio = aspectRatio;\n    style.height = \"auto\";\n  }\n\n  static get MIN_SIZE() {\n    return 16;\n  }\n}\n\n// This class is used to fake an editor which has been deleted.\nclass FakeEditor extends AnnotationEditor {\n  constructor(params) {\n    super(params);\n    this.annotationElementId = params.annotationElementId;\n    this.deleted = true;\n  }\n\n  serialize() {\n    return {\n      id: this.annotationElementId,\n      deleted: true,\n      pageIndex: this.pageIndex,\n    };\n  }\n}\n\nexport { AnnotationEditor };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./editor.js\").AnnotationEditor} AnnotationEditor */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorPrefix,\n  AnnotationEditorType,\n  FeatureTest,\n  getUuid,\n  shadow,\n  Util,\n  warn,\n} from \"../../shared/util.js\";\nimport { getColorValues, getRGB, PixelsPerInch } from \"../display_utils.js\";\n\nfunction bindEvents(obj, element, names) {\n  for (const name of names) {\n    element.addEventListener(name, obj[name].bind(obj));\n  }\n}\n\n/**\n * Convert a number between 0 and 100 into an hex number between 0 and 255.\n * @param {number} opacity\n * @return {string}\n */\nfunction opacityToHex(opacity) {\n  return Math.round(Math.min(255, Math.max(1, 255 * opacity)))\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\n/**\n * Class to create some unique ids for the different editors.\n */\nclass IdManager {\n  #id = 0;\n\n  /**\n   * Get a unique id.\n   * @returns {string}\n   */\n  getId() {\n    return `${AnnotationEditorPrefix}${this.#id++}`;\n  }\n}\n\n/**\n * Class to manage the images used by the editors.\n * The main idea is to try to minimize the memory used by the images.\n * The images are cached and reused when possible\n * We use a refCounter to know when an image is not used anymore but we need to\n * be able to restore an image after a remove+undo, so we keep a file reference\n * or an url one.\n */\nclass ImageManager {\n  #baseId = getUuid();\n\n  #id = 0;\n\n  #cache = null;\n\n  static get _isSVGFittingCanvas() {\n    // By default, Firefox doesn't rescale without preserving the aspect ratio\n    // when drawing an SVG image on a canvas, see https://bugzilla.mozilla.org/1547776.\n    // The \"workaround\" is to append \"svgView(preserveAspectRatio(none))\" to the\n    // url, but according to comment #15, it seems that it leads to unexpected\n    // behavior in Safari.\n    const svg = `data:image/svg+xml;charset=UTF-8,<svg viewBox=\"0 0 1 1\" width=\"1\" height=\"1\" xmlns=\"http://www.w3.org/2000/svg\"><rect width=\"1\" height=\"1\" style=\"fill:red;\"/></svg>`;\n    const canvas = new OffscreenCanvas(1, 3);\n    const ctx = canvas.getContext(\"2d\");\n    const image = new Image();\n    image.src = svg;\n    const promise = image.decode().then(() => {\n      ctx.drawImage(image, 0, 0, 1, 1, 0, 0, 1, 3);\n      return new Uint32Array(ctx.getImageData(0, 0, 1, 1).data.buffer)[0] === 0;\n    });\n\n    return shadow(this, \"_isSVGFittingCanvas\", promise);\n  }\n\n  async #get(key, rawData) {\n    this.#cache ||= new Map();\n    let data = this.#cache.get(key);\n    if (data === null) {\n      // We already tried to load the image but it failed.\n      return null;\n    }\n    if (data?.bitmap) {\n      data.refCounter += 1;\n      return data;\n    }\n    try {\n      data ||= {\n        bitmap: null,\n        id: `image_${this.#baseId}_${this.#id++}`,\n        refCounter: 0,\n        isSvg: false,\n      };\n      let image;\n      if (typeof rawData === \"string\") {\n        data.url = rawData;\n\n        const response = await fetch(rawData);\n        if (!response.ok) {\n          throw new Error(response.statusText);\n        }\n        image = await response.blob();\n      } else {\n        image = data.file = rawData;\n      }\n\n      if (image.type === \"image/svg+xml\") {\n        // Unfortunately, createImageBitmap doesn't work with SVG images.\n        // (see https://bugzilla.mozilla.org/1841972).\n        const mustRemoveAspectRatioPromise = ImageManager._isSVGFittingCanvas;\n        const fileReader = new FileReader();\n        const imageElement = new Image();\n        const imagePromise = new Promise((resolve, reject) => {\n          imageElement.onload = () => {\n            data.bitmap = imageElement;\n            data.isSvg = true;\n            resolve();\n          };\n          fileReader.onload = async () => {\n            const url = (data.svgUrl = fileReader.result);\n            // We need to set the preserveAspectRatio to none in order to let\n            // the image fits the canvas when resizing.\n            imageElement.src = (await mustRemoveAspectRatioPromise)\n              ? `${url}#svgView(preserveAspectRatio(none))`\n              : url;\n          };\n          imageElement.onerror = fileReader.onerror = reject;\n        });\n        fileReader.readAsDataURL(image);\n        await imagePromise;\n      } else {\n        data.bitmap = await createImageBitmap(image);\n      }\n      data.refCounter = 1;\n    } catch (e) {\n      console.error(e);\n      data = null;\n    }\n    this.#cache.set(key, data);\n    if (data) {\n      this.#cache.set(data.id, data);\n    }\n    return data;\n  }\n\n  async getFromFile(file) {\n    const { lastModified, name, size, type } = file;\n    return this.#get(`${lastModified}_${name}_${size}_${type}`, file);\n  }\n\n  async getFromUrl(url) {\n    return this.#get(url, url);\n  }\n\n  async getFromId(id) {\n    this.#cache ||= new Map();\n    const data = this.#cache.get(id);\n    if (!data) {\n      return null;\n    }\n    if (data.bitmap) {\n      data.refCounter += 1;\n      return data;\n    }\n\n    if (data.file) {\n      return this.getFromFile(data.file);\n    }\n    return this.getFromUrl(data.url);\n  }\n\n  getSvgUrl(id) {\n    const data = this.#cache.get(id);\n    if (!data?.isSvg) {\n      return null;\n    }\n    return data.svgUrl;\n  }\n\n  deleteId(id) {\n    this.#cache ||= new Map();\n    const data = this.#cache.get(id);\n    if (!data) {\n      return;\n    }\n    data.refCounter -= 1;\n    if (data.refCounter !== 0) {\n      return;\n    }\n    data.bitmap = null;\n  }\n\n  // We can use the id only if it belongs this manager.\n  // We must take care of having the right manager because we can copy/paste\n  // some images from other documents, hence it'd be a pity to use an id from an\n  // other manager.\n  isValidId(id) {\n    return id.startsWith(`image_${this.#baseId}_`);\n  }\n}\n\n/**\n * Class to handle undo/redo.\n * Commands are just saved in a buffer.\n * If we hit some memory issues we could likely use a circular buffer.\n * It has to be used as a singleton.\n */\nclass CommandManager {\n  #commands = [];\n\n  #locked = false;\n\n  #maxSize;\n\n  #position = -1;\n\n  constructor(maxSize = 128) {\n    this.#maxSize = maxSize;\n  }\n\n  /**\n   * @typedef {Object} addOptions\n   * @property {function} cmd\n   * @property {function} undo\n   * @property {boolean} mustExec\n   * @property {number} type\n   * @property {boolean} overwriteIfSameType\n   * @property {boolean} keepUndo\n   */\n\n  /**\n   * Add a new couple of commands to be used in case of redo/undo.\n   * @param {addOptions} options\n   */\n  add({\n    cmd,\n    undo,\n    mustExec,\n    type = NaN,\n    overwriteIfSameType = false,\n    keepUndo = false,\n  }) {\n    if (mustExec) {\n      cmd();\n    }\n\n    if (this.#locked) {\n      return;\n    }\n\n    const save = { cmd, undo, type };\n    if (this.#position === -1) {\n      if (this.#commands.length > 0) {\n        // All the commands have been undone and then a new one is added\n        // hence we clear the queue.\n        this.#commands.length = 0;\n      }\n      this.#position = 0;\n      this.#commands.push(save);\n      return;\n    }\n\n    if (overwriteIfSameType && this.#commands[this.#position].type === type) {\n      // For example when we change a color we don't want to\n      // be able to undo all the steps, hence we only want to\n      // keep the last undoable action in this sequence of actions.\n      if (keepUndo) {\n        save.undo = this.#commands[this.#position].undo;\n      }\n      this.#commands[this.#position] = save;\n      return;\n    }\n\n    const next = this.#position + 1;\n    if (next === this.#maxSize) {\n      this.#commands.splice(0, 1);\n    } else {\n      this.#position = next;\n      if (next < this.#commands.length) {\n        this.#commands.splice(next);\n      }\n    }\n\n    this.#commands.push(save);\n  }\n\n  /**\n   * Undo the last command.\n   */\n  undo() {\n    if (this.#position === -1) {\n      // Nothing to undo.\n      return;\n    }\n\n    // Avoid to insert something during the undo execution.\n    this.#locked = true;\n    this.#commands[this.#position].undo();\n    this.#locked = false;\n\n    this.#position -= 1;\n  }\n\n  /**\n   * Redo the last command.\n   */\n  redo() {\n    if (this.#position < this.#commands.length - 1) {\n      this.#position += 1;\n\n      // Avoid to insert something during the redo execution.\n      this.#locked = true;\n      this.#commands[this.#position].cmd();\n      this.#locked = false;\n    }\n  }\n\n  /**\n   * Check if there is something to undo.\n   * @returns {boolean}\n   */\n  hasSomethingToUndo() {\n    return this.#position !== -1;\n  }\n\n  /**\n   * Check if there is something to redo.\n   * @returns {boolean}\n   */\n  hasSomethingToRedo() {\n    return this.#position < this.#commands.length - 1;\n  }\n\n  destroy() {\n    this.#commands = null;\n  }\n}\n\n/**\n * Class to handle the different keyboards shortcuts we can have on mac or\n * non-mac OSes.\n */\nclass KeyboardManager {\n  /**\n   * Create a new keyboard manager class.\n   * @param {Array<Array>} callbacks - an array containing an array of shortcuts\n   * and a callback to call.\n   * A shortcut is a string like `ctrl+c` or `mac+ctrl+c` for mac OS.\n   */\n  constructor(callbacks) {\n    this.buffer = [];\n    this.callbacks = new Map();\n    this.allKeys = new Set();\n\n    const { isMac } = FeatureTest.platform;\n    for (const [keys, callback, options = {}] of callbacks) {\n      for (const key of keys) {\n        const isMacKey = key.startsWith(\"mac+\");\n        if (isMac && isMacKey) {\n          this.callbacks.set(key.slice(4), { callback, options });\n          this.allKeys.add(key.split(\"+\").at(-1));\n        } else if (!isMac && !isMacKey) {\n          this.callbacks.set(key, { callback, options });\n          this.allKeys.add(key.split(\"+\").at(-1));\n        }\n      }\n    }\n  }\n\n  /**\n   * Serialize an event into a string in order to match a\n   * potential key for a callback.\n   * @param {KeyboardEvent} event\n   * @returns {string}\n   */\n  #serialize(event) {\n    if (event.altKey) {\n      this.buffer.push(\"alt\");\n    }\n    if (event.ctrlKey) {\n      this.buffer.push(\"ctrl\");\n    }\n    if (event.metaKey) {\n      this.buffer.push(\"meta\");\n    }\n    if (event.shiftKey) {\n      this.buffer.push(\"shift\");\n    }\n    this.buffer.push(event.key);\n    const str = this.buffer.join(\"+\");\n    this.buffer.length = 0;\n\n    return str;\n  }\n\n  /**\n   * Execute a callback, if any, for a given keyboard event.\n   * The self is used as `this` in the callback.\n   * @param {Object} self\n   * @param {KeyboardEvent} event\n   * @returns\n   */\n  exec(self, event) {\n    if (!this.allKeys.has(event.key)) {\n      return;\n    }\n    const info = this.callbacks.get(this.#serialize(event));\n    if (!info) {\n      return;\n    }\n    const {\n      callback,\n      options: { bubbles = false, args = [], checker = null },\n    } = info;\n\n    if (checker && !checker(self, event)) {\n      return;\n    }\n    callback.bind(self, ...args)();\n\n    // For example, ctrl+s in a FreeText must be handled by the viewer, hence\n    // the event must bubble.\n    if (!bubbles) {\n      event.stopPropagation();\n      event.preventDefault();\n    }\n  }\n}\n\nclass ColorManager {\n  static _colorsMapping = new Map([\n    [\"CanvasText\", [0, 0, 0]],\n    [\"Canvas\", [255, 255, 255]],\n  ]);\n\n  get _colors() {\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"LIB\") &&\n      typeof document === \"undefined\"\n    ) {\n      return shadow(this, \"_colors\", ColorManager._colorsMapping);\n    }\n\n    const colors = new Map([\n      [\"CanvasText\", null],\n      [\"Canvas\", null],\n    ]);\n    getColorValues(colors);\n    return shadow(this, \"_colors\", colors);\n  }\n\n  /**\n   * In High Contrast Mode, the color on the screen is not always the\n   * real color used in the pdf.\n   * For example in some cases white can appear to be black but when saving\n   * we want to have white.\n   * @param {string} color\n   * @returns {Array<number>}\n   */\n  convert(color) {\n    const rgb = getRGB(color);\n    if (!window.matchMedia(\"(forced-colors: active)\").matches) {\n      return rgb;\n    }\n\n    for (const [name, RGB] of this._colors) {\n      if (RGB.every((x, i) => x === rgb[i])) {\n        return ColorManager._colorsMapping.get(name);\n      }\n    }\n    return rgb;\n  }\n\n  /**\n   * An input element must have its color value as a hex string\n   * and not as color name.\n   * So this function converts a name into an hex string.\n   * @param {string} name\n   * @returns {string}\n   */\n  getHexCode(name) {\n    const rgb = this._colors.get(name);\n    if (!rgb) {\n      return name;\n    }\n    return Util.makeHexColor(...rgb);\n  }\n}\n\n/**\n * A pdf has several pages and each of them when it will rendered\n * will have an AnnotationEditorLayer which will contain the some\n * new Annotations associated to an editor in order to modify them.\n *\n * This class is used to manage all the different layers, editors and\n * some action like copy/paste, undo/redo, ...\n */\nclass AnnotationEditorUIManager {\n  #activeEditor = null;\n\n  #allEditors = new Map();\n\n  #allLayers = new Map();\n\n  #altTextManager = null;\n\n  #annotationStorage = null;\n\n  #commandManager = new CommandManager();\n\n  #currentPageIndex = 0;\n\n  #deletedAnnotationsElementIds = new Set();\n\n  #draggingEditors = null;\n\n  #editorTypes = null;\n\n  #editorsToRescale = new Set();\n\n  #filterFactory = null;\n\n  #idManager = new IdManager();\n\n  #isEnabled = false;\n\n  #isWaiting = false;\n\n  #lastActiveElement = null;\n\n  #mode = AnnotationEditorType.NONE;\n\n  #selectedEditors = new Set();\n\n  #pageColors = null;\n\n  #boundBlur = this.blur.bind(this);\n\n  #boundFocus = this.focus.bind(this);\n\n  #boundCopy = this.copy.bind(this);\n\n  #boundCut = this.cut.bind(this);\n\n  #boundPaste = this.paste.bind(this);\n\n  #boundKeydown = this.keydown.bind(this);\n\n  #boundOnEditingAction = this.onEditingAction.bind(this);\n\n  #boundOnPageChanging = this.onPageChanging.bind(this);\n\n  #boundOnScaleChanging = this.onScaleChanging.bind(this);\n\n  #boundOnRotationChanging = this.onRotationChanging.bind(this);\n\n  #previousStates = {\n    isEditing: false,\n    isEmpty: true,\n    hasSomethingToUndo: false,\n    hasSomethingToRedo: false,\n    hasSelectedEditor: false,\n  };\n\n  #translation = [0, 0];\n\n  #translationTimeoutId = null;\n\n  #container = null;\n\n  #viewer = null;\n\n  static TRANSLATE_SMALL = 1; // page units.\n\n  static TRANSLATE_BIG = 10; // page units.\n\n  static get _keyboardManager() {\n    const proto = AnnotationEditorUIManager.prototype;\n\n    const arrowChecker = self => {\n      // If the focused element is an input, we don't want to handle the arrow.\n      // For example, sliders can be controlled with the arrow keys.\n      const { activeElement } = document;\n      return (\n        activeElement &&\n        self.#container.contains(activeElement) &&\n        self.hasSomethingToControl()\n      );\n    };\n\n    const small = this.TRANSLATE_SMALL;\n    const big = this.TRANSLATE_BIG;\n\n    return shadow(\n      this,\n      \"_keyboardManager\",\n      new KeyboardManager([\n        [[\"ctrl+a\", \"mac+meta+a\"], proto.selectAll],\n        [[\"ctrl+z\", \"mac+meta+z\"], proto.undo],\n        [\n          // On mac, depending of the OS version, the event.key is either \"z\" or\n          // \"Z\" when the user presses \"meta+shift+z\".\n          [\n            \"ctrl+y\",\n            \"ctrl+shift+z\",\n            \"mac+meta+shift+z\",\n            \"ctrl+shift+Z\",\n            \"mac+meta+shift+Z\",\n          ],\n          proto.redo,\n        ],\n        [\n          [\n            \"Backspace\",\n            \"alt+Backspace\",\n            \"ctrl+Backspace\",\n            \"shift+Backspace\",\n            \"mac+Backspace\",\n            \"mac+alt+Backspace\",\n            \"mac+ctrl+Backspace\",\n            \"Delete\",\n            \"ctrl+Delete\",\n            \"shift+Delete\",\n            \"mac+Delete\",\n          ],\n          proto.delete,\n        ],\n        [[\"Escape\", \"mac+Escape\"], proto.unselectAll],\n        [\n          [\"ArrowLeft\", \"mac+ArrowLeft\"],\n          proto.translateSelectedEditors,\n          { args: [-small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"],\n          proto.translateSelectedEditors,\n          { args: [-big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowRight\", \"mac+ArrowRight\"],\n          proto.translateSelectedEditors,\n          { args: [small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"],\n          proto.translateSelectedEditors,\n          { args: [big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowUp\", \"mac+ArrowUp\"],\n          proto.translateSelectedEditors,\n          { args: [0, -small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"],\n          proto.translateSelectedEditors,\n          { args: [0, -big], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowDown\", \"mac+ArrowDown\"],\n          proto.translateSelectedEditors,\n          { args: [0, small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"],\n          proto.translateSelectedEditors,\n          { args: [0, big], checker: arrowChecker },\n        ],\n      ])\n    );\n  }\n\n  constructor(\n    container,\n    viewer,\n    altTextManager,\n    eventBus,\n    pdfDocument,\n    pageColors\n  ) {\n    this.#container = container;\n    this.#viewer = viewer;\n    this.#altTextManager = altTextManager;\n    this._eventBus = eventBus;\n    this._eventBus._on(\"editingaction\", this.#boundOnEditingAction);\n    this._eventBus._on(\"pagechanging\", this.#boundOnPageChanging);\n    this._eventBus._on(\"scalechanging\", this.#boundOnScaleChanging);\n    this._eventBus._on(\"rotationchanging\", this.#boundOnRotationChanging);\n    this.#annotationStorage = pdfDocument.annotationStorage;\n    this.#filterFactory = pdfDocument.filterFactory;\n    this.#pageColors = pageColors;\n    this.viewParameters = {\n      realScale: PixelsPerInch.PDF_TO_CSS_UNITS,\n      rotation: 0,\n    };\n  }\n\n  destroy() {\n    this.#removeKeyboardManager();\n    this.#removeFocusManager();\n    this._eventBus._off(\"editingaction\", this.#boundOnEditingAction);\n    this._eventBus._off(\"pagechanging\", this.#boundOnPageChanging);\n    this._eventBus._off(\"scalechanging\", this.#boundOnScaleChanging);\n    this._eventBus._off(\"rotationchanging\", this.#boundOnRotationChanging);\n    for (const layer of this.#allLayers.values()) {\n      layer.destroy();\n    }\n    this.#allLayers.clear();\n    this.#allEditors.clear();\n    this.#editorsToRescale.clear();\n    this.#activeEditor = null;\n    this.#selectedEditors.clear();\n    this.#commandManager.destroy();\n    this.#altTextManager.destroy();\n  }\n\n  get hcmFilter() {\n    return shadow(\n      this,\n      \"hcmFilter\",\n      this.#pageColors\n        ? this.#filterFactory.addHCMFilter(\n            this.#pageColors.foreground,\n            this.#pageColors.background\n          )\n        : \"none\"\n    );\n  }\n\n  get direction() {\n    return shadow(\n      this,\n      \"direction\",\n      getComputedStyle(this.#container).direction\n    );\n  }\n\n  editAltText(editor) {\n    this.#altTextManager?.editAltText(this, editor);\n  }\n\n  onPageChanging({ pageNumber }) {\n    this.#currentPageIndex = pageNumber - 1;\n  }\n\n  focusMainContainer() {\n    this.#container.focus();\n  }\n\n  findParent(x, y) {\n    for (const layer of this.#allLayers.values()) {\n      const {\n        x: layerX,\n        y: layerY,\n        width,\n        height,\n      } = layer.div.getBoundingClientRect();\n      if (\n        x >= layerX &&\n        x <= layerX + width &&\n        y >= layerY &&\n        y <= layerY + height\n      ) {\n        return layer;\n      }\n    }\n    return null;\n  }\n\n  disableUserSelect(value = false) {\n    this.#viewer.classList.toggle(\"noUserSelect\", value);\n  }\n\n  addShouldRescale(editor) {\n    this.#editorsToRescale.add(editor);\n  }\n\n  removeShouldRescale(editor) {\n    this.#editorsToRescale.delete(editor);\n  }\n\n  onScaleChanging({ scale }) {\n    this.commitOrRemove();\n    this.viewParameters.realScale = scale * PixelsPerInch.PDF_TO_CSS_UNITS;\n    for (const editor of this.#editorsToRescale) {\n      editor.onScaleChanging();\n    }\n  }\n\n  onRotationChanging({ pagesRotation }) {\n    this.commitOrRemove();\n    this.viewParameters.rotation = pagesRotation;\n  }\n\n  /**\n   * Add an editor in the annotation storage.\n   * @param {AnnotationEditor} editor\n   */\n  addToAnnotationStorage(editor) {\n    if (\n      !editor.isEmpty() &&\n      this.#annotationStorage &&\n      !this.#annotationStorage.has(editor.id)\n    ) {\n      this.#annotationStorage.setValue(editor.id, editor);\n    }\n  }\n\n  #addFocusManager() {\n    window.addEventListener(\"focus\", this.#boundFocus);\n    window.addEventListener(\"blur\", this.#boundBlur);\n  }\n\n  #removeFocusManager() {\n    window.removeEventListener(\"focus\", this.#boundFocus);\n    window.removeEventListener(\"blur\", this.#boundBlur);\n  }\n\n  blur() {\n    if (!this.hasSelection) {\n      return;\n    }\n    // When several editors are selected and the window loses focus, we want to\n    // keep the last active element in order to be able to focus it again when\n    // the window gets the focus back but we don't want to trigger any focus\n    // callbacks else only one editor will be selected.\n    const { activeElement } = document;\n    for (const editor of this.#selectedEditors) {\n      if (editor.div.contains(activeElement)) {\n        this.#lastActiveElement = [editor, activeElement];\n        editor._focusEventsAllowed = false;\n        break;\n      }\n    }\n  }\n\n  focus() {\n    if (!this.#lastActiveElement) {\n      return;\n    }\n    const [lastEditor, lastActiveElement] = this.#lastActiveElement;\n    this.#lastActiveElement = null;\n    lastActiveElement.addEventListener(\n      \"focusin\",\n      () => {\n        lastEditor._focusEventsAllowed = true;\n      },\n      { once: true }\n    );\n    lastActiveElement.focus();\n  }\n\n  #addKeyboardManager() {\n    // The keyboard events are caught at the container level in order to be able\n    // to execute some callbacks even if the current page doesn't have focus.\n    window.addEventListener(\"keydown\", this.#boundKeydown, { capture: true });\n  }\n\n  #removeKeyboardManager() {\n    window.removeEventListener(\"keydown\", this.#boundKeydown, {\n      capture: true,\n    });\n  }\n\n  #addCopyPasteListeners() {\n    document.addEventListener(\"copy\", this.#boundCopy);\n    document.addEventListener(\"cut\", this.#boundCut);\n    document.addEventListener(\"paste\", this.#boundPaste);\n  }\n\n  #removeCopyPasteListeners() {\n    document.removeEventListener(\"copy\", this.#boundCopy);\n    document.removeEventListener(\"cut\", this.#boundCut);\n    document.removeEventListener(\"paste\", this.#boundPaste);\n  }\n\n  addEditListeners() {\n    this.#addKeyboardManager();\n    this.#addCopyPasteListeners();\n  }\n\n  removeEditListeners() {\n    this.#removeKeyboardManager();\n    this.#removeCopyPasteListeners();\n  }\n\n  /**\n   * Copy callback.\n   * @param {ClipboardEvent} event\n   */\n  copy(event) {\n    event.preventDefault();\n\n    // An editor is being edited so just commit it.\n    this.#activeEditor?.commitOrRemove();\n\n    if (!this.hasSelection) {\n      return;\n    }\n\n    const editors = [];\n    for (const editor of this.#selectedEditors) {\n      const serialized = editor.serialize(/* isForCopying = */ true);\n      if (serialized) {\n        editors.push(serialized);\n      }\n    }\n    if (editors.length === 0) {\n      return;\n    }\n\n    event.clipboardData.setData(\"application/pdfjs\", JSON.stringify(editors));\n  }\n\n  /**\n   * Cut callback.\n   * @param {ClipboardEvent} event\n   */\n  cut(event) {\n    this.copy(event);\n    this.delete();\n  }\n\n  /**\n   * Paste callback.\n   * @param {ClipboardEvent} event\n   */\n  paste(event) {\n    event.preventDefault();\n    const { clipboardData } = event;\n    for (const item of clipboardData.items) {\n      for (const editorType of this.#editorTypes) {\n        if (editorType.isHandlingMimeForPasting(item.type)) {\n          editorType.paste(item, this.currentLayer);\n          return;\n        }\n      }\n    }\n\n    let data = clipboardData.getData(\"application/pdfjs\");\n    if (!data) {\n      return;\n    }\n\n    try {\n      data = JSON.parse(data);\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n      return;\n    }\n\n    if (!Array.isArray(data)) {\n      return;\n    }\n\n    this.unselectAll();\n    const layer = this.currentLayer;\n\n    try {\n      const newEditors = [];\n      for (const editor of data) {\n        const deserializedEditor = layer.deserialize(editor);\n        if (!deserializedEditor) {\n          return;\n        }\n        newEditors.push(deserializedEditor);\n      }\n\n      const cmd = () => {\n        for (const editor of newEditors) {\n          this.#addEditorToLayer(editor);\n        }\n        this.#selectEditors(newEditors);\n      };\n      const undo = () => {\n        for (const editor of newEditors) {\n          editor.remove();\n        }\n      };\n      this.addCommands({ cmd, undo, mustExec: true });\n    } catch (ex) {\n      warn(`paste: \"${ex.message}\".`);\n    }\n  }\n\n  /**\n   * Keydown callback.\n   * @param {KeyboardEvent} event\n   */\n  keydown(event) {\n    if (!this.getActive()?.shouldGetKeyboardEvents()) {\n      AnnotationEditorUIManager._keyboardManager.exec(this, event);\n    }\n  }\n\n  /**\n   * Execute an action for a given name.\n   * For example, the user can click on the \"Undo\" entry in the context menu\n   * and it'll trigger the undo action.\n   * @param {Object} details\n   */\n  onEditingAction(details) {\n    if ([\"undo\", \"redo\", \"delete\", \"selectAll\"].includes(details.name)) {\n      this[details.name]();\n    }\n  }\n\n  /**\n   * Update the different possible states of this manager, e.g. is there\n   * something to undo, redo, ...\n   * @param {Object} details\n   */\n  #dispatchUpdateStates(details) {\n    const hasChanged = Object.entries(details).some(\n      ([key, value]) => this.#previousStates[key] !== value\n    );\n\n    if (hasChanged) {\n      this._eventBus.dispatch(\"annotationeditorstateschanged\", {\n        source: this,\n        details: Object.assign(this.#previousStates, details),\n      });\n    }\n  }\n\n  #dispatchUpdateUI(details) {\n    this._eventBus.dispatch(\"annotationeditorparamschanged\", {\n      source: this,\n      details,\n    });\n  }\n\n  /**\n   * Set the editing state.\n   * It can be useful to temporarily disable it when the user is editing a\n   * FreeText annotation.\n   * @param {boolean} isEditing\n   */\n  setEditingState(isEditing) {\n    if (isEditing) {\n      this.#addFocusManager();\n      this.#addKeyboardManager();\n      this.#addCopyPasteListeners();\n      this.#dispatchUpdateStates({\n        isEditing: this.#mode !== AnnotationEditorType.NONE,\n        isEmpty: this.#isEmpty(),\n        hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n        hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n        hasSelectedEditor: false,\n      });\n    } else {\n      this.#removeFocusManager();\n      this.#removeKeyboardManager();\n      this.#removeCopyPasteListeners();\n      this.#dispatchUpdateStates({\n        isEditing: false,\n      });\n      this.disableUserSelect(false);\n    }\n  }\n\n  registerEditorTypes(types) {\n    if (this.#editorTypes) {\n      return;\n    }\n    this.#editorTypes = types;\n    for (const editorType of this.#editorTypes) {\n      this.#dispatchUpdateUI(editorType.defaultPropertiesToUpdate);\n    }\n  }\n\n  /**\n   * Get an id.\n   * @returns {string}\n   */\n  getId() {\n    return this.#idManager.getId();\n  }\n\n  get currentLayer() {\n    return this.#allLayers.get(this.#currentPageIndex);\n  }\n\n  getLayer(pageIndex) {\n    return this.#allLayers.get(pageIndex);\n  }\n\n  get currentPageIndex() {\n    return this.#currentPageIndex;\n  }\n\n  /**\n   * Add a new layer for a page which will contains the editors.\n   * @param {AnnotationEditorLayer} layer\n   */\n  addLayer(layer) {\n    this.#allLayers.set(layer.pageIndex, layer);\n    if (this.#isEnabled) {\n      layer.enable();\n    } else {\n      layer.disable();\n    }\n  }\n\n  /**\n   * Remove a layer.\n   * @param {AnnotationEditorLayer} layer\n   */\n  removeLayer(layer) {\n    this.#allLayers.delete(layer.pageIndex);\n  }\n\n  /**\n   * Change the editor mode (None, FreeText, Ink, ...)\n   * @param {number} mode\n   * @param {string|null} editId\n   */\n  updateMode(mode, editId = null) {\n    if (this.#mode === mode) {\n      return;\n    }\n    this.#mode = mode;\n    if (mode === AnnotationEditorType.NONE) {\n      this.setEditingState(false);\n      this.#disableAll();\n      return;\n    }\n    this.setEditingState(true);\n    this.#enableAll();\n    this.unselectAll();\n    for (const layer of this.#allLayers.values()) {\n      layer.updateMode(mode);\n    }\n    if (!editId) {\n      return;\n    }\n    for (const editor of this.#allEditors.values()) {\n      if (editor.annotationElementId === editId) {\n        this.setSelected(editor);\n        editor.enterInEditMode();\n        break;\n      }\n    }\n  }\n\n  /**\n   * Update the toolbar if it's required to reflect the tool currently used.\n   * @param {number} mode\n   * @returns {undefined}\n   */\n  updateToolbar(mode) {\n    if (mode === this.#mode) {\n      return;\n    }\n    this._eventBus.dispatch(\"switchannotationeditormode\", {\n      source: this,\n      mode,\n    });\n  }\n\n  /**\n   * Update a parameter in the current editor or globally.\n   * @param {number} type\n   * @param {*} value\n   */\n  updateParams(type, value) {\n    if (!this.#editorTypes) {\n      return;\n    }\n    if (type === AnnotationEditorParamsType.CREATE) {\n      this.currentLayer.addNewEditor(type);\n      return;\n    }\n\n    for (const editor of this.#selectedEditors) {\n      editor.updateParams(type, value);\n    }\n\n    for (const editorType of this.#editorTypes) {\n      editorType.updateDefaultParams(type, value);\n    }\n  }\n\n  enableWaiting(mustWait = false) {\n    if (this.#isWaiting === mustWait) {\n      return;\n    }\n    this.#isWaiting = mustWait;\n    for (const layer of this.#allLayers.values()) {\n      if (mustWait) {\n        layer.disableClick();\n      } else {\n        layer.enableClick();\n      }\n      layer.div.classList.toggle(\"waiting\", mustWait);\n    }\n  }\n\n  /**\n   * Enable all the layers.\n   */\n  #enableAll() {\n    if (!this.#isEnabled) {\n      this.#isEnabled = true;\n      for (const layer of this.#allLayers.values()) {\n        layer.enable();\n      }\n    }\n  }\n\n  /**\n   * Disable all the layers.\n   */\n  #disableAll() {\n    this.unselectAll();\n    if (this.#isEnabled) {\n      this.#isEnabled = false;\n      for (const layer of this.#allLayers.values()) {\n        layer.disable();\n      }\n    }\n  }\n\n  /**\n   * Get all the editors belonging to a given page.\n   * @param {number} pageIndex\n   * @returns {Array<AnnotationEditor>}\n   */\n  getEditors(pageIndex) {\n    const editors = [];\n    for (const editor of this.#allEditors.values()) {\n      if (editor.pageIndex === pageIndex) {\n        editors.push(editor);\n      }\n    }\n    return editors;\n  }\n\n  /**\n   * Get an editor with the given id.\n   * @param {string} id\n   * @returns {AnnotationEditor}\n   */\n  getEditor(id) {\n    return this.#allEditors.get(id);\n  }\n\n  /**\n   * Add a new editor.\n   * @param {AnnotationEditor} editor\n   */\n  addEditor(editor) {\n    this.#allEditors.set(editor.id, editor);\n  }\n\n  /**\n   * Remove an editor.\n   * @param {AnnotationEditor} editor\n   */\n  removeEditor(editor) {\n    this.#allEditors.delete(editor.id);\n    this.unselect(editor);\n    if (\n      !editor.annotationElementId ||\n      !this.#deletedAnnotationsElementIds.has(editor.annotationElementId)\n    ) {\n      this.#annotationStorage?.remove(editor.id);\n    }\n  }\n\n  /**\n   * The annotation element with the given id has been deleted.\n   * @param {AnnotationEditor} editor\n   */\n  addDeletedAnnotationElement(editor) {\n    this.#deletedAnnotationsElementIds.add(editor.annotationElementId);\n    editor.deleted = true;\n  }\n\n  /**\n   * Check if the annotation element with the given id has been deleted.\n   * @param {string} annotationElementId\n   * @returns {boolean}\n   */\n  isDeletedAnnotationElement(annotationElementId) {\n    return this.#deletedAnnotationsElementIds.has(annotationElementId);\n  }\n\n  /**\n   * The annotation element with the given id have been restored.\n   * @param {AnnotationEditor} editor\n   */\n  removeDeletedAnnotationElement(editor) {\n    this.#deletedAnnotationsElementIds.delete(editor.annotationElementId);\n    editor.deleted = false;\n  }\n\n  /**\n   * Add an editor to the layer it belongs to or add it to the global map.\n   * @param {AnnotationEditor} editor\n   */\n  #addEditorToLayer(editor) {\n    const layer = this.#allLayers.get(editor.pageIndex);\n    if (layer) {\n      layer.addOrRebuild(editor);\n    } else {\n      this.addEditor(editor);\n    }\n  }\n\n  /**\n   * Set the given editor as the active one.\n   * @param {AnnotationEditor} editor\n   */\n  setActiveEditor(editor) {\n    if (this.#activeEditor === editor) {\n      return;\n    }\n\n    this.#activeEditor = editor;\n    if (editor) {\n      this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    }\n  }\n\n  /**\n   * Add or remove an editor the current selection.\n   * @param {AnnotationEditor} editor\n   */\n  toggleSelected(editor) {\n    if (this.#selectedEditors.has(editor)) {\n      this.#selectedEditors.delete(editor);\n      editor.unselect();\n      this.#dispatchUpdateStates({\n        hasSelectedEditor: this.hasSelection,\n      });\n      return;\n    }\n    this.#selectedEditors.add(editor);\n    editor.select();\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: true,\n    });\n  }\n\n  /**\n   * Set the last selected editor.\n   * @param {AnnotationEditor} editor\n   */\n  setSelected(editor) {\n    for (const ed of this.#selectedEditors) {\n      if (ed !== editor) {\n        ed.unselect();\n      }\n    }\n    this.#selectedEditors.clear();\n\n    this.#selectedEditors.add(editor);\n    editor.select();\n    this.#dispatchUpdateUI(editor.propertiesToUpdate);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: true,\n    });\n  }\n\n  /**\n   * Check if the editor is selected.\n   * @param {AnnotationEditor} editor\n   */\n  isSelected(editor) {\n    return this.#selectedEditors.has(editor);\n  }\n\n  /**\n   * Unselect an editor.\n   * @param {AnnotationEditor} editor\n   */\n  unselect(editor) {\n    editor.unselect();\n    this.#selectedEditors.delete(editor);\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: this.hasSelection,\n    });\n  }\n\n  get hasSelection() {\n    return this.#selectedEditors.size !== 0;\n  }\n\n  /**\n   * Undo the last command.\n   */\n  undo() {\n    this.#commandManager.undo();\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: this.#commandManager.hasSomethingToUndo(),\n      hasSomethingToRedo: true,\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  /**\n   * Redo the last undoed command.\n   */\n  redo() {\n    this.#commandManager.redo();\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: this.#commandManager.hasSomethingToRedo(),\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  /**\n   * Add a command to execute (cmd) and another one to undo it.\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this.#commandManager.add(params);\n    this.#dispatchUpdateStates({\n      hasSomethingToUndo: true,\n      hasSomethingToRedo: false,\n      isEmpty: this.#isEmpty(),\n    });\n  }\n\n  #isEmpty() {\n    if (this.#allEditors.size === 0) {\n      return true;\n    }\n\n    if (this.#allEditors.size === 1) {\n      for (const editor of this.#allEditors.values()) {\n        return editor.isEmpty();\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Delete the current editor or all.\n   */\n  delete() {\n    this.commitOrRemove();\n    if (!this.hasSelection) {\n      return;\n    }\n\n    const editors = [...this.#selectedEditors];\n    const cmd = () => {\n      for (const editor of editors) {\n        editor.remove();\n      }\n    };\n    const undo = () => {\n      for (const editor of editors) {\n        this.#addEditorToLayer(editor);\n      }\n    };\n\n    this.addCommands({ cmd, undo, mustExec: true });\n  }\n\n  commitOrRemove() {\n    // An editor is being edited so just commit it.\n    this.#activeEditor?.commitOrRemove();\n  }\n\n  hasSomethingToControl() {\n    return this.#activeEditor || this.hasSelection;\n  }\n\n  /**\n   * Select the editors.\n   * @param {Array<AnnotationEditor>} editors\n   */\n  #selectEditors(editors) {\n    this.#selectedEditors.clear();\n    for (const editor of editors) {\n      if (editor.isEmpty()) {\n        continue;\n      }\n      this.#selectedEditors.add(editor);\n      editor.select();\n    }\n    this.#dispatchUpdateStates({ hasSelectedEditor: true });\n  }\n\n  /**\n   * Select all the editors.\n   */\n  selectAll() {\n    for (const editor of this.#selectedEditors) {\n      editor.commit();\n    }\n    this.#selectEditors(this.#allEditors.values());\n  }\n\n  /**\n   * Unselect all the selected editors.\n   */\n  unselectAll() {\n    if (this.#activeEditor) {\n      // An editor is being edited so just commit it.\n      this.#activeEditor.commitOrRemove();\n      return;\n    }\n\n    if (!this.hasSelection) {\n      return;\n    }\n    for (const editor of this.#selectedEditors) {\n      editor.unselect();\n    }\n    this.#selectedEditors.clear();\n    this.#dispatchUpdateStates({\n      hasSelectedEditor: false,\n    });\n  }\n\n  translateSelectedEditors(x, y, noCommit = false) {\n    if (!noCommit) {\n      this.commitOrRemove();\n    }\n    if (!this.hasSelection) {\n      return;\n    }\n\n    this.#translation[0] += x;\n    this.#translation[1] += y;\n    const [totalX, totalY] = this.#translation;\n    const editors = [...this.#selectedEditors];\n\n    // We don't want to have an undo/redo for each translation so we wait a bit\n    // before adding the command to the command manager.\n    const TIME_TO_WAIT = 1000;\n\n    if (this.#translationTimeoutId) {\n      clearTimeout(this.#translationTimeoutId);\n    }\n\n    this.#translationTimeoutId = setTimeout(() => {\n      this.#translationTimeoutId = null;\n      this.#translation[0] = this.#translation[1] = 0;\n\n      this.addCommands({\n        cmd: () => {\n          for (const editor of editors) {\n            if (this.#allEditors.has(editor.id)) {\n              editor.translateInPage(totalX, totalY);\n            }\n          }\n        },\n        undo: () => {\n          for (const editor of editors) {\n            if (this.#allEditors.has(editor.id)) {\n              editor.translateInPage(-totalX, -totalY);\n            }\n          }\n        },\n        mustExec: false,\n      });\n    }, TIME_TO_WAIT);\n\n    for (const editor of editors) {\n      editor.translateInPage(x, y);\n    }\n  }\n\n  /**\n   * Set up the drag session for moving the selected editors.\n   */\n  setUpDragSession() {\n    // Note: don't use any references to the editor's parent which can be null\n    // if the editor belongs to a destroyed page.\n    if (!this.hasSelection) {\n      return;\n    }\n    // Avoid to have spurious text selection in the text layer when dragging.\n    this.disableUserSelect(true);\n    this.#draggingEditors = new Map();\n    for (const editor of this.#selectedEditors) {\n      this.#draggingEditors.set(editor, {\n        savedX: editor.x,\n        savedY: editor.y,\n        savedPageIndex: editor.pageIndex,\n        newX: 0,\n        newY: 0,\n        newPageIndex: -1,\n      });\n    }\n  }\n\n  /**\n   * Ends the drag session.\n   * @returns {boolean} true if at least one editor has been moved.\n   */\n  endDragSession() {\n    if (!this.#draggingEditors) {\n      return false;\n    }\n    this.disableUserSelect(false);\n    const map = this.#draggingEditors;\n    this.#draggingEditors = null;\n    let mustBeAddedInUndoStack = false;\n\n    for (const [{ x, y, pageIndex }, value] of map) {\n      value.newX = x;\n      value.newY = y;\n      value.newPageIndex = pageIndex;\n      mustBeAddedInUndoStack ||=\n        x !== value.savedX ||\n        y !== value.savedY ||\n        pageIndex !== value.savedPageIndex;\n    }\n\n    if (!mustBeAddedInUndoStack) {\n      return false;\n    }\n\n    const move = (editor, x, y, pageIndex) => {\n      if (this.#allEditors.has(editor.id)) {\n        // The editor can be undone/redone on a page which is not visible (and\n        // which potentially has no annotation editor layer), hence we need to\n        // use the pageIndex instead of the parent.\n        const parent = this.#allLayers.get(pageIndex);\n        if (parent) {\n          editor._setParentAndPosition(parent, x, y);\n        } else {\n          editor.pageIndex = pageIndex;\n          editor.x = x;\n          editor.y = y;\n        }\n      }\n    };\n\n    this.addCommands({\n      cmd: () => {\n        for (const [editor, { newX, newY, newPageIndex }] of map) {\n          move(editor, newX, newY, newPageIndex);\n        }\n      },\n      undo: () => {\n        for (const [editor, { savedX, savedY, savedPageIndex }] of map) {\n          move(editor, savedX, savedY, savedPageIndex);\n        }\n      },\n      mustExec: true,\n    });\n\n    return true;\n  }\n\n  /**\n   * Drag the set of selected editors.\n   * @param {number} tx\n   * @param {number} ty\n   */\n  dragSelectedEditors(tx, ty) {\n    if (!this.#draggingEditors) {\n      return;\n    }\n    for (const editor of this.#draggingEditors.keys()) {\n      editor.drag(tx, ty);\n    }\n  }\n\n  /**\n   * Rebuild the editor (usually on undo/redo actions) on a potentially\n   * non-rendered page.\n   * @param {AnnotationEditor} editor\n   */\n  rebuild(editor) {\n    if (editor.parent === null) {\n      const parent = this.getLayer(editor.pageIndex);\n      if (parent) {\n        parent.changeParent(editor);\n        parent.addOrRebuild(editor);\n      } else {\n        this.addEditor(editor);\n        this.addToAnnotationStorage(editor);\n        editor.rebuild();\n      }\n    } else {\n      editor.parent.addOrRebuild(editor);\n    }\n  }\n\n  /**\n   * Is the current editor the one passed as argument?\n   * @param {AnnotationEditor} editor\n   * @returns\n   */\n  isActive(editor) {\n    return this.#activeEditor === editor;\n  }\n\n  /**\n   * Get the current active editor.\n   * @returns {AnnotationEditor|null}\n   */\n  getActive() {\n    return this.#activeEditor;\n  }\n\n  /**\n   * Get the current editor mode.\n   * @returns {number}\n   */\n  getMode() {\n    return this.#mode;\n  }\n\n  get imageManager() {\n    return shadow(this, \"imageManager\", new ImageManager());\n  }\n}\n\nexport {\n  AnnotationEditorUIManager,\n  bindEvents,\n  ColorManager,\n  CommandManager,\n  KeyboardManager,\n  opacityToHex,\n};\n", "/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n} from \"./base_factory.js\";\nimport {\n  BaseException,\n  FeatureTest,\n  shadow,\n  stringToBytes,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nconst SVG_NS = \"http://www.w3.org/2000/svg\";\n\nclass PixelsPerInch {\n  static CSS = 96.0;\n\n  static PDF = 72.0;\n\n  static PDF_TO_CSS_UNITS = this.CSS / this.PDF;\n}\n\n/**\n * FilterFactory aims to create some SVG filters we can use when drawing an\n * image (or whatever) on a canvas.\n * Filters aren't applied with ctx.putImageData because it just overwrites the\n * underlying pixels.\n * With these filters, it's possible for example to apply some transfer maps on\n * an image without the need to apply them on the pixel arrays: the renderer\n * does the magic for us.\n */\nclass DOMFilterFactory extends BaseFilterFactory {\n  #_cache;\n\n  #_defs;\n\n  #docId;\n\n  #document;\n\n  #hcmFilter;\n\n  #hcmKey;\n\n  #hcmUrl;\n\n  #hcmHighlightFilter;\n\n  #hcmHighlightKey;\n\n  #hcmHighlightUrl;\n\n  #id = 0;\n\n  constructor({ docId, ownerDocument = globalThis.document } = {}) {\n    super();\n    this.#docId = docId;\n    this.#document = ownerDocument;\n  }\n\n  get #cache() {\n    return (this.#_cache ||= new Map());\n  }\n\n  get #defs() {\n    if (!this.#_defs) {\n      const div = this.#document.createElement(\"div\");\n      const { style } = div;\n      style.visibility = \"hidden\";\n      style.contain = \"strict\";\n      style.width = style.height = 0;\n      style.position = \"absolute\";\n      style.top = style.left = 0;\n      style.zIndex = -1;\n\n      const svg = this.#document.createElementNS(SVG_NS, \"svg\");\n      svg.setAttribute(\"width\", 0);\n      svg.setAttribute(\"height\", 0);\n      this.#_defs = this.#document.createElementNS(SVG_NS, \"defs\");\n      div.append(svg);\n      svg.append(this.#_defs);\n      this.#document.body.append(div);\n    }\n    return this.#_defs;\n  }\n\n  addFilter(maps) {\n    if (!maps) {\n      return \"none\";\n    }\n\n    // When a page is zoomed the page is re-drawn but the maps are likely\n    // the same.\n    let value = this.#cache.get(maps);\n    if (value) {\n      return value;\n    }\n\n    let tableR, tableG, tableB, key;\n    if (maps.length === 1) {\n      const mapR = maps[0];\n      const buffer = new Array(256);\n      for (let i = 0; i < 256; i++) {\n        buffer[i] = mapR[i] / 255;\n      }\n      key = tableR = tableG = tableB = buffer.join(\",\");\n    } else {\n      const [mapR, mapG, mapB] = maps;\n      const bufferR = new Array(256);\n      const bufferG = new Array(256);\n      const bufferB = new Array(256);\n      for (let i = 0; i < 256; i++) {\n        bufferR[i] = mapR[i] / 255;\n        bufferG[i] = mapG[i] / 255;\n        bufferB[i] = mapB[i] / 255;\n      }\n      tableR = bufferR.join(\",\");\n      tableG = bufferG.join(\",\");\n      tableB = bufferB.join(\",\");\n      key = `${tableR}${tableG}${tableB}`;\n    }\n\n    value = this.#cache.get(key);\n    if (value) {\n      this.#cache.set(maps, value);\n      return value;\n    }\n\n    // We create a SVG filter: feComponentTransferElement\n    //  https://www.w3.org/TR/SVG11/filters.html#feComponentTransferElement\n\n    const id = `g_${this.#docId}_transfer_map_${this.#id++}`;\n    const url = `url(#${id})`;\n    this.#cache.set(maps, url);\n    this.#cache.set(key, url);\n\n    const filter = this.#createFilter(id);\n    this.#addTransferMapConversion(tableR, tableG, tableB, filter);\n\n    return url;\n  }\n\n  addHCMFilter(fgColor, bgColor) {\n    const key = `${fgColor}-${bgColor}`;\n    if (this.#hcmKey === key) {\n      return this.#hcmUrl;\n    }\n\n    this.#hcmKey = key;\n    this.#hcmUrl = \"none\";\n    this.#hcmFilter?.remove();\n\n    if (!fgColor || !bgColor) {\n      return this.#hcmUrl;\n    }\n\n    const fgRGB = this.#getRGB(fgColor);\n    fgColor = Util.makeHexColor(...fgRGB);\n    const bgRGB = this.#getRGB(bgColor);\n    bgColor = Util.makeHexColor(...bgRGB);\n    this.#defs.style.color = \"\";\n\n    if (\n      (fgColor === \"#000000\" && bgColor === \"#ffffff\") ||\n      fgColor === bgColor\n    ) {\n      return this.#hcmUrl;\n    }\n\n    // https://developer.mozilla.org/en-US/docs/Web/Accessibility/Understanding_Colors_and_Luminance\n    //\n    // Relative luminance:\n    // https://www.w3.org/TR/WCAG20/#relativeluminancedef\n    //\n    // We compute the rounded luminance of the default background color.\n    // Then for every color in the pdf, if its rounded luminance is the\n    // same as the background one then it's replaced by the new\n    // background color else by the foreground one.\n    const map = new Array(256);\n    for (let i = 0; i <= 255; i++) {\n      const x = i / 255;\n      map[i] = x <= 0.03928 ? x / 12.92 : ((x + 0.055) / 1.055) ** 2.4;\n    }\n    const table = map.join(\",\");\n\n    const id = `g_${this.#docId}_hcm_filter`;\n    const filter = (this.#hcmHighlightFilter = this.#createFilter(id));\n    this.#addTransferMapConversion(table, table, table, filter);\n    this.#addGrayConversion(filter);\n\n    const getSteps = (c, n) => {\n      const start = fgRGB[c] / 255;\n      const end = bgRGB[c] / 255;\n      const arr = new Array(n + 1);\n      for (let i = 0; i <= n; i++) {\n        arr[i] = start + (i / n) * (end - start);\n      }\n      return arr.join(\",\");\n    };\n    this.#addTransferMapConversion(\n      getSteps(0, 5),\n      getSteps(1, 5),\n      getSteps(2, 5),\n      filter\n    );\n\n    this.#hcmUrl = `url(#${id})`;\n    return this.#hcmUrl;\n  }\n\n  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n    const key = `${fgColor}-${bgColor}-${newFgColor}-${newBgColor}`;\n    if (this.#hcmHighlightKey === key) {\n      return this.#hcmHighlightUrl;\n    }\n\n    this.#hcmHighlightKey = key;\n    this.#hcmHighlightUrl = \"none\";\n    this.#hcmHighlightFilter?.remove();\n\n    if (!fgColor || !bgColor) {\n      return this.#hcmHighlightUrl;\n    }\n\n    const [fgRGB, bgRGB] = [fgColor, bgColor].map(this.#getRGB.bind(this));\n    let fgGray = Math.round(\n      0.2126 * fgRGB[0] + 0.7152 * fgRGB[1] + 0.0722 * fgRGB[2]\n    );\n    let bgGray = Math.round(\n      0.2126 * bgRGB[0] + 0.7152 * bgRGB[1] + 0.0722 * bgRGB[2]\n    );\n    let [newFgRGB, newBgRGB] = [newFgColor, newBgColor].map(\n      this.#getRGB.bind(this)\n    );\n    if (bgGray < fgGray) {\n      [fgGray, bgGray, newFgRGB, newBgRGB] = [\n        bgGray,\n        fgGray,\n        newBgRGB,\n        newFgRGB,\n      ];\n    }\n    this.#defs.style.color = \"\";\n\n    // Now we can create the filters to highlight some canvas parts.\n    // The colors in the pdf will almost be Canvas and CanvasText, hence we\n    // want to filter them to finally get Highlight and HighlightText.\n    // Since we're in HCM the background color and the foreground color should\n    // be really different when converted to grayscale (if they're not then it\n    // means that we've a poor contrast). Once the canvas colors are converted\n    // to grayscale we can easily map them on their new colors.\n    // The grayscale step is important because if we've something like:\n    //   fgColor = #FF....\n    //   bgColor = #FF....\n    //   then we are enable to map the red component on the new red components\n    //   which can be different.\n\n    const getSteps = (fg, bg, n) => {\n      const arr = new Array(256);\n      const step = (bgGray - fgGray) / n;\n      const newStart = fg / 255;\n      const newStep = (bg - fg) / (255 * n);\n      let prev = 0;\n      for (let i = 0; i <= n; i++) {\n        const k = Math.round(fgGray + i * step);\n        const value = newStart + i * newStep;\n        for (let j = prev; j <= k; j++) {\n          arr[j] = value;\n        }\n        prev = k + 1;\n      }\n      for (let i = prev; i < 256; i++) {\n        arr[i] = arr[prev - 1];\n      }\n      return arr.join(\",\");\n    };\n\n    const id = `g_${this.#docId}_hcm_highlight_filter`;\n    const filter = (this.#hcmHighlightFilter = this.#createFilter(id));\n\n    this.#addGrayConversion(filter);\n    this.#addTransferMapConversion(\n      getSteps(newFgRGB[0], newBgRGB[0], 5),\n      getSteps(newFgRGB[1], newBgRGB[1], 5),\n      getSteps(newFgRGB[2], newBgRGB[2], 5),\n      filter\n    );\n\n    this.#hcmHighlightUrl = `url(#${id})`;\n    return this.#hcmHighlightUrl;\n  }\n\n  destroy(keepHCM = false) {\n    if (keepHCM && (this.#hcmUrl || this.#hcmHighlightUrl)) {\n      return;\n    }\n    if (this.#_defs) {\n      this.#_defs.parentNode.parentNode.remove();\n      this.#_defs = null;\n    }\n    if (this.#_cache) {\n      this.#_cache.clear();\n      this.#_cache = null;\n    }\n    this.#id = 0;\n  }\n\n  #addGrayConversion(filter) {\n    const feColorMatrix = this.#document.createElementNS(\n      SVG_NS,\n      \"feColorMatrix\"\n    );\n    feColorMatrix.setAttribute(\"type\", \"matrix\");\n    feColorMatrix.setAttribute(\n      \"values\",\n      \"0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0.2126 0.7152 0.0722 0 0 0 0 0 1 0\"\n    );\n    filter.append(feColorMatrix);\n  }\n\n  #createFilter(id) {\n    const filter = this.#document.createElementNS(SVG_NS, \"filter\");\n    filter.setAttribute(\"color-interpolation-filters\", \"sRGB\");\n    filter.setAttribute(\"id\", id);\n    this.#defs.append(filter);\n\n    return filter;\n  }\n\n  #appendFeFunc(feComponentTransfer, func, table) {\n    const feFunc = this.#document.createElementNS(SVG_NS, func);\n    feFunc.setAttribute(\"type\", \"discrete\");\n    feFunc.setAttribute(\"tableValues\", table);\n    feComponentTransfer.append(feFunc);\n  }\n\n  #addTransferMapConversion(rTable, gTable, bTable, filter) {\n    const feComponentTransfer = this.#document.createElementNS(\n      SVG_NS,\n      \"feComponentTransfer\"\n    );\n    filter.append(feComponentTransfer);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncR\", rTable);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncG\", gTable);\n    this.#appendFeFunc(feComponentTransfer, \"feFuncB\", bTable);\n  }\n\n  #getRGB(color) {\n    this.#defs.style.color = color;\n    return getRGB(getComputedStyle(this.#defs).getPropertyValue(\"color\"));\n  }\n}\n\nclass DOMCanvasFactory extends BaseCanvasFactory {\n  constructor({ ownerDocument = globalThis.document } = {}) {\n    super();\n    this._document = ownerDocument;\n  }\n\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = width;\n    canvas.height = height;\n    return canvas;\n  }\n}\n\nasync function fetchData(url, asTypedArray = false) {\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    isValidFetchUrl(url, document.baseURI)\n  ) {\n    const response = await fetch(url);\n    if (!response.ok) {\n      throw new Error(response.statusText);\n    }\n    return asTypedArray\n      ? new Uint8Array(await response.arrayBuffer())\n      : stringToBytes(await response.text());\n  }\n\n  // The Fetch API is not supported.\n  return new Promise((resolve, reject) => {\n    const request = new XMLHttpRequest();\n    request.open(\"GET\", url, /* asTypedArray = */ true);\n\n    if (asTypedArray) {\n      request.responseType = \"arraybuffer\";\n    }\n    request.onreadystatechange = () => {\n      if (request.readyState !== XMLHttpRequest.DONE) {\n        return;\n      }\n      if (request.status === 200 || request.status === 0) {\n        let data;\n        if (asTypedArray && request.response) {\n          data = new Uint8Array(request.response);\n        } else if (!asTypedArray && request.responseText) {\n          data = stringToBytes(request.responseText);\n        }\n        if (data) {\n          resolve(data);\n          return;\n        }\n      }\n      reject(new Error(request.statusText));\n    };\n\n    request.send(null);\n  });\n}\n\nclass DOMCMapReaderFactory extends BaseCMapReaderFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    return fetchData(url, /* asTypedArray = */ this.isCompressed).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass DOMStandardFontDataFactory extends BaseStandardFontDataFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    return fetchData(url, /* asTypedArray = */ true);\n  }\n}\n\nclass DOMSVGFactory extends BaseSVGFactory {\n  /**\n   * @ignore\n   */\n  _createSVG(type) {\n    return document.createElementNS(SVG_NS, type);\n  }\n}\n\n/**\n * @typedef {Object} PageViewportParameters\n * @property {Array<number>} viewBox - The xMin, yMin, xMax and\n *   yMax coordinates.\n * @property {number} scale - The scale of the viewport.\n * @property {number} rotation - The rotation, in degrees, of the viewport.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset. The\n *   default value is `0`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset. The\n *   default value is `0`.\n * @property {boolean} [dontFlip] - If true, the y-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * @typedef {Object} PageViewportCloneParameters\n * @property {number} [scale] - The scale, overriding the one in the cloned\n *   viewport. The default value is `this.scale`.\n * @property {number} [rotation] - The rotation, in degrees, overriding the one\n *   in the cloned viewport. The default value is `this.rotation`.\n * @property {number} [offsetX] - The horizontal, i.e. x-axis, offset.\n *   The default value is `this.offsetX`.\n * @property {number} [offsetY] - The vertical, i.e. y-axis, offset.\n *   The default value is `this.offsetY`.\n * @property {boolean} [dontFlip] - If true, the x-axis will not be flipped.\n *   The default value is `false`.\n */\n\n/**\n * PDF page viewport created based on scale, rotation and offset.\n */\nclass PageViewport {\n  /**\n   * @param {PageViewportParameters}\n   */\n  constructor({\n    viewBox,\n    scale,\n    rotation,\n    offsetX = 0,\n    offsetY = 0,\n    dontFlip = false,\n  }) {\n    this.viewBox = viewBox;\n    this.scale = scale;\n    this.rotation = rotation;\n    this.offsetX = offsetX;\n    this.offsetY = offsetY;\n\n    // creating transform to convert pdf coordinate system to the normal\n    // canvas like coordinates taking in account scale and rotation\n    const centerX = (viewBox[2] + viewBox[0]) / 2;\n    const centerY = (viewBox[3] + viewBox[1]) / 2;\n    let rotateA, rotateB, rotateC, rotateD;\n    // Normalize the rotation, by clamping it to the [0, 360) range.\n    rotation %= 360;\n    if (rotation < 0) {\n      rotation += 360;\n    }\n    switch (rotation) {\n      case 180:\n        rotateA = -1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = 1;\n        break;\n      case 90:\n        rotateA = 0;\n        rotateB = 1;\n        rotateC = 1;\n        rotateD = 0;\n        break;\n      case 270:\n        rotateA = 0;\n        rotateB = -1;\n        rotateC = -1;\n        rotateD = 0;\n        break;\n      case 0:\n        rotateA = 1;\n        rotateB = 0;\n        rotateC = 0;\n        rotateD = -1;\n        break;\n      default:\n        throw new Error(\n          \"PageViewport: Invalid rotation, must be a multiple of 90 degrees.\"\n        );\n    }\n\n    if (dontFlip) {\n      rotateC = -rotateC;\n      rotateD = -rotateD;\n    }\n\n    let offsetCanvasX, offsetCanvasY;\n    let width, height;\n    if (rotateA === 0) {\n      offsetCanvasX = Math.abs(centerY - viewBox[1]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerX - viewBox[0]) * scale + offsetY;\n      width = (viewBox[3] - viewBox[1]) * scale;\n      height = (viewBox[2] - viewBox[0]) * scale;\n    } else {\n      offsetCanvasX = Math.abs(centerX - viewBox[0]) * scale + offsetX;\n      offsetCanvasY = Math.abs(centerY - viewBox[1]) * scale + offsetY;\n      width = (viewBox[2] - viewBox[0]) * scale;\n      height = (viewBox[3] - viewBox[1]) * scale;\n    }\n    // creating transform for the following operations:\n    // translate(-centerX, -centerY), rotate and flip vertically,\n    // scale, and translate(offsetCanvasX, offsetCanvasY)\n    this.transform = [\n      rotateA * scale,\n      rotateB * scale,\n      rotateC * scale,\n      rotateD * scale,\n      offsetCanvasX - rotateA * scale * centerX - rotateC * scale * centerY,\n      offsetCanvasY - rotateB * scale * centerX - rotateD * scale * centerY,\n    ];\n\n    this.width = width;\n    this.height = height;\n  }\n\n  /**\n   * The original, un-scaled, viewport dimensions.\n   * @type {Object}\n   */\n  get rawDims() {\n    const { viewBox } = this;\n    return shadow(this, \"rawDims\", {\n      pageWidth: viewBox[2] - viewBox[0],\n      pageHeight: viewBox[3] - viewBox[1],\n      pageX: viewBox[0],\n      pageY: viewBox[1],\n    });\n  }\n\n  /**\n   * Clones viewport, with optional additional properties.\n   * @param {PageViewportCloneParameters} [params]\n   * @returns {PageViewport} Cloned viewport.\n   */\n  clone({\n    scale = this.scale,\n    rotation = this.rotation,\n    offsetX = this.offsetX,\n    offsetY = this.offsetY,\n    dontFlip = false,\n  } = {}) {\n    return new PageViewport({\n      viewBox: this.viewBox.slice(),\n      scale,\n      rotation,\n      offsetX,\n      offsetY,\n      dontFlip,\n    });\n  }\n\n  /**\n   * Converts PDF point to the viewport coordinates. For examples, useful for\n   * converting PDF location into canvas pixel coordinates.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Array} Array containing `x`- and `y`-coordinates of the\n   *   point in the viewport coordinate space.\n   * @see {@link convertToPdfPoint}\n   * @see {@link convertToViewportRectangle}\n   */\n  convertToViewportPoint(x, y) {\n    return Util.applyTransform([x, y], this.transform);\n  }\n\n  /**\n   * Converts PDF rectangle to the viewport coordinates.\n   * @param {Array} rect - The xMin, yMin, xMax and yMax coordinates.\n   * @returns {Array} Array containing corresponding coordinates of the\n   *   rectangle in the viewport coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToViewportRectangle(rect) {\n    const topLeft = Util.applyTransform([rect[0], rect[1]], this.transform);\n    const bottomRight = Util.applyTransform([rect[2], rect[3]], this.transform);\n    return [topLeft[0], topLeft[1], bottomRight[0], bottomRight[1]];\n  }\n\n  /**\n   * Converts viewport coordinates to the PDF location. For examples, useful\n   * for converting canvas pixel location into PDF one.\n   * @param {number} x - The x-coordinate.\n   * @param {number} y - The y-coordinate.\n   * @returns {Array} Array containing `x`- and `y`-coordinates of the\n   *   point in the PDF coordinate space.\n   * @see {@link convertToViewportPoint}\n   */\n  convertToPdfPoint(x, y) {\n    return Util.applyInverseTransform([x, y], this.transform);\n  }\n}\n\nclass RenderingCancelledException extends BaseException {\n  constructor(msg, extraDelay = 0) {\n    super(msg, \"RenderingCancelledException\");\n    this.extraDelay = extraDelay;\n  }\n}\n\nfunction isDataScheme(url) {\n  const ii = url.length;\n  let i = 0;\n  while (i < ii && url[i].trim() === \"\") {\n    i++;\n  }\n  return url.substring(i, i + 5).toLowerCase() === \"data:\";\n}\n\nfunction isPdfFile(filename) {\n  return typeof filename === \"string\" && /\\.pdf$/i.test(filename);\n}\n\n/**\n * Gets the filename from a given URL.\n * @param {string} url\n * @param {boolean} [onlyStripPath]\n * @returns {string}\n */\nfunction getFilenameFromUrl(url, onlyStripPath = false) {\n  if (!onlyStripPath) {\n    [url] = url.split(/[#?]/, 1);\n  }\n  return url.substring(url.lastIndexOf(\"/\") + 1);\n}\n\n/**\n * Returns the filename or guessed filename from the url (see issue 3455).\n * @param {string} url - The original PDF location.\n * @param {string} defaultFilename - The value returned if the filename is\n *   unknown, or the protocol is unsupported.\n * @returns {string} Guessed PDF filename.\n */\nfunction getPdfFilenameFromUrl(url, defaultFilename = \"document.pdf\") {\n  if (typeof url !== \"string\") {\n    return defaultFilename;\n  }\n  if (isDataScheme(url)) {\n    warn('getPdfFilenameFromUrl: ignore \"data:\"-URL for performance reasons.');\n    return defaultFilename;\n  }\n  const reURI = /^(?:(?:[^:]+:)?\\/\\/[^/]+)?([^?#]*)(\\?[^#]*)?(#.*)?$/;\n  //              SCHEME        HOST        1.PATH  2.QUERY   3.REF\n  // Pattern to get last matching NAME.pdf\n  const reFilename = /[^/?#=]+\\.pdf\\b(?!.*\\.pdf\\b)/i;\n  const splitURI = reURI.exec(url);\n  let suggestedFilename =\n    reFilename.exec(splitURI[1]) ||\n    reFilename.exec(splitURI[2]) ||\n    reFilename.exec(splitURI[3]);\n  if (suggestedFilename) {\n    suggestedFilename = suggestedFilename[0];\n    if (suggestedFilename.includes(\"%\")) {\n      // URL-encoded %2Fpath%2Fto%2Ffile.pdf should be file.pdf\n      try {\n        suggestedFilename = reFilename.exec(\n          decodeURIComponent(suggestedFilename)\n        )[0];\n      } catch {\n        // Possible (extremely rare) errors:\n        // URIError \"Malformed URI\", e.g. for \"%AA.pdf\"\n        // TypeError \"null has no properties\", e.g. for \"%2F.pdf\"\n      }\n    }\n  }\n  return suggestedFilename || defaultFilename;\n}\n\nclass StatTimer {\n  started = Object.create(null);\n\n  times = [];\n\n  time(name) {\n    if (name in this.started) {\n      warn(`Timer is already running for ${name}`);\n    }\n    this.started[name] = Date.now();\n  }\n\n  timeEnd(name) {\n    if (!(name in this.started)) {\n      warn(`Timer has not been started for ${name}`);\n    }\n    this.times.push({\n      name,\n      start: this.started[name],\n      end: Date.now(),\n    });\n    // Remove timer from started so it can be called again.\n    delete this.started[name];\n  }\n\n  toString() {\n    // Find the longest name for padding purposes.\n    const outBuf = [];\n    let longest = 0;\n    for (const { name } of this.times) {\n      longest = Math.max(name.length, longest);\n    }\n    for (const { name, start, end } of this.times) {\n      outBuf.push(`${name.padEnd(longest)} ${end - start}ms\\n`);\n    }\n    return outBuf.join(\"\");\n  }\n}\n\nfunction isValidFetchUrl(url, baseUrl) {\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n    throw new Error(\"Not implemented: isValidFetchUrl\");\n  }\n  try {\n    const { protocol } = baseUrl ? new URL(url, baseUrl) : new URL(url);\n    // The Fetch API only supports the http/https protocols, and not file/ftp.\n    return protocol === \"http:\" || protocol === \"https:\";\n  } catch {\n    return false; // `new URL()` will throw on incorrect data.\n  }\n}\n\n/**\n * Event handler to suppress context menu.\n */\nfunction noContextMenu(e) {\n  e.preventDefault();\n}\n\n/**\n * @param {string} src\n * @param {boolean} [removeScriptElement]\n * @returns {Promise<void>}\n */\nfunction loadScript(src, removeScriptElement = false) {\n  return new Promise((resolve, reject) => {\n    const script = document.createElement(\"script\");\n    script.src = src;\n\n    script.onload = function (evt) {\n      if (removeScriptElement) {\n        script.remove();\n      }\n      resolve(evt);\n    };\n    script.onerror = function () {\n      reject(new Error(`Cannot load script at: ${script.src}`));\n    };\n    (document.head || document.documentElement).append(script);\n  });\n}\n\n// Deprecated API function -- display regardless of the `verbosity` setting.\nfunction deprecated(details) {\n  console.log(\"Deprecated API usage: \" + details);\n}\n\nlet pdfDateStringRegex;\n\nclass PDFDateString {\n  /**\n   * Convert a PDF date string to a JavaScript `Date` object.\n   *\n   * The PDF date string format is described in section 7.9.4 of the official\n   * PDF 32000-1:2008 specification. However, in the PDF 1.7 reference (sixth\n   * edition) Adobe describes the same format including a trailing apostrophe.\n   * This syntax in incorrect, but Adobe Acrobat creates PDF files that contain\n   * them. We ignore all apostrophes as they are not necessary for date parsing.\n   *\n   * Moreover, Adobe Acrobat doesn't handle changing the date to universal time\n   * and doesn't use the user's time zone (effectively ignoring the HH' and mm'\n   * parts of the date string).\n   *\n   * @param {string} input\n   * @returns {Date|null}\n   */\n  static toDateObject(input) {\n    if (!input || typeof input !== \"string\") {\n      return null;\n    }\n\n    // Lazily initialize the regular expression.\n    pdfDateStringRegex ||= new RegExp(\n      \"^D:\" + // Prefix (required)\n        \"(\\\\d{4})\" + // Year (required)\n        \"(\\\\d{2})?\" + // Month (optional)\n        \"(\\\\d{2})?\" + // Day (optional)\n        \"(\\\\d{2})?\" + // Hour (optional)\n        \"(\\\\d{2})?\" + // Minute (optional)\n        \"(\\\\d{2})?\" + // Second (optional)\n        \"([Z|+|-])?\" + // Universal time relation (optional)\n        \"(\\\\d{2})?\" + // Offset hour (optional)\n        \"'?\" + // Splitting apostrophe (optional)\n        \"(\\\\d{2})?\" + // Offset minute (optional)\n        \"'?\" // Trailing apostrophe (optional)\n    );\n\n    // Optional fields that don't satisfy the requirements from the regular\n    // expression (such as incorrect digit counts or numbers that are out of\n    // range) will fall back the defaults from the specification.\n    const matches = pdfDateStringRegex.exec(input);\n    if (!matches) {\n      return null;\n    }\n\n    // JavaScript's `Date` object expects the month to be between 0 and 11\n    // instead of 1 and 12, so we have to correct for that.\n    const year = parseInt(matches[1], 10);\n    let month = parseInt(matches[2], 10);\n    month = month >= 1 && month <= 12 ? month - 1 : 0;\n    let day = parseInt(matches[3], 10);\n    day = day >= 1 && day <= 31 ? day : 1;\n    let hour = parseInt(matches[4], 10);\n    hour = hour >= 0 && hour <= 23 ? hour : 0;\n    let minute = parseInt(matches[5], 10);\n    minute = minute >= 0 && minute <= 59 ? minute : 0;\n    let second = parseInt(matches[6], 10);\n    second = second >= 0 && second <= 59 ? second : 0;\n    const universalTimeRelation = matches[7] || \"Z\";\n    let offsetHour = parseInt(matches[8], 10);\n    offsetHour = offsetHour >= 0 && offsetHour <= 23 ? offsetHour : 0;\n    let offsetMinute = parseInt(matches[9], 10) || 0;\n    offsetMinute = offsetMinute >= 0 && offsetMinute <= 59 ? offsetMinute : 0;\n\n    // Universal time relation 'Z' means that the local time is equal to the\n    // universal time, whereas the relations '+'/'-' indicate that the local\n    // time is later respectively earlier than the universal time. Every date\n    // is normalized to universal time.\n    if (universalTimeRelation === \"-\") {\n      hour += offsetHour;\n      minute += offsetMinute;\n    } else if (universalTimeRelation === \"+\") {\n      hour -= offsetHour;\n      minute -= offsetMinute;\n    }\n\n    return new Date(Date.UTC(year, month, day, hour, minute, second));\n  }\n}\n\n/**\n * NOTE: This is (mostly) intended to support printing of XFA forms.\n */\nfunction getXfaPageViewport(xfaPage, { scale = 1, rotation = 0 }) {\n  const { width, height } = xfaPage.attributes.style;\n  const viewBox = [0, 0, parseInt(width), parseInt(height)];\n\n  return new PageViewport({\n    viewBox,\n    scale,\n    rotation,\n  });\n}\n\nfunction getRGB(color) {\n  if (color.startsWith(\"#\")) {\n    const colorRGB = parseInt(color.slice(1), 16);\n    return [\n      (colorRGB & 0xff0000) >> 16,\n      (colorRGB & 0x00ff00) >> 8,\n      colorRGB & 0x0000ff,\n    ];\n  }\n\n  if (color.startsWith(\"rgb(\")) {\n    // getComputedStyle(...).color returns a `rgb(R, G, B)` color.\n    return color\n      .slice(/* \"rgb(\".length */ 4, -1) // Strip out \"rgb(\" and \")\".\n      .split(\",\")\n      .map(x => parseInt(x));\n  }\n\n  if (color.startsWith(\"rgba(\")) {\n    return color\n      .slice(/* \"rgba(\".length */ 5, -1) // Strip out \"rgba(\" and \")\".\n      .split(\",\")\n      .map(x => parseInt(x))\n      .slice(0, 3);\n  }\n\n  warn(`Not a valid color format: \"${color}\"`);\n  return [0, 0, 0];\n}\n\nfunction getColorValues(colors) {\n  const span = document.createElement(\"span\");\n  span.style.visibility = \"hidden\";\n  document.body.append(span);\n  for (const name of colors.keys()) {\n    span.style.color = name;\n    const computedColor = window.getComputedStyle(span).color;\n    colors.set(name, getRGB(computedColor));\n  }\n  span.remove();\n}\n\nfunction getCurrentTransform(ctx) {\n  const { a, b, c, d, e, f } = ctx.getTransform();\n  return [a, b, c, d, e, f];\n}\n\nfunction getCurrentTransformInverse(ctx) {\n  const { a, b, c, d, e, f } = ctx.getTransform().invertSelf();\n  return [a, b, c, d, e, f];\n}\n\n/**\n * @param {HTMLDivElement} div\n * @param {PageViewport} viewport\n * @param {boolean} mustFlip\n * @param {boolean} mustRotate\n */\nfunction setLayerDimensions(\n  div,\n  viewport,\n  mustFlip = false,\n  mustRotate = true\n) {\n  if (viewport instanceof PageViewport) {\n    const { pageWidth, pageHeight } = viewport.rawDims;\n    const { style } = div;\n    const useRound = FeatureTest.isCSSRoundSupported;\n\n    const w = `var(--scale-factor) * ${pageWidth}px`,\n      h = `var(--scale-factor) * ${pageHeight}px`;\n    const widthStr = useRound ? `round(${w}, 1px)` : `calc(${w})`,\n      heightStr = useRound ? `round(${h}, 1px)` : `calc(${h})`;\n\n    if (!mustFlip || viewport.rotation % 180 === 0) {\n      style.width = widthStr;\n      style.height = heightStr;\n    } else {\n      style.width = heightStr;\n      style.height = widthStr;\n    }\n  }\n\n  if (mustRotate) {\n    div.setAttribute(\"data-main-rotation\", viewport.rotation);\n  }\n}\n\nexport {\n  deprecated,\n  DOMCanvasFactory,\n  DOMCMapReaderFactory,\n  DOMFilterFactory,\n  DOMStandardFontDataFactory,\n  DOMSVGFactory,\n  getColorValues,\n  getCurrentTransform,\n  getCurrentTransformInverse,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getRGB,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  isValidFetchUrl,\n  loadScript,\n  noContextMenu,\n  PageViewport,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  setLayerDimensions,\n  StatTimer,\n};\n", "/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CMapCompressionType, unreachable } from \"../shared/util.js\";\n\nclass BaseFilterFactory {\n  constructor() {\n    if (this.constructor === BaseFilterFactory) {\n      unreachable(\"Cannot initialize BaseFilterFactory.\");\n    }\n  }\n\n  addFilter(maps) {\n    return \"none\";\n  }\n\n  addHCMFilter(fgColor, bgColor) {\n    return \"none\";\n  }\n\n  addHighlightHCMFilter(fgColor, bgColor, newFgColor, newBgColor) {\n    return \"none\";\n  }\n\n  destroy(keepHCM = false) {}\n}\n\nclass BaseCanvasFactory {\n  constructor() {\n    if (this.constructor === BaseCanvasFactory) {\n      unreachable(\"Cannot initialize BaseCanvasFactory.\");\n    }\n  }\n\n  create(width, height) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    const canvas = this._createCanvas(width, height);\n    return {\n      canvas,\n      context: canvas.getContext(\"2d\"),\n    };\n  }\n\n  reset(canvasAndContext, width, height) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid canvas size\");\n    }\n    canvasAndContext.canvas.width = width;\n    canvasAndContext.canvas.height = height;\n  }\n\n  destroy(canvasAndContext) {\n    if (!canvasAndContext.canvas) {\n      throw new Error(\"Canvas is not specified\");\n    }\n    // Zeroing the width and height cause Firefox to release graphics\n    // resources immediately, which can greatly reduce memory consumption.\n    canvasAndContext.canvas.width = 0;\n    canvasAndContext.canvas.height = 0;\n    canvasAndContext.canvas = null;\n    canvasAndContext.context = null;\n  }\n\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    unreachable(\"Abstract method `_createCanvas` called.\");\n  }\n}\n\nclass BaseCMapReaderFactory {\n  constructor({ baseUrl = null, isCompressed = true }) {\n    if (this.constructor === BaseCMapReaderFactory) {\n      unreachable(\"Cannot initialize BaseCMapReaderFactory.\");\n    }\n    this.baseUrl = baseUrl;\n    this.isCompressed = isCompressed;\n  }\n\n  async fetch({ name }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The CMap \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"cMapUrl\" and \"cMapPacked\" API parameters are provided.'\n      );\n    }\n    if (!name) {\n      throw new Error(\"CMap name must be specified.\");\n    }\n    const url = this.baseUrl + name + (this.isCompressed ? \".bcmap\" : \"\");\n    const compressionType = this.isCompressed\n      ? CMapCompressionType.BINARY\n      : CMapCompressionType.NONE;\n\n    return this._fetchData(url, compressionType).catch(reason => {\n      throw new Error(\n        `Unable to load ${this.isCompressed ? \"binary \" : \"\"}CMap at: ${url}`\n      );\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseStandardFontDataFactory {\n  constructor({ baseUrl = null }) {\n    if (this.constructor === BaseStandardFontDataFactory) {\n      unreachable(\"Cannot initialize BaseStandardFontDataFactory.\");\n    }\n    this.baseUrl = baseUrl;\n  }\n\n  async fetch({ filename }) {\n    if (!this.baseUrl) {\n      throw new Error(\n        'The standard font \"baseUrl\" parameter must be specified, ensure that ' +\n          'the \"standardFontDataUrl\" API parameter is provided.'\n      );\n    }\n    if (!filename) {\n      throw new Error(\"Font filename must be specified.\");\n    }\n    const url = `${this.baseUrl}${filename}`;\n\n    return this._fetchData(url).catch(reason => {\n      throw new Error(`Unable to load font data at: ${url}`);\n    });\n  }\n\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    unreachable(\"Abstract method `_fetchData` called.\");\n  }\n}\n\nclass BaseSVGFactory {\n  constructor() {\n    if (this.constructor === BaseSVGFactory) {\n      unreachable(\"Cannot initialize BaseSVGFactory.\");\n    }\n  }\n\n  create(width, height, skipDimensions = false) {\n    if (width <= 0 || height <= 0) {\n      throw new Error(\"Invalid SVG dimensions\");\n    }\n    const svg = this._createSVG(\"svg:svg\");\n    svg.setAttribute(\"version\", \"1.1\");\n\n    if (!skipDimensions) {\n      svg.setAttribute(\"width\", `${width}px`);\n      svg.setAttribute(\"height\", `${height}px`);\n    }\n\n    svg.setAttribute(\"preserveAspectRatio\", \"none\");\n    svg.setAttribute(\"viewBox\", `0 0 ${width} ${height}`);\n\n    return svg;\n  }\n\n  createElement(type) {\n    if (typeof type !== \"string\") {\n      throw new Error(\"Invalid SVG element type\");\n    }\n    return this._createSVG(type);\n  }\n\n  /**\n   * @ignore\n   */\n  _createSVG(type) {\n    unreachable(\"Abstract method `_createSVG` called.\");\n  }\n}\n\nexport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n  BaseSVGFactory,\n};\n", "/* Copyright 2014 Opera Software ASA\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n *\n *\n * Based on https://code.google.com/p/smhasher/wiki/MurmurHash3.\n * Hashes roughly 100 KB per millisecond on i7 3.4 GHz.\n */\n\nimport { isArrayBuffer } from \"./util.js\";\n\nconst SEED = 0xc3d2e1f0;\n// Workaround for missing math precision in JS.\nconst MASK_HIGH = 0xffff0000;\nconst MASK_LOW = 0xffff;\n\nclass MurmurHash3_64 {\n  constructor(seed) {\n    this.h1 = seed ? seed & 0xffffffff : SEED;\n    this.h2 = seed ? seed & 0xffffffff : SEED;\n  }\n\n  update(input) {\n    let data, length;\n    if (typeof input === \"string\") {\n      data = new Uint8Array(input.length * 2);\n      length = 0;\n      for (let i = 0, ii = input.length; i < ii; i++) {\n        const code = input.charCodeAt(i);\n        if (code <= 0xff) {\n          data[length++] = code;\n        } else {\n          data[length++] = code >>> 8;\n          data[length++] = code & 0xff;\n        }\n      }\n    } else if (isArrayBuffer(input)) {\n      data = input.slice();\n      length = data.byteLength;\n    } else {\n      throw new Error(\n        \"Wrong data format in MurmurHash3_64_update. \" +\n          \"Input must be a string or array.\"\n      );\n    }\n\n    const blockCounts = length >> 2;\n    const tailLength = length - blockCounts * 4;\n    // We don't care about endianness here.\n    const dataUint32 = new Uint32Array(data.buffer, 0, blockCounts);\n    let k1 = 0,\n      k2 = 0;\n    let h1 = this.h1,\n      h2 = this.h2;\n    const C1 = 0xcc9e2d51,\n      C2 = 0x1b873593;\n    const C1_LOW = C1 & MASK_LOW,\n      C2_LOW = C2 & MASK_LOW;\n\n    for (let i = 0; i < blockCounts; i++) {\n      if (i & 1) {\n        k1 = dataUint32[i];\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        h1 ^= k1;\n        h1 = (h1 << 13) | (h1 >>> 19);\n        h1 = h1 * 5 + 0xe6546b64;\n      } else {\n        k2 = dataUint32[i];\n        k2 = ((k2 * C1) & MASK_HIGH) | ((k2 * C1_LOW) & MASK_LOW);\n        k2 = (k2 << 15) | (k2 >>> 17);\n        k2 = ((k2 * C2) & MASK_HIGH) | ((k2 * C2_LOW) & MASK_LOW);\n        h2 ^= k2;\n        h2 = (h2 << 13) | (h2 >>> 19);\n        h2 = h2 * 5 + 0xe6546b64;\n      }\n    }\n\n    k1 = 0;\n\n    switch (tailLength) {\n      case 3:\n        k1 ^= data[blockCounts * 4 + 2] << 16;\n      /* falls through */\n      case 2:\n        k1 ^= data[blockCounts * 4 + 1] << 8;\n      /* falls through */\n      case 1:\n        k1 ^= data[blockCounts * 4];\n        /* falls through */\n\n        k1 = ((k1 * C1) & MASK_HIGH) | ((k1 * C1_LOW) & MASK_LOW);\n        k1 = (k1 << 15) | (k1 >>> 17);\n        k1 = ((k1 * C2) & MASK_HIGH) | ((k1 * C2_LOW) & MASK_LOW);\n        if (blockCounts & 1) {\n          h1 ^= k1;\n        } else {\n          h2 ^= k1;\n        }\n    }\n\n    this.h1 = h1;\n    this.h2 = h2;\n  }\n\n  hexdigest() {\n    let h1 = this.h1,\n      h2 = this.h2;\n\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0xed558ccd) & MASK_HIGH) | ((h1 * 0x8ccd) & MASK_LOW);\n    h2 =\n      ((h2 * 0xff51afd7) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xafd7ed55) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n    h1 = ((h1 * 0x1a85ec53) & MASK_HIGH) | ((h1 * 0xec53) & MASK_LOW);\n    h2 =\n      ((h2 * 0xc4ceb9fe) & MASK_HIGH) |\n      (((((h2 << 16) | (h1 >>> 16)) * 0xb9fe1a85) & MASK_HIGH) >>> 16);\n    h1 ^= h2 >>> 1;\n\n    return (\n      (h1 >>> 0).toString(16).padStart(8, \"0\") +\n      (h2 >>> 0).toString(16).padStart(8, \"0\")\n    );\n  }\n}\n\nexport { MurmurHash3_64 };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  bytesToString,\n  FeatureTest,\n  isNodeJS,\n  shadow,\n  string32,\n  unreachable,\n  warn,\n} from \"../shared/util.js\";\n\nclass FontLoader {\n  #systemFonts = new Set();\n\n  constructor({\n    ownerDocument = globalThis.document,\n    styleElement = null, // For testing only.\n  }) {\n    this._document = ownerDocument;\n\n    this.nativeFontFaces = new Set();\n    this.styleElement =\n      typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")\n        ? styleElement\n        : null;\n\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"MOZCENTRAL\")) {\n      this.loadingRequests = [];\n      this.loadTestFontId = 0;\n    }\n  }\n\n  addNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.add(nativeFontFace);\n    this._document.fonts.add(nativeFontFace);\n  }\n\n  removeNativeFontFace(nativeFontFace) {\n    this.nativeFontFaces.delete(nativeFontFace);\n    this._document.fonts.delete(nativeFontFace);\n  }\n\n  insertRule(rule) {\n    if (!this.styleElement) {\n      this.styleElement = this._document.createElement(\"style\");\n      this._document.documentElement\n        .getElementsByTagName(\"head\")[0]\n        .append(this.styleElement);\n    }\n    const styleSheet = this.styleElement.sheet;\n    styleSheet.insertRule(rule, styleSheet.cssRules.length);\n  }\n\n  clear() {\n    for (const nativeFontFace of this.nativeFontFaces) {\n      this._document.fonts.delete(nativeFontFace);\n    }\n    this.nativeFontFaces.clear();\n    this.#systemFonts.clear();\n\n    if (this.styleElement) {\n      // Note: ChildNode.remove doesn't throw if the parentNode is undefined.\n      this.styleElement.remove();\n      this.styleElement = null;\n    }\n  }\n\n  async loadSystemFont(info) {\n    if (!info || this.#systemFonts.has(info.loadedName)) {\n      return;\n    }\n    assert(\n      !this.disableFontFace,\n      \"loadSystemFont shouldn't be called when `disableFontFace` is set.\"\n    );\n\n    if (this.isFontLoadingAPISupported) {\n      const { loadedName, src, style } = info;\n      const fontFace = new FontFace(loadedName, src, style);\n      this.addNativeFontFace(fontFace);\n      try {\n        await fontFace.load();\n        this.#systemFonts.add(loadedName);\n      } catch {\n        warn(\n          `Cannot load system font: ${info.baseFontName}, installing it could help to improve PDF rendering.`\n        );\n\n        this.removeNativeFontFace(fontFace);\n      }\n      return;\n    }\n\n    unreachable(\n      \"Not implemented: loadSystemFont without the Font Loading API.\"\n    );\n  }\n\n  async bind(font) {\n    // Add the font to the DOM only once; skip if the font is already loaded.\n    if (font.attached || (font.missingFile && !font.systemFontInfo)) {\n      return;\n    }\n    font.attached = true;\n\n    if (font.systemFontInfo) {\n      await this.loadSystemFont(font.systemFontInfo);\n      return;\n    }\n\n    if (this.isFontLoadingAPISupported) {\n      const nativeFontFace = font.createNativeFontFace();\n      if (nativeFontFace) {\n        this.addNativeFontFace(nativeFontFace);\n        try {\n          await nativeFontFace.loaded;\n        } catch (ex) {\n          warn(`Failed to load font '${nativeFontFace.family}': '${ex}'.`);\n\n          // When font loading failed, fall back to the built-in font renderer.\n          font.disableFontFace = true;\n          throw ex;\n        }\n      }\n      return; // The font was, asynchronously, loaded.\n    }\n\n    // !this.isFontLoadingAPISupported\n    const rule = font.createFontFaceRule();\n    if (rule) {\n      this.insertRule(rule);\n\n      if (this.isSyncFontLoadingSupported) {\n        return; // The font was, synchronously, loaded.\n      }\n      if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n        throw new Error(\"Not implemented: async font loading\");\n      }\n      await new Promise(resolve => {\n        const request = this._queueLoadingCallback(resolve);\n        this._prepareFontLoadEvent(font, request);\n      });\n      // The font was, asynchronously, loaded.\n    }\n  }\n\n  get isFontLoadingAPISupported() {\n    const hasFonts = !!this._document?.fonts;\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      return shadow(\n        this,\n        \"isFontLoadingAPISupported\",\n        hasFonts && !this.styleElement\n      );\n    }\n    return shadow(this, \"isFontLoadingAPISupported\", hasFonts);\n  }\n\n  get isSyncFontLoadingSupported() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      return shadow(this, \"isSyncFontLoadingSupported\", true);\n    }\n\n    let supported = false;\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"CHROME\")) {\n      if (isNodeJS) {\n        // Node.js - we can pretend that sync font loading is supported.\n        supported = true;\n      } else if (\n        typeof navigator !== \"undefined\" &&\n        // User agent string sniffing is bad, but there is no reliable way to\n        // tell if the font is fully loaded and ready to be used with canvas.\n        /Mozilla\\/5.0.*?rv:\\d+.*? Gecko/.test(navigator.userAgent)\n      ) {\n        // Firefox, from version 14, supports synchronous font loading.\n        supported = true;\n      }\n    }\n    return shadow(this, \"isSyncFontLoadingSupported\", supported);\n  }\n\n  _queueLoadingCallback(callback) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _queueLoadingCallback\");\n    }\n\n    function completeRequest() {\n      assert(!request.done, \"completeRequest() cannot be called twice.\");\n      request.done = true;\n\n      // Sending all completed requests in order of how they were queued.\n      while (loadingRequests.length > 0 && loadingRequests[0].done) {\n        const otherRequest = loadingRequests.shift();\n        setTimeout(otherRequest.callback, 0);\n      }\n    }\n\n    const { loadingRequests } = this;\n    const request = {\n      done: false,\n      complete: completeRequest,\n      callback,\n    };\n    loadingRequests.push(request);\n    return request;\n  }\n\n  get _loadTestFont() {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _loadTestFont\");\n    }\n\n    // This is a CFF font with 1 glyph for '.' that fills its entire width\n    // and height.\n    const testFont = atob(\n      \"T1RUTwALAIAAAwAwQ0ZGIDHtZg4AAAOYAAAAgUZGVE1lkzZwAAAEHAAAABxHREVGABQA\" +\n        \"FQAABDgAAAAeT1MvMlYNYwkAAAEgAAAAYGNtYXABDQLUAAACNAAAAUJoZWFk/xVFDQAA\" +\n        \"ALwAAAA2aGhlYQdkA+oAAAD0AAAAJGhtdHgD6AAAAAAEWAAAAAZtYXhwAAJQAAAAARgA\" +\n        \"AAAGbmFtZVjmdH4AAAGAAAAAsXBvc3T/hgAzAAADeAAAACAAAQAAAAEAALZRFsRfDzz1\" +\n        \"AAsD6AAAAADOBOTLAAAAAM4KHDwAAAAAA+gDIQAAAAgAAgAAAAAAAAABAAADIQAAAFoD\" +\n        \"6AAAAAAD6AABAAAAAAAAAAAAAAAAAAAAAQAAUAAAAgAAAAQD6AH0AAUAAAKKArwAAACM\" +\n        \"AooCvAAAAeAAMQECAAACAAYJAAAAAAAAAAAAAQAAAAAAAAAAAAAAAFBmRWQAwAAuAC4D\" +\n        \"IP84AFoDIQAAAAAAAQAAAAAAAAAAACAAIAABAAAADgCuAAEAAAAAAAAAAQAAAAEAAAAA\" +\n        \"AAEAAQAAAAEAAAAAAAIAAQAAAAEAAAAAAAMAAQAAAAEAAAAAAAQAAQAAAAEAAAAAAAUA\" +\n        \"AQAAAAEAAAAAAAYAAQAAAAMAAQQJAAAAAgABAAMAAQQJAAEAAgABAAMAAQQJAAIAAgAB\" +\n        \"AAMAAQQJAAMAAgABAAMAAQQJAAQAAgABAAMAAQQJAAUAAgABAAMAAQQJAAYAAgABWABY\" +\n        \"AAAAAAAAAwAAAAMAAAAcAAEAAAAAADwAAwABAAAAHAAEACAAAAAEAAQAAQAAAC7//wAA\" +\n        \"AC7////TAAEAAAAAAAABBgAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\" +\n        \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAAAAAAD/gwAyAAAAAQAAAAAAAAAAAAAAAAAA\" +\n        \"AAABAAQEAAEBAQJYAAEBASH4DwD4GwHEAvgcA/gXBIwMAYuL+nz5tQXkD5j3CBLnEQAC\" +\n        \"AQEBIVhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYAAABAQAADwACAQEEE/t3\" +\n        \"Dov6fAH6fAT+fPp8+nwHDosMCvm1Cvm1DAz6fBQAAAAAAAABAAAAAMmJbzEAAAAAzgTj\" +\n        \"FQAAAADOBOQpAAEAAAAAAAAADAAUAAQAAAABAAAAAgABAAAAAAAAAAAD6AAAAAAAAA==\"\n    );\n    return shadow(this, \"_loadTestFont\", testFont);\n  }\n\n  _prepareFontLoadEvent(font, request) {\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      throw new Error(\"Not implemented: _prepareFontLoadEvent\");\n    }\n\n    /** Hack begin */\n    // There's currently no event when a font has finished downloading so the\n    // following code is a dirty hack to 'guess' when a font is ready.\n    // It's assumed fonts are loaded in order, so add a known test font after\n    // the desired fonts and then test for the loading of that test font.\n\n    function int32(data, offset) {\n      return (\n        (data.charCodeAt(offset) << 24) |\n        (data.charCodeAt(offset + 1) << 16) |\n        (data.charCodeAt(offset + 2) << 8) |\n        (data.charCodeAt(offset + 3) & 0xff)\n      );\n    }\n    function spliceString(s, offset, remove, insert) {\n      const chunk1 = s.substring(0, offset);\n      const chunk2 = s.substring(offset + remove);\n      return chunk1 + insert + chunk2;\n    }\n    let i, ii;\n\n    // The temporary canvas is used to determine if fonts are loaded.\n    const canvas = this._document.createElement(\"canvas\");\n    canvas.width = 1;\n    canvas.height = 1;\n    const ctx = canvas.getContext(\"2d\");\n\n    let called = 0;\n    function isFontReady(name, callback) {\n      // With setTimeout clamping this gives the font ~100ms to load.\n      if (++called > 30) {\n        warn(\"Load test font never loaded.\");\n        callback();\n        return;\n      }\n      ctx.font = \"30px \" + name;\n      ctx.fillText(\".\", 0, 20);\n      const imageData = ctx.getImageData(0, 0, 1, 1);\n      if (imageData.data[3] > 0) {\n        callback();\n        return;\n      }\n      setTimeout(isFontReady.bind(null, name, callback));\n    }\n\n    const loadTestFontId = `lt${Date.now()}${this.loadTestFontId++}`;\n    // Chromium seems to cache fonts based on a hash of the actual font data,\n    // so the font must be modified for each load test else it will appear to\n    // be loaded already.\n    // TODO: This could maybe be made faster by avoiding the btoa of the full\n    // font by splitting it in chunks before hand and padding the font id.\n    let data = this._loadTestFont;\n    const COMMENT_OFFSET = 976; // has to be on 4 byte boundary (for checksum)\n    data = spliceString(\n      data,\n      COMMENT_OFFSET,\n      loadTestFontId.length,\n      loadTestFontId\n    );\n    // CFF checksum is important for IE, adjusting it\n    const CFF_CHECKSUM_OFFSET = 16;\n    const XXXX_VALUE = 0x58585858; // the \"comment\" filled with 'X'\n    let checksum = int32(data, CFF_CHECKSUM_OFFSET);\n    for (i = 0, ii = loadTestFontId.length - 3; i < ii; i += 4) {\n      checksum = (checksum - XXXX_VALUE + int32(loadTestFontId, i)) | 0;\n    }\n    if (i < loadTestFontId.length) {\n      // align to 4 bytes boundary\n      checksum = (checksum - XXXX_VALUE + int32(loadTestFontId + \"XXX\", i)) | 0;\n    }\n    data = spliceString(data, CFF_CHECKSUM_OFFSET, 4, string32(checksum));\n\n    const url = `url(data:font/opentype;base64,${btoa(data)});`;\n    const rule = `@font-face {font-family:\"${loadTestFontId}\";src:${url}}`;\n    this.insertRule(rule);\n\n    const div = this._document.createElement(\"div\");\n    div.style.visibility = \"hidden\";\n    div.style.width = div.style.height = \"10px\";\n    div.style.position = \"absolute\";\n    div.style.top = div.style.left = \"0px\";\n\n    for (const name of [font.loadedName, loadTestFontId]) {\n      const span = this._document.createElement(\"span\");\n      span.textContent = \"Hi\";\n      span.style.fontFamily = name;\n      div.append(span);\n    }\n    this._document.body.append(div);\n\n    isFontReady(loadTestFontId, () => {\n      div.remove();\n      request.complete();\n    });\n    /** Hack end */\n  }\n}\n\nclass FontFaceObject {\n  constructor(\n    translatedData,\n    {\n      isEvalSupported = true,\n      disableFontFace = false,\n      ignoreErrors = false,\n      inspectFont = null,\n    }\n  ) {\n    this.compiledGlyphs = Object.create(null);\n    // importing translated data\n    for (const i in translatedData) {\n      this[i] = translatedData[i];\n    }\n    this.isEvalSupported = isEvalSupported !== false;\n    this.disableFontFace = disableFontFace === true;\n    this.ignoreErrors = ignoreErrors === true;\n    this._inspectFont = inspectFont;\n  }\n\n  createNativeFontFace() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    let nativeFontFace;\n    if (!this.cssFontInfo) {\n      nativeFontFace = new FontFace(this.loadedName, this.data, {});\n    } else {\n      const css = {\n        weight: this.cssFontInfo.fontWeight,\n      };\n      if (this.cssFontInfo.italicAngle) {\n        css.style = `oblique ${this.cssFontInfo.italicAngle}deg`;\n      }\n      nativeFontFace = new FontFace(\n        this.cssFontInfo.fontFamily,\n        this.data,\n        css\n      );\n    }\n\n    this._inspectFont?.(this);\n    return nativeFontFace;\n  }\n\n  createFontFaceRule() {\n    if (!this.data || this.disableFontFace) {\n      return null;\n    }\n    const data = bytesToString(this.data);\n    // Add the @font-face rule to the document.\n    const url = `url(data:${this.mimetype};base64,${btoa(data)});`;\n    let rule;\n    if (!this.cssFontInfo) {\n      rule = `@font-face {font-family:\"${this.loadedName}\";src:${url}}`;\n    } else {\n      let css = `font-weight: ${this.cssFontInfo.fontWeight};`;\n      if (this.cssFontInfo.italicAngle) {\n        css += `font-style: oblique ${this.cssFontInfo.italicAngle}deg;`;\n      }\n      rule = `@font-face {font-family:\"${this.cssFontInfo.fontFamily}\";${css}src:${url}}`;\n    }\n\n    this._inspectFont?.(this, url);\n    return rule;\n  }\n\n  getPathGenerator(objs, character) {\n    if (this.compiledGlyphs[character] !== undefined) {\n      return this.compiledGlyphs[character];\n    }\n\n    let cmds;\n    try {\n      cmds = objs.get(this.loadedName + \"_path_\" + character);\n    } catch (ex) {\n      if (!this.ignoreErrors) {\n        throw ex;\n      }\n      warn(`getPathGenerator - ignoring character: \"${ex}\".`);\n\n      return (this.compiledGlyphs[character] = function (c, size) {\n        // No-op function, to allow rendering to continue.\n      });\n    }\n\n    // If we can, compile cmds into JS for MAXIMUM SPEED...\n    if (this.isEvalSupported && FeatureTest.isEvalSupported) {\n      const jsBuf = [];\n      for (const current of cmds) {\n        const args = current.args !== undefined ? current.args.join(\",\") : \"\";\n        jsBuf.push(\"c.\", current.cmd, \"(\", args, \");\\n\");\n      }\n      // eslint-disable-next-line no-new-func\n      return (this.compiledGlyphs[character] = new Function(\n        \"c\",\n        \"size\",\n        jsBuf.join(\"\")\n      ));\n    }\n    // ... but fall back on using Function.prototype.apply() if we're\n    // blocked from using eval() for whatever reason (like CSP policies).\n    return (this.compiledGlyphs[character] = function (c, size) {\n      for (const current of cmds) {\n        if (current.cmd === \"scale\") {\n          current.args = [size, -size];\n        }\n        // eslint-disable-next-line prefer-spread\n        c[current.cmd].apply(c, current.args);\n      }\n    });\n  }\n}\n\nexport { FontFaceObject, FontLoader };\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  BaseCanvasFactory,\n  BaseCMapReaderFactory,\n  BaseFilterFactory,\n  BaseStandardFontDataFactory,\n} from \"./base_factory.js\";\nimport { isNodeJS, warn } from \"../shared/util.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_utils.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nif (typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"SKIP_BABEL\")) {\n  (function checkDOMMatrix() {\n    if (globalThis.DOMMatrix || !isNodeJS) {\n      return;\n    }\n    try {\n      globalThis.DOMMatrix = __non_webpack_require__(\"canvas\").DOMMatrix;\n    } catch (ex) {\n      warn(`Cannot polyfill \\`DOMMatrix\\`, rendering may be broken: \"${ex}\".`);\n    }\n  })();\n\n  (function checkPath2D() {\n    if (globalThis.Path2D || !isNodeJS) {\n      return;\n    }\n    try {\n      const { CanvasRenderingContext2D } = __non_webpack_require__(\"canvas\");\n      const { polyfillPath2D } = __non_webpack_require__(\"path2d-polyfill\");\n\n      globalThis.CanvasRenderingContext2D = CanvasRenderingContext2D;\n      polyfillPath2D(globalThis);\n    } catch (ex) {\n      warn(`Cannot polyfill \\`Path2D\\`, rendering may be broken: \"${ex}\".`);\n    }\n  })();\n}\n\nconst fetchData = function (url) {\n  return new Promise((resolve, reject) => {\n    const fs = __non_webpack_require__(\"fs\");\n    fs.readFile(url, (error, data) => {\n      if (error || !data) {\n        reject(new Error(error));\n        return;\n      }\n      resolve(new Uint8Array(data));\n    });\n  });\n};\n\nclass NodeFilterFactory extends BaseFilterFactory {}\n\nclass NodeCanvasFactory extends BaseCanvasFactory {\n  /**\n   * @ignore\n   */\n  _createCanvas(width, height) {\n    const Canvas = __non_webpack_require__(\"canvas\");\n    return Canvas.createCanvas(width, height);\n  }\n}\n\nclass NodeCMapReaderFactory extends BaseCMapReaderFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url, compressionType) {\n    return fetchData(url).then(data => {\n      return { cMapData: data, compressionType };\n    });\n  }\n}\n\nclass NodeStandardFontDataFactory extends BaseStandardFontDataFactory {\n  /**\n   * @ignore\n   */\n  _fetchData(url) {\n    return fetchData(url);\n  }\n}\n\nexport {\n  NodeCanvasFactory,\n  NodeCMapReaderFactory,\n  NodeFilterFactory,\n  NodeStandardFontDataFactory,\n};\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FeatureTest,\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  info,\n  isNodeJS,\n  OPS,\n  shadow,\n  TextRenderingMode,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  getCurrentTransform,\n  getCurrentTransformInverse,\n  PixelsPerInch,\n} from \"./display_utils.js\";\nimport {\n  getShadingPattern,\n  PathType,\n  TilingPattern,\n} from \"./pattern_helper.js\";\nimport { convertBlackAndWhiteToRGBA } from \"../shared/image_utils.js\";\n\n// <canvas> contexts store most of the state we need natively.\n// However, PDF needs a bit more state, which we store here.\n// Minimal font size that would be used during canvas fillText operations.\nconst MIN_FONT_SIZE = 16;\n// Maximum font size that would be used during canvas fillText operations.\nconst MAX_FONT_SIZE = 100;\nconst MAX_GROUP_SIZE = 4096;\n\n// Defines the time the `executeOperatorList`-method is going to be executing\n// before it stops and schedules a continue of execution.\nconst EXECUTION_TIME = 15; // ms\n// Defines the number of steps before checking the execution time.\nconst EXECUTION_STEPS = 10;\n\n// To disable Type3 compilation, set the value to `-1`.\nconst MAX_SIZE_TO_COMPILE = 1000;\n\nconst FULL_CHUNK_HEIGHT = 16;\n\n/**\n * Overrides certain methods on a 2d ctx so that when they are called they\n * will also call the same method on the destCtx. The methods that are\n * overridden are all the transformation state modifiers, path creation, and\n * save/restore. We only forward these specific methods because they are the\n * only state modifiers that we cannot copy over when we switch contexts.\n *\n * To remove mirroring call `ctx._removeMirroring()`.\n *\n * @param {Object} ctx - The 2d canvas context that will duplicate its calls on\n *   the destCtx.\n * @param {Object} destCtx - The 2d canvas context that will receive the\n *   forwarded calls.\n */\nfunction mirrorContextOperations(ctx, destCtx) {\n  if (ctx._removeMirroring) {\n    throw new Error(\"Context is already forwarding operations.\");\n  }\n  ctx.__originalSave = ctx.save;\n  ctx.__originalRestore = ctx.restore;\n  ctx.__originalRotate = ctx.rotate;\n  ctx.__originalScale = ctx.scale;\n  ctx.__originalTranslate = ctx.translate;\n  ctx.__originalTransform = ctx.transform;\n  ctx.__originalSetTransform = ctx.setTransform;\n  ctx.__originalResetTransform = ctx.resetTransform;\n  ctx.__originalClip = ctx.clip;\n  ctx.__originalMoveTo = ctx.moveTo;\n  ctx.__originalLineTo = ctx.lineTo;\n  ctx.__originalBezierCurveTo = ctx.bezierCurveTo;\n  ctx.__originalRect = ctx.rect;\n  ctx.__originalClosePath = ctx.closePath;\n  ctx.__originalBeginPath = ctx.beginPath;\n\n  ctx._removeMirroring = () => {\n    ctx.save = ctx.__originalSave;\n    ctx.restore = ctx.__originalRestore;\n    ctx.rotate = ctx.__originalRotate;\n    ctx.scale = ctx.__originalScale;\n    ctx.translate = ctx.__originalTranslate;\n    ctx.transform = ctx.__originalTransform;\n    ctx.setTransform = ctx.__originalSetTransform;\n    ctx.resetTransform = ctx.__originalResetTransform;\n\n    ctx.clip = ctx.__originalClip;\n    ctx.moveTo = ctx.__originalMoveTo;\n    ctx.lineTo = ctx.__originalLineTo;\n    ctx.bezierCurveTo = ctx.__originalBezierCurveTo;\n    ctx.rect = ctx.__originalRect;\n    ctx.closePath = ctx.__originalClosePath;\n    ctx.beginPath = ctx.__originalBeginPath;\n    delete ctx._removeMirroring;\n  };\n\n  ctx.save = function ctxSave() {\n    destCtx.save();\n    this.__originalSave();\n  };\n\n  ctx.restore = function ctxRestore() {\n    destCtx.restore();\n    this.__originalRestore();\n  };\n\n  ctx.translate = function ctxTranslate(x, y) {\n    destCtx.translate(x, y);\n    this.__originalTranslate(x, y);\n  };\n\n  ctx.scale = function ctxScale(x, y) {\n    destCtx.scale(x, y);\n    this.__originalScale(x, y);\n  };\n\n  ctx.transform = function ctxTransform(a, b, c, d, e, f) {\n    destCtx.transform(a, b, c, d, e, f);\n    this.__originalTransform(a, b, c, d, e, f);\n  };\n\n  ctx.setTransform = function ctxSetTransform(a, b, c, d, e, f) {\n    destCtx.setTransform(a, b, c, d, e, f);\n    this.__originalSetTransform(a, b, c, d, e, f);\n  };\n\n  ctx.resetTransform = function ctxResetTransform() {\n    destCtx.resetTransform();\n    this.__originalResetTransform();\n  };\n\n  ctx.rotate = function ctxRotate(angle) {\n    destCtx.rotate(angle);\n    this.__originalRotate(angle);\n  };\n\n  ctx.clip = function ctxRotate(rule) {\n    destCtx.clip(rule);\n    this.__originalClip(rule);\n  };\n\n  ctx.moveTo = function (x, y) {\n    destCtx.moveTo(x, y);\n    this.__originalMoveTo(x, y);\n  };\n\n  ctx.lineTo = function (x, y) {\n    destCtx.lineTo(x, y);\n    this.__originalLineTo(x, y);\n  };\n\n  ctx.bezierCurveTo = function (cp1x, cp1y, cp2x, cp2y, x, y) {\n    destCtx.bezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n    this.__originalBezierCurveTo(cp1x, cp1y, cp2x, cp2y, x, y);\n  };\n\n  ctx.rect = function (x, y, width, height) {\n    destCtx.rect(x, y, width, height);\n    this.__originalRect(x, y, width, height);\n  };\n\n  ctx.closePath = function () {\n    destCtx.closePath();\n    this.__originalClosePath();\n  };\n\n  ctx.beginPath = function () {\n    destCtx.beginPath();\n    this.__originalBeginPath();\n  };\n}\n\nclass CachedCanvases {\n  constructor(canvasFactory) {\n    this.canvasFactory = canvasFactory;\n    this.cache = Object.create(null);\n  }\n\n  getCanvas(id, width, height) {\n    let canvasEntry;\n    if (this.cache[id] !== undefined) {\n      canvasEntry = this.cache[id];\n      this.canvasFactory.reset(canvasEntry, width, height);\n    } else {\n      canvasEntry = this.canvasFactory.create(width, height);\n      this.cache[id] = canvasEntry;\n    }\n    return canvasEntry;\n  }\n\n  delete(id) {\n    delete this.cache[id];\n  }\n\n  clear() {\n    for (const id in this.cache) {\n      const canvasEntry = this.cache[id];\n      this.canvasFactory.destroy(canvasEntry);\n      delete this.cache[id];\n    }\n  }\n}\n\nfunction drawImageAtIntegerCoords(\n  ctx,\n  srcImg,\n  srcX,\n  srcY,\n  srcW,\n  srcH,\n  destX,\n  destY,\n  destW,\n  destH\n) {\n  const [a, b, c, d, tx, ty] = getCurrentTransform(ctx);\n  if (b === 0 && c === 0) {\n    // top-left corner is at (X, Y) and\n    // bottom-right one is at (X + width, Y + height).\n\n    // If leftX is 4.321 then it's rounded to 4.\n    // If width is 10.432 then it's rounded to 11 because\n    // rightX = leftX + width = 14.753 which is rounded to 15\n    // so after rounding the total width is 11 (15 - 4).\n    // It's why we can't just floor/ceil uniformly, it just depends\n    // on the values we've.\n\n    const tlX = destX * a + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destY * d + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destX + destW) * a + tx;\n\n    // Some pdf contains images with 1x1 images so in case of 0-width after\n    // scaling we must fallback on 1 to be sure there is something.\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destY + destH) * d + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n\n    // We must apply a transformation in order to apply it on the image itself.\n    // For example if a == 1 && d == -1, it means that the image itself is\n    // mirrored w.r.t. the x-axis.\n    ctx.setTransform(Math.sign(a), 0, 0, Math.sign(d), rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rWidth, rHeight);\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    return [rWidth, rHeight];\n  }\n\n  if (a === 0 && d === 0) {\n    // This path is taken in issue9462.pdf (page 3).\n    const tlX = destY * c + tx;\n    const rTlX = Math.round(tlX);\n    const tlY = destX * b + ty;\n    const rTlY = Math.round(tlY);\n    const brX = (destY + destH) * c + tx;\n    const rWidth = Math.abs(Math.round(brX) - rTlX) || 1;\n    const brY = (destX + destW) * b + ty;\n    const rHeight = Math.abs(Math.round(brY) - rTlY) || 1;\n\n    ctx.setTransform(0, Math.sign(b), Math.sign(c), 0, rTlX, rTlY);\n    ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, 0, 0, rHeight, rWidth);\n    ctx.setTransform(a, b, c, d, tx, ty);\n\n    return [rHeight, rWidth];\n  }\n\n  // Not a scale matrix so let the render handle the case without rounding.\n  ctx.drawImage(srcImg, srcX, srcY, srcW, srcH, destX, destY, destW, destH);\n\n  const scaleX = Math.hypot(a, b);\n  const scaleY = Math.hypot(c, d);\n  return [scaleX * destW, scaleY * destH];\n}\n\nfunction compileType3Glyph(imgData) {\n  const { width, height } = imgData;\n  if (width > MAX_SIZE_TO_COMPILE || height > MAX_SIZE_TO_COMPILE) {\n    return null;\n  }\n\n  const POINT_TO_PROCESS_LIMIT = 1000;\n  const POINT_TYPES = new Uint8Array([\n    0, 2, 4, 0, 1, 0, 5, 4, 8, 10, 0, 8, 0, 2, 1, 0,\n  ]);\n\n  const width1 = width + 1;\n  let points = new Uint8Array(width1 * (height + 1));\n  let i, j, j0;\n\n  // decodes bit-packed mask data\n  const lineSize = (width + 7) & ~7;\n  let data = new Uint8Array(lineSize * height),\n    pos = 0;\n  for (const elem of imgData.data) {\n    let mask = 128;\n    while (mask > 0) {\n      data[pos++] = elem & mask ? 0 : 255;\n      mask >>= 1;\n    }\n  }\n\n  // finding interesting points: every point is located between mask pixels,\n  // so there will be points of the (width + 1)x(height + 1) grid. Every point\n  // will have flags assigned based on neighboring mask pixels:\n  //   4 | 8\n  //   --P--\n  //   2 | 1\n  // We are interested only in points with the flags:\n  //   - outside corners: 1, 2, 4, 8;\n  //   - inside corners: 7, 11, 13, 14;\n  //   - and, intersections: 5, 10.\n  let count = 0;\n  pos = 0;\n  if (data[pos] !== 0) {\n    points[0] = 1;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j] = data[pos] ? 2 : 1;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j] = 2;\n    ++count;\n  }\n  for (i = 1; i < height; i++) {\n    pos = i * lineSize;\n    j0 = i * width1;\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0] = data[pos] ? 1 : 8;\n      ++count;\n    }\n    // 'sum' is the position of the current pixel configuration in the 'TYPES'\n    // array (in order 8-1-2-4, so we can use '>>2' to shift the column).\n    let sum = (data[pos] ? 4 : 0) + (data[pos - lineSize] ? 8 : 0);\n    for (j = 1; j < width; j++) {\n      sum =\n        (sum >> 2) +\n        (data[pos + 1] ? 4 : 0) +\n        (data[pos - lineSize + 1] ? 8 : 0);\n      if (POINT_TYPES[sum]) {\n        points[j0 + j] = POINT_TYPES[sum];\n        ++count;\n      }\n      pos++;\n    }\n    if (data[pos - lineSize] !== data[pos]) {\n      points[j0 + j] = data[pos] ? 2 : 4;\n      ++count;\n    }\n\n    if (count > POINT_TO_PROCESS_LIMIT) {\n      return null;\n    }\n  }\n\n  pos = lineSize * (height - 1);\n  j0 = i * width1;\n  if (data[pos] !== 0) {\n    points[j0] = 8;\n    ++count;\n  }\n  for (j = 1; j < width; j++) {\n    if (data[pos] !== data[pos + 1]) {\n      points[j0 + j] = data[pos] ? 4 : 8;\n      ++count;\n    }\n    pos++;\n  }\n  if (data[pos] !== 0) {\n    points[j0 + j] = 4;\n    ++count;\n  }\n  if (count > POINT_TO_PROCESS_LIMIT) {\n    return null;\n  }\n\n  // building outlines\n  const steps = new Int32Array([0, width1, -1, 0, -width1, 0, 0, 0, 1]);\n  const path = new Path2D();\n\n  for (i = 0; count && i <= height; i++) {\n    let p = i * width1;\n    const end = p + width;\n    while (p < end && !points[p]) {\n      p++;\n    }\n    if (p === end) {\n      continue;\n    }\n    path.moveTo(p % width1, i);\n\n    const p0 = p;\n    let type = points[p];\n    do {\n      const step = steps[type];\n      do {\n        p += step;\n      } while (!points[p]);\n\n      const pp = points[p];\n      if (pp !== 5 && pp !== 10) {\n        // set new direction\n        type = pp;\n        // delete mark\n        points[p] = 0;\n      } else {\n        // type is 5 or 10, ie, a crossing\n        // set new direction\n        type = pp & ((0x33 * type) >> 4);\n        // set new type for \"future hit\"\n        points[p] &= (type >> 2) | (type << 2);\n      }\n      path.lineTo(p % width1, (p / width1) | 0);\n\n      if (!points[p]) {\n        --count;\n      }\n    } while (p0 !== p);\n    --i;\n  }\n\n  // Immediately release the, potentially large, `Uint8Array`s after parsing.\n  data = null;\n  points = null;\n\n  const drawOutline = function (c) {\n    c.save();\n    // the path shall be painted in [0..1]x[0..1] space\n    c.scale(1 / width, -1 / height);\n    c.translate(0, -height);\n    c.fill(path);\n    c.beginPath();\n    c.restore();\n  };\n\n  return drawOutline;\n}\n\nclass CanvasExtraState {\n  constructor(width, height) {\n    // Are soft masks and alpha values shapes or opacities?\n    this.alphaIsShape = false;\n    this.fontSize = 0;\n    this.fontSizeScale = 1;\n    this.textMatrix = IDENTITY_MATRIX;\n    this.textMatrixScale = 1;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textRise = 0;\n    // Default fore and background colors\n    this.fillColor = \"#000000\";\n    this.strokeColor = \"#000000\";\n    this.patternFill = false;\n    // Note: fill alpha applies to all non-stroking operations\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.activeSMask = null;\n    this.transferMaps = \"none\";\n\n    this.startNewPathAndClipBox([0, 0, width, height]);\n  }\n\n  clone() {\n    const clone = Object.create(this);\n    clone.clipBox = this.clipBox.slice();\n    return clone;\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n\n  updatePathMinMax(transform, x, y) {\n    [x, y] = Util.applyTransform([x, y], transform);\n    this.minX = Math.min(this.minX, x);\n    this.minY = Math.min(this.minY, y);\n    this.maxX = Math.max(this.maxX, x);\n    this.maxY = Math.max(this.maxY, y);\n  }\n\n  updateRectMinMax(transform, rect) {\n    const p1 = Util.applyTransform(rect, transform);\n    const p2 = Util.applyTransform(rect.slice(2), transform);\n    this.minX = Math.min(this.minX, p1[0], p2[0]);\n    this.minY = Math.min(this.minY, p1[1], p2[1]);\n    this.maxX = Math.max(this.maxX, p1[0], p2[0]);\n    this.maxY = Math.max(this.maxY, p1[1], p2[1]);\n  }\n\n  updateScalingPathMinMax(transform, minMax) {\n    Util.scaleMinMax(transform, minMax);\n    this.minX = Math.min(this.minX, minMax[0]);\n    this.maxX = Math.max(this.maxX, minMax[1]);\n    this.minY = Math.min(this.minY, minMax[2]);\n    this.maxY = Math.max(this.maxY, minMax[3]);\n  }\n\n  updateCurvePathMinMax(transform, x0, y0, x1, y1, x2, y2, x3, y3, minMax) {\n    const box = Util.bezierBoundingBox(x0, y0, x1, y1, x2, y2, x3, y3);\n    if (minMax) {\n      minMax[0] = Math.min(minMax[0], box[0], box[2]);\n      minMax[1] = Math.max(minMax[1], box[0], box[2]);\n      minMax[2] = Math.min(minMax[2], box[1], box[3]);\n      minMax[3] = Math.max(minMax[3], box[1], box[3]);\n      return;\n    }\n    this.updateRectMinMax(transform, box);\n  }\n\n  getPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    const box = [this.minX, this.minY, this.maxX, this.maxY];\n    if (pathType === PathType.STROKE) {\n      if (!transform) {\n        unreachable(\"Stroke bounding box must include transform.\");\n      }\n      // Stroked paths can be outside of the path bounding box by 1/2 the line\n      // width.\n      const scale = Util.singularValueDecompose2dScale(transform);\n      const xStrokePad = (scale[0] * this.lineWidth) / 2;\n      const yStrokePad = (scale[1] * this.lineWidth) / 2;\n      box[0] -= xStrokePad;\n      box[1] -= yStrokePad;\n      box[2] += xStrokePad;\n      box[3] += yStrokePad;\n    }\n    return box;\n  }\n\n  updateClipFromPath() {\n    const intersect = Util.intersect(this.clipBox, this.getPathBoundingBox());\n    this.startNewPathAndClipBox(intersect || [0, 0, 0, 0]);\n  }\n\n  isEmptyClip() {\n    return this.minX === Infinity;\n  }\n\n  startNewPathAndClipBox(box) {\n    this.clipBox = box;\n    this.minX = Infinity;\n    this.minY = Infinity;\n    this.maxX = 0;\n    this.maxY = 0;\n  }\n\n  getClippedPathBoundingBox(pathType = PathType.FILL, transform = null) {\n    return Util.intersect(\n      this.clipBox,\n      this.getPathBoundingBox(pathType, transform)\n    );\n  }\n}\n\nfunction putBinaryImageData(ctx, imgData) {\n  if (typeof ImageData !== \"undefined\" && imgData instanceof ImageData) {\n    ctx.putImageData(imgData, 0, 0);\n    return;\n  }\n\n  // Put the image data to the canvas in chunks, rather than putting the\n  // whole image at once.  This saves JS memory, because the ImageData object\n  // is smaller. It also possibly saves C++ memory within the implementation\n  // of putImageData(). (E.g. in Firefox we make two short-lived copies of\n  // the data passed to putImageData()). |n| shouldn't be too small, however,\n  // because too many putImageData() calls will slow things down.\n  //\n  // Note: as written, if the last chunk is partial, the putImageData() call\n  // will (conceptually) put pixels past the bounds of the canvas.  But\n  // that's ok; any such pixels are ignored.\n\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0,\n    destPos;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n  let i, j, thisChunkHeight, elemsInThisChunk;\n\n  // There are multiple forms in which the pixel data can be passed, and\n  // imgData.kind tells us which one this is.\n  if (imgData.kind === ImageKind.GRAYSCALE_1BPP) {\n    // Grayscale, 1 bit per pixel (i.e. black-and-white).\n    const srcLength = src.byteLength;\n    const dest32 = new Uint32Array(dest.buffer, 0, dest.byteLength >> 2);\n    const dest32DataLength = dest32.length;\n    const fullSrcDiff = (width + 7) >> 3;\n    const white = 0xffffffff;\n    const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n\n    for (i = 0; i < totalChunks; i++) {\n      thisChunkHeight = i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n      destPos = 0;\n      for (j = 0; j < thisChunkHeight; j++) {\n        const srcDiff = srcLength - srcPos;\n        let k = 0;\n        const kEnd = srcDiff > fullSrcDiff ? width : srcDiff * 8 - 7;\n        const kEndUnrolled = kEnd & ~7;\n        let mask = 0;\n        let srcByte = 0;\n        for (; k < kEndUnrolled; k += 8) {\n          srcByte = src[srcPos++];\n          dest32[destPos++] = srcByte & 128 ? white : black;\n          dest32[destPos++] = srcByte & 64 ? white : black;\n          dest32[destPos++] = srcByte & 32 ? white : black;\n          dest32[destPos++] = srcByte & 16 ? white : black;\n          dest32[destPos++] = srcByte & 8 ? white : black;\n          dest32[destPos++] = srcByte & 4 ? white : black;\n          dest32[destPos++] = srcByte & 2 ? white : black;\n          dest32[destPos++] = srcByte & 1 ? white : black;\n        }\n        for (; k < kEnd; k++) {\n          if (mask === 0) {\n            srcByte = src[srcPos++];\n            mask = 128;\n          }\n\n          dest32[destPos++] = srcByte & mask ? white : black;\n          mask >>= 1;\n        }\n      }\n      // We ran out of input. Make all remaining pixels transparent.\n      while (destPos < dest32DataLength) {\n        dest32[destPos++] = 0;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else if (imgData.kind === ImageKind.RGBA_32BPP) {\n    // RGBA, 32-bits per pixel.\n    j = 0;\n    elemsInThisChunk = width * FULL_CHUNK_HEIGHT * 4;\n    for (i = 0; i < fullChunks; i++) {\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n      srcPos += elemsInThisChunk;\n\n      ctx.putImageData(chunkImgData, 0, j);\n      j += FULL_CHUNK_HEIGHT;\n    }\n    if (i < totalChunks) {\n      elemsInThisChunk = width * partialChunkHeight * 4;\n      dest.set(src.subarray(srcPos, srcPos + elemsInThisChunk));\n\n      ctx.putImageData(chunkImgData, 0, j);\n    }\n  } else if (imgData.kind === ImageKind.RGB_24BPP) {\n    // RGB, 24-bits per pixel.\n    thisChunkHeight = FULL_CHUNK_HEIGHT;\n    elemsInThisChunk = width * thisChunkHeight;\n    for (i = 0; i < totalChunks; i++) {\n      if (i >= fullChunks) {\n        thisChunkHeight = partialChunkHeight;\n        elemsInThisChunk = width * thisChunkHeight;\n      }\n\n      destPos = 0;\n      for (j = elemsInThisChunk; j--; ) {\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = src[srcPos++];\n        dest[destPos++] = 255;\n      }\n\n      ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n    }\n  } else {\n    throw new Error(`bad image kind: ${imgData.kind}`);\n  }\n}\n\nfunction putBinaryImageMask(ctx, imgData) {\n  if (imgData.bitmap) {\n    // The bitmap has been created in the worker.\n    ctx.drawImage(imgData.bitmap, 0, 0);\n    return;\n  }\n\n  // Slow path: OffscreenCanvas isn't available in the worker.\n  const height = imgData.height,\n    width = imgData.width;\n  const partialChunkHeight = height % FULL_CHUNK_HEIGHT;\n  const fullChunks = (height - partialChunkHeight) / FULL_CHUNK_HEIGHT;\n  const totalChunks = partialChunkHeight === 0 ? fullChunks : fullChunks + 1;\n\n  const chunkImgData = ctx.createImageData(width, FULL_CHUNK_HEIGHT);\n  let srcPos = 0;\n  const src = imgData.data;\n  const dest = chunkImgData.data;\n\n  for (let i = 0; i < totalChunks; i++) {\n    const thisChunkHeight =\n      i < fullChunks ? FULL_CHUNK_HEIGHT : partialChunkHeight;\n\n    // Expand the mask so it can be used by the canvas.  Any required\n    // inversion has already been handled.\n\n    ({ srcPos } = convertBlackAndWhiteToRGBA({\n      src,\n      srcPos,\n      dest,\n      width,\n      height: thisChunkHeight,\n      nonBlackColor: 0,\n    }));\n\n    ctx.putImageData(chunkImgData, 0, i * FULL_CHUNK_HEIGHT);\n  }\n}\n\nfunction copyCtxState(sourceCtx, destCtx) {\n  const properties = [\n    \"strokeStyle\",\n    \"fillStyle\",\n    \"fillRule\",\n    \"globalAlpha\",\n    \"lineWidth\",\n    \"lineCap\",\n    \"lineJoin\",\n    \"miterLimit\",\n    \"globalCompositeOperation\",\n    \"font\",\n    \"filter\",\n  ];\n  for (const property of properties) {\n    if (sourceCtx[property] !== undefined) {\n      destCtx[property] = sourceCtx[property];\n    }\n  }\n  if (sourceCtx.setLineDash !== undefined) {\n    destCtx.setLineDash(sourceCtx.getLineDash());\n    destCtx.lineDashOffset = sourceCtx.lineDashOffset;\n  }\n}\n\nfunction resetCtxToDefault(ctx) {\n  ctx.strokeStyle = ctx.fillStyle = \"#000000\";\n  ctx.fillRule = \"nonzero\";\n  ctx.globalAlpha = 1;\n  ctx.lineWidth = 1;\n  ctx.lineCap = \"butt\";\n  ctx.lineJoin = \"miter\";\n  ctx.miterLimit = 10;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.font = \"10px sans-serif\";\n  if (ctx.setLineDash !== undefined) {\n    ctx.setLineDash([]);\n    ctx.lineDashOffset = 0;\n  }\n  if (\n    (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n    !isNodeJS\n  ) {\n    const { filter } = ctx;\n    if (filter !== \"none\" && filter !== \"\") {\n      ctx.filter = \"none\";\n    }\n  }\n}\n\nfunction composeSMaskBackdrop(bytes, r0, g0, b0) {\n  const length = bytes.length;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = bytes[i];\n    if (alpha === 0) {\n      bytes[i - 3] = r0;\n      bytes[i - 2] = g0;\n      bytes[i - 1] = b0;\n    } else if (alpha < 255) {\n      const alpha_ = 255 - alpha;\n      bytes[i - 3] = (bytes[i - 3] * alpha + r0 * alpha_) >> 8;\n      bytes[i - 2] = (bytes[i - 2] * alpha + g0 * alpha_) >> 8;\n      bytes[i - 1] = (bytes[i - 1] * alpha + b0 * alpha_) >> 8;\n    }\n  }\n}\n\nfunction composeSMaskAlpha(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  const scale = 1 / 255;\n  for (let i = 3; i < length; i += 4) {\n    const alpha = transferMap ? transferMap[maskData[i]] : maskData[i];\n    layerData[i] = (layerData[i] * alpha * scale) | 0;\n  }\n}\n\nfunction composeSMaskLuminosity(maskData, layerData, transferMap) {\n  const length = maskData.length;\n  for (let i = 3; i < length; i += 4) {\n    const y =\n      maskData[i - 3] * 77 + // * 0.3 / 255 * 0x10000\n      maskData[i - 2] * 152 + // * 0.59 ....\n      maskData[i - 1] * 28; // * 0.11 ....\n    layerData[i] = transferMap\n      ? (layerData[i] * transferMap[y >> 8]) >> 8\n      : (layerData[i] * y) >> 16;\n  }\n}\n\nfunction genericComposeSMask(\n  maskCtx,\n  layerCtx,\n  width,\n  height,\n  subtype,\n  backdrop,\n  transferMap,\n  layerOffsetX,\n  layerOffsetY,\n  maskOffsetX,\n  maskOffsetY\n) {\n  const hasBackdrop = !!backdrop;\n  const r0 = hasBackdrop ? backdrop[0] : 0;\n  const g0 = hasBackdrop ? backdrop[1] : 0;\n  const b0 = hasBackdrop ? backdrop[2] : 0;\n\n  const composeFn =\n    subtype === \"Luminosity\" ? composeSMaskLuminosity : composeSMaskAlpha;\n\n  // processing image in chunks to save memory\n  const PIXELS_TO_PROCESS = 1048576;\n  const chunkSize = Math.min(height, Math.ceil(PIXELS_TO_PROCESS / width));\n  for (let row = 0; row < height; row += chunkSize) {\n    const chunkHeight = Math.min(chunkSize, height - row);\n    const maskData = maskCtx.getImageData(\n      layerOffsetX - maskOffsetX,\n      row + (layerOffsetY - maskOffsetY),\n      width,\n      chunkHeight\n    );\n    const layerData = layerCtx.getImageData(\n      layerOffsetX,\n      row + layerOffsetY,\n      width,\n      chunkHeight\n    );\n\n    if (hasBackdrop) {\n      composeSMaskBackdrop(maskData.data, r0, g0, b0);\n    }\n    composeFn(maskData.data, layerData.data, transferMap);\n\n    layerCtx.putImageData(layerData, layerOffsetX, row + layerOffsetY);\n  }\n}\n\nfunction composeSMask(ctx, smask, layerCtx, layerBox) {\n  const layerOffsetX = layerBox[0];\n  const layerOffsetY = layerBox[1];\n  const layerWidth = layerBox[2] - layerOffsetX;\n  const layerHeight = layerBox[3] - layerOffsetY;\n  if (layerWidth === 0 || layerHeight === 0) {\n    return;\n  }\n  genericComposeSMask(\n    smask.context,\n    layerCtx,\n    layerWidth,\n    layerHeight,\n    smask.subtype,\n    smask.backdrop,\n    smask.transferMap,\n    layerOffsetX,\n    layerOffsetY,\n    smask.offsetX,\n    smask.offsetY\n  );\n  ctx.save();\n  ctx.globalAlpha = 1;\n  ctx.globalCompositeOperation = \"source-over\";\n  ctx.setTransform(1, 0, 0, 1, 0, 0);\n  ctx.drawImage(layerCtx.canvas, 0, 0);\n  ctx.restore();\n}\n\nfunction getImageSmoothingEnabled(transform, interpolate) {\n  const scale = Util.singularValueDecompose2dScale(transform);\n  // Round to a 32bit float so that `<=` check below will pass for numbers that\n  // are very close, but not exactly the same 64bit floats.\n  scale[0] = Math.fround(scale[0]);\n  scale[1] = Math.fround(scale[1]);\n  const actualScale = Math.fround(\n    (globalThis.devicePixelRatio || 1) * PixelsPerInch.PDF_TO_CSS_UNITS\n  );\n  if (interpolate !== undefined) {\n    // If the value is explicitly set use it.\n    return interpolate;\n  } else if (scale[0] <= actualScale || scale[1] <= actualScale) {\n    // Smooth when downscaling.\n    return true;\n  }\n  // Don't smooth when upscaling.\n  return false;\n}\n\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\nconst NORMAL_CLIP = {};\nconst EO_CLIP = {};\n\nclass CanvasGraphics {\n  constructor(\n    canvasCtx,\n    commonObjs,\n    objs,\n    canvasFactory,\n    filterFactory,\n    { optionalContentConfig, markedContentStack = null },\n    annotationCanvasMap,\n    pageColors\n  ) {\n    this.ctx = canvasCtx;\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n    this.stateStack = [];\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n    this.res = null;\n    this.xobjs = null;\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.canvasFactory = canvasFactory;\n    this.filterFactory = filterFactory;\n    this.groupStack = [];\n    this.processingType3 = null;\n    // Patterns are painted relative to the initial page/form transform, see\n    // PDF spec 8.7.2 NOTE 1.\n    this.baseTransform = null;\n    this.baseTransformStack = [];\n    this.groupLevel = 0;\n    this.smaskStack = [];\n    this.smaskCounter = 0;\n    this.tempSMask = null;\n    this.suspendedCtx = null;\n    this.contentVisible = true;\n    this.markedContentStack = markedContentStack || [];\n    this.optionalContentConfig = optionalContentConfig;\n    this.cachedCanvases = new CachedCanvases(this.canvasFactory);\n    this.cachedPatterns = new Map();\n    this.annotationCanvasMap = annotationCanvasMap;\n    this.viewportScale = 1;\n    this.outputScaleX = 1;\n    this.outputScaleY = 1;\n    this.pageColors = pageColors;\n\n    this._cachedScaleForStroking = [-1, 0];\n    this._cachedGetSinglePixelWidth = null;\n    this._cachedBitmapsMap = new Map();\n  }\n\n  getObject(data, fallback = null) {\n    if (typeof data === \"string\") {\n      return data.startsWith(\"g_\")\n        ? this.commonObjs.get(data)\n        : this.objs.get(data);\n    }\n    return fallback;\n  }\n\n  beginDrawing({\n    transform,\n    viewport,\n    transparency = false,\n    background = null,\n  }) {\n    // For pdfs that use blend modes we have to clear the canvas else certain\n    // blend modes can look wrong since we'd be blending with a white\n    // backdrop. The problem with a transparent backdrop though is we then\n    // don't get sub pixel anti aliasing on text, creating temporary\n    // transparent canvas when we have blend modes.\n    const width = this.ctx.canvas.width;\n    const height = this.ctx.canvas.height;\n\n    const savedFillStyle = this.ctx.fillStyle;\n    this.ctx.fillStyle = background || \"#ffffff\";\n    this.ctx.fillRect(0, 0, width, height);\n    this.ctx.fillStyle = savedFillStyle;\n\n    if (transparency) {\n      const transparentCanvas = this.cachedCanvases.getCanvas(\n        \"transparent\",\n        width,\n        height\n      );\n      this.compositeCtx = this.ctx;\n      this.transparentCanvas = transparentCanvas.canvas;\n      this.ctx = transparentCanvas.context;\n      this.ctx.save();\n      // The transform can be applied before rendering, transferring it to\n      // the new canvas.\n      this.ctx.transform(...getCurrentTransform(this.compositeCtx));\n    }\n\n    this.ctx.save();\n    resetCtxToDefault(this.ctx);\n    if (transform) {\n      this.ctx.transform(...transform);\n      this.outputScaleX = transform[0];\n      this.outputScaleY = transform[0];\n    }\n    this.ctx.transform(...viewport.transform);\n    this.viewportScale = viewport.scale;\n\n    this.baseTransform = getCurrentTransform(this.ctx);\n  }\n\n  executeOperatorList(\n    operatorList,\n    executionStartIdx,\n    continueCallback,\n    stepper\n  ) {\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    let i = executionStartIdx || 0;\n    const argsArrayLen = argsArray.length;\n\n    // Sometimes the OperatorList to execute is empty.\n    if (argsArrayLen === i) {\n      return i;\n    }\n\n    const chunkOperations =\n      argsArrayLen - i > EXECUTION_STEPS &&\n      typeof continueCallback === \"function\";\n    const endTime = chunkOperations ? Date.now() + EXECUTION_TIME : 0;\n    let steps = 0;\n\n    const commonObjs = this.commonObjs;\n    const objs = this.objs;\n    let fnId;\n\n    while (true) {\n      if (stepper !== undefined && i === stepper.nextBreakPoint) {\n        stepper.breakIt(i, continueCallback);\n        return i;\n      }\n\n      fnId = fnArray[i];\n\n      if (fnId !== OPS.dependency) {\n        // eslint-disable-next-line prefer-spread\n        this[fnId].apply(this, argsArray[i]);\n      } else {\n        for (const depObjId of argsArray[i]) {\n          const objsPool = depObjId.startsWith(\"g_\") ? commonObjs : objs;\n\n          // If the promise isn't resolved yet, add the continueCallback\n          // to the promise and bail out.\n          if (!objsPool.has(depObjId)) {\n            objsPool.get(depObjId, continueCallback);\n            return i;\n          }\n        }\n      }\n\n      i++;\n\n      // If the entire operatorList was executed, stop as were done.\n      if (i === argsArrayLen) {\n        return i;\n      }\n\n      // If the execution took longer then a certain amount of time and\n      // `continueCallback` is specified, interrupt the execution.\n      if (chunkOperations && ++steps > EXECUTION_STEPS) {\n        if (Date.now() > endTime) {\n          continueCallback();\n          return i;\n        }\n        steps = 0;\n      }\n\n      // If the operatorList isn't executed completely yet OR the execution\n      // time was short enough, do another execution round.\n    }\n  }\n\n  #restoreInitialState() {\n    // Finishing all opened operations such as SMask group painting.\n    while (this.stateStack.length || this.inSMaskMode) {\n      this.restore();\n    }\n\n    this.ctx.restore();\n\n    if (this.transparentCanvas) {\n      this.ctx = this.compositeCtx;\n      this.ctx.save();\n      this.ctx.setTransform(1, 0, 0, 1, 0, 0); // Avoid apply transform twice\n      this.ctx.drawImage(this.transparentCanvas, 0, 0);\n      this.ctx.restore();\n      this.transparentCanvas = null;\n    }\n  }\n\n  endDrawing() {\n    this.#restoreInitialState();\n\n    this.cachedCanvases.clear();\n    this.cachedPatterns.clear();\n\n    for (const cache of this._cachedBitmapsMap.values()) {\n      for (const canvas of cache.values()) {\n        if (\n          typeof HTMLCanvasElement !== \"undefined\" &&\n          canvas instanceof HTMLCanvasElement\n        ) {\n          canvas.width = canvas.height = 0;\n        }\n      }\n      cache.clear();\n    }\n    this._cachedBitmapsMap.clear();\n    this.#drawFilter();\n  }\n\n  #drawFilter() {\n    if (this.pageColors) {\n      const hcmFilterId = this.filterFactory.addHCMFilter(\n        this.pageColors.foreground,\n        this.pageColors.background\n      );\n      if (hcmFilterId !== \"none\") {\n        const savedFilter = this.ctx.filter;\n        this.ctx.filter = hcmFilterId;\n        this.ctx.drawImage(this.ctx.canvas, 0, 0);\n        this.ctx.filter = savedFilter;\n      }\n    }\n  }\n\n  _scaleImage(img, inverseTransform) {\n    // Vertical or horizontal scaling shall not be more than 2 to not lose the\n    // pixels during drawImage operation, painting on the temporary canvas(es)\n    // that are twice smaller in size.\n    const width = img.width;\n    const height = img.height;\n    let widthScale = Math.max(\n      Math.hypot(inverseTransform[0], inverseTransform[1]),\n      1\n    );\n    let heightScale = Math.max(\n      Math.hypot(inverseTransform[2], inverseTransform[3]),\n      1\n    );\n\n    let paintWidth = width,\n      paintHeight = height;\n    let tmpCanvasId = \"prescale1\";\n    let tmpCanvas, tmpCtx;\n    while (\n      (widthScale > 2 && paintWidth > 1) ||\n      (heightScale > 2 && paintHeight > 1)\n    ) {\n      let newWidth = paintWidth,\n        newHeight = paintHeight;\n      if (widthScale > 2 && paintWidth > 1) {\n        // See bug 1820511 (Windows specific bug).\n        // TODO: once the above bug is fixed we could revert to:\n        // newWidth = Math.ceil(paintWidth / 2);\n        newWidth =\n          paintWidth >= 16384\n            ? Math.floor(paintWidth / 2) - 1 || 1\n            : Math.ceil(paintWidth / 2);\n        widthScale /= paintWidth / newWidth;\n      }\n      if (heightScale > 2 && paintHeight > 1) {\n        // TODO: see the comment above.\n        newHeight =\n          paintHeight >= 16384\n            ? Math.floor(paintHeight / 2) - 1 || 1\n            : Math.ceil(paintHeight) / 2;\n        heightScale /= paintHeight / newHeight;\n      }\n      tmpCanvas = this.cachedCanvases.getCanvas(\n        tmpCanvasId,\n        newWidth,\n        newHeight\n      );\n      tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, newWidth, newHeight);\n      tmpCtx.drawImage(\n        img,\n        0,\n        0,\n        paintWidth,\n        paintHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      img = tmpCanvas.canvas;\n      paintWidth = newWidth;\n      paintHeight = newHeight;\n      tmpCanvasId = tmpCanvasId === \"prescale1\" ? \"prescale2\" : \"prescale1\";\n    }\n    return {\n      img,\n      paintWidth,\n      paintHeight,\n    };\n  }\n\n  _createMaskCanvas(img) {\n    const ctx = this.ctx;\n    const { width, height } = img;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    const currentTransform = getCurrentTransform(ctx);\n\n    let cache, cacheKey, scaled, maskCanvas;\n    if ((img.bitmap || img.data) && img.count > 1) {\n      const mainKey = img.bitmap || img.data.buffer;\n      // We're reusing the same image several times, so we can cache it.\n      // In case we've a pattern fill we just keep the scaled version of\n      // the image.\n      // Only the scaling part matters, the translation part is just used\n      // to compute offsets (but not when filling patterns see #15573).\n      // TODO: handle the case of a pattern fill if it's possible.\n      cacheKey = JSON.stringify(\n        isPatternFill\n          ? currentTransform\n          : [currentTransform.slice(0, 4), fillColor]\n      );\n\n      cache = this._cachedBitmapsMap.get(mainKey);\n      if (!cache) {\n        cache = new Map();\n        this._cachedBitmapsMap.set(mainKey, cache);\n      }\n      const cachedImage = cache.get(cacheKey);\n      if (cachedImage && !isPatternFill) {\n        const offsetX = Math.round(\n          Math.min(currentTransform[0], currentTransform[2]) +\n            currentTransform[4]\n        );\n        const offsetY = Math.round(\n          Math.min(currentTransform[1], currentTransform[3]) +\n            currentTransform[5]\n        );\n        return {\n          canvas: cachedImage,\n          offsetX,\n          offsetY,\n        };\n      }\n      scaled = cachedImage;\n    }\n\n    if (!scaled) {\n      maskCanvas = this.cachedCanvases.getCanvas(\"maskCanvas\", width, height);\n      putBinaryImageMask(maskCanvas.context, img);\n    }\n\n    // Create the mask canvas at the size it will be drawn at and also set\n    // its transform to match the current transform so if there are any\n    // patterns applied they will be applied relative to the correct\n    // transform.\n\n    let maskToCanvas = Util.transform(currentTransform, [\n      1 / width,\n      0,\n      0,\n      -1 / height,\n      0,\n      0,\n    ]);\n    maskToCanvas = Util.transform(maskToCanvas, [1, 0, 0, 1, 0, -height]);\n    const cord1 = Util.applyTransform([0, 0], maskToCanvas);\n    const cord2 = Util.applyTransform([width, height], maskToCanvas);\n    const rect = Util.normalizeRect([cord1[0], cord1[1], cord2[0], cord2[1]]);\n    const drawnWidth = Math.round(rect[2] - rect[0]) || 1;\n    const drawnHeight = Math.round(rect[3] - rect[1]) || 1;\n    const fillCanvas = this.cachedCanvases.getCanvas(\n      \"fillCanvas\",\n      drawnWidth,\n      drawnHeight\n    );\n    const fillCtx = fillCanvas.context;\n\n    // The offset will be the top-left cordinate mask.\n    // If objToCanvas is [a,b,c,d,e,f] then:\n    //   - offsetX = min(a, c) + e\n    //   - offsetY = min(b, d) + f\n    const offsetX = Math.min(cord1[0], cord2[0]);\n    const offsetY = Math.min(cord1[1], cord2[1]);\n    fillCtx.translate(-offsetX, -offsetY);\n    fillCtx.transform(...maskToCanvas);\n\n    if (!scaled) {\n      // Pre-scale if needed to improve image smoothing.\n      scaled = this._scaleImage(\n        maskCanvas.canvas,\n        getCurrentTransformInverse(fillCtx)\n      );\n      scaled = scaled.img;\n      if (cache && isPatternFill) {\n        cache.set(cacheKey, scaled);\n      }\n    }\n\n    fillCtx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      getCurrentTransform(fillCtx),\n      img.interpolate\n    );\n\n    drawImageAtIntegerCoords(\n      fillCtx,\n      scaled,\n      0,\n      0,\n      scaled.width,\n      scaled.height,\n      0,\n      0,\n      width,\n      height\n    );\n    fillCtx.globalCompositeOperation = \"source-in\";\n\n    const inverse = Util.transform(getCurrentTransformInverse(fillCtx), [\n      1,\n      0,\n      0,\n      1,\n      -offsetX,\n      -offsetY,\n    ]);\n    fillCtx.fillStyle = isPatternFill\n      ? fillColor.getPattern(ctx, this, inverse, PathType.FILL)\n      : fillColor;\n\n    fillCtx.fillRect(0, 0, width, height);\n\n    if (cache && !isPatternFill) {\n      // The fill canvas is put in the cache associated to the mask image\n      // so we must remove from the cached canvas: it mustn't be used again.\n      this.cachedCanvases.delete(\"fillCanvas\");\n      cache.set(cacheKey, fillCanvas.canvas);\n    }\n\n    // Round the offsets to avoid drawing fractional pixels.\n    return {\n      canvas: fillCanvas.canvas,\n      offsetX: Math.round(offsetX),\n      offsetY: Math.round(offsetY),\n    };\n  }\n\n  // Graphics state\n  setLineWidth(width) {\n    if (width !== this.current.lineWidth) {\n      this._cachedScaleForStroking[0] = -1;\n    }\n    this.current.lineWidth = width;\n    this.ctx.lineWidth = width;\n  }\n\n  setLineCap(style) {\n    this.ctx.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.ctx.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.ctx.miterLimit = limit;\n  }\n\n  setDash(dashArray, dashPhase) {\n    const ctx = this.ctx;\n    if (ctx.setLineDash !== undefined) {\n      ctx.setLineDash(dashArray);\n      ctx.lineDashOffset = dashPhase;\n    }\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (const [key, value] of states) {\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value[0], value[1]);\n          break;\n        case \"CA\":\n          this.current.strokeAlpha = value;\n          break;\n        case \"ca\":\n          this.current.fillAlpha = value;\n          this.ctx.globalAlpha = value;\n          break;\n        case \"BM\":\n          this.ctx.globalCompositeOperation = value;\n          break;\n        case \"SMask\":\n          this.current.activeSMask = value ? this.tempSMask : null;\n          this.tempSMask = null;\n          this.checkSMaskState();\n          break;\n        case \"TR\":\n          this.ctx.filter = this.current.transferMaps =\n            this.filterFactory.addFilter(value);\n          break;\n      }\n    }\n  }\n\n  get inSMaskMode() {\n    return !!this.suspendedCtx;\n  }\n\n  checkSMaskState() {\n    const inSMaskMode = this.inSMaskMode;\n    if (this.current.activeSMask && !inSMaskMode) {\n      this.beginSMaskMode();\n    } else if (!this.current.activeSMask && inSMaskMode) {\n      this.endSMaskMode();\n    }\n    // Else, the state is okay and nothing needs to be done.\n  }\n\n  /**\n   * Soft mask mode takes the current main drawing canvas and replaces it with\n   * a temporary canvas. Any drawing operations that happen on the temporary\n   * canvas need to be composed with the main canvas that was suspended (see\n   * `compose()`). The temporary canvas also duplicates many of its operations\n   * on the suspended canvas to keep them in sync, so that when the soft mask\n   * mode ends any clipping paths or transformations will still be active and in\n   * the right order on the canvas' graphics state stack.\n   */\n  beginSMaskMode() {\n    if (this.inSMaskMode) {\n      throw new Error(\"beginSMaskMode called while already in smask mode\");\n    }\n    const drawnWidth = this.ctx.canvas.width;\n    const drawnHeight = this.ctx.canvas.height;\n    const cacheId = \"smaskGroupAt\" + this.groupLevel;\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight\n    );\n    this.suspendedCtx = this.ctx;\n    this.ctx = scratchCanvas.context;\n    const ctx = this.ctx;\n    ctx.setTransform(...getCurrentTransform(this.suspendedCtx));\n    copyCtxState(this.suspendedCtx, ctx);\n    mirrorContextOperations(ctx, this.suspendedCtx);\n\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n  }\n\n  endSMaskMode() {\n    if (!this.inSMaskMode) {\n      throw new Error(\"endSMaskMode called while not in smask mode\");\n    }\n    // The soft mask is done, now restore the suspended canvas as the main\n    // drawing canvas.\n    this.ctx._removeMirroring();\n    copyCtxState(this.ctx, this.suspendedCtx);\n    this.ctx = this.suspendedCtx;\n\n    this.suspendedCtx = null;\n  }\n\n  compose(dirtyBox) {\n    if (!this.current.activeSMask) {\n      return;\n    }\n\n    if (!dirtyBox) {\n      dirtyBox = [0, 0, this.ctx.canvas.width, this.ctx.canvas.height];\n    } else {\n      dirtyBox[0] = Math.floor(dirtyBox[0]);\n      dirtyBox[1] = Math.floor(dirtyBox[1]);\n      dirtyBox[2] = Math.ceil(dirtyBox[2]);\n      dirtyBox[3] = Math.ceil(dirtyBox[3]);\n    }\n    const smask = this.current.activeSMask;\n    const suspendedCtx = this.suspendedCtx;\n\n    composeSMask(suspendedCtx, smask, this.ctx, dirtyBox);\n    // Whatever was drawn has been moved to the suspended canvas, now clear it\n    // out of the current canvas.\n    this.ctx.save();\n    this.ctx.setTransform(1, 0, 0, 1, 0, 0);\n    this.ctx.clearRect(0, 0, this.ctx.canvas.width, this.ctx.canvas.height);\n    this.ctx.restore();\n  }\n\n  save() {\n    if (this.inSMaskMode) {\n      // SMask mode may be turned on/off causing us to lose graphics state.\n      // Copy the temporary canvas state to the main(suspended) canvas to keep\n      // it in sync.\n      copyCtxState(this.ctx, this.suspendedCtx);\n      // Don't bother calling save on the temporary canvas since state is not\n      // saved there.\n      this.suspendedCtx.save();\n    } else {\n      this.ctx.save();\n    }\n    const old = this.current;\n    this.stateStack.push(old);\n    this.current = old.clone();\n  }\n\n  restore() {\n    if (this.stateStack.length === 0 && this.inSMaskMode) {\n      this.endSMaskMode();\n    }\n    if (this.stateStack.length !== 0) {\n      this.current = this.stateStack.pop();\n      if (this.inSMaskMode) {\n        // Graphics state is stored on the main(suspended) canvas. Restore its\n        // state then copy it over to the temporary canvas.\n        this.suspendedCtx.restore();\n        copyCtxState(this.suspendedCtx, this.ctx);\n      } else {\n        this.ctx.restore();\n      }\n      this.checkSMaskState();\n\n      // Ensure that the clipping path is reset (fixes issue6413.pdf).\n      this.pendingClip = null;\n\n      this._cachedScaleForStroking[0] = -1;\n      this._cachedGetSinglePixelWidth = null;\n    }\n  }\n\n  transform(a, b, c, d, e, f) {\n    this.ctx.transform(a, b, c, d, e, f);\n\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n  }\n\n  // Path\n  constructPath(ops, args, minMax) {\n    const ctx = this.ctx;\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let startX, startY;\n    const currentTransform = getCurrentTransform(ctx);\n\n    // Most of the time the current transform is a scaling matrix\n    // so we don't need to transform points before computing min/max:\n    // we can compute min/max first and then smartly \"apply\" the\n    // transform (see Util.scaleMinMax).\n    // For rectangle, moveTo and lineTo, min/max are computed in the\n    // worker (see evaluator.js).\n    const isScalingMatrix =\n      (currentTransform[0] === 0 && currentTransform[3] === 0) ||\n      (currentTransform[1] === 0 && currentTransform[2] === 0);\n    const minMaxForBezier = isScalingMatrix ? minMax.slice(0) : null;\n\n    for (let i = 0, j = 0, ii = ops.length; i < ii; i++) {\n      switch (ops[i] | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n\n          const xw = x + width;\n          const yh = y + height;\n          ctx.moveTo(x, y);\n          if (width === 0 || height === 0) {\n            ctx.lineTo(xw, yh);\n          } else {\n            ctx.lineTo(xw, y);\n            ctx.lineTo(xw, yh);\n            ctx.lineTo(x, yh);\n          }\n          if (!isScalingMatrix) {\n            current.updateRectMinMax(currentTransform, [x, y, xw, yh]);\n          }\n          ctx.closePath();\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.moveTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          ctx.lineTo(x, y);\n          if (!isScalingMatrix) {\n            current.updatePathMinMax(currentTransform, x, y);\n          }\n          break;\n        case OPS.curveTo:\n          startX = x;\n          startY = y;\n          x = args[j + 4];\n          y = args[j + 5];\n          ctx.bezierCurveTo(\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y\n          );\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            x,\n            y,\n            minMaxForBezier\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          startX = x;\n          startY = y;\n          ctx.bezierCurveTo(\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3]\n          );\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            x,\n            y,\n            args[j],\n            args[j + 1],\n            args[j + 2],\n            args[j + 3],\n            minMaxForBezier\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          startX = x;\n          startY = y;\n          x = args[j + 2];\n          y = args[j + 3];\n          ctx.bezierCurveTo(args[j], args[j + 1], x, y, x, y);\n          current.updateCurvePathMinMax(\n            currentTransform,\n            startX,\n            startY,\n            args[j],\n            args[j + 1],\n            x,\n            y,\n            x,\n            y,\n            minMaxForBezier\n          );\n          j += 4;\n          break;\n        case OPS.closePath:\n          ctx.closePath();\n          break;\n      }\n    }\n\n    if (isScalingMatrix) {\n      current.updateScalingPathMinMax(currentTransform, minMaxForBezier);\n    }\n\n    current.setCurrentPoint(x, y);\n  }\n\n  closePath() {\n    this.ctx.closePath();\n  }\n\n  stroke(consumePath = true) {\n    const ctx = this.ctx;\n    const strokeColor = this.current.strokeColor;\n    // For stroke we want to temporarily change the global alpha to the\n    // stroking alpha.\n    ctx.globalAlpha = this.current.strokeAlpha;\n    if (this.contentVisible) {\n      if (typeof strokeColor === \"object\" && strokeColor?.getPattern) {\n        ctx.save();\n        ctx.strokeStyle = strokeColor.getPattern(\n          ctx,\n          this,\n          getCurrentTransformInverse(ctx),\n          PathType.STROKE\n        );\n        this.rescaleAndStroke(/* saveRestore */ false);\n        ctx.restore();\n      } else {\n        this.rescaleAndStroke(/* saveRestore */ true);\n      }\n    }\n    if (consumePath) {\n      this.consumePath(this.current.getClippedPathBoundingBox());\n    }\n    // Restore the global alpha to the fill alpha\n    ctx.globalAlpha = this.current.fillAlpha;\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  fill(consumePath = true) {\n    const ctx = this.ctx;\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n    let needRestore = false;\n\n    if (isPatternFill) {\n      ctx.save();\n      ctx.fillStyle = fillColor.getPattern(\n        ctx,\n        this,\n        getCurrentTransformInverse(ctx),\n        PathType.FILL\n      );\n      needRestore = true;\n    }\n\n    const intersect = this.current.getClippedPathBoundingBox();\n    if (this.contentVisible && intersect !== null) {\n      if (this.pendingEOFill) {\n        ctx.fill(\"evenodd\");\n        this.pendingEOFill = false;\n      } else {\n        ctx.fill();\n      }\n    }\n\n    if (needRestore) {\n      ctx.restore();\n    }\n    if (consumePath) {\n      this.consumePath(intersect);\n    }\n  }\n\n  eoFill() {\n    this.pendingEOFill = true;\n    this.fill();\n  }\n\n  fillStroke() {\n    this.fill(false);\n    this.stroke(false);\n\n    this.consumePath();\n  }\n\n  eoFillStroke() {\n    this.pendingEOFill = true;\n    this.fillStroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.pendingEOFill = true;\n    this.closePath();\n    this.fillStroke();\n  }\n\n  endPath() {\n    this.consumePath();\n  }\n\n  // Clipping\n  clip() {\n    this.pendingClip = NORMAL_CLIP;\n  }\n\n  eoClip() {\n    this.pendingClip = EO_CLIP;\n  }\n\n  // Text\n  beginText() {\n    this.current.textMatrix = IDENTITY_MATRIX;\n    this.current.textMatrixScale = 1;\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  endText() {\n    const paths = this.pendingTextPaths;\n    const ctx = this.ctx;\n    if (paths === undefined) {\n      ctx.beginPath();\n      return;\n    }\n\n    ctx.save();\n    ctx.beginPath();\n    for (const path of paths) {\n      ctx.setTransform(...path.transform);\n      ctx.translate(path.x, path.y);\n      path.addToPath(ctx, path.fontSize);\n    }\n    ctx.restore();\n    ctx.clip();\n    ctx.beginPath();\n    delete this.pendingTextPaths;\n  }\n\n  setCharSpacing(spacing) {\n    this.current.charSpacing = spacing;\n  }\n\n  setWordSpacing(spacing) {\n    this.current.wordSpacing = spacing;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setFont(fontRefName, size) {\n    const fontObj = this.commonObjs.get(fontRefName);\n    const current = this.current;\n\n    if (!fontObj) {\n      throw new Error(`Can't find font for ${fontRefName}`);\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    // A valid matrix needs all main diagonal elements to be non-zero\n    // This also ensures we bypass FF bugzilla bug #719844.\n    if (current.fontMatrix[0] === 0 || current.fontMatrix[3] === 0) {\n      warn(\"Invalid font matrix for font \" + fontRefName);\n    }\n\n    // The spec for Tf (setFont) says that 'size' specifies the font 'scale',\n    // and in some docs this can be negative (inverted x-y axes).\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n\n    this.current.font = fontObj;\n    this.current.fontSize = size;\n\n    if (fontObj.isType3Font) {\n      return; // we don't need ctx.font for Type3 fonts\n    }\n\n    const name = fontObj.loadedName || \"sans-serif\";\n    const typeface =\n      fontObj.systemFontInfo?.css || `\"${name}\", ${fontObj.fallbackName}`;\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n    // Some font backends cannot handle fonts below certain size.\n    // Keeping the font at minimal size and using the fontSizeScale to change\n    // the current transformation matrix before the fillText/strokeText.\n    // See https://bugzilla.mozilla.org/show_bug.cgi?id=726227\n    let browserFontSize = size;\n    if (size < MIN_FONT_SIZE) {\n      browserFontSize = MIN_FONT_SIZE;\n    } else if (size > MAX_FONT_SIZE) {\n      browserFontSize = MAX_FONT_SIZE;\n    }\n    this.current.fontSizeScale = size / browserFontSize;\n\n    this.ctx.font = `${italic} ${bold} ${browserFontSize}px ${typeface}`;\n  }\n\n  setTextRenderingMode(mode) {\n    this.current.textRenderingMode = mode;\n  }\n\n  setTextRise(rise) {\n    this.current.textRise = rise;\n  }\n\n  moveText(x, y) {\n    this.current.x = this.current.lineX += x;\n    this.current.y = this.current.lineY += y;\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    this.current.textMatrix = [a, b, c, d, e, f];\n    this.current.textMatrixScale = Math.hypot(a, b);\n\n    this.current.x = this.current.lineX = 0;\n    this.current.y = this.current.lineY = 0;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  paintChar(character, x, y, patternTransform) {\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const textRenderingMode = current.textRenderingMode;\n    const fontSize = current.fontSize / current.fontSizeScale;\n    const fillStrokeMode =\n      textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    const isAddToPathSet = !!(\n      textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG\n    );\n    const patternFill = current.patternFill && !font.missingFile;\n\n    let addToPath;\n    if (font.disableFontFace || isAddToPathSet || patternFill) {\n      addToPath = font.getPathGenerator(this.commonObjs, character);\n    }\n\n    if (font.disableFontFace || patternFill) {\n      ctx.save();\n      ctx.translate(x, y);\n      ctx.beginPath();\n      addToPath(ctx, fontSize);\n      if (patternTransform) {\n        ctx.setTransform(...patternTransform);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fill();\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.stroke();\n      }\n      ctx.restore();\n    } else {\n      if (\n        fillStrokeMode === TextRenderingMode.FILL ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.fillText(character, x, y);\n      }\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        ctx.strokeText(character, x, y);\n      }\n    }\n\n    if (isAddToPathSet) {\n      const paths = (this.pendingTextPaths ||= []);\n      paths.push({\n        transform: getCurrentTransform(ctx),\n        x,\n        y,\n        fontSize,\n        addToPath,\n      });\n    }\n  }\n\n  get isFontSubpixelAAEnabled() {\n    // Checks if anti-aliasing is enabled when scaled text is painted.\n    // On Windows GDI scaled fonts looks bad.\n    const { context: ctx } = this.cachedCanvases.getCanvas(\n      \"isFontSubpixelAAEnabled\",\n      10,\n      10\n    );\n    ctx.scale(1.5, 1);\n    ctx.fillText(\"I\", 0, 10);\n    const data = ctx.getImageData(0, 0, 10, 10).data;\n    let enabled = false;\n    for (let i = 3; i < data.length; i += 4) {\n      if (data[i] > 0 && data[i] < 255) {\n        enabled = true;\n        break;\n      }\n    }\n    return shadow(this, \"isFontSubpixelAAEnabled\", enabled);\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    if (font.isType3Font) {\n      return this.showType3Text(glyphs);\n    }\n\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return undefined;\n    }\n\n    const ctx = this.ctx;\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const glyphsLength = glyphs.length;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    const simpleFillText =\n      current.textRenderingMode === TextRenderingMode.FILL &&\n      !font.disableFontFace &&\n      !current.patternFill;\n\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y + current.textRise);\n\n    if (fontDirection > 0) {\n      ctx.scale(textHScale, -1);\n    } else {\n      ctx.scale(textHScale, 1);\n    }\n\n    let patternTransform;\n    if (current.patternFill) {\n      ctx.save();\n      const pattern = current.fillColor.getPattern(\n        ctx,\n        this,\n        getCurrentTransformInverse(ctx),\n        PathType.FILL\n      );\n      patternTransform = getCurrentTransform(ctx);\n      ctx.restore();\n      ctx.fillStyle = pattern;\n    }\n\n    let lineWidth = current.lineWidth;\n    const scale = current.textMatrixScale;\n    if (scale === 0 || lineWidth === 0) {\n      const fillStrokeMode =\n        current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n      if (\n        fillStrokeMode === TextRenderingMode.STROKE ||\n        fillStrokeMode === TextRenderingMode.FILL_STROKE\n      ) {\n        lineWidth = this.getSinglePixelWidth();\n      }\n    } else {\n      lineWidth /= scale;\n    }\n\n    if (fontSizeScale !== 1.0) {\n      ctx.scale(fontSizeScale, fontSizeScale);\n      lineWidth /= fontSizeScale;\n    }\n\n    ctx.lineWidth = lineWidth;\n\n    if (font.isInvalidPDFjsFont) {\n      const chars = [];\n      let width = 0;\n      for (const glyph of glyphs) {\n        chars.push(glyph.unicode);\n        width += glyph.width;\n      }\n      ctx.fillText(chars.join(\"\"), 0, 0);\n      current.x += width * widthAdvanceScale * textHScale;\n      ctx.restore();\n      this.compose();\n\n      return undefined;\n    }\n\n    let x = 0,\n      i;\n    for (i = 0; i < glyphsLength; ++i) {\n      const glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      let restoreNeeded = false;\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      const accent = glyph.accent;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        const vx =\n          -(glyph.vmetric ? vmetric[1] : width * 0.5) * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (font.remeasure && width > 0) {\n        // Some standard fonts may not have the exact width: rescale per\n        // character if measured width is greater than expected glyph width\n        // and subpixel-aa is enabled, otherwise just center the glyph.\n        const measuredWidth =\n          ((ctx.measureText(character).width * 1000) / fontSize) *\n          fontSizeScale;\n        if (width < measuredWidth && this.isFontSubpixelAAEnabled) {\n          const characterScaleX = width / measuredWidth;\n          restoreNeeded = true;\n          ctx.save();\n          ctx.scale(characterScaleX, 1);\n          scaledX /= characterScaleX;\n        } else if (width !== measuredWidth) {\n          scaledX +=\n            (((width - measuredWidth) / 2000) * fontSize) / fontSizeScale;\n        }\n      }\n\n      // Only attempt to draw the glyph if it is actually in the embedded font\n      // file or if there isn't a font file so the fallback font is shown.\n      if (this.contentVisible && (glyph.isInFont || font.missingFile)) {\n        if (simpleFillText && !accent) {\n          // common case\n          ctx.fillText(character, scaledX, scaledY);\n        } else {\n          this.paintChar(character, scaledX, scaledY, patternTransform);\n          if (accent) {\n            const scaledAccentX =\n              scaledX + (fontSize * accent.offset.x) / fontSizeScale;\n            const scaledAccentY =\n              scaledY - (fontSize * accent.offset.y) / fontSizeScale;\n            this.paintChar(\n              accent.fontChar,\n              scaledAccentX,\n              scaledAccentY,\n              patternTransform\n            );\n          }\n        }\n      }\n\n      const charWidth = vertical\n        ? width * widthAdvanceScale - spacing * fontDirection\n        : width * widthAdvanceScale + spacing * fontDirection;\n      x += charWidth;\n\n      if (restoreNeeded) {\n        ctx.restore();\n      }\n    }\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n    ctx.restore();\n    this.compose();\n\n    return undefined;\n  }\n\n  showType3Text(glyphs) {\n    // Type3 fonts - each glyph is a \"mini-PDF\"\n    const ctx = this.ctx;\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    const fontDirection = current.fontDirection;\n    const spacingDir = font.vertical ? 1 : -1;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const textHScale = current.textHScale * fontDirection;\n    const fontMatrix = current.fontMatrix || FONT_IDENTITY_MATRIX;\n    const glyphsLength = glyphs.length;\n    const isTextInvisible =\n      current.textRenderingMode === TextRenderingMode.INVISIBLE;\n    let i, glyph, width, spacingLength;\n\n    if (isTextInvisible || fontSize === 0) {\n      return;\n    }\n    this._cachedScaleForStroking[0] = -1;\n    this._cachedGetSinglePixelWidth = null;\n\n    ctx.save();\n    ctx.transform(...current.textMatrix);\n    ctx.translate(current.x, current.y);\n\n    ctx.scale(textHScale, fontDirection);\n\n    for (i = 0; i < glyphsLength; ++i) {\n      glyph = glyphs[i];\n      if (typeof glyph === \"number\") {\n        spacingLength = (spacingDir * glyph * fontSize) / 1000;\n        this.ctx.translate(spacingLength, 0);\n        current.x += spacingLength * textHScale;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const operatorList = font.charProcOperatorList[glyph.operatorListId];\n      if (!operatorList) {\n        warn(`Type3 character \"${glyph.operatorListId}\" is not available.`);\n        continue;\n      }\n      if (this.contentVisible) {\n        this.processingType3 = glyph;\n        this.save();\n        ctx.scale(fontSize, fontSize);\n        ctx.transform(...fontMatrix);\n        this.executeOperatorList(operatorList);\n        this.restore();\n      }\n\n      const transformed = Util.applyTransform([glyph.width, 0], fontMatrix);\n      width = transformed[0] * fontSize + spacing;\n\n      ctx.translate(width, 0);\n      current.x += width * textHScale;\n    }\n    ctx.restore();\n    this.processingType3 = null;\n  }\n\n  // Type3 fonts\n  setCharWidth(xWidth, yWidth) {\n    // We can safely ignore this since the width should be the same\n    // as the width in the Widths array.\n  }\n\n  setCharWidthAndBounds(xWidth, yWidth, llx, lly, urx, ury) {\n    this.ctx.rect(llx, lly, urx - llx, ury - lly);\n    this.ctx.clip();\n    this.endPath();\n  }\n\n  // Color\n  getColorN_Pattern(IR) {\n    let pattern;\n    if (IR[0] === \"TilingPattern\") {\n      const color = IR[1];\n      const baseTransform = this.baseTransform || getCurrentTransform(this.ctx);\n      const canvasGraphicsFactory = {\n        createCanvasGraphics: ctx => {\n          return new CanvasGraphics(\n            ctx,\n            this.commonObjs,\n            this.objs,\n            this.canvasFactory,\n            this.filterFactory,\n            {\n              optionalContentConfig: this.optionalContentConfig,\n              markedContentStack: this.markedContentStack,\n            }\n          );\n        },\n      };\n      pattern = new TilingPattern(\n        IR,\n        color,\n        this.ctx,\n        canvasGraphicsFactory,\n        baseTransform\n      );\n    } else {\n      pattern = this._getPattern(IR[1], IR[2]);\n    }\n    return pattern;\n  }\n\n  setStrokeColorN() {\n    this.current.strokeColor = this.getColorN_Pattern(arguments);\n  }\n\n  setFillColorN() {\n    this.current.fillColor = this.getColorN_Pattern(arguments);\n    this.current.patternFill = true;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.strokeStyle = color;\n    this.current.strokeColor = color;\n  }\n\n  setFillRGBColor(r, g, b) {\n    const color = Util.makeHexColor(r, g, b);\n    this.ctx.fillStyle = color;\n    this.current.fillColor = color;\n    this.current.patternFill = false;\n  }\n\n  _getPattern(objId, matrix = null) {\n    let pattern;\n    if (this.cachedPatterns.has(objId)) {\n      pattern = this.cachedPatterns.get(objId);\n    } else {\n      pattern = getShadingPattern(this.getObject(objId));\n      this.cachedPatterns.set(objId, pattern);\n    }\n    if (matrix) {\n      pattern.matrix = matrix;\n    }\n    return pattern;\n  }\n\n  shadingFill(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    this.save();\n    const pattern = this._getPattern(objId);\n    ctx.fillStyle = pattern.getPattern(\n      ctx,\n      this,\n      getCurrentTransformInverse(ctx),\n      PathType.SHADING\n    );\n\n    const inv = getCurrentTransformInverse(ctx);\n    if (inv) {\n      const { width, height } = ctx.canvas;\n      const [x0, y0, x1, y1] = Util.getAxialAlignedBoundingBox(\n        [0, 0, width, height],\n        inv\n      );\n\n      this.ctx.fillRect(x0, y0, x1 - x0, y1 - y0);\n    } else {\n      // HACK to draw the gradient onto an infinite rectangle.\n      // PDF gradients are drawn across the entire image while\n      // Canvas only allows gradients to be drawn in a rectangle\n      // The following bug should allow us to remove this.\n      // https://bugzilla.mozilla.org/show_bug.cgi?id=664884\n\n      this.ctx.fillRect(-1e10, -1e10, 2e10, 2e10);\n    }\n\n    this.compose(this.current.getClippedPathBoundingBox());\n    this.restore();\n  }\n\n  // Images\n  beginInlineImage() {\n    unreachable(\"Should not call beginInlineImage\");\n  }\n\n  beginImageData() {\n    unreachable(\"Should not call beginImageData\");\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.save();\n    this.baseTransformStack.push(this.baseTransform);\n\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform(...matrix);\n    }\n\n    this.baseTransform = getCurrentTransform(this.ctx);\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n      this.ctx.rect(bbox[0], bbox[1], width, height);\n      this.current.updateRectMinMax(getCurrentTransform(this.ctx), bbox);\n      this.clip();\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.restore();\n    this.baseTransform = this.baseTransformStack.pop();\n  }\n\n  beginGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    this.save();\n    // If there's an active soft mask we don't want it enabled for the group, so\n    // clear it out. The mask and suspended canvas will be restored in endGroup.\n    if (this.inSMaskMode) {\n      this.endSMaskMode();\n      this.current.activeSMask = null;\n    }\n\n    const currentCtx = this.ctx;\n    // TODO non-isolated groups - according to Rik at adobe non-isolated\n    // group results aren't usually that different and they even have tools\n    // that ignore this setting. Notes from Rik on implementing:\n    // - When you encounter an transparency group, create a new canvas with\n    // the dimensions of the bbox\n    // - copy the content from the previous canvas to the new canvas\n    // - draw as usual\n    // - remove the backdrop alpha:\n    // alphaNew = 1 - (1 - alpha)/(1 - alphaBackdrop) with 'alpha' the alpha\n    // value of your transparency group and 'alphaBackdrop' the alpha of the\n    // backdrop\n    // - remove background color:\n    // colorNew = color - alphaNew *colorBackdrop /(1 - alphaNew)\n    if (!group.isolated) {\n      info(\"TODO: Support non-isolated groups.\");\n    }\n\n    // TODO knockout - supposedly possible with the clever use of compositing\n    // modes.\n    if (group.knockout) {\n      warn(\"Knockout groups not supported.\");\n    }\n\n    const currentTransform = getCurrentTransform(currentCtx);\n    if (group.matrix) {\n      currentCtx.transform(...group.matrix);\n    }\n    if (!group.bbox) {\n      throw new Error(\"Bounding box is required.\");\n    }\n\n    // Based on the current transform figure out how big the bounding box\n    // will actually be.\n    let bounds = Util.getAxialAlignedBoundingBox(\n      group.bbox,\n      getCurrentTransform(currentCtx)\n    );\n    // Clip the bounding box to the current canvas.\n    const canvasBounds = [\n      0,\n      0,\n      currentCtx.canvas.width,\n      currentCtx.canvas.height,\n    ];\n    bounds = Util.intersect(bounds, canvasBounds) || [0, 0, 0, 0];\n    // Use ceil in case we're between sizes so we don't create canvas that is\n    // too small and make the canvas at least 1x1 pixels.\n    const offsetX = Math.floor(bounds[0]);\n    const offsetY = Math.floor(bounds[1]);\n    let drawnWidth = Math.max(Math.ceil(bounds[2]) - offsetX, 1);\n    let drawnHeight = Math.max(Math.ceil(bounds[3]) - offsetY, 1);\n    let scaleX = 1,\n      scaleY = 1;\n    if (drawnWidth > MAX_GROUP_SIZE) {\n      scaleX = drawnWidth / MAX_GROUP_SIZE;\n      drawnWidth = MAX_GROUP_SIZE;\n    }\n    if (drawnHeight > MAX_GROUP_SIZE) {\n      scaleY = drawnHeight / MAX_GROUP_SIZE;\n      drawnHeight = MAX_GROUP_SIZE;\n    }\n\n    this.current.startNewPathAndClipBox([0, 0, drawnWidth, drawnHeight]);\n\n    let cacheId = \"groupAt\" + this.groupLevel;\n    if (group.smask) {\n      // Using two cache entries is case if masks are used one after another.\n      cacheId += \"_smask_\" + (this.smaskCounter++ % 2);\n    }\n    const scratchCanvas = this.cachedCanvases.getCanvas(\n      cacheId,\n      drawnWidth,\n      drawnHeight\n    );\n    const groupCtx = scratchCanvas.context;\n\n    // Since we created a new canvas that is just the size of the bounding box\n    // we have to translate the group ctx.\n    groupCtx.scale(1 / scaleX, 1 / scaleY);\n    groupCtx.translate(-offsetX, -offsetY);\n    groupCtx.transform(...currentTransform);\n\n    if (group.smask) {\n      // Saving state and cached mask to be used in setGState.\n      this.smaskStack.push({\n        canvas: scratchCanvas.canvas,\n        context: groupCtx,\n        offsetX,\n        offsetY,\n        scaleX,\n        scaleY,\n        subtype: group.smask.subtype,\n        backdrop: group.smask.backdrop,\n        transferMap: group.smask.transferMap || null,\n        startTransformInverse: null, // used during suspend operation\n      });\n    } else {\n      // Setup the current ctx so when the group is popped we draw it at the\n      // right location.\n      currentCtx.setTransform(1, 0, 0, 1, 0, 0);\n      currentCtx.translate(offsetX, offsetY);\n      currentCtx.scale(scaleX, scaleY);\n      currentCtx.save();\n    }\n    // The transparency group inherits all off the current graphics state\n    // except the blend mode, soft mask, and alpha constants.\n    copyCtxState(currentCtx, groupCtx);\n    this.ctx = groupCtx;\n    this.setGState([\n      [\"BM\", \"source-over\"],\n      [\"ca\", 1],\n      [\"CA\", 1],\n    ]);\n    this.groupStack.push(currentCtx);\n    this.groupLevel++;\n  }\n\n  endGroup(group) {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.groupLevel--;\n    const groupCtx = this.ctx;\n    const ctx = this.groupStack.pop();\n    this.ctx = ctx;\n    // Turn off image smoothing to avoid sub pixel interpolation which can\n    // look kind of blurry for some pdfs.\n    this.ctx.imageSmoothingEnabled = false;\n\n    if (group.smask) {\n      this.tempSMask = this.smaskStack.pop();\n      this.restore();\n    } else {\n      this.ctx.restore();\n      const currentMtx = getCurrentTransform(this.ctx);\n      this.restore();\n      this.ctx.save();\n      this.ctx.setTransform(...currentMtx);\n      const dirtyBox = Util.getAxialAlignedBoundingBox(\n        [0, 0, groupCtx.canvas.width, groupCtx.canvas.height],\n        currentMtx\n      );\n      this.ctx.drawImage(groupCtx.canvas, 0, 0);\n      this.ctx.restore();\n      this.compose(dirtyBox);\n    }\n  }\n\n  beginAnnotation(id, rect, transform, matrix, hasOwnCanvas) {\n    // The annotations are drawn just after the page content.\n    // The page content drawing can potentially have set a transform,\n    // a clipping path, whatever...\n    // So in order to have something clean, we restore the initial state.\n    this.#restoreInitialState();\n    resetCtxToDefault(this.ctx);\n\n    this.ctx.save();\n    this.save();\n\n    if (this.baseTransform) {\n      this.ctx.setTransform(...this.baseTransform);\n    }\n\n    if (Array.isArray(rect) && rect.length === 4) {\n      const width = rect[2] - rect[0];\n      const height = rect[3] - rect[1];\n\n      if (hasOwnCanvas && this.annotationCanvasMap) {\n        transform = transform.slice();\n        transform[4] -= rect[0];\n        transform[5] -= rect[1];\n\n        rect = rect.slice();\n        rect[0] = rect[1] = 0;\n        rect[2] = width;\n        rect[3] = height;\n\n        const [scaleX, scaleY] = Util.singularValueDecompose2dScale(\n          getCurrentTransform(this.ctx)\n        );\n        const { viewportScale } = this;\n        const canvasWidth = Math.ceil(\n          width * this.outputScaleX * viewportScale\n        );\n        const canvasHeight = Math.ceil(\n          height * this.outputScaleY * viewportScale\n        );\n\n        this.annotationCanvas = this.canvasFactory.create(\n          canvasWidth,\n          canvasHeight\n        );\n        const { canvas, context } = this.annotationCanvas;\n        this.annotationCanvasMap.set(id, canvas);\n        this.annotationCanvas.savedCtx = this.ctx;\n        this.ctx = context;\n        this.ctx.save();\n        this.ctx.setTransform(scaleX, 0, 0, -scaleY, 0, height * scaleY);\n\n        resetCtxToDefault(this.ctx);\n      } else {\n        resetCtxToDefault(this.ctx);\n\n        this.ctx.rect(rect[0], rect[1], width, height);\n        this.ctx.clip();\n        this.endPath();\n      }\n    }\n\n    this.current = new CanvasExtraState(\n      this.ctx.canvas.width,\n      this.ctx.canvas.height\n    );\n\n    this.transform(...transform);\n    this.transform(...matrix);\n  }\n\n  endAnnotation() {\n    if (this.annotationCanvas) {\n      this.ctx.restore();\n      this.#drawFilter();\n\n      this.ctx = this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas.savedCtx;\n      delete this.annotationCanvas;\n    }\n  }\n\n  paintImageMaskXObject(img) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const count = img.count;\n    img = this.getObject(img.data, img);\n    img.count = count;\n\n    const ctx = this.ctx;\n    const glyph = this.processingType3;\n\n    if (glyph) {\n      if (glyph.compiled === undefined) {\n        glyph.compiled = compileType3Glyph(img);\n      }\n\n      if (glyph.compiled) {\n        glyph.compiled(ctx);\n        return;\n      }\n    }\n    const mask = this._createMaskCanvas(img);\n    const maskCanvas = mask.canvas;\n\n    ctx.save();\n    // The mask is drawn with the transform applied. Reset the current\n    // transform to draw to the identity.\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.drawImage(maskCanvas, mask.offsetX, mask.offsetY);\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectRepeat(\n    img,\n    scaleX,\n    skewX = 0,\n    skewY = 0,\n    scaleY,\n    positions\n  ) {\n    if (!this.contentVisible) {\n      return;\n    }\n\n    img = this.getObject(img.data, img);\n\n    const ctx = this.ctx;\n    ctx.save();\n    const currentTransform = getCurrentTransform(ctx);\n    ctx.transform(scaleX, skewX, skewY, scaleY, 0, 0);\n    const mask = this._createMaskCanvas(img);\n\n    ctx.setTransform(\n      1,\n      0,\n      0,\n      1,\n      mask.offsetX - currentTransform[4],\n      mask.offsetY - currentTransform[5]\n    );\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      const trans = Util.transform(currentTransform, [\n        scaleX,\n        skewX,\n        skewY,\n        scaleY,\n        positions[i],\n        positions[i + 1],\n      ]);\n\n      const [x, y] = Util.applyTransform([0, 0], trans);\n      ctx.drawImage(mask.canvas, x, y);\n    }\n    ctx.restore();\n    this.compose();\n  }\n\n  paintImageMaskXObjectGroup(images) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n\n    const fillColor = this.current.fillColor;\n    const isPatternFill = this.current.patternFill;\n\n    for (const image of images) {\n      const { data, width, height, transform } = image;\n\n      const maskCanvas = this.cachedCanvases.getCanvas(\n        \"maskCanvas\",\n        width,\n        height\n      );\n      const maskCtx = maskCanvas.context;\n      maskCtx.save();\n\n      const img = this.getObject(data, image);\n      putBinaryImageMask(maskCtx, img);\n\n      maskCtx.globalCompositeOperation = \"source-in\";\n\n      maskCtx.fillStyle = isPatternFill\n        ? fillColor.getPattern(\n            maskCtx,\n            this,\n            getCurrentTransformInverse(ctx),\n            PathType.FILL\n          )\n        : fillColor;\n      maskCtx.fillRect(0, 0, width, height);\n\n      maskCtx.restore();\n\n      ctx.save();\n      ctx.transform(...transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(\n        ctx,\n        maskCanvas.canvas,\n        0,\n        0,\n        width,\n        height,\n        0,\n        -1,\n        1,\n        1\n      );\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintImageXObject(objId) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintImageXObjectRepeat(objId, scaleX, scaleY, positions) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(\"Dependent image isn't ready yet\");\n      return;\n    }\n\n    const width = imgData.width;\n    const height = imgData.height;\n    const map = [];\n    for (let i = 0, ii = positions.length; i < ii; i += 2) {\n      map.push({\n        transform: [scaleX, 0, 0, scaleY, positions[i], positions[i + 1]],\n        x: 0,\n        y: 0,\n        w: width,\n        h: height,\n      });\n    }\n    this.paintInlineImageXObjectGroup(imgData, map);\n  }\n\n  applyTransferMapsToCanvas(ctx) {\n    if (this.current.transferMaps !== \"none\") {\n      ctx.filter = this.current.transferMaps;\n      ctx.drawImage(ctx.canvas, 0, 0);\n      ctx.filter = \"none\";\n    }\n    return ctx.canvas;\n  }\n\n  applyTransferMapsToBitmap(imgData) {\n    if (this.current.transferMaps === \"none\") {\n      return imgData.bitmap;\n    }\n    const { bitmap, width, height } = imgData;\n    const tmpCanvas = this.cachedCanvases.getCanvas(\n      \"inlineImage\",\n      width,\n      height\n    );\n    const tmpCtx = tmpCanvas.context;\n    tmpCtx.filter = this.current.transferMaps;\n    tmpCtx.drawImage(bitmap, 0, 0);\n    tmpCtx.filter = \"none\";\n\n    return tmpCanvas.canvas;\n  }\n\n  paintInlineImageXObject(imgData) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const width = imgData.width;\n    const height = imgData.height;\n    const ctx = this.ctx;\n\n    this.save();\n\n    if (\n      (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n      !isNodeJS\n    ) {\n      // The filter, if any, will be applied in applyTransferMapsToBitmap.\n      // It must be applied to the image before rescaling else some artifacts\n      // could appear.\n      // The final restore will reset it to its value.\n      const { filter } = ctx;\n      if (filter !== \"none\" && filter !== \"\") {\n        ctx.filter = \"none\";\n      }\n    }\n\n    // scale the image to the unit square\n    ctx.scale(1 / width, -1 / height);\n\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = this.applyTransferMapsToBitmap(imgData);\n    } else if (\n      (typeof HTMLElement === \"function\" && imgData instanceof HTMLElement) ||\n      !imgData.data\n    ) {\n      // typeof check is needed due to node.js support, see issue #8489\n      imgToPaint = imgData;\n    } else {\n      const tmpCanvas = this.cachedCanvases.getCanvas(\n        \"inlineImage\",\n        width,\n        height\n      );\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n\n    const scaled = this._scaleImage(\n      imgToPaint,\n      getCurrentTransformInverse(ctx)\n    );\n    ctx.imageSmoothingEnabled = getImageSmoothingEnabled(\n      getCurrentTransform(ctx),\n      imgData.interpolate\n    );\n\n    drawImageAtIntegerCoords(\n      ctx,\n      scaled.img,\n      0,\n      0,\n      scaled.paintWidth,\n      scaled.paintHeight,\n      0,\n      -height,\n      width,\n      height\n    );\n    this.compose();\n    this.restore();\n  }\n\n  paintInlineImageXObjectGroup(imgData, map) {\n    if (!this.contentVisible) {\n      return;\n    }\n    const ctx = this.ctx;\n    let imgToPaint;\n    if (imgData.bitmap) {\n      imgToPaint = imgData.bitmap;\n    } else {\n      const w = imgData.width;\n      const h = imgData.height;\n\n      const tmpCanvas = this.cachedCanvases.getCanvas(\"inlineImage\", w, h);\n      const tmpCtx = tmpCanvas.context;\n      putBinaryImageData(tmpCtx, imgData);\n      imgToPaint = this.applyTransferMapsToCanvas(tmpCtx);\n    }\n\n    for (const entry of map) {\n      ctx.save();\n      ctx.transform(...entry.transform);\n      ctx.scale(1, -1);\n      drawImageAtIntegerCoords(\n        ctx,\n        imgToPaint,\n        entry.x,\n        entry.y,\n        entry.w,\n        entry.h,\n        0,\n        -1,\n        1,\n        1\n      );\n      ctx.restore();\n    }\n    this.compose();\n  }\n\n  paintSolidColorImageMask() {\n    if (!this.contentVisible) {\n      return;\n    }\n    this.ctx.fillRect(0, 0, 1, 1);\n    this.compose();\n  }\n\n  // Marked content\n\n  markPoint(tag) {\n    // TODO Marked content.\n  }\n\n  markPointProps(tag, properties) {\n    // TODO Marked content.\n  }\n\n  beginMarkedContent(tag) {\n    this.markedContentStack.push({\n      visible: true,\n    });\n  }\n\n  beginMarkedContentProps(tag, properties) {\n    if (tag === \"OC\") {\n      this.markedContentStack.push({\n        visible: this.optionalContentConfig.isVisible(properties),\n      });\n    } else {\n      this.markedContentStack.push({\n        visible: true,\n      });\n    }\n    this.contentVisible = this.isContentVisible();\n  }\n\n  endMarkedContent() {\n    this.markedContentStack.pop();\n    this.contentVisible = this.isContentVisible();\n  }\n\n  // Compatibility\n\n  beginCompat() {\n    // TODO ignore undefined operators (should we do that anyway?)\n  }\n\n  endCompat() {\n    // TODO stop ignoring undefined operators\n  }\n\n  // Helper functions\n\n  consumePath(clipBox) {\n    const isEmpty = this.current.isEmptyClip();\n    if (this.pendingClip) {\n      this.current.updateClipFromPath();\n    }\n    if (!this.pendingClip) {\n      this.compose(clipBox);\n    }\n    const ctx = this.ctx;\n    if (this.pendingClip) {\n      if (!isEmpty) {\n        if (this.pendingClip === EO_CLIP) {\n          ctx.clip(\"evenodd\");\n        } else {\n          ctx.clip();\n        }\n      }\n      this.pendingClip = null;\n    }\n    this.current.startNewPathAndClipBox(this.current.clipBox);\n    ctx.beginPath();\n  }\n\n  getSinglePixelWidth() {\n    if (!this._cachedGetSinglePixelWidth) {\n      const m = getCurrentTransform(this.ctx);\n      if (m[1] === 0 && m[2] === 0) {\n        // Fast path\n        this._cachedGetSinglePixelWidth =\n          1 / Math.min(Math.abs(m[0]), Math.abs(m[3]));\n      } else {\n        const absDet = Math.abs(m[0] * m[3] - m[2] * m[1]);\n        const normX = Math.hypot(m[0], m[2]);\n        const normY = Math.hypot(m[1], m[3]);\n        this._cachedGetSinglePixelWidth = Math.max(normX, normY) / absDet;\n      }\n    }\n    return this._cachedGetSinglePixelWidth;\n  }\n\n  getScaleForStroking() {\n    // A pixel has thicknessX = thicknessY = 1;\n    // A transformed pixel is a parallelogram and the thicknesses\n    // corresponds to the heights.\n    // The goal of this function is to rescale before setting the\n    // lineWidth in order to have both thicknesses greater or equal\n    // to 1 after transform.\n    if (this._cachedScaleForStroking[0] === -1) {\n      const { lineWidth } = this.current;\n      const { a, b, c, d } = this.ctx.getTransform();\n      let scaleX, scaleY;\n\n      if (b === 0 && c === 0) {\n        // Fast path\n        const normX = Math.abs(a);\n        const normY = Math.abs(d);\n        if (normX === normY) {\n          if (lineWidth === 0) {\n            scaleX = scaleY = 1 / normX;\n          } else {\n            const scaledLineWidth = normX * lineWidth;\n            scaleX = scaleY = scaledLineWidth < 1 ? 1 / scaledLineWidth : 1;\n          }\n        } else if (lineWidth === 0) {\n          scaleX = 1 / normX;\n          scaleY = 1 / normY;\n        } else {\n          const scaledXLineWidth = normX * lineWidth;\n          const scaledYLineWidth = normY * lineWidth;\n          scaleX = scaledXLineWidth < 1 ? 1 / scaledXLineWidth : 1;\n          scaleY = scaledYLineWidth < 1 ? 1 / scaledYLineWidth : 1;\n        }\n      } else {\n        // A pixel (base (x, y)) is transformed by M into a parallelogram:\n        //  - its area is |det(M)|;\n        //  - heightY (orthogonal to Mx) has a length: |det(M)| / norm(Mx);\n        //  - heightX (orthogonal to My) has a length: |det(M)| / norm(My).\n        // heightX and heightY are the thicknesses of the transformed pixel\n        // and they must be both greater or equal to 1.\n        const absDet = Math.abs(a * d - b * c);\n        const normX = Math.hypot(a, b);\n        const normY = Math.hypot(c, d);\n        if (lineWidth === 0) {\n          scaleX = normY / absDet;\n          scaleY = normX / absDet;\n        } else {\n          const baseArea = lineWidth * absDet;\n          scaleX = normY > baseArea ? normY / baseArea : 1;\n          scaleY = normX > baseArea ? normX / baseArea : 1;\n        }\n      }\n      this._cachedScaleForStroking[0] = scaleX;\n      this._cachedScaleForStroking[1] = scaleY;\n    }\n    return this._cachedScaleForStroking;\n  }\n\n  // Rescale before stroking in order to have a final lineWidth\n  // with both thicknesses greater or equal to 1.\n  rescaleAndStroke(saveRestore) {\n    const { ctx } = this;\n    const { lineWidth } = this.current;\n    const [scaleX, scaleY] = this.getScaleForStroking();\n\n    ctx.lineWidth = lineWidth || 1;\n\n    if (scaleX === 1 && scaleY === 1) {\n      ctx.stroke();\n      return;\n    }\n\n    const dashes = ctx.getLineDash();\n    if (saveRestore) {\n      ctx.save();\n    }\n\n    ctx.scale(scaleX, scaleY);\n\n    // How the dashed line is rendered depends on the current transform...\n    // so we added a rescale to handle too thin lines and consequently\n    // the way the line is dashed will be modified.\n    // If scaleX === scaleY, the dashed lines will be rendered correctly\n    // else we'll have some bugs (but only with too thin lines).\n    // Here we take the max... why not taking the min... or something else.\n    // Anyway, as said it's buggy when scaleX !== scaleY.\n    if (dashes.length > 0) {\n      const scale = Math.max(scaleX, scaleY);\n      ctx.setLineDash(dashes.map(x => x / scale));\n      ctx.lineDashOffset /= scale;\n    }\n\n    ctx.stroke();\n\n    if (saveRestore) {\n      ctx.restore();\n    }\n  }\n\n  isContentVisible() {\n    for (let i = this.markedContentStack.length - 1; i >= 0; i--) {\n      if (!this.markedContentStack[i].visible) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n\nfor (const op in OPS) {\n  if (CanvasGraphics.prototype[op] !== undefined) {\n    CanvasGraphics.prototype[OPS[op]] = CanvasGraphics.prototype[op];\n  }\n}\n\nexport { CanvasGraphics };\n", "/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FormatError, info, unreachable, Util } from \"../shared/util.js\";\nimport { getCurrentTransform } from \"./display_utils.js\";\n\nconst PathType = {\n  FILL: \"Fill\",\n  STROKE: \"Stroke\",\n  SHADING: \"Shading\",\n};\n\nfunction applyBoundingBox(ctx, bbox) {\n  if (!bbox) {\n    return;\n  }\n  const width = bbox[2] - bbox[0];\n  const height = bbox[3] - bbox[1];\n  const region = new Path2D();\n  region.rect(bbox[0], bbox[1], width, height);\n  ctx.clip(region);\n}\n\nclass BaseShadingPattern {\n  constructor() {\n    if (this.constructor === BaseShadingPattern) {\n      unreachable(\"Cannot initialize BaseShadingPattern.\");\n    }\n  }\n\n  getPattern() {\n    unreachable(\"Abstract method `getPattern` called.\");\n  }\n}\n\nclass RadialAxialShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._type = IR[1];\n    this._bbox = IR[2];\n    this._colorStops = IR[3];\n    this._p0 = IR[4];\n    this._p1 = IR[5];\n    this._r0 = IR[6];\n    this._r1 = IR[7];\n    this.matrix = null;\n  }\n\n  _createGradient(ctx) {\n    let grad;\n    if (this._type === \"axial\") {\n      grad = ctx.createLinearGradient(\n        this._p0[0],\n        this._p0[1],\n        this._p1[0],\n        this._p1[1]\n      );\n    } else if (this._type === \"radial\") {\n      grad = ctx.createRadialGradient(\n        this._p0[0],\n        this._p0[1],\n        this._r0,\n        this._p1[0],\n        this._p1[1],\n        this._r1\n      );\n    }\n\n    for (const colorStop of this._colorStops) {\n      grad.addColorStop(colorStop[0], colorStop[1]);\n    }\n    return grad;\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    let pattern;\n    if (pathType === PathType.STROKE || pathType === PathType.FILL) {\n      const ownerBBox = owner.current.getClippedPathBoundingBox(\n        pathType,\n        getCurrentTransform(ctx)\n      ) || [0, 0, 0, 0];\n      // Create a canvas that is only as big as the current path. This doesn't\n      // allow us to cache the pattern, but it generally creates much smaller\n      // canvases and saves memory use. See bug 1722807 for an example.\n      const width = Math.ceil(ownerBBox[2] - ownerBBox[0]) || 1;\n      const height = Math.ceil(ownerBBox[3] - ownerBBox[1]) || 1;\n\n      const tmpCanvas = owner.cachedCanvases.getCanvas(\n        \"pattern\",\n        width,\n        height,\n        true\n      );\n\n      const tmpCtx = tmpCanvas.context;\n      tmpCtx.clearRect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      tmpCtx.beginPath();\n      tmpCtx.rect(0, 0, tmpCtx.canvas.width, tmpCtx.canvas.height);\n      // Non shading fill patterns are positioned relative to the base transform\n      // (usually the page's initial transform), but we may have created a\n      // smaller canvas based on the path, so we must account for the shift.\n      tmpCtx.translate(-ownerBBox[0], -ownerBBox[1]);\n      inverse = Util.transform(inverse, [\n        1,\n        0,\n        0,\n        1,\n        ownerBBox[0],\n        ownerBBox[1],\n      ]);\n\n      tmpCtx.transform(...owner.baseTransform);\n      if (this.matrix) {\n        tmpCtx.transform(...this.matrix);\n      }\n      applyBoundingBox(tmpCtx, this._bbox);\n\n      tmpCtx.fillStyle = this._createGradient(tmpCtx);\n      tmpCtx.fill();\n\n      pattern = ctx.createPattern(tmpCanvas.canvas, \"no-repeat\");\n      const domMatrix = new DOMMatrix(inverse);\n      pattern.setTransform(domMatrix);\n    } else {\n      // Shading fills are applied relative to the current matrix which is also\n      // how canvas gradients work, so there's no need to do anything special\n      // here.\n      applyBoundingBox(ctx, this._bbox);\n      pattern = this._createGradient(ctx);\n    }\n    return pattern;\n  }\n}\n\nfunction drawTriangle(data, context, p1, p2, p3, c1, c2, c3) {\n  // Very basic Gouraud-shaded triangle rasterization algorithm.\n  const coords = context.coords,\n    colors = context.colors;\n  const bytes = data.data,\n    rowSize = data.width * 4;\n  let tmp;\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  if (coords[p2 + 1] > coords[p3 + 1]) {\n    tmp = p2;\n    p2 = p3;\n    p3 = tmp;\n    tmp = c2;\n    c2 = c3;\n    c3 = tmp;\n  }\n  if (coords[p1 + 1] > coords[p2 + 1]) {\n    tmp = p1;\n    p1 = p2;\n    p2 = tmp;\n    tmp = c1;\n    c1 = c2;\n    c2 = tmp;\n  }\n  const x1 = (coords[p1] + context.offsetX) * context.scaleX;\n  const y1 = (coords[p1 + 1] + context.offsetY) * context.scaleY;\n  const x2 = (coords[p2] + context.offsetX) * context.scaleX;\n  const y2 = (coords[p2 + 1] + context.offsetY) * context.scaleY;\n  const x3 = (coords[p3] + context.offsetX) * context.scaleX;\n  const y3 = (coords[p3 + 1] + context.offsetY) * context.scaleY;\n  if (y1 >= y3) {\n    return;\n  }\n  const c1r = colors[c1],\n    c1g = colors[c1 + 1],\n    c1b = colors[c1 + 2];\n  const c2r = colors[c2],\n    c2g = colors[c2 + 1],\n    c2b = colors[c2 + 2];\n  const c3r = colors[c3],\n    c3g = colors[c3 + 1],\n    c3b = colors[c3 + 2];\n\n  const minY = Math.round(y1),\n    maxY = Math.round(y3);\n  let xa, car, cag, cab;\n  let xb, cbr, cbg, cbb;\n  for (let y = minY; y <= maxY; y++) {\n    if (y < y2) {\n      const k = y < y1 ? 0 : (y1 - y) / (y1 - y2);\n      xa = x1 - (x1 - x2) * k;\n      car = c1r - (c1r - c2r) * k;\n      cag = c1g - (c1g - c2g) * k;\n      cab = c1b - (c1b - c2b) * k;\n    } else {\n      let k;\n      if (y > y3) {\n        k = 1;\n      } else if (y2 === y3) {\n        k = 0;\n      } else {\n        k = (y2 - y) / (y2 - y3);\n      }\n      xa = x2 - (x2 - x3) * k;\n      car = c2r - (c2r - c3r) * k;\n      cag = c2g - (c2g - c3g) * k;\n      cab = c2b - (c2b - c3b) * k;\n    }\n\n    let k;\n    if (y < y1) {\n      k = 0;\n    } else if (y > y3) {\n      k = 1;\n    } else {\n      k = (y1 - y) / (y1 - y3);\n    }\n    xb = x1 - (x1 - x3) * k;\n    cbr = c1r - (c1r - c3r) * k;\n    cbg = c1g - (c1g - c3g) * k;\n    cbb = c1b - (c1b - c3b) * k;\n    const x1_ = Math.round(Math.min(xa, xb));\n    const x2_ = Math.round(Math.max(xa, xb));\n    let j = rowSize * y + x1_ * 4;\n    for (let x = x1_; x <= x2_; x++) {\n      k = (xa - x) / (xa - xb);\n      if (k < 0) {\n        k = 0;\n      } else if (k > 1) {\n        k = 1;\n      }\n      bytes[j++] = (car - (car - cbr) * k) | 0;\n      bytes[j++] = (cag - (cag - cbg) * k) | 0;\n      bytes[j++] = (cab - (cab - cbb) * k) | 0;\n      bytes[j++] = 255;\n    }\n  }\n}\n\nfunction drawFigure(data, figure, context) {\n  const ps = figure.coords;\n  const cs = figure.colors;\n  let i, ii;\n  switch (figure.type) {\n    case \"lattice\":\n      const verticesPerRow = figure.verticesPerRow;\n      const rows = Math.floor(ps.length / verticesPerRow) - 1;\n      const cols = verticesPerRow - 1;\n      for (i = 0; i < rows; i++) {\n        let q = i * verticesPerRow;\n        for (let j = 0; j < cols; j++, q++) {\n          drawTriangle(\n            data,\n            context,\n            ps[q],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n          drawTriangle(\n            data,\n            context,\n            ps[q + verticesPerRow + 1],\n            ps[q + 1],\n            ps[q + verticesPerRow],\n            cs[q + verticesPerRow + 1],\n            cs[q + 1],\n            cs[q + verticesPerRow]\n          );\n        }\n      }\n      break;\n    case \"triangles\":\n      for (i = 0, ii = ps.length; i < ii; i += 3) {\n        drawTriangle(\n          data,\n          context,\n          ps[i],\n          ps[i + 1],\n          ps[i + 2],\n          cs[i],\n          cs[i + 1],\n          cs[i + 2]\n        );\n      }\n      break;\n    default:\n      throw new Error(\"illegal figure\");\n  }\n}\n\nclass MeshShadingPattern extends BaseShadingPattern {\n  constructor(IR) {\n    super();\n    this._coords = IR[2];\n    this._colors = IR[3];\n    this._figures = IR[4];\n    this._bounds = IR[5];\n    this._bbox = IR[7];\n    this._background = IR[8];\n    this.matrix = null;\n  }\n\n  _createMeshCanvas(combinedScale, backgroundColor, cachedCanvases) {\n    // we will increase scale on some weird factor to let antialiasing take\n    // care of \"rough\" edges\n    const EXPECTED_SCALE = 1.1;\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    const MAX_PATTERN_SIZE = 3000; // 10in @ 300dpi shall be enough\n    // We need to keep transparent border around our pattern for fill():\n    // createPattern with 'no-repeat' will bleed edges across entire area.\n    const BORDER_SIZE = 2;\n\n    const offsetX = Math.floor(this._bounds[0]);\n    const offsetY = Math.floor(this._bounds[1]);\n    const boundsWidth = Math.ceil(this._bounds[2]) - offsetX;\n    const boundsHeight = Math.ceil(this._bounds[3]) - offsetY;\n\n    const width = Math.min(\n      Math.ceil(Math.abs(boundsWidth * combinedScale[0] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const height = Math.min(\n      Math.ceil(Math.abs(boundsHeight * combinedScale[1] * EXPECTED_SCALE)),\n      MAX_PATTERN_SIZE\n    );\n    const scaleX = boundsWidth / width;\n    const scaleY = boundsHeight / height;\n\n    const context = {\n      coords: this._coords,\n      colors: this._colors,\n      offsetX: -offsetX,\n      offsetY: -offsetY,\n      scaleX: 1 / scaleX,\n      scaleY: 1 / scaleY,\n    };\n\n    const paddedWidth = width + BORDER_SIZE * 2;\n    const paddedHeight = height + BORDER_SIZE * 2;\n\n    const tmpCanvas = cachedCanvases.getCanvas(\n      \"mesh\",\n      paddedWidth,\n      paddedHeight,\n      false\n    );\n    const tmpCtx = tmpCanvas.context;\n\n    const data = tmpCtx.createImageData(width, height);\n    if (backgroundColor) {\n      const bytes = data.data;\n      for (let i = 0, ii = bytes.length; i < ii; i += 4) {\n        bytes[i] = backgroundColor[0];\n        bytes[i + 1] = backgroundColor[1];\n        bytes[i + 2] = backgroundColor[2];\n        bytes[i + 3] = 255;\n      }\n    }\n    for (const figure of this._figures) {\n      drawFigure(data, figure, context);\n    }\n    tmpCtx.putImageData(data, BORDER_SIZE, BORDER_SIZE);\n    const canvas = tmpCanvas.canvas;\n\n    return {\n      canvas,\n      offsetX: offsetX - BORDER_SIZE * scaleX,\n      offsetY: offsetY - BORDER_SIZE * scaleY,\n      scaleX,\n      scaleY,\n    };\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    applyBoundingBox(ctx, this._bbox);\n    let scale;\n    if (pathType === PathType.SHADING) {\n      scale = Util.singularValueDecompose2dScale(getCurrentTransform(ctx));\n    } else {\n      // Obtain scale from matrix and current transformation matrix.\n      scale = Util.singularValueDecompose2dScale(owner.baseTransform);\n      if (this.matrix) {\n        const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n        scale = [scale[0] * matrixScale[0], scale[1] * matrixScale[1]];\n      }\n    }\n\n    // Rasterizing on the main thread since sending/queue large canvases\n    // might cause OOM.\n    const temporaryPatternCanvas = this._createMeshCanvas(\n      scale,\n      pathType === PathType.SHADING ? null : this._background,\n      owner.cachedCanvases\n    );\n\n    if (pathType !== PathType.SHADING) {\n      ctx.setTransform(...owner.baseTransform);\n      if (this.matrix) {\n        ctx.transform(...this.matrix);\n      }\n    }\n\n    ctx.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    ctx.scale(temporaryPatternCanvas.scaleX, temporaryPatternCanvas.scaleY);\n\n    return ctx.createPattern(temporaryPatternCanvas.canvas, \"no-repeat\");\n  }\n}\n\nclass DummyShadingPattern extends BaseShadingPattern {\n  getPattern() {\n    return \"hotpink\";\n  }\n}\n\nfunction getShadingPattern(IR) {\n  switch (IR[0]) {\n    case \"RadialAxial\":\n      return new RadialAxialShadingPattern(IR);\n    case \"Mesh\":\n      return new MeshShadingPattern(IR);\n    case \"Dummy\":\n      return new DummyShadingPattern();\n  }\n  throw new Error(`Unknown IR type: ${IR[0]}`);\n}\n\nconst PaintType = {\n  COLORED: 1,\n  UNCOLORED: 2,\n};\n\nclass TilingPattern {\n  // 10in @ 300dpi shall be enough.\n  static MAX_PATTERN_SIZE = 3000;\n\n  constructor(IR, color, ctx, canvasGraphicsFactory, baseTransform) {\n    this.operatorList = IR[2];\n    this.matrix = IR[3] || [1, 0, 0, 1, 0, 0];\n    this.bbox = IR[4];\n    this.xstep = IR[5];\n    this.ystep = IR[6];\n    this.paintType = IR[7];\n    this.tilingType = IR[8];\n    this.color = color;\n    this.ctx = ctx;\n    this.canvasGraphicsFactory = canvasGraphicsFactory;\n    this.baseTransform = baseTransform;\n  }\n\n  createPatternCanvas(owner) {\n    const operatorList = this.operatorList;\n    const bbox = this.bbox;\n    const xstep = this.xstep;\n    const ystep = this.ystep;\n    const paintType = this.paintType;\n    const tilingType = this.tilingType;\n    const color = this.color;\n    const canvasGraphicsFactory = this.canvasGraphicsFactory;\n\n    info(\"TilingType: \" + tilingType);\n\n    // A tiling pattern as defined by PDF spec 8.7.2 is a cell whose size is\n    // described by bbox, and may repeat regularly by shifting the cell by\n    // xstep and ystep.\n    // Because the HTML5 canvas API does not support pattern repetition with\n    // gaps in between, we use the xstep/ystep instead of the bbox's size.\n    //\n    // This has the following consequences (similarly for ystep):\n    //\n    // - If xstep is the same as bbox, then there is no observable difference.\n    //\n    // - If xstep is larger than bbox, then the pattern canvas is partially\n    //   empty: the area bounded by bbox is painted, the outside area is void.\n    //\n    // - If xstep is smaller than bbox, then the pixels between xstep and the\n    //   bbox boundary will be missing. This is INCORRECT behavior.\n    //   \"Figures on adjacent tiles should not overlap\" (PDF spec 8.7.3.1),\n    //   but overlapping cells without common pixels are still valid.\n    //   TODO: Fix the implementation, to allow this scenario to be painted\n    //   correctly.\n\n    const x0 = bbox[0],\n      y0 = bbox[1],\n      x1 = bbox[2],\n      y1 = bbox[3];\n\n    // Obtain scale from matrix and current transformation matrix.\n    const matrixScale = Util.singularValueDecompose2dScale(this.matrix);\n    const curMatrixScale = Util.singularValueDecompose2dScale(\n      this.baseTransform\n    );\n    const combinedScale = [\n      matrixScale[0] * curMatrixScale[0],\n      matrixScale[1] * curMatrixScale[1],\n    ];\n\n    // Use width and height values that are as close as possible to the end\n    // result when the pattern is used. Too low value makes the pattern look\n    // blurry. Too large value makes it look too crispy.\n    const dimx = this.getSizeAndScale(\n      xstep,\n      this.ctx.canvas.width,\n      combinedScale[0]\n    );\n    const dimy = this.getSizeAndScale(\n      ystep,\n      this.ctx.canvas.height,\n      combinedScale[1]\n    );\n\n    const tmpCanvas = owner.cachedCanvases.getCanvas(\n      \"pattern\",\n      dimx.size,\n      dimy.size,\n      true\n    );\n    const tmpCtx = tmpCanvas.context;\n    const graphics = canvasGraphicsFactory.createCanvasGraphics(tmpCtx);\n    graphics.groupLevel = owner.groupLevel;\n\n    this.setFillAndStrokeStyleToContext(graphics, paintType, color);\n\n    let adjustedX0 = x0;\n    let adjustedY0 = y0;\n    let adjustedX1 = x1;\n    let adjustedY1 = y1;\n    // Some bounding boxes have negative x0/y0 coordinates which will cause the\n    // some of the drawing to be off of the canvas. To avoid this shift the\n    // bounding box over.\n    if (x0 < 0) {\n      adjustedX0 = 0;\n      adjustedX1 += Math.abs(x0);\n    }\n    if (y0 < 0) {\n      adjustedY0 = 0;\n      adjustedY1 += Math.abs(y0);\n    }\n    tmpCtx.translate(-(dimx.scale * adjustedX0), -(dimy.scale * adjustedY0));\n    graphics.transform(dimx.scale, 0, 0, dimy.scale, 0, 0);\n\n    // To match CanvasGraphics beginDrawing we must save the context here or\n    // else we end up with unbalanced save/restores.\n    tmpCtx.save();\n\n    this.clipBbox(graphics, adjustedX0, adjustedY0, adjustedX1, adjustedY1);\n\n    graphics.baseTransform = getCurrentTransform(graphics.ctx);\n\n    graphics.executeOperatorList(operatorList);\n\n    graphics.endDrawing();\n\n    return {\n      canvas: tmpCanvas.canvas,\n      scaleX: dimx.scale,\n      scaleY: dimy.scale,\n      offsetX: adjustedX0,\n      offsetY: adjustedY0,\n    };\n  }\n\n  getSizeAndScale(step, realOutputSize, scale) {\n    // xstep / ystep may be negative -- normalize.\n    step = Math.abs(step);\n    // MAX_PATTERN_SIZE is used to avoid OOM situation.\n    // Use the destination canvas's size if it is bigger than the hard-coded\n    // limit of MAX_PATTERN_SIZE to avoid clipping patterns that cover the\n    // whole canvas.\n    const maxSize = Math.max(TilingPattern.MAX_PATTERN_SIZE, realOutputSize);\n    let size = Math.ceil(step * scale);\n    if (size >= maxSize) {\n      size = maxSize;\n    } else {\n      scale = size / step;\n    }\n    return { scale, size };\n  }\n\n  clipBbox(graphics, x0, y0, x1, y1) {\n    const bboxWidth = x1 - x0;\n    const bboxHeight = y1 - y0;\n    graphics.ctx.rect(x0, y0, bboxWidth, bboxHeight);\n    graphics.current.updateRectMinMax(getCurrentTransform(graphics.ctx), [\n      x0,\n      y0,\n      x1,\n      y1,\n    ]);\n    graphics.clip();\n    graphics.endPath();\n  }\n\n  setFillAndStrokeStyleToContext(graphics, paintType, color) {\n    const context = graphics.ctx,\n      current = graphics.current;\n    switch (paintType) {\n      case PaintType.COLORED:\n        const ctx = this.ctx;\n        context.fillStyle = ctx.fillStyle;\n        context.strokeStyle = ctx.strokeStyle;\n        current.fillColor = ctx.fillStyle;\n        current.strokeColor = ctx.strokeStyle;\n        break;\n      case PaintType.UNCOLORED:\n        const cssColor = Util.makeHexColor(color[0], color[1], color[2]);\n        context.fillStyle = cssColor;\n        context.strokeStyle = cssColor;\n        // Set color needed by image masks (fixes issues 3226 and 8741).\n        current.fillColor = cssColor;\n        current.strokeColor = cssColor;\n        break;\n      default:\n        throw new FormatError(`Unsupported paint type: ${paintType}`);\n    }\n  }\n\n  getPattern(ctx, owner, inverse, pathType) {\n    // PDF spec 8.7.2 NOTE 1: pattern's matrix is relative to initial matrix.\n    let matrix = inverse;\n    if (pathType !== PathType.SHADING) {\n      matrix = Util.transform(matrix, owner.baseTransform);\n      if (this.matrix) {\n        matrix = Util.transform(matrix, this.matrix);\n      }\n    }\n\n    const temporaryPatternCanvas = this.createPatternCanvas(owner);\n\n    let domMatrix = new DOMMatrix(matrix);\n    // Rescale and so that the ctx.createPattern call generates a pattern with\n    // the desired size.\n    domMatrix = domMatrix.translate(\n      temporaryPatternCanvas.offsetX,\n      temporaryPatternCanvas.offsetY\n    );\n    domMatrix = domMatrix.scale(\n      1 / temporaryPatternCanvas.scaleX,\n      1 / temporaryPatternCanvas.scaleY\n    );\n\n    const pattern = ctx.createPattern(temporaryPatternCanvas.canvas, \"repeat\");\n    pattern.setTransform(domMatrix);\n\n    return pattern;\n  }\n}\n\nexport { getShadingPattern, PathType, TilingPattern };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FeatureTest, ImageKind } from \"./util.js\";\n\nfunction convertToRGBA(params) {\n  switch (params.kind) {\n    case ImageKind.GRAYSCALE_1BPP:\n      return convertBlackAndWhiteToRGBA(params);\n    case ImageKind.RGB_24BPP:\n      return convertRGBToRGBA(params);\n  }\n\n  return null;\n}\n\nfunction convertBlackAndWhiteToRGBA({\n  src,\n  srcPos = 0,\n  dest,\n  width,\n  height,\n  nonBlackColor = 0xffffffff,\n  inverseDecode = false,\n}) {\n  const black = FeatureTest.isLittleEndian ? 0xff000000 : 0x000000ff;\n  const [zeroMapping, oneMapping] = inverseDecode\n    ? [nonBlackColor, black]\n    : [black, nonBlackColor];\n  const widthInSource = width >> 3;\n  const widthRemainder = width & 7;\n  const srcLength = src.length;\n  dest = new Uint32Array(dest.buffer);\n  let destPos = 0;\n\n  for (let i = 0; i < height; i++) {\n    for (const max = srcPos + widthInSource; srcPos < max; srcPos++) {\n      const elem = srcPos < srcLength ? src[srcPos] : 255;\n      dest[destPos++] = elem & 0b10000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1000 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b100 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b10 ? oneMapping : zeroMapping;\n      dest[destPos++] = elem & 0b1 ? oneMapping : zeroMapping;\n    }\n    if (widthRemainder === 0) {\n      continue;\n    }\n    const elem = srcPos < srcLength ? src[srcPos++] : 255;\n    for (let j = 0; j < widthRemainder; j++) {\n      dest[destPos++] = elem & (1 << (7 - j)) ? oneMapping : zeroMapping;\n    }\n  }\n  return { srcPos, destPos };\n}\n\nfunction convertRGBToRGBA({\n  src,\n  srcPos = 0,\n  dest,\n  destPos = 0,\n  width,\n  height,\n}) {\n  let i = 0;\n  const len32 = src.length >> 2;\n  const src32 = new Uint32Array(src.buffer, srcPos, len32);\n\n  if (FeatureTest.isLittleEndian) {\n    // It's a way faster to do the shuffle manually instead of working\n    // component by component with some Uint8 arrays.\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i]; // R2B1G1R1\n      const s2 = src32[i + 1]; // G3R3B2G2\n      const s3 = src32[i + 2]; // B4G4R4B3\n\n      dest[destPos] = s1 | 0xff000000;\n      dest[destPos + 1] = (s1 >>> 24) | (s2 << 8) | 0xff000000;\n      dest[destPos + 2] = (s2 >>> 16) | (s3 << 16) | 0xff000000;\n      dest[destPos + 3] = (s3 >>> 8) | 0xff000000;\n    }\n\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] =\n        src[j] | (src[j + 1] << 8) | (src[j + 2] << 16) | 0xff000000;\n    }\n  } else {\n    for (; i < len32 - 2; i += 3, destPos += 4) {\n      const s1 = src32[i]; // R1G1B1R2\n      const s2 = src32[i + 1]; // G2B2R3G3\n      const s3 = src32[i + 2]; // B3R4G4B4\n\n      dest[destPos] = s1 | 0xff;\n      dest[destPos + 1] = (s1 << 24) | (s2 >>> 8) | 0xff;\n      dest[destPos + 2] = (s2 << 16) | (s3 >>> 16) | 0xff;\n      dest[destPos + 3] = (s3 << 8) | 0xff;\n    }\n\n    for (let j = i * 4, jj = src.length; j < jj; j += 3) {\n      dest[destPos++] =\n        (src[j] << 24) | (src[j + 1] << 16) | (src[j + 2] << 8) | 0xff;\n    }\n  }\n\n  return { srcPos, destPos };\n}\n\nfunction grayToRGBA(src, dest) {\n  if (FeatureTest.isLittleEndian) {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = (src[i] * 0x10101) | 0xff000000;\n    }\n  } else {\n    for (let i = 0, ii = src.length; i < ii; i++) {\n      dest[i] = (src[i] * 0x1010100) | 0x000000ff;\n    }\n  }\n}\n\nexport { convertBlackAndWhiteToRGBA, convertToRGBA, grayToRGBA };\n", "/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * @typedef {Object} GlobalWorkerOptionsType\n * @property {Worker | null} workerPort - Defines global port for worker\n *   process. Overrides the `workerSrc` option.\n * @property {string} workerSrc - A string containing the path and filename\n *   of the worker file.\n *\n *   NOTE: The `workerSrc` option should always be set, in order to prevent any\n *         issues when using the PDF.js library.\n */\n\n/** @type {GlobalWorkerOptionsType} */\nconst GlobalWorkerOptions = Object.create(null);\n\nGlobalWorkerOptions.workerPort = null;\nGlobalWorkerOptions.workerSrc = \"\";\n\nexport { GlobalWorkerOptions };\n", "/* Copyright 2018 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  MissingPDFException,\n  PasswordException,\n  PromiseCapability,\n  UnexpectedResponseException,\n  UnknownErrorException,\n  unreachable,\n} from \"./util.js\";\n\nconst CallbackKind = {\n  UNKNOWN: 0,\n  DATA: 1,\n  ERROR: 2,\n};\n\nconst StreamKind = {\n  UNKNOWN: 0,\n  CANCEL: 1,\n  CANCEL_COMPLETE: 2,\n  CLOSE: 3,\n  ENQUEUE: 4,\n  ERROR: 5,\n  PULL: 6,\n  PULL_COMPLETE: 7,\n  START_COMPLETE: 8,\n};\n\nfunction wrapReason(reason) {\n  if (\n    !(\n      reason instanceof Error ||\n      (typeof reason === \"object\" && reason !== null)\n    )\n  ) {\n    unreachable(\n      'wrapReason: Expected \"reason\" to be a (possibly cloned) Error.'\n    );\n  }\n  switch (reason.name) {\n    case \"AbortException\":\n      return new AbortException(reason.message);\n    case \"MissingPDFException\":\n      return new MissingPDFException(reason.message);\n    case \"PasswordException\":\n      return new PasswordException(reason.message, reason.code);\n    case \"UnexpectedResponseException\":\n      return new UnexpectedResponseException(reason.message, reason.status);\n    case \"UnknownErrorException\":\n      return new UnknownErrorException(reason.message, reason.details);\n    default:\n      return new UnknownErrorException(reason.message, reason.toString());\n  }\n}\n\nclass MessageHandler {\n  constructor(sourceName, targetName, comObj) {\n    this.sourceName = sourceName;\n    this.targetName = targetName;\n    this.comObj = comObj;\n    this.callbackId = 1;\n    this.streamId = 1;\n    this.streamSinks = Object.create(null);\n    this.streamControllers = Object.create(null);\n    this.callbackCapabilities = Object.create(null);\n    this.actionHandler = Object.create(null);\n\n    this._onComObjOnMessage = event => {\n      const data = event.data;\n      if (data.targetName !== this.sourceName) {\n        return;\n      }\n      if (data.stream) {\n        this.#processStreamMessage(data);\n        return;\n      }\n      if (data.callback) {\n        const callbackId = data.callbackId;\n        const capability = this.callbackCapabilities[callbackId];\n        if (!capability) {\n          throw new Error(`Cannot resolve callback ${callbackId}`);\n        }\n        delete this.callbackCapabilities[callbackId];\n\n        if (data.callback === CallbackKind.DATA) {\n          capability.resolve(data.data);\n        } else if (data.callback === CallbackKind.ERROR) {\n          capability.reject(wrapReason(data.reason));\n        } else {\n          throw new Error(\"Unexpected callback case\");\n        }\n        return;\n      }\n      const action = this.actionHandler[data.action];\n      if (!action) {\n        throw new Error(`Unknown action from worker: ${data.action}`);\n      }\n      if (data.callbackId) {\n        const cbSourceName = this.sourceName;\n        const cbTargetName = data.sourceName;\n\n        new Promise(function (resolve) {\n          resolve(action(data.data));\n        }).then(\n          function (result) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.DATA,\n              callbackId: data.callbackId,\n              data: result,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName: cbSourceName,\n              targetName: cbTargetName,\n              callback: CallbackKind.ERROR,\n              callbackId: data.callbackId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        return;\n      }\n      if (data.streamId) {\n        this.#createStreamSink(data);\n        return;\n      }\n      action(data.data);\n    };\n    comObj.addEventListener(\"message\", this._onComObjOnMessage);\n  }\n\n  on(actionName, handler) {\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      assert(\n        typeof handler === \"function\",\n        'MessageHandler.on: Expected \"handler\" to be a function.'\n      );\n    }\n    const ah = this.actionHandler;\n    if (ah[actionName]) {\n      throw new Error(`There is already an actionName called \"${actionName}\"`);\n    }\n    ah[actionName] = handler;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   */\n  send(actionName, data, transfers) {\n    this.comObj.postMessage(\n      {\n        sourceName: this.sourceName,\n        targetName: this.targetName,\n        action: actionName,\n        data,\n      },\n      transfers\n    );\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expects that the other side will callback with the response.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {Promise} Promise to be resolved with response data.\n   */\n  sendWithPromise(actionName, data, transfers) {\n    const callbackId = this.callbackId++;\n    const capability = new PromiseCapability();\n    this.callbackCapabilities[callbackId] = capability;\n    try {\n      this.comObj.postMessage(\n        {\n          sourceName: this.sourceName,\n          targetName: this.targetName,\n          action: actionName,\n          callbackId,\n          data,\n        },\n        transfers\n      );\n    } catch (ex) {\n      capability.reject(ex);\n    }\n    return capability.promise;\n  }\n\n  /**\n   * Sends a message to the comObj to invoke the action with the supplied data.\n   * Expect that the other side will callback to signal 'start_complete'.\n   * @param {string} actionName - Action to call.\n   * @param {JSON} data - JSON data to send.\n   * @param {Object} queueingStrategy - Strategy to signal backpressure based on\n   *                 internal queue.\n   * @param {Array} [transfers] - List of transfers/ArrayBuffers.\n   * @returns {ReadableStream} ReadableStream to read data in chunks.\n   */\n  sendWithStream(actionName, data, queueingStrategy, transfers) {\n    const streamId = this.streamId++,\n      sourceName = this.sourceName,\n      targetName = this.targetName,\n      comObj = this.comObj;\n\n    return new ReadableStream(\n      {\n        start: controller => {\n          const startCapability = new PromiseCapability();\n          this.streamControllers[streamId] = {\n            controller,\n            startCall: startCapability,\n            pullCall: null,\n            cancelCall: null,\n            isClosed: false,\n          };\n          comObj.postMessage(\n            {\n              sourceName,\n              targetName,\n              action: actionName,\n              streamId,\n              data,\n              desiredSize: controller.desiredSize,\n            },\n            transfers\n          );\n          // Return Promise for Async process, to signal success/failure.\n          return startCapability.promise;\n        },\n\n        pull: controller => {\n          const pullCapability = new PromiseCapability();\n          this.streamControllers[streamId].pullCall = pullCapability;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL,\n            streamId,\n            desiredSize: controller.desiredSize,\n          });\n          // Returning Promise will not call \"pull\"\n          // again until current pull is resolved.\n          return pullCapability.promise;\n        },\n\n        cancel: reason => {\n          assert(reason instanceof Error, \"cancel must have a valid reason\");\n          const cancelCapability = new PromiseCapability();\n          this.streamControllers[streamId].cancelCall = cancelCapability;\n          this.streamControllers[streamId].isClosed = true;\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.CANCEL,\n            streamId,\n            reason: wrapReason(reason),\n          });\n          // Return Promise to signal success or failure.\n          return cancelCapability.promise;\n        },\n      },\n      queueingStrategy\n    );\n  }\n\n  #createStreamSink(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const self = this,\n      action = this.actionHandler[data.action];\n\n    const streamSink = {\n      enqueue(chunk, size = 1, transfers) {\n        if (this.isCancelled) {\n          return;\n        }\n        const lastDesiredSize = this.desiredSize;\n        this.desiredSize -= size;\n        // Enqueue decreases the desiredSize property of sink,\n        // so when it changes from positive to negative,\n        // set ready as unresolved promise.\n        if (lastDesiredSize > 0 && this.desiredSize <= 0) {\n          this.sinkCapability = new PromiseCapability();\n          this.ready = this.sinkCapability.promise;\n        }\n        comObj.postMessage(\n          {\n            sourceName,\n            targetName,\n            stream: StreamKind.ENQUEUE,\n            streamId,\n            chunk,\n          },\n          transfers\n        );\n      },\n\n      close() {\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.CLOSE,\n          streamId,\n        });\n        delete self.streamSinks[streamId];\n      },\n\n      error(reason) {\n        assert(reason instanceof Error, \"error must have a valid reason\");\n        if (this.isCancelled) {\n          return;\n        }\n        this.isCancelled = true;\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.ERROR,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      },\n\n      sinkCapability: new PromiseCapability(),\n      onPull: null,\n      onCancel: null,\n      isCancelled: false,\n      desiredSize: data.desiredSize,\n      ready: null,\n    };\n\n    streamSink.sinkCapability.resolve();\n    streamSink.ready = streamSink.sinkCapability.promise;\n    this.streamSinks[streamId] = streamSink;\n\n    new Promise(function (resolve) {\n      resolve(action(data.data, streamSink));\n    }).then(\n      function () {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          success: true,\n        });\n      },\n      function (reason) {\n        comObj.postMessage({\n          sourceName,\n          targetName,\n          stream: StreamKind.START_COMPLETE,\n          streamId,\n          reason: wrapReason(reason),\n        });\n      }\n    );\n  }\n\n  #processStreamMessage(data) {\n    const streamId = data.streamId,\n      sourceName = this.sourceName,\n      targetName = data.sourceName,\n      comObj = this.comObj;\n    const streamController = this.streamControllers[streamId],\n      streamSink = this.streamSinks[streamId];\n\n    switch (data.stream) {\n      case StreamKind.START_COMPLETE:\n        if (data.success) {\n          streamController.startCall.resolve();\n        } else {\n          streamController.startCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL_COMPLETE:\n        if (data.success) {\n          streamController.pullCall.resolve();\n        } else {\n          streamController.pullCall.reject(wrapReason(data.reason));\n        }\n        break;\n      case StreamKind.PULL:\n        // Ignore any pull after close is called.\n        if (!streamSink) {\n          comObj.postMessage({\n            sourceName,\n            targetName,\n            stream: StreamKind.PULL_COMPLETE,\n            streamId,\n            success: true,\n          });\n          break;\n        }\n        // Pull increases the desiredSize property of sink, so when it changes\n        // from negative to positive, set ready property as resolved promise.\n        if (streamSink.desiredSize <= 0 && data.desiredSize > 0) {\n          streamSink.sinkCapability.resolve();\n        }\n        // Reset desiredSize property of sink on every pull.\n        streamSink.desiredSize = data.desiredSize;\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onPull?.());\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.PULL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        break;\n      case StreamKind.ENQUEUE:\n        assert(streamController, \"enqueue should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.controller.enqueue(data.chunk);\n        break;\n      case StreamKind.CLOSE:\n        assert(streamController, \"close should have stream controller\");\n        if (streamController.isClosed) {\n          break;\n        }\n        streamController.isClosed = true;\n        streamController.controller.close();\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.ERROR:\n        assert(streamController, \"error should have stream controller\");\n        streamController.controller.error(wrapReason(data.reason));\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL_COMPLETE:\n        if (data.success) {\n          streamController.cancelCall.resolve();\n        } else {\n          streamController.cancelCall.reject(wrapReason(data.reason));\n        }\n        this.#deleteStreamController(streamController, streamId);\n        break;\n      case StreamKind.CANCEL:\n        if (!streamSink) {\n          break;\n        }\n\n        new Promise(function (resolve) {\n          resolve(streamSink.onCancel?.(wrapReason(data.reason)));\n        }).then(\n          function () {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              success: true,\n            });\n          },\n          function (reason) {\n            comObj.postMessage({\n              sourceName,\n              targetName,\n              stream: StreamKind.CANCEL_COMPLETE,\n              streamId,\n              reason: wrapReason(reason),\n            });\n          }\n        );\n        streamSink.sinkCapability.reject(wrapReason(data.reason));\n        streamSink.isCancelled = true;\n        delete this.streamSinks[streamId];\n        break;\n      default:\n        throw new Error(\"Unexpected stream case\");\n    }\n  }\n\n  async #deleteStreamController(streamController, streamId) {\n    // Delete the `streamController` only when the start, pull, and cancel\n    // capabilities have settled, to prevent `TypeError`s.\n    await Promise.allSettled([\n      streamController.startCall?.promise,\n      streamController.pullCall?.promise,\n      streamController.cancelCall?.promise,\n    ]);\n    delete this.streamControllers[streamId];\n  }\n\n  destroy() {\n    this.comObj.removeEventListener(\"message\", this._onComObjOnMessage);\n  }\n}\n\nexport { MessageHandler };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap } from \"../shared/util.js\";\n\nclass Metadata {\n  #metadataMap;\n\n  #data;\n\n  constructor({ parsedData, rawData }) {\n    this.#metadataMap = parsedData;\n    this.#data = rawData;\n  }\n\n  getRaw() {\n    return this.#data;\n  }\n\n  get(name) {\n    return this.#metadataMap.get(name) ?? null;\n  }\n\n  getAll() {\n    return objectFromMap(this.#metadataMap);\n  }\n\n  has(name) {\n    return this.#metadataMap.has(name);\n  }\n}\n\nexport { Metadata };\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { objectFromMap, unreachable, warn } from \"../shared/util.js\";\nimport { MurmurHash3_64 } from \"../shared/murmurhash3.js\";\n\nconst INTERNAL = Symbol(\"INTERNAL\");\n\nclass OptionalContentGroup {\n  #visible = true;\n\n  constructor(name, intent) {\n    this.name = name;\n    this.intent = intent;\n  }\n\n  /**\n   * @type {boolean}\n   */\n  get visible() {\n    return this.#visible;\n  }\n\n  /**\n   * @ignore\n   */\n  _setVisible(internal, visible) {\n    if (internal !== INTERNAL) {\n      unreachable(\"Internal method `_setVisible` called.\");\n    }\n    this.#visible = visible;\n  }\n}\n\nclass OptionalContentConfig {\n  #cachedGetHash = null;\n\n  #groups = new Map();\n\n  #initialHash = null;\n\n  #order = null;\n\n  constructor(data) {\n    this.name = null;\n    this.creator = null;\n\n    if (data === null) {\n      return;\n    }\n    this.name = data.name;\n    this.creator = data.creator;\n    this.#order = data.order;\n    for (const group of data.groups) {\n      this.#groups.set(\n        group.id,\n        new OptionalContentGroup(group.name, group.intent)\n      );\n    }\n\n    if (data.baseState === \"OFF\") {\n      for (const group of this.#groups.values()) {\n        group._setVisible(INTERNAL, false);\n      }\n    }\n\n    for (const on of data.on) {\n      this.#groups.get(on)._setVisible(INTERNAL, true);\n    }\n\n    for (const off of data.off) {\n      this.#groups.get(off)._setVisible(INTERNAL, false);\n    }\n\n    // The following code must always run *last* in the constructor.\n    this.#initialHash = this.getHash();\n  }\n\n  #evaluateVisibilityExpression(array) {\n    const length = array.length;\n    if (length < 2) {\n      return true;\n    }\n    const operator = array[0];\n    for (let i = 1; i < length; i++) {\n      const element = array[i];\n      let state;\n      if (Array.isArray(element)) {\n        state = this.#evaluateVisibilityExpression(element);\n      } else if (this.#groups.has(element)) {\n        state = this.#groups.get(element).visible;\n      } else {\n        warn(`Optional content group not found: ${element}`);\n        return true;\n      }\n      switch (operator) {\n        case \"And\":\n          if (!state) {\n            return false;\n          }\n          break;\n        case \"Or\":\n          if (state) {\n            return true;\n          }\n          break;\n        case \"Not\":\n          return !state;\n        default:\n          return true;\n      }\n    }\n    return operator === \"And\";\n  }\n\n  isVisible(group) {\n    if (this.#groups.size === 0) {\n      return true;\n    }\n    if (!group) {\n      warn(\"Optional content group not defined.\");\n      return true;\n    }\n    if (group.type === \"OCG\") {\n      if (!this.#groups.has(group.id)) {\n        warn(`Optional content group not found: ${group.id}`);\n        return true;\n      }\n      return this.#groups.get(group.id).visible;\n    } else if (group.type === \"OCMD\") {\n      // Per the spec, the expression should be preferred if available.\n      if (group.expression) {\n        return this.#evaluateVisibilityExpression(group.expression);\n      }\n      if (!group.policy || group.policy === \"AnyOn\") {\n        // Default\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this.#groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOn\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this.#groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      } else if (group.policy === \"AnyOff\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (!this.#groups.get(id).visible) {\n            return true;\n          }\n        }\n        return false;\n      } else if (group.policy === \"AllOff\") {\n        for (const id of group.ids) {\n          if (!this.#groups.has(id)) {\n            warn(`Optional content group not found: ${id}`);\n            return true;\n          }\n          if (this.#groups.get(id).visible) {\n            return false;\n          }\n        }\n        return true;\n      }\n      warn(`Unknown optional content policy ${group.policy}.`);\n      return true;\n    }\n    warn(`Unknown group type ${group.type}.`);\n    return true;\n  }\n\n  setVisibility(id, visible = true) {\n    if (!this.#groups.has(id)) {\n      warn(`Optional content group not found: ${id}`);\n      return;\n    }\n    this.#groups.get(id)._setVisible(INTERNAL, !!visible);\n\n    this.#cachedGetHash = null;\n  }\n\n  get hasInitialVisibility() {\n    return this.#initialHash === null || this.getHash() === this.#initialHash;\n  }\n\n  getOrder() {\n    if (!this.#groups.size) {\n      return null;\n    }\n    if (this.#order) {\n      return this.#order.slice();\n    }\n    return [...this.#groups.keys()];\n  }\n\n  getGroups() {\n    return this.#groups.size > 0 ? objectFromMap(this.#groups) : null;\n  }\n\n  getGroup(id) {\n    return this.#groups.get(id) || null;\n  }\n\n  getHash() {\n    if (this.#cachedGetHash !== null) {\n      return this.#cachedGetHash;\n    }\n    const hash = new MurmurHash3_64();\n\n    for (const [id, group] of this.#groups) {\n      hash.update(`${id}:${group.visible}`);\n    }\n    return (this.#cachedGetHash = hash.hexdigest());\n  }\n}\n\nexport { OptionalContentConfig };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"../interfaces\").IPDFStream} IPDFStream */\n/** @typedef {import(\"../interfaces\").IPDFStreamReader} IPDFStreamReader */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../interfaces\").IPDFStreamRangeReader} IPDFStreamRangeReader */\n\nimport { assert, PromiseCapability } from \"../shared/util.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\n/** @implements {IPDFStream} */\nclass PDFDataTransportStream {\n  constructor(\n    {\n      length,\n      initialData,\n      progressiveDone = false,\n      contentDispositionFilename = null,\n      disableRange = false,\n      disableStream = false,\n    },\n    pdfDataRangeTransport\n  ) {\n    assert(\n      pdfDataRangeTransport,\n      'PDFDataTransportStream - missing required \"pdfDataRangeTransport\" argument.'\n    );\n\n    this._queuedChunks = [];\n    this._progressiveDone = progressiveDone;\n    this._contentDispositionFilename = contentDispositionFilename;\n\n    if (initialData?.length > 0) {\n      // Prevent any possible issues by only transferring a Uint8Array that\n      // completely \"utilizes\" its underlying ArrayBuffer.\n      const buffer =\n        initialData instanceof Uint8Array &&\n        initialData.byteLength === initialData.buffer.byteLength\n          ? initialData.buffer\n          : new Uint8Array(initialData).buffer;\n      this._queuedChunks.push(buffer);\n    }\n\n    this._pdfDataRangeTransport = pdfDataRangeTransport;\n    this._isStreamingSupported = !disableStream;\n    this._isRangeSupported = !disableRange;\n    this._contentLength = length;\n\n    this._fullRequestReader = null;\n    this._rangeReaders = [];\n\n    this._pdfDataRangeTransport.addRangeListener((begin, chunk) => {\n      this._onReceiveData({ begin, chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressListener((loaded, total) => {\n      this._onProgress({ loaded, total });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveReadListener(chunk => {\n      this._onReceiveData({ chunk });\n    });\n\n    this._pdfDataRangeTransport.addProgressiveDoneListener(() => {\n      this._onProgressiveDone();\n    });\n\n    this._pdfDataRangeTransport.transportReady();\n  }\n\n  _onReceiveData({ begin, chunk }) {\n    // Prevent any possible issues by only transferring a Uint8Array that\n    // completely \"utilizes\" its underlying ArrayBuffer.\n    const buffer =\n      chunk instanceof Uint8Array &&\n      chunk.byteLength === chunk.buffer.byteLength\n        ? chunk.buffer\n        : new Uint8Array(chunk).buffer;\n\n    if (begin === undefined) {\n      if (this._fullRequestReader) {\n        this._fullRequestReader._enqueue(buffer);\n      } else {\n        this._queuedChunks.push(buffer);\n      }\n    } else {\n      const found = this._rangeReaders.some(function (rangeReader) {\n        if (rangeReader._begin !== begin) {\n          return false;\n        }\n        rangeReader._enqueue(buffer);\n        return true;\n      });\n      assert(\n        found,\n        \"_onReceiveData - no `PDFDataTransportStreamRangeReader` instance found.\"\n      );\n    }\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  _onProgress(evt) {\n    if (evt.total === undefined) {\n      // Reporting to first range reader, if it exists.\n      this._rangeReaders[0]?.onProgress?.({ loaded: evt.loaded });\n    } else {\n      this._fullRequestReader?.onProgress?.({\n        loaded: evt.loaded,\n        total: evt.total,\n      });\n    }\n  }\n\n  _onProgressiveDone() {\n    this._fullRequestReader?.progressiveDone();\n    this._progressiveDone = true;\n  }\n\n  _removeRangeReader(reader) {\n    const i = this._rangeReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFDataTransportStream.getFullReader can only be called once.\"\n    );\n    const queuedChunks = this._queuedChunks;\n    this._queuedChunks = null;\n    return new PDFDataTransportStreamReader(\n      this,\n      queuedChunks,\n      this._progressiveDone,\n      this._contentDispositionFilename\n    );\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFDataTransportStreamRangeReader(this, begin, end);\n    this._pdfDataRangeTransport.requestDataRange(begin, end);\n    this._rangeReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n    this._pdfDataRangeTransport.abort();\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFDataTransportStreamReader {\n  constructor(\n    stream,\n    queuedChunks,\n    progressiveDone = false,\n    contentDispositionFilename = null\n  ) {\n    this._stream = stream;\n    this._done = progressiveDone || false;\n    this._filename = isPdfFile(contentDispositionFilename)\n      ? contentDispositionFilename\n      : null;\n    this._queuedChunks = queuedChunks || [];\n    this._loaded = 0;\n    for (const chunk of this._queuedChunks) {\n      this._loaded += chunk.byteLength;\n    }\n    this._requests = [];\n    this._headersReady = Promise.resolve();\n    stream._fullRequestReader = this;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // Ignore new data.\n    }\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunks.push(chunk);\n    }\n    this._loaded += chunk.byteLength;\n  }\n\n  get headersReady() {\n    return this._headersReady;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._stream._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._stream._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._stream._contentLength;\n  }\n\n  async read() {\n    if (this._queuedChunks.length > 0) {\n      const chunk = this._queuedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  progressiveDone() {\n    if (this._done) {\n      return;\n    }\n    this._done = true;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFDataTransportStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._begin = begin;\n    this._end = end;\n    this._queuedChunk = null;\n    this._requests = [];\n    this._done = false;\n\n    this.onProgress = null;\n  }\n\n  _enqueue(chunk) {\n    if (this._done) {\n      return; // ignore new data\n    }\n    if (this._requests.length === 0) {\n      this._queuedChunk = chunk;\n    } else {\n      const requestsCapability = this._requests.shift();\n      requestsCapability.resolve({ value: chunk, done: false });\n      for (const requestCapability of this._requests) {\n        requestCapability.resolve({ value: undefined, done: true });\n      }\n      this._requests.length = 0;\n    }\n    this._done = true;\n    this._stream._removeRangeReader(this);\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._queuedChunk) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._stream._removeRangeReader(this);\n  }\n}\n\nexport { PDFDataTransportStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AbortException,\n  assert,\n  PromiseCapability,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./fetch_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nfunction createFetchOptions(headers, withCredentials, abortController) {\n  return {\n    method: \"GET\",\n    headers,\n    signal: abortController.signal,\n    mode: \"cors\",\n    credentials: withCredentials ? \"include\" : \"same-origin\",\n    redirect: \"follow\",\n  };\n}\n\nfunction createHeaders(httpHeaders) {\n  const headers = new Headers();\n  for (const property in httpHeaders) {\n    const value = httpHeaders[property];\n    if (value === undefined) {\n      continue;\n    }\n    headers.append(property, value);\n  }\n  return headers;\n}\n\nfunction getArrayBuffer(val) {\n  if (val instanceof Uint8Array) {\n    return val.buffer;\n  }\n  if (val instanceof ArrayBuffer) {\n    return val;\n  }\n  warn(`getArrayBuffer - unexpected data format: ${val}`);\n  return new Uint8Array(val).buffer;\n}\n\n/** @implements {IPDFStream} */\nclass PDFFetchStream {\n  constructor(source) {\n    this.source = source;\n    this.isHttp = /^https?:/i.test(source.url);\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFFetchStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFFetchStreamReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const reader = new PDFFetchStreamRangeReader(this, begin, end);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFFetchStreamReader {\n  constructor(stream) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    this._filename = null;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._contentLength = source.length;\n    this._headersCapability = new PromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._abortController = new AbortController();\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._headers = createHeaders(this._stream.httpHeaders);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._reader = response.body.getReader();\n        this._headersCapability.resolve();\n\n        const getResponseHeader = name => {\n          return response.headers.get(name);\n        };\n        const { allowRangeRequests, suggestedLength } =\n          validateRangeRequestCapabilities({\n            getResponseHeader,\n            isHttp: this._stream.isHttp,\n            rangeChunkSize: this._rangeChunkSize,\n            disableRange: this._disableRange,\n          });\n\n        this._isRangeSupported = allowRangeRequests;\n        // Setting right content length.\n        this._contentLength = suggestedLength || this._contentLength;\n\n        this._filename = extractFilenameFromHeader(getResponseHeader);\n\n        // We need to stop reading when range is supported and streaming is\n        // disabled.\n        if (!this._isStreamingSupported && this._isRangeSupported) {\n          this.cancel(new AbortException(\"Streaming is disabled.\"));\n        }\n      })\n      .catch(this._headersCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._headersCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    this.onProgress?.({\n      loaded: this._loaded,\n      total: this._contentLength,\n    });\n\n    return { value: getArrayBuffer(value), done: false };\n  }\n\n  cancel(reason) {\n    this._reader?.cancel(reason);\n    this._abortController.abort();\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFFetchStreamRangeReader {\n  constructor(stream, begin, end) {\n    this._stream = stream;\n    this._reader = null;\n    this._loaded = 0;\n    const source = stream.source;\n    this._withCredentials = source.withCredentials || false;\n    this._readCapability = new PromiseCapability();\n    this._isStreamingSupported = !source.disableStream;\n\n    this._abortController = new AbortController();\n    this._headers = createHeaders(this._stream.httpHeaders);\n    this._headers.append(\"Range\", `bytes=${begin}-${end - 1}`);\n\n    const url = source.url;\n    fetch(\n      url,\n      createFetchOptions(\n        this._headers,\n        this._withCredentials,\n        this._abortController\n      )\n    )\n      .then(response => {\n        if (!validateResponseStatus(response.status)) {\n          throw createResponseStatusError(response.status, url);\n        }\n        this._readCapability.resolve();\n        this._reader = response.body.getReader();\n      })\n      .catch(this._readCapability.reject);\n\n    this.onProgress = null;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    const { value, done } = await this._reader.read();\n    if (done) {\n      return { value, done };\n    }\n    this._loaded += value.byteLength;\n    this.onProgress?.({ loaded: this._loaded });\n\n    return { value: getArrayBuffer(value), done: false };\n  }\n\n  cancel(reason) {\n    this._reader?.cancel(reason);\n    this._abortController.abort();\n  }\n}\n\nexport { PDFFetchStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  assert,\n  MissingPDFException,\n  UnexpectedResponseException,\n} from \"../shared/util.js\";\nimport { getFilenameFromContentDispositionHeader } from \"./content_disposition.js\";\nimport { isPdfFile } from \"./display_utils.js\";\n\nfunction validateRangeRequestCapabilities({\n  getResponseHeader,\n  isHttp,\n  rangeChunkSize,\n  disableRange,\n}) {\n  if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n    assert(\n      Number.isInteger(rangeChunkSize) && rangeChunkSize > 0,\n      \"rangeChunkSize must be an integer larger than zero.\"\n    );\n  }\n  const returnValues = {\n    allowRangeRequests: false,\n    suggestedLength: undefined,\n  };\n\n  const length = parseInt(getResponseHeader(\"Content-Length\"), 10);\n  if (!Number.isInteger(length)) {\n    return returnValues;\n  }\n\n  returnValues.suggestedLength = length;\n\n  if (length <= 2 * rangeChunkSize) {\n    // The file size is smaller than the size of two chunks, so it does not\n    // make any sense to abort the request and retry with a range request.\n    return returnValues;\n  }\n\n  if (disableRange || !isHttp) {\n    return returnValues;\n  }\n  if (getResponseHeader(\"Accept-Ranges\") !== \"bytes\") {\n    return returnValues;\n  }\n\n  const contentEncoding = getResponseHeader(\"Content-Encoding\") || \"identity\";\n  if (contentEncoding !== \"identity\") {\n    return returnValues;\n  }\n\n  returnValues.allowRangeRequests = true;\n  return returnValues;\n}\n\nfunction extractFilenameFromHeader(getResponseHeader) {\n  const contentDisposition = getResponseHeader(\"Content-Disposition\");\n  if (contentDisposition) {\n    let filename = getFilenameFromContentDispositionHeader(contentDisposition);\n    if (filename.includes(\"%\")) {\n      try {\n        filename = decodeURIComponent(filename);\n      } catch {}\n    }\n    if (isPdfFile(filename)) {\n      return filename;\n    }\n  }\n  return null;\n}\n\nfunction createResponseStatusError(status, url) {\n  if (status === 404 || (status === 0 && url.startsWith(\"file:\"))) {\n    return new MissingPDFException('Missing PDF \"' + url + '\".');\n  }\n  return new UnexpectedResponseException(\n    `Unexpected server response (${status}) while retrieving PDF \"${url}\".`,\n    status\n  );\n}\n\nfunction validateResponseStatus(status) {\n  return status === 200 || status === 206;\n}\n\nexport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n  validateResponseStatus,\n};\n", "/* Copyright 2017 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { stringToBytes } from \"../shared/util.js\";\n\n// This getFilenameFromContentDispositionHeader function is adapted from\n// https://github.com/Rob--W/open-in-browser/blob/7e2e35a38b8b4e981b11da7b2f01df0149049e92/extension/content-disposition.js\n// with the following changes:\n// - Modified to conform to PDF.js's coding style.\n// - Move return to the end of the function to prevent Babel from dropping the\n//   function declarations.\n\n/**\n * Extract file name from the Content-Disposition HTTP response header.\n *\n * @param {string} contentDisposition\n * @returns {string} Filename, if found in the Content-Disposition header.\n */\nfunction getFilenameFromContentDispositionHeader(contentDisposition) {\n  let needsEncodingFixup = true;\n\n  // filename*=ext-value (\"ext-value\" from RFC 5987, referenced by RFC 6266).\n  let tmp = toParamRegExp(\"filename\\\\*\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = unescape(filename);\n    filename = rfc5987decode(filename);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // Continuations (RFC 2231 section 3, referenced by RFC 5987 section 3.1).\n  // filename*n*=part\n  // filename*n=part\n  tmp = rfc2231getparam(contentDisposition);\n  if (tmp) {\n    // RFC 2047, section\n    const filename = rfc2047decode(tmp);\n    return fixupEncoding(filename);\n  }\n\n  // filename=value (RFC 5987, section 4.1).\n  tmp = toParamRegExp(\"filename\", \"i\").exec(contentDisposition);\n  if (tmp) {\n    tmp = tmp[1];\n    let filename = rfc2616unquote(tmp);\n    filename = rfc2047decode(filename);\n    return fixupEncoding(filename);\n  }\n\n  // After this line there are only function declarations. We cannot put\n  // \"return\" here for readability because babel would then drop the function\n  // declarations...\n  function toParamRegExp(attributePattern, flags) {\n    return new RegExp(\n      \"(?:^|;)\\\\s*\" +\n        attributePattern +\n        \"\\\\s*=\\\\s*\" +\n        // Captures: value = token | quoted-string\n        // (RFC 2616, section 3.6 and referenced by RFC 6266 4.1)\n        \"(\" +\n        '[^\";\\\\s][^;\\\\s]*' +\n        \"|\" +\n        '\"(?:[^\"\\\\\\\\]|\\\\\\\\\"?)+\"?' +\n        \")\",\n      flags\n    );\n  }\n  function textdecode(encoding, value) {\n    if (encoding) {\n      if (!/^[\\x00-\\xFF]+$/.test(value)) {\n        return value;\n      }\n      try {\n        const decoder = new TextDecoder(encoding, { fatal: true });\n        const buffer = stringToBytes(value);\n        value = decoder.decode(buffer);\n        needsEncodingFixup = false;\n      } catch {\n        // TextDecoder constructor threw - unrecognized encoding.\n      }\n    }\n    return value;\n  }\n  function fixupEncoding(value) {\n    if (needsEncodingFixup && /[\\x80-\\xff]/.test(value)) {\n      // Maybe multi-byte UTF-8.\n      value = textdecode(\"utf-8\", value);\n      if (needsEncodingFixup) {\n        // Try iso-8859-1 encoding.\n        value = textdecode(\"iso-8859-1\", value);\n      }\n    }\n    return value;\n  }\n  function rfc2231getparam(contentDispositionStr) {\n    const matches = [];\n    let match;\n    // Iterate over all filename*n= and filename*n*= with n being an integer\n    // of at least zero. Any non-zero number must not start with '0'.\n    const iter = toParamRegExp(\"filename\\\\*((?!0\\\\d)\\\\d+)(\\\\*?)\", \"ig\");\n    while ((match = iter.exec(contentDispositionStr)) !== null) {\n      let [, n, quot, part] = match; // eslint-disable-line prefer-const\n      n = parseInt(n, 10);\n      if (n in matches) {\n        // Ignore anything after the invalid second filename*0.\n        if (n === 0) {\n          break;\n        }\n        continue;\n      }\n      matches[n] = [quot, part];\n    }\n    const parts = [];\n    for (let n = 0; n < matches.length; ++n) {\n      if (!(n in matches)) {\n        // Numbers must be consecutive. Truncate when there is a hole.\n        break;\n      }\n      let [quot, part] = matches[n]; // eslint-disable-line prefer-const\n      part = rfc2616unquote(part);\n      if (quot) {\n        part = unescape(part);\n        if (n === 0) {\n          part = rfc5987decode(part);\n        }\n      }\n      parts.push(part);\n    }\n    return parts.join(\"\");\n  }\n  function rfc2616unquote(value) {\n    if (value.startsWith('\"')) {\n      const parts = value.slice(1).split('\\\\\"');\n      // Find the first unescaped \" and terminate there.\n      for (let i = 0; i < parts.length; ++i) {\n        const quotindex = parts[i].indexOf('\"');\n        if (quotindex !== -1) {\n          parts[i] = parts[i].slice(0, quotindex);\n          parts.length = i + 1; // Truncates and stop the iteration.\n        }\n        parts[i] = parts[i].replaceAll(/\\\\(.)/g, \"$1\");\n      }\n      value = parts.join('\"');\n    }\n    return value;\n  }\n  function rfc5987decode(extvalue) {\n    // Decodes \"ext-value\" from RFC 5987.\n    const encodingend = extvalue.indexOf(\"'\");\n    if (encodingend === -1) {\n      // Some servers send \"filename*=\" without encoding 'language' prefix,\n      // e.g. in https://github.com/Rob--W/open-in-browser/issues/26\n      // Let's accept the value like Firefox (57) (Chrome 62 rejects it).\n      return extvalue;\n    }\n    const encoding = extvalue.slice(0, encodingend);\n    const langvalue = extvalue.slice(encodingend + 1);\n    // Ignore language (RFC 5987 section 3.2.1, and RFC 6266 section 4.1 ).\n    const value = langvalue.replace(/^[^']*'/, \"\");\n    return textdecode(encoding, value);\n  }\n  function rfc2047decode(value) {\n    // RFC 2047-decode the result. Firefox tried to drop support for it, but\n    // backed out because some servers use it - https://bugzil.la/875615\n    // Firefox's condition for decoding is here: https://searchfox.org/mozilla-central/rev/4a590a5a15e35d88a3b23dd6ac3c471cf85b04a8/netwerk/mime/nsMIMEHeaderParamImpl.cpp#742-748\n\n    // We are more strict and only recognize RFC 2047-encoding if the value\n    // starts with \"=?\", since then it is likely that the full value is\n    // RFC 2047-encoded.\n\n    // Firefox also decodes words even where RFC 2047 section 5 states:\n    // \"An 'encoded-word' MUST NOT appear within a 'quoted-string'.\"\n    if (!value.startsWith(\"=?\") || /[\\x00-\\x19\\x80-\\xff]/.test(value)) {\n      return value;\n    }\n    // RFC 2047, section 2.4\n    // encoded-word = \"=?\" charset \"?\" encoding \"?\" encoded-text \"?=\"\n    // charset = token (but let's restrict to characters that denote a\n    //       possibly valid encoding).\n    // encoding = q or b\n    // encoded-text = any printable ASCII character other than ? or space.\n    //        ... but Firefox permits ? and space.\n    return value.replaceAll(\n      /=\\?([\\w-]*)\\?([QqBb])\\?((?:[^?]|\\?(?!=))*)\\?=/g,\n      function (matches, charset, encoding, text) {\n        if (encoding === \"q\" || encoding === \"Q\") {\n          // RFC 2047 section 4.2.\n          text = text.replaceAll(\"_\", \" \");\n          text = text.replaceAll(/=([0-9a-fA-F]{2})/g, function (match, hex) {\n            return String.fromCharCode(parseInt(hex, 16));\n          });\n          return textdecode(charset, text);\n        } // else encoding is b or B - base64 (RFC 2047 section 4.1)\n        try {\n          text = atob(text);\n        } catch {}\n        return textdecode(charset, text);\n      }\n    );\n  }\n\n  return \"\";\n}\n\nexport { getFilenameFromContentDispositionHeader };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { assert, PromiseCapability, stringToBytes } from \"../shared/util.js\";\nimport {\n  createResponseStatusError,\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./network.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst OK_RESPONSE = 200;\nconst PARTIAL_CONTENT_RESPONSE = 206;\n\nfunction getArrayBuffer(xhr) {\n  const data = xhr.response;\n  if (typeof data !== \"string\") {\n    return data;\n  }\n  return stringToBytes(data).buffer;\n}\n\nclass NetworkManager {\n  constructor(url, args = {}) {\n    this.url = url;\n    this.isHttp = /^https?:/i.test(url);\n    this.httpHeaders = (this.isHttp && args.httpHeaders) || Object.create(null);\n    this.withCredentials = args.withCredentials || false;\n\n    this.currXhrId = 0;\n    this.pendingRequests = Object.create(null);\n  }\n\n  requestRange(begin, end, listeners) {\n    const args = {\n      begin,\n      end,\n    };\n    for (const prop in listeners) {\n      args[prop] = listeners[prop];\n    }\n    return this.request(args);\n  }\n\n  requestFull(listeners) {\n    return this.request(listeners);\n  }\n\n  request(args) {\n    const xhr = new XMLHttpRequest();\n    const xhrId = this.currXhrId++;\n    const pendingRequest = (this.pendingRequests[xhrId] = { xhr });\n\n    xhr.open(\"GET\", this.url);\n    xhr.withCredentials = this.withCredentials;\n    for (const property in this.httpHeaders) {\n      const value = this.httpHeaders[property];\n      if (value === undefined) {\n        continue;\n      }\n      xhr.setRequestHeader(property, value);\n    }\n    if (this.isHttp && \"begin\" in args && \"end\" in args) {\n      xhr.setRequestHeader(\"Range\", `bytes=${args.begin}-${args.end - 1}`);\n      pendingRequest.expectedStatus = PARTIAL_CONTENT_RESPONSE;\n    } else {\n      pendingRequest.expectedStatus = OK_RESPONSE;\n    }\n    xhr.responseType = \"arraybuffer\";\n\n    if (args.onError) {\n      xhr.onerror = function (evt) {\n        args.onError(xhr.status);\n      };\n    }\n    xhr.onreadystatechange = this.onStateChange.bind(this, xhrId);\n    xhr.onprogress = this.onProgress.bind(this, xhrId);\n\n    pendingRequest.onHeadersReceived = args.onHeadersReceived;\n    pendingRequest.onDone = args.onDone;\n    pendingRequest.onError = args.onError;\n    pendingRequest.onProgress = args.onProgress;\n\n    xhr.send(null);\n\n    return xhrId;\n  }\n\n  onProgress(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n    pendingRequest.onProgress?.(evt);\n  }\n\n  onStateChange(xhrId, evt) {\n    const pendingRequest = this.pendingRequests[xhrId];\n    if (!pendingRequest) {\n      return; // Maybe abortRequest was called...\n    }\n\n    const xhr = pendingRequest.xhr;\n    if (xhr.readyState >= 2 && pendingRequest.onHeadersReceived) {\n      pendingRequest.onHeadersReceived();\n      delete pendingRequest.onHeadersReceived;\n    }\n\n    if (xhr.readyState !== 4) {\n      return;\n    }\n\n    if (!(xhrId in this.pendingRequests)) {\n      // The XHR request might have been aborted in onHeadersReceived()\n      // callback, in which case we should abort request.\n      return;\n    }\n\n    delete this.pendingRequests[xhrId];\n\n    // Success status == 0 can be on ftp, file and other protocols.\n    if (xhr.status === 0 && this.isHttp) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n    const xhrStatus = xhr.status || OK_RESPONSE;\n\n    // From http://www.w3.org/Protocols/rfc2616/rfc2616-sec14.html#sec14.35.2:\n    // \"A server MAY ignore the Range header\". This means it's possible to\n    // get a 200 rather than a 206 response from a range request.\n    const ok_response_on_range_request =\n      xhrStatus === OK_RESPONSE &&\n      pendingRequest.expectedStatus === PARTIAL_CONTENT_RESPONSE;\n\n    if (\n      !ok_response_on_range_request &&\n      xhrStatus !== pendingRequest.expectedStatus\n    ) {\n      pendingRequest.onError?.(xhr.status);\n      return;\n    }\n\n    const chunk = getArrayBuffer(xhr);\n    if (xhrStatus === PARTIAL_CONTENT_RESPONSE) {\n      const rangeHeader = xhr.getResponseHeader(\"Content-Range\");\n      const matches = /bytes (\\d+)-(\\d+)\\/(\\d+)/.exec(rangeHeader);\n      pendingRequest.onDone({\n        begin: parseInt(matches[1], 10),\n        chunk,\n      });\n    } else if (chunk) {\n      pendingRequest.onDone({\n        begin: 0,\n        chunk,\n      });\n    } else {\n      pendingRequest.onError?.(xhr.status);\n    }\n  }\n\n  getRequestXhr(xhrId) {\n    return this.pendingRequests[xhrId].xhr;\n  }\n\n  isPendingRequest(xhrId) {\n    return xhrId in this.pendingRequests;\n  }\n\n  abortRequest(xhrId) {\n    const xhr = this.pendingRequests[xhrId].xhr;\n    delete this.pendingRequests[xhrId];\n    xhr.abort();\n  }\n}\n\n/** @implements {IPDFStream} */\nclass PDFNetworkStream {\n  constructor(source) {\n    this._source = source;\n    this._manager = new NetworkManager(source.url, {\n      httpHeaders: source.httpHeaders,\n      withCredentials: source.withCredentials,\n    });\n    this._rangeChunkSize = source.rangeChunkSize;\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  _onRangeRequestReaderClosed(reader) {\n    const i = this._rangeRequestReaders.indexOf(reader);\n    if (i >= 0) {\n      this._rangeRequestReaders.splice(i, 1);\n    }\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNetworkStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = new PDFNetworkStreamFullRequestReader(\n      this._manager,\n      this._source\n    );\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(begin, end) {\n    const reader = new PDFNetworkStreamRangeRequestReader(\n      this._manager,\n      begin,\n      end\n    );\n    reader.onClosed = this._onRangeRequestReaderClosed.bind(this);\n    this._rangeRequestReaders.push(reader);\n    return reader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\n/** @implements {IPDFStreamReader} */\nclass PDFNetworkStreamFullRequestReader {\n  constructor(manager, source) {\n    this._manager = manager;\n\n    const args = {\n      onHeadersReceived: this._onHeadersReceived.bind(this),\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = source.url;\n    this._fullRequestId = manager.requestFull(args);\n    this._headersReceivedCapability = new PromiseCapability();\n    this._disableRange = source.disableRange || false;\n    this._contentLength = source.length; // Optional\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = false;\n    this._isRangeSupported = false;\n\n    this._cachedChunks = [];\n    this._requests = [];\n    this._done = false;\n    this._storedError = undefined;\n    this._filename = null;\n\n    this.onProgress = null;\n  }\n\n  _onHeadersReceived() {\n    const fullRequestXhrId = this._fullRequestId;\n    const fullRequestXhr = this._manager.getRequestXhr(fullRequestXhrId);\n\n    const getResponseHeader = name => {\n      return fullRequestXhr.getResponseHeader(name);\n    };\n    const { allowRangeRequests, suggestedLength } =\n      validateRangeRequestCapabilities({\n        getResponseHeader,\n        isHttp: this._manager.isHttp,\n        rangeChunkSize: this._rangeChunkSize,\n        disableRange: this._disableRange,\n      });\n\n    if (allowRangeRequests) {\n      this._isRangeSupported = true;\n    }\n    // Setting right content length.\n    this._contentLength = suggestedLength || this._contentLength;\n\n    this._filename = extractFilenameFromHeader(getResponseHeader);\n\n    if (this._isRangeSupported) {\n      // NOTE: by cancelling the full request, and then issuing range\n      // requests, there will be an issue for sites where you can only\n      // request the pdf once. However, if this is the case, then the\n      // server should not be returning that it can support range requests.\n      this._manager.abortRequest(fullRequestXhrId);\n    }\n\n    this._headersReceivedCapability.resolve();\n  }\n\n  _onDone(data) {\n    if (data) {\n      if (this._requests.length > 0) {\n        const requestCapability = this._requests.shift();\n        requestCapability.resolve({ value: data.chunk, done: false });\n      } else {\n        this._cachedChunks.push(data.chunk);\n      }\n    }\n    this._done = true;\n    if (this._cachedChunks.length > 0) {\n      return;\n    }\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    this._headersReceivedCapability.reject(this._storedError);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._cachedChunks.length = 0;\n  }\n\n  _onProgress(evt) {\n    this.onProgress?.({\n      loaded: evt.loaded,\n      total: evt.lengthComputable ? evt.total : this._contentLength,\n    });\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get headersReady() {\n    return this._headersReceivedCapability.promise;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._cachedChunks.length > 0) {\n      const chunk = this._cachedChunks.shift();\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    this._headersReceivedCapability.reject(reason);\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._fullRequestId)) {\n      this._manager.abortRequest(this._fullRequestId);\n    }\n    this._fullRequestReader = null;\n  }\n}\n\n/** @implements {IPDFStreamRangeReader} */\nclass PDFNetworkStreamRangeRequestReader {\n  constructor(manager, begin, end) {\n    this._manager = manager;\n\n    const args = {\n      onDone: this._onDone.bind(this),\n      onError: this._onError.bind(this),\n      onProgress: this._onProgress.bind(this),\n    };\n    this._url = manager.url;\n    this._requestId = manager.requestRange(begin, end, args);\n    this._requests = [];\n    this._queuedChunk = null;\n    this._done = false;\n    this._storedError = undefined;\n\n    this.onProgress = null;\n    this.onClosed = null;\n  }\n\n  _close() {\n    this.onClosed?.(this);\n  }\n\n  _onDone(data) {\n    const chunk = data.chunk;\n    if (this._requests.length > 0) {\n      const requestCapability = this._requests.shift();\n      requestCapability.resolve({ value: chunk, done: false });\n    } else {\n      this._queuedChunk = chunk;\n    }\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    this._close();\n  }\n\n  _onError(status) {\n    this._storedError = createResponseStatusError(status, this._url);\n    for (const requestCapability of this._requests) {\n      requestCapability.reject(this._storedError);\n    }\n    this._requests.length = 0;\n    this._queuedChunk = null;\n  }\n\n  _onProgress(evt) {\n    if (!this.isStreamingSupported) {\n      this.onProgress?.({ loaded: evt.loaded });\n    }\n  }\n\n  get isStreamingSupported() {\n    return false;\n  }\n\n  async read() {\n    if (this._storedError) {\n      throw this._storedError;\n    }\n    if (this._queuedChunk !== null) {\n      const chunk = this._queuedChunk;\n      this._queuedChunk = null;\n      return { value: chunk, done: false };\n    }\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    const requestCapability = new PromiseCapability();\n    this._requests.push(requestCapability);\n    return requestCapability.promise;\n  }\n\n  cancel(reason) {\n    this._done = true;\n    for (const requestCapability of this._requests) {\n      requestCapability.resolve({ value: undefined, done: true });\n    }\n    this._requests.length = 0;\n    if (this._manager.isPendingRequest(this._requestId)) {\n      this._manager.abortRequest(this._requestId);\n    }\n    this._close();\n  }\n}\n\nexport { PDFNetworkStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport {\n  AbortException,\n  assert,\n  MissingPDFException,\n  PromiseCapability,\n} from \"../shared/util.js\";\nimport {\n  extractFilenameFromHeader,\n  validateRangeRequestCapabilities,\n} from \"./network_utils.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n  throw new Error(\n    'Module \"./node_stream.js\" shall not be used with MOZCENTRAL builds.'\n  );\n}\n\nconst fileUriRegex = /^file:\\/\\/\\/[a-zA-Z]:\\//;\n\nfunction parseUrl(sourceUrl) {\n  const url = __non_webpack_require__(\"url\");\n  const parsedUrl = url.parse(sourceUrl);\n  if (parsedUrl.protocol === \"file:\" || parsedUrl.host) {\n    return parsedUrl;\n  }\n  // Prepending 'file:///' to Windows absolute path.\n  if (/^[a-z]:[/\\\\]/i.test(sourceUrl)) {\n    return url.parse(`file:///${sourceUrl}`);\n  }\n  // Changes protocol to 'file:' if url refers to filesystem.\n  if (!parsedUrl.host) {\n    parsedUrl.protocol = \"file:\";\n  }\n  return parsedUrl;\n}\n\nclass PDFNodeStream {\n  constructor(source) {\n    this.source = source;\n    this.url = parseUrl(source.url);\n    this.isHttp =\n      this.url.protocol === \"http:\" || this.url.protocol === \"https:\";\n    // Check if url refers to filesystem.\n    this.isFsUrl = this.url.protocol === \"file:\";\n    this.httpHeaders = (this.isHttp && source.httpHeaders) || {};\n\n    this._fullRequestReader = null;\n    this._rangeRequestReaders = [];\n  }\n\n  get _progressiveDataLength() {\n    return this._fullRequestReader?._loaded ?? 0;\n  }\n\n  getFullReader() {\n    assert(\n      !this._fullRequestReader,\n      \"PDFNodeStream.getFullReader can only be called once.\"\n    );\n    this._fullRequestReader = this.isFsUrl\n      ? new PDFNodeStreamFsFullReader(this)\n      : new PDFNodeStreamFullReader(this);\n    return this._fullRequestReader;\n  }\n\n  getRangeReader(start, end) {\n    if (end <= this._progressiveDataLength) {\n      return null;\n    }\n    const rangeReader = this.isFsUrl\n      ? new PDFNodeStreamFsRangeReader(this, start, end)\n      : new PDFNodeStreamRangeReader(this, start, end);\n    this._rangeRequestReaders.push(rangeReader);\n    return rangeReader;\n  }\n\n  cancelAllRequests(reason) {\n    this._fullRequestReader?.cancel(reason);\n\n    for (const reader of this._rangeRequestReaders.slice(0)) {\n      reader.cancel(reason);\n    }\n  }\n}\n\nclass BaseFullReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    const source = stream.source;\n    this._contentLength = source.length; // optional\n    this._loaded = 0;\n    this._filename = null;\n\n    this._disableRange = source.disableRange || false;\n    this._rangeChunkSize = source.rangeChunkSize;\n    if (!this._rangeChunkSize && !this._disableRange) {\n      this._disableRange = true;\n    }\n\n    this._isStreamingSupported = !source.disableStream;\n    this._isRangeSupported = !source.disableRange;\n\n    this._readableStream = null;\n    this._readCapability = new PromiseCapability();\n    this._headersCapability = new PromiseCapability();\n  }\n\n  get headersReady() {\n    return this._headersCapability.promise;\n  }\n\n  get filename() {\n    return this._filename;\n  }\n\n  get contentLength() {\n    return this._contentLength;\n  }\n\n  get isRangeSupported() {\n    return this._isRangeSupported;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = new PromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    this.onProgress?.({\n      loaded: this._loaded,\n      total: this._contentLength,\n    });\n\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readable to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // We need to stop reading when range is supported and streaming is\n    // disabled.\n    if (!this._isStreamingSupported && this._isRangeSupported) {\n      this._error(new AbortException(\"streaming is disabled\"));\n    }\n\n    // Destroy ReadableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nclass BaseRangeReader {\n  constructor(stream) {\n    this._url = stream.url;\n    this._done = false;\n    this._storedError = null;\n    this.onProgress = null;\n    this._loaded = 0;\n    this._readableStream = null;\n    this._readCapability = new PromiseCapability();\n    const source = stream.source;\n    this._isStreamingSupported = !source.disableStream;\n  }\n\n  get isStreamingSupported() {\n    return this._isStreamingSupported;\n  }\n\n  async read() {\n    await this._readCapability.promise;\n    if (this._done) {\n      return { value: undefined, done: true };\n    }\n    if (this._storedError) {\n      throw this._storedError;\n    }\n\n    const chunk = this._readableStream.read();\n    if (chunk === null) {\n      this._readCapability = new PromiseCapability();\n      return this.read();\n    }\n    this._loaded += chunk.length;\n    this.onProgress?.({ loaded: this._loaded });\n\n    // Ensure that `read()` method returns ArrayBuffer.\n    const buffer = new Uint8Array(chunk).buffer;\n    return { value: buffer, done: false };\n  }\n\n  cancel(reason) {\n    // Call `this._error()` method when cancel is called\n    // before _readableStream is set.\n    if (!this._readableStream) {\n      this._error(reason);\n      return;\n    }\n    this._readableStream.destroy(reason);\n  }\n\n  _error(reason) {\n    this._storedError = reason;\n    this._readCapability.resolve();\n  }\n\n  _setReadableStream(readableStream) {\n    this._readableStream = readableStream;\n    readableStream.on(\"readable\", () => {\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"end\", () => {\n      // Destroy readableStream to minimize resource usage.\n      readableStream.destroy();\n      this._done = true;\n      this._readCapability.resolve();\n    });\n\n    readableStream.on(\"error\", reason => {\n      this._error(reason);\n    });\n\n    // Destroy readableStream if already in errored state.\n    if (this._storedError) {\n      this._readableStream.destroy(this._storedError);\n    }\n  }\n}\n\nfunction createRequestOptions(parsedUrl, headers) {\n  return {\n    protocol: parsedUrl.protocol,\n    auth: parsedUrl.auth,\n    host: parsedUrl.hostname,\n    port: parsedUrl.port,\n    path: parsedUrl.path,\n    method: \"GET\",\n    headers,\n  };\n}\n\nclass PDFNodeStreamFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      this._headersCapability.resolve();\n      this._setReadableStream(response);\n\n      const getResponseHeader = name => {\n        // Make sure that headers name are in lower case, as mentioned\n        // here: https://nodejs.org/api/http.html#http_message_headers.\n        return this._readableStream.headers[name.toLowerCase()];\n      };\n      const { allowRangeRequests, suggestedLength } =\n        validateRangeRequestCapabilities({\n          getResponseHeader,\n          isHttp: stream.isHttp,\n          rangeChunkSize: this._rangeChunkSize,\n          disableRange: this._disableRange,\n        });\n\n      this._isRangeSupported = allowRangeRequests;\n      // Setting right content length.\n      this._contentLength = suggestedLength || this._contentLength;\n\n      this._filename = extractFilenameFromHeader(getResponseHeader);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      const http = __non_webpack_require__(\"http\");\n      this._request = http.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    } else {\n      const https = __non_webpack_require__(\"https\");\n      this._request = https.request(\n        createRequestOptions(this._url, stream.httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n      this._headersCapability.reject(reason);\n    });\n    // Note: `request.end(data)` is used to write `data` to request body\n    // and notify end of request. But one should always call `request.end()`\n    // even if there is no data to write -- (to notify the end of request).\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    this._httpHeaders = {};\n    for (const property in stream.httpHeaders) {\n      const value = stream.httpHeaders[property];\n      if (value === undefined) {\n        continue;\n      }\n      this._httpHeaders[property] = value;\n    }\n    this._httpHeaders.Range = `bytes=${start}-${end - 1}`;\n\n    const handleResponse = response => {\n      if (response.statusCode === 404) {\n        const error = new MissingPDFException(`Missing PDF \"${this._url}\".`);\n        this._storedError = error;\n        return;\n      }\n      this._setReadableStream(response);\n    };\n\n    this._request = null;\n    if (this._url.protocol === \"http:\") {\n      const http = __non_webpack_require__(\"http\");\n      this._request = http.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    } else {\n      const https = __non_webpack_require__(\"https\");\n      this._request = https.request(\n        createRequestOptions(this._url, this._httpHeaders),\n        handleResponse\n      );\n    }\n\n    this._request.on(\"error\", reason => {\n      this._storedError = reason;\n    });\n    this._request.end();\n  }\n}\n\nclass PDFNodeStreamFsFullReader extends BaseFullReader {\n  constructor(stream) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    const fs = __non_webpack_require__(\"fs\");\n    fs.lstat(path, (error, stat) => {\n      if (error) {\n        if (error.code === \"ENOENT\") {\n          error = new MissingPDFException(`Missing PDF \"${path}\".`);\n        }\n        this._storedError = error;\n        this._headersCapability.reject(error);\n        return;\n      }\n      // Setting right content length.\n      this._contentLength = stat.size;\n\n      this._setReadableStream(fs.createReadStream(path));\n      this._headersCapability.resolve();\n    });\n  }\n}\n\nclass PDFNodeStreamFsRangeReader extends BaseRangeReader {\n  constructor(stream, start, end) {\n    super(stream);\n\n    let path = decodeURIComponent(this._url.path);\n\n    // Remove the extra slash to get right path from url like `file:///C:/`\n    if (fileUriRegex.test(this._url.href)) {\n      path = path.replace(/^\\//, \"\");\n    }\n\n    const fs = __non_webpack_require__(\"fs\");\n    this._setReadableStream(fs.createReadStream(path, { start, end: end - 1 }));\n  }\n}\n\nexport { PDFNodeStream };\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n/* globals __non_webpack_require__ */\n\nimport { deprecated, DOMSVGFactory } from \"./display_utils.js\";\nimport {\n  FONT_IDENTITY_MATRIX,\n  IDENTITY_MATRIX,\n  ImageKind,\n  isNodeJS,\n  OPS,\n  TextRenderingMode,\n  Util,\n  warn,\n} from \"../shared/util.js\";\n\nif (typeof PDFJSDev !== \"undefined\" && !PDFJSDev.test(\"GENERIC\")) {\n  throw new Error(\n    'Module \"SVGGraphics\" shall not be used outside GENERIC builds.'\n  );\n}\n\nconst SVG_DEFAULTS = {\n  fontStyle: \"normal\",\n  fontWeight: \"normal\",\n  fillColor: \"#000000\",\n};\nconst XML_NS = \"http://www.w3.org/XML/1998/namespace\";\nconst XLINK_NS = \"http://www.w3.org/1999/xlink\";\nconst LINE_CAP_STYLES = [\"butt\", \"round\", \"square\"];\nconst LINE_JOIN_STYLES = [\"miter\", \"round\", \"bevel\"];\n\nconst createObjectURL = function (\n  data,\n  contentType = \"\",\n  forceDataSchema = false\n) {\n  if (URL.createObjectURL && typeof Blob !== \"undefined\" && !forceDataSchema) {\n    return URL.createObjectURL(new Blob([data], { type: contentType }));\n  }\n  // Blob/createObjectURL is not available, falling back to data schema.\n  const digits =\n    \"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=\";\n\n  let buffer = `data:${contentType};base64,`;\n  for (let i = 0, ii = data.length; i < ii; i += 3) {\n    const b1 = data[i] & 0xff;\n    const b2 = data[i + 1] & 0xff;\n    const b3 = data[i + 2] & 0xff;\n    const d1 = b1 >> 2,\n      d2 = ((b1 & 3) << 4) | (b2 >> 4);\n    const d3 = i + 1 < ii ? ((b2 & 0xf) << 2) | (b3 >> 6) : 64;\n    const d4 = i + 2 < ii ? b3 & 0x3f : 64;\n    buffer += digits[d1] + digits[d2] + digits[d3] + digits[d4];\n  }\n  return buffer;\n};\n\nconst convertImgDataToPng = (function () {\n  const PNG_HEADER = new Uint8Array([\n    0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a,\n  ]);\n  const CHUNK_WRAPPER_SIZE = 12;\n\n  const crcTable = new Int32Array(256);\n  for (let i = 0; i < 256; i++) {\n    let c = i;\n    for (let h = 0; h < 8; h++) {\n      c = c & 1 ? 0xedb88320 ^ ((c >> 1) & 0x7fffffff) : (c >> 1) & 0x7fffffff;\n    }\n    crcTable[i] = c;\n  }\n\n  function crc32(data, start, end) {\n    let crc = -1;\n    for (let i = start; i < end; i++) {\n      const a = (crc ^ data[i]) & 0xff;\n      const b = crcTable[a];\n      crc = (crc >>> 8) ^ b;\n    }\n    return crc ^ -1;\n  }\n\n  function writePngChunk(type, body, data, offset) {\n    let p = offset;\n    const len = body.length;\n\n    data[p] = (len >> 24) & 0xff;\n    data[p + 1] = (len >> 16) & 0xff;\n    data[p + 2] = (len >> 8) & 0xff;\n    data[p + 3] = len & 0xff;\n    p += 4;\n\n    data[p] = type.charCodeAt(0) & 0xff;\n    data[p + 1] = type.charCodeAt(1) & 0xff;\n    data[p + 2] = type.charCodeAt(2) & 0xff;\n    data[p + 3] = type.charCodeAt(3) & 0xff;\n    p += 4;\n\n    data.set(body, p);\n    p += body.length;\n\n    const crc = crc32(data, offset + 4, p);\n    data[p] = (crc >> 24) & 0xff;\n    data[p + 1] = (crc >> 16) & 0xff;\n    data[p + 2] = (crc >> 8) & 0xff;\n    data[p + 3] = crc & 0xff;\n  }\n\n  function adler32(data, start, end) {\n    let a = 1;\n    let b = 0;\n    for (let i = start; i < end; ++i) {\n      a = (a + (data[i] & 0xff)) % 65521;\n      b = (b + a) % 65521;\n    }\n    return (b << 16) | a;\n  }\n\n  /**\n   * @param {Uint8Array} literals The input data.\n   * @returns {Uint8Array} The DEFLATE-compressed data stream in zlib format.\n   *   This is the required format for compressed streams in the PNG format:\n   *   http://www.libpng.org/pub/png/spec/1.2/PNG-Compression.html\n   */\n  function deflateSync(literals) {\n    if (!isNodeJS) {\n      // zlib is certainly not available outside of Node.js. We can either use\n      // the pako library for client-side DEFLATE compression, or use the\n      // canvas API of the browser to obtain a more optimal PNG file.\n      return deflateSyncUncompressed(literals);\n    }\n    try {\n      // NOTE: This implementation is far from perfect, but already way better\n      // than not applying any compression.\n      //\n      // A better algorithm will try to choose a good predictor/filter and\n      // then choose a suitable zlib compression strategy (e.g. 3,Z_RLE).\n      //\n      // Node v0.11.12 zlib.deflateSync is introduced (and returns a Buffer).\n      // Node v3.0.0   Buffer inherits from Uint8Array.\n      // Node v8.0.0   zlib.deflateSync accepts Uint8Array as input.\n      const input =\n        // eslint-disable-next-line no-undef\n        parseInt(process.versions.node) >= 8 ? literals : Buffer.from(literals);\n      const output = __non_webpack_require__(\"zlib\").deflateSync(input, {\n        level: 9,\n      });\n      return output instanceof Uint8Array ? output : new Uint8Array(output);\n    } catch (e) {\n      warn(\"Not compressing PNG because zlib.deflateSync is unavailable: \" + e);\n    }\n\n    return deflateSyncUncompressed(literals);\n  }\n\n  // An implementation of DEFLATE with compression level 0 (Z_NO_COMPRESSION).\n  function deflateSyncUncompressed(literals) {\n    let len = literals.length;\n    const maxBlockLength = 0xffff;\n\n    const deflateBlocks = Math.ceil(len / maxBlockLength);\n    const idat = new Uint8Array(2 + len + deflateBlocks * 5 + 4);\n    let pi = 0;\n    idat[pi++] = 0x78; // compression method and flags\n    idat[pi++] = 0x9c; // flags\n\n    let pos = 0;\n    while (len > maxBlockLength) {\n      // writing non-final DEFLATE blocks type 0 and length of 65535\n      idat[pi++] = 0x00;\n      idat[pi++] = 0xff;\n      idat[pi++] = 0xff;\n      idat[pi++] = 0x00;\n      idat[pi++] = 0x00;\n      idat.set(literals.subarray(pos, pos + maxBlockLength), pi);\n      pi += maxBlockLength;\n      pos += maxBlockLength;\n      len -= maxBlockLength;\n    }\n\n    // writing non-final DEFLATE blocks type 0\n    idat[pi++] = 0x01;\n    idat[pi++] = len & 0xff;\n    idat[pi++] = (len >> 8) & 0xff;\n    idat[pi++] = ~len & 0xffff & 0xff;\n    idat[pi++] = ((~len & 0xffff) >> 8) & 0xff;\n    idat.set(literals.subarray(pos), pi);\n    pi += literals.length - pos;\n\n    const adler = adler32(literals, 0, literals.length); // checksum\n    idat[pi++] = (adler >> 24) & 0xff;\n    idat[pi++] = (adler >> 16) & 0xff;\n    idat[pi++] = (adler >> 8) & 0xff;\n    idat[pi++] = adler & 0xff;\n    return idat;\n  }\n\n  function encode(imgData, kind, forceDataSchema, isMask) {\n    const width = imgData.width;\n    const height = imgData.height;\n    let bitDepth, colorType, lineSize;\n    const bytes = imgData.data;\n\n    switch (kind) {\n      case ImageKind.GRAYSCALE_1BPP:\n        colorType = 0;\n        bitDepth = 1;\n        lineSize = (width + 7) >> 3;\n        break;\n      case ImageKind.RGB_24BPP:\n        colorType = 2;\n        bitDepth = 8;\n        lineSize = width * 3;\n        break;\n      case ImageKind.RGBA_32BPP:\n        colorType = 6;\n        bitDepth = 8;\n        lineSize = width * 4;\n        break;\n      default:\n        throw new Error(\"invalid format\");\n    }\n\n    // prefix every row with predictor 0\n    const literals = new Uint8Array((1 + lineSize) * height);\n    let offsetLiterals = 0,\n      offsetBytes = 0;\n    for (let y = 0; y < height; ++y) {\n      literals[offsetLiterals++] = 0; // no prediction\n      literals.set(\n        bytes.subarray(offsetBytes, offsetBytes + lineSize),\n        offsetLiterals\n      );\n      offsetBytes += lineSize;\n      offsetLiterals += lineSize;\n    }\n\n    if (kind === ImageKind.GRAYSCALE_1BPP && isMask) {\n      // inverting for image masks\n      offsetLiterals = 0;\n      for (let y = 0; y < height; y++) {\n        offsetLiterals++; // skipping predictor\n        for (let i = 0; i < lineSize; i++) {\n          literals[offsetLiterals++] ^= 0xff;\n        }\n      }\n    }\n\n    const ihdr = new Uint8Array([\n      (width >> 24) & 0xff,\n      (width >> 16) & 0xff,\n      (width >> 8) & 0xff,\n      width & 0xff,\n      (height >> 24) & 0xff,\n      (height >> 16) & 0xff,\n      (height >> 8) & 0xff,\n      height & 0xff,\n      bitDepth, // bit depth\n      colorType, // color type\n      0x00, // compression method\n      0x00, // filter method\n      0x00, // interlace method\n    ]);\n    const idat = deflateSync(literals);\n\n    // PNG consists of: header, IHDR+data, IDAT+data, and IEND.\n    const pngLength =\n      PNG_HEADER.length + CHUNK_WRAPPER_SIZE * 3 + ihdr.length + idat.length;\n    const data = new Uint8Array(pngLength);\n    let offset = 0;\n    data.set(PNG_HEADER, offset);\n    offset += PNG_HEADER.length;\n    writePngChunk(\"IHDR\", ihdr, data, offset);\n    offset += CHUNK_WRAPPER_SIZE + ihdr.length;\n    writePngChunk(\"IDATA\", idat, data, offset);\n    offset += CHUNK_WRAPPER_SIZE + idat.length;\n    writePngChunk(\"IEND\", new Uint8Array(0), data, offset);\n\n    return createObjectURL(data, \"image/png\", forceDataSchema);\n  }\n\n  // eslint-disable-next-line no-shadow\n  return function convertImgDataToPng(imgData, forceDataSchema, isMask) {\n    const kind =\n      imgData.kind === undefined ? ImageKind.GRAYSCALE_1BPP : imgData.kind;\n    return encode(imgData, kind, forceDataSchema, isMask);\n  };\n})();\n\nclass SVGExtraState {\n  constructor() {\n    this.fontSizeScale = 1;\n    this.fontWeight = SVG_DEFAULTS.fontWeight;\n    this.fontSize = 0;\n\n    this.textMatrix = IDENTITY_MATRIX;\n    this.fontMatrix = FONT_IDENTITY_MATRIX;\n    this.leading = 0;\n    this.textRenderingMode = TextRenderingMode.FILL;\n    this.textMatrixScale = 1;\n\n    // Current point (in user coordinates)\n    this.x = 0;\n    this.y = 0;\n\n    // Start of text line (in text coordinates)\n    this.lineX = 0;\n    this.lineY = 0;\n\n    // Character and word spacing\n    this.charSpacing = 0;\n    this.wordSpacing = 0;\n    this.textHScale = 1;\n    this.textRise = 0;\n\n    // Default foreground and background colors\n    this.fillColor = SVG_DEFAULTS.fillColor;\n    this.strokeColor = \"#000000\";\n\n    this.fillAlpha = 1;\n    this.strokeAlpha = 1;\n    this.lineWidth = 1;\n    this.lineJoin = \"\";\n    this.lineCap = \"\";\n    this.miterLimit = 0;\n\n    this.dashArray = [];\n    this.dashPhase = 0;\n\n    this.dependencies = [];\n\n    // Clipping\n    this.activeClipUrl = null;\n    this.clipGroup = null;\n\n    this.maskId = \"\";\n  }\n\n  clone() {\n    return Object.create(this);\n  }\n\n  setCurrentPoint(x, y) {\n    this.x = x;\n    this.y = y;\n  }\n}\n\nfunction opListToTree(opList) {\n  let opTree = [];\n  const tmp = [];\n\n  for (const opListElement of opList) {\n    if (opListElement.fn === \"save\") {\n      opTree.push({ fnId: 92, fn: \"group\", items: [] });\n      tmp.push(opTree);\n      opTree = opTree.at(-1).items;\n      continue;\n    }\n\n    if (opListElement.fn === \"restore\") {\n      opTree = tmp.pop();\n    } else {\n      opTree.push(opListElement);\n    }\n  }\n  return opTree;\n}\n\n/**\n * Format a float number as a string.\n *\n * @param value {number} - The float number to format.\n * @returns {string}\n */\nfunction pf(value) {\n  if (Number.isInteger(value)) {\n    return value.toString();\n  }\n  const s = value.toFixed(10);\n  let i = s.length - 1;\n  if (s[i] !== \"0\") {\n    return s;\n  }\n\n  // Remove trailing zeros.\n  do {\n    i--;\n  } while (s[i] === \"0\");\n  return s.substring(0, s[i] === \".\" ? i : i + 1);\n}\n\n/**\n * Format a transform matrix as a string. The standard rotation, scale and\n * translation matrices are replaced by their shorter forms, and for\n * identity matrices an empty string is returned to save memory.\n *\n * @param m {Array} - The transform matrix to format.\n * @returns {string}\n */\nfunction pm(m) {\n  if (m[4] === 0 && m[5] === 0) {\n    if (m[1] === 0 && m[2] === 0) {\n      if (m[0] === 1 && m[3] === 1) {\n        return \"\";\n      }\n      return `scale(${pf(m[0])} ${pf(m[3])})`;\n    }\n    if (m[0] === m[3] && m[1] === -m[2]) {\n      const a = (Math.acos(m[0]) * 180) / Math.PI;\n      return `rotate(${pf(a)})`;\n    }\n  } else if (m[0] === 1 && m[1] === 0 && m[2] === 0 && m[3] === 1) {\n    return `translate(${pf(m[4])} ${pf(m[5])})`;\n  }\n  return (\n    `matrix(${pf(m[0])} ${pf(m[1])} ${pf(m[2])} ${pf(m[3])} ${pf(m[4])} ` +\n    `${pf(m[5])})`\n  );\n}\n\n// The counts below are relevant for all pages, so they have to be global\n// instead of being members of `SVGGraphics` (which is recreated for\n// each page).\nlet clipCount = 0;\nlet maskCount = 0;\nlet shadingCount = 0;\n\nclass SVGGraphics {\n  constructor(commonObjs, objs, forceDataSchema = false) {\n    deprecated(\n      \"The SVG back-end is no longer maintained and *may* be removed in the future.\"\n    );\n    this.svgFactory = new DOMSVGFactory();\n\n    this.current = new SVGExtraState();\n    this.transformMatrix = IDENTITY_MATRIX; // Graphics state matrix\n    this.transformStack = [];\n    this.extraStack = [];\n    this.commonObjs = commonObjs;\n    this.objs = objs;\n    this.pendingClip = null;\n    this.pendingEOFill = false;\n\n    this.embedFonts = false;\n    this.embeddedFonts = Object.create(null);\n    this.cssStyle = null;\n    this.forceDataSchema = !!forceDataSchema;\n\n    // In `src/shared/util.js` the operator names are mapped to IDs.\n    // The list below represents the reverse of that, i.e., it maps IDs\n    // to operator names.\n    this._operatorIdMapping = [];\n    for (const op in OPS) {\n      this._operatorIdMapping[OPS[op]] = op;\n    }\n  }\n\n  getObject(data, fallback = null) {\n    if (typeof data === \"string\") {\n      return data.startsWith(\"g_\")\n        ? this.commonObjs.get(data)\n        : this.objs.get(data);\n    }\n    return fallback;\n  }\n\n  save() {\n    this.transformStack.push(this.transformMatrix);\n    const old = this.current;\n    this.extraStack.push(old);\n    this.current = old.clone();\n  }\n\n  restore() {\n    this.transformMatrix = this.transformStack.pop();\n    this.current = this.extraStack.pop();\n    this.pendingClip = null;\n    this.tgrp = null;\n  }\n\n  group(items) {\n    this.save();\n    this.executeOpTree(items);\n    this.restore();\n  }\n\n  loadDependencies(operatorList) {\n    const fnArray = operatorList.fnArray;\n    const argsArray = operatorList.argsArray;\n\n    for (let i = 0, ii = fnArray.length; i < ii; i++) {\n      if (fnArray[i] !== OPS.dependency) {\n        continue;\n      }\n\n      for (const obj of argsArray[i]) {\n        const objsPool = obj.startsWith(\"g_\") ? this.commonObjs : this.objs;\n        const promise = new Promise(resolve => {\n          objsPool.get(obj, resolve);\n        });\n        this.current.dependencies.push(promise);\n      }\n    }\n    return Promise.all(this.current.dependencies);\n  }\n\n  transform(a, b, c, d, e, f) {\n    const transformMatrix = [a, b, c, d, e, f];\n    this.transformMatrix = Util.transform(\n      this.transformMatrix,\n      transformMatrix\n    );\n    this.tgrp = null;\n  }\n\n  getSVG(operatorList, viewport) {\n    this.viewport = viewport;\n\n    const svgElement = this._initialize(viewport);\n    return this.loadDependencies(operatorList).then(() => {\n      this.transformMatrix = IDENTITY_MATRIX;\n      this.executeOpTree(this.convertOpList(operatorList));\n      return svgElement;\n    });\n  }\n\n  convertOpList(operatorList) {\n    const operatorIdMapping = this._operatorIdMapping;\n    const argsArray = operatorList.argsArray;\n    const fnArray = operatorList.fnArray;\n    const opList = [];\n    for (let i = 0, ii = fnArray.length; i < ii; i++) {\n      const fnId = fnArray[i];\n      opList.push({\n        fnId,\n        fn: operatorIdMapping[fnId],\n        args: argsArray[i],\n      });\n    }\n    return opListToTree(opList);\n  }\n\n  executeOpTree(opTree) {\n    for (const opTreeElement of opTree) {\n      const fn = opTreeElement.fn;\n      const fnId = opTreeElement.fnId;\n      const args = opTreeElement.args;\n\n      switch (fnId | 0) {\n        case OPS.beginText:\n          this.beginText();\n          break;\n        case OPS.dependency:\n          // Handled in `loadDependencies`, so no warning should be shown.\n          break;\n        case OPS.setLeading:\n          this.setLeading(args);\n          break;\n        case OPS.setLeadingMoveText:\n          this.setLeadingMoveText(args[0], args[1]);\n          break;\n        case OPS.setFont:\n          this.setFont(args);\n          break;\n        case OPS.showText:\n          this.showText(args[0]);\n          break;\n        case OPS.showSpacedText:\n          this.showText(args[0]);\n          break;\n        case OPS.endText:\n          this.endText();\n          break;\n        case OPS.moveText:\n          this.moveText(args[0], args[1]);\n          break;\n        case OPS.setCharSpacing:\n          this.setCharSpacing(args[0]);\n          break;\n        case OPS.setWordSpacing:\n          this.setWordSpacing(args[0]);\n          break;\n        case OPS.setHScale:\n          this.setHScale(args[0]);\n          break;\n        case OPS.setTextMatrix:\n          this.setTextMatrix(\n            args[0],\n            args[1],\n            args[2],\n            args[3],\n            args[4],\n            args[5]\n          );\n          break;\n        case OPS.setTextRise:\n          this.setTextRise(args[0]);\n          break;\n        case OPS.setTextRenderingMode:\n          this.setTextRenderingMode(args[0]);\n          break;\n        case OPS.setLineWidth:\n          this.setLineWidth(args[0]);\n          break;\n        case OPS.setLineJoin:\n          this.setLineJoin(args[0]);\n          break;\n        case OPS.setLineCap:\n          this.setLineCap(args[0]);\n          break;\n        case OPS.setMiterLimit:\n          this.setMiterLimit(args[0]);\n          break;\n        case OPS.setFillRGBColor:\n          this.setFillRGBColor(args[0], args[1], args[2]);\n          break;\n        case OPS.setStrokeRGBColor:\n          this.setStrokeRGBColor(args[0], args[1], args[2]);\n          break;\n        case OPS.setStrokeColorN:\n          this.setStrokeColorN(args);\n          break;\n        case OPS.setFillColorN:\n          this.setFillColorN(args);\n          break;\n        case OPS.shadingFill:\n          this.shadingFill(args[0]);\n          break;\n        case OPS.setDash:\n          this.setDash(args[0], args[1]);\n          break;\n        case OPS.setRenderingIntent:\n          this.setRenderingIntent(args[0]);\n          break;\n        case OPS.setFlatness:\n          this.setFlatness(args[0]);\n          break;\n        case OPS.setGState:\n          this.setGState(args[0]);\n          break;\n        case OPS.fill:\n          this.fill();\n          break;\n        case OPS.eoFill:\n          this.eoFill();\n          break;\n        case OPS.stroke:\n          this.stroke();\n          break;\n        case OPS.fillStroke:\n          this.fillStroke();\n          break;\n        case OPS.eoFillStroke:\n          this.eoFillStroke();\n          break;\n        case OPS.clip:\n          this.clip(\"nonzero\");\n          break;\n        case OPS.eoClip:\n          this.clip(\"evenodd\");\n          break;\n        case OPS.paintSolidColorImageMask:\n          this.paintSolidColorImageMask();\n          break;\n        case OPS.paintImageXObject:\n          this.paintImageXObject(args[0]);\n          break;\n        case OPS.paintInlineImageXObject:\n          this.paintInlineImageXObject(args[0]);\n          break;\n        case OPS.paintImageMaskXObject:\n          this.paintImageMaskXObject(args[0]);\n          break;\n        case OPS.paintFormXObjectBegin:\n          this.paintFormXObjectBegin(args[0], args[1]);\n          break;\n        case OPS.paintFormXObjectEnd:\n          this.paintFormXObjectEnd();\n          break;\n        case OPS.closePath:\n          this.closePath();\n          break;\n        case OPS.closeStroke:\n          this.closeStroke();\n          break;\n        case OPS.closeFillStroke:\n          this.closeFillStroke();\n          break;\n        case OPS.closeEOFillStroke:\n          this.closeEOFillStroke();\n          break;\n        case OPS.nextLine:\n          this.nextLine();\n          break;\n        case OPS.transform:\n          this.transform(args[0], args[1], args[2], args[3], args[4], args[5]);\n          break;\n        case OPS.constructPath:\n          this.constructPath(args[0], args[1]);\n          break;\n        case OPS.endPath:\n          this.endPath();\n          break;\n        case 92:\n          this.group(opTreeElement.items);\n          break;\n        default:\n          warn(`Unimplemented operator ${fn}`);\n          break;\n      }\n    }\n  }\n\n  setWordSpacing(wordSpacing) {\n    this.current.wordSpacing = wordSpacing;\n  }\n\n  setCharSpacing(charSpacing) {\n    this.current.charSpacing = charSpacing;\n  }\n\n  nextLine() {\n    this.moveText(0, this.current.leading);\n  }\n\n  setTextMatrix(a, b, c, d, e, f) {\n    const current = this.current;\n    current.textMatrix = current.lineMatrix = [a, b, c, d, e, f];\n    current.textMatrixScale = Math.hypot(a, b);\n\n    current.x = current.lineX = 0;\n    current.y = current.lineY = 0;\n\n    current.xcoords = [];\n    current.ycoords = [];\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n    current.tspan.setAttributeNS(\n      null,\n      \"font-size\",\n      `${pf(current.fontSize)}px`\n    );\n    current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n\n    current.txtElement = this.svgFactory.createElement(\"svg:text\");\n    current.txtElement.append(current.tspan);\n  }\n\n  beginText() {\n    const current = this.current;\n    current.x = current.lineX = 0;\n    current.y = current.lineY = 0;\n    current.textMatrix = IDENTITY_MATRIX;\n    current.lineMatrix = IDENTITY_MATRIX;\n    current.textMatrixScale = 1;\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.txtElement = this.svgFactory.createElement(\"svg:text\");\n    current.txtgrp = this.svgFactory.createElement(\"svg:g\");\n    current.xcoords = [];\n    current.ycoords = [];\n  }\n\n  moveText(x, y) {\n    const current = this.current;\n    current.x = current.lineX += x;\n    current.y = current.lineY += y;\n\n    current.xcoords = [];\n    current.ycoords = [];\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n    current.tspan.setAttributeNS(\n      null,\n      \"font-size\",\n      `${pf(current.fontSize)}px`\n    );\n    current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n  }\n\n  showText(glyphs) {\n    const current = this.current;\n    const font = current.font;\n    const fontSize = current.fontSize;\n    if (fontSize === 0) {\n      return;\n    }\n\n    const fontSizeScale = current.fontSizeScale;\n    const charSpacing = current.charSpacing;\n    const wordSpacing = current.wordSpacing;\n    const fontDirection = current.fontDirection;\n    const textHScale = current.textHScale * fontDirection;\n    const vertical = font.vertical;\n    const spacingDir = vertical ? 1 : -1;\n    const defaultVMetrics = font.defaultVMetrics;\n    const widthAdvanceScale = fontSize * current.fontMatrix[0];\n\n    let x = 0;\n    for (const glyph of glyphs) {\n      if (glyph === null) {\n        // Word break\n        x += fontDirection * wordSpacing;\n        continue;\n      } else if (typeof glyph === \"number\") {\n        x += (spacingDir * glyph * fontSize) / 1000;\n        continue;\n      }\n\n      const spacing = (glyph.isSpace ? wordSpacing : 0) + charSpacing;\n      const character = glyph.fontChar;\n      let scaledX, scaledY;\n      let width = glyph.width;\n      if (vertical) {\n        let vx;\n        const vmetric = glyph.vmetric || defaultVMetrics;\n        vx = glyph.vmetric ? vmetric[1] : width * 0.5;\n        vx = -vx * widthAdvanceScale;\n        const vy = vmetric[2] * widthAdvanceScale;\n\n        width = vmetric ? -vmetric[0] : width;\n        scaledX = vx / fontSizeScale;\n        scaledY = (x + vy) / fontSizeScale;\n      } else {\n        scaledX = x / fontSizeScale;\n        scaledY = 0;\n      }\n\n      if (glyph.isInFont || font.missingFile) {\n        current.xcoords.push(current.x + scaledX);\n        if (vertical) {\n          current.ycoords.push(-current.y + scaledY);\n        }\n        current.tspan.textContent += character;\n      } else {\n        // TODO: To assist with text selection, we should replace the missing\n        // character with a space character if charWidth is not zero.\n        // But we cannot just do \"character = ' '\", because the ' ' character\n        // might actually map to a different glyph.\n      }\n\n      const charWidth = vertical\n        ? width * widthAdvanceScale - spacing * fontDirection\n        : width * widthAdvanceScale + spacing * fontDirection;\n\n      x += charWidth;\n    }\n    current.tspan.setAttributeNS(null, \"x\", current.xcoords.map(pf).join(\" \"));\n    if (vertical) {\n      current.tspan.setAttributeNS(\n        null,\n        \"y\",\n        current.ycoords.map(pf).join(\" \")\n      );\n    } else {\n      current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    }\n\n    if (vertical) {\n      current.y -= x;\n    } else {\n      current.x += x * textHScale;\n    }\n\n    current.tspan.setAttributeNS(null, \"font-family\", current.fontFamily);\n    current.tspan.setAttributeNS(\n      null,\n      \"font-size\",\n      `${pf(current.fontSize)}px`\n    );\n    if (current.fontStyle !== SVG_DEFAULTS.fontStyle) {\n      current.tspan.setAttributeNS(null, \"font-style\", current.fontStyle);\n    }\n    if (current.fontWeight !== SVG_DEFAULTS.fontWeight) {\n      current.tspan.setAttributeNS(null, \"font-weight\", current.fontWeight);\n    }\n\n    const fillStrokeMode =\n      current.textRenderingMode & TextRenderingMode.FILL_STROKE_MASK;\n    if (\n      fillStrokeMode === TextRenderingMode.FILL ||\n      fillStrokeMode === TextRenderingMode.FILL_STROKE\n    ) {\n      if (current.fillColor !== SVG_DEFAULTS.fillColor) {\n        current.tspan.setAttributeNS(null, \"fill\", current.fillColor);\n      }\n      if (current.fillAlpha < 1) {\n        current.tspan.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n      }\n    } else if (current.textRenderingMode === TextRenderingMode.ADD_TO_PATH) {\n      // Workaround for Firefox: We must set fill=\"transparent\" because\n      // fill=\"none\" would generate an empty clipping path.\n      current.tspan.setAttributeNS(null, \"fill\", \"transparent\");\n    } else {\n      current.tspan.setAttributeNS(null, \"fill\", \"none\");\n    }\n\n    if (\n      fillStrokeMode === TextRenderingMode.STROKE ||\n      fillStrokeMode === TextRenderingMode.FILL_STROKE\n    ) {\n      const lineWidthScale = 1 / (current.textMatrixScale || 1);\n      this._setStrokeAttributes(current.tspan, lineWidthScale);\n    }\n\n    // Include the text rise in the text matrix since the `pm` function\n    // creates the SVG element's `translate` entry (work on a copy to avoid\n    // altering the original text matrix).\n    let textMatrix = current.textMatrix;\n    if (current.textRise !== 0) {\n      textMatrix = textMatrix.slice();\n      textMatrix[5] += current.textRise;\n    }\n\n    current.txtElement.setAttributeNS(\n      null,\n      \"transform\",\n      `${pm(textMatrix)} scale(${pf(textHScale)}, -1)`\n    );\n    current.txtElement.setAttributeNS(XML_NS, \"xml:space\", \"preserve\");\n    current.txtElement.append(current.tspan);\n    current.txtgrp.append(current.txtElement);\n\n    this._ensureTransformGroup().append(current.txtElement);\n  }\n\n  setLeadingMoveText(x, y) {\n    this.setLeading(-y);\n    this.moveText(x, y);\n  }\n\n  addFontStyle(fontObj) {\n    if (!fontObj.data) {\n      throw new Error(\n        \"addFontStyle: No font data available, \" +\n          'ensure that the \"fontExtraProperties\" API parameter is set.'\n      );\n    }\n    if (!this.cssStyle) {\n      this.cssStyle = this.svgFactory.createElement(\"svg:style\");\n      this.cssStyle.setAttributeNS(null, \"type\", \"text/css\");\n      this.defs.append(this.cssStyle);\n    }\n\n    const url = createObjectURL(\n      fontObj.data,\n      fontObj.mimetype,\n      this.forceDataSchema\n    );\n    this.cssStyle.textContent +=\n      `@font-face { font-family: \"${fontObj.loadedName}\";` +\n      ` src: url(${url}); }\\n`;\n  }\n\n  setFont(details) {\n    const current = this.current;\n    const fontObj = this.commonObjs.get(details[0]);\n    let size = details[1];\n    current.font = fontObj;\n\n    if (\n      this.embedFonts &&\n      !fontObj.missingFile &&\n      !this.embeddedFonts[fontObj.loadedName]\n    ) {\n      this.addFontStyle(fontObj);\n      this.embeddedFonts[fontObj.loadedName] = fontObj;\n    }\n    current.fontMatrix = fontObj.fontMatrix || FONT_IDENTITY_MATRIX;\n\n    let bold = \"normal\";\n    if (fontObj.black) {\n      bold = \"900\";\n    } else if (fontObj.bold) {\n      bold = \"bold\";\n    }\n    const italic = fontObj.italic ? \"italic\" : \"normal\";\n\n    if (size < 0) {\n      size = -size;\n      current.fontDirection = -1;\n    } else {\n      current.fontDirection = 1;\n    }\n    current.fontSize = size;\n    current.fontFamily = fontObj.loadedName;\n    current.fontWeight = bold;\n    current.fontStyle = italic;\n\n    current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    current.tspan.setAttributeNS(null, \"y\", pf(-current.y));\n    current.xcoords = [];\n    current.ycoords = [];\n  }\n\n  endText() {\n    const current = this.current;\n    if (\n      current.textRenderingMode & TextRenderingMode.ADD_TO_PATH_FLAG &&\n      current.txtElement?.hasChildNodes()\n    ) {\n      // If no glyphs are shown (i.e. no child nodes), no clipping occurs.\n      current.element = current.txtElement;\n      this.clip(\"nonzero\");\n      this.endPath();\n    }\n  }\n\n  // Path properties\n  setLineWidth(width) {\n    if (width > 0) {\n      this.current.lineWidth = width;\n    }\n  }\n\n  setLineCap(style) {\n    this.current.lineCap = LINE_CAP_STYLES[style];\n  }\n\n  setLineJoin(style) {\n    this.current.lineJoin = LINE_JOIN_STYLES[style];\n  }\n\n  setMiterLimit(limit) {\n    this.current.miterLimit = limit;\n  }\n\n  setStrokeAlpha(strokeAlpha) {\n    this.current.strokeAlpha = strokeAlpha;\n  }\n\n  setStrokeRGBColor(r, g, b) {\n    this.current.strokeColor = Util.makeHexColor(r, g, b);\n  }\n\n  setFillAlpha(fillAlpha) {\n    this.current.fillAlpha = fillAlpha;\n  }\n\n  setFillRGBColor(r, g, b) {\n    this.current.fillColor = Util.makeHexColor(r, g, b);\n    this.current.tspan = this.svgFactory.createElement(\"svg:tspan\");\n    this.current.xcoords = [];\n    this.current.ycoords = [];\n  }\n\n  setStrokeColorN(args) {\n    this.current.strokeColor = this._makeColorN_Pattern(args);\n  }\n\n  setFillColorN(args) {\n    this.current.fillColor = this._makeColorN_Pattern(args);\n  }\n\n  shadingFill(args) {\n    const { width, height } = this.viewport;\n    const inv = Util.inverseTransform(this.transformMatrix);\n    const [x0, y0, x1, y1] = Util.getAxialAlignedBoundingBox(\n      [0, 0, width, height],\n      inv\n    );\n\n    const rect = this.svgFactory.createElement(\"svg:rect\");\n    rect.setAttributeNS(null, \"x\", x0);\n    rect.setAttributeNS(null, \"y\", y0);\n    rect.setAttributeNS(null, \"width\", x1 - x0);\n    rect.setAttributeNS(null, \"height\", y1 - y0);\n    rect.setAttributeNS(null, \"fill\", this._makeShadingPattern(args));\n    if (this.current.fillAlpha < 1) {\n      rect.setAttributeNS(null, \"fill-opacity\", this.current.fillAlpha);\n    }\n    this._ensureTransformGroup().append(rect);\n  }\n\n  /**\n   * @private\n   */\n  _makeColorN_Pattern(args) {\n    if (args[0] === \"TilingPattern\") {\n      return this._makeTilingPattern(args);\n    }\n    return this._makeShadingPattern(args);\n  }\n\n  /**\n   * @private\n   */\n  _makeTilingPattern(args) {\n    const color = args[1];\n    const operatorList = args[2];\n    const matrix = args[3] || IDENTITY_MATRIX;\n    const [x0, y0, x1, y1] = args[4];\n    const xstep = args[5];\n    const ystep = args[6];\n    const paintType = args[7];\n\n    const tilingId = `shading${shadingCount++}`;\n    const [tx0, ty0, tx1, ty1] = Util.normalizeRect([\n      ...Util.applyTransform([x0, y0], matrix),\n      ...Util.applyTransform([x1, y1], matrix),\n    ]);\n    const [xscale, yscale] = Util.singularValueDecompose2dScale(matrix);\n    const txstep = xstep * xscale;\n    const tystep = ystep * yscale;\n\n    const tiling = this.svgFactory.createElement(\"svg:pattern\");\n    tiling.setAttributeNS(null, \"id\", tilingId);\n    tiling.setAttributeNS(null, \"patternUnits\", \"userSpaceOnUse\");\n    tiling.setAttributeNS(null, \"width\", txstep);\n    tiling.setAttributeNS(null, \"height\", tystep);\n    tiling.setAttributeNS(null, \"x\", `${tx0}`);\n    tiling.setAttributeNS(null, \"y\", `${ty0}`);\n\n    // Save current state.\n    const svg = this.svg;\n    const transformMatrix = this.transformMatrix;\n    const fillColor = this.current.fillColor;\n    const strokeColor = this.current.strokeColor;\n\n    const bbox = this.svgFactory.create(tx1 - tx0, ty1 - ty0);\n    this.svg = bbox;\n    this.transformMatrix = matrix;\n    if (paintType === 2) {\n      const cssColor = Util.makeHexColor(...color);\n      this.current.fillColor = cssColor;\n      this.current.strokeColor = cssColor;\n    }\n    this.executeOpTree(this.convertOpList(operatorList));\n\n    // Restore saved state.\n    this.svg = svg;\n    this.transformMatrix = transformMatrix;\n    this.current.fillColor = fillColor;\n    this.current.strokeColor = strokeColor;\n\n    tiling.append(bbox.childNodes[0]);\n    this.defs.append(tiling);\n    return `url(#${tilingId})`;\n  }\n\n  /**\n   * @private\n   */\n  _makeShadingPattern(args) {\n    if (typeof args === \"string\") {\n      args = this.objs.get(args);\n    }\n    switch (args[0]) {\n      case \"RadialAxial\":\n        const shadingId = `shading${shadingCount++}`;\n        const colorStops = args[3];\n        let gradient;\n\n        switch (args[1]) {\n          case \"axial\":\n            const point0 = args[4];\n            const point1 = args[5];\n            gradient = this.svgFactory.createElement(\"svg:linearGradient\");\n            gradient.setAttributeNS(null, \"id\", shadingId);\n            gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n            gradient.setAttributeNS(null, \"x1\", point0[0]);\n            gradient.setAttributeNS(null, \"y1\", point0[1]);\n            gradient.setAttributeNS(null, \"x2\", point1[0]);\n            gradient.setAttributeNS(null, \"y2\", point1[1]);\n            break;\n          case \"radial\":\n            const focalPoint = args[4];\n            const circlePoint = args[5];\n            const focalRadius = args[6];\n            const circleRadius = args[7];\n            gradient = this.svgFactory.createElement(\"svg:radialGradient\");\n            gradient.setAttributeNS(null, \"id\", shadingId);\n            gradient.setAttributeNS(null, \"gradientUnits\", \"userSpaceOnUse\");\n            gradient.setAttributeNS(null, \"cx\", circlePoint[0]);\n            gradient.setAttributeNS(null, \"cy\", circlePoint[1]);\n            gradient.setAttributeNS(null, \"r\", circleRadius);\n            gradient.setAttributeNS(null, \"fx\", focalPoint[0]);\n            gradient.setAttributeNS(null, \"fy\", focalPoint[1]);\n            gradient.setAttributeNS(null, \"fr\", focalRadius);\n            break;\n          default:\n            throw new Error(`Unknown RadialAxial type: ${args[1]}`);\n        }\n        for (const colorStop of colorStops) {\n          const stop = this.svgFactory.createElement(\"svg:stop\");\n          stop.setAttributeNS(null, \"offset\", colorStop[0]);\n          stop.setAttributeNS(null, \"stop-color\", colorStop[1]);\n          gradient.append(stop);\n        }\n        this.defs.append(gradient);\n        return `url(#${shadingId})`;\n      case \"Mesh\":\n        warn(\"Unimplemented pattern Mesh\");\n        return null;\n      case \"Dummy\":\n        return \"hotpink\";\n      default:\n        throw new Error(`Unknown IR type: ${args[0]}`);\n    }\n  }\n\n  setDash(dashArray, dashPhase) {\n    this.current.dashArray = dashArray;\n    this.current.dashPhase = dashPhase;\n  }\n\n  constructPath(ops, args) {\n    const current = this.current;\n    let x = current.x,\n      y = current.y;\n    let d = [];\n    let j = 0;\n\n    for (const op of ops) {\n      switch (op | 0) {\n        case OPS.rectangle:\n          x = args[j++];\n          y = args[j++];\n          const width = args[j++];\n          const height = args[j++];\n          const xw = x + width;\n          const yh = y + height;\n          d.push(\n            \"M\",\n            pf(x),\n            pf(y),\n            \"L\",\n            pf(xw),\n            pf(y),\n            \"L\",\n            pf(xw),\n            pf(yh),\n            \"L\",\n            pf(x),\n            pf(yh),\n            \"Z\"\n          );\n          break;\n        case OPS.moveTo:\n          x = args[j++];\n          y = args[j++];\n          d.push(\"M\", pf(x), pf(y));\n          break;\n        case OPS.lineTo:\n          x = args[j++];\n          y = args[j++];\n          d.push(\"L\", pf(x), pf(y));\n          break;\n        case OPS.curveTo:\n          x = args[j + 4];\n          y = args[j + 5];\n          d.push(\n            \"C\",\n            pf(args[j]),\n            pf(args[j + 1]),\n            pf(args[j + 2]),\n            pf(args[j + 3]),\n            pf(x),\n            pf(y)\n          );\n          j += 6;\n          break;\n        case OPS.curveTo2:\n          d.push(\n            \"C\",\n            pf(x),\n            pf(y),\n            pf(args[j]),\n            pf(args[j + 1]),\n            pf(args[j + 2]),\n            pf(args[j + 3])\n          );\n          x = args[j + 2];\n          y = args[j + 3];\n          j += 4;\n          break;\n        case OPS.curveTo3:\n          x = args[j + 2];\n          y = args[j + 3];\n          d.push(\"C\", pf(args[j]), pf(args[j + 1]), pf(x), pf(y), pf(x), pf(y));\n          j += 4;\n          break;\n        case OPS.closePath:\n          d.push(\"Z\");\n          break;\n      }\n    }\n\n    d = d.join(\" \");\n\n    if (\n      current.path &&\n      ops.length > 0 &&\n      ops[0] !== OPS.rectangle &&\n      ops[0] !== OPS.moveTo\n    ) {\n      // If a path does not start with an OPS.rectangle or OPS.moveTo, it has\n      // probably been divided into two OPS.constructPath operators by\n      // OperatorList. Append the commands to the previous path element.\n      d = current.path.getAttributeNS(null, \"d\") + d;\n    } else {\n      current.path = this.svgFactory.createElement(\"svg:path\");\n      this._ensureTransformGroup().append(current.path);\n    }\n\n    current.path.setAttributeNS(null, \"d\", d);\n    current.path.setAttributeNS(null, \"fill\", \"none\");\n\n    // Saving a reference in current.element so that it can be addressed\n    // in 'fill' and 'stroke'\n    current.element = current.path;\n    current.setCurrentPoint(x, y);\n  }\n\n  endPath() {\n    const current = this.current;\n\n    // Painting operators end a path.\n    current.path = null;\n\n    if (!this.pendingClip) {\n      return;\n    }\n    if (!current.element) {\n      this.pendingClip = null;\n      return;\n    }\n\n    // Add the current path to a clipping path.\n    const clipId = `clippath${clipCount++}`;\n    const clipPath = this.svgFactory.createElement(\"svg:clipPath\");\n    clipPath.setAttributeNS(null, \"id\", clipId);\n    clipPath.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n\n    // A deep clone is needed when text is used as a clipping path.\n    const clipElement = current.element.cloneNode(true);\n    if (this.pendingClip === \"evenodd\") {\n      clipElement.setAttributeNS(null, \"clip-rule\", \"evenodd\");\n    } else {\n      clipElement.setAttributeNS(null, \"clip-rule\", \"nonzero\");\n    }\n    this.pendingClip = null;\n    clipPath.append(clipElement);\n    this.defs.append(clipPath);\n\n    if (current.activeClipUrl) {\n      // The previous clipping group content can go out of order -- resetting\n      // cached clipGroups.\n      current.clipGroup = null;\n      for (const prev of this.extraStack) {\n        prev.clipGroup = null;\n      }\n      // Intersect with the previous clipping path.\n      clipPath.setAttributeNS(null, \"clip-path\", current.activeClipUrl);\n    }\n    current.activeClipUrl = `url(#${clipId})`;\n\n    this.tgrp = null;\n  }\n\n  clip(type) {\n    this.pendingClip = type;\n  }\n\n  closePath() {\n    const current = this.current;\n    if (current.path) {\n      const d = `${current.path.getAttributeNS(null, \"d\")}Z`;\n      current.path.setAttributeNS(null, \"d\", d);\n    }\n  }\n\n  setLeading(leading) {\n    this.current.leading = -leading;\n  }\n\n  setTextRise(textRise) {\n    this.current.textRise = textRise;\n  }\n\n  setTextRenderingMode(textRenderingMode) {\n    this.current.textRenderingMode = textRenderingMode;\n  }\n\n  setHScale(scale) {\n    this.current.textHScale = scale / 100;\n  }\n\n  setRenderingIntent(intent) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setFlatness(flatness) {\n    // This operation is ignored since we haven't found a use case for it yet.\n  }\n\n  setGState(states) {\n    for (const [key, value] of states) {\n      switch (key) {\n        case \"LW\":\n          this.setLineWidth(value);\n          break;\n        case \"LC\":\n          this.setLineCap(value);\n          break;\n        case \"LJ\":\n          this.setLineJoin(value);\n          break;\n        case \"ML\":\n          this.setMiterLimit(value);\n          break;\n        case \"D\":\n          this.setDash(value[0], value[1]);\n          break;\n        case \"RI\":\n          this.setRenderingIntent(value);\n          break;\n        case \"FL\":\n          this.setFlatness(value);\n          break;\n        case \"Font\":\n          this.setFont(value);\n          break;\n        case \"CA\":\n          this.setStrokeAlpha(value);\n          break;\n        case \"ca\":\n          this.setFillAlpha(value);\n          break;\n        default:\n          warn(`Unimplemented graphic state operator ${key}`);\n          break;\n      }\n    }\n  }\n\n  fill() {\n    const current = this.current;\n    if (current.element) {\n      current.element.setAttributeNS(null, \"fill\", current.fillColor);\n      current.element.setAttributeNS(null, \"fill-opacity\", current.fillAlpha);\n      this.endPath();\n    }\n  }\n\n  stroke() {\n    const current = this.current;\n    if (current.element) {\n      this._setStrokeAttributes(current.element);\n      current.element.setAttributeNS(null, \"fill\", \"none\");\n      this.endPath();\n    }\n  }\n\n  /**\n   * @private\n   */\n  _setStrokeAttributes(element, lineWidthScale = 1) {\n    const current = this.current;\n    let dashArray = current.dashArray;\n    if (lineWidthScale !== 1 && dashArray.length > 0) {\n      dashArray = dashArray.map(function (value) {\n        return lineWidthScale * value;\n      });\n    }\n    element.setAttributeNS(null, \"stroke\", current.strokeColor);\n    element.setAttributeNS(null, \"stroke-opacity\", current.strokeAlpha);\n    element.setAttributeNS(null, \"stroke-miterlimit\", pf(current.miterLimit));\n    element.setAttributeNS(null, \"stroke-linecap\", current.lineCap);\n    element.setAttributeNS(null, \"stroke-linejoin\", current.lineJoin);\n    element.setAttributeNS(\n      null,\n      \"stroke-width\",\n      pf(lineWidthScale * current.lineWidth) + \"px\"\n    );\n    element.setAttributeNS(\n      null,\n      \"stroke-dasharray\",\n      dashArray.map(pf).join(\" \")\n    );\n    element.setAttributeNS(\n      null,\n      \"stroke-dashoffset\",\n      pf(lineWidthScale * current.dashPhase) + \"px\"\n    );\n  }\n\n  eoFill() {\n    this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n    this.fill();\n  }\n\n  fillStroke() {\n    // Order is important since stroke wants fill to be none.\n    // First stroke, then if fill needed, it will be overwritten.\n    this.stroke();\n    this.fill();\n  }\n\n  eoFillStroke() {\n    this.current.element?.setAttributeNS(null, \"fill-rule\", \"evenodd\");\n    this.fillStroke();\n  }\n\n  closeStroke() {\n    this.closePath();\n    this.stroke();\n  }\n\n  closeFillStroke() {\n    this.closePath();\n    this.fillStroke();\n  }\n\n  closeEOFillStroke() {\n    this.closePath();\n    this.eoFillStroke();\n  }\n\n  paintSolidColorImageMask() {\n    const rect = this.svgFactory.createElement(\"svg:rect\");\n    rect.setAttributeNS(null, \"x\", \"0\");\n    rect.setAttributeNS(null, \"y\", \"0\");\n    rect.setAttributeNS(null, \"width\", \"1px\");\n    rect.setAttributeNS(null, \"height\", \"1px\");\n    rect.setAttributeNS(null, \"fill\", this.current.fillColor);\n\n    this._ensureTransformGroup().append(rect);\n  }\n\n  paintImageXObject(objId) {\n    const imgData = this.getObject(objId);\n    if (!imgData) {\n      warn(`Dependent image with object ID ${objId} is not ready yet`);\n      return;\n    }\n    this.paintInlineImageXObject(imgData);\n  }\n\n  paintInlineImageXObject(imgData, mask) {\n    const width = imgData.width;\n    const height = imgData.height;\n\n    const imgSrc = convertImgDataToPng(imgData, this.forceDataSchema, !!mask);\n    const cliprect = this.svgFactory.createElement(\"svg:rect\");\n    cliprect.setAttributeNS(null, \"x\", \"0\");\n    cliprect.setAttributeNS(null, \"y\", \"0\");\n    cliprect.setAttributeNS(null, \"width\", pf(width));\n    cliprect.setAttributeNS(null, \"height\", pf(height));\n    this.current.element = cliprect;\n    this.clip(\"nonzero\");\n\n    const imgEl = this.svgFactory.createElement(\"svg:image\");\n    imgEl.setAttributeNS(XLINK_NS, \"xlink:href\", imgSrc);\n    imgEl.setAttributeNS(null, \"x\", \"0\");\n    imgEl.setAttributeNS(null, \"y\", pf(-height));\n    imgEl.setAttributeNS(null, \"width\", pf(width) + \"px\");\n    imgEl.setAttributeNS(null, \"height\", pf(height) + \"px\");\n    imgEl.setAttributeNS(\n      null,\n      \"transform\",\n      `scale(${pf(1 / width)} ${pf(-1 / height)})`\n    );\n    if (mask) {\n      mask.append(imgEl);\n    } else {\n      this._ensureTransformGroup().append(imgEl);\n    }\n  }\n\n  paintImageMaskXObject(img) {\n    const imgData = this.getObject(img.data, img);\n    if (imgData.bitmap) {\n      warn(\n        \"paintImageMaskXObject: ImageBitmap support is not implemented, \" +\n          \"ensure that the `isOffscreenCanvasSupported` API parameter is disabled.\"\n      );\n      return;\n    }\n    const current = this.current;\n    const width = imgData.width;\n    const height = imgData.height;\n    const fillColor = current.fillColor;\n\n    current.maskId = `mask${maskCount++}`;\n    const mask = this.svgFactory.createElement(\"svg:mask\");\n    mask.setAttributeNS(null, \"id\", current.maskId);\n\n    const rect = this.svgFactory.createElement(\"svg:rect\");\n    rect.setAttributeNS(null, \"x\", \"0\");\n    rect.setAttributeNS(null, \"y\", \"0\");\n    rect.setAttributeNS(null, \"width\", pf(width));\n    rect.setAttributeNS(null, \"height\", pf(height));\n    rect.setAttributeNS(null, \"fill\", fillColor);\n    rect.setAttributeNS(null, \"mask\", `url(#${current.maskId})`);\n\n    this.defs.append(mask);\n    this._ensureTransformGroup().append(rect);\n\n    this.paintInlineImageXObject(imgData, mask);\n  }\n\n  paintFormXObjectBegin(matrix, bbox) {\n    if (Array.isArray(matrix) && matrix.length === 6) {\n      this.transform(\n        matrix[0],\n        matrix[1],\n        matrix[2],\n        matrix[3],\n        matrix[4],\n        matrix[5]\n      );\n    }\n\n    if (bbox) {\n      const width = bbox[2] - bbox[0];\n      const height = bbox[3] - bbox[1];\n\n      const cliprect = this.svgFactory.createElement(\"svg:rect\");\n      cliprect.setAttributeNS(null, \"x\", bbox[0]);\n      cliprect.setAttributeNS(null, \"y\", bbox[1]);\n      cliprect.setAttributeNS(null, \"width\", pf(width));\n      cliprect.setAttributeNS(null, \"height\", pf(height));\n      this.current.element = cliprect;\n      this.clip(\"nonzero\");\n      this.endPath();\n    }\n  }\n\n  paintFormXObjectEnd() {}\n\n  /**\n   * @private\n   */\n  _initialize(viewport) {\n    const svg = this.svgFactory.create(viewport.width, viewport.height);\n\n    // Create the definitions element.\n    const definitions = this.svgFactory.createElement(\"svg:defs\");\n    svg.append(definitions);\n    this.defs = definitions;\n\n    // Create the root group element, which acts a container for all other\n    // groups and applies the viewport transform.\n    const rootGroup = this.svgFactory.createElement(\"svg:g\");\n    rootGroup.setAttributeNS(null, \"transform\", pm(viewport.transform));\n    svg.append(rootGroup);\n\n    // For the construction of the SVG image we are only interested in the\n    // root group, so we expose it as the entry point of the SVG image for\n    // the other code in this class.\n    this.svg = rootGroup;\n\n    return svg;\n  }\n\n  /**\n   * @private\n   */\n  _ensureClipGroup() {\n    if (!this.current.clipGroup) {\n      const clipGroup = this.svgFactory.createElement(\"svg:g\");\n      clipGroup.setAttributeNS(null, \"clip-path\", this.current.activeClipUrl);\n      this.svg.append(clipGroup);\n      this.current.clipGroup = clipGroup;\n    }\n    return this.current.clipGroup;\n  }\n\n  /**\n   * @private\n   */\n  _ensureTransformGroup() {\n    if (!this.tgrp) {\n      this.tgrp = this.svgFactory.createElement(\"svg:g\");\n      this.tgrp.setAttributeNS(null, \"transform\", pm(this.transformMatrix));\n      if (this.current.activeClipUrl) {\n        this._ensureClipGroup().append(this.tgrp);\n      } else {\n        this.svg.append(this.tgrp);\n      }\n    }\n    return this.tgrp;\n  }\n}\n\nexport { SVGGraphics };\n", "/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./api\").TextContent} TextContent */\n\nclass XfaText {\n  /**\n   * Walk an XFA tree and create an array of text nodes that is compatible\n   * with a regular PDFs TextContent. Currently, only TextItem.str is supported,\n   * all other fields and styles haven't been implemented.\n   *\n   * @param {Object} xfa - An XFA fake DOM object.\n   *\n   * @returns {TextContent}\n   */\n  static textContent(xfa) {\n    const items = [];\n    const output = {\n      items,\n      styles: Object.create(null),\n    };\n    function walk(node) {\n      if (!node) {\n        return;\n      }\n      let str = null;\n      const name = node.name;\n      if (name === \"#text\") {\n        str = node.value;\n      } else if (!XfaText.shouldBuildText(name)) {\n        return;\n      } else if (node?.attributes?.textContent) {\n        str = node.attributes.textContent;\n      } else if (node.value) {\n        str = node.value;\n      }\n      if (str !== null) {\n        items.push({\n          str,\n        });\n      }\n      if (!node.children) {\n        return;\n      }\n      for (const child of node.children) {\n        walk(child);\n      }\n    }\n    walk(xfa);\n    return output;\n  }\n\n  /**\n   * @param {string} name - DOM node name. (lower case)\n   *\n   * @returns {boolean} true if the DOM node should have a corresponding text\n   * node.\n   */\n  static shouldBuildText(name) {\n    return !(\n      name === \"textarea\" ||\n      name === \"input\" ||\n      name === \"option\" ||\n      name === \"select\"\n    );\n  }\n}\n\nexport { XfaText };\n", "/* Copyright 2015 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"./api\").TextContent} TextContent */\n\nimport {\n  AbortException,\n  FeatureTest,\n  PromiseCapability,\n  Util,\n} from \"../shared/util.js\";\nimport { deprecated, setLayerDimensions } from \"./display_utils.js\";\n\n/**\n * Text layer render parameters.\n *\n * @typedef {Object} TextLayerRenderParameters\n * @property {ReadableStream | TextContent} textContentSource - Text content to\n *   render, i.e. the value returned by the page's `streamTextContent` or\n *   `getTextContent` method.\n * @property {HTMLElement} container - The DOM node that will contain the text\n *   runs.\n * @property {PageViewport} viewport - The target viewport to properly layout\n *   the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that correspond to\n *   the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {WeakMap<HTMLElement,Object>} [textDivProperties] - Some properties\n *   weakly mapped to the HTML elements used to render the text.\n * @property {Array<string>} [textContentItemsStr] - Strings that correspond to\n *   the `str` property of the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {boolean} [isOffscreenCanvasSupported] true if we can use\n *   OffscreenCanvas to measure string widths.\n */\n\n/**\n * Text layer update parameters.\n *\n * @typedef {Object} TextLayerUpdateParameters\n * @property {HTMLElement} container - The DOM node that will contain the text\n *   runs.\n * @property {PageViewport} viewport - The target viewport to properly layout\n *   the text runs.\n * @property {Array<HTMLElement>} [textDivs] - HTML elements that correspond to\n *   the text items of the textContent input.\n *   This is output and shall initially be set to an empty array.\n * @property {WeakMap<HTMLElement,Object>} [textDivProperties] - Some properties\n *   weakly mapped to the HTML elements used to render the text.\n * @property {boolean} [isOffscreenCanvasSupported] true if we can use\n *   OffscreenCanvas to measure string widths.\n * @property {boolean} [mustRotate] true if the text layer must be rotated.\n * @property {boolean} [mustRescale] true if the text layer contents must be\n *   rescaled.\n */\n\nconst MAX_TEXT_DIVS_TO_RENDER = 100000;\nconst DEFAULT_FONT_SIZE = 30;\nconst DEFAULT_FONT_ASCENT = 0.8;\nconst ascentCache = new Map();\n\nfunction getCtx(size, isOffscreenCanvasSupported) {\n  let ctx;\n  if (isOffscreenCanvasSupported && FeatureTest.isOffscreenCanvasSupported) {\n    ctx = new OffscreenCanvas(size, size).getContext(\"2d\", { alpha: false });\n  } else {\n    const canvas = document.createElement(\"canvas\");\n    canvas.width = canvas.height = size;\n    ctx = canvas.getContext(\"2d\", { alpha: false });\n  }\n\n  return ctx;\n}\n\nfunction getAscent(fontFamily, isOffscreenCanvasSupported) {\n  const cachedAscent = ascentCache.get(fontFamily);\n  if (cachedAscent) {\n    return cachedAscent;\n  }\n\n  const ctx = getCtx(DEFAULT_FONT_SIZE, isOffscreenCanvasSupported);\n\n  ctx.font = `${DEFAULT_FONT_SIZE}px ${fontFamily}`;\n  const metrics = ctx.measureText(\"\");\n\n  // Both properties aren't available by default in Firefox.\n  let ascent = metrics.fontBoundingBoxAscent;\n  let descent = Math.abs(metrics.fontBoundingBoxDescent);\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n\n    ctx.canvas.width = ctx.canvas.height = 0;\n    return ratio;\n  }\n\n  // Try basic heuristic to guess ascent/descent.\n  // Draw a g with baseline at 0,0 and then get the line\n  // number where a pixel has non-null red component (starting\n  // from bottom).\n  ctx.strokeStyle = \"red\";\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"g\", 0, 0);\n  let pixels = ctx.getImageData(\n    0,\n    0,\n    DEFAULT_FONT_SIZE,\n    DEFAULT_FONT_SIZE\n  ).data;\n  descent = 0;\n  for (let i = pixels.length - 1 - 3; i >= 0; i -= 4) {\n    if (pixels[i] > 0) {\n      descent = Math.ceil(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  // Draw an A with baseline at 0,DEFAULT_FONT_SIZE and then get the line\n  // number where a pixel has non-null red component (starting\n  // from top).\n  ctx.clearRect(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE);\n  ctx.strokeText(\"A\", 0, DEFAULT_FONT_SIZE);\n  pixels = ctx.getImageData(0, 0, DEFAULT_FONT_SIZE, DEFAULT_FONT_SIZE).data;\n  ascent = 0;\n  for (let i = 0, ii = pixels.length; i < ii; i += 4) {\n    if (pixels[i] > 0) {\n      ascent = DEFAULT_FONT_SIZE - Math.floor(i / 4 / DEFAULT_FONT_SIZE);\n      break;\n    }\n  }\n\n  ctx.canvas.width = ctx.canvas.height = 0;\n\n  if (ascent) {\n    const ratio = ascent / (ascent + descent);\n    ascentCache.set(fontFamily, ratio);\n    return ratio;\n  }\n\n  ascentCache.set(fontFamily, DEFAULT_FONT_ASCENT);\n  return DEFAULT_FONT_ASCENT;\n}\n\nfunction appendText(task, geom, styles) {\n  // Initialize all used properties to keep the caches monomorphic.\n  const textDiv = document.createElement(\"span\");\n  const textDivProperties = {\n    angle: 0,\n    canvasWidth: 0,\n    hasText: geom.str !== \"\",\n    hasEOL: geom.hasEOL,\n    fontSize: 0,\n  };\n  task._textDivs.push(textDiv);\n\n  const tx = Util.transform(task._transform, geom.transform);\n  let angle = Math.atan2(tx[1], tx[0]);\n  const style = styles[geom.fontName];\n  if (style.vertical) {\n    angle += Math.PI / 2;\n  }\n  const fontHeight = Math.hypot(tx[2], tx[3]);\n  const fontAscent =\n    fontHeight * getAscent(style.fontFamily, task._isOffscreenCanvasSupported);\n\n  let left, top;\n  if (angle === 0) {\n    left = tx[4];\n    top = tx[5] - fontAscent;\n  } else {\n    left = tx[4] + fontAscent * Math.sin(angle);\n    top = tx[5] - fontAscent * Math.cos(angle);\n  }\n\n  const scaleFactorStr = \"calc(var(--scale-factor)*\";\n  const divStyle = textDiv.style;\n  // Setting the style properties individually, rather than all at once,\n  // should be OK since the `textDiv` isn't appended to the document yet.\n  if (task._container === task._rootContainer) {\n    divStyle.left = `${((100 * left) / task._pageWidth).toFixed(2)}%`;\n    divStyle.top = `${((100 * top) / task._pageHeight).toFixed(2)}%`;\n  } else {\n    // We're in a marked content span, hence we can't use percents.\n    divStyle.left = `${scaleFactorStr}${left.toFixed(2)}px)`;\n    divStyle.top = `${scaleFactorStr}${top.toFixed(2)}px)`;\n  }\n  divStyle.fontSize = `${scaleFactorStr}${fontHeight.toFixed(2)}px)`;\n  divStyle.fontFamily = style.fontFamily;\n\n  textDivProperties.fontSize = fontHeight;\n\n  // Keeps screen readers from pausing on every new text span.\n  textDiv.setAttribute(\"role\", \"presentation\");\n\n  textDiv.textContent = geom.str;\n  // geom.dir may be 'ttb' for vertical texts.\n  textDiv.dir = geom.dir;\n\n  // `fontName` is only used by the FontInspector, and we only use `dataset`\n  // here to make the font name available in the debugger.\n  if (task._fontInspectorEnabled) {\n    textDiv.dataset.fontName = geom.fontName;\n  }\n  if (angle !== 0) {\n    textDivProperties.angle = angle * (180 / Math.PI);\n  }\n  // We don't bother scaling single-char text divs, because it has very\n  // little effect on text highlighting. This makes scrolling on docs with\n  // lots of such divs a lot faster.\n  let shouldScaleText = false;\n  if (geom.str.length > 1) {\n    shouldScaleText = true;\n  } else if (geom.str !== \" \" && geom.transform[0] !== geom.transform[3]) {\n    const absScaleX = Math.abs(geom.transform[0]),\n      absScaleY = Math.abs(geom.transform[3]);\n    // When the horizontal/vertical scaling differs significantly, also scale\n    // even single-char text to improve highlighting (fixes issue11713.pdf).\n    if (\n      absScaleX !== absScaleY &&\n      Math.max(absScaleX, absScaleY) / Math.min(absScaleX, absScaleY) > 1.5\n    ) {\n      shouldScaleText = true;\n    }\n  }\n  if (shouldScaleText) {\n    textDivProperties.canvasWidth = style.vertical ? geom.height : geom.width;\n  }\n  task._textDivProperties.set(textDiv, textDivProperties);\n  if (task._isReadableStream) {\n    task._layoutText(textDiv);\n  }\n}\n\nfunction layout(params) {\n  const { div, scale, properties, ctx, prevFontSize, prevFontFamily } = params;\n  const { style } = div;\n  let transform = \"\";\n  if (properties.canvasWidth !== 0 && properties.hasText) {\n    const { fontFamily } = style;\n    const { canvasWidth, fontSize } = properties;\n\n    if (prevFontSize !== fontSize || prevFontFamily !== fontFamily) {\n      ctx.font = `${fontSize * scale}px ${fontFamily}`;\n      params.prevFontSize = fontSize;\n      params.prevFontFamily = fontFamily;\n    }\n\n    // Only measure the width for multi-char text divs, see `appendText`.\n    const { width } = ctx.measureText(div.textContent);\n\n    if (width > 0) {\n      transform = `scaleX(${(canvasWidth * scale) / width})`;\n    }\n  }\n  if (properties.angle !== 0) {\n    transform = `rotate(${properties.angle}deg) ${transform}`;\n  }\n  if (transform.length > 0) {\n    style.transform = transform;\n  }\n}\n\nfunction render(task) {\n  if (task._canceled) {\n    return;\n  }\n  const textDivs = task._textDivs;\n  const capability = task._capability;\n  const textDivsLength = textDivs.length;\n\n  // No point in rendering many divs as it would make the browser\n  // unusable even after the divs are rendered.\n  if (textDivsLength > MAX_TEXT_DIVS_TO_RENDER) {\n    capability.resolve();\n    return;\n  }\n\n  if (!task._isReadableStream) {\n    for (const textDiv of textDivs) {\n      task._layoutText(textDiv);\n    }\n  }\n  capability.resolve();\n}\n\nclass TextLayerRenderTask {\n  constructor({\n    textContentSource,\n    container,\n    viewport,\n    textDivs,\n    textDivProperties,\n    textContentItemsStr,\n    isOffscreenCanvasSupported,\n  }) {\n    this._textContentSource = textContentSource;\n    this._isReadableStream = textContentSource instanceof ReadableStream;\n    this._container = this._rootContainer = container;\n    this._textDivs = textDivs || [];\n    this._textContentItemsStr = textContentItemsStr || [];\n    this._isOffscreenCanvasSupported = isOffscreenCanvasSupported;\n    this._fontInspectorEnabled = !!globalThis.FontInspector?.enabled;\n\n    this._reader = null;\n    this._textDivProperties = textDivProperties || new WeakMap();\n    this._canceled = false;\n    this._capability = new PromiseCapability();\n    this._layoutTextParams = {\n      prevFontSize: null,\n      prevFontFamily: null,\n      div: null,\n      scale: viewport.scale * (globalThis.devicePixelRatio || 1),\n      properties: null,\n      ctx: getCtx(0, isOffscreenCanvasSupported),\n    };\n    const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n    this._transform = [1, 0, 0, -1, -pageX, pageY + pageHeight];\n    this._pageWidth = pageWidth;\n    this._pageHeight = pageHeight;\n\n    setLayerDimensions(container, viewport);\n\n    // Always clean-up the temporary canvas once rendering is no longer pending.\n    this._capability.promise\n      .finally(() => {\n        this._layoutTextParams = null;\n      })\n      .catch(() => {\n        // Avoid \"Uncaught promise\" messages in the console.\n      });\n  }\n\n  /**\n   * Promise for textLayer rendering task completion.\n   * @type {Promise<void>}\n   */\n  get promise() {\n    return this._capability.promise;\n  }\n\n  /**\n   * Cancel rendering of the textLayer.\n   */\n  cancel() {\n    this._canceled = true;\n    if (this._reader) {\n      this._reader\n        .cancel(new AbortException(\"TextLayer task cancelled.\"))\n        .catch(() => {\n          // Avoid \"Uncaught promise\" messages in the console.\n        });\n      this._reader = null;\n    }\n    this._capability.reject(new AbortException(\"TextLayer task cancelled.\"));\n  }\n\n  /**\n   * @private\n   */\n  _processItems(items, styleCache) {\n    for (const item of items) {\n      if (item.str === undefined) {\n        if (\n          item.type === \"beginMarkedContentProps\" ||\n          item.type === \"beginMarkedContent\"\n        ) {\n          const parent = this._container;\n          this._container = document.createElement(\"span\");\n          this._container.classList.add(\"markedContent\");\n          if (item.id !== null) {\n            this._container.setAttribute(\"id\", `${item.id}`);\n          }\n          parent.append(this._container);\n        } else if (item.type === \"endMarkedContent\") {\n          this._container = this._container.parentNode;\n        }\n        continue;\n      }\n      this._textContentItemsStr.push(item.str);\n      appendText(this, item, styleCache);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _layoutText(textDiv) {\n    const textDivProperties = (this._layoutTextParams.properties =\n      this._textDivProperties.get(textDiv));\n    this._layoutTextParams.div = textDiv;\n    layout(this._layoutTextParams);\n\n    if (textDivProperties.hasText) {\n      this._container.append(textDiv);\n    }\n    if (textDivProperties.hasEOL) {\n      const br = document.createElement(\"br\");\n      br.setAttribute(\"role\", \"presentation\");\n      this._container.append(br);\n    }\n  }\n\n  /**\n   * @private\n   */\n  _render() {\n    const capability = new PromiseCapability();\n    let styleCache = Object.create(null);\n\n    if (this._isReadableStream) {\n      const pump = () => {\n        this._reader.read().then(({ value, done }) => {\n          if (done) {\n            capability.resolve();\n            return;\n          }\n\n          Object.assign(styleCache, value.styles);\n          this._processItems(value.items, styleCache);\n          pump();\n        }, capability.reject);\n      };\n\n      this._reader = this._textContentSource.getReader();\n      pump();\n    } else if (this._textContentSource) {\n      const { items, styles } = this._textContentSource;\n      this._processItems(items, styles);\n      capability.resolve();\n    } else {\n      throw new Error('No \"textContentSource\" parameter specified.');\n    }\n\n    capability.promise.then(() => {\n      styleCache = null;\n      render(this);\n    }, this._capability.reject);\n  }\n}\n\n/**\n * @param {TextLayerRenderParameters} params\n * @returns {TextLayerRenderTask}\n */\nfunction renderTextLayer(params) {\n  if (\n    (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"GENERIC\")) &&\n    !params.textContentSource &&\n    (params.textContent || params.textContentStream)\n  ) {\n    deprecated(\n      \"The TextLayerRender `textContent`/`textContentStream` parameters \" +\n        \"will be removed in the future, please use `textContentSource` instead.\"\n    );\n    params.textContentSource = params.textContent || params.textContentStream;\n  }\n  if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"GENERIC && !TESTING\")) {\n    const { container, viewport } = params;\n    const style = getComputedStyle(container);\n    const visibility = style.getPropertyValue(\"visibility\");\n    const scaleFactor = parseFloat(style.getPropertyValue(\"--scale-factor\"));\n\n    if (\n      visibility === \"visible\" &&\n      (!scaleFactor || Math.abs(scaleFactor - viewport.scale) > 1e-5)\n    ) {\n      console.error(\n        \"The `--scale-factor` CSS-variable must be set, \" +\n          \"to the same value as `viewport.scale`, \" +\n          \"either on the `container`-element itself or higher up in the DOM.\"\n      );\n    }\n  }\n  const task = new TextLayerRenderTask(params);\n  task._render();\n  return task;\n}\n\n/**\n * @param {TextLayerUpdateParameters} params\n * @returns {undefined}\n */\nfunction updateTextLayer({\n  container,\n  viewport,\n  textDivs,\n  textDivProperties,\n  isOffscreenCanvasSupported,\n  mustRotate = true,\n  mustRescale = true,\n}) {\n  if (mustRotate) {\n    setLayerDimensions(container, { rotation: viewport.rotation });\n  }\n\n  if (mustRescale) {\n    const ctx = getCtx(0, isOffscreenCanvasSupported);\n    const scale = viewport.scale * (globalThis.devicePixelRatio || 1);\n    const params = {\n      prevFontSize: null,\n      prevFontFamily: null,\n      div: null,\n      scale,\n      properties: null,\n      ctx,\n    };\n    for (const div of textDivs) {\n      params.properties = textDivProperties.get(div);\n      params.div = div;\n      layout(params);\n    }\n  }\n}\n\nexport { renderTextLayer, TextLayerRenderTask, updateTextLayer };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./tools.js\").AnnotationEditorUIManager} AnnotationEditorUIManager */\n/** @typedef {import(\"../display_utils.js\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../../../web/text_accessibility.js\").TextAccessibilityManager} TextAccessibilityManager */\n/** @typedef {import(\"../../../web/interfaces\").IL10n} IL10n */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../annotation_layer.js\").AnnotationLayer} AnnotationLayer */\n\nimport { AnnotationEditorType, FeatureTest } from \"../../shared/util.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { FreeTextEditor } from \"./freetext.js\";\nimport { InkEditor } from \"./ink.js\";\nimport { setLayerDimensions } from \"../display_utils.js\";\nimport { StampEditor } from \"./stamp.js\";\n\n/**\n * @typedef {Object} AnnotationEditorLayerOptions\n * @property {Object} mode\n * @property {HTMLDivElement} div\n * @property {AnnotationEditorUIManager} uiManager\n * @property {boolean} enabled\n * @property {TextAccessibilityManager} [accessibilityManager]\n * @property {number} pageIndex\n * @property {IL10n} l10n\n * @property {AnnotationLayer} [annotationLayer]\n * @property {PageViewport} viewport\n */\n\n/**\n * @typedef {Object} RenderEditorLayerOptions\n * @property {PageViewport} viewport\n */\n\n/**\n * Manage all the different editors on a page.\n */\nclass AnnotationEditorLayer {\n  #accessibilityManager;\n\n  #allowClick = false;\n\n  #annotationLayer = null;\n\n  #boundPointerup = this.pointerup.bind(this);\n\n  #boundPointerdown = this.pointerdown.bind(this);\n\n  #editors = new Map();\n\n  #hadPointerDown = false;\n\n  #isCleaningUp = false;\n\n  #isDisabling = false;\n\n  #uiManager;\n\n  static _initialized = false;\n\n  /**\n   * @param {AnnotationEditorLayerOptions} options\n   */\n  constructor({\n    uiManager,\n    pageIndex,\n    div,\n    accessibilityManager,\n    annotationLayer,\n    viewport,\n    l10n,\n  }) {\n    const editorTypes = [FreeTextEditor, InkEditor, StampEditor];\n    if (!AnnotationEditorLayer._initialized) {\n      AnnotationEditorLayer._initialized = true;\n      for (const editorType of editorTypes) {\n        editorType.initialize(l10n);\n      }\n    }\n    uiManager.registerEditorTypes(editorTypes);\n\n    this.#uiManager = uiManager;\n    this.pageIndex = pageIndex;\n    this.div = div;\n    this.#accessibilityManager = accessibilityManager;\n    this.#annotationLayer = annotationLayer;\n    this.viewport = viewport;\n\n    this.#uiManager.addLayer(this);\n  }\n\n  get isEmpty() {\n    return this.#editors.size === 0;\n  }\n\n  /**\n   * Update the toolbar if it's required to reflect the tool currently used.\n   * @param {number} mode\n   */\n  updateToolbar(mode) {\n    this.#uiManager.updateToolbar(mode);\n  }\n\n  /**\n   * The mode has changed: it must be updated.\n   * @param {number} mode\n   */\n  updateMode(mode = this.#uiManager.getMode()) {\n    this.#cleanup();\n    if (mode === AnnotationEditorType.INK) {\n      // We always want to an ink editor ready to draw in.\n      this.addInkEditorIfNeeded(false);\n      this.disableClick();\n    } else {\n      this.enableClick();\n    }\n\n    if (mode !== AnnotationEditorType.NONE) {\n      this.div.classList.toggle(\n        \"freeTextEditing\",\n        mode === AnnotationEditorType.FREETEXT\n      );\n      this.div.classList.toggle(\n        \"inkEditing\",\n        mode === AnnotationEditorType.INK\n      );\n      this.div.classList.toggle(\n        \"stampEditing\",\n        mode === AnnotationEditorType.STAMP\n      );\n      this.div.hidden = false;\n    }\n  }\n\n  addInkEditorIfNeeded(isCommitting) {\n    if (\n      !isCommitting &&\n      this.#uiManager.getMode() !== AnnotationEditorType.INK\n    ) {\n      return;\n    }\n\n    if (!isCommitting) {\n      // We're removing an editor but an empty one can already exist so in this\n      // case we don't need to create a new one.\n      for (const editor of this.#editors.values()) {\n        if (editor.isEmpty()) {\n          editor.setInBackground();\n          return;\n        }\n      }\n    }\n\n    const editor = this.#createAndAddNewEditor(\n      { offsetX: 0, offsetY: 0 },\n      /* isCentered = */ false\n    );\n    editor.setInBackground();\n  }\n\n  /**\n   * Set the editing state.\n   * @param {boolean} isEditing\n   */\n  setEditingState(isEditing) {\n    this.#uiManager.setEditingState(isEditing);\n  }\n\n  /**\n   * Add some commands into the CommandManager (undo/redo stuff).\n   * @param {Object} params\n   */\n  addCommands(params) {\n    this.#uiManager.addCommands(params);\n  }\n\n  /**\n   * Enable pointer events on the main div in order to enable\n   * editor creation.\n   */\n  enable() {\n    this.div.style.pointerEvents = \"auto\";\n    const annotationElementIds = new Set();\n    for (const editor of this.#editors.values()) {\n      editor.enableEditing();\n      if (editor.annotationElementId) {\n        annotationElementIds.add(editor.annotationElementId);\n      }\n    }\n\n    if (!this.#annotationLayer) {\n      return;\n    }\n\n    const editables = this.#annotationLayer.getEditableAnnotations();\n    for (const editable of editables) {\n      // The element must be hidden whatever its state is.\n      editable.hide();\n      if (this.#uiManager.isDeletedAnnotationElement(editable.data.id)) {\n        continue;\n      }\n      if (annotationElementIds.has(editable.data.id)) {\n        continue;\n      }\n      const editor = this.deserialize(editable);\n      if (!editor) {\n        continue;\n      }\n      this.addOrRebuild(editor);\n      editor.enableEditing();\n    }\n  }\n\n  /**\n   * Disable editor creation.\n   */\n  disable() {\n    this.#isDisabling = true;\n    this.div.style.pointerEvents = \"none\";\n    const hiddenAnnotationIds = new Set();\n    for (const editor of this.#editors.values()) {\n      editor.disableEditing();\n      if (!editor.annotationElementId || editor.serialize() !== null) {\n        hiddenAnnotationIds.add(editor.annotationElementId);\n        continue;\n      }\n      this.getEditableAnnotation(editor.annotationElementId)?.show();\n      editor.remove();\n    }\n\n    if (this.#annotationLayer) {\n      // Show the annotations that were hidden in enable().\n      const editables = this.#annotationLayer.getEditableAnnotations();\n      for (const editable of editables) {\n        const { id } = editable.data;\n        if (\n          hiddenAnnotationIds.has(id) ||\n          this.#uiManager.isDeletedAnnotationElement(id)\n        ) {\n          continue;\n        }\n        editable.show();\n      }\n    }\n\n    this.#cleanup();\n    if (this.isEmpty) {\n      this.div.hidden = true;\n    }\n    this.#isDisabling = false;\n  }\n\n  getEditableAnnotation(id) {\n    return this.#annotationLayer?.getEditableAnnotation(id) || null;\n  }\n\n  /**\n   * Set the current editor.\n   * @param {AnnotationEditor} editor\n   */\n  setActiveEditor(editor) {\n    const currentActive = this.#uiManager.getActive();\n    if (currentActive === editor) {\n      return;\n    }\n\n    this.#uiManager.setActiveEditor(editor);\n  }\n\n  enableClick() {\n    this.div.addEventListener(\"pointerdown\", this.#boundPointerdown);\n    this.div.addEventListener(\"pointerup\", this.#boundPointerup);\n  }\n\n  disableClick() {\n    this.div.removeEventListener(\"pointerdown\", this.#boundPointerdown);\n    this.div.removeEventListener(\"pointerup\", this.#boundPointerup);\n  }\n\n  attach(editor) {\n    this.#editors.set(editor.id, editor);\n    const { annotationElementId } = editor;\n    if (\n      annotationElementId &&\n      this.#uiManager.isDeletedAnnotationElement(annotationElementId)\n    ) {\n      this.#uiManager.removeDeletedAnnotationElement(editor);\n    }\n  }\n\n  detach(editor) {\n    this.#editors.delete(editor.id);\n    this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n\n    if (!this.#isDisabling && editor.annotationElementId) {\n      this.#uiManager.addDeletedAnnotationElement(editor);\n    }\n  }\n\n  /**\n   * Remove an editor.\n   * @param {AnnotationEditor} editor\n   */\n  remove(editor) {\n    // Since we can undo a removal we need to keep the\n    // parent property as it is, so don't null it!\n\n    this.detach(editor);\n    this.#uiManager.removeEditor(editor);\n    if (editor.div.contains(document.activeElement)) {\n      setTimeout(() => {\n        // When the div is removed from DOM the focus can move on the\n        // document.body, so we need to move it back to the main container.\n        this.#uiManager.focusMainContainer();\n      }, 0);\n    }\n    editor.div.remove();\n    editor.isAttachedToDOM = false;\n\n    if (!this.#isCleaningUp) {\n      this.addInkEditorIfNeeded(/* isCommitting = */ false);\n    }\n  }\n\n  /**\n   * An editor can have a different parent, for example after having\n   * being dragged and droped from a page to another.\n   * @param {AnnotationEditor} editor\n   */\n  changeParent(editor) {\n    if (editor.parent === this) {\n      return;\n    }\n\n    if (editor.annotationElementId) {\n      this.#uiManager.addDeletedAnnotationElement(editor.annotationElementId);\n      AnnotationEditor.deleteAnnotationElement(editor);\n      editor.annotationElementId = null;\n    }\n\n    this.attach(editor);\n    editor.parent?.detach(editor);\n    editor.setParent(this);\n    if (editor.div && editor.isAttachedToDOM) {\n      editor.div.remove();\n      this.div.append(editor.div);\n    }\n  }\n\n  /**\n   * Add a new editor in the current view.\n   * @param {AnnotationEditor} editor\n   */\n  add(editor) {\n    this.changeParent(editor);\n    this.#uiManager.addEditor(editor);\n    this.attach(editor);\n\n    if (!editor.isAttachedToDOM) {\n      const div = editor.render();\n      this.div.append(div);\n      editor.isAttachedToDOM = true;\n    }\n\n    // The editor will be correctly moved into the DOM (see fixAndSetPosition).\n    editor.fixAndSetPosition();\n    editor.onceAdded();\n    this.#uiManager.addToAnnotationStorage(editor);\n  }\n\n  moveEditorInDOM(editor) {\n    if (!editor.isAttachedToDOM) {\n      return;\n    }\n\n    const { activeElement } = document;\n    if (editor.div.contains(activeElement)) {\n      // When the div is moved in the DOM the focus can move somewhere else,\n      // so we want to be sure that the focus will stay on the editor but we\n      // don't want to call any focus callbacks, hence we disable them and only\n      // re-enable them when the editor has the focus.\n      editor._focusEventsAllowed = false;\n      setTimeout(() => {\n        if (!editor.div.contains(document.activeElement)) {\n          editor.div.addEventListener(\n            \"focusin\",\n            () => {\n              editor._focusEventsAllowed = true;\n            },\n            { once: true }\n          );\n          activeElement.focus();\n        } else {\n          editor._focusEventsAllowed = true;\n        }\n      }, 0);\n    }\n\n    editor._structTreeParentId = this.#accessibilityManager?.moveElementInDOM(\n      this.div,\n      editor.div,\n      editor.contentDiv,\n      /* isRemovable = */ true\n    );\n  }\n\n  /**\n   * Add or rebuild depending if it has been removed or not.\n   * @param {AnnotationEditor} editor\n   */\n  addOrRebuild(editor) {\n    if (editor.needsToBeRebuilt()) {\n      editor.rebuild();\n    } else {\n      this.add(editor);\n    }\n  }\n\n  /**\n   * Add a new editor and make this addition undoable.\n   * @param {AnnotationEditor} editor\n   */\n  addUndoableEditor(editor) {\n    const cmd = () => editor._uiManager.rebuild(editor);\n    const undo = () => {\n      editor.remove();\n    };\n\n    this.addCommands({ cmd, undo, mustExec: false });\n  }\n\n  /**\n   * Get an id for an editor.\n   * @returns {string}\n   */\n  getNextId() {\n    return this.#uiManager.getId();\n  }\n\n  /**\n   * Create a new editor\n   * @param {Object} params\n   * @returns {AnnotationEditor}\n   */\n  #createNewEditor(params) {\n    switch (this.#uiManager.getMode()) {\n      case AnnotationEditorType.FREETEXT:\n        return new FreeTextEditor(params);\n      case AnnotationEditorType.INK:\n        return new InkEditor(params);\n      case AnnotationEditorType.STAMP:\n        return new StampEditor(params);\n    }\n    return null;\n  }\n\n  /**\n   * Paste some content into a new editor.\n   * @param {number} mode\n   * @param {Object} params\n   */\n  pasteEditor(mode, params) {\n    this.#uiManager.updateToolbar(mode);\n    this.#uiManager.updateMode(mode);\n\n    const { offsetX, offsetY } = this.#getCenterPoint();\n    const id = this.getNextId();\n    const editor = this.#createNewEditor({\n      parent: this,\n      id,\n      x: offsetX,\n      y: offsetY,\n      uiManager: this.#uiManager,\n      isCentered: true,\n      ...params,\n    });\n    if (editor) {\n      this.add(editor);\n    }\n  }\n\n  /**\n   * Create a new editor\n   * @param {Object} data\n   * @returns {AnnotationEditor}\n   */\n  deserialize(data) {\n    switch (data.annotationType ?? data.annotationEditorType) {\n      case AnnotationEditorType.FREETEXT:\n        return FreeTextEditor.deserialize(data, this, this.#uiManager);\n      case AnnotationEditorType.INK:\n        return InkEditor.deserialize(data, this, this.#uiManager);\n      case AnnotationEditorType.STAMP:\n        return StampEditor.deserialize(data, this, this.#uiManager);\n    }\n    return null;\n  }\n\n  /**\n   * Create and add a new editor.\n   * @param {PointerEvent} event\n   * @param {boolean} isCentered\n   * @returns {AnnotationEditor}\n   */\n  #createAndAddNewEditor(event, isCentered) {\n    const id = this.getNextId();\n    const editor = this.#createNewEditor({\n      parent: this,\n      id,\n      x: event.offsetX,\n      y: event.offsetY,\n      uiManager: this.#uiManager,\n      isCentered,\n    });\n    if (editor) {\n      this.add(editor);\n    }\n\n    return editor;\n  }\n\n  #getCenterPoint() {\n    const { x, y, width, height } = this.div.getBoundingClientRect();\n    const tlX = Math.max(0, x);\n    const tlY = Math.max(0, y);\n    const brX = Math.min(window.innerWidth, x + width);\n    const brY = Math.min(window.innerHeight, y + height);\n    const centerX = (tlX + brX) / 2 - x;\n    const centerY = (tlY + brY) / 2 - y;\n    const [offsetX, offsetY] =\n      this.viewport.rotation % 180 === 0\n        ? [centerX, centerY]\n        : [centerY, centerX];\n\n    return { offsetX, offsetY };\n  }\n\n  /**\n   * Create and add a new editor.\n   */\n  addNewEditor() {\n    this.#createAndAddNewEditor(\n      this.#getCenterPoint(),\n      /* isCentered = */ true\n    );\n  }\n\n  /**\n   * Set the last selected editor.\n   * @param {AnnotationEditor} editor\n   */\n  setSelected(editor) {\n    this.#uiManager.setSelected(editor);\n  }\n\n  /**\n   * Add or remove an editor the current selection.\n   * @param {AnnotationEditor} editor\n   */\n  toggleSelected(editor) {\n    this.#uiManager.toggleSelected(editor);\n  }\n\n  /**\n   * Check if the editor is selected.\n   * @param {AnnotationEditor} editor\n   */\n  isSelected(editor) {\n    return this.#uiManager.isSelected(editor);\n  }\n\n  /**\n   * Unselect an editor.\n   * @param {AnnotationEditor} editor\n   */\n  unselect(editor) {\n    this.#uiManager.unselect(editor);\n  }\n\n  /**\n   * Pointerup callback.\n   * @param {PointerEvent} event\n   */\n  pointerup(event) {\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Don't create an editor on right click.\n      return;\n    }\n\n    if (event.target !== this.div) {\n      return;\n    }\n\n    if (!this.#hadPointerDown) {\n      // It can happen when the user starts a drag inside a text editor\n      // and then releases the mouse button outside of it. In such a case\n      // we don't want to create a new editor, hence we check that a pointerdown\n      // occurred on this div previously.\n      return;\n    }\n    this.#hadPointerDown = false;\n\n    if (!this.#allowClick) {\n      this.#allowClick = true;\n      return;\n    }\n\n    if (this.#uiManager.getMode() === AnnotationEditorType.STAMP) {\n      this.#uiManager.unselectAll();\n      return;\n    }\n\n    this.#createAndAddNewEditor(event, /* isCentered = */ false);\n  }\n\n  /**\n   * Pointerdown callback.\n   * @param {PointerEvent} event\n   */\n  pointerdown(event) {\n    if (this.#hadPointerDown) {\n      // It's possible to have a second pointerdown event before a pointerup one\n      // when the user puts a finger on a touchscreen and then add a second one\n      // to start a pinch-to-zoom gesture.\n      // That said, in case it's possible to have two pointerdown events with\n      // a mouse, we don't want to create a new editor in such a case either.\n      this.#hadPointerDown = false;\n      return;\n    }\n    const { isMac } = FeatureTest.platform;\n    if (event.button !== 0 || (event.ctrlKey && isMac)) {\n      // Do nothing on right click.\n      return;\n    }\n\n    if (event.target !== this.div) {\n      return;\n    }\n\n    this.#hadPointerDown = true;\n\n    const editor = this.#uiManager.getActive();\n    this.#allowClick = !editor || editor.isEmpty();\n  }\n\n  /**\n   *\n   * @param {AnnotationEditor} editor\n   * @param {number} x\n   * @param {number} y\n   * @returns\n   */\n  findNewParent(editor, x, y) {\n    const layer = this.#uiManager.findParent(x, y);\n    if (layer === null || layer === this) {\n      return false;\n    }\n    layer.changeParent(editor);\n    return true;\n  }\n\n  /**\n   * Destroy the main editor.\n   */\n  destroy() {\n    if (this.#uiManager.getActive()?.parent === this) {\n      // We need to commit the current editor before destroying the layer.\n      this.#uiManager.commitOrRemove();\n      this.#uiManager.setActiveEditor(null);\n    }\n\n    for (const editor of this.#editors.values()) {\n      this.#accessibilityManager?.removePointerInTextLayer(editor.contentDiv);\n      editor.setParent(null);\n      editor.isAttachedToDOM = false;\n      editor.div.remove();\n    }\n    this.div = null;\n    this.#editors.clear();\n    this.#uiManager.removeLayer(this);\n  }\n\n  #cleanup() {\n    // When we're cleaning up, some editors are removed but we don't want\n    // to add a new one which will induce an addition in this.#editors, hence\n    // an infinite loop.\n    this.#isCleaningUp = true;\n    for (const editor of this.#editors.values()) {\n      if (editor.isEmpty()) {\n        editor.remove();\n      }\n    }\n    this.#isCleaningUp = false;\n  }\n\n  /**\n   * Render the main editor.\n   * @param {RenderEditorLayerOptions} parameters\n   */\n  render({ viewport }) {\n    this.viewport = viewport;\n    setLayerDimensions(this.div, viewport);\n    for (const editor of this.#uiManager.getEditors(this.pageIndex)) {\n      this.add(editor);\n    }\n    this.updateMode();\n  }\n\n  /**\n   * Update the main editor.\n   * @param {RenderEditorLayerOptions} parameters\n   */\n  update({ viewport }) {\n    // Editors have their dimensions/positions in percent so to avoid any\n    // issues (see #15582), we must commit the current one before changing\n    // the viewport.\n    this.#uiManager.commitOrRemove();\n\n    this.viewport = viewport;\n    setLayerDimensions(this.div, { rotation: viewport.rotation });\n    this.updateMode();\n  }\n\n  /**\n   * Get page dimensions.\n   * @returns {Object} dimensions.\n   */\n  get pageDimensions() {\n    const { pageWidth, pageHeight } = this.viewport.rawDims;\n    return [pageWidth, pageHeight];\n  }\n}\n\nexport { AnnotationEditorLayer };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_editor_layer.js\").AnnotationEditorLayer} AnnotationEditorLayer */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  assert,\n  LINE_FACTOR,\n  shadow,\n  Util,\n} from \"../../shared/util.js\";\nimport {\n  AnnotationEditorUIManager,\n  bindEvents,\n  KeyboardManager,\n} from \"./tools.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { FreeTextAnnotationElement } from \"../annotation_layer.js\";\n\n/**\n * Basic text editor in order to create a FreeTex annotation.\n */\nclass FreeTextEditor extends AnnotationEditor {\n  #boundEditorDivBlur = this.editorDivBlur.bind(this);\n\n  #boundEditorDivFocus = this.editorDivFocus.bind(this);\n\n  #boundEditorDivInput = this.editorDivInput.bind(this);\n\n  #boundEditorDivKeydown = this.editorDivKeydown.bind(this);\n\n  #color;\n\n  #content = \"\";\n\n  #editorDivId = `${this.id}-editor`;\n\n  #fontSize;\n\n  #initialData = null;\n\n  static _freeTextDefaultContent = \"\";\n\n  static _internalPadding = 0;\n\n  static _defaultColor = null;\n\n  static _defaultFontSize = 10;\n\n  static get _keyboardManager() {\n    const proto = FreeTextEditor.prototype;\n\n    const arrowChecker = self => self.isEmpty();\n\n    const small = AnnotationEditorUIManager.TRANSLATE_SMALL;\n    const big = AnnotationEditorUIManager.TRANSLATE_BIG;\n\n    return shadow(\n      this,\n      \"_keyboardManager\",\n      new KeyboardManager([\n        [\n          // Commit the text in case the user use ctrl+s to save the document.\n          // The event must bubble in order to be caught by the viewer.\n          // See bug 1831574.\n          [\"ctrl+s\", \"mac+meta+s\", \"ctrl+p\", \"mac+meta+p\"],\n          proto.commitOrRemove,\n          { bubbles: true },\n        ],\n        [\n          [\"ctrl+Enter\", \"mac+meta+Enter\", \"Escape\", \"mac+Escape\"],\n          proto.commitOrRemove,\n        ],\n        [\n          [\"ArrowLeft\", \"mac+ArrowLeft\"],\n          proto._translateEmpty,\n          { args: [-small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowLeft\", \"mac+shift+ArrowLeft\"],\n          proto._translateEmpty,\n          { args: [-big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowRight\", \"mac+ArrowRight\"],\n          proto._translateEmpty,\n          { args: [small, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowRight\", \"mac+shift+ArrowRight\"],\n          proto._translateEmpty,\n          { args: [big, 0], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowUp\", \"mac+ArrowUp\"],\n          proto._translateEmpty,\n          { args: [0, -small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowUp\", \"mac+shift+ArrowUp\"],\n          proto._translateEmpty,\n          { args: [0, -big], checker: arrowChecker },\n        ],\n        [\n          [\"ArrowDown\", \"mac+ArrowDown\"],\n          proto._translateEmpty,\n          { args: [0, small], checker: arrowChecker },\n        ],\n        [\n          [\"ctrl+ArrowDown\", \"mac+shift+ArrowDown\"],\n          proto._translateEmpty,\n          { args: [0, big], checker: arrowChecker },\n        ],\n      ])\n    );\n  }\n\n  static _type = \"freetext\";\n\n  constructor(params) {\n    super({ ...params, name: \"freeTextEditor\" });\n    this.#color =\n      params.color ||\n      FreeTextEditor._defaultColor ||\n      AnnotationEditor._defaultLineColor;\n    this.#fontSize = params.fontSize || FreeTextEditor._defaultFontSize;\n  }\n\n  /** @inheritdoc */\n  static initialize(l10n) {\n    AnnotationEditor.initialize(l10n, {\n      strings: [\"free_text2_default_content\", \"editor_free_text2_aria_label\"],\n    });\n    const style = getComputedStyle(document.documentElement);\n\n    if (typeof PDFJSDev === \"undefined\" || PDFJSDev.test(\"TESTING\")) {\n      const lineHeight = parseFloat(\n        style.getPropertyValue(\"--freetext-line-height\")\n      );\n      assert(\n        lineHeight === LINE_FACTOR,\n        \"Update the CSS variable to agree with the constant.\"\n      );\n    }\n\n    this._internalPadding = parseFloat(\n      style.getPropertyValue(\"--freetext-padding\")\n    );\n  }\n\n  /** @inheritdoc */\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        FreeTextEditor._defaultFontSize = value;\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        FreeTextEditor._defaultColor = value;\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.FREETEXT_SIZE:\n        this.#updateFontSize(value);\n        break;\n      case AnnotationEditorParamsType.FREETEXT_COLOR:\n        this.#updateColor(value);\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  static get defaultPropertiesToUpdate() {\n    return [\n      [\n        AnnotationEditorParamsType.FREETEXT_SIZE,\n        FreeTextEditor._defaultFontSize,\n      ],\n      [\n        AnnotationEditorParamsType.FREETEXT_COLOR,\n        FreeTextEditor._defaultColor || AnnotationEditor._defaultLineColor,\n      ],\n    ];\n  }\n\n  /** @inheritdoc */\n  get propertiesToUpdate() {\n    return [\n      [AnnotationEditorParamsType.FREETEXT_SIZE, this.#fontSize],\n      [AnnotationEditorParamsType.FREETEXT_COLOR, this.#color],\n    ];\n  }\n\n  /**\n   * Update the font size and make this action as undoable.\n   * @param {number} fontSize\n   */\n  #updateFontSize(fontSize) {\n    const setFontsize = size => {\n      this.editorDiv.style.fontSize = `calc(${size}px * var(--scale-factor))`;\n      this.translate(0, -(size - this.#fontSize) * this.parentScale);\n      this.#fontSize = size;\n      this.#setEditorDimensions();\n    };\n    const savedFontsize = this.#fontSize;\n    this.addCommands({\n      cmd: () => {\n        setFontsize(fontSize);\n      },\n      undo: () => {\n        setFontsize(savedFontsize);\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.FREETEXT_SIZE,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the color and make this action undoable.\n   * @param {string} color\n   */\n  #updateColor(color) {\n    const savedColor = this.#color;\n    this.addCommands({\n      cmd: () => {\n        this.#color = this.editorDiv.style.color = color;\n      },\n      undo: () => {\n        this.#color = this.editorDiv.style.color = savedColor;\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.FREETEXT_COLOR,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Helper to translate the editor with the keyboard when it's empty.\n   * @param {number} x in page units.\n   * @param {number} y in page units.\n   */\n  _translateEmpty(x, y) {\n    this._uiManager.translateSelectedEditors(x, y, /* noCommit = */ true);\n  }\n\n  /** @inheritdoc */\n  getInitialTranslation() {\n    // The start of the base line is where the user clicked.\n    const scale = this.parentScale;\n    return [\n      -FreeTextEditor._internalPadding * scale,\n      -(FreeTextEditor._internalPadding + this.#fontSize) * scale,\n    ];\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    if (!this.parent) {\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilting it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n    }\n  }\n\n  /** @inheritdoc */\n  enableEditMode() {\n    if (this.isInEditMode()) {\n      return;\n    }\n\n    this.parent.setEditingState(false);\n    this.parent.updateToolbar(AnnotationEditorType.FREETEXT);\n    super.enableEditMode();\n    this.overlayDiv.classList.remove(\"enabled\");\n    this.editorDiv.contentEditable = true;\n    this._isDraggable = false;\n    this.div.removeAttribute(\"aria-activedescendant\");\n    this.editorDiv.addEventListener(\"keydown\", this.#boundEditorDivKeydown);\n    this.editorDiv.addEventListener(\"focus\", this.#boundEditorDivFocus);\n    this.editorDiv.addEventListener(\"blur\", this.#boundEditorDivBlur);\n    this.editorDiv.addEventListener(\"input\", this.#boundEditorDivInput);\n  }\n\n  /** @inheritdoc */\n  disableEditMode() {\n    if (!this.isInEditMode()) {\n      return;\n    }\n\n    this.parent.setEditingState(true);\n    super.disableEditMode();\n    this.overlayDiv.classList.add(\"enabled\");\n    this.editorDiv.contentEditable = false;\n    this.div.setAttribute(\"aria-activedescendant\", this.#editorDivId);\n    this._isDraggable = true;\n    this.editorDiv.removeEventListener(\"keydown\", this.#boundEditorDivKeydown);\n    this.editorDiv.removeEventListener(\"focus\", this.#boundEditorDivFocus);\n    this.editorDiv.removeEventListener(\"blur\", this.#boundEditorDivBlur);\n    this.editorDiv.removeEventListener(\"input\", this.#boundEditorDivInput);\n\n    // On Chrome, the focus is given to <body> when contentEditable is set to\n    // false, hence we focus the div.\n    this.div.focus({\n      preventScroll: true /* See issue #15744 */,\n    });\n\n    // In case the blur callback hasn't been called.\n    this.isEditing = false;\n    this.parent.div.classList.add(\"freeTextEditing\");\n  }\n\n  /** @inheritdoc */\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    super.focusin(event);\n    if (event.target !== this.editorDiv) {\n      this.editorDiv.focus();\n    }\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    if (this.width) {\n      this.#cheatInitialRect();\n      // The editor was created in using ctrl+c.\n      return;\n    }\n    this.enableEditMode();\n    this.editorDiv.focus();\n    if (this._initialOptions?.isCentered) {\n      this.center();\n    }\n    this._initialOptions = null;\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return !this.editorDiv || this.editorDiv.innerText.trim() === \"\";\n  }\n\n  /** @inheritdoc */\n  remove() {\n    this.isEditing = false;\n    if (this.parent) {\n      this.parent.setEditingState(true);\n      this.parent.div.classList.add(\"freeTextEditing\");\n    }\n    super.remove();\n  }\n\n  /**\n   * Extract the text from this editor.\n   * @returns {string}\n   */\n  #extractText() {\n    const divs = this.editorDiv.getElementsByTagName(\"div\");\n    if (divs.length === 0) {\n      return this.editorDiv.innerText;\n    }\n    const buffer = [];\n    for (const div of divs) {\n      buffer.push(div.innerText.replace(/\\r\\n?|\\n/, \"\"));\n    }\n    return buffer.join(\"\\n\");\n  }\n\n  #setEditorDimensions() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n\n    let rect;\n    if (this.isAttachedToDOM) {\n      rect = this.div.getBoundingClientRect();\n    } else {\n      // This editor isn't on screen but we need to get its dimensions, so\n      // we just insert it in the DOM, get its bounding box and then remove it.\n      const { currentLayer, div } = this;\n      const savedDisplay = div.style.display;\n      div.style.display = \"hidden\";\n      currentLayer.div.append(this.div);\n      rect = div.getBoundingClientRect();\n      div.remove();\n      div.style.display = savedDisplay;\n    }\n\n    // The dimensions are relative to the rotation of the page, hence we need to\n    // take that into account (see issue #16636).\n    if (this.rotation % 180 === this.parentRotation % 180) {\n      this.width = rect.width / parentWidth;\n      this.height = rect.height / parentHeight;\n    } else {\n      this.width = rect.height / parentWidth;\n      this.height = rect.width / parentHeight;\n    }\n    this.fixAndSetPosition();\n  }\n\n  /**\n   * Commit the content we have in this editor.\n   * @returns {undefined}\n   */\n  commit() {\n    if (!this.isInEditMode()) {\n      return;\n    }\n\n    super.commit();\n    this.disableEditMode();\n    const savedText = this.#content;\n    const newText = (this.#content = this.#extractText().trimEnd());\n    if (savedText === newText) {\n      return;\n    }\n\n    const setText = text => {\n      this.#content = text;\n      if (!text) {\n        this.remove();\n        return;\n      }\n      this.#setContent();\n      this._uiManager.rebuild(this);\n      this.#setEditorDimensions();\n    };\n    this.addCommands({\n      cmd: () => {\n        setText(newText);\n      },\n      undo: () => {\n        setText(savedText);\n      },\n      mustExec: false,\n    });\n    this.#setEditorDimensions();\n  }\n\n  /** @inheritdoc */\n  shouldGetKeyboardEvents() {\n    return this.isInEditMode();\n  }\n\n  /** @inheritdoc */\n  enterInEditMode() {\n    this.enableEditMode();\n    this.editorDiv.focus();\n  }\n\n  /**\n   * ondblclick callback.\n   * @param {MouseEvent} event\n   */\n  dblclick(event) {\n    this.enterInEditMode();\n  }\n\n  /**\n   * onkeydown callback.\n   * @param {KeyboardEvent} event\n   */\n  keydown(event) {\n    if (event.target === this.div && event.key === \"Enter\") {\n      this.enterInEditMode();\n      // Avoid to add an unwanted new line.\n      event.preventDefault();\n    }\n  }\n\n  editorDivKeydown(event) {\n    FreeTextEditor._keyboardManager.exec(this, event);\n  }\n\n  editorDivFocus(event) {\n    this.isEditing = true;\n  }\n\n  editorDivBlur(event) {\n    this.isEditing = false;\n  }\n\n  editorDivInput(event) {\n    this.parent.div.classList.toggle(\"freeTextEditing\", this.isEmpty());\n  }\n\n  /** @inheritdoc */\n  disableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"comment\");\n    this.editorDiv.removeAttribute(\"aria-multiline\");\n  }\n\n  /** @inheritdoc */\n  enableEditing() {\n    this.editorDiv.setAttribute(\"role\", \"textbox\");\n    this.editorDiv.setAttribute(\"aria-multiline\", true);\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n    this.editorDiv = document.createElement(\"div\");\n    this.editorDiv.className = \"internal\";\n\n    this.editorDiv.setAttribute(\"id\", this.#editorDivId);\n    this.enableEditing();\n\n    AnnotationEditor._l10nPromise\n      .get(\"editor_free_text2_aria_label\")\n      .then(msg => this.editorDiv?.setAttribute(\"aria-label\", msg));\n\n    AnnotationEditor._l10nPromise\n      .get(\"free_text2_default_content\")\n      .then(msg => this.editorDiv?.setAttribute(\"default-content\", msg));\n    this.editorDiv.contentEditable = true;\n\n    const { style } = this.editorDiv;\n    style.fontSize = `calc(${this.#fontSize}px * var(--scale-factor))`;\n    style.color = this.#color;\n\n    this.div.append(this.editorDiv);\n\n    this.overlayDiv = document.createElement(\"div\");\n    this.overlayDiv.classList.add(\"overlay\", \"enabled\");\n    this.div.append(this.overlayDiv);\n\n    // TODO: implement paste callback.\n    // The goal is to sanitize and have something suitable for this\n    // editor.\n    bindEvents(this, this.div, [\"dblclick\", \"keydown\"]);\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      if (this.annotationElementId) {\n        // This stuff is hard to test: if something is changed here, please\n        // test with the following PDF file:\n        //  - freetexts.pdf\n        //  - rotated_freetexts.pdf\n        // Only small variations between the original annotation and its editor\n        // are allowed.\n\n        // position is the position of the first glyph in the annotation\n        // and it's relative to its container.\n        const { position } = this.#initialData;\n        let [tx, ty] = this.getInitialTranslation();\n        [tx, ty] = this.pageTranslationToScreen(tx, ty);\n        const [pageWidth, pageHeight] = this.pageDimensions;\n        const [pageX, pageY] = this.pageTranslation;\n        let posX, posY;\n        switch (this.rotation) {\n          case 0:\n            posX = baseX + (position[0] - pageX) / pageWidth;\n            posY = baseY + this.height - (position[1] - pageY) / pageHeight;\n            break;\n          case 90:\n            posX = baseX + (position[0] - pageX) / pageWidth;\n            posY = baseY - (position[1] - pageY) / pageHeight;\n            [tx, ty] = [ty, -tx];\n            break;\n          case 180:\n            posX = baseX - this.width + (position[0] - pageX) / pageWidth;\n            posY = baseY - (position[1] - pageY) / pageHeight;\n            [tx, ty] = [-tx, -ty];\n            break;\n          case 270:\n            posX =\n              baseX +\n              (position[0] - pageX - this.height * pageHeight) / pageWidth;\n            posY =\n              baseY +\n              (position[1] - pageY - this.width * pageWidth) / pageHeight;\n            [tx, ty] = [-ty, tx];\n            break;\n        }\n        this.setAt(posX * parentWidth, posY * parentHeight, tx, ty);\n      } else {\n        this.setAt(\n          baseX * parentWidth,\n          baseY * parentHeight,\n          this.width * parentWidth,\n          this.height * parentHeight\n        );\n      }\n\n      this.#setContent();\n      this._isDraggable = true;\n      this.editorDiv.contentEditable = false;\n    } else {\n      this._isDraggable = false;\n      this.editorDiv.contentEditable = true;\n    }\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      this.div.setAttribute(\"annotation-id\", this.annotationElementId);\n    }\n\n    return this.div;\n  }\n\n  #setContent() {\n    this.editorDiv.replaceChildren();\n    if (!this.#content) {\n      return;\n    }\n    for (const line of this.#content.split(\"\\n\")) {\n      const div = document.createElement(\"div\");\n      div.append(\n        line ? document.createTextNode(line) : document.createElement(\"br\")\n      );\n      this.editorDiv.append(div);\n    }\n  }\n\n  get contentDiv() {\n    return this.editorDiv;\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    let initialData = null;\n    if (data instanceof FreeTextAnnotationElement) {\n      const {\n        data: {\n          defaultAppearanceData: { fontSize, fontColor },\n          rect,\n          rotation,\n          id,\n        },\n        textContent,\n        textPosition,\n        parent: {\n          page: { pageNumber },\n        },\n      } = data;\n      // textContent is supposed to be an array of strings containing each line\n      // of text. However, it can be null or empty.\n      if (!textContent || textContent.length === 0) {\n        // Empty annotation.\n        return null;\n      }\n      initialData = data = {\n        annotationType: AnnotationEditorType.FREETEXT,\n        color: Array.from(fontColor),\n        fontSize,\n        value: textContent.join(\"\\n\"),\n        position: textPosition,\n        pageIndex: pageNumber - 1,\n        rect,\n        rotation,\n        id,\n        deleted: false,\n      };\n    }\n    const editor = super.deserialize(data, parent, uiManager);\n\n    editor.#fontSize = data.fontSize;\n    editor.#color = Util.makeHexColor(...data.color);\n    editor.#content = data.value;\n    editor.annotationElementId = data.id || null;\n    editor.#initialData = initialData;\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize(isForCopying = false) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    if (this.deleted) {\n      return {\n        pageIndex: this.pageIndex,\n        id: this.annotationElementId,\n        deleted: true,\n      };\n    }\n\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\n    const rect = this.getRect(padding, padding);\n    const color = AnnotationEditor._colorManager.convert(\n      this.isAttachedToDOM\n        ? getComputedStyle(this.editorDiv).color\n        : this.#color\n    );\n\n    const serialized = {\n      annotationType: AnnotationEditorType.FREETEXT,\n      color,\n      fontSize: this.#fontSize,\n      value: this.#content,\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n      structTreeParentId: this._structTreeParentId,\n    };\n\n    if (isForCopying) {\n      // Don't add the id when copying because the pasted editor mustn't be\n      // linked to an existing annotation.\n      return serialized;\n    }\n\n    if (this.annotationElementId && !this.#hasElementChanged(serialized)) {\n      return null;\n    }\n\n    serialized.id = this.annotationElementId;\n\n    return serialized;\n  }\n\n  #hasElementChanged(serialized) {\n    const { value, fontSize, color, rect, pageIndex } = this.#initialData;\n\n    return (\n      serialized.value !== value ||\n      serialized.fontSize !== fontSize ||\n      serialized.rect.some((x, i) => Math.abs(x - rect[i]) >= 1) ||\n      serialized.color.some((c, i) => c !== color[i]) ||\n      serialized.pageIndex !== pageIndex\n    );\n  }\n\n  #cheatInitialRect(delayed = false) {\n    // The annotation has a rect but the editor has an other one.\n    // When we want to know if the annotation has changed (e.g. has been moved)\n    // we must compare the editor initial rect with the current one.\n    // So this method is a hack to have a way to compare the real rects.\n    if (!this.annotationElementId) {\n      return;\n    }\n\n    this.#setEditorDimensions();\n    if (!delayed && (this.width === 0 || this.height === 0)) {\n      setTimeout(() => this.#cheatInitialRect(/* delayed = */ true), 0);\n      return;\n    }\n\n    const padding = FreeTextEditor._internalPadding * this.parentScale;\n    this.#initialData.rect = this.getRect(padding, padding);\n  }\n}\n\nexport { FreeTextEditor };\n", "/* Copyright 2014 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** @typedef {import(\"./api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../../web/text_accessibility.js\").TextAccessibilityManager} TextAccessibilityManager */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"../../web/interfaces\").IDownloadManager} IDownloadManager */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport {\n  AnnotationBorderStyleType,\n  AnnotationEditorType,\n  AnnotationPrefix,\n  AnnotationType,\n  FeatureTest,\n  LINE_FACTOR,\n  shadow,\n  unreachable,\n  Util,\n  warn,\n} from \"../shared/util.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  PDFDateString,\n  setLayerDimensions,\n} from \"./display_utils.js\";\nimport { AnnotationStorage } from \"./annotation_storage.js\";\nimport { ColorConverters } from \"../shared/scripting_utils.js\";\nimport { NullL10n } from \"display-l10n_utils\";\nimport { XfaLayer } from \"./xfa_layer.js\";\n\nconst DEFAULT_TAB_INDEX = 1000;\nconst DEFAULT_FONT_SIZE = 9;\nconst GetElementsByNameSet = new WeakSet();\n\nfunction getRectDims(rect) {\n  return {\n    width: rect[2] - rect[0],\n    height: rect[3] - rect[1],\n  };\n}\n\n/**\n * @typedef {Object} AnnotationElementParameters\n * @property {Object} data\n * @property {HTMLDivElement} layer\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {Object} svgFactory\n * @property {boolean} [enableScripting]\n * @property {boolean} [hasJSActions]\n * @property {Object} [fieldObjects]\n */\n\nclass AnnotationElementFactory {\n  /**\n   * @param {AnnotationElementParameters} parameters\n   * @returns {AnnotationElement}\n   */\n  static create(parameters) {\n    const subtype = parameters.data.annotationType;\n\n    switch (subtype) {\n      case AnnotationType.LINK:\n        return new LinkAnnotationElement(parameters);\n\n      case AnnotationType.TEXT:\n        return new TextAnnotationElement(parameters);\n\n      case AnnotationType.WIDGET:\n        const fieldType = parameters.data.fieldType;\n\n        switch (fieldType) {\n          case \"Tx\":\n            return new TextWidgetAnnotationElement(parameters);\n          case \"Btn\":\n            if (parameters.data.radioButton) {\n              return new RadioButtonWidgetAnnotationElement(parameters);\n            } else if (parameters.data.checkBox) {\n              return new CheckboxWidgetAnnotationElement(parameters);\n            }\n            return new PushButtonWidgetAnnotationElement(parameters);\n          case \"Ch\":\n            return new ChoiceWidgetAnnotationElement(parameters);\n          case \"Sig\":\n            return new SignatureWidgetAnnotationElement(parameters);\n        }\n        return new WidgetAnnotationElement(parameters);\n\n      case AnnotationType.POPUP:\n        return new PopupAnnotationElement(parameters);\n\n      case AnnotationType.FREETEXT:\n        return new FreeTextAnnotationElement(parameters);\n\n      case AnnotationType.LINE:\n        return new LineAnnotationElement(parameters);\n\n      case AnnotationType.SQUARE:\n        return new SquareAnnotationElement(parameters);\n\n      case AnnotationType.CIRCLE:\n        return new CircleAnnotationElement(parameters);\n\n      case AnnotationType.POLYLINE:\n        return new PolylineAnnotationElement(parameters);\n\n      case AnnotationType.CARET:\n        return new CaretAnnotationElement(parameters);\n\n      case AnnotationType.INK:\n        return new InkAnnotationElement(parameters);\n\n      case AnnotationType.POLYGON:\n        return new PolygonAnnotationElement(parameters);\n\n      case AnnotationType.HIGHLIGHT:\n        return new HighlightAnnotationElement(parameters);\n\n      case AnnotationType.UNDERLINE:\n        return new UnderlineAnnotationElement(parameters);\n\n      case AnnotationType.SQUIGGLY:\n        return new SquigglyAnnotationElement(parameters);\n\n      case AnnotationType.STRIKEOUT:\n        return new StrikeOutAnnotationElement(parameters);\n\n      case AnnotationType.STAMP:\n        return new StampAnnotationElement(parameters);\n\n      case AnnotationType.FILEATTACHMENT:\n        return new FileAttachmentAnnotationElement(parameters);\n\n      default:\n        return new AnnotationElement(parameters);\n    }\n  }\n}\n\nclass AnnotationElement {\n  #hasBorder = false;\n\n  constructor(\n    parameters,\n    {\n      isRenderable = false,\n      ignoreBorder = false,\n      createQuadrilaterals = false,\n    } = {}\n  ) {\n    this.isRenderable = isRenderable;\n    this.data = parameters.data;\n    this.layer = parameters.layer;\n    this.linkService = parameters.linkService;\n    this.downloadManager = parameters.downloadManager;\n    this.imageResourcesPath = parameters.imageResourcesPath;\n    this.renderForms = parameters.renderForms;\n    this.svgFactory = parameters.svgFactory;\n    this.annotationStorage = parameters.annotationStorage;\n    this.enableScripting = parameters.enableScripting;\n    this.hasJSActions = parameters.hasJSActions;\n    this._fieldObjects = parameters.fieldObjects;\n    this.parent = parameters.parent;\n\n    if (isRenderable) {\n      this.container = this._createContainer(ignoreBorder);\n    }\n    if (createQuadrilaterals) {\n      this._createQuadrilaterals();\n    }\n  }\n\n  static _hasPopupData({ titleObj, contentsObj, richText }) {\n    return !!(titleObj?.str || contentsObj?.str || richText?.str);\n  }\n\n  get hasPopupData() {\n    return AnnotationElement._hasPopupData(this.data);\n  }\n\n  /**\n   * Create an empty container for the annotation's HTML element.\n   *\n   * @private\n   * @param {boolean} ignoreBorder\n   * @memberof AnnotationElement\n   * @returns {HTMLElement} A section element.\n   */\n  _createContainer(ignoreBorder) {\n    const {\n      data,\n      parent: { page, viewport },\n    } = this;\n\n    const container = document.createElement(\"section\");\n    container.setAttribute(\"data-annotation-id\", data.id);\n    if (!(this instanceof WidgetAnnotationElement)) {\n      container.tabIndex = DEFAULT_TAB_INDEX;\n    }\n\n    // The accessibility manager will move the annotation in the DOM in\n    // order to match the visual ordering.\n    // But if an annotation is above an other one, then we must draw it\n    // after the other one whatever the order is in the DOM, hence the\n    // use of the z-index.\n    container.style.zIndex = this.parent.zIndex++;\n\n    if (this.data.popupRef) {\n      container.setAttribute(\"aria-haspopup\", \"dialog\");\n    }\n\n    if (data.noRotate) {\n      container.classList.add(\"norotate\");\n    }\n\n    const { pageWidth, pageHeight, pageX, pageY } = viewport.rawDims;\n\n    if (!data.rect || this instanceof PopupAnnotationElement) {\n      const { rotation } = data;\n      if (!data.hasOwnCanvas && rotation !== 0) {\n        this.setRotation(rotation, container);\n      }\n      return container;\n    }\n\n    const { width, height } = getRectDims(data.rect);\n\n    // Do *not* modify `data.rect`, since that will corrupt the annotation\n    // position on subsequent calls to `_createContainer` (see issue 6804).\n    const rect = Util.normalizeRect([\n      data.rect[0],\n      page.view[3] - data.rect[1] + page.view[1],\n      data.rect[2],\n      page.view[3] - data.rect[3] + page.view[1],\n    ]);\n\n    if (!ignoreBorder && data.borderStyle.width > 0) {\n      container.style.borderWidth = `${data.borderStyle.width}px`;\n\n      const horizontalRadius = data.borderStyle.horizontalCornerRadius;\n      const verticalRadius = data.borderStyle.verticalCornerRadius;\n      if (horizontalRadius > 0 || verticalRadius > 0) {\n        const radius = `calc(${horizontalRadius}px * var(--scale-factor)) / calc(${verticalRadius}px * var(--scale-factor))`;\n        container.style.borderRadius = radius;\n      } else if (this instanceof RadioButtonWidgetAnnotationElement) {\n        const radius = `calc(${width}px * var(--scale-factor)) / calc(${height}px * var(--scale-factor))`;\n        container.style.borderRadius = radius;\n      }\n\n      switch (data.borderStyle.style) {\n        case AnnotationBorderStyleType.SOLID:\n          container.style.borderStyle = \"solid\";\n          break;\n\n        case AnnotationBorderStyleType.DASHED:\n          container.style.borderStyle = \"dashed\";\n          break;\n\n        case AnnotationBorderStyleType.BEVELED:\n          warn(\"Unimplemented border style: beveled\");\n          break;\n\n        case AnnotationBorderStyleType.INSET:\n          warn(\"Unimplemented border style: inset\");\n          break;\n\n        case AnnotationBorderStyleType.UNDERLINE:\n          container.style.borderBottomStyle = \"solid\";\n          break;\n\n        default:\n          break;\n      }\n\n      const borderColor = data.borderColor || null;\n      if (borderColor) {\n        this.#hasBorder = true;\n        container.style.borderColor = Util.makeHexColor(\n          borderColor[0] | 0,\n          borderColor[1] | 0,\n          borderColor[2] | 0\n        );\n      } else {\n        // Transparent (invisible) border, so do not draw it at all.\n        container.style.borderWidth = 0;\n      }\n    }\n\n    container.style.left = `${(100 * (rect[0] - pageX)) / pageWidth}%`;\n    container.style.top = `${(100 * (rect[1] - pageY)) / pageHeight}%`;\n\n    const { rotation } = data;\n    if (data.hasOwnCanvas || rotation === 0) {\n      container.style.width = `${(100 * width) / pageWidth}%`;\n      container.style.height = `${(100 * height) / pageHeight}%`;\n    } else {\n      this.setRotation(rotation, container);\n    }\n\n    return container;\n  }\n\n  setRotation(angle, container = this.container) {\n    if (!this.data.rect) {\n      return;\n    }\n    const { pageWidth, pageHeight } = this.parent.viewport.rawDims;\n    const { width, height } = getRectDims(this.data.rect);\n\n    let elementWidth, elementHeight;\n    if (angle % 180 === 0) {\n      elementWidth = (100 * width) / pageWidth;\n      elementHeight = (100 * height) / pageHeight;\n    } else {\n      elementWidth = (100 * height) / pageWidth;\n      elementHeight = (100 * width) / pageHeight;\n    }\n\n    container.style.width = `${elementWidth}%`;\n    container.style.height = `${elementHeight}%`;\n\n    container.setAttribute(\"data-main-rotation\", (360 - angle) % 360);\n  }\n\n  get _commonActions() {\n    const setColor = (jsName, styleName, event) => {\n      const color = event.detail[jsName];\n      const colorType = color[0];\n      const colorArray = color.slice(1);\n      event.target.style[styleName] =\n        ColorConverters[`${colorType}_HTML`](colorArray);\n      this.annotationStorage.setValue(this.data.id, {\n        [styleName]: ColorConverters[`${colorType}_rgb`](colorArray),\n      });\n    };\n\n    return shadow(this, \"_commonActions\", {\n      display: event => {\n        const { display } = event.detail;\n        // See scripting/constants.js for the values of `Display`.\n        // 0 = visible, 1 = hidden, 2 = noPrint and 3 = noView.\n        const hidden = display % 2 === 1;\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          noView: hidden,\n          noPrint: display === 1 || display === 2,\n        });\n      },\n      print: event => {\n        this.annotationStorage.setValue(this.data.id, {\n          noPrint: !event.detail.print,\n        });\n      },\n      hidden: event => {\n        const { hidden } = event.detail;\n        this.container.style.visibility = hidden ? \"hidden\" : \"visible\";\n        this.annotationStorage.setValue(this.data.id, {\n          noPrint: hidden,\n          noView: hidden,\n        });\n      },\n      focus: event => {\n        setTimeout(() => event.target.focus({ preventScroll: false }), 0);\n      },\n      userName: event => {\n        // tooltip\n        event.target.title = event.detail.userName;\n      },\n      readonly: event => {\n        event.target.disabled = event.detail.readonly;\n      },\n      required: event => {\n        this._setRequired(event.target, event.detail.required);\n      },\n      bgColor: event => {\n        setColor(\"bgColor\", \"backgroundColor\", event);\n      },\n      fillColor: event => {\n        setColor(\"fillColor\", \"backgroundColor\", event);\n      },\n      fgColor: event => {\n        setColor(\"fgColor\", \"color\", event);\n      },\n      textColor: event => {\n        setColor(\"textColor\", \"color\", event);\n      },\n      borderColor: event => {\n        setColor(\"borderColor\", \"borderColor\", event);\n      },\n      strokeColor: event => {\n        setColor(\"strokeColor\", \"borderColor\", event);\n      },\n      rotation: event => {\n        const angle = event.detail.rotation;\n        this.setRotation(angle);\n        this.annotationStorage.setValue(this.data.id, {\n          rotation: angle,\n        });\n      },\n    });\n  }\n\n  _dispatchEventFromSandbox(actions, jsEvent) {\n    const commonActions = this._commonActions;\n    for (const name of Object.keys(jsEvent.detail)) {\n      const action = actions[name] || commonActions[name];\n      action?.(jsEvent);\n    }\n  }\n\n  _setDefaultPropertiesFromJS(element) {\n    if (!this.enableScripting) {\n      return;\n    }\n\n    // Some properties may have been updated thanks to JS.\n    const storedData = this.annotationStorage.getRawValue(this.data.id);\n    if (!storedData) {\n      return;\n    }\n\n    const commonActions = this._commonActions;\n    for (const [actionName, detail] of Object.entries(storedData)) {\n      const action = commonActions[actionName];\n      if (action) {\n        const eventProxy = {\n          detail: {\n            [actionName]: detail,\n          },\n          target: element,\n        };\n        action(eventProxy);\n        // The action has been consumed: no need to keep it.\n        delete storedData[actionName];\n      }\n    }\n  }\n\n  /**\n   * Create quadrilaterals from the annotation's quadpoints.\n   *\n   * @private\n   * @memberof AnnotationElement\n   */\n  _createQuadrilaterals() {\n    if (!this.container) {\n      return;\n    }\n    const { quadPoints } = this.data;\n    if (!quadPoints) {\n      return;\n    }\n\n    const [rectBlX, rectBlY, rectTrX, rectTrY] = this.data.rect;\n\n    if (quadPoints.length === 1) {\n      const [, { x: trX, y: trY }, { x: blX, y: blY }] = quadPoints[0];\n      if (\n        rectTrX === trX &&\n        rectTrY === trY &&\n        rectBlX === blX &&\n        rectBlY === blY\n      ) {\n        // The quadpoints cover the whole annotation rectangle, so no need to\n        // create a quadrilateral.\n        return;\n      }\n    }\n\n    const { style } = this.container;\n    let svgBuffer;\n    if (this.#hasBorder) {\n      const { borderColor, borderWidth } = style;\n      style.borderWidth = 0;\n      svgBuffer = [\n        \"url('data:image/svg+xml;utf8,\",\n        `<svg xmlns=\"http://www.w3.org/2000/svg\"`,\n        ` preserveAspectRatio=\"none\" viewBox=\"0 0 1 1\">`,\n        `<g fill=\"transparent\" stroke=\"${borderColor}\" stroke-width=\"${borderWidth}\">`,\n      ];\n      this.container.classList.add(\"hasBorder\");\n    }\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      this.container.classList.add(\"hasClipPath\");\n    }\n\n    const width = rectTrX - rectBlX;\n    const height = rectTrY - rectBlY;\n\n    const { svgFactory } = this;\n    const svg = svgFactory.createElement(\"svg\");\n    svg.classList.add(\"quadrilateralsContainer\");\n    svg.setAttribute(\"width\", 0);\n    svg.setAttribute(\"height\", 0);\n    const defs = svgFactory.createElement(\"defs\");\n    svg.append(defs);\n    const clipPath = svgFactory.createElement(\"clipPath\");\n    const id = `clippath_${this.data.id}`;\n    clipPath.setAttribute(\"id\", id);\n    clipPath.setAttribute(\"clipPathUnits\", \"objectBoundingBox\");\n    defs.append(clipPath);\n\n    for (const [, { x: trX, y: trY }, { x: blX, y: blY }] of quadPoints) {\n      const rect = svgFactory.createElement(\"rect\");\n      const x = (blX - rectBlX) / width;\n      const y = (rectTrY - trY) / height;\n      const rectWidth = (trX - blX) / width;\n      const rectHeight = (trY - blY) / height;\n      rect.setAttribute(\"x\", x);\n      rect.setAttribute(\"y\", y);\n      rect.setAttribute(\"width\", rectWidth);\n      rect.setAttribute(\"height\", rectHeight);\n      clipPath.append(rect);\n      svgBuffer?.push(\n        `<rect vector-effect=\"non-scaling-stroke\" x=\"${x}\" y=\"${y}\" width=\"${rectWidth}\" height=\"${rectHeight}\"/>`\n      );\n    }\n\n    if (this.#hasBorder) {\n      svgBuffer.push(`</g></svg>')`);\n      style.backgroundImage = svgBuffer.join(\"\");\n    }\n\n    this.container.append(svg);\n    this.container.style.clipPath = `url(#${id})`;\n  }\n\n  /**\n   * Create a popup for the annotation's HTML element. This is used for\n   * annotations that do not have a Popup entry in the dictionary, but\n   * are of a type that works with popups (such as Highlight annotations).\n   *\n   * @private\n   * @memberof AnnotationElement\n   */\n  _createPopup() {\n    const { container, data } = this;\n    container.setAttribute(\"aria-haspopup\", \"dialog\");\n\n    const popup = new PopupAnnotationElement({\n      data: {\n        color: data.color,\n        titleObj: data.titleObj,\n        modificationDate: data.modificationDate,\n        contentsObj: data.contentsObj,\n        richText: data.richText,\n        parentRect: data.rect,\n        borderStyle: 0,\n        id: `popup_${data.id}`,\n        rotation: data.rotation,\n      },\n      parent: this.parent,\n      elements: [this],\n    });\n    this.parent.div.append(popup.render());\n  }\n\n  /**\n   * Render the annotation's HTML element(s).\n   *\n   * @public\n   * @memberof AnnotationElement\n   */\n  render() {\n    unreachable(\"Abstract method `AnnotationElement.render` called\");\n  }\n\n  /**\n   * @private\n   * @returns {Array}\n   */\n  _getElementsByName(name, skipId = null) {\n    const fields = [];\n\n    if (this._fieldObjects) {\n      const fieldObj = this._fieldObjects[name];\n      if (fieldObj) {\n        for (const { page, id, exportValues } of fieldObj) {\n          if (page === -1) {\n            continue;\n          }\n          if (id === skipId) {\n            continue;\n          }\n          const exportValue =\n            typeof exportValues === \"string\" ? exportValues : null;\n\n          const domElement = document.querySelector(\n            `[data-element-id=\"${id}\"]`\n          );\n          if (domElement && !GetElementsByNameSet.has(domElement)) {\n            warn(`_getElementsByName - element not allowed: ${id}`);\n            continue;\n          }\n          fields.push({ id, exportValue, domElement });\n        }\n      }\n      return fields;\n    }\n    // Fallback to a regular DOM lookup, to ensure that the standalone\n    // viewer components won't break.\n    for (const domElement of document.getElementsByName(name)) {\n      const { exportValue } = domElement;\n      const id = domElement.getAttribute(\"data-element-id\");\n      if (id === skipId) {\n        continue;\n      }\n      if (!GetElementsByNameSet.has(domElement)) {\n        continue;\n      }\n      fields.push({ id, exportValue, domElement });\n    }\n    return fields;\n  }\n\n  show() {\n    if (this.container) {\n      this.container.hidden = false;\n    }\n    this.popup?.maybeShow();\n  }\n\n  hide() {\n    if (this.container) {\n      this.container.hidden = true;\n    }\n    this.popup?.forceHide();\n  }\n\n  /**\n   * Get the HTML element(s) which can trigger a popup when clicked or hovered.\n   *\n   * @public\n   * @memberof AnnotationElement\n   * @returns {Array<HTMLElement>|HTMLElement} An array of elements or an\n   *          element.\n   */\n  getElementsToTriggerPopup() {\n    return this.container;\n  }\n\n  addHighlightArea() {\n    const triggers = this.getElementsToTriggerPopup();\n    if (Array.isArray(triggers)) {\n      for (const element of triggers) {\n        element.classList.add(\"highlightArea\");\n      }\n    } else {\n      triggers.classList.add(\"highlightArea\");\n    }\n  }\n\n  _editOnDoubleClick() {\n    const {\n      annotationEditorType: mode,\n      data: { id: editId },\n    } = this;\n    this.container.addEventListener(\"dblclick\", () => {\n      this.linkService.eventBus?.dispatch(\"switchannotationeditormode\", {\n        source: this,\n        mode,\n        editId,\n      });\n    });\n  }\n}\n\nclass LinkAnnotationElement extends AnnotationElement {\n  constructor(parameters, options = null) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: !!options?.ignoreBorder,\n      createQuadrilaterals: true,\n    });\n    this.isTooltipOnly = parameters.data.isTooltipOnly;\n  }\n\n  render() {\n    const { data, linkService } = this;\n    const link = document.createElement(\"a\");\n    link.setAttribute(\"data-element-id\", data.id);\n    let isBound = false;\n\n    if (data.url) {\n      linkService.addLinkAttributes(link, data.url, data.newWindow);\n      isBound = true;\n    } else if (data.action) {\n      this._bindNamedAction(link, data.action);\n      isBound = true;\n    } else if (data.attachment) {\n      this._bindAttachment(link, data.attachment);\n      isBound = true;\n    } else if (data.setOCGState) {\n      this.#bindSetOCGState(link, data.setOCGState);\n      isBound = true;\n    } else if (data.dest) {\n      this._bindLink(link, data.dest);\n      isBound = true;\n    } else {\n      if (\n        data.actions &&\n        (data.actions.Action ||\n          data.actions[\"Mouse Up\"] ||\n          data.actions[\"Mouse Down\"]) &&\n        this.enableScripting &&\n        this.hasJSActions\n      ) {\n        this._bindJSAction(link, data);\n        isBound = true;\n      }\n\n      if (data.resetForm) {\n        this._bindResetFormAction(link, data.resetForm);\n        isBound = true;\n      } else if (this.isTooltipOnly && !isBound) {\n        this._bindLink(link, \"\");\n        isBound = true;\n      }\n    }\n\n    this.container.classList.add(\"linkAnnotation\");\n    if (isBound) {\n      this.container.append(link);\n    }\n\n    return this.container;\n  }\n\n  #setInternalLink() {\n    this.container.setAttribute(\"data-internal-link\", \"\");\n  }\n\n  /**\n   * Bind internal links to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} destination\n   * @memberof LinkAnnotationElement\n   */\n  _bindLink(link, destination) {\n    link.href = this.linkService.getDestinationHash(destination);\n    link.onclick = () => {\n      if (destination) {\n        this.linkService.goToDestination(destination);\n      }\n      return false;\n    };\n    if (destination || destination === /* isTooltipOnly = */ \"\") {\n      this.#setInternalLink();\n    }\n  }\n\n  /**\n   * Bind named actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} action\n   * @memberof LinkAnnotationElement\n   */\n  _bindNamedAction(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeNamedAction(action);\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind attachments to the link element.\n   * @param {Object} link\n   * @param {Object} attachment\n   */\n  _bindAttachment(link, attachment) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.downloadManager?.openOrDownloadData(\n        this.container,\n        attachment.content,\n        attachment.filename\n      );\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind SetOCGState actions to the link element.\n   * @param {Object} link\n   * @param {Object} action\n   */\n  #bindSetOCGState(link, action) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    link.onclick = () => {\n      this.linkService.executeSetOCGState(action);\n      return false;\n    };\n    this.#setInternalLink();\n  }\n\n  /**\n   * Bind JS actions to the link element.\n   *\n   * @private\n   * @param {Object} link\n   * @param {Object} data\n   * @memberof LinkAnnotationElement\n   */\n  _bindJSAction(link, data) {\n    link.href = this.linkService.getAnchorUrl(\"\");\n    const map = new Map([\n      [\"Action\", \"onclick\"],\n      [\"Mouse Up\", \"onmouseup\"],\n      [\"Mouse Down\", \"onmousedown\"],\n    ]);\n    for (const name of Object.keys(data.actions)) {\n      const jsName = map.get(name);\n      if (!jsName) {\n        continue;\n      }\n      link[jsName] = () => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: data.id,\n            name,\n          },\n        });\n        return false;\n      };\n    }\n\n    if (!link.onclick) {\n      link.onclick = () => false;\n    }\n    this.#setInternalLink();\n  }\n\n  _bindResetFormAction(link, resetForm) {\n    const otherClickAction = link.onclick;\n    if (!otherClickAction) {\n      link.href = this.linkService.getAnchorUrl(\"\");\n    }\n    this.#setInternalLink();\n\n    if (!this._fieldObjects) {\n      warn(\n        `_bindResetFormAction - \"resetForm\" action not supported, ` +\n          \"ensure that the `fieldObjects` parameter is provided.\"\n      );\n      if (!otherClickAction) {\n        link.onclick = () => false;\n      }\n      return;\n    }\n\n    link.onclick = () => {\n      otherClickAction?.();\n\n      const {\n        fields: resetFormFields,\n        refs: resetFormRefs,\n        include,\n      } = resetForm;\n\n      const allFields = [];\n      if (resetFormFields.length !== 0 || resetFormRefs.length !== 0) {\n        const fieldIds = new Set(resetFormRefs);\n        for (const fieldName of resetFormFields) {\n          const fields = this._fieldObjects[fieldName] || [];\n          for (const { id } of fields) {\n            fieldIds.add(id);\n          }\n        }\n        for (const fields of Object.values(this._fieldObjects)) {\n          for (const field of fields) {\n            if (fieldIds.has(field.id) === include) {\n              allFields.push(field);\n            }\n          }\n        }\n      } else {\n        for (const fields of Object.values(this._fieldObjects)) {\n          allFields.push(...fields);\n        }\n      }\n\n      const storage = this.annotationStorage;\n      const allIds = [];\n      for (const field of allFields) {\n        const { id } = field;\n        allIds.push(id);\n        switch (field.type) {\n          case \"text\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"checkbox\":\n          case \"radiobutton\": {\n            const value = field.defaultValue === field.exportValues;\n            storage.setValue(id, { value });\n            break;\n          }\n          case \"combobox\":\n          case \"listbox\": {\n            const value = field.defaultValue || \"\";\n            storage.setValue(id, { value });\n            break;\n          }\n          default:\n            continue;\n        }\n\n        const domElement = document.querySelector(`[data-element-id=\"${id}\"]`);\n        if (!domElement) {\n          continue;\n        } else if (!GetElementsByNameSet.has(domElement)) {\n          warn(`_bindResetFormAction - element not allowed: ${id}`);\n          continue;\n        }\n        domElement.dispatchEvent(new Event(\"resetform\"));\n      }\n\n      if (this.enableScripting) {\n        // Update the values in the sandbox.\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: \"app\",\n            ids: allIds,\n            name: \"ResetForm\",\n          },\n        });\n      }\n\n      return false;\n    };\n  }\n}\n\nclass TextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n  }\n\n  render() {\n    this.container.classList.add(\"textAnnotation\");\n\n    const image = document.createElement(\"img\");\n    image.src =\n      this.imageResourcesPath +\n      \"annotation-\" +\n      this.data.name.toLowerCase() +\n      \".svg\";\n    image.alt = \"[{{type}} Annotation]\";\n    image.dataset.l10nId = \"text_annotation_type\";\n    image.dataset.l10nArgs = JSON.stringify({ type: this.data.name });\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.append(image);\n    return this.container;\n  }\n}\n\nclass WidgetAnnotationElement extends AnnotationElement {\n  render() {\n    // Show only the container for unsupported field types.\n    if (this.data.alternativeText) {\n      this.container.title = this.data.alternativeText;\n    }\n\n    return this.container;\n  }\n\n  showElementAndHideCanvas(element) {\n    if (this.data.hasOwnCanvas) {\n      if (element.previousSibling?.nodeName === \"CANVAS\") {\n        element.previousSibling.hidden = true;\n      }\n      element.hidden = false;\n    }\n  }\n\n  _getKeyModifier(event) {\n    const { isWin, isMac } = FeatureTest.platform;\n    return (isWin && event.ctrlKey) || (isMac && event.metaKey);\n  }\n\n  _setEventListener(element, elementData, baseName, eventName, valueGetter) {\n    if (baseName.includes(\"mouse\")) {\n      // Mouse events\n      element.addEventListener(baseName, event => {\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n            shift: event.shiftKey,\n            modifier: this._getKeyModifier(event),\n          },\n        });\n      });\n    } else {\n      // Non-mouse events\n      element.addEventListener(baseName, event => {\n        if (baseName === \"blur\") {\n          if (!elementData.focused || !event.relatedTarget) {\n            return;\n          }\n          elementData.focused = false;\n        } else if (baseName === \"focus\") {\n          if (elementData.focused) {\n            return;\n          }\n          elementData.focused = true;\n        }\n\n        if (!valueGetter) {\n          return;\n        }\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id: this.data.id,\n            name: eventName,\n            value: valueGetter(event),\n          },\n        });\n      });\n    }\n  }\n\n  _setEventListeners(element, elementData, names, getter) {\n    for (const [baseName, eventName] of names) {\n      if (eventName === \"Action\" || this.data.actions?.[eventName]) {\n        if (eventName === \"Focus\" || eventName === \"Blur\") {\n          elementData ||= { focused: false };\n        }\n        this._setEventListener(\n          element,\n          elementData,\n          baseName,\n          eventName,\n          getter\n        );\n        if (eventName === \"Focus\" && !this.data.actions?.Blur) {\n          // Ensure that elementData will have the correct value.\n          this._setEventListener(element, elementData, \"blur\", \"Blur\", null);\n        } else if (eventName === \"Blur\" && !this.data.actions?.Focus) {\n          this._setEventListener(element, elementData, \"focus\", \"Focus\", null);\n        }\n      }\n    }\n  }\n\n  _setBackgroundColor(element) {\n    const color = this.data.backgroundColor || null;\n    element.style.backgroundColor =\n      color === null\n        ? \"transparent\"\n        : Util.makeHexColor(color[0], color[1], color[2]);\n  }\n\n  /**\n   * Apply text styles to the text in the element.\n   *\n   * @private\n   * @param {HTMLDivElement} element\n   * @memberof TextWidgetAnnotationElement\n   */\n  _setTextStyle(element) {\n    const TEXT_ALIGNMENT = [\"left\", \"center\", \"right\"];\n    const { fontColor } = this.data.defaultAppearanceData;\n    const fontSize =\n      this.data.defaultAppearanceData.fontSize || DEFAULT_FONT_SIZE;\n\n    const style = element.style;\n\n    // TODO: If the font-size is zero, calculate it based on the height and\n    //       width of the element.\n    // Not setting `style.fontSize` will use the default font-size for now.\n\n    // We don't use the font, as specified in the PDF document, for the <input>\n    // element. Hence using the original `fontSize` could look bad, which is why\n    // it's instead based on the field height.\n    // If the height is \"big\" then it could lead to a too big font size\n    // so in this case use the one we've in the pdf (hence the min).\n    let computedFontSize;\n    const BORDER_SIZE = 2;\n    const roundToOneDecimal = x => Math.round(10 * x) / 10;\n    if (this.data.multiLine) {\n      const height = Math.abs(\n        this.data.rect[3] - this.data.rect[1] - BORDER_SIZE\n      );\n      const numberOfLines = Math.round(height / (LINE_FACTOR * fontSize)) || 1;\n      const lineHeight = height / numberOfLines;\n      computedFontSize = Math.min(\n        fontSize,\n        roundToOneDecimal(lineHeight / LINE_FACTOR)\n      );\n    } else {\n      const height = Math.abs(\n        this.data.rect[3] - this.data.rect[1] - BORDER_SIZE\n      );\n      computedFontSize = Math.min(\n        fontSize,\n        roundToOneDecimal(height / LINE_FACTOR)\n      );\n    }\n    style.fontSize = `calc(${computedFontSize}px * var(--scale-factor))`;\n\n    style.color = Util.makeHexColor(fontColor[0], fontColor[1], fontColor[2]);\n\n    if (this.data.textAlignment !== null) {\n      style.textAlign = TEXT_ALIGNMENT[this.data.textAlignment];\n    }\n  }\n\n  _setRequired(element, isRequired) {\n    if (isRequired) {\n      element.setAttribute(\"required\", true);\n    } else {\n      element.removeAttribute(\"required\");\n    }\n    element.setAttribute(\"aria-required\", isRequired);\n  }\n}\n\nclass TextWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    const isRenderable =\n      parameters.renderForms ||\n      (!parameters.data.hasAppearance && !!parameters.data.fieldValue);\n    super(parameters, { isRenderable });\n  }\n\n  setPropertyOnSiblings(base, key, value, keyInStorage) {\n    const storage = this.annotationStorage;\n    for (const element of this._getElementsByName(\n      base.name,\n      /* skipId = */ base.id\n    )) {\n      if (element.domElement) {\n        element.domElement[key] = value;\n      }\n      storage.setValue(element.id, { [keyInStorage]: value });\n    }\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    this.container.classList.add(\"textWidgetAnnotation\");\n\n    let element = null;\n    if (this.renderForms) {\n      // NOTE: We cannot set the values using `element.value` below, since it\n      //       prevents the AnnotationLayer rasterizer in `test/driver.js`\n      //       from parsing the elements correctly for the reference tests.\n      const storedData = storage.getValue(id, {\n        value: this.data.fieldValue,\n      });\n      let textContent = storedData.value || \"\";\n      const maxLen = storage.getValue(id, {\n        charLimit: this.data.maxLen,\n      }).charLimit;\n      if (maxLen && textContent.length > maxLen) {\n        textContent = textContent.slice(0, maxLen);\n      }\n\n      let fieldFormattedValues =\n        storedData.formattedValue || this.data.textContent?.join(\"\\n\") || null;\n      if (fieldFormattedValues && this.data.comb) {\n        fieldFormattedValues = fieldFormattedValues.replaceAll(/\\s+/g, \"\");\n      }\n\n      const elementData = {\n        userValue: textContent,\n        formattedValue: fieldFormattedValues,\n        lastCommittedValue: null,\n        commitKey: 1,\n        focused: false,\n      };\n\n      if (this.data.multiLine) {\n        element = document.createElement(\"textarea\");\n        element.textContent = fieldFormattedValues ?? textContent;\n        if (this.data.doNotScroll) {\n          element.style.overflowY = \"hidden\";\n        }\n      } else {\n        element = document.createElement(\"input\");\n        element.type = \"text\";\n        element.setAttribute(\"value\", fieldFormattedValues ?? textContent);\n        if (this.data.doNotScroll) {\n          element.style.overflowX = \"hidden\";\n        }\n      }\n      if (this.data.hasOwnCanvas) {\n        element.hidden = true;\n      }\n      GetElementsByNameSet.add(element);\n      element.setAttribute(\"data-element-id\", id);\n\n      element.disabled = this.data.readOnly;\n      element.name = this.data.fieldName;\n      element.tabIndex = DEFAULT_TAB_INDEX;\n\n      this._setRequired(element, this.data.required);\n\n      if (maxLen) {\n        element.maxLength = maxLen;\n      }\n\n      element.addEventListener(\"input\", event => {\n        storage.setValue(id, { value: event.target.value });\n        this.setPropertyOnSiblings(\n          element,\n          \"value\",\n          event.target.value,\n          \"value\"\n        );\n        elementData.formattedValue = null;\n      });\n\n      element.addEventListener(\"resetform\", event => {\n        const defaultValue = this.data.defaultFieldValue ?? \"\";\n        element.value = elementData.userValue = defaultValue;\n        elementData.formattedValue = null;\n      });\n\n      let blurListener = event => {\n        const { formattedValue } = elementData;\n        if (formattedValue !== null && formattedValue !== undefined) {\n          event.target.value = formattedValue;\n        }\n        // Reset the cursor position to the start of the field (issue 12359).\n        event.target.scrollLeft = 0;\n      };\n\n      if (this.enableScripting && this.hasJSActions) {\n        element.addEventListener(\"focus\", event => {\n          if (elementData.focused) {\n            return;\n          }\n          const { target } = event;\n          if (elementData.userValue) {\n            target.value = elementData.userValue;\n          }\n          elementData.lastCommittedValue = target.value;\n          elementData.commitKey = 1;\n          elementData.focused = true;\n        });\n\n        element.addEventListener(\"updatefromsandbox\", jsEvent => {\n          this.showElementAndHideCanvas(jsEvent.target);\n          const actions = {\n            value(event) {\n              elementData.userValue = event.detail.value ?? \"\";\n              storage.setValue(id, { value: elementData.userValue.toString() });\n              event.target.value = elementData.userValue;\n            },\n            formattedValue(event) {\n              const { formattedValue } = event.detail;\n              elementData.formattedValue = formattedValue;\n              if (\n                formattedValue !== null &&\n                formattedValue !== undefined &&\n                event.target !== document.activeElement\n              ) {\n                // Input hasn't the focus so display formatted string\n                event.target.value = formattedValue;\n              }\n              storage.setValue(id, {\n                formattedValue,\n              });\n            },\n            selRange(event) {\n              event.target.setSelectionRange(...event.detail.selRange);\n            },\n            charLimit: event => {\n              const { charLimit } = event.detail;\n              const { target } = event;\n              if (charLimit === 0) {\n                target.removeAttribute(\"maxLength\");\n                return;\n              }\n\n              target.setAttribute(\"maxLength\", charLimit);\n              let value = elementData.userValue;\n              if (!value || value.length <= charLimit) {\n                return;\n              }\n              value = value.slice(0, charLimit);\n              target.value = elementData.userValue = value;\n              storage.setValue(id, { value });\n\n              this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n                source: this,\n                detail: {\n                  id,\n                  name: \"Keystroke\",\n                  value,\n                  willCommit: true,\n                  commitKey: 1,\n                  selStart: target.selectionStart,\n                  selEnd: target.selectionEnd,\n                },\n              });\n            },\n          };\n          this._dispatchEventFromSandbox(actions, jsEvent);\n        });\n\n        // Even if the field hasn't any actions\n        // leaving it can still trigger some actions with Calculate\n        element.addEventListener(\"keydown\", event => {\n          elementData.commitKey = 1;\n          // If the key is one of Escape, Enter then the data are committed.\n          // If we've a Tab then data will be committed on blur.\n          let commitKey = -1;\n          if (event.key === \"Escape\") {\n            commitKey = 0;\n          } else if (event.key === \"Enter\" && !this.data.multiLine) {\n            // When we've a multiline field, \"Enter\" key is a key as the other\n            // hence we don't commit the data (Acrobat behaves the same way)\n            // (see issue #15627).\n            commitKey = 2;\n          } else if (event.key === \"Tab\") {\n            elementData.commitKey = 3;\n          }\n          if (commitKey === -1) {\n            return;\n          }\n          const { value } = event.target;\n          if (elementData.lastCommittedValue === value) {\n            return;\n          }\n          elementData.lastCommittedValue = value;\n          // Save the entered value\n          elementData.userValue = value;\n          this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n            source: this,\n            detail: {\n              id,\n              name: \"Keystroke\",\n              value,\n              willCommit: true,\n              commitKey,\n              selStart: event.target.selectionStart,\n              selEnd: event.target.selectionEnd,\n            },\n          });\n        });\n        const _blurListener = blurListener;\n        blurListener = null;\n        element.addEventListener(\"blur\", event => {\n          if (!elementData.focused || !event.relatedTarget) {\n            return;\n          }\n          elementData.focused = false;\n          const { value } = event.target;\n          elementData.userValue = value;\n          if (elementData.lastCommittedValue !== value) {\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                willCommit: true,\n                commitKey: elementData.commitKey,\n                selStart: event.target.selectionStart,\n                selEnd: event.target.selectionEnd,\n              },\n            });\n          }\n          _blurListener(event);\n        });\n\n        if (this.data.actions?.Keystroke) {\n          element.addEventListener(\"beforeinput\", event => {\n            elementData.lastCommittedValue = null;\n            const { data, target } = event;\n            const { value, selectionStart, selectionEnd } = target;\n\n            let selStart = selectionStart,\n              selEnd = selectionEnd;\n\n            switch (event.inputType) {\n              // https://rawgit.com/w3c/input-events/v1/index.html#interface-InputEvent-Attributes\n              case \"deleteWordBackward\": {\n                const match = value\n                  .substring(0, selectionStart)\n                  .match(/\\w*[^\\w]*$/);\n                if (match) {\n                  selStart -= match[0].length;\n                }\n                break;\n              }\n              case \"deleteWordForward\": {\n                const match = value\n                  .substring(selectionStart)\n                  .match(/^[^\\w]*\\w*/);\n                if (match) {\n                  selEnd += match[0].length;\n                }\n                break;\n              }\n              case \"deleteContentBackward\":\n                if (selectionStart === selectionEnd) {\n                  selStart -= 1;\n                }\n                break;\n              case \"deleteContentForward\":\n                if (selectionStart === selectionEnd) {\n                  selEnd += 1;\n                }\n                break;\n            }\n\n            // We handle the event ourselves.\n            event.preventDefault();\n            this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n              source: this,\n              detail: {\n                id,\n                name: \"Keystroke\",\n                value,\n                change: data || \"\",\n                willCommit: false,\n                selStart,\n                selEnd,\n              },\n            });\n          });\n        }\n\n        this._setEventListeners(\n          element,\n          elementData,\n          [\n            [\"focus\", \"Focus\"],\n            [\"blur\", \"Blur\"],\n            [\"mousedown\", \"Mouse Down\"],\n            [\"mouseenter\", \"Mouse Enter\"],\n            [\"mouseleave\", \"Mouse Exit\"],\n            [\"mouseup\", \"Mouse Up\"],\n          ],\n          event => event.target.value\n        );\n      }\n\n      if (blurListener) {\n        element.addEventListener(\"blur\", blurListener);\n      }\n\n      if (this.data.comb) {\n        const fieldWidth = this.data.rect[2] - this.data.rect[0];\n        const combWidth = fieldWidth / maxLen;\n\n        element.classList.add(\"comb\");\n        element.style.letterSpacing = `calc(${combWidth}px * var(--scale-factor) - 1ch)`;\n      }\n    } else {\n      element = document.createElement(\"div\");\n      element.textContent = this.data.fieldValue;\n      element.style.verticalAlign = \"middle\";\n      element.style.display = \"table-cell\";\n    }\n\n    this._setTextStyle(element);\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass SignatureWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: !!parameters.data.hasOwnCanvas });\n  }\n}\n\nclass CheckboxWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.exportValue === data.fieldValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== \"Off\";\n      storage.setValue(id, { value });\n    }\n\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"checkBox\");\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"checkbox\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.setAttribute(\"exportValue\", data.exportValue);\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const checkbox of this._getElementsByName(name, /* skipId = */ id)) {\n        const curChecked = checked && checkbox.exportValue === data.exportValue;\n        if (checkbox.domElement) {\n          checkbox.domElement.checked = curChecked;\n        }\n        storage.setValue(checkbox.id, { value: curChecked });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue || \"Off\";\n      event.target.checked = defaultValue === data.exportValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            event.target.checked = event.detail.value !== \"Off\";\n            storage.setValue(id, { value: event.target.checked });\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        null,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass RadioButtonWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.classList.add(\"buttonWidgetAnnotation\", \"radioButton\");\n    const storage = this.annotationStorage;\n    const data = this.data;\n    const id = data.id;\n    let value = storage.getValue(id, {\n      value: data.fieldValue === data.buttonValue,\n    }).value;\n    if (typeof value === \"string\") {\n      // The value has been changed through js and set in annotationStorage.\n      value = value !== data.buttonValue;\n      storage.setValue(id, { value });\n    }\n\n    const element = document.createElement(\"input\");\n    GetElementsByNameSet.add(element);\n    element.setAttribute(\"data-element-id\", id);\n\n    element.disabled = data.readOnly;\n    this._setRequired(element, this.data.required);\n    element.type = \"radio\";\n    element.name = data.fieldName;\n    if (value) {\n      element.setAttribute(\"checked\", true);\n    }\n    element.tabIndex = DEFAULT_TAB_INDEX;\n\n    element.addEventListener(\"change\", event => {\n      const { name, checked } = event.target;\n      for (const radio of this._getElementsByName(name, /* skipId = */ id)) {\n        storage.setValue(radio.id, { value: false });\n      }\n      storage.setValue(id, { value: checked });\n    });\n\n    element.addEventListener(\"resetform\", event => {\n      const defaultValue = data.defaultFieldValue;\n      event.target.checked =\n        defaultValue !== null &&\n        defaultValue !== undefined &&\n        defaultValue === data.buttonValue;\n    });\n\n    if (this.enableScripting && this.hasJSActions) {\n      const pdfButtonValue = data.buttonValue;\n      element.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value: event => {\n            const checked = pdfButtonValue === event.detail.value;\n            for (const radio of this._getElementsByName(event.target.name)) {\n              const curChecked = checked && radio.id === id;\n              if (radio.domElement) {\n                radio.domElement.checked = curChecked;\n              }\n              storage.setValue(radio.id, { value: curChecked });\n            }\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      this._setEventListeners(\n        element,\n        null,\n        [\n          [\"change\", \"Validate\"],\n          [\"change\", \"Action\"],\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n        ],\n        event => event.target.checked\n      );\n    }\n\n    this._setBackgroundColor(element);\n    this._setDefaultPropertiesFromJS(element);\n\n    this.container.append(element);\n    return this.container;\n  }\n}\n\nclass PushButtonWidgetAnnotationElement extends LinkAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { ignoreBorder: parameters.data.hasAppearance });\n  }\n\n  render() {\n    // The rendering and functionality of a push button widget annotation is\n    // equal to that of a link annotation, but may have more functionality, such\n    // as performing actions on form fields (resetting, submitting, et cetera).\n    const container = super.render();\n    container.classList.add(\"buttonWidgetAnnotation\", \"pushButton\");\n\n    if (this.data.alternativeText) {\n      container.title = this.data.alternativeText;\n    }\n\n    const linkElement = container.lastChild;\n    if (this.enableScripting && this.hasJSActions && linkElement) {\n      this._setDefaultPropertiesFromJS(linkElement);\n\n      linkElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        this._dispatchEventFromSandbox({}, jsEvent);\n      });\n    }\n\n    return container;\n  }\n}\n\nclass ChoiceWidgetAnnotationElement extends WidgetAnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: parameters.renderForms });\n  }\n\n  render() {\n    this.container.classList.add(\"choiceWidgetAnnotation\");\n    const storage = this.annotationStorage;\n    const id = this.data.id;\n\n    const storedData = storage.getValue(id, {\n      value: this.data.fieldValue,\n    });\n\n    const selectElement = document.createElement(\"select\");\n    GetElementsByNameSet.add(selectElement);\n    selectElement.setAttribute(\"data-element-id\", id);\n\n    selectElement.disabled = this.data.readOnly;\n    this._setRequired(selectElement, this.data.required);\n    selectElement.name = this.data.fieldName;\n    selectElement.tabIndex = DEFAULT_TAB_INDEX;\n\n    let addAnEmptyEntry = this.data.combo && this.data.options.length > 0;\n\n    if (!this.data.combo) {\n      // List boxes have a size and (optionally) multiple selection.\n      selectElement.size = this.data.options.length;\n      if (this.data.multiSelect) {\n        selectElement.multiple = true;\n      }\n    }\n\n    selectElement.addEventListener(\"resetform\", event => {\n      const defaultValue = this.data.defaultFieldValue;\n      for (const option of selectElement.options) {\n        option.selected = option.value === defaultValue;\n      }\n    });\n\n    // Insert the options into the choice field.\n    for (const option of this.data.options) {\n      const optionElement = document.createElement(\"option\");\n      optionElement.textContent = option.displayValue;\n      optionElement.value = option.exportValue;\n      if (storedData.value.includes(option.exportValue)) {\n        optionElement.setAttribute(\"selected\", true);\n        addAnEmptyEntry = false;\n      }\n      selectElement.append(optionElement);\n    }\n\n    let removeEmptyEntry = null;\n    if (addAnEmptyEntry) {\n      const noneOptionElement = document.createElement(\"option\");\n      noneOptionElement.value = \" \";\n      noneOptionElement.setAttribute(\"hidden\", true);\n      noneOptionElement.setAttribute(\"selected\", true);\n      selectElement.prepend(noneOptionElement);\n\n      removeEmptyEntry = () => {\n        noneOptionElement.remove();\n        selectElement.removeEventListener(\"input\", removeEmptyEntry);\n        removeEmptyEntry = null;\n      };\n      selectElement.addEventListener(\"input\", removeEmptyEntry);\n    }\n\n    const getValue = isExport => {\n      const name = isExport ? \"value\" : \"textContent\";\n      const { options, multiple } = selectElement;\n      if (!multiple) {\n        return options.selectedIndex === -1\n          ? null\n          : options[options.selectedIndex][name];\n      }\n      return Array.prototype.filter\n        .call(options, option => option.selected)\n        .map(option => option[name]);\n    };\n\n    let selectedValues = getValue(/* isExport */ false);\n\n    const getItems = event => {\n      const options = event.target.options;\n      return Array.prototype.map.call(options, option => {\n        return { displayValue: option.textContent, exportValue: option.value };\n      });\n    };\n\n    if (this.enableScripting && this.hasJSActions) {\n      selectElement.addEventListener(\"updatefromsandbox\", jsEvent => {\n        const actions = {\n          value(event) {\n            removeEmptyEntry?.();\n            const value = event.detail.value;\n            const values = new Set(Array.isArray(value) ? value : [value]);\n            for (const option of selectElement.options) {\n              option.selected = values.has(option.value);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          multipleSelection(event) {\n            selectElement.multiple = true;\n          },\n          remove(event) {\n            const options = selectElement.options;\n            const index = event.detail.remove;\n            options[index].selected = false;\n            selectElement.remove(index);\n            if (options.length > 0) {\n              const i = Array.prototype.findIndex.call(\n                options,\n                option => option.selected\n              );\n              if (i === -1) {\n                options[0].selected = true;\n              }\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          clear(event) {\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            storage.setValue(id, { value: null, items: [] });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          insert(event) {\n            const { index, displayValue, exportValue } = event.detail.insert;\n            const selectChild = selectElement.children[index];\n            const optionElement = document.createElement(\"option\");\n            optionElement.textContent = displayValue;\n            optionElement.value = exportValue;\n\n            if (selectChild) {\n              selectChild.before(optionElement);\n            } else {\n              selectElement.append(optionElement);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          items(event) {\n            const { items } = event.detail;\n            while (selectElement.length !== 0) {\n              selectElement.remove(0);\n            }\n            for (const item of items) {\n              const { displayValue, exportValue } = item;\n              const optionElement = document.createElement(\"option\");\n              optionElement.textContent = displayValue;\n              optionElement.value = exportValue;\n              selectElement.append(optionElement);\n            }\n            if (selectElement.options.length > 0) {\n              selectElement.options[0].selected = true;\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n              items: getItems(event),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          indices(event) {\n            const indices = new Set(event.detail.indices);\n            for (const option of event.target.options) {\n              option.selected = indices.has(option.index);\n            }\n            storage.setValue(id, {\n              value: getValue(/* isExport */ true),\n            });\n            selectedValues = getValue(/* isExport */ false);\n          },\n          editable(event) {\n            event.target.disabled = !event.detail.editable;\n          },\n        };\n        this._dispatchEventFromSandbox(actions, jsEvent);\n      });\n\n      selectElement.addEventListener(\"input\", event => {\n        const exportValue = getValue(/* isExport */ true);\n        storage.setValue(id, { value: exportValue });\n\n        event.preventDefault();\n\n        this.linkService.eventBus?.dispatch(\"dispatcheventinsandbox\", {\n          source: this,\n          detail: {\n            id,\n            name: \"Keystroke\",\n            value: selectedValues,\n            changeEx: exportValue,\n            willCommit: false,\n            commitKey: 1,\n            keyDown: false,\n          },\n        });\n      });\n\n      this._setEventListeners(\n        selectElement,\n        null,\n        [\n          [\"focus\", \"Focus\"],\n          [\"blur\", \"Blur\"],\n          [\"mousedown\", \"Mouse Down\"],\n          [\"mouseenter\", \"Mouse Enter\"],\n          [\"mouseleave\", \"Mouse Exit\"],\n          [\"mouseup\", \"Mouse Up\"],\n          [\"input\", \"Action\"],\n          [\"input\", \"Validate\"],\n        ],\n        event => event.target.value\n      );\n    } else {\n      selectElement.addEventListener(\"input\", function (event) {\n        storage.setValue(id, { value: getValue(/* isExport */ true) });\n      });\n    }\n\n    if (this.data.combo) {\n      this._setTextStyle(selectElement);\n    } else {\n      // Just use the default font size...\n      // it's a bit hard to guess what is a good size.\n    }\n    this._setBackgroundColor(selectElement);\n    this._setDefaultPropertiesFromJS(selectElement);\n\n    this.container.append(selectElement);\n    return this.container;\n  }\n}\n\nclass PopupAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    const { data, elements } = parameters;\n    super(parameters, { isRenderable: AnnotationElement._hasPopupData(data) });\n    this.elements = elements;\n  }\n\n  render() {\n    this.container.classList.add(\"popupAnnotation\");\n\n    const popup = new PopupElement({\n      container: this.container,\n      color: this.data.color,\n      titleObj: this.data.titleObj,\n      modificationDate: this.data.modificationDate,\n      contentsObj: this.data.contentsObj,\n      richText: this.data.richText,\n      rect: this.data.rect,\n      parentRect: this.data.parentRect || null,\n      parent: this.parent,\n      elements: this.elements,\n      open: this.data.open,\n    });\n\n    const elementIds = [];\n    for (const element of this.elements) {\n      element.popup = popup;\n      elementIds.push(element.data.id);\n      element.addHighlightArea();\n    }\n\n    this.container.setAttribute(\n      \"aria-controls\",\n      elementIds.map(id => `${AnnotationPrefix}${id}`).join(\",\")\n    );\n\n    return this.container;\n  }\n}\n\nclass PopupElement {\n  #dateTimePromise = null;\n\n  #boundKeyDown = this.#keyDown.bind(this);\n\n  #boundHide = this.#hide.bind(this);\n\n  #boundShow = this.#show.bind(this);\n\n  #boundToggle = this.#toggle.bind(this);\n\n  #color = null;\n\n  #container = null;\n\n  #contentsObj = null;\n\n  #elements = null;\n\n  #parent = null;\n\n  #parentRect = null;\n\n  #pinned = false;\n\n  #popup = null;\n\n  #rect = null;\n\n  #richText = null;\n\n  #titleObj = null;\n\n  #wasVisible = false;\n\n  constructor({\n    container,\n    color,\n    elements,\n    titleObj,\n    modificationDate,\n    contentsObj,\n    richText,\n    parent,\n    rect,\n    parentRect,\n    open,\n  }) {\n    this.#container = container;\n    this.#titleObj = titleObj;\n    this.#contentsObj = contentsObj;\n    this.#richText = richText;\n    this.#parent = parent;\n    this.#color = color;\n    this.#rect = rect;\n    this.#parentRect = parentRect;\n    this.#elements = elements;\n\n    const dateObject = PDFDateString.toDateObject(modificationDate);\n    if (dateObject) {\n      // The modification date is shown in the popup instead of the creation\n      // date if it is available and can be parsed correctly, which is\n      // consistent with other viewers such as Adobe Acrobat.\n      this.#dateTimePromise = parent.l10n.get(\"annotation_date_string\", {\n        date: dateObject.toLocaleDateString(),\n        time: dateObject.toLocaleTimeString(),\n      });\n    }\n\n    this.trigger = elements.flatMap(e => e.getElementsToTriggerPopup());\n    // Attach the event listeners to the trigger element.\n    for (const element of this.trigger) {\n      element.addEventListener(\"click\", this.#boundToggle);\n      element.addEventListener(\"mouseenter\", this.#boundShow);\n      element.addEventListener(\"mouseleave\", this.#boundHide);\n      element.classList.add(\"popupTriggerArea\");\n    }\n\n    // Attach the event listener to toggle the popup with the keyboard.\n    for (const element of elements) {\n      element.container?.addEventListener(\"keydown\", this.#boundKeyDown);\n    }\n\n    this.#container.hidden = true;\n    if (open) {\n      this.#toggle();\n    }\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      // Since the popup is lazily created, we need to ensure that it'll be\n      // created and displayed during reference tests.\n      this.#parent.popupShow.push(async () => {\n        if (this.#container.hidden) {\n          this.#show();\n        }\n        if (this.#dateTimePromise) {\n          await this.#dateTimePromise;\n        }\n      });\n    }\n  }\n\n  render() {\n    if (this.#popup) {\n      return;\n    }\n\n    const {\n      page: { view },\n      viewport: {\n        rawDims: { pageWidth, pageHeight, pageX, pageY },\n      },\n    } = this.#parent;\n    const popup = (this.#popup = document.createElement(\"div\"));\n    popup.className = \"popup\";\n\n    if (this.#color) {\n      const baseColor = (popup.style.outlineColor = Util.makeHexColor(\n        ...this.#color\n      ));\n      if (\n        (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) ||\n        CSS.supports(\"background-color\", \"color-mix(in srgb, red 30%, white)\")\n      ) {\n        popup.style.backgroundColor = `color-mix(in srgb, ${baseColor} 30%, white)`;\n      } else {\n        // color-mix isn't supported in some browsers hence this version.\n        // See https://developer.mozilla.org/en-US/docs/Web/CSS/color_value/color-mix#browser_compatibility\n        // TODO: Use color-mix when it's supported everywhere.\n        // Enlighten the color.\n        const BACKGROUND_ENLIGHT = 0.7;\n        popup.style.backgroundColor = Util.makeHexColor(\n          ...this.#color.map(c =>\n            Math.floor(BACKGROUND_ENLIGHT * (255 - c) + c)\n          )\n        );\n      }\n    }\n\n    const header = document.createElement(\"span\");\n    header.className = \"header\";\n    const title = document.createElement(\"h1\");\n    header.append(title);\n    ({ dir: title.dir, str: title.textContent } = this.#titleObj);\n    popup.append(header);\n\n    if (this.#dateTimePromise) {\n      const modificationDate = document.createElement(\"span\");\n      modificationDate.classList.add(\"popupDate\");\n      this.#dateTimePromise.then(localized => {\n        modificationDate.textContent = localized;\n      });\n      header.append(modificationDate);\n    }\n\n    const contentsObj = this.#contentsObj;\n    const richText = this.#richText;\n    if (\n      richText?.str &&\n      (!contentsObj?.str || contentsObj.str === richText.str)\n    ) {\n      XfaLayer.render({\n        xfaHtml: richText.html,\n        intent: \"richText\",\n        div: popup,\n      });\n      popup.lastChild.classList.add(\"richText\", \"popupContent\");\n    } else {\n      const contents = this._formatContents(contentsObj);\n      popup.append(contents);\n    }\n\n    let useParentRect = !!this.#parentRect;\n    let rect = useParentRect ? this.#parentRect : this.#rect;\n    for (const element of this.#elements) {\n      if (!rect || Util.intersect(element.data.rect, rect) !== null) {\n        rect = element.data.rect;\n        useParentRect = true;\n        break;\n      }\n    }\n\n    const normalizedRect = Util.normalizeRect([\n      rect[0],\n      view[3] - rect[1] + view[1],\n      rect[2],\n      view[3] - rect[3] + view[1],\n    ]);\n\n    const HORIZONTAL_SPACE_AFTER_ANNOTATION = 5;\n    const parentWidth = useParentRect\n      ? rect[2] - rect[0] + HORIZONTAL_SPACE_AFTER_ANNOTATION\n      : 0;\n    const popupLeft = normalizedRect[0] + parentWidth;\n    const popupTop = normalizedRect[1];\n\n    const { style } = this.#container;\n    style.left = `${(100 * (popupLeft - pageX)) / pageWidth}%`;\n    style.top = `${(100 * (popupTop - pageY)) / pageHeight}%`;\n\n    this.#container.append(popup);\n  }\n\n  /**\n   * Format the contents of the popup by adding newlines where necessary.\n   *\n   * @private\n   * @param {Object<string, string>} contentsObj\n   * @memberof PopupElement\n   * @returns {HTMLParagraphElement}\n   */\n  _formatContents({ str, dir }) {\n    const p = document.createElement(\"p\");\n    p.classList.add(\"popupContent\");\n    p.dir = dir;\n    const lines = str.split(/(?:\\r\\n?|\\n)/);\n    for (let i = 0, ii = lines.length; i < ii; ++i) {\n      const line = lines[i];\n      p.append(document.createTextNode(line));\n      if (i < ii - 1) {\n        p.append(document.createElement(\"br\"));\n      }\n    }\n    return p;\n  }\n\n  #keyDown(event) {\n    if (event.altKey || event.shiftKey || event.ctrlKey || event.metaKey) {\n      return;\n    }\n\n    if (event.key === \"Enter\" || (event.key === \"Escape\" && this.#pinned)) {\n      this.#toggle();\n    }\n  }\n\n  /**\n   * Toggle the visibility of the popup.\n   */\n  #toggle() {\n    this.#pinned = !this.#pinned;\n    if (this.#pinned) {\n      this.#show();\n      this.#container.addEventListener(\"click\", this.#boundToggle);\n      this.#container.addEventListener(\"keydown\", this.#boundKeyDown);\n    } else {\n      this.#hide();\n      this.#container.removeEventListener(\"click\", this.#boundToggle);\n      this.#container.removeEventListener(\"keydown\", this.#boundKeyDown);\n    }\n  }\n\n  /**\n   * Show the popup.\n   */\n  #show() {\n    if (!this.#popup) {\n      this.render();\n    }\n    if (!this.isVisible) {\n      this.#container.hidden = false;\n      this.#container.style.zIndex =\n        parseInt(this.#container.style.zIndex) + 1000;\n    } else if (this.#pinned) {\n      this.#container.classList.add(\"focused\");\n    }\n  }\n\n  /**\n   * Hide the popup.\n   */\n  #hide() {\n    this.#container.classList.remove(\"focused\");\n    if (this.#pinned || !this.isVisible) {\n      return;\n    }\n    this.#container.hidden = true;\n    this.#container.style.zIndex =\n      parseInt(this.#container.style.zIndex) - 1000;\n  }\n\n  forceHide() {\n    this.#wasVisible = this.isVisible;\n    if (!this.#wasVisible) {\n      return;\n    }\n    this.#container.hidden = true;\n  }\n\n  maybeShow() {\n    if (!this.#wasVisible) {\n      return;\n    }\n    this.#wasVisible = false;\n    this.#container.hidden = false;\n  }\n\n  get isVisible() {\n    return this.#container.hidden === false;\n  }\n}\n\nclass FreeTextAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n    this.textContent = parameters.data.textContent;\n    this.textPosition = parameters.data.textPosition;\n    this.annotationEditorType = AnnotationEditorType.FREETEXT;\n  }\n\n  render() {\n    this.container.classList.add(\"freeTextAnnotation\");\n\n    if (this.textContent) {\n      const content = document.createElement(\"div\");\n      content.classList.add(\"annotationTextContent\");\n      content.setAttribute(\"role\", \"comment\");\n      for (const line of this.textContent) {\n        const lineSpan = document.createElement(\"span\");\n        lineSpan.textContent = line;\n        content.append(lineSpan);\n      }\n      this.container.append(content);\n    }\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this._editOnDoubleClick();\n\n    return this.container;\n  }\n}\n\nclass LineAnnotationElement extends AnnotationElement {\n  #line = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"lineAnnotation\");\n\n    // Create an invisible line with the same starting and ending coordinates\n    // that acts as the trigger for the popup. Only the line itself should\n    // trigger the popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // PDF coordinates are calculated from a bottom left origin, so transform\n    // the line coordinates to a top left origin for the SVG element.\n    const line = (this.#line = this.svgFactory.createElement(\"svg:line\"));\n    line.setAttribute(\"x1\", data.rect[2] - data.lineCoordinates[0]);\n    line.setAttribute(\"y1\", data.rect[3] - data.lineCoordinates[1]);\n    line.setAttribute(\"x2\", data.rect[2] - data.lineCoordinates[2]);\n    line.setAttribute(\"y2\", data.rect[3] - data.lineCoordinates[3]);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    line.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    line.setAttribute(\"stroke\", \"transparent\");\n    line.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(line);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the line instead\n    // of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#line;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass SquareAnnotationElement extends AnnotationElement {\n  #square = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"squareAnnotation\");\n\n    // Create an invisible square with the same rectangle that acts as the\n    // trigger for the popup. Only the square itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // The browser draws half of the borders inside the square and half of\n    // the borders outside the square by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const square = (this.#square = this.svgFactory.createElement(\"svg:rect\"));\n    square.setAttribute(\"x\", borderWidth / 2);\n    square.setAttribute(\"y\", borderWidth / 2);\n    square.setAttribute(\"width\", width - borderWidth);\n    square.setAttribute(\"height\", height - borderWidth);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    square.setAttribute(\"stroke-width\", borderWidth || 1);\n    square.setAttribute(\"stroke\", \"transparent\");\n    square.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(square);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the square instead\n    // of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#square;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass CircleAnnotationElement extends AnnotationElement {\n  #circle = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"circleAnnotation\");\n\n    // Create an invisible circle with the same ellipse that acts as the\n    // trigger for the popup. Only the circle itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // The browser draws half of the borders inside the circle and half of\n    // the borders outside the circle by default. This behavior cannot be\n    // changed programmatically, so correct for that here.\n    const borderWidth = data.borderStyle.width;\n    const circle = (this.#circle =\n      this.svgFactory.createElement(\"svg:ellipse\"));\n    circle.setAttribute(\"cx\", width / 2);\n    circle.setAttribute(\"cy\", height / 2);\n    circle.setAttribute(\"rx\", width / 2 - borderWidth / 2);\n    circle.setAttribute(\"ry\", height / 2 - borderWidth / 2);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    circle.setAttribute(\"stroke-width\", borderWidth || 1);\n    circle.setAttribute(\"stroke\", \"transparent\");\n    circle.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(circle);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the circle instead\n    // of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#circle;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass PolylineAnnotationElement extends AnnotationElement {\n  #polyline = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n\n    this.containerClassName = \"polylineAnnotation\";\n    this.svgElementName = \"svg:polyline\";\n  }\n\n  render() {\n    this.container.classList.add(this.containerClassName);\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup. Only the polyline itself should trigger the\n    // popup, not the entire container.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    // Convert the vertices array to a single points string that the SVG\n    // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n    // calculated from a bottom left origin, so transform the polyline\n    // coordinates to a top left origin for the SVG element.\n    let points = [];\n    for (const coordinate of data.vertices) {\n      const x = coordinate.x - data.rect[0];\n      const y = data.rect[3] - coordinate.y;\n      points.push(x + \",\" + y);\n    }\n    points = points.join(\" \");\n\n    const polyline = (this.#polyline = this.svgFactory.createElement(\n      this.svgElementName\n    ));\n    polyline.setAttribute(\"points\", points);\n    // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n    // won't be possible to open/close the popup (note e.g. issue 11122).\n    polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n    polyline.setAttribute(\"stroke\", \"transparent\");\n    polyline.setAttribute(\"fill\", \"transparent\");\n\n    svg.append(polyline);\n    this.container.append(svg);\n\n    // Create the popup ourselves so that we can bind it to the polyline\n    // instead of to the entire container (which is the default).\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#polyline;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass PolygonAnnotationElement extends PolylineAnnotationElement {\n  constructor(parameters) {\n    // Polygons are specific forms of polylines, so reuse their logic.\n    super(parameters);\n\n    this.containerClassName = \"polygonAnnotation\";\n    this.svgElementName = \"svg:polygon\";\n  }\n}\n\nclass CaretAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"caretAnnotation\");\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n}\n\nclass InkAnnotationElement extends AnnotationElement {\n  #polylines = [];\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n\n    this.containerClassName = \"inkAnnotation\";\n\n    // Use the polyline SVG element since it allows us to use coordinates\n    // directly and to draw both straight lines and curves.\n    this.svgElementName = \"svg:polyline\";\n    this.annotationEditorType = AnnotationEditorType.INK;\n  }\n\n  render() {\n    this.container.classList.add(this.containerClassName);\n\n    // Create an invisible polyline with the same points that acts as the\n    // trigger for the popup.\n    const data = this.data;\n    const { width, height } = getRectDims(data.rect);\n    const svg = this.svgFactory.create(\n      width,\n      height,\n      /* skipDimensions = */ true\n    );\n\n    for (const inkList of data.inkLists) {\n      // Convert the ink list to a single points string that the SVG\n      // polyline element expects (\"x1,y1 x2,y2 ...\"). PDF coordinates are\n      // calculated from a bottom left origin, so transform the polyline\n      // coordinates to a top left origin for the SVG element.\n      let points = [];\n      for (const coordinate of inkList) {\n        const x = coordinate.x - data.rect[0];\n        const y = data.rect[3] - coordinate.y;\n        points.push(`${x},${y}`);\n      }\n      points = points.join(\" \");\n\n      const polyline = this.svgFactory.createElement(this.svgElementName);\n      this.#polylines.push(polyline);\n      polyline.setAttribute(\"points\", points);\n      // Ensure that the 'stroke-width' is always non-zero, since otherwise it\n      // won't be possible to open/close the popup (note e.g. issue 11122).\n      polyline.setAttribute(\"stroke-width\", data.borderStyle.width || 1);\n      polyline.setAttribute(\"stroke\", \"transparent\");\n      polyline.setAttribute(\"fill\", \"transparent\");\n\n      // Create the popup ourselves so that we can bind it to the polyline\n      // instead of to the entire container (which is the default).\n      if (!data.popupRef && this.hasPopupData) {\n        this._createPopup();\n      }\n\n      svg.append(polyline);\n    }\n\n    this.container.append(svg);\n    return this.container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#polylines;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n}\n\nclass HighlightAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"highlightAnnotation\");\n    return this.container;\n  }\n}\n\nclass UnderlineAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"underlineAnnotation\");\n    return this.container;\n  }\n}\n\nclass SquigglyAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"squigglyAnnotation\");\n    return this.container;\n  }\n}\n\nclass StrikeOutAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, {\n      isRenderable: true,\n      ignoreBorder: true,\n      createQuadrilaterals: true,\n    });\n  }\n\n  render() {\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n\n    this.container.classList.add(\"strikeoutAnnotation\");\n    return this.container;\n  }\n}\n\nclass StampAnnotationElement extends AnnotationElement {\n  constructor(parameters) {\n    super(parameters, { isRenderable: true, ignoreBorder: true });\n  }\n\n  render() {\n    this.container.classList.add(\"stampAnnotation\");\n\n    if (!this.data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    }\n    return this.container;\n  }\n}\n\nclass FileAttachmentAnnotationElement extends AnnotationElement {\n  #trigger = null;\n\n  constructor(parameters) {\n    super(parameters, { isRenderable: true });\n\n    const { filename, content } = this.data.file;\n    this.filename = getFilenameFromUrl(filename, /* onlyStripPath = */ true);\n    this.content = content;\n\n    this.linkService.eventBus?.dispatch(\"fileattachmentannotation\", {\n      source: this,\n      filename,\n      content,\n    });\n  }\n\n  render() {\n    this.container.classList.add(\"fileAttachmentAnnotation\");\n\n    const { container, data } = this;\n    let trigger;\n    if (data.hasAppearance || data.fillAlpha === 0) {\n      trigger = document.createElement(\"div\");\n    } else {\n      // Unfortunately it seems that it's not clearly specified exactly what\n      // names are actually valid, since Table 184 contains:\n      //   Conforming readers shall provide predefined icon appearances for at\n      //   least the following standard names: GraphPushPin, PaperclipTag.\n      //   Additional names may be supported as well. Default value: PushPin.\n      trigger = document.createElement(\"img\");\n      trigger.src = `${this.imageResourcesPath}annotation-${\n        /paperclip/i.test(data.name) ? \"paperclip\" : \"pushpin\"\n      }.svg`;\n\n      if (data.fillAlpha && data.fillAlpha < 1) {\n        trigger.style = `filter: opacity(${Math.round(\n          data.fillAlpha * 100\n        )}%);`;\n\n        if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n          this.container.classList.add(\"hasFillAlpha\");\n        }\n      }\n    }\n    trigger.addEventListener(\"dblclick\", this.#download.bind(this));\n    this.#trigger = trigger;\n\n    const { isMac } = FeatureTest.platform;\n    container.addEventListener(\"keydown\", evt => {\n      if (evt.key === \"Enter\" && (isMac ? evt.metaKey : evt.ctrlKey)) {\n        this.#download();\n      }\n    });\n\n    if (!data.popupRef && this.hasPopupData) {\n      this._createPopup();\n    } else {\n      trigger.classList.add(\"popupTriggerArea\");\n    }\n\n    container.append(trigger);\n    return container;\n  }\n\n  getElementsToTriggerPopup() {\n    return this.#trigger;\n  }\n\n  addHighlightArea() {\n    this.container.classList.add(\"highlightArea\");\n  }\n\n  /**\n   * Download the file attachment associated with this annotation.\n   */\n  #download() {\n    this.downloadManager?.openOrDownloadData(\n      this.container,\n      this.content,\n      this.filename\n    );\n  }\n}\n\n/**\n * @typedef {Object} AnnotationLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Array} annotations\n * @property {PDFPageProxy} page\n * @property {IPDFLinkService} linkService\n * @property {IDownloadManager} downloadManager\n * @property {AnnotationStorage} [annotationStorage]\n * @property {string} [imageResourcesPath] - Path for image resources, mainly\n *   for annotation icons. Include trailing slash.\n * @property {boolean} renderForms\n * @property {boolean} [enableScripting] - Enable embedded script execution.\n * @property {boolean} [hasJSActions] - Some fields have JS actions.\n *   The default value is `false`.\n * @property {Object<string, Array<Object>> | null} [fieldObjects]\n * @property {Map<string, HTMLCanvasElement>} [annotationCanvasMap]\n * @property {TextAccessibilityManager} [accessibilityManager]\n */\n\n/**\n * Manage the layer containing all the annotations.\n */\nclass AnnotationLayer {\n  #accessibilityManager = null;\n\n  #annotationCanvasMap = null;\n\n  #editableAnnotations = new Map();\n\n  constructor({\n    div,\n    accessibilityManager,\n    annotationCanvasMap,\n    l10n,\n    page,\n    viewport,\n  }) {\n    this.div = div;\n    this.#accessibilityManager = accessibilityManager;\n    this.#annotationCanvasMap = annotationCanvasMap;\n    this.l10n = l10n;\n    this.page = page;\n    this.viewport = viewport;\n    this.zIndex = 0;\n\n    if (\n      typeof PDFJSDev !== \"undefined\" &&\n      PDFJSDev.test(\"GENERIC && !TESTING\")\n    ) {\n      this.l10n ||= NullL10n;\n    }\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      // For testing purposes.\n      Object.defineProperty(this, \"showPopups\", {\n        value: async () => {\n          for (const show of this.popupShow) {\n            await show();\n          }\n        },\n      });\n      this.popupShow = [];\n    }\n  }\n\n  #appendElement(element, id) {\n    const contentElement = element.firstChild || element;\n    contentElement.id = `${AnnotationPrefix}${id}`;\n\n    this.div.append(element);\n    this.#accessibilityManager?.moveElementInDOM(\n      this.div,\n      element,\n      contentElement,\n      /* isRemovable = */ false\n    );\n  }\n\n  /**\n   * Render a new annotation layer with all annotation elements.\n   *\n   * @param {AnnotationLayerParameters} params\n   * @memberof AnnotationLayer\n   */\n  async render(params) {\n    const { annotations } = params;\n    const layer = this.div;\n    setLayerDimensions(layer, this.viewport);\n\n    const popupToElements = new Map();\n    const elementParams = {\n      data: null,\n      layer,\n      linkService: params.linkService,\n      downloadManager: params.downloadManager,\n      imageResourcesPath: params.imageResourcesPath || \"\",\n      renderForms: params.renderForms !== false,\n      svgFactory: new DOMSVGFactory(),\n      annotationStorage: params.annotationStorage || new AnnotationStorage(),\n      enableScripting: params.enableScripting === true,\n      hasJSActions: params.hasJSActions,\n      fieldObjects: params.fieldObjects,\n      parent: this,\n      elements: null,\n    };\n\n    for (const data of annotations) {\n      if (data.noHTML) {\n        continue;\n      }\n      const isPopupAnnotation = data.annotationType === AnnotationType.POPUP;\n      if (!isPopupAnnotation) {\n        const { width, height } = getRectDims(data.rect);\n        if (width <= 0 || height <= 0) {\n          continue; // Ignore empty annotations.\n        }\n      } else {\n        const elements = popupToElements.get(data.id);\n        if (!elements) {\n          // Ignore popup annotations without a corresponding annotation.\n          continue;\n        }\n        elementParams.elements = elements;\n      }\n      elementParams.data = data;\n      const element = AnnotationElementFactory.create(elementParams);\n\n      if (!element.isRenderable) {\n        continue;\n      }\n\n      if (!isPopupAnnotation && data.popupRef) {\n        const elements = popupToElements.get(data.popupRef);\n        if (!elements) {\n          popupToElements.set(data.popupRef, [element]);\n        } else {\n          elements.push(element);\n        }\n      }\n\n      if (element.annotationEditorType > 0) {\n        this.#editableAnnotations.set(element.data.id, element);\n      }\n\n      const rendered = element.render();\n      if (data.hidden) {\n        rendered.style.visibility = \"hidden\";\n      }\n      this.#appendElement(rendered, data.id);\n    }\n\n    this.#setAnnotationCanvasMap();\n\n    await this.l10n.translate(layer);\n  }\n\n  /**\n   * Update the annotation elements on existing annotation layer.\n   *\n   * @param {AnnotationLayerParameters} viewport\n   * @memberof AnnotationLayer\n   */\n  update({ viewport }) {\n    const layer = this.div;\n    this.viewport = viewport;\n    setLayerDimensions(layer, { rotation: viewport.rotation });\n\n    this.#setAnnotationCanvasMap();\n    layer.hidden = false;\n  }\n\n  #setAnnotationCanvasMap() {\n    if (!this.#annotationCanvasMap) {\n      return;\n    }\n    const layer = this.div;\n    for (const [id, canvas] of this.#annotationCanvasMap) {\n      const element = layer.querySelector(`[data-annotation-id=\"${id}\"]`);\n      if (!element) {\n        continue;\n      }\n\n      const { firstChild } = element;\n      if (!firstChild) {\n        element.append(canvas);\n      } else if (firstChild.nodeName === \"CANVAS\") {\n        firstChild.replaceWith(canvas);\n      } else {\n        firstChild.before(canvas);\n      }\n    }\n    this.#annotationCanvasMap.clear();\n  }\n\n  getEditableAnnotations() {\n    return Array.from(this.#editableAnnotations.values());\n  }\n\n  getEditableAnnotation(id) {\n    return this.#editableAnnotations.get(id);\n  }\n}\n\nexport {\n  AnnotationLayer,\n  FreeTextAnnotationElement,\n  InkAnnotationElement,\n  StampAnnotationElement,\n};\n", "/* Copyright 2020 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `../display/` and\n *              `../scripting_api/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\nfunction makeColorComp(n) {\n  return Math.floor(Math.max(0, Math.min(1, n)) * 255)\n    .toString(16)\n    .padStart(2, \"0\");\n}\n\nfunction scaleAndClamp(x) {\n  return Math.max(0, Math.min(255, 255 * x));\n}\n\n// PDF specifications section 10.3\nclass ColorConverters {\n  static CMYK_G([c, y, m, k]) {\n    return [\"G\", 1 - Math.min(1, 0.3 * c + 0.59 * m + 0.11 * y + k)];\n  }\n\n  static G_CMYK([g]) {\n    return [\"CMYK\", 0, 0, 0, 1 - g];\n  }\n\n  static G_RGB([g]) {\n    return [\"RGB\", g, g, g];\n  }\n\n  static G_rgb([g]) {\n    g = scaleAndClamp(g);\n    return [g, g, g];\n  }\n\n  static G_HTML([g]) {\n    const G = makeColorComp(g);\n    return `#${G}${G}${G}`;\n  }\n\n  static RGB_G([r, g, b]) {\n    return [\"G\", 0.3 * r + 0.59 * g + 0.11 * b];\n  }\n\n  static RGB_rgb(color) {\n    return color.map(scaleAndClamp);\n  }\n\n  static RGB_HTML(color) {\n    return `#${color.map(makeColorComp).join(\"\")}`;\n  }\n\n  static T_HTML() {\n    return \"#00000000\";\n  }\n\n  static T_rgb() {\n    return [null];\n  }\n\n  static CMYK_RGB([c, y, m, k]) {\n    return [\n      \"RGB\",\n      1 - Math.min(1, c + k),\n      1 - Math.min(1, m + k),\n      1 - Math.min(1, y + k),\n    ];\n  }\n\n  static CMYK_rgb([c, y, m, k]) {\n    return [\n      scaleAndClamp(1 - Math.min(1, c + k)),\n      scaleAndClamp(1 - Math.min(1, m + k)),\n      scaleAndClamp(1 - Math.min(1, y + k)),\n    ];\n  }\n\n  static CMYK_HTML(components) {\n    const rgb = this.CMYK_RGB(components).slice(1);\n    return this.RGB_HTML(rgb);\n  }\n\n  static RGB_CMYK([r, g, b]) {\n    const c = 1 - r;\n    const m = 1 - g;\n    const y = 1 - b;\n    const k = Math.min(c, m, y);\n    return [\"CMYK\", c, m, y, k];\n  }\n}\n\nexport { ColorConverters };\n", "/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * PLEASE NOTE: This file is currently imported in both the `web/` and\n *              `src/display/` folders, hence be EXTREMELY careful about\n *              introducing any dependencies here since that can lead to an\n *              unexpected/unnecessary size increase of the *built* files.\n */\n\n/**\n * A subset of the l10n strings in the `l10n/en-US/viewer.properties` file.\n */\nconst DEFAULT_L10N_STRINGS = {\n  of_pages: \"of {{pagesCount}}\",\n  page_of_pages: \"({{pageNumber}} of {{pagesCount}})\",\n\n  document_properties_kb: \"{{size_kb}} KB ({{size_b}} bytes)\",\n  document_properties_mb: \"{{size_mb}} MB ({{size_b}} bytes)\",\n  document_properties_date_string: \"{{date}}, {{time}}\",\n  document_properties_page_size_unit_inches: \"in\",\n  document_properties_page_size_unit_millimeters: \"mm\",\n  document_properties_page_size_orientation_portrait: \"portrait\",\n  document_properties_page_size_orientation_landscape: \"landscape\",\n  document_properties_page_size_name_a3: \"A3\",\n  document_properties_page_size_name_a4: \"A4\",\n  document_properties_page_size_name_letter: \"Letter\",\n  document_properties_page_size_name_legal: \"Legal\",\n  document_properties_page_size_dimension_string:\n    \"{{width}} × {{height}} {{unit}} ({{orientation}})\",\n  document_properties_page_size_dimension_name_string:\n    \"{{width}} × {{height}} {{unit}} ({{name}}, {{orientation}})\",\n  document_properties_linearized_yes: \"Yes\",\n  document_properties_linearized_no: \"No\",\n\n  additional_layers: \"Additional Layers\",\n  page_landmark: \"Page {{page}}\",\n  thumb_page_title: \"Page {{page}}\",\n  thumb_page_canvas: \"Thumbnail of Page {{page}}\",\n\n  find_reached_top: \"Reached top of document, continued from bottom\",\n  find_reached_bottom: \"Reached end of document, continued from top\",\n  \"find_match_count[one]\": \"{{current}} of {{total}} match\",\n  \"find_match_count[other]\": \"{{current}} of {{total}} matches\",\n  \"find_match_count_limit[one]\": \"More than {{limit}} match\",\n  \"find_match_count_limit[other]\": \"More than {{limit}} matches\",\n  find_not_found: \"Phrase not found\",\n\n  page_scale_width: \"Page Width\",\n  page_scale_fit: \"Page Fit\",\n  page_scale_auto: \"Automatic Zoom\",\n  page_scale_actual: \"Actual Size\",\n  page_scale_percent: \"{{scale}}%\",\n\n  loading_error: \"An error occurred while loading the PDF.\",\n  invalid_file_error: \"Invalid or corrupted PDF file.\",\n  missing_file_error: \"Missing PDF file.\",\n  unexpected_response_error: \"Unexpected server response.\",\n  rendering_error: \"An error occurred while rendering the page.\",\n\n  annotation_date_string: \"{{date}}, {{time}}\",\n\n  printing_not_supported:\n    \"Warning: Printing is not fully supported by this browser.\",\n  printing_not_ready: \"Warning: The PDF is not fully loaded for printing.\",\n  web_fonts_disabled:\n    \"Web fonts are disabled: unable to use embedded PDF fonts.\",\n\n  free_text2_default_content: \"Start typing…\",\n  editor_free_text2_aria_label: \"Text Editor\",\n  editor_ink2_aria_label: \"Draw Editor\",\n  editor_ink_canvas_aria_label: \"User-created image\",\n  editor_alt_text_button_label: \"Alt text\",\n  editor_alt_text_edit_button_label: \"Edit alt text\",\n  editor_alt_text_decorative_tooltip: \"Marked as decorative\",\n};\nif (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"MOZCENTRAL\")) {\n  DEFAULT_L10N_STRINGS.print_progress_percent = \"{{progress}}%\";\n}\n\nfunction getL10nFallback(key, args) {\n  switch (key) {\n    case \"find_match_count\":\n      key = `find_match_count[${args.total === 1 ? \"one\" : \"other\"}]`;\n      break;\n    case \"find_match_count_limit\":\n      key = `find_match_count_limit[${args.limit === 1 ? \"one\" : \"other\"}]`;\n      break;\n  }\n  return DEFAULT_L10N_STRINGS[key] || \"\";\n}\n\n// Replaces {{arguments}} with their values.\nfunction formatL10nValue(text, args) {\n  if (!args) {\n    return text;\n  }\n  return text.replaceAll(/\\{\\{\\s*(\\w+)\\s*\\}\\}/g, (all, name) => {\n    return name in args ? args[name] : \"{{\" + name + \"}}\";\n  });\n}\n\n/**\n * No-op implementation of the localization service.\n * @implements {IL10n}\n */\nconst NullL10n = {\n  async getLanguage() {\n    return \"en-us\";\n  },\n\n  async getDirection() {\n    return \"ltr\";\n  },\n\n  async get(key, args = null, fallback = getL10nFallback(key, args)) {\n    return formatL10nValue(fallback, args);\n  },\n\n  async translate(element) {},\n};\n\nexport { getL10nFallback, NullL10n };\n", "/* Copyright 2021 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./annotation_storage\").AnnotationStorage} AnnotationStorage */\n/** @typedef {import(\"./display_utils\").PageViewport} PageViewport */\n/** @typedef {import(\"../../web/interfaces\").IPDFLinkService} IPDFLinkService */\n\nimport { XfaText } from \"./xfa_text.js\";\n\n/**\n * @typedef {Object} XfaLayerParameters\n * @property {PageViewport} viewport\n * @property {HTMLDivElement} div\n * @property {Object} xfaHtml\n * @property {AnnotationStorage} [annotationStorage]\n * @property {IPDFLinkService} linkService\n * @property {string} [intent] - (default value is 'display').\n */\n\nclass XfaLayer {\n  static setupStorage(html, id, element, storage, intent) {\n    const storedData = storage.getValue(id, { value: null });\n    switch (element.name) {\n      case \"textarea\":\n        if (storedData.value !== null) {\n          html.textContent = storedData.value;\n        }\n        if (intent === \"print\") {\n          break;\n        }\n        html.addEventListener(\"input\", event => {\n          storage.setValue(id, { value: event.target.value });\n        });\n        break;\n      case \"input\":\n        if (\n          element.attributes.type === \"radio\" ||\n          element.attributes.type === \"checkbox\"\n        ) {\n          if (storedData.value === element.attributes.xfaOn) {\n            html.setAttribute(\"checked\", true);\n          } else if (storedData.value === element.attributes.xfaOff) {\n            // The checked attribute may have been set when opening the file,\n            // unset through the UI and we're here because of printing.\n            html.removeAttribute(\"checked\");\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"change\", event => {\n            storage.setValue(id, {\n              value: event.target.checked\n                ? event.target.getAttribute(\"xfaOn\")\n                : event.target.getAttribute(\"xfaOff\"),\n            });\n          });\n        } else {\n          if (storedData.value !== null) {\n            html.setAttribute(\"value\", storedData.value);\n          }\n          if (intent === \"print\") {\n            break;\n          }\n          html.addEventListener(\"input\", event => {\n            storage.setValue(id, { value: event.target.value });\n          });\n        }\n        break;\n      case \"select\":\n        if (storedData.value !== null) {\n          html.setAttribute(\"value\", storedData.value);\n          for (const option of element.children) {\n            if (option.attributes.value === storedData.value) {\n              option.attributes.selected = true;\n            } else if (option.attributes.hasOwnProperty(\"selected\")) {\n              delete option.attributes.selected;\n            }\n          }\n        }\n        html.addEventListener(\"input\", event => {\n          const options = event.target.options;\n          const value =\n            options.selectedIndex === -1\n              ? \"\"\n              : options[options.selectedIndex].value;\n          storage.setValue(id, { value });\n        });\n        break;\n    }\n  }\n\n  static setAttributes({ html, element, storage = null, intent, linkService }) {\n    const { attributes } = element;\n    const isHTMLAnchorElement = html instanceof HTMLAnchorElement;\n\n    if (attributes.type === \"radio\") {\n      // Avoid to have a radio group when printing with the same as one\n      // already displayed.\n      attributes.name = `${attributes.name}-${intent}`;\n    }\n    for (const [key, value] of Object.entries(attributes)) {\n      if (value === null || value === undefined) {\n        continue;\n      }\n\n      switch (key) {\n        case \"class\":\n          if (value.length) {\n            html.setAttribute(key, value.join(\" \"));\n          }\n          break;\n        case \"dataId\":\n          // We don't need to add dataId in the html object but it can\n          // be useful to know its value when writing printing tests:\n          // in this case, don't skip dataId to have its value.\n          break;\n        case \"id\":\n          html.setAttribute(\"data-element-id\", value);\n          break;\n        case \"style\":\n          Object.assign(html.style, value);\n          break;\n        case \"textContent\":\n          html.textContent = value;\n          break;\n        default:\n          if (!isHTMLAnchorElement || (key !== \"href\" && key !== \"newWindow\")) {\n            html.setAttribute(key, value);\n          }\n      }\n    }\n\n    if (isHTMLAnchorElement) {\n      linkService.addLinkAttributes(\n        html,\n        attributes.href,\n        attributes.newWindow\n      );\n    }\n\n    // Set the value after the others to be sure to overwrite any other values.\n    if (storage && attributes.dataId) {\n      this.setupStorage(html, attributes.dataId, element, storage);\n    }\n  }\n\n  /**\n   * Render the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static render(parameters) {\n    const storage = parameters.annotationStorage;\n    const linkService = parameters.linkService;\n    const root = parameters.xfaHtml;\n    const intent = parameters.intent || \"display\";\n    const rootHtml = document.createElement(root.name);\n    if (root.attributes) {\n      this.setAttributes({\n        html: rootHtml,\n        element: root,\n        intent,\n        linkService,\n      });\n    }\n    const stack = [[root, -1, rootHtml]];\n\n    const rootDiv = parameters.div;\n    rootDiv.append(rootHtml);\n\n    if (parameters.viewport) {\n      const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n      rootDiv.style.transform = transform;\n    }\n\n    // Set defaults.\n    if (intent !== \"richText\") {\n      rootDiv.setAttribute(\"class\", \"xfaLayer xfaFont\");\n    }\n\n    // Text nodes used for the text highlighter.\n    const textDivs = [];\n\n    while (stack.length > 0) {\n      const [parent, i, html] = stack.at(-1);\n      if (i + 1 === parent.children.length) {\n        stack.pop();\n        continue;\n      }\n\n      const child = parent.children[++stack.at(-1)[1]];\n      if (child === null) {\n        continue;\n      }\n\n      const { name } = child;\n      if (name === \"#text\") {\n        const node = document.createTextNode(child.value);\n        textDivs.push(node);\n        html.append(node);\n        continue;\n      }\n\n      const childHtml = child?.attributes?.xmlns\n        ? document.createElementNS(child.attributes.xmlns, name)\n        : document.createElement(name);\n\n      html.append(childHtml);\n      if (child.attributes) {\n        this.setAttributes({\n          html: childHtml,\n          element: child,\n          storage,\n          intent,\n          linkService,\n        });\n      }\n\n      if (child.children && child.children.length > 0) {\n        stack.push([child, -1, childHtml]);\n      } else if (child.value) {\n        const node = document.createTextNode(child.value);\n        if (XfaText.shouldBuildText(name)) {\n          textDivs.push(node);\n        }\n        childHtml.append(node);\n      }\n    }\n\n    /**\n     * TODO: re-enable that stuff once we've JS implementation.\n     * See https://bugzilla.mozilla.org/show_bug.cgi?id=1719465.\n     *\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaDisabled input, .xfaDisabled textarea\"\n     * )) {\n     * el.setAttribute(\"disabled\", true);\n     * }\n     * for (const el of rootDiv.querySelectorAll(\n     * \".xfaReadOnly input, .xfaReadOnly textarea\"\n     * )) {\n     * el.setAttribute(\"readOnly\", true);\n     * }\n     */\n\n    for (const el of rootDiv.querySelectorAll(\n      \".xfaNonInteractive input, .xfaNonInteractive textarea\"\n    )) {\n      el.setAttribute(\"readOnly\", true);\n    }\n\n    return {\n      textDivs,\n    };\n  }\n\n  /**\n   * Update the XFA layer.\n   *\n   * @param {XfaLayerParameters} parameters\n   */\n  static update(parameters) {\n    const transform = `matrix(${parameters.viewport.transform.join(\",\")})`;\n    parameters.div.style.transform = transform;\n    parameters.div.hidden = false;\n  }\n}\n\nexport { XfaLayer };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  Util,\n} from \"../../shared/util.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { InkAnnotationElement } from \"../annotation_layer.js\";\nimport { noContextMenu } from \"../display_utils.js\";\nimport { opacityToHex } from \"./tools.js\";\n\n/**\n * Basic draw editor in order to generate an Ink annotation.\n */\nclass InkEditor extends AnnotationEditor {\n  #baseHeight = 0;\n\n  #baseWidth = 0;\n\n  #boundCanvasPointermove = this.canvasPointermove.bind(this);\n\n  #boundCanvasPointerleave = this.canvasPointerleave.bind(this);\n\n  #boundCanvasPointerup = this.canvasPointerup.bind(this);\n\n  #boundCanvasPointerdown = this.canvasPointerdown.bind(this);\n\n  #currentPath2D = new Path2D();\n\n  #disableEditing = false;\n\n  #hasSomethingToDraw = false;\n\n  #isCanvasInitialized = false;\n\n  #observer = null;\n\n  #realWidth = 0;\n\n  #realHeight = 0;\n\n  #requestFrameCallback = null;\n\n  static _defaultColor = null;\n\n  static _defaultOpacity = 1;\n\n  static _defaultThickness = 1;\n\n  static _type = \"ink\";\n\n  constructor(params) {\n    super({ ...params, name: \"inkEditor\" });\n    this.color = params.color || null;\n    this.thickness = params.thickness || null;\n    this.opacity = params.opacity || null;\n    this.paths = [];\n    this.bezierPath2D = [];\n    this.allRawPaths = [];\n    this.currentPath = [];\n    this.scaleFactor = 1;\n    this.translationX = this.translationY = 0;\n    this.x = 0;\n    this.y = 0;\n    this._willKeepAspectRatio = true;\n  }\n\n  /** @inheritdoc */\n  static initialize(l10n) {\n    AnnotationEditor.initialize(l10n, {\n      strings: [\"editor_ink_canvas_aria_label\", \"editor_ink2_aria_label\"],\n    });\n  }\n\n  /** @inheritdoc */\n  static updateDefaultParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        InkEditor._defaultThickness = value;\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        InkEditor._defaultColor = value;\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        InkEditor._defaultOpacity = value / 100;\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  updateParams(type, value) {\n    switch (type) {\n      case AnnotationEditorParamsType.INK_THICKNESS:\n        this.#updateThickness(value);\n        break;\n      case AnnotationEditorParamsType.INK_COLOR:\n        this.#updateColor(value);\n        break;\n      case AnnotationEditorParamsType.INK_OPACITY:\n        this.#updateOpacity(value);\n        break;\n    }\n  }\n\n  /** @inheritdoc */\n  static get defaultPropertiesToUpdate() {\n    return [\n      [AnnotationEditorParamsType.INK_THICKNESS, InkEditor._defaultThickness],\n      [\n        AnnotationEditorParamsType.INK_COLOR,\n        InkEditor._defaultColor || AnnotationEditor._defaultLineColor,\n      ],\n      [\n        AnnotationEditorParamsType.INK_OPACITY,\n        Math.round(InkEditor._defaultOpacity * 100),\n      ],\n    ];\n  }\n\n  /** @inheritdoc */\n  get propertiesToUpdate() {\n    return [\n      [\n        AnnotationEditorParamsType.INK_THICKNESS,\n        this.thickness || InkEditor._defaultThickness,\n      ],\n      [\n        AnnotationEditorParamsType.INK_COLOR,\n        this.color ||\n          InkEditor._defaultColor ||\n          AnnotationEditor._defaultLineColor,\n      ],\n      [\n        AnnotationEditorParamsType.INK_OPACITY,\n        Math.round(100 * (this.opacity ?? InkEditor._defaultOpacity)),\n      ],\n    ];\n  }\n\n  /**\n   * Update the thickness and make this action undoable.\n   * @param {number} thickness\n   */\n  #updateThickness(thickness) {\n    const savedThickness = this.thickness;\n    this.addCommands({\n      cmd: () => {\n        this.thickness = thickness;\n        this.#fitToContent();\n      },\n      undo: () => {\n        this.thickness = savedThickness;\n        this.#fitToContent();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_THICKNESS,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the color and make this action undoable.\n   * @param {string} color\n   */\n  #updateColor(color) {\n    const savedColor = this.color;\n    this.addCommands({\n      cmd: () => {\n        this.color = color;\n        this.#redraw();\n      },\n      undo: () => {\n        this.color = savedColor;\n        this.#redraw();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_COLOR,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /**\n   * Update the opacity and make this action undoable.\n   * @param {number} opacity\n   */\n  #updateOpacity(opacity) {\n    opacity /= 100;\n    const savedOpacity = this.opacity;\n    this.addCommands({\n      cmd: () => {\n        this.opacity = opacity;\n        this.#redraw();\n      },\n      undo: () => {\n        this.opacity = savedOpacity;\n        this.#redraw();\n      },\n      mustExec: true,\n      type: AnnotationEditorParamsType.INK_OPACITY,\n      overwriteIfSameType: true,\n      keepUndo: true,\n    });\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    if (!this.parent) {\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (!this.canvas) {\n      this.#createCanvas();\n      this.#createObserver();\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilding it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n      this.#setCanvasDims();\n    }\n    this.#fitToContent();\n  }\n\n  /** @inheritdoc */\n  remove() {\n    if (this.canvas === null) {\n      return;\n    }\n\n    if (!this.isEmpty()) {\n      this.commit();\n    }\n\n    // Destroy the canvas.\n    this.canvas.width = this.canvas.height = 0;\n    this.canvas.remove();\n    this.canvas = null;\n\n    this.#observer.disconnect();\n    this.#observer = null;\n\n    super.remove();\n  }\n\n  setParent(parent) {\n    if (!this.parent && parent) {\n      // We've a parent hence the rescale will be handled thanks to the\n      // ResizeObserver.\n      this._uiManager.removeShouldRescale(this);\n    } else if (this.parent && parent === null) {\n      // The editor is removed from the DOM, hence we handle the rescale thanks\n      // to the onScaleChanging callback.\n      // This way, it'll be saved/printed correctly.\n      this._uiManager.addShouldRescale(this);\n    }\n    super.setParent(parent);\n  }\n\n  onScaleChanging() {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    const width = this.width * parentWidth;\n    const height = this.height * parentHeight;\n    this.setDimensions(width, height);\n  }\n\n  /** @inheritdoc */\n  enableEditMode() {\n    if (this.#disableEditing || this.canvas === null) {\n      return;\n    }\n\n    super.enableEditMode();\n    this._isDraggable = false;\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n  }\n\n  /** @inheritdoc */\n  disableEditMode() {\n    if (!this.isInEditMode() || this.canvas === null) {\n      return;\n    }\n\n    super.disableEditMode();\n    this._isDraggable = !this.isEmpty();\n    this.div.classList.remove(\"editing\");\n\n    this.canvas.removeEventListener(\n      \"pointerdown\",\n      this.#boundCanvasPointerdown\n    );\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    this._isDraggable = !this.isEmpty();\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return (\n      this.paths.length === 0 ||\n      (this.paths.length === 1 && this.paths[0].length === 0)\n    );\n  }\n\n  #getInitialBBox() {\n    const {\n      parentRotation,\n      parentDimensions: [width, height],\n    } = this;\n    switch (parentRotation) {\n      case 90:\n        return [0, height, height, width];\n      case 180:\n        return [width, height, width, height];\n      case 270:\n        return [width, 0, height, width];\n      default:\n        return [0, 0, width, height];\n    }\n  }\n\n  /**\n   * Set line styles.\n   */\n  #setStroke() {\n    const { ctx, color, opacity, thickness, parentScale, scaleFactor } = this;\n    ctx.lineWidth = (thickness * parentScale) / scaleFactor;\n    ctx.lineCap = \"round\";\n    ctx.lineJoin = \"round\";\n    ctx.miterLimit = 10;\n    ctx.strokeStyle = `${color}${opacityToHex(opacity)}`;\n  }\n\n  /**\n   * Start to draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #startDrawing(x, y) {\n    this.canvas.addEventListener(\"contextmenu\", noContextMenu);\n    this.canvas.addEventListener(\"pointerleave\", this.#boundCanvasPointerleave);\n    this.canvas.addEventListener(\"pointermove\", this.#boundCanvasPointermove);\n    this.canvas.addEventListener(\"pointerup\", this.#boundCanvasPointerup);\n    this.canvas.removeEventListener(\n      \"pointerdown\",\n      this.#boundCanvasPointerdown\n    );\n\n    this.isEditing = true;\n    if (!this.#isCanvasInitialized) {\n      this.#isCanvasInitialized = true;\n      this.#setCanvasDims();\n      this.thickness ||= InkEditor._defaultThickness;\n      this.color ||=\n        InkEditor._defaultColor || AnnotationEditor._defaultLineColor;\n      this.opacity ??= InkEditor._defaultOpacity;\n    }\n    this.currentPath.push([x, y]);\n    this.#hasSomethingToDraw = false;\n    this.#setStroke();\n\n    this.#requestFrameCallback = () => {\n      this.#drawPoints();\n      if (this.#requestFrameCallback) {\n        window.requestAnimationFrame(this.#requestFrameCallback);\n      }\n    };\n    window.requestAnimationFrame(this.#requestFrameCallback);\n  }\n\n  /**\n   * Draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #draw(x, y) {\n    const [lastX, lastY] = this.currentPath.at(-1);\n    if (this.currentPath.length > 1 && x === lastX && y === lastY) {\n      return;\n    }\n    const currentPath = this.currentPath;\n    let path2D = this.#currentPath2D;\n    currentPath.push([x, y]);\n    this.#hasSomethingToDraw = true;\n\n    if (currentPath.length <= 2) {\n      path2D.moveTo(...currentPath[0]);\n      path2D.lineTo(x, y);\n      return;\n    }\n\n    if (currentPath.length === 3) {\n      this.#currentPath2D = path2D = new Path2D();\n      path2D.moveTo(...currentPath[0]);\n    }\n\n    this.#makeBezierCurve(\n      path2D,\n      ...currentPath.at(-3),\n      ...currentPath.at(-2),\n      x,\n      y\n    );\n  }\n\n  #endPath() {\n    if (this.currentPath.length === 0) {\n      return;\n    }\n    const lastPoint = this.currentPath.at(-1);\n    this.#currentPath2D.lineTo(...lastPoint);\n  }\n\n  /**\n   * Stop to draw on the canvas.\n   * @param {number} x\n   * @param {number} y\n   */\n  #stopDrawing(x, y) {\n    this.#requestFrameCallback = null;\n\n    x = Math.min(Math.max(x, 0), this.canvas.width);\n    y = Math.min(Math.max(y, 0), this.canvas.height);\n\n    this.#draw(x, y);\n    this.#endPath();\n\n    // Interpolate the path entered by the user with some\n    // Bezier's curves in order to have a smoother path and\n    // to reduce the data size used to draw it in the PDF.\n    let bezier;\n    if (this.currentPath.length !== 1) {\n      bezier = this.#generateBezierPoints();\n    } else {\n      // We have only one point finally.\n      const xy = [x, y];\n      bezier = [[xy, xy.slice(), xy.slice(), xy]];\n    }\n    const path2D = this.#currentPath2D;\n    const currentPath = this.currentPath;\n    this.currentPath = [];\n    this.#currentPath2D = new Path2D();\n\n    const cmd = () => {\n      this.allRawPaths.push(currentPath);\n      this.paths.push(bezier);\n      this.bezierPath2D.push(path2D);\n      this.rebuild();\n    };\n\n    const undo = () => {\n      this.allRawPaths.pop();\n      this.paths.pop();\n      this.bezierPath2D.pop();\n      if (this.paths.length === 0) {\n        this.remove();\n      } else {\n        if (!this.canvas) {\n          this.#createCanvas();\n          this.#createObserver();\n        }\n        this.#fitToContent();\n      }\n    };\n\n    this.addCommands({ cmd, undo, mustExec: true });\n  }\n\n  #drawPoints() {\n    if (!this.#hasSomethingToDraw) {\n      return;\n    }\n    this.#hasSomethingToDraw = false;\n\n    const thickness = Math.ceil(this.thickness * this.parentScale);\n    const lastPoints = this.currentPath.slice(-3);\n    const x = lastPoints.map(xy => xy[0]);\n    const y = lastPoints.map(xy => xy[1]);\n    const xMin = Math.min(...x) - thickness;\n    const xMax = Math.max(...x) + thickness;\n    const yMin = Math.min(...y) - thickness;\n    const yMax = Math.max(...y) + thickness;\n\n    const { ctx } = this;\n    ctx.save();\n\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"MOZCENTRAL\")) {\n      // In Chrome, the clip() method doesn't work as expected.\n      ctx.clearRect(xMin, yMin, xMax - xMin, yMax - yMin);\n      ctx.beginPath();\n      ctx.rect(xMin, yMin, xMax - xMin, yMax - yMin);\n      ctx.clip();\n    } else {\n      ctx.clearRect(0, 0, this.canvas.width, this.canvas.height);\n    }\n\n    for (const path of this.bezierPath2D) {\n      ctx.stroke(path);\n    }\n    ctx.stroke(this.#currentPath2D);\n\n    ctx.restore();\n  }\n\n  #makeBezierCurve(path2D, x0, y0, x1, y1, x2, y2) {\n    const prevX = (x0 + x1) / 2;\n    const prevY = (y0 + y1) / 2;\n    const x3 = (x1 + x2) / 2;\n    const y3 = (y1 + y2) / 2;\n\n    path2D.bezierCurveTo(\n      prevX + (2 * (x1 - prevX)) / 3,\n      prevY + (2 * (y1 - prevY)) / 3,\n      x3 + (2 * (x1 - x3)) / 3,\n      y3 + (2 * (y1 - y3)) / 3,\n      x3,\n      y3\n    );\n  }\n\n  #generateBezierPoints() {\n    const path = this.currentPath;\n    if (path.length <= 2) {\n      return [[path[0], path[0], path.at(-1), path.at(-1)]];\n    }\n\n    const bezierPoints = [];\n    let i;\n    let [x0, y0] = path[0];\n    for (i = 1; i < path.length - 2; i++) {\n      const [x1, y1] = path[i];\n      const [x2, y2] = path[i + 1];\n      const x3 = (x1 + x2) / 2;\n      const y3 = (y1 + y2) / 2;\n\n      // The quadratic is: [[x0, y0], [x1, y1], [x3, y3]].\n      // Convert the quadratic to a cubic\n      // (see https://fontforge.org/docs/techref/bezier.html#converting-truetype-to-postscript)\n      const control1 = [x0 + (2 * (x1 - x0)) / 3, y0 + (2 * (y1 - y0)) / 3];\n      const control2 = [x3 + (2 * (x1 - x3)) / 3, y3 + (2 * (y1 - y3)) / 3];\n\n      bezierPoints.push([[x0, y0], control1, control2, [x3, y3]]);\n\n      [x0, y0] = [x3, y3];\n    }\n\n    const [x1, y1] = path[i];\n    const [x2, y2] = path[i + 1];\n\n    // The quadratic is: [[x0, y0], [x1, y1], [x2, y2]].\n    const control1 = [x0 + (2 * (x1 - x0)) / 3, y0 + (2 * (y1 - y0)) / 3];\n    const control2 = [x2 + (2 * (x1 - x2)) / 3, y2 + (2 * (y1 - y2)) / 3];\n\n    bezierPoints.push([[x0, y0], control1, control2, [x2, y2]]);\n    return bezierPoints;\n  }\n\n  /**\n   * Redraw all the paths.\n   */\n  #redraw() {\n    if (this.isEmpty()) {\n      this.#updateTransform();\n      return;\n    }\n    this.#setStroke();\n\n    const { canvas, ctx } = this;\n    ctx.setTransform(1, 0, 0, 1, 0, 0);\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n    this.#updateTransform();\n\n    for (const path of this.bezierPath2D) {\n      ctx.stroke(path);\n    }\n  }\n\n  /**\n   * Commit the curves we have in this editor.\n   */\n  commit() {\n    if (this.#disableEditing) {\n      return;\n    }\n\n    super.commit();\n\n    this.isEditing = false;\n    this.disableEditMode();\n\n    // This editor must be on top of the main ink editor.\n    this.setInForeground();\n\n    this.#disableEditing = true;\n    this.div.classList.add(\"disabled\");\n\n    this.#fitToContent(/* firstTime = */ true);\n    this.makeResizable();\n\n    this.parent.addInkEditorIfNeeded(/* isCommitting = */ true);\n\n    // When commiting, the position of this editor is changed, hence we must\n    // move it to the right position in the DOM.\n    this.moveInDOM();\n    this.div.focus({\n      preventScroll: true /* See issue #15744 */,\n    });\n  }\n\n  /** @inheritdoc */\n  focusin(event) {\n    if (!this._focusEventsAllowed) {\n      return;\n    }\n    super.focusin(event);\n    this.enableEditMode();\n  }\n\n  /**\n   * onpointerdown callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerdown(event) {\n    if (event.button !== 0 || !this.isInEditMode() || this.#disableEditing) {\n      return;\n    }\n\n    // We want to draw on top of any other editors.\n    // Since it's the last child, there's no need to give it a higher z-index.\n    this.setInForeground();\n\n    event.preventDefault();\n\n    if (event.type !== \"mouse\") {\n      this.div.focus();\n    }\n\n    this.#startDrawing(event.offsetX, event.offsetY);\n  }\n\n  /**\n   * onpointermove callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointermove(event) {\n    event.preventDefault();\n    this.#draw(event.offsetX, event.offsetY);\n  }\n\n  /**\n   * onpointerup callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerup(event) {\n    event.preventDefault();\n    this.#endDrawing(event);\n  }\n\n  /**\n   * onpointerleave callback for the canvas we're drawing on.\n   * @param {PointerEvent} event\n   */\n  canvasPointerleave(event) {\n    this.#endDrawing(event);\n  }\n\n  /**\n   * End the drawing.\n   * @param {PointerEvent} event\n   */\n  #endDrawing(event) {\n    this.canvas.removeEventListener(\n      \"pointerleave\",\n      this.#boundCanvasPointerleave\n    );\n    this.canvas.removeEventListener(\n      \"pointermove\",\n      this.#boundCanvasPointermove\n    );\n    this.canvas.removeEventListener(\"pointerup\", this.#boundCanvasPointerup);\n    this.canvas.addEventListener(\"pointerdown\", this.#boundCanvasPointerdown);\n\n    // Slight delay to avoid the context menu to appear (it can happen on a long\n    // tap with a pen).\n    setTimeout(() => {\n      this.canvas.removeEventListener(\"contextmenu\", noContextMenu);\n    }, 10);\n\n    this.#stopDrawing(event.offsetX, event.offsetY);\n\n    this.addToAnnotationStorage();\n\n    // Since the ink editor covers all of the page and we want to be able\n    // to select another editor, we just put this one in the background.\n    this.setInBackground();\n  }\n\n  /**\n   * Create the canvas element.\n   */\n  #createCanvas() {\n    this.canvas = document.createElement(\"canvas\");\n    this.canvas.width = this.canvas.height = 0;\n    this.canvas.className = \"inkEditorCanvas\";\n\n    AnnotationEditor._l10nPromise\n      .get(\"editor_ink_canvas_aria_label\")\n      .then(msg => this.canvas?.setAttribute(\"aria-label\", msg));\n    this.div.append(this.canvas);\n    this.ctx = this.canvas.getContext(\"2d\");\n  }\n\n  /**\n   * Create the resize observer.\n   */\n  #createObserver() {\n    this.#observer = new ResizeObserver(entries => {\n      const rect = entries[0].contentRect;\n      if (rect.width && rect.height) {\n        this.setDimensions(rect.width, rect.height);\n      }\n    });\n    this.#observer.observe(this.div);\n  }\n\n  /** @inheritdoc */\n  get isResizable() {\n    return !this.isEmpty() && this.#disableEditing;\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n\n    AnnotationEditor._l10nPromise\n      .get(\"editor_ink2_aria_label\")\n      .then(msg => this.div?.setAttribute(\"aria-label\", msg));\n\n    const [x, y, w, h] = this.#getInitialBBox();\n    this.setAt(x, y, 0, 0);\n    this.setDims(w, h);\n\n    this.#createCanvas();\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setAspectRatio(this.width * parentWidth, this.height * parentHeight);\n      this.setAt(\n        baseX * parentWidth,\n        baseY * parentHeight,\n        this.width * parentWidth,\n        this.height * parentHeight\n      );\n      this.#isCanvasInitialized = true;\n      this.#setCanvasDims();\n      this.setDims(this.width * parentWidth, this.height * parentHeight);\n      this.#redraw();\n      this.div.classList.add(\"disabled\");\n    } else {\n      this.div.classList.add(\"editing\");\n      this.enableEditMode();\n    }\n\n    this.#createObserver();\n\n    return this.div;\n  }\n\n  #setCanvasDims() {\n    if (!this.#isCanvasInitialized) {\n      return;\n    }\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.canvas.width = Math.ceil(this.width * parentWidth);\n    this.canvas.height = Math.ceil(this.height * parentHeight);\n    this.#updateTransform();\n  }\n\n  /**\n   * When the dimensions of the div change the inner canvas must\n   * renew its dimensions, hence it must redraw its own contents.\n   * @param {number} width - the new width of the div\n   * @param {number} height - the new height of the div\n   * @returns\n   */\n  setDimensions(width, height) {\n    const roundedWidth = Math.round(width);\n    const roundedHeight = Math.round(height);\n    if (\n      this.#realWidth === roundedWidth &&\n      this.#realHeight === roundedHeight\n    ) {\n      return;\n    }\n\n    this.#realWidth = roundedWidth;\n    this.#realHeight = roundedHeight;\n\n    this.canvas.style.visibility = \"hidden\";\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n    this.fixAndSetPosition();\n\n    if (this.#disableEditing) {\n      this.#setScaleFactor(width, height);\n    }\n\n    this.#setCanvasDims();\n    this.#redraw();\n\n    this.canvas.style.visibility = \"visible\";\n\n    // For any reason the dimensions couldn't be in percent but in pixels, hence\n    // we must fix them.\n    this.fixDims();\n  }\n\n  #setScaleFactor(width, height) {\n    const padding = this.#getPadding();\n    const scaleFactorW = (width - padding) / this.#baseWidth;\n    const scaleFactorH = (height - padding) / this.#baseHeight;\n    this.scaleFactor = Math.min(scaleFactorW, scaleFactorH);\n  }\n\n  /**\n   * Update the canvas transform.\n   */\n  #updateTransform() {\n    const padding = this.#getPadding() / 2;\n    this.ctx.setTransform(\n      this.scaleFactor,\n      0,\n      0,\n      this.scaleFactor,\n      this.translationX * this.scaleFactor + padding,\n      this.translationY * this.scaleFactor + padding\n    );\n  }\n\n  /**\n   * Convert into a Path2D.\n   * @param {Array<Array<number>>} bezier\n   * @returns {Path2D}\n   */\n  static #buildPath2D(bezier) {\n    const path2D = new Path2D();\n    for (let i = 0, ii = bezier.length; i < ii; i++) {\n      const [first, control1, control2, second] = bezier[i];\n      if (i === 0) {\n        path2D.moveTo(...first);\n      }\n      path2D.bezierCurveTo(\n        control1[0],\n        control1[1],\n        control2[0],\n        control2[1],\n        second[0],\n        second[1]\n      );\n    }\n    return path2D;\n  }\n\n  static #toPDFCoordinates(points, rect, rotation) {\n    const [blX, blY, trX, trY] = rect;\n\n    switch (rotation) {\n      case 0:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] += blX;\n          points[i + 1] = trY - points[i + 1];\n        }\n        break;\n      case 90:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = points[i + 1] + blX;\n          points[i + 1] = x + blY;\n        }\n        break;\n      case 180:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] = trX - points[i];\n          points[i + 1] += blY;\n        }\n        break;\n      case 270:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = trX - points[i + 1];\n          points[i + 1] = trY - x;\n        }\n        break;\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n    return points;\n  }\n\n  static #fromPDFCoordinates(points, rect, rotation) {\n    const [blX, blY, trX, trY] = rect;\n\n    switch (rotation) {\n      case 0:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] -= blX;\n          points[i + 1] = trY - points[i + 1];\n        }\n        break;\n      case 90:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = points[i + 1] - blY;\n          points[i + 1] = x - blX;\n        }\n        break;\n      case 180:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          points[i] = trX - points[i];\n          points[i + 1] -= blY;\n        }\n        break;\n      case 270:\n        for (let i = 0, ii = points.length; i < ii; i += 2) {\n          const x = points[i];\n          points[i] = trY - points[i + 1];\n          points[i + 1] = trX - x;\n        }\n        break;\n      default:\n        throw new Error(\"Invalid rotation\");\n    }\n    return points;\n  }\n\n  /**\n   * Transform and serialize the paths.\n   * @param {number} s - scale factor\n   * @param {number} tx - abscissa of the translation\n   * @param {number} ty - ordinate of the translation\n   * @param {Array<number>} rect - the bounding box of the annotation\n   */\n  #serializePaths(s, tx, ty, rect) {\n    const paths = [];\n    const padding = this.thickness / 2;\n    const shiftX = s * tx + padding;\n    const shiftY = s * ty + padding;\n    for (const bezier of this.paths) {\n      const buffer = [];\n      const points = [];\n      for (let j = 0, jj = bezier.length; j < jj; j++) {\n        const [first, control1, control2, second] = bezier[j];\n        const p10 = s * first[0] + shiftX;\n        const p11 = s * first[1] + shiftY;\n        const p20 = s * control1[0] + shiftX;\n        const p21 = s * control1[1] + shiftY;\n        const p30 = s * control2[0] + shiftX;\n        const p31 = s * control2[1] + shiftY;\n        const p40 = s * second[0] + shiftX;\n        const p41 = s * second[1] + shiftY;\n\n        if (j === 0) {\n          buffer.push(p10, p11);\n          points.push(p10, p11);\n        }\n        buffer.push(p20, p21, p30, p31, p40, p41);\n        points.push(p20, p21);\n        if (j === jj - 1) {\n          points.push(p40, p41);\n        }\n      }\n      paths.push({\n        bezier: InkEditor.#toPDFCoordinates(buffer, rect, this.rotation),\n        points: InkEditor.#toPDFCoordinates(points, rect, this.rotation),\n      });\n    }\n\n    return paths;\n  }\n\n  /**\n   * Get the bounding box containing all the paths.\n   * @returns {Array<number>}\n   */\n  #getBbox() {\n    let xMin = Infinity;\n    let xMax = -Infinity;\n    let yMin = Infinity;\n    let yMax = -Infinity;\n\n    for (const path of this.paths) {\n      for (const [first, control1, control2, second] of path) {\n        const bbox = Util.bezierBoundingBox(\n          ...first,\n          ...control1,\n          ...control2,\n          ...second\n        );\n        xMin = Math.min(xMin, bbox[0]);\n        yMin = Math.min(yMin, bbox[1]);\n        xMax = Math.max(xMax, bbox[2]);\n        yMax = Math.max(yMax, bbox[3]);\n      }\n    }\n\n    return [xMin, yMin, xMax, yMax];\n  }\n\n  /**\n   * The bounding box is computed with null thickness, so we must take\n   * it into account for the display.\n   * It corresponds to the total padding, hence it should be divided by 2\n   * in order to have left/right paddings.\n   * @returns {number}\n   */\n  #getPadding() {\n    return this.#disableEditing\n      ? Math.ceil(this.thickness * this.parentScale)\n      : 0;\n  }\n\n  /**\n   * Set the div position and dimensions in order to fit to\n   * the bounding box of the contents.\n   * @returns {undefined}\n   */\n  #fitToContent(firstTime = false) {\n    if (this.isEmpty()) {\n      return;\n    }\n\n    if (!this.#disableEditing) {\n      this.#redraw();\n      return;\n    }\n\n    const bbox = this.#getBbox();\n    const padding = this.#getPadding();\n    this.#baseWidth = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n    this.#baseHeight = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n\n    const width = Math.ceil(padding + this.#baseWidth * this.scaleFactor);\n    const height = Math.ceil(padding + this.#baseHeight * this.scaleFactor);\n\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n\n    this.setAspectRatio(width, height);\n\n    const prevTranslationX = this.translationX;\n    const prevTranslationY = this.translationY;\n\n    this.translationX = -bbox[0];\n    this.translationY = -bbox[1];\n    this.#setCanvasDims();\n    this.#redraw();\n\n    this.#realWidth = width;\n    this.#realHeight = height;\n\n    this.setDims(width, height);\n    const unscaledPadding = firstTime ? padding / this.scaleFactor / 2 : 0;\n    this.translate(\n      prevTranslationX - this.translationX - unscaledPadding,\n      prevTranslationY - this.translationY - unscaledPadding\n    );\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    if (data instanceof InkAnnotationElement) {\n      return null;\n    }\n    const editor = super.deserialize(data, parent, uiManager);\n\n    editor.thickness = data.thickness;\n    editor.color = Util.makeHexColor(...data.color);\n    editor.opacity = data.opacity;\n\n    const [pageWidth, pageHeight] = editor.pageDimensions;\n    const width = editor.width * pageWidth;\n    const height = editor.height * pageHeight;\n    const scaleFactor = editor.parentScale;\n    const padding = data.thickness / 2;\n\n    editor.#disableEditing = true;\n    editor.#realWidth = Math.round(width);\n    editor.#realHeight = Math.round(height);\n\n    const { paths, rect, rotation } = data;\n\n    for (let { bezier } of paths) {\n      bezier = InkEditor.#fromPDFCoordinates(bezier, rect, rotation);\n      const path = [];\n      editor.paths.push(path);\n      let p0 = scaleFactor * (bezier[0] - padding);\n      let p1 = scaleFactor * (bezier[1] - padding);\n      for (let i = 2, ii = bezier.length; i < ii; i += 6) {\n        const p10 = scaleFactor * (bezier[i] - padding);\n        const p11 = scaleFactor * (bezier[i + 1] - padding);\n        const p20 = scaleFactor * (bezier[i + 2] - padding);\n        const p21 = scaleFactor * (bezier[i + 3] - padding);\n        const p30 = scaleFactor * (bezier[i + 4] - padding);\n        const p31 = scaleFactor * (bezier[i + 5] - padding);\n        path.push([\n          [p0, p1],\n          [p10, p11],\n          [p20, p21],\n          [p30, p31],\n        ]);\n        p0 = p30;\n        p1 = p31;\n      }\n      const path2D = this.#buildPath2D(path);\n      editor.bezierPath2D.push(path2D);\n    }\n\n    const bbox = editor.#getBbox();\n    editor.#baseWidth = Math.max(AnnotationEditor.MIN_SIZE, bbox[2] - bbox[0]);\n    editor.#baseHeight = Math.max(AnnotationEditor.MIN_SIZE, bbox[3] - bbox[1]);\n    editor.#setScaleFactor(width, height);\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize() {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const rect = this.getRect(0, 0);\n    const color = AnnotationEditor._colorManager.convert(this.ctx.strokeStyle);\n\n    return {\n      annotationType: AnnotationEditorType.INK,\n      color,\n      thickness: this.thickness,\n      opacity: this.opacity,\n      paths: this.#serializePaths(\n        this.scaleFactor / this.parentScale,\n        this.translationX,\n        this.translationY,\n        rect\n      ),\n      pageIndex: this.pageIndex,\n      rect,\n      rotation: this.rotation,\n      structTreeParentId: this._structTreeParentId,\n    };\n  }\n}\n\nexport { InkEditor };\n", "/* Copyright 2022 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { AnnotationEditorType, shadow } from \"../../shared/util.js\";\nimport { AnnotationEditor } from \"./editor.js\";\nimport { PixelsPerInch } from \"../display_utils.js\";\nimport { StampAnnotationElement } from \"../annotation_layer.js\";\n\n/**\n * Basic text editor in order to create a FreeTex annotation.\n */\nclass StampEditor extends AnnotationEditor {\n  #bitmap = null;\n\n  #bitmapId = null;\n\n  #bitmapPromise = null;\n\n  #bitmapUrl = null;\n\n  #bitmapFile = null;\n\n  #canvas = null;\n\n  #observer = null;\n\n  #resizeTimeoutId = null;\n\n  #isSvg = false;\n\n  #hasBeenAddedInUndoStack = false;\n\n  static _type = \"stamp\";\n\n  constructor(params) {\n    super({ ...params, name: \"stampEditor\" });\n    this.#bitmapUrl = params.bitmapUrl;\n    this.#bitmapFile = params.bitmapFile;\n  }\n\n  /** @inheritdoc */\n  static initialize(l10n) {\n    AnnotationEditor.initialize(l10n);\n  }\n\n  static get supportedTypes() {\n    // See https://developer.mozilla.org/en-US/docs/Web/Media/Formats/Image_types\n    // to know which types are supported by the browser.\n    const types = [\n      \"apng\",\n      \"avif\",\n      \"bmp\",\n      \"gif\",\n      \"jpeg\",\n      \"png\",\n      \"svg+xml\",\n      \"webp\",\n      \"x-icon\",\n    ];\n    return shadow(\n      this,\n      \"supportedTypes\",\n      types.map(type => `image/${type}`)\n    );\n  }\n\n  static get supportedTypesStr() {\n    return shadow(this, \"supportedTypesStr\", this.supportedTypes.join(\",\"));\n  }\n\n  /** @inheritdoc */\n  static isHandlingMimeForPasting(mime) {\n    return this.supportedTypes.includes(mime);\n  }\n\n  /** @inheritdoc */\n  static paste(item, parent) {\n    parent.pasteEditor(AnnotationEditorType.STAMP, {\n      bitmapFile: item.getAsFile(),\n    });\n  }\n\n  #getBitmapFetched(data, fromId = false) {\n    if (!data) {\n      this.remove();\n      return;\n    }\n    this.#bitmap = data.bitmap;\n    if (!fromId) {\n      this.#bitmapId = data.id;\n      this.#isSvg = data.isSvg;\n    }\n    this.#createCanvas();\n  }\n\n  #getBitmapDone() {\n    this.#bitmapPromise = null;\n    this._uiManager.enableWaiting(false);\n    if (this.#canvas) {\n      this.div.focus();\n    }\n  }\n\n  #getBitmap() {\n    if (this.#bitmapId) {\n      this._uiManager.enableWaiting(true);\n      this._uiManager.imageManager\n        .getFromId(this.#bitmapId)\n        .then(data => this.#getBitmapFetched(data, /* fromId = */ true))\n        .finally(() => this.#getBitmapDone());\n      return;\n    }\n\n    if (this.#bitmapUrl) {\n      const url = this.#bitmapUrl;\n      this.#bitmapUrl = null;\n      this._uiManager.enableWaiting(true);\n      this.#bitmapPromise = this._uiManager.imageManager\n        .getFromUrl(url)\n        .then(data => this.#getBitmapFetched(data))\n        .finally(() => this.#getBitmapDone());\n      return;\n    }\n\n    if (this.#bitmapFile) {\n      const file = this.#bitmapFile;\n      this.#bitmapFile = null;\n      this._uiManager.enableWaiting(true);\n      this.#bitmapPromise = this._uiManager.imageManager\n        .getFromFile(file)\n        .then(data => this.#getBitmapFetched(data))\n        .finally(() => this.#getBitmapDone());\n      return;\n    }\n\n    const input = document.createElement(\"input\");\n    if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n      input.hidden = true;\n      input.id = \"stampEditorFileInput\";\n      document.body.append(input);\n    }\n    input.type = \"file\";\n    input.accept = StampEditor.supportedTypesStr;\n    this.#bitmapPromise = new Promise(resolve => {\n      input.addEventListener(\"change\", async () => {\n        if (!input.files || input.files.length === 0) {\n          this.remove();\n        } else {\n          this._uiManager.enableWaiting(true);\n          const data = await this._uiManager.imageManager.getFromFile(\n            input.files[0]\n          );\n          this.#getBitmapFetched(data);\n        }\n        if (typeof PDFJSDev !== \"undefined\" && PDFJSDev.test(\"TESTING\")) {\n          input.remove();\n        }\n        resolve();\n      });\n      input.addEventListener(\"cancel\", () => {\n        this.remove();\n        resolve();\n      });\n    }).finally(() => this.#getBitmapDone());\n    if (typeof PDFJSDev === \"undefined\" || !PDFJSDev.test(\"TESTING\")) {\n      input.click();\n    }\n  }\n\n  /** @inheritdoc */\n  remove() {\n    if (this.#bitmapId) {\n      this.#bitmap = null;\n      this._uiManager.imageManager.deleteId(this.#bitmapId);\n      this.#canvas?.remove();\n      this.#canvas = null;\n      this.#observer?.disconnect();\n      this.#observer = null;\n    }\n    super.remove();\n  }\n\n  /** @inheritdoc */\n  rebuild() {\n    if (!this.parent) {\n      // It's possible to have to rebuild an editor which is not on a visible\n      // page.\n      if (this.#bitmapId) {\n        this.#getBitmap();\n      }\n      return;\n    }\n    super.rebuild();\n    if (this.div === null) {\n      return;\n    }\n\n    if (this.#bitmapId) {\n      this.#getBitmap();\n    }\n\n    if (!this.isAttachedToDOM) {\n      // At some point this editor was removed and we're rebuilting it,\n      // hence we must add it to its parent.\n      this.parent.add(this);\n    }\n  }\n\n  /** @inheritdoc */\n  onceAdded() {\n    this._isDraggable = true;\n    this.div.focus();\n  }\n\n  /** @inheritdoc */\n  isEmpty() {\n    return !(\n      this.#bitmapPromise ||\n      this.#bitmap ||\n      this.#bitmapUrl ||\n      this.#bitmapFile\n    );\n  }\n\n  /** @inheritdoc */\n  get isResizable() {\n    return true;\n  }\n\n  /** @inheritdoc */\n  render() {\n    if (this.div) {\n      return this.div;\n    }\n\n    let baseX, baseY;\n    if (this.width) {\n      baseX = this.x;\n      baseY = this.y;\n    }\n\n    super.render();\n    this.div.hidden = true;\n\n    if (this.#bitmap) {\n      this.#createCanvas();\n    } else {\n      this.#getBitmap();\n    }\n\n    if (this.width) {\n      // This editor was created in using copy (ctrl+c).\n      const [parentWidth, parentHeight] = this.parentDimensions;\n      this.setAt(\n        baseX * parentWidth,\n        baseY * parentHeight,\n        this.width * parentWidth,\n        this.height * parentHeight\n      );\n    }\n\n    return this.div;\n  }\n\n  #createCanvas() {\n    const { div } = this;\n    let { width, height } = this.#bitmap;\n    const [pageWidth, pageHeight] = this.pageDimensions;\n    const MAX_RATIO = 0.75;\n    if (this.width) {\n      width = this.width * pageWidth;\n      height = this.height * pageHeight;\n    } else if (\n      width > MAX_RATIO * pageWidth ||\n      height > MAX_RATIO * pageHeight\n    ) {\n      // If the the image is too big compared to the page dimensions\n      // (more than MAX_RATIO) then we scale it down.\n      const factor = Math.min(\n        (MAX_RATIO * pageWidth) / width,\n        (MAX_RATIO * pageHeight) / height\n      );\n      width *= factor;\n      height *= factor;\n    }\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.setDims(\n      (width * parentWidth) / pageWidth,\n      (height * parentHeight) / pageHeight\n    );\n\n    this._uiManager.enableWaiting(false);\n    const canvas = (this.#canvas = document.createElement(\"canvas\"));\n    div.append(canvas);\n    div.hidden = false;\n    this.#drawBitmap(width, height);\n    this.#createObserver();\n    if (!this.#hasBeenAddedInUndoStack) {\n      this.parent.addUndoableEditor(this);\n      this.#hasBeenAddedInUndoStack = true;\n    }\n\n    // There are multiple ways to add an image to the page, so here we just\n    // count the number of times an image is added to the page whatever the way\n    // is.\n    this._uiManager._eventBus.dispatch(\"reporttelemetry\", {\n      source: this,\n      details: {\n        type: \"editing\",\n        subtype: this.editorType,\n        data: {\n          action: \"inserted_image\",\n        },\n      },\n    });\n    this.addAltTextButton();\n  }\n\n  /**\n   * When the dimensions of the div change the inner canvas must\n   * renew its dimensions, hence it must redraw its own contents.\n   * @param {number} width - the new width of the div\n   * @param {number} height - the new height of the div\n   * @returns\n   */\n  #setDimensions(width, height) {\n    const [parentWidth, parentHeight] = this.parentDimensions;\n    this.width = width / parentWidth;\n    this.height = height / parentHeight;\n    this.setDims(width, height);\n    if (this._initialOptions?.isCentered) {\n      this.center();\n    } else {\n      this.fixAndSetPosition();\n    }\n    this._initialOptions = null;\n    if (this.#resizeTimeoutId !== null) {\n      clearTimeout(this.#resizeTimeoutId);\n    }\n    // When the user is resizing the editor we just use CSS to scale the image\n    // to avoid redrawing it too often.\n    // And once the user stops resizing the editor we redraw the image in\n    // rescaling it correctly (see this.#scaleBitmap).\n    const TIME_TO_WAIT = 200;\n    this.#resizeTimeoutId = setTimeout(() => {\n      this.#resizeTimeoutId = null;\n      this.#drawBitmap(width, height);\n    }, TIME_TO_WAIT);\n  }\n\n  #scaleBitmap(width, height) {\n    const { width: bitmapWidth, height: bitmapHeight } = this.#bitmap;\n\n    let newWidth = bitmapWidth;\n    let newHeight = bitmapHeight;\n    let bitmap = this.#bitmap;\n    while (newWidth > 2 * width || newHeight > 2 * height) {\n      const prevWidth = newWidth;\n      const prevHeight = newHeight;\n\n      if (newWidth > 2 * width) {\n        // See bug 1820511 (Windows specific bug).\n        // TODO: once the above bug is fixed we could revert to:\n        // newWidth = Math.ceil(newWidth / 2);\n        newWidth =\n          newWidth >= 16384\n            ? Math.floor(newWidth / 2) - 1\n            : Math.ceil(newWidth / 2);\n      }\n      if (newHeight > 2 * height) {\n        newHeight =\n          newHeight >= 16384\n            ? Math.floor(newHeight / 2) - 1\n            : Math.ceil(newHeight / 2);\n      }\n\n      const offscreen = new OffscreenCanvas(newWidth, newHeight);\n      const ctx = offscreen.getContext(\"2d\");\n      ctx.drawImage(\n        bitmap,\n        0,\n        0,\n        prevWidth,\n        prevHeight,\n        0,\n        0,\n        newWidth,\n        newHeight\n      );\n      bitmap = offscreen.transferToImageBitmap();\n    }\n\n    return bitmap;\n  }\n\n  #drawBitmap(width, height) {\n    width = Math.ceil(width);\n    height = Math.ceil(height);\n    const canvas = this.#canvas;\n    if (!canvas || (canvas.width === width && canvas.height === height)) {\n      return;\n    }\n    canvas.width = width;\n    canvas.height = height;\n    const bitmap = this.#isSvg\n      ? this.#bitmap\n      : this.#scaleBitmap(width, height);\n    const ctx = canvas.getContext(\"2d\");\n    ctx.filter = this._uiManager.hcmFilter;\n    ctx.drawImage(\n      bitmap,\n      0,\n      0,\n      bitmap.width,\n      bitmap.height,\n      0,\n      0,\n      width,\n      height\n    );\n  }\n\n  #serializeBitmap(toUrl) {\n    if (toUrl) {\n      if (this.#isSvg) {\n        const url = this._uiManager.imageManager.getSvgUrl(this.#bitmapId);\n        if (url) {\n          return url;\n        }\n      }\n      // We convert to a data url because it's sync and the url can live in the\n      // clipboard.\n      const canvas = document.createElement(\"canvas\");\n      ({ width: canvas.width, height: canvas.height } = this.#bitmap);\n      const ctx = canvas.getContext(\"2d\");\n      ctx.drawImage(this.#bitmap, 0, 0);\n\n      return canvas.toDataURL();\n    }\n\n    if (this.#isSvg) {\n      const [pageWidth, pageHeight] = this.pageDimensions;\n      // Multiply by PixelsPerInch.PDF_TO_CSS_UNITS in order to increase the\n      // image resolution when rasterizing it.\n      const width = Math.round(\n        this.width * pageWidth * PixelsPerInch.PDF_TO_CSS_UNITS\n      );\n      const height = Math.round(\n        this.height * pageHeight * PixelsPerInch.PDF_TO_CSS_UNITS\n      );\n      const offscreen = new OffscreenCanvas(width, height);\n      const ctx = offscreen.getContext(\"2d\");\n      ctx.drawImage(\n        this.#bitmap,\n        0,\n        0,\n        this.#bitmap.width,\n        this.#bitmap.height,\n        0,\n        0,\n        width,\n        height\n      );\n      return offscreen.transferToImageBitmap();\n    }\n\n    return structuredClone(this.#bitmap);\n  }\n\n  /**\n   * Create the resize observer.\n   */\n  #createObserver() {\n    this.#observer = new ResizeObserver(entries => {\n      const rect = entries[0].contentRect;\n      if (rect.width && rect.height) {\n        this.#setDimensions(rect.width, rect.height);\n      }\n    });\n    this.#observer.observe(this.div);\n  }\n\n  /** @inheritdoc */\n  static deserialize(data, parent, uiManager) {\n    if (data instanceof StampAnnotationElement) {\n      return null;\n    }\n    const editor = super.deserialize(data, parent, uiManager);\n    const { rect, bitmapUrl, bitmapId, isSvg, accessibilityData } = data;\n    if (bitmapId && uiManager.imageManager.isValidId(bitmapId)) {\n      editor.#bitmapId = bitmapId;\n    } else {\n      editor.#bitmapUrl = bitmapUrl;\n    }\n    editor.#isSvg = isSvg;\n\n    const [parentWidth, parentHeight] = editor.pageDimensions;\n    editor.width = (rect[2] - rect[0]) / parentWidth;\n    editor.height = (rect[3] - rect[1]) / parentHeight;\n\n    if (accessibilityData) {\n      editor.altTextData = accessibilityData;\n    }\n\n    return editor;\n  }\n\n  /** @inheritdoc */\n  serialize(isForCopying = false, context = null) {\n    if (this.isEmpty()) {\n      return null;\n    }\n\n    const serialized = {\n      annotationType: AnnotationEditorType.STAMP,\n      bitmapId: this.#bitmapId,\n      pageIndex: this.pageIndex,\n      rect: this.getRect(0, 0),\n      rotation: this.rotation,\n      isSvg: this.#isSvg,\n      structTreeParentId: this._structTreeParentId,\n    };\n\n    if (isForCopying) {\n      // We don't know what's the final destination (this pdf or another one)\n      // of this annotation and the clipboard doesn't support ImageBitmaps,\n      // hence we serialize the bitmap to a data url.\n      serialized.bitmapUrl = this.#serializeBitmap(/* toUrl = */ true);\n      serialized.accessibilityData = this.altTextData;\n      return serialized;\n    }\n\n    const { decorative, altText } = this.altTextData;\n    if (!decorative && altText) {\n      serialized.accessibilityData = { type: \"Figure\", alt: altText };\n    }\n\n    if (context === null) {\n      return serialized;\n    }\n\n    context.stamps ||= new Map();\n    const area = this.#isSvg\n      ? (serialized.rect[2] - serialized.rect[0]) *\n        (serialized.rect[3] - serialized.rect[1])\n      : null;\n    if (!context.stamps.has(this.#bitmapId)) {\n      // We don't want to have multiple copies of the same bitmap in the\n      // annotationMap, hence we only add the bitmap the first time we meet it.\n      context.stamps.set(this.#bitmapId, { area, serialized });\n      serialized.bitmap = this.#serializeBitmap(/* toUrl = */ false);\n    } else if (this.#isSvg) {\n      // If we have multiple copies of the same svg but with different sizes,\n      // then we want to keep the biggest one.\n      const prevData = context.stamps.get(this.#bitmapId);\n      if (area > prevData.area) {\n        prevData.area = area;\n        prevData.serialized.bitmap.close();\n        prevData.serialized.bitmap = this.#serializeBitmap(/* toUrl = */ false);\n      }\n    }\n    return serialized;\n  }\n}\n\nexport { StampEditor };\n", "// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __w_pdfjs_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __w_pdfjs_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n", "/* Copyright 2012 Mozilla Foundation\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").OnProgressParameters} OnProgressParameters */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/api\").PDFDocumentLoadingTask} PDFDocumentLoadingTask */\n/** @typedef {import(\"./display/api\").PDFDocumentProxy} PDFDocumentProxy */\n/** @typedef {import(\"./display/api\").PDFPageProxy} PDFPageProxy */\n/** @typedef {import(\"./display/api\").RenderTask} RenderTask */\n/** @typedef {import(\"./display/display_utils\").PageViewport} PageViewport */\n// eslint-disable-next-line max-len\n/** @typedef {import(\"./display/text_layer\").TextLayerRenderTask} TextLayerRenderTask */\n\nimport {\n  AbortException,\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  AnnotationMode,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  FeatureTest,\n  ImageKind,\n  InvalidPDFException,\n  MissingPDFException,\n  normalizeUnicode,\n  OPS,\n  PasswordResponses,\n  PermissionFlag,\n  PromiseCapability,\n  shadow,\n  UnexpectedResponseException,\n  Util,\n  VerbosityLevel,\n} from \"./shared/util.js\";\nimport {\n  build,\n  getDocument,\n  PDFDataRangeTransport,\n  PDFWorker,\n  SVGGraphics,\n  version,\n} from \"./display/api.js\";\nimport {\n  DOMSVGFactory,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  isDataScheme,\n  isPdfFile,\n  loadScript,\n  noContextMenu,\n  PDFDateString,\n  PixelsPerInch,\n  RenderingCancelledException,\n  setLayerDimensions,\n} from \"./display/display_utils.js\";\nimport { renderTextLayer, updateTextLayer } from \"./display/text_layer.js\";\nimport { AnnotationEditorLayer } from \"./display/editor/annotation_editor_layer.js\";\nimport { AnnotationEditorUIManager } from \"./display/editor/tools.js\";\nimport { AnnotationLayer } from \"./display/annotation_layer.js\";\nimport { GlobalWorkerOptions } from \"./display/worker_options.js\";\nimport { XfaLayer } from \"./display/xfa_layer.js\";\n\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsVersion =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_VERSION\") : void 0;\n/* eslint-disable-next-line no-unused-vars */\nconst pdfjsBuild =\n  typeof PDFJSDev !== \"undefined\" ? PDFJSDev.eval(\"BUNDLE_BUILD\") : void 0;\n\nexport {\n  AbortException,\n  AnnotationEditorLayer,\n  AnnotationEditorParamsType,\n  AnnotationEditorType,\n  AnnotationEditorUIManager,\n  AnnotationLayer,\n  AnnotationMode,\n  build,\n  CMapCompressionType,\n  createValidAbsoluteUrl,\n  DOMSVGFactory,\n  FeatureTest,\n  getDocument,\n  getFilenameFromUrl,\n  getPdfFilenameFromUrl,\n  getXfaPageViewport,\n  GlobalWorkerOptions,\n  ImageKind,\n  InvalidPDFException,\n  isDataScheme,\n  isPdfFile,\n  loadScript,\n  MissingPDFException,\n  noContextMenu,\n  normalizeUnicode,\n  OPS,\n  PasswordResponses,\n  PDFDataRangeTransport,\n  PDFDateString,\n  PDFWorker,\n  PermissionFlag,\n  PixelsPerInch,\n  PromiseCapability,\n  RenderingCancelledException,\n  renderTextLayer,\n  setLayerDimensions,\n  shadow,\n  SVGGraphics,\n  UnexpectedResponseException,\n  updateTextLayer,\n  Util,\n  VerbosityLevel,\n  version,\n  XfaLayer,\n};\n", "var Gl = Object.defineProperty;\nvar ml = (l, d, Z) => d in l ? Gl(l, d, { enumerable: !0, configurable: !0, writable: !0, value: Z }) : l[d] = Z;\nvar A = (l, d, Z) => (ml(l, typeof d != \"symbol\" ? d + \"\" : d, Z), Z);\nimport { defineComponent as g, ref as j, watch as U, onMounted as H, openBlock as O, createElementBlock as P, toRaw as o, computed as B, createBlock as f, mergeProps as v, createCommentVNode as r, createVNode as Nl, withDirectives as Yl, createElementVNode as Zl, renderSlot as Ml, vShow as Xl, shallowRef as e, isRef as Vl } from \"vue\";\nimport * as D from \"pdfjs-dist\";\nconst q = \"internal-link\", Tl = \"link\", Ll = \"file-attachment\", yl = \"form-text\", ul = \"form-select\", hl = \"form-checkbox\", zl = \"form-radio\", sl = \"form-button\", _ = [\"click\", \"dblclick\", \"mouseover\", \"input\", \"change\"];\nfunction K(l, d, Z) {\n  const b = [];\n  if (Z)\n    for (const W of Z)\n      W[l] === d && b.push(W);\n  return b;\n}\nfunction S(l, d) {\n  return { type: l, data: d };\n}\nfunction t(l, d) {\n  switch (l.type) {\n    case \"textarea\":\n    case \"text\":\n      return S(yl, {\n        fieldName: l.name,\n        value: l.value\n      });\n    case \"select-one\":\n    case \"select-multiple\":\n      const Z = [];\n      for (const W of l.options)\n        Z.push({\n          value: W.value,\n          label: W.label\n        });\n      const b = [];\n      for (const W of l.selectedOptions)\n        b.push({\n          value: W.value,\n          label: W.label\n        });\n      return S(ul, {\n        fieldName: l.name,\n        value: b,\n        options: Z\n      });\n    case \"checkbox\":\n      return S(hl, {\n        fieldName: l.name,\n        checked: l.checked\n      });\n    case \"radio\":\n      return S(zl, {\n        fieldName: l.name,\n        ...d\n      });\n    case \"button\":\n      return S(sl, {\n        fieldName: l.name,\n        ...d\n      });\n  }\n}\nfunction Il(l) {\n  return S(Ll, l.file);\n}\nasync function Rl(l, d) {\n  if (l.dest) {\n    if (typeof l.dest == \"string\")\n      return S(q, {\n        referencedPage: Number(l.dest.substring(1, l.dest.length)),\n        offset: null\n      });\n    {\n      const Z = await d.getPageIndex(l.dest[0]);\n      return S(q, {\n        referencedPage: Z + 1,\n        offset: {\n          left: l.dest[2],\n          bottom: l.dest[3]\n        }\n      });\n    }\n  } else if (l.url)\n    return S(Tl, {\n      url: l.url,\n      unsafeUrl: l.unsafeUrl\n    });\n}\nfunction $(l) {\n  for (const d of l.getElementsByTagName(\"span\")) {\n    let Z = d.textContent;\n    const b = JSON.parse(d.dataset.l10nArgs ?? \"{}\");\n    if (Z)\n      for (const W in b)\n        Z = Z.replace(`{{${W}}}`, b[W]);\n    d.textContent = Z;\n  }\n}\nfunction il(l, d, Z) {\n  var W;\n  let b = l.target.parentNode;\n  if (b.tagName === \"DIV\" && (b = b.firstChild), b.className === \"linkAnnotation\" && l.type === \"click\") {\n    const c = (W = b.dataset) == null ? void 0 : W.annotationId;\n    if (c)\n      return Rl(K(\"id\", c, Z)[0], d);\n  } else if (b.className.includes(\"popupAnnotation\") || b.className.includes(\"textAnnotation\"))\n    $(b);\n  else if (b.className.includes(\"fileAttachmentAnnotation\")) {\n    $(b);\n    const c = b.dataset.annotationId;\n    if (c && l.type === \"dblclick\")\n      return Il(K(\"id\", c, Z)[0]);\n  } else if (b.className.includes(\"textWidgetAnnotation\") && l.type === \"input\") {\n    let c = b.getElementsByTagName(\"input\")[0];\n    return c || (c = b.getElementsByTagName(\"textarea\")[0]), t(c);\n  } else {\n    if (b.className.includes(\"choiceWidgetAnnotation\") && l.type === \"input\")\n      return t(b.getElementsByTagName(\"select\")[0]);\n    if (b.className.includes(\"buttonWidgetAnnotation checkBox\") && l.type === \"change\")\n      return t(b.getElementsByTagName(\"input\")[0]);\n    if (b.className.includes(\"buttonWidgetAnnotation radioButton\") && l.type === \"change\") {\n      const c = b.dataset.annotationId;\n      if (c) {\n        const N = K(\"id\", c, Z)[0], L = [];\n        for (const X of K(\"fieldName\", N.fieldName, Z))\n          X.buttonValue && L.push(X.buttonValue);\n        return t(b.getElementsByTagName(\"input\")[0], {\n          value: N.buttonValue,\n          defaultValue: N.fieldValue,\n          options: L\n        });\n      }\n    } else if (b.className.includes(\"buttonWidgetAnnotation pushButton\") && l.type === \"click\") {\n      const c = b.dataset.annotationId;\n      if (c) {\n        const N = K(\"id\", c, Z)[0];\n        return N.resetForm ? t(\n          { name: N.fieldName, type: \"button\" },\n          { actions: N.actions, reset: !0 }\n        ) : t(\n          { name: N.fieldName, type: \"button\" },\n          { actions: N.actions, reset: !1 }\n        );\n      }\n    }\n  }\n}\nclass bl {\n  constructor() {\n    A(this, \"externalLinkEnabled\");\n    this.externalLinkEnabled = !0;\n  }\n  /**\n     * @type {number}\n     */\n  get pagesCount() {\n    return 0;\n  }\n  /**\n     * @type {number}\n     */\n  get page() {\n    return 0;\n  }\n  /**\n     * @param {number} _value\n     */\n  set page(d) {\n  }\n  /**\n     * @type {number}\n     */\n  get rotation() {\n    return 0;\n  }\n  /**\n     * @param {number} _value\n     */\n  set rotation(d) {\n  }\n  /**\n     * @type {boolean}\n     */\n  get isInPresentationMode() {\n    return !1;\n  }\n  /**\n     * @param {string|Array} _dest - The named, or explicit, PDF destination.\n     */\n  async goToDestination(d) {\n  }\n  /**\n     * @param {number|string} _val - The page number, or page label.\n     */\n  goToPage(d) {\n  }\n  /**\n     * @param {HTMLAnchorElement} link\n     * @param {string} url\n     * @param {boolean} [_newWindow]\n     */\n  addLinkAttributes(d, Z, b = !1) {\n  }\n  /**\n     * @param _dest - The PDF destination object.\n     * @returns {string} The hyperlink to the PDF object.\n     */\n  getDestinationHash(d) {\n    return \"#\";\n  }\n  /**\n     * @param _hash - The PDF parameters/hash.\n     * @returns {string} The hyperlink to the PDF object.\n     */\n  getAnchorUrl(d) {\n    return \"#\";\n  }\n  /**\n     * @param {string} _hash\n     */\n  setHash(d) {\n  }\n  /**\n     * @param {string} _action\n     */\n  executeNamedAction(d) {\n  }\n  /**\n     * @param {Object} _action\n     */\n  executeSetOCGState(d) {\n  }\n  /**\n     * @param {number} _pageNum - page number.\n     * @param {Object} _pageRef - reference to the page.\n     */\n  cachePageRef(d, Z) {\n  }\n}\nconst pl = /* @__PURE__ */ g({\n  __name: \"AnnotationLayer\",\n  props: {\n    page: {},\n    viewport: {},\n    document: {},\n    annotationsFilter: {},\n    annotationsMap: {},\n    imageResourcesPath: {},\n    hideForms: { type: Boolean },\n    enableScripting: { type: Boolean },\n    intent: {}\n  },\n  emits: [\"annotation\", \"annotationLoaded\"],\n  setup(l, { emit: d }) {\n    const Z = l, b = j(), W = j();\n    function c(T) {\n      const Y = il(T, Z.document, W.value);\n      Promise.resolve(Y).then((m) => {\n        m && d(\"annotation\", m);\n      });\n    }\n    async function N() {\n      var Y;\n      return await ((Y = o(Z.document)) == null ? void 0 : Y.getFieldObjects());\n    }\n    async function L() {\n      var Y;\n      return await ((Y = o(Z.document)) == null ? void 0 : Y.hasJSActions());\n    }\n    async function X() {\n      const T = Z.page;\n      let Y = await (T == null ? void 0 : T.getAnnotations({ intent: Z.intent }));\n      if (Z.annotationsFilter) {\n        const m = Z.annotationsFilter;\n        Y = Y.filter((h) => {\n          const z = h.subtype, u = h.fieldType ? `${z}.${h.fieldType}` : null;\n          return (m == null ? void 0 : m.includes(z)) || u !== null && (m == null ? void 0 : m.includes(u));\n        });\n      }\n      return Y;\n    }\n    async function y() {\n      var R, w;\n      (w = (R = b.value).replaceChildren) == null || w.call(R);\n      for (const s of _)\n        b.value.removeEventListener(s, c);\n      const T = o(Z.document), Y = Z.page, m = Z.viewport;\n      W.value = await X();\n      const h = /* @__PURE__ */ new Map([]);\n      for (const s of W.value)\n        if (s.subtype === \"Widget\" && s.fieldType === \"Btn\" && s.pushButton) {\n          const C = s.rect[2] - s.rect[0], V = s.rect[3] - s.rect[1], G = document.createElement(\"canvas\");\n          G.setAttribute(\"width\", (C * m.scale).toString()), G.setAttribute(\"height\", (V * m.scale).toString()), h.set(s.id, G);\n        }\n      const z = T.annotationStorage;\n      if (Z.annotationsMap)\n        for (const [s, C] of Object.entries(Z.annotationsMap))\n          z.setValue(s, C);\n      const u = {\n        accessibilityManager: void 0,\n        annotationCanvasMap: h,\n        div: b.value,\n        l10n: null,\n        page: Y,\n        viewport: m.clone({ dontFlip: !0 })\n      }, I = {\n        annotations: W.value,\n        viewport: m.clone({ dontFlip: !0 }),\n        linkService: new bl(),\n        annotationCanvasMap: h,\n        div: b.value,\n        annotationStorage: z,\n        renderForms: !Z.hideForms,\n        page: Y,\n        enableScripting: !1,\n        hasJSActions: await L(),\n        fieldObjects: await N(),\n        downloadManager: null,\n        imageResourcesPath: Z.imageResourcesPath\n      };\n      new D.AnnotationLayer(u).render(I).then(async () => {\n        d(\"annotationLoaded\", await X());\n      });\n      for (const s of _)\n        b.value.addEventListener(s, c);\n    }\n    return U(() => Z.viewport, () => {\n      Z.page && Z.viewport && b.value && y();\n    }), H(() => {\n      Z.page && Z.viewport && b.value && y();\n    }), (T, Y) => (O(), P(\"div\", {\n      ref_key: \"layer\",\n      ref: b,\n      class: \"annotationLayer\",\n      style: { display: \"block\" }\n    }, null, 512));\n  }\n});\nfunction dl(l) {\n  return l.items.map((d) => d.str);\n}\nfunction al(l, d, Z) {\n  const b = l.join(\" \"), W = [\"g\"];\n  Z.ignoreCase && W.push(\"i\");\n  let c = d.trim();\n  Z.completeWords && (c = `\\\\b${c}\\\\b`);\n  const N = new RegExp(c, W.join(\"\")), L = [];\n  let X;\n  for (; (X = N.exec(b)) !== null; )\n    L.push([X.index, X[0].length, X[0]]);\n  return L;\n}\nfunction wl(l, d) {\n  let Z = 0, b = 0;\n  const W = d.length - 1, c = [];\n  for (let N = 0; N < l.length; N++) {\n    let L = l[N][0];\n    for (; Z !== W && L >= b + d[Z].length; )\n      b += d[Z].length + 1, Z++;\n    const X = {\n      idx: Z,\n      offset: L - b\n    };\n    for (L += l[N][1]; Z !== W && L > b + d[Z].length; )\n      b += d[Z].length + 1, Z++;\n    const y = {\n      idx: Z,\n      offset: L - b\n    };\n    c.push({\n      start: X,\n      end: y,\n      str: l[N][2],\n      oindex: l[N][0]\n    });\n  }\n  return c;\n}\nfunction Sl(l, d, Z) {\n  function b(W, c = -1, N = -1) {\n    const L = d.items[W], X = [];\n    let y = \"\", T = \"\", Y = \"\", m = Z[W];\n    if (!m)\n      return;\n    if (m.nodeType === Node.TEXT_NODE) {\n      const u = document.createElement(\"span\");\n      m.before(u), u.append(m), Z[W] = u, m = u;\n    }\n    c >= 0 && N >= 0 ? y = L.str.substring(c, N) : c < 0 && N < 0 ? y = L.str : c >= 0 ? y = L.str.substring(c) : N >= 0 && (y = L.str.substring(0, N));\n    const h = document.createTextNode(y), z = document.createElement(\"span\");\n    if (z.className = \"highlight appended\", z.append(h), X.push(z), c > 0)\n      if (m.childNodes.length === 1 && m.childNodes[0].nodeType === Node.TEXT_NODE) {\n        T = L.str.substring(0, c);\n        const u = document.createTextNode(T);\n        X.unshift(u);\n      } else {\n        let u = 0;\n        const I = [];\n        for (const p of m.childNodes) {\n          const R = p.nodeType === Node.TEXT_NODE ? p.nodeValue : p.firstChild.nodeValue;\n          u += R.length, u <= c ? I.push(p) : c >= u - R.length && N <= u && I.push(document.createTextNode(R.substring(0, c - (u - R.length))));\n        }\n        X.unshift(...I);\n      }\n    if (N > 0) {\n      Y = L.str.substring(N);\n      const u = document.createTextNode(Y);\n      X.push(u);\n    }\n    m.replaceChildren(...X);\n  }\n  for (const W of l)\n    if (W.start.idx === W.end.idx)\n      b(W.start.idx, W.start.offset, W.end.offset);\n    else\n      for (let c = W.start.idx, N = W.end.idx; c <= N; c++)\n        c === W.start.idx ? b(c, W.start.offset) : c === W.end.idx ? b(c, -1, W.end.offset) : b(c);\n}\nfunction xl(l, d) {\n  const Z = dl(l);\n  for (let b = 0; b < d.length; b++) {\n    const W = d[b];\n    if (W && W.nodeType !== Node.TEXT_NODE) {\n      const c = document.createTextNode(Z[b]);\n      W.replaceChildren(c);\n    }\n  }\n}\nfunction jl(l, d, Z) {\n  const b = dl(d), W = al(b, l, Z);\n  return wl(W, b);\n}\nconst Dl = /* @__PURE__ */ g({\n  __name: \"TextLayer\",\n  props: {\n    page: {},\n    viewport: {},\n    highlightText: {},\n    highlightOptions: {}\n  },\n  emits: [\"highlight\", \"textLoaded\"],\n  setup(l, { emit: d }) {\n    const Z = l, b = j(), W = j(), c = [];\n    function N() {\n      return Object.assign({}, {\n        ignoreCase: !0,\n        completeWords: !1\n      }, Z.highlightOptions);\n    }\n    async function L(Y = !1) {\n      const m = Z.page, h = await (m == null ? void 0 : m.getTextContent());\n      if (h && (Y && xl(h, c), Z.highlightText)) {\n        const z = jl(Z.highlightText, h, N());\n        Sl(z, h, c), d(\"highlight\", {\n          matches: z,\n          textContent: h,\n          textDivs: c,\n          page: (m == null ? void 0 : m.pageNumber) || 1\n        });\n      }\n    }\n    function X() {\n      var I, p;\n      (p = (I = b.value).replaceChildren) == null || p.call(I), c.splice(0, c.length);\n      const Y = Z.page, m = Z.viewport, z = {\n        textContentSource: Y == null ? void 0 : Y.streamTextContent({ includeMarkedContent: !0, disableNormalization: !0 }),\n        viewport: m,\n        container: b.value,\n        isOffscreenCanvasSupported: !0,\n        textDivs: c,\n        textDivProperties: /* @__PURE__ */ new WeakMap()\n      };\n      D.renderTextLayer(z).promise.then(async () => {\n        var s;\n        const R = await (Y == null ? void 0 : Y.getTextContent());\n        d(\"textLoaded\", {\n          textDivs: c,\n          textContent: R\n        });\n        const w = document.createElement(\"div\");\n        w.className = \"endOfContent\", (s = b.value) == null || s.appendChild(w), W.value = w, L();\n      });\n    }\n    function y() {\n      W.value && W.value.classList.add(\"active\");\n    }\n    function T() {\n      W.value && W.value.classList.remove(\"active\");\n    }\n    return U(() => Z.viewport, (Y) => {\n      Z.page && Z.viewport && b.value && X();\n    }), U(() => [Z.highlightText, Z.highlightOptions], (Y) => {\n      L(!0);\n    }, { deep: !0 }), H(() => {\n      Z.page && Z.viewport && b.value && X();\n    }), (Y, m) => (O(), P(\"div\", {\n      ref_key: \"layer\",\n      ref: b,\n      class: \"textLayer\",\n      style: { display: \"block\" },\n      onMousedown: y,\n      onMouseup: T\n    }, null, 544));\n  }\n}), Jl = /* @__PURE__ */ g({\n  __name: \"XFALayer\",\n  props: {\n    page: {},\n    document: {},\n    viewport: {}\n  },\n  emits: [\"xfaLoaded\"],\n  setup(l, { emit: d }) {\n    const Z = l, b = j();\n    async function W() {\n      var X, y;\n      (y = (X = b.value).replaceChildren) == null || y.call(X);\n      const c = o(Z.document), N = Z.page, L = Z.viewport;\n      if (c.isPureXfa) {\n        const T = await N.getXfa(), Y = {\n          div: b.value,\n          viewport: L.clone({ dontFlip: !0 }),\n          linkService: new bl(),\n          annotationStorage: c == null ? void 0 : c.annotationStorage,\n          xfaHtml: T\n        };\n        D.XfaLayer.render(Y), d(\"xfaLoaded\");\n      }\n    }\n    return U(() => Z.viewport, (c) => {\n      Z.page && Z.viewport && b.value && W();\n    }), H(() => {\n      Z.page && Z.viewport && b.value && W();\n    }), (c, N) => (O(), P(\"div\", {\n      ref_key: \"layer\",\n      ref: b,\n      style: { display: \"block\" }\n    }, null, 512));\n  }\n});\nconst Ul = /* @__PURE__ */ Zl(\"canvas\", {\n  dir: \"ltr\",\n  style: { display: \"block\" },\n  role: \"main\"\n}, null, -1), ll = /* @__PURE__ */ g({\n  __name: \"VuePDF\",\n  props: {\n    pdf: {},\n    page: { default: 1 },\n    scale: { default: 1 },\n    rotation: {},\n    fitParent: { type: Boolean },\n    width: {},\n    height: {},\n    textLayer: { type: Boolean },\n    imageResourcesPath: {},\n    hideForms: { type: Boolean },\n    intent: { default: \"display\" },\n    annotationLayer: { type: Boolean },\n    annotationsFilter: {},\n    annotationsMap: {},\n    watermarkText: {},\n    watermarkOptions: {},\n    highlightText: {},\n    highlightOptions: {}\n  },\n  emits: [\"annotation\", \"highlight\", \"loaded\", \"textLoaded\", \"annotationLoaded\", \"xfaLoaded\"],\n  setup(l, { expose: d, emit: Z }) {\n    const b = l, W = j(), c = j(), N = j(!1);\n    let L;\n    const X = B(() => ({\n      viewport: void 0,\n      document: void 0,\n      page: void 0\n    })), y = B(() => ({\n      annotationsMap: b.annotationsMap,\n      annotationsFilter: b.annotationsFilter,\n      imageResourcesPath: b.imageResourcesPath,\n      hideForms: b.hideForms,\n      intent: b.intent\n    })), T = B(() => ({\n      highlightText: b.highlightText,\n      highlightOptions: b.highlightOptions\n    }));\n    function Y() {\n      return Object.assign({}, {\n        columns: 4,\n        rows: 4,\n        rotation: 45,\n        fontSize: 18,\n        color: \"rgba(211, 210, 211, 0.4)\"\n      }, b.watermarkOptions);\n    }\n    function m(V) {\n      if (!(typeof V == \"number\" && V % 90 === 0))\n        return 0;\n      const G = V / 90;\n      return G > 4 ? m(V - 360) : G < 0 ? m(V + 360) : V;\n    }\n    function h(V) {\n      let G = b.scale;\n      if (b.fitParent) {\n        const M = W.value.parentNode.clientWidth, i = V.getViewport({ scale: 1 }).width;\n        G = M / i;\n      } else if (b.width) {\n        const M = V.getViewport({ scale: 1 }).width;\n        G = b.width / M;\n      } else if (b.height) {\n        const M = V.getViewport({ scale: 1 }).height;\n        G = b.height / M;\n      }\n      return G;\n    }\n    function z(V = 1) {\n      if (!b.watermarkText)\n        return;\n      const G = u();\n      if (!G)\n        return;\n      const M = G.getContext(\"2d\");\n      if (!M)\n        return;\n      const i = Y(), J = b.watermarkText, a = i.columns, k = i.rows, x = a * k, n = i.rotation, Q = i.fontSize * V;\n      M.font = `${Q}px Trebuchet MS`, M.fillStyle = i.color;\n      for (let F = 0; F < x; F++) {\n        const E = F % a * (G.width / a) + G.width / (a * 2), cl = Math.floor(F / a) * (G.height / k) + G.height / (k * 2), Wl = M.measureText(J).width;\n        M.save(), M.translate(E, cl), M.rotate(-n * (Math.PI / 180)), M.fillText(J, -Wl / 2, Q / 2), M.restore();\n      }\n    }\n    function u() {\n      var G;\n      let V = null;\n      return (G = W.value) == null || G.childNodes.forEach((M) => {\n        M.tagName === \"CANVAS\" && (V = M);\n      }), V;\n    }\n    function I(V) {\n      var J;\n      let G;\n      const M = u();\n      M && (M == null ? void 0 : M.getAttribute(\"role\")) === \"main\" ? G = M : (G = document.createElement(\"canvas\"), G.style.display = \"block\", G.setAttribute(\"dir\", \"ltr\"));\n      const i = window.devicePixelRatio || 1;\n      return G.width = Math.floor(V.width * i), G.height = Math.floor(V.height * i), G.style.width = `${Math.floor(V.width)}px`, G.style.height = `${Math.floor(V.height)}px`, (J = W.value) == null || J.style.setProperty(\"--scale-factor\", `${V.scale}`), c.value.style.width = `${Math.floor(V.width)}px`, c.value.style.height = `${Math.floor(V.height)}px`, c.value.style.top = \"0\", c.value.style.left = \"0\", N.value = !0, G;\n    }\n    function p() {\n      L && L.cancel();\n    }\n    function R(V) {\n      var G;\n      (G = o(X.value.document)) == null || G.getPage(V).then((M) => {\n        var E;\n        p();\n        const i = M.getViewport(), J = {\n          scale: h(M),\n          rotation: m((b.rotation || 0) + i.rotation)\n        }, a = M.getViewport(J), k = u(), x = I(a), n = window.devicePixelRatio || 1, Q = n !== 1 ? [n, 0, 0, n, 0, 0] : void 0, F = {\n          canvasContext: x.getContext(\"2d\"),\n          viewport: a,\n          annotationMode: b.hideForms ? D.AnnotationMode.ENABLE : D.AnnotationMode.ENABLE_FORMS,\n          transform: Q,\n          intent: b.intent\n        };\n        (x == null ? void 0 : x.getAttribute(\"role\")) !== \"main\" ? k && ((E = W.value) == null || E.replaceChild(x, k)) : x.removeAttribute(\"role\"), X.value.page = M, X.value.viewport = a, L = M.render(F), L.promise.then(() => {\n          N.value = !1, z(a.scale), Z(\"loaded\", X.value.viewport);\n        }).catch(() => {\n        });\n      });\n    }\n    function w(V) {\n      V.promise.then(async (G) => {\n        X.value.document = G, R(b.page);\n      });\n    }\n    U(() => b.pdf, (V) => {\n      V !== void 0 && w(V);\n    }), U(() => [\n      b.scale,\n      b.width,\n      b.height,\n      b.rotation,\n      b.page,\n      b.hideForms,\n      b.intent\n    ], () => {\n      R(b.page);\n    }), H(() => {\n      b.pdf !== void 0 && w(b.pdf);\n    });\n    function s() {\n      R(b.page);\n    }\n    function C() {\n      p();\n    }\n    return d({\n      reload: s,\n      cancel: C\n    }), (V, G) => (O(), P(\"div\", {\n      ref_key: \"container\",\n      ref: W,\n      style: { position: \"relative\", display: \"block\", overflow: \"hidden\" }\n    }, [\n      Ul,\n      V.annotationLayer ? (O(), f(pl, v({ key: 0 }, { ...X.value, ...y.value }, {\n        onAnnotation: G[0] || (G[0] = (M) => Z(\"annotation\", M)),\n        onAnnotationLoaded: G[1] || (G[1] = (M) => Z(\"annotationLoaded\", M))\n      }), null, 16)) : r(\"\", !0),\n      V.textLayer ? (O(), f(Dl, v({ key: 1 }, { ...X.value, ...T.value }, {\n        onHighlight: G[2] || (G[2] = (M) => Z(\"highlight\", M)),\n        onTextLoaded: G[3] || (G[3] = (M) => Z(\"textLoaded\", M))\n      }), null, 16)) : r(\"\", !0),\n      Nl(Jl, v({ ...X.value }, {\n        onXfaLoaded: G[4] || (G[4] = (M) => Z(\"xfaLoaded\"))\n      }), null, 16),\n      Yl(Zl(\"div\", {\n        ref_key: \"loadingLayer\",\n        ref: c,\n        style: { position: \"absolute\" }\n      }, [\n        Ml(V.$slots, \"default\")\n      ], 512), [\n        [Xl, N.value]\n      ])\n    ], 512));\n  }\n}), kl = \"data:application/javascript;base64,LyoqCiAqIEBsaWNzdGFydCBUaGUgZm9sbG93aW5nIGlzIHRoZSBlbnRpcmUgbGljZW5zZSBub3RpY2UgZm9yIHRoZQogKiBKYXZhU2NyaXB0IGNvZGUgaW4gdGhpcyBwYWdlCiAqCiAqIENvcHlyaWdodCAyMDIzIE1vemlsbGEgRm91bmRhdGlvbgogKgogKiBMaWNlbnNlZCB1bmRlciB0aGUgQXBhY2hlIExpY2Vuc2UsIFZlcnNpb24gMi4wICh0aGUgIkxpY2Vuc2UiKTsKICogeW91IG1heSBub3QgdXNlIHRoaXMgZmlsZSBleGNlcHQgaW4gY29tcGxpYW5jZSB3aXRoIHRoZSBMaWNlbnNlLgogKiBZb3UgbWF5IG9idGFpbiBhIGNvcHkgb2YgdGhlIExpY2Vuc2UgYXQKICoKICogICAgIGh0dHA6Ly93d3cuYXBhY2hlLm9yZy9saWNlbnNlcy9MSUNFTlNFLTIuMAogKgogKiBVbmxlc3MgcmVxdWlyZWQgYnkgYXBwbGljYWJsZSBsYXcgb3IgYWdyZWVkIHRvIGluIHdyaXRpbmcsIHNvZnR3YXJlCiAqIGRpc3RyaWJ1dGVkIHVuZGVyIHRoZSBMaWNlbnNlIGlzIGRpc3RyaWJ1dGVkIG9uIGFuICJBUyBJUyIgQkFTSVMsCiAqIFdJVEhPVVQgV0FSUkFOVElFUyBPUiBDT05ESVRJT05TIE9GIEFOWSBLSU5ELCBlaXRoZXIgZXhwcmVzcyBvciBpbXBsaWVkLgogKiBTZWUgdGhlIExpY2Vuc2UgZm9yIHRoZSBzcGVjaWZpYyBsYW5ndWFnZSBnb3Zlcm5pbmcgcGVybWlzc2lvbnMgYW5kCiAqIGxpbWl0YXRpb25zIHVuZGVyIHRoZSBMaWNlbnNlLgogKgogKiBAbGljZW5kIFRoZSBhYm92ZSBpcyB0aGUgZW50aXJlIGxpY2Vuc2Ugbm90aWNlIGZvciB0aGUKICogSmF2YVNjcmlwdCBjb2RlIGluIHRoaXMgcGFnZQogKi8KIWZ1bmN0aW9uIHdlYnBhY2tVbml2ZXJzYWxNb2R1bGVEZWZpbml0aW9uKGUsdCl7Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzJiYib2JqZWN0Ij09dHlwZW9mIG1vZHVsZT9tb2R1bGUuZXhwb3J0cz1lLnBkZmpzV29ya2VyPXQoKToiZnVuY3Rpb24iPT10eXBlb2YgZGVmaW5lJiZkZWZpbmUuYW1kP2RlZmluZSgicGRmanMtZGlzdC9idWlsZC9wZGYud29ya2VyIixbXSwoKCk9PmUucGRmanNXb3JrZXI9dCgpKSk6Im9iamVjdCI9PXR5cGVvZiBleHBvcnRzP2V4cG9ydHNbInBkZmpzLWRpc3QvYnVpbGQvcGRmLndvcmtlciJdPWUucGRmanNXb3JrZXI9dCgpOmVbInBkZmpzLWRpc3QvYnVpbGQvcGRmLndvcmtlciJdPWUucGRmanNXb3JrZXI9dCgpfShnbG9iYWxUaGlzLCgoKT0+KCgpPT57InVzZSBzdHJpY3QiO3ZhciBlPVssKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LldvcmtlclRhc2s9dC5Xb3JrZXJNZXNzYWdlSGFuZGxlcj12b2lkIDA7dmFyIHI9YSgyKSxuPWEoMyksaT1hKDQpLHM9YSg2KSxvPWEoMTApLGM9YSg2OCksbD1hKDczKSxoPWEoMTA0KSx1PWEoMTA1KSxkPWEoNzIpO2NsYXNzIFdvcmtlclRhc2t7Y29uc3RydWN0b3IoZSl7dGhpcy5uYW1lPWU7dGhpcy50ZXJtaW5hdGVkPSExO3RoaXMuX2NhcGFiaWxpdHk9bmV3IHIuUHJvbWlzZUNhcGFiaWxpdHl9Z2V0IGZpbmlzaGVkKCl7cmV0dXJuIHRoaXMuX2NhcGFiaWxpdHkucHJvbWlzZX1maW5pc2goKXt0aGlzLl9jYXBhYmlsaXR5LnJlc29sdmUoKX10ZXJtaW5hdGUoKXt0aGlzLnRlcm1pbmF0ZWQ9ITB9ZW5zdXJlTm90VGVybWluYXRlZCgpe2lmKHRoaXMudGVybWluYXRlZCl0aHJvdyBuZXcgRXJyb3IoIldvcmtlciB0YXNrIHdhcyB0ZXJtaW5hdGVkIil9fXQuV29ya2VyVGFzaz1Xb3JrZXJUYXNrO2NsYXNzIFdvcmtlck1lc3NhZ2VIYW5kbGVye3N0YXRpYyBzZXR1cChlLHQpe2xldCBhPSExO2Uub24oInRlc3QiLChmdW5jdGlvbih0KXtpZighYSl7YT0hMDtlLnNlbmQoInRlc3QiLHQgaW5zdGFuY2VvZiBVaW50OEFycmF5KX19KSk7ZS5vbigiY29uZmlndXJlIiwoZnVuY3Rpb24oZSl7KDAsci5zZXRWZXJib3NpdHlMZXZlbCkoZS52ZXJib3NpdHkpfSkpO2Uub24oIkdldERvY1JlcXVlc3QiLChmdW5jdGlvbihlKXtyZXR1cm4gV29ya2VyTWVzc2FnZUhhbmRsZXIuY3JlYXRlRG9jdW1lbnRIYW5kbGVyKGUsdCl9KSl9c3RhdGljIGNyZWF0ZURvY3VtZW50SGFuZGxlcihlLHQpe2xldCBhLGY9ITEsZz1udWxsO2NvbnN0IHA9bmV3IFNldCxtPSgwLHIuZ2V0VmVyYm9zaXR5TGV2ZWwpKCkse2RvY0lkOmIsYXBpVmVyc2lvbjp5fT1lLHc9IjMuMTEuMTc0IjtpZih5IT09dyl0aHJvdyBuZXcgRXJyb3IoYFRoZSBBUEkgdmVyc2lvbiAiJHt5fSIgZG9lcyBub3QgbWF0Y2ggdGhlIFdvcmtlciB2ZXJzaW9uICIke3d9Ii5gKTtjb25zdCBTPVtdO2Zvcihjb25zdCBlIGluW10pUy5wdXNoKGUpO2lmKFMubGVuZ3RoKXRocm93IG5ldyBFcnJvcigiVGhlIGBBcnJheS5wcm90b3R5cGVgIGNvbnRhaW5zIHVuZXhwZWN0ZWQgZW51bWVyYWJsZSBwcm9wZXJ0aWVzOiAiK1Muam9pbigiLCAiKSsiOyB0aHVzIGJyZWFraW5nIGUuZy4gYGZvci4uLmluYCBpdGVyYXRpb24gb2YgYEFycmF5YHMuIik7Y29uc3QgeD1iKyJfd29ya2VyIjtsZXQgQz1uZXcgaC5NZXNzYWdlSGFuZGxlcih4LGIsdCk7ZnVuY3Rpb24gZW5zdXJlTm90VGVybWluYXRlZCgpe2lmKGYpdGhyb3cgbmV3IEVycm9yKCJXb3JrZXIgd2FzIHRlcm1pbmF0ZWQiKX1mdW5jdGlvbiBzdGFydFdvcmtlclRhc2soZSl7cC5hZGQoZSl9ZnVuY3Rpb24gZmluaXNoV29ya2VyVGFzayhlKXtlLmZpbmlzaCgpO3AuZGVsZXRlKGUpfWFzeW5jIGZ1bmN0aW9uIGxvYWREb2N1bWVudChlKXthd2FpdCBhLmVuc3VyZURvYygiY2hlY2tIZWFkZXIiKTthd2FpdCBhLmVuc3VyZURvYygicGFyc2VTdGFydFhSZWYiKTthd2FpdCBhLmVuc3VyZURvYygicGFyc2UiLFtlXSk7YXdhaXQgYS5lbnN1cmVEb2MoImNoZWNrRmlyc3RQYWdlIixbZV0pO2F3YWl0IGEuZW5zdXJlRG9jKCJjaGVja0xhc3RQYWdlIixbZV0pO2NvbnN0IHQ9YXdhaXQgYS5lbnN1cmVEb2MoImlzUHVyZVhmYSIpO2lmKHQpe2NvbnN0IGU9bmV3IFdvcmtlclRhc2soImxvYWRYZmFGb250cyIpO3N0YXJ0V29ya2VyVGFzayhlKTthd2FpdCBQcm9taXNlLmFsbChbYS5sb2FkWGZhRm9udHMoQyxlKS5jYXRjaCgoZT0+e30pKS50aGVuKCgoKT0+ZmluaXNoV29ya2VyVGFzayhlKSkpLGEubG9hZFhmYUltYWdlcygpXSl9Y29uc3RbcixuXT1hd2FpdCBQcm9taXNlLmFsbChbYS5lbnN1cmVEb2MoIm51bVBhZ2VzIiksYS5lbnN1cmVEb2MoImZpbmdlcnByaW50cyIpXSk7cmV0dXJue251bVBhZ2VzOnIsZmluZ2VycHJpbnRzOm4saHRtbEZvclhmYTp0P2F3YWl0IGEuZW5zdXJlRG9jKCJodG1sRm9yWGZhIik6bnVsbH19ZnVuY3Rpb24gZ2V0UGRmTWFuYWdlcih7ZGF0YTplLHBhc3N3b3JkOnQsZGlzYWJsZUF1dG9GZXRjaDphLHJhbmdlQ2h1bmtTaXplOmksbGVuZ3RoOm8sZG9jQmFzZVVybDpjLGVuYWJsZVhmYTpsLGV2YWx1YXRvck9wdGlvbnM6aH0pe2NvbnN0IGQ9e3NvdXJjZTpudWxsLGRpc2FibGVBdXRvRmV0Y2g6YSxkb2NCYXNlVXJsOmMsZG9jSWQ6YixlbmFibGVYZmE6bCxldmFsdWF0b3JPcHRpb25zOmgsaGFuZGxlcjpDLGxlbmd0aDpvLHBhc3N3b3JkOnQscmFuZ2VDaHVua1NpemU6aX0sZj1uZXcgci5Qcm9taXNlQ2FwYWJpbGl0eTtsZXQgcDtpZihlKXt0cnl7ZC5zb3VyY2U9ZTtwPW5ldyBzLkxvY2FsUGRmTWFuYWdlcihkKTtmLnJlc29sdmUocCl9Y2F0Y2goZSl7Zi5yZWplY3QoZSl9cmV0dXJuIGYucHJvbWlzZX1sZXQgbSx5PVtdO3RyeXttPW5ldyB1LlBERldvcmtlclN0cmVhbShDKX1jYXRjaChlKXtmLnJlamVjdChlKTtyZXR1cm4gZi5wcm9taXNlfWNvbnN0IHc9bS5nZXRGdWxsUmVhZGVyKCk7dy5oZWFkZXJzUmVhZHkudGhlbigoZnVuY3Rpb24oKXtpZih3LmlzUmFuZ2VTdXBwb3J0ZWQpe2Quc291cmNlPW07ZC5sZW5ndGg9dy5jb250ZW50TGVuZ3RoO2QuZGlzYWJsZUF1dG9GZXRjaHx8PXcuaXNTdHJlYW1pbmdTdXBwb3J0ZWQ7cD1uZXcgcy5OZXR3b3JrUGRmTWFuYWdlcihkKTtmb3IoY29uc3QgZSBvZiB5KXAuc2VuZFByb2dyZXNzaXZlRGF0YShlKTt5PVtdO2YucmVzb2x2ZShwKTtnPW51bGx9fSkpLmNhdGNoKChmdW5jdGlvbihlKXtmLnJlamVjdChlKTtnPW51bGx9KSk7bGV0IFM9MDtuZXcgUHJvbWlzZSgoZnVuY3Rpb24oZSx0KXtjb25zdCByZWFkQ2h1bms9ZnVuY3Rpb24oe3ZhbHVlOmUsZG9uZTphfSl7dHJ5e2Vuc3VyZU5vdFRlcm1pbmF0ZWQoKTtpZihhKXtwfHxmdW5jdGlvbigpe2NvbnN0IGU9KDAsbi5hcnJheUJ1ZmZlcnNUb0J5dGVzKSh5KTtvJiZlLmxlbmd0aCE9PW8mJigwLHIud2FybikoInJlcG9ydGVkIEhUVFAgbGVuZ3RoIGlzIGRpZmZlcmVudCBmcm9tIGFjdHVhbCIpO3RyeXtkLnNvdXJjZT1lO3A9bmV3IHMuTG9jYWxQZGZNYW5hZ2VyKGQpO2YucmVzb2x2ZShwKX1jYXRjaChlKXtmLnJlamVjdChlKX15PVtdfSgpO2c9bnVsbDtyZXR1cm59Uys9ZS5ieXRlTGVuZ3RoO3cuaXNTdHJlYW1pbmdTdXBwb3J0ZWR8fEMuc2VuZCgiRG9jUHJvZ3Jlc3MiLHtsb2FkZWQ6Uyx0b3RhbDpNYXRoLm1heChTLHcuY29udGVudExlbmd0aHx8MCl9KTtwP3Auc2VuZFByb2dyZXNzaXZlRGF0YShlKTp5LnB1c2goZSk7dy5yZWFkKCkudGhlbihyZWFkQ2h1bmssdCl9Y2F0Y2goZSl7dChlKX19O3cucmVhZCgpLnRoZW4ocmVhZENodW5rLHQpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtmLnJlamVjdChlKTtnPW51bGx9KSk7Zz1mdW5jdGlvbihlKXttLmNhbmNlbEFsbFJlcXVlc3RzKGUpfTtyZXR1cm4gZi5wcm9taXNlfUMub24oIkdldFBhZ2UiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5nZXRQYWdlKGUucGFnZUluZGV4KS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gUHJvbWlzZS5hbGwoW2EuZW5zdXJlKGUsInJvdGF0ZSIpLGEuZW5zdXJlKGUsInJlZiIpLGEuZW5zdXJlKGUsInVzZXJVbml0IiksYS5lbnN1cmUoZSwidmlldyIpXSkudGhlbigoZnVuY3Rpb24oW2UsdCxhLHJdKXtyZXR1cm57cm90YXRlOmUscmVmOnQsdXNlclVuaXQ6YSx2aWV3OnJ9fSkpfSkpfSkpO0Mub24oIkdldFBhZ2VJbmRleCIsKGZ1bmN0aW9uKGUpe2NvbnN0IHQ9aS5SZWYuZ2V0KGUubnVtLGUuZ2VuKTtyZXR1cm4gYS5lbnN1cmVDYXRhbG9nKCJnZXRQYWdlSW5kZXgiLFt0XSl9KSk7Qy5vbigiR2V0RGVzdGluYXRpb25zIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEuZW5zdXJlQ2F0YWxvZygiZGVzdGluYXRpb25zIil9KSk7Qy5vbigiR2V0RGVzdGluYXRpb24iLChmdW5jdGlvbihlKXtyZXR1cm4gYS5lbnN1cmVDYXRhbG9nKCJnZXREZXN0aW5hdGlvbiIsW2UuaWRdKX0pKTtDLm9uKCJHZXRQYWdlTGFiZWxzIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEuZW5zdXJlQ2F0YWxvZygicGFnZUxhYmVscyIpfSkpO0Mub24oIkdldFBhZ2VMYXlvdXQiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5lbnN1cmVDYXRhbG9nKCJwYWdlTGF5b3V0Iil9KSk7Qy5vbigiR2V0UGFnZU1vZGUiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5lbnN1cmVDYXRhbG9nKCJwYWdlTW9kZSIpfSkpO0Mub24oIkdldFZpZXdlclByZWZlcmVuY2VzIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEuZW5zdXJlQ2F0YWxvZygidmlld2VyUHJlZmVyZW5jZXMiKX0pKTtDLm9uKCJHZXRPcGVuQWN0aW9uIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEuZW5zdXJlQ2F0YWxvZygib3BlbkFjdGlvbiIpfSkpO0Mub24oIkdldEF0dGFjaG1lbnRzIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEuZW5zdXJlQ2F0YWxvZygiYXR0YWNobWVudHMiKX0pKTtDLm9uKCJHZXREb2NKU0FjdGlvbnMiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5lbnN1cmVDYXRhbG9nKCJqc0FjdGlvbnMiKX0pKTtDLm9uKCJHZXRQYWdlSlNBY3Rpb25zIiwoZnVuY3Rpb24oe3BhZ2VJbmRleDplfSl7cmV0dXJuIGEuZ2V0UGFnZShlKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gYS5lbnN1cmUoZSwianNBY3Rpb25zIil9KSl9KSk7Qy5vbigiR2V0T3V0bGluZSIsKGZ1bmN0aW9uKGUpe3JldHVybiBhLmVuc3VyZUNhdGFsb2coImRvY3VtZW50T3V0bGluZSIpfSkpO0Mub24oIkdldE9wdGlvbmFsQ29udGVudENvbmZpZyIsKGZ1bmN0aW9uKGUpe3JldHVybiBhLmVuc3VyZUNhdGFsb2coIm9wdGlvbmFsQ29udGVudENvbmZpZyIpfSkpO0Mub24oIkdldFBlcm1pc3Npb25zIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEuZW5zdXJlQ2F0YWxvZygicGVybWlzc2lvbnMiKX0pKTtDLm9uKCJHZXRNZXRhZGF0YSIsKGZ1bmN0aW9uKGUpe3JldHVybiBQcm9taXNlLmFsbChbYS5lbnN1cmVEb2MoImRvY3VtZW50SW5mbyIpLGEuZW5zdXJlQ2F0YWxvZygibWV0YWRhdGEiKV0pfSkpO0Mub24oIkdldE1hcmtJbmZvIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEuZW5zdXJlQ2F0YWxvZygibWFya0luZm8iKX0pKTtDLm9uKCJHZXREYXRhIiwoZnVuY3Rpb24oZSl7cmV0dXJuIGEucmVxdWVzdExvYWRlZFN0cmVhbSgpLnRoZW4oKGZ1bmN0aW9uKGUpe3JldHVybiBlLmJ5dGVzfSkpfSkpO0Mub24oIkdldEFubm90YXRpb25zIiwoZnVuY3Rpb24oe3BhZ2VJbmRleDplLGludGVudDp0fSl7cmV0dXJuIGEuZ2V0UGFnZShlKS50aGVuKChmdW5jdGlvbihhKXtjb25zdCByPW5ldyBXb3JrZXJUYXNrKGBHZXRBbm5vdGF0aW9uczogcGFnZSAke2V9YCk7c3RhcnRXb3JrZXJUYXNrKHIpO3JldHVybiBhLmdldEFubm90YXRpb25zRGF0YShDLHIsdCkudGhlbigoZT0+e2ZpbmlzaFdvcmtlclRhc2socik7cmV0dXJuIGV9KSwoZT0+e2ZpbmlzaFdvcmtlclRhc2socik7dGhyb3cgZX0pKX0pKX0pKTtDLm9uKCJHZXRGaWVsZE9iamVjdHMiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5lbnN1cmVEb2MoImZpZWxkT2JqZWN0cyIpfSkpO0Mub24oIkhhc0pTQWN0aW9ucyIsKGZ1bmN0aW9uKGUpe3JldHVybiBhLmVuc3VyZURvYygiaGFzSlNBY3Rpb25zIil9KSk7Qy5vbigiR2V0Q2FsY3VsYXRpb25PcmRlcklkcyIsKGZ1bmN0aW9uKGUpe3JldHVybiBhLmVuc3VyZURvYygiY2FsY3VsYXRpb25PcmRlcklkcyIpfSkpO0Mub24oIlNhdmVEb2N1bWVudCIsKGFzeW5jIGZ1bmN0aW9uKHtpc1B1cmVYZmE6ZSxudW1QYWdlczp0LGFubm90YXRpb25TdG9yYWdlOnMsZmlsZW5hbWU6Y30pe2NvbnN0IGg9W2EucmVxdWVzdExvYWRlZFN0cmVhbSgpLGEuZW5zdXJlQ2F0YWxvZygiYWNyb0Zvcm0iKSxhLmVuc3VyZUNhdGFsb2coImFjcm9Gb3JtUmVmIiksYS5lbnN1cmVEb2MoInN0YXJ0WFJlZiIpLGEuZW5zdXJlRG9jKCJ4cmVmIiksYS5lbnN1cmVEb2MoImxpbmVhcml6YXRpb24iKSxhLmVuc3VyZUNhdGFsb2coInN0cnVjdFRyZWVSb290IildLHU9W10sZj1lP251bGw6KDAsbi5nZXROZXdBbm5vdGF0aW9uc01hcCkocyksW2cscCxtLGIseSx3LFNdPWF3YWl0IFByb21pc2UuYWxsKGgpLHg9eS50cmFpbGVyLmdldFJhdygiUm9vdCIpfHxudWxsO2xldCBrO2lmKGYpe1M/YXdhaXQgUy5jYW5VcGRhdGVTdHJ1Y3RUcmVlKHtwZGZNYW5hZ2VyOmEsbmV3QW5ub3RhdGlvbnNCeVBhZ2U6Zn0pJiYoaz1TKTphd2FpdCBkLlN0cnVjdFRyZWVSb290LmNhbkNyZWF0ZVN0cnVjdHVyZVRyZWUoe2NhdGFsb2dSZWY6eCxwZGZNYW5hZ2VyOmEsbmV3QW5ub3RhdGlvbnNCeVBhZ2U6Zn0pJiYoaz1udWxsKTtjb25zdCBlPW8uQW5ub3RhdGlvbkZhY3RvcnkuZ2VuZXJhdGVJbWFnZXMocy52YWx1ZXMoKSx5LGEuZXZhbHVhdG9yT3B0aW9ucy5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCksdD12b2lkIDA9PT1rP3U6W107Zm9yKGNvbnN0W3Isbl1vZiBmKXQucHVzaChhLmdldFBhZ2UocikudGhlbigodD0+e2NvbnN0IGE9bmV3IFdvcmtlclRhc2soYFNhdmUgKGVkaXRvcik6IHBhZ2UgJHtyfWApO3JldHVybiB0LnNhdmVOZXdBbm5vdGF0aW9ucyhDLGEsbixlKS5maW5hbGx5KChmdW5jdGlvbigpe2ZpbmlzaFdvcmtlclRhc2soYSl9KSl9KSkpO251bGw9PT1rP3UucHVzaChQcm9taXNlLmFsbCh0KS50aGVuKChhc3luYyBlPT57YXdhaXQgZC5TdHJ1Y3RUcmVlUm9vdC5jcmVhdGVTdHJ1Y3R1cmVUcmVlKHtuZXdBbm5vdGF0aW9uc0J5UGFnZTpmLHhyZWY6eSxjYXRhbG9nUmVmOngscGRmTWFuYWdlcjphLG5ld1JlZnM6ZX0pO3JldHVybiBlfSkpKTprJiZ1LnB1c2goUHJvbWlzZS5hbGwodCkudGhlbigoYXN5bmMgZT0+e2F3YWl0IGsudXBkYXRlU3RydWN0dXJlVHJlZSh7bmV3QW5ub3RhdGlvbnNCeVBhZ2U6ZixwZGZNYW5hZ2VyOmEsbmV3UmVmczplfSk7cmV0dXJuIGV9KSkpfWlmKGUpdS5wdXNoKGEuc2VyaWFsaXplWGZhRGF0YShzKSk7ZWxzZSBmb3IobGV0IGU9MDtlPHQ7ZSsrKXUucHVzaChhLmdldFBhZ2UoZSkudGhlbigoZnVuY3Rpb24odCl7Y29uc3QgYT1uZXcgV29ya2VyVGFzayhgU2F2ZTogcGFnZSAke2V9YCk7cmV0dXJuIHQuc2F2ZShDLGEscykuZmluYWxseSgoZnVuY3Rpb24oKXtmaW5pc2hXb3JrZXJUYXNrKGEpfSkpfSkpKTtjb25zdCB2PWF3YWl0IFByb21pc2UuYWxsKHUpO2xldCBGPVtdLE89bnVsbDtpZihlKXtPPXZbMF07aWYoIU8pcmV0dXJuIGcuYnl0ZXN9ZWxzZXtGPXYuZmxhdCgyKTtpZigwPT09Ri5sZW5ndGgpcmV0dXJuIGcuYnl0ZXN9Y29uc3QgVD1tJiZwIGluc3RhbmNlb2YgaS5EaWN0JiZGLnNvbWUoKGU9PmUubmVlZEFwcGVhcmFuY2VzKSksTT1wIGluc3RhbmNlb2YgaS5EaWN0JiZwLmdldCgiWEZBIil8fG51bGw7bGV0IEQ9bnVsbCxFPSExO2lmKEFycmF5LmlzQXJyYXkoTSkpe2ZvcihsZXQgZT0wLHQ9TS5sZW5ndGg7ZTx0O2UrPTIpaWYoImRhdGFzZXRzIj09PU1bZV0pe0Q9TVtlKzFdO0U9ITB9bnVsbD09PUQmJihEPXkuZ2V0TmV3VGVtcG9yYXJ5UmVmKCkpfWVsc2UgTSYmKDAsci53YXJuKSgiVW5zdXBwb3J0ZWQgWEZBIHR5cGUuIik7bGV0IE49T2JqZWN0LmNyZWF0ZShudWxsKTtpZih5LnRyYWlsZXIpe2NvbnN0IGU9T2JqZWN0LmNyZWF0ZShudWxsKSx0PXkudHJhaWxlci5nZXQoIkluZm8iKXx8bnVsbDt0IGluc3RhbmNlb2YgaS5EaWN0JiZ0LmZvckVhY2goKCh0LGEpPT57InN0cmluZyI9PXR5cGVvZiBhJiYoZVt0XT0oMCxyLnN0cmluZ1RvUERGU3RyaW5nKShhKSl9KSk7Tj17cm9vdFJlZjp4LGVuY3J5cHRSZWY6eS50cmFpbGVyLmdldFJhdygiRW5jcnlwdCIpfHxudWxsLG5ld1JlZjp5LmdldE5ld1RlbXBvcmFyeVJlZigpLGluZm9SZWY6eS50cmFpbGVyLmdldFJhdygiSW5mbyIpfHxudWxsLGluZm86ZSxmaWxlSWRzOnkudHJhaWxlci5nZXQoIklEIil8fG51bGwsc3RhcnRYUmVmOnc/Yjp5Lmxhc3RYUmVmU3RyZWFtUG9zPz9iLGZpbGVuYW1lOmN9fXJldHVybigwLGwuaW5jcmVtZW50YWxVcGRhdGUpKHtvcmlnaW5hbERhdGE6Zy5ieXRlcyx4cmVmSW5mbzpOLG5ld1JlZnM6Rix4cmVmOnksaGFzWGZhOiEhTSx4ZmFEYXRhc2V0c1JlZjpELGhhc1hmYURhdGFzZXRzRW50cnk6RSxuZWVkQXBwZWFyYW5jZXM6VCxhY3JvRm9ybVJlZjptLGFjcm9Gb3JtOnAseGZhRGF0YTpPfSkuZmluYWxseSgoKCk9Pnt5LnJlc2V0TmV3VGVtcG9yYXJ5UmVmKCl9KSl9KSk7Qy5vbigiR2V0T3BlcmF0b3JMaXN0IiwoZnVuY3Rpb24oZSx0KXtjb25zdCBuPWUucGFnZUluZGV4O2EuZ2V0UGFnZShuKS50aGVuKChmdW5jdGlvbihhKXtjb25zdCBpPW5ldyBXb3JrZXJUYXNrKGBHZXRPcGVyYXRvckxpc3Q6IHBhZ2UgJHtufWApO3N0YXJ0V29ya2VyVGFzayhpKTtjb25zdCBzPW0+PXIuVmVyYm9zaXR5TGV2ZWwuSU5GT1M/RGF0ZS5ub3coKTowO2EuZ2V0T3BlcmF0b3JMaXN0KHtoYW5kbGVyOkMsc2luazp0LHRhc2s6aSxpbnRlbnQ6ZS5pbnRlbnQsY2FjaGVLZXk6ZS5jYWNoZUtleSxhbm5vdGF0aW9uU3RvcmFnZTplLmFubm90YXRpb25TdG9yYWdlfSkudGhlbigoZnVuY3Rpb24oZSl7ZmluaXNoV29ya2VyVGFzayhpKTtzJiYoMCxyLmluZm8pKGBwYWdlPSR7bisxfSAtIGdldE9wZXJhdG9yTGlzdDogdGltZT0ke0RhdGUubm93KCktc31tcywgbGVuPSR7ZS5sZW5ndGh9YCk7dC5jbG9zZSgpfSksKGZ1bmN0aW9uKGUpe2ZpbmlzaFdvcmtlclRhc2soaSk7aS50ZXJtaW5hdGVkfHx0LmVycm9yKGUpfSkpfSkpfSkpO0Mub24oIkdldFRleHRDb250ZW50IiwoZnVuY3Rpb24oZSx0KXtjb25zdHtwYWdlSW5kZXg6bixpbmNsdWRlTWFya2VkQ29udGVudDppLGRpc2FibGVOb3JtYWxpemF0aW9uOnN9PWU7YS5nZXRQYWdlKG4pLnRoZW4oKGZ1bmN0aW9uKGUpe2NvbnN0IGE9bmV3IFdvcmtlclRhc2soIkdldFRleHRDb250ZW50OiBwYWdlICIrbik7c3RhcnRXb3JrZXJUYXNrKGEpO2NvbnN0IG89bT49ci5WZXJib3NpdHlMZXZlbC5JTkZPUz9EYXRlLm5vdygpOjA7ZS5leHRyYWN0VGV4dENvbnRlbnQoe2hhbmRsZXI6Qyx0YXNrOmEsc2luazp0LGluY2x1ZGVNYXJrZWRDb250ZW50OmksZGlzYWJsZU5vcm1hbGl6YXRpb246c30pLnRoZW4oKGZ1bmN0aW9uKCl7ZmluaXNoV29ya2VyVGFzayhhKTtvJiYoMCxyLmluZm8pKGBwYWdlPSR7bisxfSAtIGdldFRleHRDb250ZW50OiB0aW1lPWArKERhdGUubm93KCktbykrIm1zIik7dC5jbG9zZSgpfSksKGZ1bmN0aW9uKGUpe2ZpbmlzaFdvcmtlclRhc2soYSk7YS50ZXJtaW5hdGVkfHx0LmVycm9yKGUpfSkpfSkpfSkpO0Mub24oIkdldFN0cnVjdFRyZWUiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5nZXRQYWdlKGUucGFnZUluZGV4KS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gYS5lbnN1cmUoZSwiZ2V0U3RydWN0VHJlZSIpfSkpfSkpO0Mub24oIkZvbnRGYWxsYmFjayIsKGZ1bmN0aW9uKGUpe3JldHVybiBhLmZvbnRGYWxsYmFjayhlLmlkLEMpfSkpO0Mub24oIkNsZWFudXAiLChmdW5jdGlvbihlKXtyZXR1cm4gYS5jbGVhbnVwKCEwKX0pKTtDLm9uKCJUZXJtaW5hdGUiLChmdW5jdGlvbihlKXtmPSEwO2NvbnN0IHQ9W107aWYoYSl7YS50ZXJtaW5hdGUobmV3IHIuQWJvcnRFeGNlcHRpb24oIldvcmtlciB3YXMgdGVybWluYXRlZC4iKSk7Y29uc3QgZT1hLmNsZWFudXAoKTt0LnB1c2goZSk7YT1udWxsfWVsc2UoMCxjLmNsZWFyR2xvYmFsQ2FjaGVzKSgpO2cmJmcobmV3IHIuQWJvcnRFeGNlcHRpb24oIldvcmtlciB3YXMgdGVybWluYXRlZC4iKSk7Zm9yKGNvbnN0IGUgb2YgcCl7dC5wdXNoKGUuZmluaXNoZWQpO2UudGVybWluYXRlKCl9cmV0dXJuIFByb21pc2UuYWxsKHQpLnRoZW4oKGZ1bmN0aW9uKCl7Qy5kZXN0cm95KCk7Qz1udWxsfSkpfSkpO0Mub24oIlJlYWR5IiwoZnVuY3Rpb24odCl7IWZ1bmN0aW9uIHNldHVwRG9jKGUpe2Z1bmN0aW9uIG9uU3VjY2VzcyhlKXtlbnN1cmVOb3RUZXJtaW5hdGVkKCk7Qy5zZW5kKCJHZXREb2MiLHtwZGZJbmZvOmV9KX1mdW5jdGlvbiBvbkZhaWx1cmUoZSl7ZW5zdXJlTm90VGVybWluYXRlZCgpO2lmKGUgaW5zdGFuY2VvZiByLlBhc3N3b3JkRXhjZXB0aW9uKXtjb25zdCB0PW5ldyBXb3JrZXJUYXNrKGBQYXNzd29yZEV4Y2VwdGlvbjogcmVzcG9uc2UgJHtlLmNvZGV9YCk7c3RhcnRXb3JrZXJUYXNrKHQpO0Muc2VuZFdpdGhQcm9taXNlKCJQYXNzd29yZFJlcXVlc3QiLGUpLnRoZW4oKGZ1bmN0aW9uKHtwYXNzd29yZDplfSl7ZmluaXNoV29ya2VyVGFzayh0KTthLnVwZGF0ZVBhc3N3b3JkKGUpO3BkZk1hbmFnZXJSZWFkeSgpfSkpLmNhdGNoKChmdW5jdGlvbigpe2ZpbmlzaFdvcmtlclRhc2sodCk7Qy5zZW5kKCJEb2NFeGNlcHRpb24iLGUpfSkpfWVsc2UgZSBpbnN0YW5jZW9mIHIuSW52YWxpZFBERkV4Y2VwdGlvbnx8ZSBpbnN0YW5jZW9mIHIuTWlzc2luZ1BERkV4Y2VwdGlvbnx8ZSBpbnN0YW5jZW9mIHIuVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9ufHxlIGluc3RhbmNlb2Ygci5Vbmtub3duRXJyb3JFeGNlcHRpb24/Qy5zZW5kKCJEb2NFeGNlcHRpb24iLGUpOkMuc2VuZCgiRG9jRXhjZXB0aW9uIixuZXcgci5Vbmtub3duRXJyb3JFeGNlcHRpb24oZS5tZXNzYWdlLGUudG9TdHJpbmcoKSkpfWZ1bmN0aW9uIHBkZk1hbmFnZXJSZWFkeSgpe2Vuc3VyZU5vdFRlcm1pbmF0ZWQoKTtsb2FkRG9jdW1lbnQoITEpLnRoZW4ob25TdWNjZXNzLChmdW5jdGlvbihlKXtlbnN1cmVOb3RUZXJtaW5hdGVkKCk7ZSBpbnN0YW5jZW9mIG4uWFJlZlBhcnNlRXhjZXB0aW9uP2EucmVxdWVzdExvYWRlZFN0cmVhbSgpLnRoZW4oKGZ1bmN0aW9uKCl7ZW5zdXJlTm90VGVybWluYXRlZCgpO2xvYWREb2N1bWVudCghMCkudGhlbihvblN1Y2Nlc3Msb25GYWlsdXJlKX0pKTpvbkZhaWx1cmUoZSl9KSl9ZW5zdXJlTm90VGVybWluYXRlZCgpO2dldFBkZk1hbmFnZXIoZSkudGhlbigoZnVuY3Rpb24oZSl7aWYoZil7ZS50ZXJtaW5hdGUobmV3IHIuQWJvcnRFeGNlcHRpb24oIldvcmtlciB3YXMgdGVybWluYXRlZC4iKSk7dGhyb3cgbmV3IEVycm9yKCJXb3JrZXIgd2FzIHRlcm1pbmF0ZWQiKX1hPWU7YS5yZXF1ZXN0TG9hZGVkU3RyZWFtKCEwKS50aGVuKChlPT57Qy5zZW5kKCJEYXRhTG9hZGVkIix7bGVuZ3RoOmUuYnl0ZXMuYnl0ZUxlbmd0aH0pfSkpfSkpLnRoZW4ocGRmTWFuYWdlclJlYWR5LG9uRmFpbHVyZSl9KGUpO2U9bnVsbH0pKTtyZXR1cm4geH1zdGF0aWMgaW5pdGlhbGl6ZUZyb21Qb3J0KGUpe2NvbnN0IHQ9bmV3IGguTWVzc2FnZUhhbmRsZXIoIndvcmtlciIsIm1haW4iLGUpO1dvcmtlck1lc3NhZ2VIYW5kbGVyLnNldHVwKHQsZSk7dC5zZW5kKCJyZWFkeSIsbnVsbCl9fXQuV29ya2VyTWVzc2FnZUhhbmRsZXI9V29ya2VyTWVzc2FnZUhhbmRsZXI7InVuZGVmaW5lZCI9PXR5cGVvZiB3aW5kb3cmJiFyLmlzTm9kZUpTJiYidW5kZWZpbmVkIiE9dHlwZW9mIHNlbGYmJmZ1bmN0aW9uIGlzTWVzc2FnZVBvcnQoZSl7cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIGUucG9zdE1lc3NhZ2UmJiJvbm1lc3NhZ2UiaW4gZX0oc2VsZikmJldvcmtlck1lc3NhZ2VIYW5kbGVyLmluaXRpYWxpemVGcm9tUG9ydChzZWxmKX0sKGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5WZXJib3NpdHlMZXZlbD10LlV0aWw9dC5Vbmtub3duRXJyb3JFeGNlcHRpb249dC5VbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb249dC5UZXh0UmVuZGVyaW5nTW9kZT10LlJlbmRlcmluZ0ludGVudEZsYWc9dC5Qcm9taXNlQ2FwYWJpbGl0eT10LlBlcm1pc3Npb25GbGFnPXQuUGFzc3dvcmRSZXNwb25zZXM9dC5QYXNzd29yZEV4Y2VwdGlvbj10LlBhZ2VBY3Rpb25FdmVudFR5cGU9dC5PUFM9dC5NaXNzaW5nUERGRXhjZXB0aW9uPXQuTUFYX0lNQUdFX1NJWkVfVE9fQ0FDSEU9dC5MSU5FX0ZBQ1RPUj10LkxJTkVfREVTQ0VOVF9GQUNUT1I9dC5JbnZhbGlkUERGRXhjZXB0aW9uPXQuSW1hZ2VLaW5kPXQuSURFTlRJVFlfTUFUUklYPXQuRm9ybWF0RXJyb3I9dC5GZWF0dXJlVGVzdD10LkZPTlRfSURFTlRJVFlfTUFUUklYPXQuRG9jdW1lbnRBY3Rpb25FdmVudFR5cGU9dC5DTWFwQ29tcHJlc3Npb25UeXBlPXQuQmFzZUV4Y2VwdGlvbj10LkJBU0VMSU5FX0ZBQ1RPUj10LkFubm90YXRpb25UeXBlPXQuQW5ub3RhdGlvblJlcGx5VHlwZT10LkFubm90YXRpb25QcmVmaXg9dC5Bbm5vdGF0aW9uTW9kZT10LkFubm90YXRpb25GbGFnPXQuQW5ub3RhdGlvbkZpZWxkRmxhZz10LkFubm90YXRpb25FZGl0b3JUeXBlPXQuQW5ub3RhdGlvbkVkaXRvclByZWZpeD10LkFubm90YXRpb25FZGl0b3JQYXJhbXNUeXBlPXQuQW5ub3RhdGlvbkJvcmRlclN0eWxlVHlwZT10LkFubm90YXRpb25BY3Rpb25FdmVudFR5cGU9dC5BYm9ydEV4Y2VwdGlvbj12b2lkIDA7dC5hc3NlcnQ9ZnVuY3Rpb24gYXNzZXJ0KGUsdCl7ZXx8dW5yZWFjaGFibGUodCl9O3QuYnl0ZXNUb1N0cmluZz1ieXRlc1RvU3RyaW5nO3QuY3JlYXRlVmFsaWRBYnNvbHV0ZVVybD1mdW5jdGlvbiBjcmVhdGVWYWxpZEFic29sdXRlVXJsKGUsdD1udWxsLGE9bnVsbCl7aWYoIWUpcmV0dXJuIG51bGw7dHJ5e2lmKGEmJiJzdHJpbmciPT10eXBlb2YgZSl7aWYoYS5hZGREZWZhdWx0UHJvdG9jb2wmJmUuc3RhcnRzV2l0aCgid3d3LiIpKXtjb25zdCB0PWUubWF0Y2goL1wuL2cpO3Q/Lmxlbmd0aD49MiYmKGU9YGh0dHA6Ly8ke2V9YCl9aWYoYS50cnlDb252ZXJ0RW5jb2RpbmcpdHJ5e2U9c3RyaW5nVG9VVEY4U3RyaW5nKGUpfWNhdGNoe319Y29uc3Qgcj10P25ldyBVUkwoZSx0KTpuZXcgVVJMKGUpO2lmKGZ1bmN0aW9uIF9pc1ZhbGlkUHJvdG9jb2woZSl7c3dpdGNoKGU/LnByb3RvY29sKXtjYXNlImh0dHA6IjpjYXNlImh0dHBzOiI6Y2FzZSJmdHA6IjpjYXNlIm1haWx0bzoiOmNhc2UidGVsOiI6cmV0dXJuITA7ZGVmYXVsdDpyZXR1cm4hMX19KHIpKXJldHVybiByfWNhdGNoe31yZXR1cm4gbnVsbH07dC5nZXRNb2RpZmljYXRpb25EYXRlPWZ1bmN0aW9uIGdldE1vZGlmaWNhdGlvbkRhdGUoZT1uZXcgRGF0ZSl7cmV0dXJuW2UuZ2V0VVRDRnVsbFllYXIoKS50b1N0cmluZygpLChlLmdldFVUQ01vbnRoKCkrMSkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCIwIiksZS5nZXRVVENEYXRlKCkudG9TdHJpbmcoKS5wYWRTdGFydCgyLCIwIiksZS5nZXRVVENIb3VycygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwiMCIpLGUuZ2V0VVRDTWludXRlcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwiMCIpLGUuZ2V0VVRDU2Vjb25kcygpLnRvU3RyaW5nKCkucGFkU3RhcnQoMiwiMCIpXS5qb2luKCIiKX07dC5nZXRVdWlkPWZ1bmN0aW9uIGdldFV1aWQoKXtpZigidW5kZWZpbmVkIiE9dHlwZW9mIGNyeXB0byYmImZ1bmN0aW9uIj09dHlwZW9mIGNyeXB0bz8ucmFuZG9tVVVJRClyZXR1cm4gY3J5cHRvLnJhbmRvbVVVSUQoKTtjb25zdCBlPW5ldyBVaW50OEFycmF5KDMyKTtpZigidW5kZWZpbmVkIiE9dHlwZW9mIGNyeXB0byYmImZ1bmN0aW9uIj09dHlwZW9mIGNyeXB0bz8uZ2V0UmFuZG9tVmFsdWVzKWNyeXB0by5nZXRSYW5kb21WYWx1ZXMoZSk7ZWxzZSBmb3IobGV0IHQ9MDt0PDMyO3QrKyllW3RdPU1hdGguZmxvb3IoMjU1Kk1hdGgucmFuZG9tKCkpO3JldHVybiBieXRlc1RvU3RyaW5nKGUpfTt0LmdldFZlcmJvc2l0eUxldmVsPWZ1bmN0aW9uIGdldFZlcmJvc2l0eUxldmVsKCl7cmV0dXJuIG59O3QuaW5mbz1mdW5jdGlvbiBpbmZvKGUpe24+PXIuSU5GT1MmJmNvbnNvbGUubG9nKGBJbmZvOiAke2V9YCl9O3QuaXNBcnJheUJ1ZmZlcj1mdW5jdGlvbiBpc0FycmF5QnVmZmVyKGUpe3JldHVybiJvYmplY3QiPT10eXBlb2YgZSYmdm9pZCAwIT09ZT8uYnl0ZUxlbmd0aH07dC5pc0FycmF5RXF1YWw9ZnVuY3Rpb24gaXNBcnJheUVxdWFsKGUsdCl7aWYoZS5sZW5ndGghPT10Lmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IGE9MCxyPWUubGVuZ3RoO2E8cjthKyspaWYoZVthXSE9PXRbYV0pcmV0dXJuITE7cmV0dXJuITB9O3QuaXNOb2RlSlM9dm9pZCAwO3Qubm9ybWFsaXplVW5pY29kZT1mdW5jdGlvbiBub3JtYWxpemVVbmljb2RlKGUpe2lmKCFjKXtjPS8oW1x1MDBhMFx1MDBiNVx1MDM3ZVx1MGViM1x1MjAwMC1cdTIwMGFcdTIwMmZcdTIxMjZcdWZiMDAtXHVmYjA0XHVmYjA2XHVmYjIwLVx1ZmIzNlx1ZmIzOC1cdWZiM2NcdWZiM2VcdWZiNDAtXHVmYjQxXHVmYjQzLVx1ZmI0NFx1ZmI0Ni1cdWZiYTFcdWZiYTQtXHVmYmE5XHVmYmFlLVx1ZmJiMVx1ZmJkMy1cdWZiZGNcdWZiZGUtXHVmYmU3XHVmYmVhLVx1ZmJmOFx1ZmJmYy1cdWZiZmRcdWZjMDAtXHVmYzVkXHVmYzY0LVx1ZmNmMVx1ZmNmNS1cdWZkM2RcdWZkODhcdWZkZjRcdWZkZmEtXHVmZGZiXHVmZTcxXHVmZTc3XHVmZTc5XHVmZTdiXHVmZTdkXSspfChcdWZiMDUrKS9ndTtsPW5ldyBNYXAoW1si76yFIiwixb90Il1dKX1yZXR1cm4gZS5yZXBsYWNlQWxsKGMsKChlLHQsYSk9PnQ/dC5ub3JtYWxpemUoIk5GS0MiKTpsLmdldChhKSkpfTt0Lm9iamVjdEZyb21NYXA9ZnVuY3Rpb24gb2JqZWN0RnJvbU1hcChlKXtjb25zdCB0PU9iamVjdC5jcmVhdGUobnVsbCk7Zm9yKGNvbnN0W2Escl1vZiBlKXRbYV09cjtyZXR1cm4gdH07dC5vYmplY3RTaXplPWZ1bmN0aW9uIG9iamVjdFNpemUoZSl7cmV0dXJuIE9iamVjdC5rZXlzKGUpLmxlbmd0aH07dC5zZXRWZXJib3NpdHlMZXZlbD1mdW5jdGlvbiBzZXRWZXJib3NpdHlMZXZlbChlKXtOdW1iZXIuaXNJbnRlZ2VyKGUpJiYobj1lKX07dC5zaGFkb3c9c2hhZG93O3Quc3RyaW5nMzI9ZnVuY3Rpb24gc3RyaW5nMzIoZSl7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZT4+MjQmMjU1LGU+PjE2JjI1NSxlPj44JjI1NSwyNTUmZSl9O3Quc3RyaW5nVG9CeXRlcz1zdHJpbmdUb0J5dGVzO3Quc3RyaW5nVG9QREZTdHJpbmc9ZnVuY3Rpb24gc3RyaW5nVG9QREZTdHJpbmcoZSl7aWYoZVswXT49IsOvIil7bGV0IHQ7IsO+Ij09PWVbMF0mJiLDvyI9PT1lWzFdP3Q9InV0Zi0xNmJlIjoiw78iPT09ZVswXSYmIsO+Ij09PWVbMV0/dD0idXRmLTE2bGUiOiLDryI9PT1lWzBdJiYiwrsiPT09ZVsxXSYmIsK/Ij09PWVbMl0mJih0PSJ1dGYtOCIpO2lmKHQpdHJ5e2NvbnN0IGE9bmV3IFRleHREZWNvZGVyKHQse2ZhdGFsOiEwfSkscj1zdHJpbmdUb0J5dGVzKGUpO3JldHVybiBhLmRlY29kZShyKX1jYXRjaChlKXt3YXJuKGBzdHJpbmdUb1BERlN0cmluZzogIiR7ZX0iLmApfX1jb25zdCB0PVtdO2ZvcihsZXQgYT0wLHI9ZS5sZW5ndGg7YTxyO2ErKyl7Y29uc3Qgcj1vW2UuY2hhckNvZGVBdChhKV07dC5wdXNoKHI/U3RyaW5nLmZyb21DaGFyQ29kZShyKTplLmNoYXJBdChhKSl9cmV0dXJuIHQuam9pbigiIil9O3Quc3RyaW5nVG9VVEY4U3RyaW5nPXN0cmluZ1RvVVRGOFN0cmluZzt0LnVucmVhY2hhYmxlPXVucmVhY2hhYmxlO3QudXRmOFN0cmluZ1RvU3RyaW5nPWZ1bmN0aW9uIHV0ZjhTdHJpbmdUb1N0cmluZyhlKXtyZXR1cm4gdW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KGUpKX07dC53YXJuPXdhcm47Y29uc3QgYT0hKCJvYmplY3QiIT10eXBlb2YgcHJvY2Vzc3x8cHJvY2VzcysiIiE9IltvYmplY3QgcHJvY2Vzc10ifHxwcm9jZXNzLnZlcnNpb25zLm53fHxwcm9jZXNzLnZlcnNpb25zLmVsZWN0cm9uJiZwcm9jZXNzLnR5cGUmJiJicm93c2VyIiE9PXByb2Nlc3MudHlwZSk7dC5pc05vZGVKUz1hO3QuSURFTlRJVFlfTUFUUklYPVsxLDAsMCwxLDAsMF07dC5GT05UX0lERU5USVRZX01BVFJJWD1bLjAwMSwwLDAsLjAwMSwwLDBdO3QuTUFYX0lNQUdFX1NJWkVfVE9fQ0FDSEU9MWU3O3QuTElORV9GQUNUT1I9MS4zNTt0LkxJTkVfREVTQ0VOVF9GQUNUT1I9LjM1O3QuQkFTRUxJTkVfRkFDVE9SPS4yNTkyNTkyNTkyNTkyNTkyNDt0LlJlbmRlcmluZ0ludGVudEZsYWc9e0FOWToxLERJU1BMQVk6MixQUklOVDo0LFNBVkU6OCxBTk5PVEFUSU9OU19GT1JNUzoxNixBTk5PVEFUSU9OU19TVE9SQUdFOjMyLEFOTk9UQVRJT05TX0RJU0FCTEU6NjQsT1BMSVNUOjI1Nn07dC5Bbm5vdGF0aW9uTW9kZT17RElTQUJMRTowLEVOQUJMRToxLEVOQUJMRV9GT1JNUzoyLEVOQUJMRV9TVE9SQUdFOjN9O3QuQW5ub3RhdGlvbkVkaXRvclByZWZpeD0icGRmanNfaW50ZXJuYWxfZWRpdG9yXyI7dC5Bbm5vdGF0aW9uRWRpdG9yVHlwZT17RElTQUJMRTotMSxOT05FOjAsRlJFRVRFWFQ6MyxTVEFNUDoxMyxJTks6MTV9O3QuQW5ub3RhdGlvbkVkaXRvclBhcmFtc1R5cGU9e1JFU0laRToxLENSRUFURToyLEZSRUVURVhUX1NJWkU6MTEsRlJFRVRFWFRfQ09MT1I6MTIsRlJFRVRFWFRfT1BBQ0lUWToxMyxJTktfQ09MT1I6MjEsSU5LX1RISUNLTkVTUzoyMixJTktfT1BBQ0lUWToyM307dC5QZXJtaXNzaW9uRmxhZz17UFJJTlQ6NCxNT0RJRllfQ09OVEVOVFM6OCxDT1BZOjE2LE1PRElGWV9BTk5PVEFUSU9OUzozMixGSUxMX0lOVEVSQUNUSVZFX0ZPUk1TOjI1NixDT1BZX0ZPUl9BQ0NFU1NJQklMSVRZOjUxMixBU1NFTUJMRToxMDI0LFBSSU5UX0hJR0hfUVVBTElUWToyMDQ4fTt0LlRleHRSZW5kZXJpbmdNb2RlPXtGSUxMOjAsU1RST0tFOjEsRklMTF9TVFJPS0U6MixJTlZJU0lCTEU6MyxGSUxMX0FERF9UT19QQVRIOjQsU1RST0tFX0FERF9UT19QQVRIOjUsRklMTF9TVFJPS0VfQUREX1RPX1BBVEg6NixBRERfVE9fUEFUSDo3LEZJTExfU1RST0tFX01BU0s6MyxBRERfVE9fUEFUSF9GTEFHOjR9O3QuSW1hZ2VLaW5kPXtHUkFZU0NBTEVfMUJQUDoxLFJHQl8yNEJQUDoyLFJHQkFfMzJCUFA6M307dC5Bbm5vdGF0aW9uVHlwZT17VEVYVDoxLExJTks6MixGUkVFVEVYVDozLExJTkU6NCxTUVVBUkU6NSxDSVJDTEU6NixQT0xZR09OOjcsUE9MWUxJTkU6OCxISUdITElHSFQ6OSxVTkRFUkxJTkU6MTAsU1FVSUdHTFk6MTEsU1RSSUtFT1VUOjEyLFNUQU1QOjEzLENBUkVUOjE0LElOSzoxNSxQT1BVUDoxNixGSUxFQVRUQUNITUVOVDoxNyxTT1VORDoxOCxNT1ZJRToxOSxXSURHRVQ6MjAsU0NSRUVOOjIxLFBSSU5URVJNQVJLOjIyLFRSQVBORVQ6MjMsV0FURVJNQVJLOjI0LFRIUkVFRDoyNSxSRURBQ1Q6MjZ9O3QuQW5ub3RhdGlvblJlcGx5VHlwZT17R1JPVVA6Ikdyb3VwIixSRVBMWToiUiJ9O3QuQW5ub3RhdGlvbkZsYWc9e0lOVklTSUJMRToxLEhJRERFTjoyLFBSSU5UOjQsTk9aT09NOjgsTk9ST1RBVEU6MTYsTk9WSUVXOjMyLFJFQURPTkxZOjY0LExPQ0tFRDoxMjgsVE9HR0xFTk9WSUVXOjI1NixMT0NLRURDT05URU5UUzo1MTJ9O3QuQW5ub3RhdGlvbkZpZWxkRmxhZz17UkVBRE9OTFk6MSxSRVFVSVJFRDoyLE5PRVhQT1JUOjQsTVVMVElMSU5FOjQwOTYsUEFTU1dPUkQ6ODE5MixOT1RPR0dMRVRPT0ZGOjE2Mzg0LFJBRElPOjMyNzY4LFBVU0hCVVRUT046NjU1MzYsQ09NQk86MTMxMDcyLEVESVQ6MjYyMTQ0LFNPUlQ6NTI0Mjg4LEZJTEVTRUxFQ1Q6MTA0ODU3NixNVUxUSVNFTEVDVDoyMDk3MTUyLERPTk9UU1BFTExDSEVDSzo0MTk0MzA0LERPTk9UU0NST0xMOjgzODg2MDgsQ09NQjoxNjc3NzIxNixSSUNIVEVYVDozMzU1NDQzMixSQURJT1NJTlVOSVNPTjozMzU1NDQzMixDT01NSVRPTlNFTENIQU5HRTo2NzEwODg2NH07dC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlPXtTT0xJRDoxLERBU0hFRDoyLEJFVkVMRUQ6MyxJTlNFVDo0LFVOREVSTElORTo1fTt0LkFubm90YXRpb25BY3Rpb25FdmVudFR5cGU9e0U6Ik1vdXNlIEVudGVyIixYOiJNb3VzZSBFeGl0IixEOiJNb3VzZSBEb3duIixVOiJNb3VzZSBVcCIsRm86IkZvY3VzIixCbDoiQmx1ciIsUE86IlBhZ2VPcGVuIixQQzoiUGFnZUNsb3NlIixQVjoiUGFnZVZpc2libGUiLFBJOiJQYWdlSW52aXNpYmxlIixLOiJLZXlzdHJva2UiLEY6IkZvcm1hdCIsVjoiVmFsaWRhdGUiLEM6IkNhbGN1bGF0ZSJ9O3QuRG9jdW1lbnRBY3Rpb25FdmVudFR5cGU9e1dDOiJXaWxsQ2xvc2UiLFdTOiJXaWxsU2F2ZSIsRFM6IkRpZFNhdmUiLFdQOiJXaWxsUHJpbnQiLERQOiJEaWRQcmludCJ9O3QuUGFnZUFjdGlvbkV2ZW50VHlwZT17TzoiUGFnZU9wZW4iLEM6IlBhZ2VDbG9zZSJ9O2NvbnN0IHI9e0VSUk9SUzowLFdBUk5JTkdTOjEsSU5GT1M6NX07dC5WZXJib3NpdHlMZXZlbD1yO3QuQ01hcENvbXByZXNzaW9uVHlwZT17Tk9ORTowLEJJTkFSWToxfTt0Lk9QUz17ZGVwZW5kZW5jeToxLHNldExpbmVXaWR0aDoyLHNldExpbmVDYXA6MyxzZXRMaW5lSm9pbjo0LHNldE1pdGVyTGltaXQ6NSxzZXREYXNoOjYsc2V0UmVuZGVyaW5nSW50ZW50Ojcsc2V0RmxhdG5lc3M6OCxzZXRHU3RhdGU6OSxzYXZlOjEwLHJlc3RvcmU6MTEsdHJhbnNmb3JtOjEyLG1vdmVUbzoxMyxsaW5lVG86MTQsY3VydmVUbzoxNSxjdXJ2ZVRvMjoxNixjdXJ2ZVRvMzoxNyxjbG9zZVBhdGg6MTgscmVjdGFuZ2xlOjE5LHN0cm9rZToyMCxjbG9zZVN0cm9rZToyMSxmaWxsOjIyLGVvRmlsbDoyMyxmaWxsU3Ryb2tlOjI0LGVvRmlsbFN0cm9rZToyNSxjbG9zZUZpbGxTdHJva2U6MjYsY2xvc2VFT0ZpbGxTdHJva2U6MjcsZW5kUGF0aDoyOCxjbGlwOjI5LGVvQ2xpcDozMCxiZWdpblRleHQ6MzEsZW5kVGV4dDozMixzZXRDaGFyU3BhY2luZzozMyxzZXRXb3JkU3BhY2luZzozNCxzZXRIU2NhbGU6MzUsc2V0TGVhZGluZzozNixzZXRGb250OjM3LHNldFRleHRSZW5kZXJpbmdNb2RlOjM4LHNldFRleHRSaXNlOjM5LG1vdmVUZXh0OjQwLHNldExlYWRpbmdNb3ZlVGV4dDo0MSxzZXRUZXh0TWF0cml4OjQyLG5leHRMaW5lOjQzLHNob3dUZXh0OjQ0LHNob3dTcGFjZWRUZXh0OjQ1LG5leHRMaW5lU2hvd1RleHQ6NDYsbmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6NDcsc2V0Q2hhcldpZHRoOjQ4LHNldENoYXJXaWR0aEFuZEJvdW5kczo0OSxzZXRTdHJva2VDb2xvclNwYWNlOjUwLHNldEZpbGxDb2xvclNwYWNlOjUxLHNldFN0cm9rZUNvbG9yOjUyLHNldFN0cm9rZUNvbG9yTjo1MyxzZXRGaWxsQ29sb3I6NTQsc2V0RmlsbENvbG9yTjo1NSxzZXRTdHJva2VHcmF5OjU2LHNldEZpbGxHcmF5OjU3LHNldFN0cm9rZVJHQkNvbG9yOjU4LHNldEZpbGxSR0JDb2xvcjo1OSxzZXRTdHJva2VDTVlLQ29sb3I6NjAsc2V0RmlsbENNWUtDb2xvcjo2MSxzaGFkaW5nRmlsbDo2MixiZWdpbklubGluZUltYWdlOjYzLGJlZ2luSW1hZ2VEYXRhOjY0LGVuZElubGluZUltYWdlOjY1LHBhaW50WE9iamVjdDo2NixtYXJrUG9pbnQ6NjcsbWFya1BvaW50UHJvcHM6NjgsYmVnaW5NYXJrZWRDb250ZW50OjY5LGJlZ2luTWFya2VkQ29udGVudFByb3BzOjcwLGVuZE1hcmtlZENvbnRlbnQ6NzEsYmVnaW5Db21wYXQ6NzIsZW5kQ29tcGF0OjczLHBhaW50Rm9ybVhPYmplY3RCZWdpbjo3NCxwYWludEZvcm1YT2JqZWN0RW5kOjc1LGJlZ2luR3JvdXA6NzYsZW5kR3JvdXA6NzcsYmVnaW5Bbm5vdGF0aW9uOjgwLGVuZEFubm90YXRpb246ODEscGFpbnRJbWFnZU1hc2tYT2JqZWN0OjgzLHBhaW50SW1hZ2VNYXNrWE9iamVjdEdyb3VwOjg0LHBhaW50SW1hZ2VYT2JqZWN0Ojg1LHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0Ojg2LHBhaW50SW5saW5lSW1hZ2VYT2JqZWN0R3JvdXA6ODcscGFpbnRJbWFnZVhPYmplY3RSZXBlYXQ6ODgscGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0Ojg5LHBhaW50U29saWRDb2xvckltYWdlTWFzazo5MCxjb25zdHJ1Y3RQYXRoOjkxfTt0LlBhc3N3b3JkUmVzcG9uc2VzPXtORUVEX1BBU1NXT1JEOjEsSU5DT1JSRUNUX1BBU1NXT1JEOjJ9O2xldCBuPXIuV0FSTklOR1M7ZnVuY3Rpb24gd2FybihlKXtuPj1yLldBUk5JTkdTJiZjb25zb2xlLmxvZyhgV2FybmluZzogJHtlfWApfWZ1bmN0aW9uIHVucmVhY2hhYmxlKGUpe3Rocm93IG5ldyBFcnJvcihlKX1mdW5jdGlvbiBzaGFkb3coZSx0LGEscj0hMSl7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsdCx7dmFsdWU6YSxlbnVtZXJhYmxlOiFyLGNvbmZpZ3VyYWJsZTohMCx3cml0YWJsZTohMX0pO3JldHVybiBhfWNvbnN0IGk9ZnVuY3Rpb24gQmFzZUV4Y2VwdGlvbkNsb3N1cmUoKXtmdW5jdGlvbiBCYXNlRXhjZXB0aW9uKGUsdCl7dGhpcy5jb25zdHJ1Y3Rvcj09PUJhc2VFeGNlcHRpb24mJnVucmVhY2hhYmxlKCJDYW5ub3QgaW5pdGlhbGl6ZSBCYXNlRXhjZXB0aW9uLiIpO3RoaXMubWVzc2FnZT1lO3RoaXMubmFtZT10fUJhc2VFeGNlcHRpb24ucHJvdG90eXBlPW5ldyBFcnJvcjtCYXNlRXhjZXB0aW9uLmNvbnN0cnVjdG9yPUJhc2VFeGNlcHRpb247cmV0dXJuIEJhc2VFeGNlcHRpb259KCk7dC5CYXNlRXhjZXB0aW9uPWk7dC5QYXNzd29yZEV4Y2VwdGlvbj1jbGFzcyBQYXNzd29yZEV4Y2VwdGlvbiBleHRlbmRzIGl7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlLCJQYXNzd29yZEV4Y2VwdGlvbiIpO3RoaXMuY29kZT10fX07dC5Vbmtub3duRXJyb3JFeGNlcHRpb249Y2xhc3MgVW5rbm93bkVycm9yRXhjZXB0aW9uIGV4dGVuZHMgaXtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKGUsIlVua25vd25FcnJvckV4Y2VwdGlvbiIpO3RoaXMuZGV0YWlscz10fX07dC5JbnZhbGlkUERGRXhjZXB0aW9uPWNsYXNzIEludmFsaWRQREZFeGNlcHRpb24gZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsIkludmFsaWRQREZFeGNlcHRpb24iKX19O3QuTWlzc2luZ1BERkV4Y2VwdGlvbj1jbGFzcyBNaXNzaW5nUERGRXhjZXB0aW9uIGV4dGVuZHMgaXtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJNaXNzaW5nUERGRXhjZXB0aW9uIil9fTt0LlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbj1jbGFzcyBVbmV4cGVjdGVkUmVzcG9uc2VFeGNlcHRpb24gZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSwiVW5leHBlY3RlZFJlc3BvbnNlRXhjZXB0aW9uIik7dGhpcy5zdGF0dXM9dH19O3QuRm9ybWF0RXJyb3I9Y2xhc3MgRm9ybWF0RXJyb3IgZXh0ZW5kcyBpe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsIkZvcm1hdEVycm9yIil9fTt0LkFib3J0RXhjZXB0aW9uPWNsYXNzIEFib3J0RXhjZXB0aW9uIGV4dGVuZHMgaXtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJBYm9ydEV4Y2VwdGlvbiIpfX07ZnVuY3Rpb24gYnl0ZXNUb1N0cmluZyhlKXsib2JqZWN0Ij09dHlwZW9mIGUmJnZvaWQgMCE9PWU/Lmxlbmd0aHx8dW5yZWFjaGFibGUoIkludmFsaWQgYXJndW1lbnQgZm9yIGJ5dGVzVG9TdHJpbmciKTtjb25zdCB0PWUubGVuZ3RoLGE9ODE5MjtpZih0PGEpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUuYXBwbHkobnVsbCxlKTtjb25zdCByPVtdO2ZvcihsZXQgbj0wO248dDtuKz1hKXtjb25zdCBpPU1hdGgubWluKG4rYSx0KSxzPWUuc3ViYXJyYXkobixpKTtyLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHMpKX1yZXR1cm4gci5qb2luKCIiKX1mdW5jdGlvbiBzdHJpbmdUb0J5dGVzKGUpeyJzdHJpbmciIT10eXBlb2YgZSYmdW5yZWFjaGFibGUoIkludmFsaWQgYXJndW1lbnQgZm9yIHN0cmluZ1RvQnl0ZXMiKTtjb25zdCB0PWUubGVuZ3RoLGE9bmV3IFVpbnQ4QXJyYXkodCk7Zm9yKGxldCByPTA7cjx0OysrcilhW3JdPTI1NSZlLmNoYXJDb2RlQXQocik7cmV0dXJuIGF9dC5GZWF0dXJlVGVzdD1jbGFzcyBGZWF0dXJlVGVzdHtzdGF0aWMgZ2V0IGlzTGl0dGxlRW5kaWFuKCl7cmV0dXJuIHNoYWRvdyh0aGlzLCJpc0xpdHRsZUVuZGlhbiIsZnVuY3Rpb24gaXNMaXR0bGVFbmRpYW4oKXtjb25zdCBlPW5ldyBVaW50OEFycmF5KDQpO2VbMF09MTtyZXR1cm4gMT09PW5ldyBVaW50MzJBcnJheShlLmJ1ZmZlciwwLDEpWzBdfSgpKX1zdGF0aWMgZ2V0IGlzRXZhbFN1cHBvcnRlZCgpe3JldHVybiBzaGFkb3codGhpcywiaXNFdmFsU3VwcG9ydGVkIixmdW5jdGlvbiBpc0V2YWxTdXBwb3J0ZWQoKXt0cnl7bmV3IEZ1bmN0aW9uKCIiKTtyZXR1cm4hMH1jYXRjaHtyZXR1cm4hMX19KCkpfXN0YXRpYyBnZXQgaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQoKXtyZXR1cm4gc2hhZG93KHRoaXMsImlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkIiwidW5kZWZpbmVkIiE9dHlwZW9mIE9mZnNjcmVlbkNhbnZhcyl9c3RhdGljIGdldCBwbGF0Zm9ybSgpe3JldHVybiJ1bmRlZmluZWQiPT10eXBlb2YgbmF2aWdhdG9yP3NoYWRvdyh0aGlzLCJwbGF0Zm9ybSIse2lzV2luOiExLGlzTWFjOiExfSk6c2hhZG93KHRoaXMsInBsYXRmb3JtIix7aXNXaW46bmF2aWdhdG9yLnBsYXRmb3JtLmluY2x1ZGVzKCJXaW4iKSxpc01hYzpuYXZpZ2F0b3IucGxhdGZvcm0uaW5jbHVkZXMoIk1hYyIpfSl9c3RhdGljIGdldCBpc0NTU1JvdW5kU3VwcG9ydGVkKCl7cmV0dXJuIHNoYWRvdyh0aGlzLCJpc0NTU1JvdW5kU3VwcG9ydGVkIixnbG9iYWxUaGlzLkNTUz8uc3VwcG9ydHM/Ligid2lkdGg6IHJvdW5kKDEuNXB4LCAxcHgpIikpfX07Y29uc3Qgcz1bLi4uQXJyYXkoMjU2KS5rZXlzKCldLm1hcCgoZT0+ZS50b1N0cmluZygxNikucGFkU3RhcnQoMiwiMCIpKSk7dC5VdGlsPWNsYXNzIFV0aWx7c3RhdGljIG1ha2VIZXhDb2xvcihlLHQsYSl7cmV0dXJuYCMke3NbZV19JHtzW3RdfSR7c1thXX1gfXN0YXRpYyBzY2FsZU1pbk1heChlLHQpe2xldCBhO2lmKGVbMF0pe2lmKGVbMF08MCl7YT10WzBdO3RbMF09dFsxXTt0WzFdPWF9dFswXSo9ZVswXTt0WzFdKj1lWzBdO2lmKGVbM108MCl7YT10WzJdO3RbMl09dFszXTt0WzNdPWF9dFsyXSo9ZVszXTt0WzNdKj1lWzNdfWVsc2V7YT10WzBdO3RbMF09dFsyXTt0WzJdPWE7YT10WzFdO3RbMV09dFszXTt0WzNdPWE7aWYoZVsxXTwwKXthPXRbMl07dFsyXT10WzNdO3RbM109YX10WzJdKj1lWzFdO3RbM10qPWVbMV07aWYoZVsyXTwwKXthPXRbMF07dFswXT10WzFdO3RbMV09YX10WzBdKj1lWzJdO3RbMV0qPWVbMl19dFswXSs9ZVs0XTt0WzFdKz1lWzRdO3RbMl0rPWVbNV07dFszXSs9ZVs1XX1zdGF0aWMgdHJhbnNmb3JtKGUsdCl7cmV0dXJuW2VbMF0qdFswXStlWzJdKnRbMV0sZVsxXSp0WzBdK2VbM10qdFsxXSxlWzBdKnRbMl0rZVsyXSp0WzNdLGVbMV0qdFsyXStlWzNdKnRbM10sZVswXSp0WzRdK2VbMl0qdFs1XStlWzRdLGVbMV0qdFs0XStlWzNdKnRbNV0rZVs1XV19c3RhdGljIGFwcGx5VHJhbnNmb3JtKGUsdCl7cmV0dXJuW2VbMF0qdFswXStlWzFdKnRbMl0rdFs0XSxlWzBdKnRbMV0rZVsxXSp0WzNdK3RbNV1dfXN0YXRpYyBhcHBseUludmVyc2VUcmFuc2Zvcm0oZSx0KXtjb25zdCBhPXRbMF0qdFszXS10WzFdKnRbMl07cmV0dXJuWyhlWzBdKnRbM10tZVsxXSp0WzJdK3RbMl0qdFs1XS10WzRdKnRbM10pL2EsKC1lWzBdKnRbMV0rZVsxXSp0WzBdK3RbNF0qdFsxXS10WzVdKnRbMF0pL2FdfXN0YXRpYyBnZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveChlLHQpe2NvbnN0IGE9dGhpcy5hcHBseVRyYW5zZm9ybShlLHQpLHI9dGhpcy5hcHBseVRyYW5zZm9ybShlLnNsaWNlKDIsNCksdCksbj10aGlzLmFwcGx5VHJhbnNmb3JtKFtlWzBdLGVbM11dLHQpLGk9dGhpcy5hcHBseVRyYW5zZm9ybShbZVsyXSxlWzFdXSx0KTtyZXR1cm5bTWF0aC5taW4oYVswXSxyWzBdLG5bMF0saVswXSksTWF0aC5taW4oYVsxXSxyWzFdLG5bMV0saVsxXSksTWF0aC5tYXgoYVswXSxyWzBdLG5bMF0saVswXSksTWF0aC5tYXgoYVsxXSxyWzFdLG5bMV0saVsxXSldfXN0YXRpYyBpbnZlcnNlVHJhbnNmb3JtKGUpe2NvbnN0IHQ9ZVswXSplWzNdLWVbMV0qZVsyXTtyZXR1cm5bZVszXS90LC1lWzFdL3QsLWVbMl0vdCxlWzBdL3QsKGVbMl0qZVs1XS1lWzRdKmVbM10pL3QsKGVbNF0qZVsxXS1lWzVdKmVbMF0pL3RdfXN0YXRpYyBzaW5ndWxhclZhbHVlRGVjb21wb3NlMmRTY2FsZShlKXtjb25zdCB0PVtlWzBdLGVbMl0sZVsxXSxlWzNdXSxhPWVbMF0qdFswXStlWzFdKnRbMl0scj1lWzBdKnRbMV0rZVsxXSp0WzNdLG49ZVsyXSp0WzBdK2VbM10qdFsyXSxpPWVbMl0qdFsxXStlWzNdKnRbM10scz0oYStpKS8yLG89TWF0aC5zcXJ0KChhK2kpKioyLTQqKGEqaS1uKnIpKS8yLGM9cytvfHwxLGw9cy1vfHwxO3JldHVybltNYXRoLnNxcnQoYyksTWF0aC5zcXJ0KGwpXX1zdGF0aWMgbm9ybWFsaXplUmVjdChlKXtjb25zdCB0PWUuc2xpY2UoMCk7aWYoZVswXT5lWzJdKXt0WzBdPWVbMl07dFsyXT1lWzBdfWlmKGVbMV0+ZVszXSl7dFsxXT1lWzNdO3RbM109ZVsxXX1yZXR1cm4gdH1zdGF0aWMgaW50ZXJzZWN0KGUsdCl7Y29uc3QgYT1NYXRoLm1heChNYXRoLm1pbihlWzBdLGVbMl0pLE1hdGgubWluKHRbMF0sdFsyXSkpLHI9TWF0aC5taW4oTWF0aC5tYXgoZVswXSxlWzJdKSxNYXRoLm1heCh0WzBdLHRbMl0pKTtpZihhPnIpcmV0dXJuIG51bGw7Y29uc3Qgbj1NYXRoLm1heChNYXRoLm1pbihlWzFdLGVbM10pLE1hdGgubWluKHRbMV0sdFszXSkpLGk9TWF0aC5taW4oTWF0aC5tYXgoZVsxXSxlWzNdKSxNYXRoLm1heCh0WzFdLHRbM10pKTtyZXR1cm4gbj5pP251bGw6W2EsbixyLGldfXN0YXRpYyBiZXppZXJCb3VuZGluZ0JveChlLHQsYSxyLG4saSxzLG8pe2NvbnN0IGM9W10sbD1bW10sW11dO2xldCBoLHUsZCxmLGcscCxtLGI7Zm9yKGxldCBsPTA7bDwyOysrbCl7aWYoMD09PWwpe3U9NiplLTEyKmErNipuO2g9LTMqZSs5KmEtOSpuKzMqcztkPTMqYS0zKmV9ZWxzZXt1PTYqdC0xMipyKzYqaTtoPS0zKnQrOSpyLTkqaSszKm87ZD0zKnItMyp0fWlmKE1hdGguYWJzKGgpPDFlLTEyKXtpZihNYXRoLmFicyh1KTwxZS0xMiljb250aW51ZTtmPS1kL3U7MDxmJiZmPDEmJmMucHVzaChmKX1lbHNle209dSp1LTQqZCpoO2I9TWF0aC5zcXJ0KG0pO2lmKCEobTwwKSl7Zz0oLXUrYikvKDIqaCk7MDxnJiZnPDEmJmMucHVzaChnKTtwPSgtdS1iKS8oMipoKTswPHAmJnA8MSYmYy5wdXNoKHApfX19bGV0IHksdz1jLmxlbmd0aDtjb25zdCBTPXc7Zm9yKDt3LS07KXtmPWNbd107eT0xLWY7bFswXVt3XT15KnkqeSplKzMqeSp5KmYqYSszKnkqZipmKm4rZipmKmYqcztsWzFdW3ddPXkqeSp5KnQrMyp5KnkqZipyKzMqeSpmKmYqaStmKmYqZipvfWxbMF1bU109ZTtsWzFdW1NdPXQ7bFswXVtTKzFdPXM7bFsxXVtTKzFdPW87bFswXS5sZW5ndGg9bFsxXS5sZW5ndGg9UysyO3JldHVybltNYXRoLm1pbiguLi5sWzBdKSxNYXRoLm1pbiguLi5sWzFdKSxNYXRoLm1heCguLi5sWzBdKSxNYXRoLm1heCguLi5sWzFdKV19fTtjb25zdCBvPVswLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCw3MjgsNzExLDcxMCw3MjksNzMzLDczMSw3MzAsNzMyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDgyMjYsODIyNCw4MjI1LDgyMzAsODIxMiw4MjExLDQwMiw4MjYwLDgyNDksODI1MCw4NzIyLDgyNDAsODIyMiw4MjIwLDgyMjEsODIxNiw4MjE3LDgyMTgsODQ4Miw2NDI1Nyw2NDI1OCwzMjEsMzM4LDM1MiwzNzYsMzgxLDMwNSwzMjIsMzM5LDM1MywzODIsMCw4MzY0XTtmdW5jdGlvbiBzdHJpbmdUb1VURjhTdHJpbmcoZSl7cmV0dXJuIGRlY29kZVVSSUNvbXBvbmVudChlc2NhcGUoZSkpfXQuUHJvbWlzZUNhcGFiaWxpdHk9Y2xhc3MgUHJvbWlzZUNhcGFiaWxpdHl7I2U9ITE7Y29uc3RydWN0b3IoKXt0aGlzLnByb21pc2U9bmV3IFByb21pc2UoKChlLHQpPT57dGhpcy5yZXNvbHZlPXQ9Pnt0aGlzLiNlPSEwO2UodCl9O3RoaXMucmVqZWN0PWU9Pnt0aGlzLiNlPSEwO3QoZSl9fSkpfWdldCBzZXR0bGVkKCl7cmV0dXJuIHRoaXMuI2V9fTtsZXQgYz1udWxsLGw9bnVsbDt0LkFubm90YXRpb25QcmVmaXg9InBkZmpzX2ludGVybmFsX2lkXyJ9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5YUmVmUGFyc2VFeGNlcHRpb249dC5YUmVmRW50cnlFeGNlcHRpb249dC5QYXJzZXJFT0ZFeGNlcHRpb249dC5QREZfVkVSU0lPTl9SRUdFWFA9dC5NaXNzaW5nRGF0YUV4Y2VwdGlvbj12b2lkIDA7dC5hcnJheUJ1ZmZlcnNUb0J5dGVzPWZ1bmN0aW9uIGFycmF5QnVmZmVyc1RvQnl0ZXMoZSl7Y29uc3QgdD1lLmxlbmd0aDtpZigwPT09dClyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCk7aWYoMT09PXQpcmV0dXJuIG5ldyBVaW50OEFycmF5KGVbMF0pO2xldCBhPTA7Zm9yKGxldCByPTA7cjx0O3IrKylhKz1lW3JdLmJ5dGVMZW5ndGg7Y29uc3Qgcj1uZXcgVWludDhBcnJheShhKTtsZXQgbj0wO2ZvcihsZXQgYT0wO2E8dDthKyspe2NvbnN0IHQ9bmV3IFVpbnQ4QXJyYXkoZVthXSk7ci5zZXQodCxuKTtuKz10LmJ5dGVMZW5ndGh9cmV0dXJuIHJ9O3QuY29sbGVjdEFjdGlvbnM9ZnVuY3Rpb24gY29sbGVjdEFjdGlvbnMoZSx0LGEpe2NvbnN0IGk9T2JqZWN0LmNyZWF0ZShudWxsKSxzPWdldEluaGVyaXRhYmxlUHJvcGVydHkoe2RpY3Q6dCxrZXk6IkFBIixzdG9wV2hlbkZvdW5kOiExfSk7aWYocylmb3IobGV0IHQ9cy5sZW5ndGgtMTt0Pj0wO3QtLSl7Y29uc3Qgcj1zW3RdO2lmKHIgaW5zdGFuY2VvZiBuLkRpY3QpZm9yKGNvbnN0IHQgb2Ygci5nZXRLZXlzKCkpe2NvbnN0IHM9YVt0XTtpZighcyljb250aW51ZTtjb25zdCBvPVtdO19jb2xsZWN0SlMoci5nZXRSYXcodCksZSxvLG5ldyBuLlJlZlNldCk7by5sZW5ndGg+MCYmKGlbc109byl9fWlmKHQuaGFzKCJBIikpe2NvbnN0IGE9W107X2NvbGxlY3RKUyh0LmdldCgiQSIpLGUsYSxuZXcgbi5SZWZTZXQpO2EubGVuZ3RoPjAmJihpLkFjdGlvbj1hKX1yZXR1cm4oMCxyLm9iamVjdFNpemUpKGkpPjA/aTpudWxsfTt0LmVuY29kZVRvWG1sU3RyaW5nPWZ1bmN0aW9uIGVuY29kZVRvWG1sU3RyaW5nKGUpe2NvbnN0IHQ9W107bGV0IGE9MDtmb3IobGV0IHI9MCxuPWUubGVuZ3RoO3I8bjtyKyspe2NvbnN0IG49ZS5jb2RlUG9pbnRBdChyKTtpZigzMjw9biYmbjw9MTI2KXtjb25zdCBpPW9bbl07aWYoaSl7YTxyJiZ0LnB1c2goZS5zdWJzdHJpbmcoYSxyKSk7dC5wdXNoKGkpO2E9cisxfX1lbHNle2E8ciYmdC5wdXNoKGUuc3Vic3RyaW5nKGEscikpO3QucHVzaChgJiN4JHtuLnRvU3RyaW5nKDE2KS50b1VwcGVyQ2FzZSgpfTtgKTtuPjU1Mjk1JiYobjw1NzM0NHx8bj42NTUzMykmJnIrKzthPXIrMX19aWYoMD09PXQubGVuZ3RoKXJldHVybiBlO2E8ZS5sZW5ndGgmJnQucHVzaChlLnN1YnN0cmluZyhhLGUubGVuZ3RoKSk7cmV0dXJuIHQuam9pbigiIil9O3QuZXNjYXBlUERGTmFtZT1mdW5jdGlvbiBlc2NhcGVQREZOYW1lKGUpe2NvbnN0IHQ9W107bGV0IGE9MDtmb3IobGV0IHI9MCxuPWUubGVuZ3RoO3I8bjtyKyspe2NvbnN0IG49ZS5jaGFyQ29kZUF0KHIpO2lmKG48MzN8fG4+MTI2fHwzNT09PW58fDQwPT09bnx8NDE9PT1ufHw2MD09PW58fDYyPT09bnx8OTE9PT1ufHw5Mz09PW58fDEyMz09PW58fDEyNT09PW58fDQ3PT09bnx8Mzc9PT1uKXthPHImJnQucHVzaChlLnN1YnN0cmluZyhhLHIpKTt0LnB1c2goYCMke24udG9TdHJpbmcoMTYpfWApO2E9cisxfX1pZigwPT09dC5sZW5ndGgpcmV0dXJuIGU7YTxlLmxlbmd0aCYmdC5wdXNoKGUuc3Vic3RyaW5nKGEsZS5sZW5ndGgpKTtyZXR1cm4gdC5qb2luKCIiKX07dC5lc2NhcGVTdHJpbmc9ZnVuY3Rpb24gZXNjYXBlU3RyaW5nKGUpe3JldHVybiBlLnJlcGxhY2VBbGwoLyhbKClcXFxuXHJdKS9nLChlPT4iXG4iPT09ZT8iXFxuIjoiXHIiPT09ZT8iXFxyIjpgXFwke2V9YCkpfTt0LmdldEluaGVyaXRhYmxlUHJvcGVydHk9Z2V0SW5oZXJpdGFibGVQcm9wZXJ0eTt0LmdldExvb2t1cFRhYmxlRmFjdG9yeT1mdW5jdGlvbiBnZXRMb29rdXBUYWJsZUZhY3RvcnkoZSl7bGV0IHQ7cmV0dXJuIGZ1bmN0aW9uKCl7aWYoZSl7dD1PYmplY3QuY3JlYXRlKG51bGwpO2UodCk7ZT1udWxsfXJldHVybiB0fX07dC5nZXROZXdBbm5vdGF0aW9uc01hcD1mdW5jdGlvbiBnZXROZXdBbm5vdGF0aW9uc01hcChlKXtpZighZSlyZXR1cm4gbnVsbDtjb25zdCB0PW5ldyBNYXA7Zm9yKGNvbnN0W2Esbl1vZiBlKXtpZighYS5zdGFydHNXaXRoKHIuQW5ub3RhdGlvbkVkaXRvclByZWZpeCkpY29udGludWU7bGV0IGU9dC5nZXQobi5wYWdlSW5kZXgpO2lmKCFlKXtlPVtdO3Quc2V0KG4ucGFnZUluZGV4LGUpfWUucHVzaChuKX1yZXR1cm4gdC5zaXplPjA/dDpudWxsfTt0LmdldFJvdGF0aW9uTWF0cml4PWZ1bmN0aW9uIGdldFJvdGF0aW9uTWF0cml4KGUsdCxhKXtzd2l0Y2goZSl7Y2FzZSA5MDpyZXR1cm5bMCwxLC0xLDAsdCwwXTtjYXNlIDE4MDpyZXR1cm5bLTEsMCwwLC0xLHQsYV07Y2FzZSAyNzA6cmV0dXJuWzAsLTEsMSwwLDAsYV07ZGVmYXVsdDp0aHJvdyBuZXcgRXJyb3IoIkludmFsaWQgcm90YXRpb24iKX19O3QuaXNBc2NpaT1mdW5jdGlvbiBpc0FzY2lpKGUpe3JldHVybi9eW1x4MDAtXHg3Rl0qJC8udGVzdChlKX07dC5pc1doaXRlU3BhY2U9ZnVuY3Rpb24gaXNXaGl0ZVNwYWNlKGUpe3JldHVybiAzMj09PWV8fDk9PT1lfHwxMz09PWV8fDEwPT09ZX07dC5sb2cyPWZ1bmN0aW9uIGxvZzIoZSl7aWYoZTw9MClyZXR1cm4gMDtyZXR1cm4gTWF0aC5jZWlsKE1hdGgubG9nMihlKSl9O3QubnVtYmVyVG9TdHJpbmc9ZnVuY3Rpb24gbnVtYmVyVG9TdHJpbmcoZSl7aWYoTnVtYmVyLmlzSW50ZWdlcihlKSlyZXR1cm4gZS50b1N0cmluZygpO2NvbnN0IHQ9TWF0aC5yb3VuZCgxMDAqZSk7aWYodCUxMDA9PTApcmV0dXJuKHQvMTAwKS50b1N0cmluZygpO2lmKHQlMTA9PTApcmV0dXJuIGUudG9GaXhlZCgxKTtyZXR1cm4gZS50b0ZpeGVkKDIpfTt0LnBhcnNlWEZBUGF0aD1mdW5jdGlvbiBwYXJzZVhGQVBhdGgoZSl7Y29uc3QgdD0vKC4rKVxbKFxkKylcXSQvO3JldHVybiBlLnNwbGl0KCIuIikubWFwKChlPT57Y29uc3QgYT1lLm1hdGNoKHQpO3JldHVybiBhP3tuYW1lOmFbMV0scG9zOnBhcnNlSW50KGFbMl0sMTApfTp7bmFtZTplLHBvczowfX0pKX07dC5yZWFkSW50OD1mdW5jdGlvbiByZWFkSW50OChlLHQpe3JldHVybiBlW3RdPDwyND4+MjR9O3QucmVhZFVpbnQxNj1mdW5jdGlvbiByZWFkVWludDE2KGUsdCl7cmV0dXJuIGVbdF08PDh8ZVt0KzFdfTt0LnJlYWRVaW50MzI9ZnVuY3Rpb24gcmVhZFVpbnQzMihlLHQpe3JldHVybihlW3RdPDwyNHxlW3QrMV08PDE2fGVbdCsyXTw8OHxlW3QrM10pPj4+MH07dC5yZWNvdmVySnNVUkw9ZnVuY3Rpb24gcmVjb3ZlckpzVVJMKGUpe2NvbnN0IHQ9bmV3IFJlZ0V4cCgiXlxccyooIitbImFwcC5sYXVuY2hVUkwiLCJ3aW5kb3cub3BlbiIsInhmYS5ob3N0LmdvdG9VUkwiXS5qb2luKCJ8IikucmVwbGFjZUFsbCgiLiIsIlxcLiIpKyIpXFwoKD86J3xcIikoW14nXCJdKikoPzonfFwiKSg/OixcXHMqKFxcdyspXFwpfFxcKSkiLCJpIikuZXhlYyhlKTtpZih0Py5bMl0pe2NvbnN0IGU9dFsyXTtsZXQgYT0hMTsidHJ1ZSI9PT10WzNdJiYiYXBwLmxhdW5jaFVSTCI9PT10WzFdJiYoYT0hMCk7cmV0dXJue3VybDplLG5ld1dpbmRvdzphfX1yZXR1cm4gbnVsbH07dC5zdHJpbmdUb1VURjE2SGV4U3RyaW5nPWZ1bmN0aW9uIHN0cmluZ1RvVVRGMTZIZXhTdHJpbmcoZSl7Y29uc3QgdD1bXTtmb3IobGV0IGE9MCxyPWUubGVuZ3RoO2E8cjthKyspe2NvbnN0IHI9ZS5jaGFyQ29kZUF0KGEpO3QucHVzaCgocj4+OCYyNTUpLnRvU3RyaW5nKDE2KS5wYWRTdGFydCgyLCIwIiksKDI1NSZyKS50b1N0cmluZygxNikucGFkU3RhcnQoMiwiMCIpKX1yZXR1cm4gdC5qb2luKCIiKX07dC5zdHJpbmdUb1VURjE2U3RyaW5nPWZ1bmN0aW9uIHN0cmluZ1RvVVRGMTZTdHJpbmcoZSx0PSExKXtjb25zdCBhPVtdO3QmJmEucHVzaCgiw77DvyIpO2ZvcihsZXQgdD0wLHI9ZS5sZW5ndGg7dDxyO3QrKyl7Y29uc3Qgcj1lLmNoYXJDb2RlQXQodCk7YS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUocj4+OCYyNTUpLFN0cmluZy5mcm9tQ2hhckNvZGUoMjU1JnIpKX1yZXR1cm4gYS5qb2luKCIiKX07dC50b1JvbWFuTnVtZXJhbHM9ZnVuY3Rpb24gdG9Sb21hbk51bWVyYWxzKGUsdD0hMSl7KDAsci5hc3NlcnQpKE51bWJlci5pc0ludGVnZXIoZSkmJmU+MCwiVGhlIG51bWJlciBzaG91bGQgYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLiIpO2NvbnN0IGE9W107bGV0IG47Zm9yKDtlPj0xZTM7KXtlLT0xZTM7YS5wdXNoKCJNIil9bj1lLzEwMHwwO2UlPTEwMDthLnB1c2goc1tuXSk7bj1lLzEwfDA7ZSU9MTA7YS5wdXNoKHNbMTArbl0pO2EucHVzaChzWzIwK2VdKTtjb25zdCBpPWEuam9pbigiIik7cmV0dXJuIHQ/aS50b0xvd2VyQ2FzZSgpOml9O3QudmFsaWRhdGVDU1NGb250PWZ1bmN0aW9uIHZhbGlkYXRlQ1NTRm9udChlKXtjb25zdCB0PW5ldyBTZXQoWyIxMDAiLCIyMDAiLCIzMDAiLCI0MDAiLCI1MDAiLCI2MDAiLCI3MDAiLCI4MDAiLCI5MDAiLCIxMDAwIiwibm9ybWFsIiwiYm9sZCIsImJvbGRlciIsImxpZ2h0ZXIiXSkse2ZvbnRGYW1pbHk6YSxmb250V2VpZ2h0OnIsaXRhbGljQW5nbGU6bn09ZTtpZighdmFsaWRhdGVGb250TmFtZShhLCEwKSlyZXR1cm4hMTtjb25zdCBpPXI/ci50b1N0cmluZygpOiIiO2UuZm9udFdlaWdodD10LmhhcyhpKT9pOiI0MDAiO2NvbnN0IHM9cGFyc2VGbG9hdChuKTtlLml0YWxpY0FuZ2xlPWlzTmFOKHMpfHxzPC05MHx8cz45MD8iMTQiOm4udG9TdHJpbmcoKTtyZXR1cm4hMH07dC52YWxpZGF0ZUZvbnROYW1lPXZhbGlkYXRlRm9udE5hbWU7dmFyIHI9YSgyKSxuPWEoNCksaT1hKDUpO3QuUERGX1ZFUlNJT05fUkVHRVhQPS9eWzEtOV1cLlxkJC87Y2xhc3MgTWlzc2luZ0RhdGFFeGNlcHRpb24gZXh0ZW5kcyByLkJhc2VFeGNlcHRpb257Y29uc3RydWN0b3IoZSx0KXtzdXBlcihgTWlzc2luZyBkYXRhIFske2V9LCAke3R9KWAsIk1pc3NpbmdEYXRhRXhjZXB0aW9uIik7dGhpcy5iZWdpbj1lO3RoaXMuZW5kPXR9fXQuTWlzc2luZ0RhdGFFeGNlcHRpb249TWlzc2luZ0RhdGFFeGNlcHRpb247Y2xhc3MgUGFyc2VyRU9GRXhjZXB0aW9uIGV4dGVuZHMgci5CYXNlRXhjZXB0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsIlBhcnNlckVPRkV4Y2VwdGlvbiIpfX10LlBhcnNlckVPRkV4Y2VwdGlvbj1QYXJzZXJFT0ZFeGNlcHRpb247Y2xhc3MgWFJlZkVudHJ5RXhjZXB0aW9uIGV4dGVuZHMgci5CYXNlRXhjZXB0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsIlhSZWZFbnRyeUV4Y2VwdGlvbiIpfX10LlhSZWZFbnRyeUV4Y2VwdGlvbj1YUmVmRW50cnlFeGNlcHRpb247Y2xhc3MgWFJlZlBhcnNlRXhjZXB0aW9uIGV4dGVuZHMgci5CYXNlRXhjZXB0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsIlhSZWZQYXJzZUV4Y2VwdGlvbiIpfX10LlhSZWZQYXJzZUV4Y2VwdGlvbj1YUmVmUGFyc2VFeGNlcHRpb247ZnVuY3Rpb24gZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSh7ZGljdDplLGtleTp0LGdldEFycmF5OmE9ITEsc3RvcFdoZW5Gb3VuZDpyPSEwfSl7bGV0IGk7Y29uc3Qgcz1uZXcgbi5SZWZTZXQ7Zm9yKDtlIGluc3RhbmNlb2Ygbi5EaWN0JiYoIWUub2JqSWR8fCFzLmhhcyhlLm9iaklkKSk7KXtlLm9iaklkJiZzLnB1dChlLm9iaklkKTtjb25zdCBuPWE/ZS5nZXRBcnJheSh0KTplLmdldCh0KTtpZih2b2lkIDAhPT1uKXtpZihyKXJldHVybiBuOyhpfHw9W10pLnB1c2gobil9ZT1lLmdldCgiUGFyZW50Iil9cmV0dXJuIGl9Y29uc3Qgcz1bIiIsIkMiLCJDQyIsIkNDQyIsIkNEIiwiRCIsIkRDIiwiRENDIiwiRENDQyIsIkNNIiwiIiwiWCIsIlhYIiwiWFhYIiwiWEwiLCJMIiwiTFgiLCJMWFgiLCJMWFhYIiwiWEMiLCIiLCJJIiwiSUkiLCJJSUkiLCJJViIsIlYiLCJWSSIsIlZJSSIsIlZJSUkiLCJJWCJdO2Z1bmN0aW9uIF9jb2xsZWN0SlMoZSx0LGEscyl7aWYoIWUpcmV0dXJuO2xldCBvPW51bGw7aWYoZSBpbnN0YW5jZW9mIG4uUmVmKXtpZihzLmhhcyhlKSlyZXR1cm47bz1lO3MucHV0KG8pO2U9dC5mZXRjaChlKX1pZihBcnJheS5pc0FycmF5KGUpKWZvcihjb25zdCByIG9mIGUpX2NvbGxlY3RKUyhyLHQsYSxzKTtlbHNlIGlmKGUgaW5zdGFuY2VvZiBuLkRpY3Qpe2lmKCgwLG4uaXNOYW1lKShlLmdldCgiUyIpLCJKYXZhU2NyaXB0Iikpe2NvbnN0IHQ9ZS5nZXQoIkpTIik7bGV0IG47dCBpbnN0YW5jZW9mIGkuQmFzZVN0cmVhbT9uPXQuZ2V0U3RyaW5nKCk6InN0cmluZyI9PXR5cGVvZiB0JiYobj10KTtuJiY9KDAsci5zdHJpbmdUb1BERlN0cmluZykobikucmVwbGFjZUFsbCgiXDAiLCIiKTtuJiZhLnB1c2gobil9X2NvbGxlY3RKUyhlLmdldFJhdygiTmV4dCIpLHQsYSxzKX1vJiZzLnJlbW92ZShvKX1jb25zdCBvPXs2MDoiJmx0OyIsNjI6IiZndDsiLDM4OiImYW1wOyIsMzQ6IiZxdW90OyIsMzk6IiZhcG9zOyJ9O2Z1bmN0aW9uIHZhbGlkYXRlRm9udE5hbWUoZSx0PSExKXtjb25zdCBhPS9eKCJ8JykuKigifCcpJC8uZXhlYyhlKTtpZihhJiZhWzFdPT09YVsyXSl7aWYobmV3IFJlZ0V4cChgW15cXFxcXSR7YVsxXX1gKS50ZXN0KGUuc2xpY2UoMSwtMSkpKXt0JiYoMCxyLndhcm4pKGBGb250RmFtaWx5IGNvbnRhaW5zIHVuZXNjYXBlZCAke2FbMV19OiAke2V9LmApO3JldHVybiExfX1lbHNlIGZvcihjb25zdCBhIG9mIGUuc3BsaXQoL1sgXHRdKy8pKWlmKC9eKFxkfCgtKFxkfC0pKSkvLnRlc3QoYSl8fCEvXltcdy1cXF0rJC8udGVzdChhKSl7dCYmKDAsci53YXJuKShgRm9udEZhbWlseSBjb250YWlucyBpbnZhbGlkIDxjdXN0b20taWRlbnQ+OiAke2V9LmApO3JldHVybiExfXJldHVybiEwfX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlJlZlNldENhY2hlPXQuUmVmU2V0PXQuUmVmPXQuTmFtZT10LkVPRj10LkRpY3Q9dC5DbWQ9dC5DSVJDVUxBUl9SRUY9dm9pZCAwO3QuY2xlYXJQcmltaXRpdmVDYWNoZXM9ZnVuY3Rpb24gY2xlYXJQcmltaXRpdmVDYWNoZXMoKXtzPU9iamVjdC5jcmVhdGUobnVsbCk7bz1PYmplY3QuY3JlYXRlKG51bGwpO2M9T2JqZWN0LmNyZWF0ZShudWxsKX07dC5pc0NtZD1mdW5jdGlvbiBpc0NtZChlLHQpe3JldHVybiBlIGluc3RhbmNlb2YgQ21kJiYodm9pZCAwPT09dHx8ZS5jbWQ9PT10KX07dC5pc0RpY3Q9ZnVuY3Rpb24gaXNEaWN0KGUsdCl7cmV0dXJuIGUgaW5zdGFuY2VvZiBEaWN0JiYodm9pZCAwPT09dHx8aXNOYW1lKGUuZ2V0KCJUeXBlIiksdCkpfTt0LmlzTmFtZT1pc05hbWU7dC5pc1JlZnNFcXVhbD1mdW5jdGlvbiBpc1JlZnNFcXVhbChlLHQpe3JldHVybiBlLm51bT09PXQubnVtJiZlLmdlbj09PXQuZ2VufTt2YXIgcj1hKDIpO2NvbnN0IG49U3ltYm9sKCJDSVJDVUxBUl9SRUYiKTt0LkNJUkNVTEFSX1JFRj1uO2NvbnN0IGk9U3ltYm9sKCJFT0YiKTt0LkVPRj1pO2xldCBzPU9iamVjdC5jcmVhdGUobnVsbCksbz1PYmplY3QuY3JlYXRlKG51bGwpLGM9T2JqZWN0LmNyZWF0ZShudWxsKTtjbGFzcyBOYW1le2NvbnN0cnVjdG9yKGUpe3RoaXMubmFtZT1lfXN0YXRpYyBnZXQoZSl7cmV0dXJuIG9bZV18fD1uZXcgTmFtZShlKX19dC5OYW1lPU5hbWU7Y2xhc3MgQ21ke2NvbnN0cnVjdG9yKGUpe3RoaXMuY21kPWV9c3RhdGljIGdldChlKXtyZXR1cm4gc1tlXXx8PW5ldyBDbWQoZSl9fXQuQ21kPUNtZDtjb25zdCBsPWZ1bmN0aW9uIG5vblNlcmlhbGl6YWJsZUNsb3N1cmUoKXtyZXR1cm4gbH07Y2xhc3MgRGljdHtjb25zdHJ1Y3RvcihlPW51bGwpe3RoaXMuX21hcD1PYmplY3QuY3JlYXRlKG51bGwpO3RoaXMueHJlZj1lO3RoaXMub2JqSWQ9bnVsbDt0aGlzLnN1cHByZXNzRW5jcnlwdGlvbj0hMTt0aGlzLl9fbm9uU2VyaWFsaXphYmxlX189bH1hc3NpZ25YcmVmKGUpe3RoaXMueHJlZj1lfWdldCBzaXplKCl7cmV0dXJuIE9iamVjdC5rZXlzKHRoaXMuX21hcCkubGVuZ3RofWdldChlLHQsYSl7bGV0IHI9dGhpcy5fbWFwW2VdO2lmKHZvaWQgMD09PXImJnZvaWQgMCE9PXQpe3I9dGhpcy5fbWFwW3RdO3ZvaWQgMD09PXImJnZvaWQgMCE9PWEmJihyPXRoaXMuX21hcFthXSl9cmV0dXJuIHIgaW5zdGFuY2VvZiBSZWYmJnRoaXMueHJlZj90aGlzLnhyZWYuZmV0Y2gocix0aGlzLnN1cHByZXNzRW5jcnlwdGlvbik6cn1hc3luYyBnZXRBc3luYyhlLHQsYSl7bGV0IHI9dGhpcy5fbWFwW2VdO2lmKHZvaWQgMD09PXImJnZvaWQgMCE9PXQpe3I9dGhpcy5fbWFwW3RdO3ZvaWQgMD09PXImJnZvaWQgMCE9PWEmJihyPXRoaXMuX21hcFthXSl9cmV0dXJuIHIgaW5zdGFuY2VvZiBSZWYmJnRoaXMueHJlZj90aGlzLnhyZWYuZmV0Y2hBc3luYyhyLHRoaXMuc3VwcHJlc3NFbmNyeXB0aW9uKTpyfWdldEFycmF5KGUsdCxhKXtsZXQgcj10aGlzLl9tYXBbZV07aWYodm9pZCAwPT09ciYmdm9pZCAwIT09dCl7cj10aGlzLl9tYXBbdF07dm9pZCAwPT09ciYmdm9pZCAwIT09YSYmKHI9dGhpcy5fbWFwW2FdKX1yIGluc3RhbmNlb2YgUmVmJiZ0aGlzLnhyZWYmJihyPXRoaXMueHJlZi5mZXRjaChyLHRoaXMuc3VwcHJlc3NFbmNyeXB0aW9uKSk7aWYoQXJyYXkuaXNBcnJheShyKSl7cj1yLnNsaWNlKCk7Zm9yKGxldCBlPTAsdD1yLmxlbmd0aDtlPHQ7ZSsrKXJbZV1pbnN0YW5jZW9mIFJlZiYmdGhpcy54cmVmJiYocltlXT10aGlzLnhyZWYuZmV0Y2gocltlXSx0aGlzLnN1cHByZXNzRW5jcnlwdGlvbikpfXJldHVybiByfWdldFJhdyhlKXtyZXR1cm4gdGhpcy5fbWFwW2VdfWdldEtleXMoKXtyZXR1cm4gT2JqZWN0LmtleXModGhpcy5fbWFwKX1nZXRSYXdWYWx1ZXMoKXtyZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9tYXApfXNldChlLHQpe3RoaXMuX21hcFtlXT10fWhhcyhlKXtyZXR1cm4gdm9pZCAwIT09dGhpcy5fbWFwW2VdfWZvckVhY2goZSl7Zm9yKGNvbnN0IHQgaW4gdGhpcy5fbWFwKWUodCx0aGlzLmdldCh0KSl9c3RhdGljIGdldCBlbXB0eSgpe2NvbnN0IGU9bmV3IERpY3QobnVsbCk7ZS5zZXQ9KGUsdCk9PnsoMCxyLnVucmVhY2hhYmxlKSgiU2hvdWxkIG5vdCBjYWxsIGBzZXRgIG9uIHRoZSBlbXB0eSBkaWN0aW9uYXJ5LiIpfTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiZW1wdHkiLGUpfXN0YXRpYyBtZXJnZSh7eHJlZjplLGRpY3RBcnJheTp0LG1lcmdlU3ViRGljdHM6YT0hMX0pe2NvbnN0IHI9bmV3IERpY3QoZSksbj1uZXcgTWFwO2Zvcihjb25zdCBlIG9mIHQpaWYoZSBpbnN0YW5jZW9mIERpY3QpZm9yKGNvbnN0W3Qscl1vZiBPYmplY3QuZW50cmllcyhlLl9tYXApKXtsZXQgZT1uLmdldCh0KTtpZih2b2lkIDA9PT1lKXtlPVtdO24uc2V0KHQsZSl9ZWxzZSBpZighKGEmJnIgaW5zdGFuY2VvZiBEaWN0KSljb250aW51ZTtlLnB1c2gocil9Zm9yKGNvbnN0W3QsYV1vZiBuKXtpZigxPT09YS5sZW5ndGh8fCEoYVswXWluc3RhbmNlb2YgRGljdCkpe3IuX21hcFt0XT1hWzBdO2NvbnRpbnVlfWNvbnN0IG49bmV3IERpY3QoZSk7Zm9yKGNvbnN0IGUgb2YgYSlmb3IoY29uc3RbdCxhXW9mIE9iamVjdC5lbnRyaWVzKGUuX21hcCkpdm9pZCAwPT09bi5fbWFwW3RdJiYobi5fbWFwW3RdPWEpO24uc2l6ZT4wJiYoci5fbWFwW3RdPW4pfW4uY2xlYXIoKTtyZXR1cm4gci5zaXplPjA/cjpEaWN0LmVtcHR5fWNsb25lKCl7Y29uc3QgZT1uZXcgRGljdCh0aGlzLnhyZWYpO2Zvcihjb25zdCB0IG9mIHRoaXMuZ2V0S2V5cygpKWUuc2V0KHQsdGhpcy5nZXRSYXcodCkpO3JldHVybiBlfX10LkRpY3Q9RGljdDtjbGFzcyBSZWZ7Y29uc3RydWN0b3IoZSx0KXt0aGlzLm51bT1lO3RoaXMuZ2VuPXR9dG9TdHJpbmcoKXtyZXR1cm4gMD09PXRoaXMuZ2VuP2Ake3RoaXMubnVtfVJgOmAke3RoaXMubnVtfVIke3RoaXMuZ2VufWB9c3RhdGljIGZyb21TdHJpbmcoZSl7Y29uc3QgdD1jW2VdO2lmKHQpcmV0dXJuIHQ7Y29uc3QgYT0vXihcZCspUihcZCopJC8uZXhlYyhlKTtyZXR1cm4gYSYmIjAiIT09YVsxXT9jW2VdPW5ldyBSZWYocGFyc2VJbnQoYVsxXSksYVsyXT9wYXJzZUludChhWzJdKTowKTpudWxsfXN0YXRpYyBnZXQoZSx0KXtjb25zdCBhPTA9PT10P2Ake2V9UmA6YCR7ZX1SJHt0fWA7cmV0dXJuIGNbYV18fD1uZXcgUmVmKGUsdCl9fXQuUmVmPVJlZjtjbGFzcyBSZWZTZXR7Y29uc3RydWN0b3IoZT1udWxsKXt0aGlzLl9zZXQ9bmV3IFNldChlPy5fc2V0KX1oYXMoZSl7cmV0dXJuIHRoaXMuX3NldC5oYXMoZS50b1N0cmluZygpKX1wdXQoZSl7dGhpcy5fc2V0LmFkZChlLnRvU3RyaW5nKCkpfXJlbW92ZShlKXt0aGlzLl9zZXQuZGVsZXRlKGUudG9TdHJpbmcoKSl9W1N5bWJvbC5pdGVyYXRvcl0oKXtyZXR1cm4gdGhpcy5fc2V0LnZhbHVlcygpfWNsZWFyKCl7dGhpcy5fc2V0LmNsZWFyKCl9fXQuUmVmU2V0PVJlZlNldDtjbGFzcyBSZWZTZXRDYWNoZXtjb25zdHJ1Y3Rvcigpe3RoaXMuX21hcD1uZXcgTWFwfWdldCBzaXplKCl7cmV0dXJuIHRoaXMuX21hcC5zaXplfWdldChlKXtyZXR1cm4gdGhpcy5fbWFwLmdldChlLnRvU3RyaW5nKCkpfWhhcyhlKXtyZXR1cm4gdGhpcy5fbWFwLmhhcyhlLnRvU3RyaW5nKCkpfXB1dChlLHQpe3RoaXMuX21hcC5zZXQoZS50b1N0cmluZygpLHQpfXB1dEFsaWFzKGUsdCl7dGhpcy5fbWFwLnNldChlLnRvU3RyaW5nKCksdGhpcy5nZXQodCkpfVtTeW1ib2wuaXRlcmF0b3JdKCl7cmV0dXJuIHRoaXMuX21hcC52YWx1ZXMoKX1jbGVhcigpe3RoaXMuX21hcC5jbGVhcigpfX10LlJlZlNldENhY2hlPVJlZlNldENhY2hlO2Z1bmN0aW9uIGlzTmFtZShlLHQpe3JldHVybiBlIGluc3RhbmNlb2YgTmFtZSYmKHZvaWQgMD09PXR8fGUubmFtZT09PXQpfX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkJhc2VTdHJlYW09dm9pZCAwO3ZhciByPWEoMik7Y2xhc3MgQmFzZVN0cmVhbXtjb25zdHJ1Y3Rvcigpe3RoaXMuY29uc3RydWN0b3I9PT1CYXNlU3RyZWFtJiYoMCxyLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgQmFzZVN0cmVhbS4iKX1nZXQgbGVuZ3RoKCl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IGdldHRlciBgbGVuZ3RoYCBhY2Nlc3NlZCIpfWdldCBpc0VtcHR5KCl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IGdldHRlciBgaXNFbXB0eWAgYWNjZXNzZWQiKX1nZXQgaXNEYXRhTG9hZGVkKCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImlzRGF0YUxvYWRlZCIsITApfWdldEJ5dGUoKXsoMCxyLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBnZXRCeXRlYCBjYWxsZWQiKX1nZXRCeXRlcyhlKXsoMCxyLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBnZXRCeXRlc2AgY2FsbGVkIil9cGVla0J5dGUoKXtjb25zdCBlPXRoaXMuZ2V0Qnl0ZSgpOy0xIT09ZSYmdGhpcy5wb3MtLTtyZXR1cm4gZX1wZWVrQnl0ZXMoZSl7Y29uc3QgdD10aGlzLmdldEJ5dGVzKGUpO3RoaXMucG9zLT10Lmxlbmd0aDtyZXR1cm4gdH1nZXRVaW50MTYoKXtjb25zdCBlPXRoaXMuZ2V0Qnl0ZSgpLHQ9dGhpcy5nZXRCeXRlKCk7cmV0dXJuLTE9PT1lfHwtMT09PXQ/LTE6KGU8PDgpK3R9Z2V0SW50MzIoKXtyZXR1cm4odGhpcy5nZXRCeXRlKCk8PDI0KSsodGhpcy5nZXRCeXRlKCk8PDE2KSsodGhpcy5nZXRCeXRlKCk8PDgpK3RoaXMuZ2V0Qnl0ZSgpfWdldEJ5dGVSYW5nZShlLHQpeygwLHIudW5yZWFjaGFibGUpKCJBYnN0cmFjdCBtZXRob2QgYGdldEJ5dGVSYW5nZWAgY2FsbGVkIil9Z2V0U3RyaW5nKGUpe3JldHVybigwLHIuYnl0ZXNUb1N0cmluZykodGhpcy5nZXRCeXRlcyhlKSl9c2tpcChlKXt0aGlzLnBvcys9ZXx8MX1yZXNldCgpeygwLHIudW5yZWFjaGFibGUpKCJBYnN0cmFjdCBtZXRob2QgYHJlc2V0YCBjYWxsZWQiKX1tb3ZlU3RhcnQoKXsoMCxyLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBtb3ZlU3RhcnRgIGNhbGxlZCIpfW1ha2VTdWJTdHJlYW0oZSx0LGE9bnVsbCl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBgbWFrZVN1YlN0cmVhbWAgY2FsbGVkIil9Z2V0QmFzZVN0cmVhbXMoKXtyZXR1cm4gbnVsbH19dC5CYXNlU3RyZWFtPUJhc2VTdHJlYW19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5OZXR3b3JrUGRmTWFuYWdlcj10LkxvY2FsUGRmTWFuYWdlcj12b2lkIDA7dmFyIHI9YSgyKSxuPWEoNyksaT1hKDMpLHM9YSg5KSxvPWEoOCk7Y2xhc3MgQmFzZVBkZk1hbmFnZXJ7Y29uc3RydWN0b3IoZSl7dGhpcy5jb25zdHJ1Y3Rvcj09PUJhc2VQZGZNYW5hZ2VyJiYoMCxyLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgQmFzZVBkZk1hbmFnZXIuIik7dGhpcy5fZG9jQmFzZVVybD1mdW5jdGlvbiBwYXJzZURvY0Jhc2VVcmwoZSl7aWYoZSl7Y29uc3QgdD0oMCxyLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwpKGUpO2lmKHQpcmV0dXJuIHQuaHJlZjsoMCxyLndhcm4pKGBJbnZhbGlkIGFic29sdXRlIGRvY0Jhc2VVcmw6ICIke2V9Ii5gKX1yZXR1cm4gbnVsbH0oZS5kb2NCYXNlVXJsKTt0aGlzLl9kb2NJZD1lLmRvY0lkO3RoaXMuX3Bhc3N3b3JkPWUucGFzc3dvcmQ7dGhpcy5lbmFibGVYZmE9ZS5lbmFibGVYZmE7ZS5ldmFsdWF0b3JPcHRpb25zLmlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkJiY9ci5GZWF0dXJlVGVzdC5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDt0aGlzLmV2YWx1YXRvck9wdGlvbnM9ZS5ldmFsdWF0b3JPcHRpb25zfWdldCBkb2NJZCgpe3JldHVybiB0aGlzLl9kb2NJZH1nZXQgcGFzc3dvcmQoKXtyZXR1cm4gdGhpcy5fcGFzc3dvcmR9Z2V0IGRvY0Jhc2VVcmwoKXtyZXR1cm4gdGhpcy5fZG9jQmFzZVVybH1nZXQgY2F0YWxvZygpe3JldHVybiB0aGlzLnBkZkRvY3VtZW50LmNhdGFsb2d9ZW5zdXJlRG9jKGUsdCl7cmV0dXJuIHRoaXMuZW5zdXJlKHRoaXMucGRmRG9jdW1lbnQsZSx0KX1lbnN1cmVYUmVmKGUsdCl7cmV0dXJuIHRoaXMuZW5zdXJlKHRoaXMucGRmRG9jdW1lbnQueHJlZixlLHQpfWVuc3VyZUNhdGFsb2coZSx0KXtyZXR1cm4gdGhpcy5lbnN1cmUodGhpcy5wZGZEb2N1bWVudC5jYXRhbG9nLGUsdCl9Z2V0UGFnZShlKXtyZXR1cm4gdGhpcy5wZGZEb2N1bWVudC5nZXRQYWdlKGUpfWZvbnRGYWxsYmFjayhlLHQpe3JldHVybiB0aGlzLnBkZkRvY3VtZW50LmZvbnRGYWxsYmFjayhlLHQpfWxvYWRYZmFGb250cyhlLHQpe3JldHVybiB0aGlzLnBkZkRvY3VtZW50LmxvYWRYZmFGb250cyhlLHQpfWxvYWRYZmFJbWFnZXMoKXtyZXR1cm4gdGhpcy5wZGZEb2N1bWVudC5sb2FkWGZhSW1hZ2VzKCl9c2VyaWFsaXplWGZhRGF0YShlKXtyZXR1cm4gdGhpcy5wZGZEb2N1bWVudC5zZXJpYWxpemVYZmFEYXRhKGUpfWNsZWFudXAoZT0hMSl7cmV0dXJuIHRoaXMucGRmRG9jdW1lbnQuY2xlYW51cChlKX1hc3luYyBlbnN1cmUoZSx0LGEpeygwLHIudW5yZWFjaGFibGUpKCJBYnN0cmFjdCBtZXRob2QgYGVuc3VyZWAgY2FsbGVkIil9cmVxdWVzdFJhbmdlKGUsdCl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBgcmVxdWVzdFJhbmdlYCBjYWxsZWQiKX1yZXF1ZXN0TG9hZGVkU3RyZWFtKGU9ITEpeygwLHIudW5yZWFjaGFibGUpKCJBYnN0cmFjdCBtZXRob2QgYHJlcXVlc3RMb2FkZWRTdHJlYW1gIGNhbGxlZCIpfXNlbmRQcm9ncmVzc2l2ZURhdGEoZSl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBgc2VuZFByb2dyZXNzaXZlRGF0YWAgY2FsbGVkIil9dXBkYXRlUGFzc3dvcmQoZSl7dGhpcy5fcGFzc3dvcmQ9ZX10ZXJtaW5hdGUoZSl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBgdGVybWluYXRlYCBjYWxsZWQiKX19dC5Mb2NhbFBkZk1hbmFnZXI9Y2xhc3MgTG9jYWxQZGZNYW5hZ2VyIGV4dGVuZHMgQmFzZVBkZk1hbmFnZXJ7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7Y29uc3QgdD1uZXcgby5TdHJlYW0oZS5zb3VyY2UpO3RoaXMucGRmRG9jdW1lbnQ9bmV3IHMuUERGRG9jdW1lbnQodGhpcyx0KTt0aGlzLl9sb2FkZWRTdHJlYW1Qcm9taXNlPVByb21pc2UucmVzb2x2ZSh0KX1hc3luYyBlbnN1cmUoZSx0LGEpe2NvbnN0IHI9ZVt0XTtyZXR1cm4iZnVuY3Rpb24iPT10eXBlb2Ygcj9yLmFwcGx5KGUsYSk6cn1yZXF1ZXN0UmFuZ2UoZSx0KXtyZXR1cm4gUHJvbWlzZS5yZXNvbHZlKCl9cmVxdWVzdExvYWRlZFN0cmVhbShlPSExKXtyZXR1cm4gdGhpcy5fbG9hZGVkU3RyZWFtUHJvbWlzZX10ZXJtaW5hdGUoZSl7fX07dC5OZXR3b3JrUGRmTWFuYWdlcj1jbGFzcyBOZXR3b3JrUGRmTWFuYWdlciBleHRlbmRzIEJhc2VQZGZNYW5hZ2Vye2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO3RoaXMuc3RyZWFtTWFuYWdlcj1uZXcgbi5DaHVua2VkU3RyZWFtTWFuYWdlcihlLnNvdXJjZSx7bXNnSGFuZGxlcjplLmhhbmRsZXIsbGVuZ3RoOmUubGVuZ3RoLGRpc2FibGVBdXRvRmV0Y2g6ZS5kaXNhYmxlQXV0b0ZldGNoLHJhbmdlQ2h1bmtTaXplOmUucmFuZ2VDaHVua1NpemV9KTt0aGlzLnBkZkRvY3VtZW50PW5ldyBzLlBERkRvY3VtZW50KHRoaXMsdGhpcy5zdHJlYW1NYW5hZ2VyLmdldFN0cmVhbSgpKX1hc3luYyBlbnN1cmUoZSx0LGEpe3RyeXtjb25zdCByPWVbdF07cmV0dXJuImZ1bmN0aW9uIj09dHlwZW9mIHI/ci5hcHBseShlLGEpOnJ9Y2F0Y2gocil7aWYoIShyIGluc3RhbmNlb2YgaS5NaXNzaW5nRGF0YUV4Y2VwdGlvbikpdGhyb3cgcjthd2FpdCB0aGlzLnJlcXVlc3RSYW5nZShyLmJlZ2luLHIuZW5kKTtyZXR1cm4gdGhpcy5lbnN1cmUoZSx0LGEpfX1yZXF1ZXN0UmFuZ2UoZSx0KXtyZXR1cm4gdGhpcy5zdHJlYW1NYW5hZ2VyLnJlcXVlc3RSYW5nZShlLHQpfXJlcXVlc3RMb2FkZWRTdHJlYW0oZT0hMSl7cmV0dXJuIHRoaXMuc3RyZWFtTWFuYWdlci5yZXF1ZXN0QWxsQ2h1bmtzKGUpfXNlbmRQcm9ncmVzc2l2ZURhdGEoZSl7dGhpcy5zdHJlYW1NYW5hZ2VyLm9uUmVjZWl2ZURhdGEoe2NodW5rOmV9KX10ZXJtaW5hdGUoZSl7dGhpcy5zdHJlYW1NYW5hZ2VyLmFib3J0KGUpfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5DaHVua2VkU3RyZWFtTWFuYWdlcj10LkNodW5rZWRTdHJlYW09dm9pZCAwO3ZhciByPWEoMyksbj1hKDIpLGk9YSg4KTtjbGFzcyBDaHVua2VkU3RyZWFtIGV4dGVuZHMgaS5TdHJlYW17Y29uc3RydWN0b3IoZSx0LGEpe3N1cGVyKG5ldyBVaW50OEFycmF5KGUpLDAsZSxudWxsKTt0aGlzLmNodW5rU2l6ZT10O3RoaXMuX2xvYWRlZENodW5rcz1uZXcgU2V0O3RoaXMubnVtQ2h1bmtzPU1hdGguY2VpbChlL3QpO3RoaXMubWFuYWdlcj1hO3RoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoPTA7dGhpcy5sYXN0U3VjY2Vzc2Z1bEVuc3VyZUJ5dGVDaHVuaz0tMX1nZXRNaXNzaW5nQ2h1bmtzKCl7Y29uc3QgZT1bXTtmb3IobGV0IHQ9MCxhPXRoaXMubnVtQ2h1bmtzO3Q8YTsrK3QpdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyh0KXx8ZS5wdXNoKHQpO3JldHVybiBlfWdldCBudW1DaHVua3NMb2FkZWQoKXtyZXR1cm4gdGhpcy5fbG9hZGVkQ2h1bmtzLnNpemV9Z2V0IGlzRGF0YUxvYWRlZCgpe3JldHVybiB0aGlzLm51bUNodW5rc0xvYWRlZD09PXRoaXMubnVtQ2h1bmtzfW9uUmVjZWl2ZURhdGEoZSx0KXtjb25zdCBhPXRoaXMuY2h1bmtTaXplO2lmKGUlYSE9MCl0aHJvdyBuZXcgRXJyb3IoYEJhZCBiZWdpbiBvZmZzZXQ6ICR7ZX1gKTtjb25zdCByPWUrdC5ieXRlTGVuZ3RoO2lmKHIlYSE9MCYmciE9PXRoaXMuYnl0ZXMubGVuZ3RoKXRocm93IG5ldyBFcnJvcihgQmFkIGVuZCBvZmZzZXQ6ICR7cn1gKTt0aGlzLmJ5dGVzLnNldChuZXcgVWludDhBcnJheSh0KSxlKTtjb25zdCBuPU1hdGguZmxvb3IoZS9hKSxpPU1hdGguZmxvb3IoKHItMSkvYSkrMTtmb3IobGV0IGU9bjtlPGk7KytlKXRoaXMuX2xvYWRlZENodW5rcy5hZGQoZSl9b25SZWNlaXZlUHJvZ3Jlc3NpdmVEYXRhKGUpe2xldCB0PXRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoO2NvbnN0IGE9TWF0aC5mbG9vcih0L3RoaXMuY2h1bmtTaXplKTt0aGlzLmJ5dGVzLnNldChuZXcgVWludDhBcnJheShlKSx0KTt0Kz1lLmJ5dGVMZW5ndGg7dGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGg9dDtjb25zdCByPXQ+PXRoaXMuZW5kP3RoaXMubnVtQ2h1bmtzOk1hdGguZmxvb3IodC90aGlzLmNodW5rU2l6ZSk7Zm9yKGxldCBlPWE7ZTxyOysrZSl0aGlzLl9sb2FkZWRDaHVua3MuYWRkKGUpfWVuc3VyZUJ5dGUoZSl7aWYoZTx0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aClyZXR1cm47Y29uc3QgdD1NYXRoLmZsb29yKGUvdGhpcy5jaHVua1NpemUpO2lmKCEodD50aGlzLm51bUNodW5rcykmJnQhPT10aGlzLmxhc3RTdWNjZXNzZnVsRW5zdXJlQnl0ZUNodW5rKXtpZighdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyh0KSl0aHJvdyBuZXcgci5NaXNzaW5nRGF0YUV4Y2VwdGlvbihlLGUrMSk7dGhpcy5sYXN0U3VjY2Vzc2Z1bEVuc3VyZUJ5dGVDaHVuaz10fX1lbnN1cmVSYW5nZShlLHQpe2lmKGU+PXQpcmV0dXJuO2lmKHQ8PXRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoKXJldHVybjtjb25zdCBhPU1hdGguZmxvb3IoZS90aGlzLmNodW5rU2l6ZSk7aWYoYT50aGlzLm51bUNodW5rcylyZXR1cm47Y29uc3Qgbj1NYXRoLm1pbihNYXRoLmZsb29yKCh0LTEpL3RoaXMuY2h1bmtTaXplKSsxLHRoaXMubnVtQ2h1bmtzKTtmb3IobGV0IGk9YTtpPG47KytpKWlmKCF0aGlzLl9sb2FkZWRDaHVua3MuaGFzKGkpKXRocm93IG5ldyByLk1pc3NpbmdEYXRhRXhjZXB0aW9uKGUsdCl9bmV4dEVtcHR5Q2h1bmsoZSl7Y29uc3QgdD10aGlzLm51bUNodW5rcztmb3IobGV0IGE9MDthPHQ7KythKXtjb25zdCByPShlK2EpJXQ7aWYoIXRoaXMuX2xvYWRlZENodW5rcy5oYXMocikpcmV0dXJuIHJ9cmV0dXJuIG51bGx9aGFzQ2h1bmsoZSl7cmV0dXJuIHRoaXMuX2xvYWRlZENodW5rcy5oYXMoZSl9Z2V0Qnl0ZSgpe2NvbnN0IGU9dGhpcy5wb3M7aWYoZT49dGhpcy5lbmQpcmV0dXJuLTE7ZT49dGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgmJnRoaXMuZW5zdXJlQnl0ZShlKTtyZXR1cm4gdGhpcy5ieXRlc1t0aGlzLnBvcysrXX1nZXRCeXRlcyhlKXtjb25zdCB0PXRoaXMuYnl0ZXMsYT10aGlzLnBvcyxyPXRoaXMuZW5kO2lmKCFlKXtyPnRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoJiZ0aGlzLmVuc3VyZVJhbmdlKGEscik7cmV0dXJuIHQuc3ViYXJyYXkoYSxyKX1sZXQgbj1hK2U7bj5yJiYobj1yKTtuPnRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoJiZ0aGlzLmVuc3VyZVJhbmdlKGEsbik7dGhpcy5wb3M9bjtyZXR1cm4gdC5zdWJhcnJheShhLG4pfWdldEJ5dGVSYW5nZShlLHQpe2U8MCYmKGU9MCk7dD50aGlzLmVuZCYmKHQ9dGhpcy5lbmQpO3Q+dGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgmJnRoaXMuZW5zdXJlUmFuZ2UoZSx0KTtyZXR1cm4gdGhpcy5ieXRlcy5zdWJhcnJheShlLHQpfW1ha2VTdWJTdHJlYW0oZSx0LGE9bnVsbCl7dD9lK3Q+dGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGgmJnRoaXMuZW5zdXJlUmFuZ2UoZSxlK3QpOmU+PXRoaXMucHJvZ3Jlc3NpdmVEYXRhTGVuZ3RoJiZ0aGlzLmVuc3VyZUJ5dGUoZSk7ZnVuY3Rpb24gQ2h1bmtlZFN0cmVhbVN1YnN0cmVhbSgpe31DaHVua2VkU3RyZWFtU3Vic3RyZWFtLnByb3RvdHlwZT1PYmplY3QuY3JlYXRlKHRoaXMpO0NodW5rZWRTdHJlYW1TdWJzdHJlYW0ucHJvdG90eXBlLmdldE1pc3NpbmdDaHVua3M9ZnVuY3Rpb24oKXtjb25zdCBlPXRoaXMuY2h1bmtTaXplLHQ9TWF0aC5mbG9vcih0aGlzLnN0YXJ0L2UpLGE9TWF0aC5mbG9vcigodGhpcy5lbmQtMSkvZSkrMSxyPVtdO2ZvcihsZXQgZT10O2U8YTsrK2UpdGhpcy5fbG9hZGVkQ2h1bmtzLmhhcyhlKXx8ci5wdXNoKGUpO3JldHVybiByfTtPYmplY3QuZGVmaW5lUHJvcGVydHkoQ2h1bmtlZFN0cmVhbVN1YnN0cmVhbS5wcm90b3R5cGUsImlzRGF0YUxvYWRlZCIse2dldCgpe3JldHVybiB0aGlzLm51bUNodW5rc0xvYWRlZD09PXRoaXMubnVtQ2h1bmtzfHwwPT09dGhpcy5nZXRNaXNzaW5nQ2h1bmtzKCkubGVuZ3RofSxjb25maWd1cmFibGU6ITB9KTtjb25zdCByPW5ldyBDaHVua2VkU3RyZWFtU3Vic3RyZWFtO3IucG9zPXIuc3RhcnQ9ZTtyLmVuZD1lK3R8fHRoaXMuZW5kO3IuZGljdD1hO3JldHVybiByfWdldEJhc2VTdHJlYW1zKCl7cmV0dXJuW3RoaXNdfX10LkNodW5rZWRTdHJlYW09Q2h1bmtlZFN0cmVhbTt0LkNodW5rZWRTdHJlYW1NYW5hZ2VyPWNsYXNzIENodW5rZWRTdHJlYW1NYW5hZ2Vye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5sZW5ndGg9dC5sZW5ndGg7dGhpcy5jaHVua1NpemU9dC5yYW5nZUNodW5rU2l6ZTt0aGlzLnN0cmVhbT1uZXcgQ2h1bmtlZFN0cmVhbSh0aGlzLmxlbmd0aCx0aGlzLmNodW5rU2l6ZSx0aGlzKTt0aGlzLnBkZk5ldHdvcmtTdHJlYW09ZTt0aGlzLmRpc2FibGVBdXRvRmV0Y2g9dC5kaXNhYmxlQXV0b0ZldGNoO3RoaXMubXNnSGFuZGxlcj10Lm1zZ0hhbmRsZXI7dGhpcy5jdXJyUmVxdWVzdElkPTA7dGhpcy5fY2h1bmtzTmVlZGVkQnlSZXF1ZXN0PW5ldyBNYXA7dGhpcy5fcmVxdWVzdHNCeUNodW5rPW5ldyBNYXA7dGhpcy5fcHJvbWlzZXNCeVJlcXVlc3Q9bmV3IE1hcDt0aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aD0wO3RoaXMuYWJvcnRlZD0hMTt0aGlzLl9sb2FkZWRTdHJlYW1DYXBhYmlsaXR5PW5ldyBuLlByb21pc2VDYXBhYmlsaXR5fXNlbmRSZXF1ZXN0KGUsdCl7Y29uc3QgYT10aGlzLnBkZk5ldHdvcmtTdHJlYW0uZ2V0UmFuZ2VSZWFkZXIoZSx0KTthLmlzU3RyZWFtaW5nU3VwcG9ydGVkfHwoYS5vblByb2dyZXNzPXRoaXMub25Qcm9ncmVzcy5iaW5kKHRoaXMpKTtsZXQgbj1bXSxpPTA7cmV0dXJuIG5ldyBQcm9taXNlKCgoZSx0KT0+e2NvbnN0IHJlYWRDaHVuaz0oe3ZhbHVlOnMsZG9uZTpvfSk9Pnt0cnl7aWYobyl7Y29uc3QgdD0oMCxyLmFycmF5QnVmZmVyc1RvQnl0ZXMpKG4pO249bnVsbDtlKHQpO3JldHVybn1pKz1zLmJ5dGVMZW5ndGg7YS5pc1N0cmVhbWluZ1N1cHBvcnRlZCYmdGhpcy5vblByb2dyZXNzKHtsb2FkZWQ6aX0pO24ucHVzaChzKTthLnJlYWQoKS50aGVuKHJlYWRDaHVuayx0KX1jYXRjaChlKXt0KGUpfX07YS5yZWFkKCkudGhlbihyZWFkQ2h1bmssdCl9KSkudGhlbigodD0+e3RoaXMuYWJvcnRlZHx8dGhpcy5vblJlY2VpdmVEYXRhKHtjaHVuazp0LGJlZ2luOmV9KX0pKX1yZXF1ZXN0QWxsQ2h1bmtzKGU9ITEpe2lmKCFlKXtjb25zdCBlPXRoaXMuc3RyZWFtLmdldE1pc3NpbmdDaHVua3MoKTt0aGlzLl9yZXF1ZXN0Q2h1bmtzKGUpfXJldHVybiB0aGlzLl9sb2FkZWRTdHJlYW1DYXBhYmlsaXR5LnByb21pc2V9X3JlcXVlc3RDaHVua3MoZSl7Y29uc3QgdD10aGlzLmN1cnJSZXF1ZXN0SWQrKyxhPW5ldyBTZXQ7dGhpcy5fY2h1bmtzTmVlZGVkQnlSZXF1ZXN0LnNldCh0LGEpO2Zvcihjb25zdCB0IG9mIGUpdGhpcy5zdHJlYW0uaGFzQ2h1bmsodCl8fGEuYWRkKHQpO2lmKDA9PT1hLnNpemUpcmV0dXJuIFByb21pc2UucmVzb2x2ZSgpO2NvbnN0IHI9bmV3IG4uUHJvbWlzZUNhcGFiaWxpdHk7dGhpcy5fcHJvbWlzZXNCeVJlcXVlc3Quc2V0KHQscik7Y29uc3QgaT1bXTtmb3IoY29uc3QgZSBvZiBhKXtsZXQgYT10aGlzLl9yZXF1ZXN0c0J5Q2h1bmsuZ2V0KGUpO2lmKCFhKXthPVtdO3RoaXMuX3JlcXVlc3RzQnlDaHVuay5zZXQoZSxhKTtpLnB1c2goZSl9YS5wdXNoKHQpfWlmKGkubGVuZ3RoPjApe2NvbnN0IGU9dGhpcy5ncm91cENodW5rcyhpKTtmb3IoY29uc3QgdCBvZiBlKXtjb25zdCBlPXQuYmVnaW5DaHVuayp0aGlzLmNodW5rU2l6ZSxhPU1hdGgubWluKHQuZW5kQ2h1bmsqdGhpcy5jaHVua1NpemUsdGhpcy5sZW5ndGgpO3RoaXMuc2VuZFJlcXVlc3QoZSxhKS5jYXRjaChyLnJlamVjdCl9fXJldHVybiByLnByb21pc2UuY2F0Y2goKGU9PntpZighdGhpcy5hYm9ydGVkKXRocm93IGV9KSl9Z2V0U3RyZWFtKCl7cmV0dXJuIHRoaXMuc3RyZWFtfXJlcXVlc3RSYW5nZShlLHQpe3Q9TWF0aC5taW4odCx0aGlzLmxlbmd0aCk7Y29uc3QgYT10aGlzLmdldEJlZ2luQ2h1bmsoZSkscj10aGlzLmdldEVuZENodW5rKHQpLG49W107Zm9yKGxldCBlPWE7ZTxyOysrZSluLnB1c2goZSk7cmV0dXJuIHRoaXMuX3JlcXVlc3RDaHVua3Mobil9cmVxdWVzdFJhbmdlcyhlPVtdKXtjb25zdCB0PVtdO2Zvcihjb25zdCBhIG9mIGUpe2NvbnN0IGU9dGhpcy5nZXRCZWdpbkNodW5rKGEuYmVnaW4pLHI9dGhpcy5nZXRFbmRDaHVuayhhLmVuZCk7Zm9yKGxldCBhPWU7YTxyOysrYSl0LmluY2x1ZGVzKGEpfHx0LnB1c2goYSl9dC5zb3J0KChmdW5jdGlvbihlLHQpe3JldHVybiBlLXR9KSk7cmV0dXJuIHRoaXMuX3JlcXVlc3RDaHVua3ModCl9Z3JvdXBDaHVua3MoZSl7Y29uc3QgdD1bXTtsZXQgYT0tMSxyPS0xO2ZvcihsZXQgbj0wLGk9ZS5sZW5ndGg7bjxpOysrbil7Y29uc3QgaT1lW25dO2E8MCYmKGE9aSk7aWYocj49MCYmcisxIT09aSl7dC5wdXNoKHtiZWdpbkNodW5rOmEsZW5kQ2h1bms6cisxfSk7YT1pfW4rMT09PWUubGVuZ3RoJiZ0LnB1c2goe2JlZ2luQ2h1bms6YSxlbmRDaHVuazppKzF9KTtyPWl9cmV0dXJuIHR9b25Qcm9ncmVzcyhlKXt0aGlzLm1zZ0hhbmRsZXIuc2VuZCgiRG9jUHJvZ3Jlc3MiLHtsb2FkZWQ6dGhpcy5zdHJlYW0ubnVtQ2h1bmtzTG9hZGVkKnRoaXMuY2h1bmtTaXplK2UubG9hZGVkLHRvdGFsOnRoaXMubGVuZ3RofSl9b25SZWNlaXZlRGF0YShlKXtjb25zdCB0PWUuY2h1bmssYT12b2lkIDA9PT1lLmJlZ2luLHI9YT90aGlzLnByb2dyZXNzaXZlRGF0YUxlbmd0aDplLmJlZ2luLG49cit0LmJ5dGVMZW5ndGgsaT1NYXRoLmZsb29yKHIvdGhpcy5jaHVua1NpemUpLHM9bjx0aGlzLmxlbmd0aD9NYXRoLmZsb29yKG4vdGhpcy5jaHVua1NpemUpOk1hdGguY2VpbChuL3RoaXMuY2h1bmtTaXplKTtpZihhKXt0aGlzLnN0cmVhbS5vblJlY2VpdmVQcm9ncmVzc2l2ZURhdGEodCk7dGhpcy5wcm9ncmVzc2l2ZURhdGFMZW5ndGg9bn1lbHNlIHRoaXMuc3RyZWFtLm9uUmVjZWl2ZURhdGEocix0KTt0aGlzLnN0cmVhbS5pc0RhdGFMb2FkZWQmJnRoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkucmVzb2x2ZSh0aGlzLnN0cmVhbSk7Y29uc3Qgbz1bXTtmb3IobGV0IGU9aTtlPHM7KytlKXtjb25zdCB0PXRoaXMuX3JlcXVlc3RzQnlDaHVuay5nZXQoZSk7aWYodCl7dGhpcy5fcmVxdWVzdHNCeUNodW5rLmRlbGV0ZShlKTtmb3IoY29uc3QgYSBvZiB0KXtjb25zdCB0PXRoaXMuX2NodW5rc05lZWRlZEJ5UmVxdWVzdC5nZXQoYSk7dC5oYXMoZSkmJnQuZGVsZXRlKGUpO3Quc2l6ZT4wfHxvLnB1c2goYSl9fX1pZighdGhpcy5kaXNhYmxlQXV0b0ZldGNoJiYwPT09dGhpcy5fcmVxdWVzdHNCeUNodW5rLnNpemUpe2xldCBlO2lmKDE9PT10aGlzLnN0cmVhbS5udW1DaHVua3NMb2FkZWQpe2NvbnN0IHQ9dGhpcy5zdHJlYW0ubnVtQ2h1bmtzLTE7dGhpcy5zdHJlYW0uaGFzQ2h1bmsodCl8fChlPXQpfWVsc2UgZT10aGlzLnN0cmVhbS5uZXh0RW1wdHlDaHVuayhzKTtOdW1iZXIuaXNJbnRlZ2VyKGUpJiZ0aGlzLl9yZXF1ZXN0Q2h1bmtzKFtlXSl9Zm9yKGNvbnN0IGUgb2Ygbyl7Y29uc3QgdD10aGlzLl9wcm9taXNlc0J5UmVxdWVzdC5nZXQoZSk7dGhpcy5fcHJvbWlzZXNCeVJlcXVlc3QuZGVsZXRlKGUpO3QucmVzb2x2ZSgpfXRoaXMubXNnSGFuZGxlci5zZW5kKCJEb2NQcm9ncmVzcyIse2xvYWRlZDp0aGlzLnN0cmVhbS5udW1DaHVua3NMb2FkZWQqdGhpcy5jaHVua1NpemUsdG90YWw6dGhpcy5sZW5ndGh9KX1vbkVycm9yKGUpe3RoaXMuX2xvYWRlZFN0cmVhbUNhcGFiaWxpdHkucmVqZWN0KGUpfWdldEJlZ2luQ2h1bmsoZSl7cmV0dXJuIE1hdGguZmxvb3IoZS90aGlzLmNodW5rU2l6ZSl9Z2V0RW5kQ2h1bmsoZSl7cmV0dXJuIE1hdGguZmxvb3IoKGUtMSkvdGhpcy5jaHVua1NpemUpKzF9YWJvcnQoZSl7dGhpcy5hYm9ydGVkPSEwO3RoaXMucGRmTmV0d29ya1N0cmVhbT8uY2FuY2VsQWxsUmVxdWVzdHMoZSk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5fcHJvbWlzZXNCeVJlcXVlc3QudmFsdWVzKCkpdC5yZWplY3QoZSl9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlN0cmluZ1N0cmVhbT10LlN0cmVhbT10Lk51bGxTdHJlYW09dm9pZCAwO3ZhciByPWEoNSksbj1hKDIpO2NsYXNzIFN0cmVhbSBleHRlbmRzIHIuQmFzZVN0cmVhbXtjb25zdHJ1Y3RvcihlLHQsYSxyKXtzdXBlcigpO3RoaXMuYnl0ZXM9ZSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXk/ZTpuZXcgVWludDhBcnJheShlKTt0aGlzLnN0YXJ0PXR8fDA7dGhpcy5wb3M9dGhpcy5zdGFydDt0aGlzLmVuZD10K2F8fHRoaXMuYnl0ZXMubGVuZ3RoO3RoaXMuZGljdD1yfWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5lbmQtdGhpcy5zdGFydH1nZXQgaXNFbXB0eSgpe3JldHVybiAwPT09dGhpcy5sZW5ndGh9Z2V0Qnl0ZSgpe3JldHVybiB0aGlzLnBvcz49dGhpcy5lbmQ/LTE6dGhpcy5ieXRlc1t0aGlzLnBvcysrXX1nZXRCeXRlcyhlKXtjb25zdCB0PXRoaXMuYnl0ZXMsYT10aGlzLnBvcyxyPXRoaXMuZW5kO2lmKCFlKXJldHVybiB0LnN1YmFycmF5KGEscik7bGV0IG49YStlO24+ciYmKG49cik7dGhpcy5wb3M9bjtyZXR1cm4gdC5zdWJhcnJheShhLG4pfWdldEJ5dGVSYW5nZShlLHQpe2U8MCYmKGU9MCk7dD50aGlzLmVuZCYmKHQ9dGhpcy5lbmQpO3JldHVybiB0aGlzLmJ5dGVzLnN1YmFycmF5KGUsdCl9cmVzZXQoKXt0aGlzLnBvcz10aGlzLnN0YXJ0fW1vdmVTdGFydCgpe3RoaXMuc3RhcnQ9dGhpcy5wb3N9bWFrZVN1YlN0cmVhbShlLHQsYT1udWxsKXtyZXR1cm4gbmV3IFN0cmVhbSh0aGlzLmJ5dGVzLmJ1ZmZlcixlLHQsYSl9fXQuU3RyZWFtPVN0cmVhbTt0LlN0cmluZ1N0cmVhbT1jbGFzcyBTdHJpbmdTdHJlYW0gZXh0ZW5kcyBTdHJlYW17Y29uc3RydWN0b3IoZSl7c3VwZXIoKDAsbi5zdHJpbmdUb0J5dGVzKShlKSl9fTt0Lk51bGxTdHJlYW09Y2xhc3MgTnVsbFN0cmVhbSBleHRlbmRzIFN0cmVhbXtjb25zdHJ1Y3Rvcigpe3N1cGVyKG5ldyBVaW50OEFycmF5KDApKX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuUGFnZT10LlBERkRvY3VtZW50PXZvaWQgMDt2YXIgcj1hKDIpLG49YSgxMCksaT1hKDMpLHM9YSg0KSxvPWEoNTEpLGM9YSg1KSxsPWEoNzQpLGg9YSg2NiksdT1hKDY4KSxkPWEoMTAyKSxmPWEoMTYpLGc9YSg4KSxwPWEoNzYpLG09YSg2NCksYj1hKDEzKSx5PWEoMTgpLHc9YSg3MiksUz1hKDczKSx4PWEoNzcpLEM9YSgxMDMpO2NvbnN0IGs9WzAsMCw2MTIsNzkyXTtjbGFzcyBQYWdle2NvbnN0cnVjdG9yKHtwZGZNYW5hZ2VyOmUseHJlZjp0LHBhZ2VJbmRleDphLHBhZ2VEaWN0OnIscmVmOm4sZ2xvYmFsSWRGYWN0b3J5OmksZm9udENhY2hlOnMsYnVpbHRJbkNNYXBDYWNoZTpvLHN0YW5kYXJkRm9udERhdGFDYWNoZTpjLGdsb2JhbEltYWdlQ2FjaGU6bCxzeXN0ZW1Gb250Q2FjaGU6aCxub25CbGVuZE1vZGVzU2V0OnUseGZhRmFjdG9yeTpkfSl7dGhpcy5wZGZNYW5hZ2VyPWU7dGhpcy5wYWdlSW5kZXg9YTt0aGlzLnBhZ2VEaWN0PXI7dGhpcy54cmVmPXQ7dGhpcy5yZWY9bjt0aGlzLmZvbnRDYWNoZT1zO3RoaXMuYnVpbHRJbkNNYXBDYWNoZT1vO3RoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlPWM7dGhpcy5nbG9iYWxJbWFnZUNhY2hlPWw7dGhpcy5zeXN0ZW1Gb250Q2FjaGU9aDt0aGlzLm5vbkJsZW5kTW9kZXNTZXQ9dTt0aGlzLmV2YWx1YXRvck9wdGlvbnM9ZS5ldmFsdWF0b3JPcHRpb25zO3RoaXMucmVzb3VyY2VzUHJvbWlzZT1udWxsO3RoaXMueGZhRmFjdG9yeT1kO2NvbnN0IGY9e29iajowfTt0aGlzLl9sb2NhbElkRmFjdG9yeT1jbGFzcyBleHRlbmRzIGl7c3RhdGljIGNyZWF0ZU9iaklkKCl7cmV0dXJuYHAke2F9XyR7KytmLm9ian1gfXN0YXRpYyBnZXRQYWdlT2JqSWQoKXtyZXR1cm5gcCR7bi50b1N0cmluZygpfWB9fX1fZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eShlLHQ9ITEpe2NvbnN0IGE9KDAsaS5nZXRJbmhlcml0YWJsZVByb3BlcnR5KSh7ZGljdDp0aGlzLnBhZ2VEaWN0LGtleTplLGdldEFycmF5OnQsc3RvcFdoZW5Gb3VuZDohMX0pO3JldHVybiBBcnJheS5pc0FycmF5KGEpPzEhPT1hLmxlbmd0aCYmYVswXWluc3RhbmNlb2Ygcy5EaWN0P3MuRGljdC5tZXJnZSh7eHJlZjp0aGlzLnhyZWYsZGljdEFycmF5OmF9KTphWzBdOmF9Z2V0IGNvbnRlbnQoKXtyZXR1cm4gdGhpcy5wYWdlRGljdC5nZXRBcnJheSgiQ29udGVudHMiKX1nZXQgcmVzb3VyY2VzKCl7Y29uc3QgZT10aGlzLl9nZXRJbmhlcml0YWJsZVByb3BlcnR5KCJSZXNvdXJjZXMiKTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywicmVzb3VyY2VzIixlIGluc3RhbmNlb2Ygcy5EaWN0P2U6cy5EaWN0LmVtcHR5KX1fZ2V0Qm91bmRpbmdCb3goZSl7aWYodGhpcy54ZmFEYXRhKXJldHVybiB0aGlzLnhmYURhdGEuYmJveDtsZXQgdD10aGlzLl9nZXRJbmhlcml0YWJsZVByb3BlcnR5KGUsITApO2lmKEFycmF5LmlzQXJyYXkodCkmJjQ9PT10Lmxlbmd0aCl7dD1yLlV0aWwubm9ybWFsaXplUmVjdCh0KTtpZih0WzJdLXRbMF0+MCYmdFszXS10WzFdPjApcmV0dXJuIHQ7KDAsci53YXJuKShgRW1wdHksIG9yIGludmFsaWQsIC8ke2V9IGVudHJ5LmApfXJldHVybiBudWxsfWdldCBtZWRpYUJveCgpe3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJtZWRpYUJveCIsdGhpcy5fZ2V0Qm91bmRpbmdCb3goIk1lZGlhQm94Iil8fGspfWdldCBjcm9wQm94KCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImNyb3BCb3giLHRoaXMuX2dldEJvdW5kaW5nQm94KCJDcm9wQm94Iil8fHRoaXMubWVkaWFCb3gpfWdldCB1c2VyVW5pdCgpe2xldCBlPXRoaXMucGFnZURpY3QuZ2V0KCJVc2VyVW5pdCIpOygibnVtYmVyIiE9dHlwZW9mIGV8fGU8PTApJiYoZT0xKTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywidXNlclVuaXQiLGUpfWdldCB2aWV3KCl7Y29uc3R7Y3JvcEJveDplLG1lZGlhQm94OnR9PXRoaXM7aWYoZSE9PXQmJiEoMCxyLmlzQXJyYXlFcXVhbCkoZSx0KSl7Y29uc3QgYT1yLlV0aWwuaW50ZXJzZWN0KGUsdCk7aWYoYSYmYVsyXS1hWzBdPjAmJmFbM10tYVsxXT4wKXJldHVybigwLHIuc2hhZG93KSh0aGlzLCJ2aWV3IixhKTsoMCxyLndhcm4pKCJFbXB0eSAvQ3JvcEJveCBhbmQgL01lZGlhQm94IGludGVyc2VjdGlvbi4iKX1yZXR1cm4oMCxyLnNoYWRvdykodGhpcywidmlldyIsdCl9Z2V0IHJvdGF0ZSgpe2xldCBlPXRoaXMuX2dldEluaGVyaXRhYmxlUHJvcGVydHkoIlJvdGF0ZSIpfHwwO2UlOTAhPTA/ZT0wOmU+PTM2MD9lJT0zNjA6ZTwwJiYoZT0oZSUzNjArMzYwKSUzNjApO3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJyb3RhdGUiLGUpfV9vblN1YlN0cmVhbUVycm9yKGUsdCl7aWYoIXRoaXMuZXZhbHVhdG9yT3B0aW9ucy5pZ25vcmVFcnJvcnMpdGhyb3cgZTsoMCxyLndhcm4pKGBnZXRDb250ZW50U3RyZWFtIC0gaWdub3Jpbmcgc3ViLXN0cmVhbSAoJHt0fSk6ICIke2V9Ii5gKX1nZXRDb250ZW50U3RyZWFtKCl7cmV0dXJuIHRoaXMucGRmTWFuYWdlci5lbnN1cmUodGhpcywiY29udGVudCIpLnRoZW4oKGU9PmUgaW5zdGFuY2VvZiBjLkJhc2VTdHJlYW0/ZTpBcnJheS5pc0FycmF5KGUpP25ldyB5LlN0cmVhbXNTZXF1ZW5jZVN0cmVhbShlLHRoaXMuX29uU3ViU3RyZWFtRXJyb3IuYmluZCh0aGlzKSk6bmV3IGcuTnVsbFN0cmVhbSkpfWdldCB4ZmFEYXRhKCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsInhmYURhdGEiLHRoaXMueGZhRmFjdG9yeT97YmJveDp0aGlzLnhmYUZhY3RvcnkuZ2V0Qm91bmRpbmdCb3godGhpcy5wYWdlSW5kZXgpfTpudWxsKX0jdChlLHQsYSl7Zm9yKGNvbnN0IG4gb2YgZSlpZihuLmlkKXtjb25zdCBlPXMuUmVmLmZyb21TdHJpbmcobi5pZCk7aWYoIWUpeygwLHIud2FybikoYEEgbm9uLWxpbmtlZCBhbm5vdGF0aW9uIGNhbm5vdCBiZSBtb2RpZmllZDogJHtuLmlkfWApO2NvbnRpbnVlfWlmKG4uZGVsZXRlZCl7dC5wdXQoZSk7Y29udGludWV9YT8ucHV0KGUpO24ucmVmPWU7ZGVsZXRlIG4uaWR9fWFzeW5jIHNhdmVOZXdBbm5vdGF0aW9ucyhlLHQsYSxyKXtpZih0aGlzLnhmYUZhY3RvcnkpdGhyb3cgbmV3IEVycm9yKCJYRkE6IENhbm5vdCBzYXZlIG5ldyBhbm5vdGF0aW9ucy4iKTtjb25zdCBpPW5ldyBiLlBhcnRpYWxFdmFsdWF0b3Ioe3hyZWY6dGhpcy54cmVmLGhhbmRsZXI6ZSxwYWdlSW5kZXg6dGhpcy5wYWdlSW5kZXgsaWRGYWN0b3J5OnRoaXMuX2xvY2FsSWRGYWN0b3J5LGZvbnRDYWNoZTp0aGlzLmZvbnRDYWNoZSxidWlsdEluQ01hcENhY2hlOnRoaXMuYnVpbHRJbkNNYXBDYWNoZSxzdGFuZGFyZEZvbnREYXRhQ2FjaGU6dGhpcy5zdGFuZGFyZEZvbnREYXRhQ2FjaGUsZ2xvYmFsSW1hZ2VDYWNoZTp0aGlzLmdsb2JhbEltYWdlQ2FjaGUsc3lzdGVtRm9udENhY2hlOnRoaXMuc3lzdGVtRm9udENhY2hlLG9wdGlvbnM6dGhpcy5ldmFsdWF0b3JPcHRpb25zfSksbz1uZXcgcy5SZWZTZXQsYz1uZXcgcy5SZWZTZXQ7dGhpcy4jdChhLG8sYyk7Y29uc3QgbD10aGlzLnBhZ2VEaWN0LGg9dGhpcy5hbm5vdGF0aW9ucy5maWx0ZXIoKGU9PiEoZSBpbnN0YW5jZW9mIHMuUmVmJiZvLmhhcyhlKSkpKSx1PWF3YWl0IG4uQW5ub3RhdGlvbkZhY3Rvcnkuc2F2ZU5ld0Fubm90YXRpb25zKGksdCxhLHIpO2Zvcihjb25zdHtyZWY6ZX1vZiB1LmFubm90YXRpb25zKWUgaW5zdGFuY2VvZiBzLlJlZiYmIWMuaGFzKGUpJiZoLnB1c2goZSk7Y29uc3QgZD1sLmdldCgiQW5ub3RzIik7bC5zZXQoIkFubm90cyIsaCk7Y29uc3QgZj1bXTthd2FpdCgwLFMud3JpdGVPYmplY3QpKHRoaXMucmVmLGwsZix0aGlzLnhyZWYpO2QmJmwuc2V0KCJBbm5vdHMiLGQpO2NvbnN0IGc9dS5kZXBlbmRlbmNpZXM7Zy5wdXNoKHtyZWY6dGhpcy5yZWYsZGF0YTpmLmpvaW4oIiIpfSwuLi51LmFubm90YXRpb25zKTtyZXR1cm4gZ31zYXZlKGUsdCxhKXtjb25zdCBuPW5ldyBiLlBhcnRpYWxFdmFsdWF0b3Ioe3hyZWY6dGhpcy54cmVmLGhhbmRsZXI6ZSxwYWdlSW5kZXg6dGhpcy5wYWdlSW5kZXgsaWRGYWN0b3J5OnRoaXMuX2xvY2FsSWRGYWN0b3J5LGZvbnRDYWNoZTp0aGlzLmZvbnRDYWNoZSxidWlsdEluQ01hcENhY2hlOnRoaXMuYnVpbHRJbkNNYXBDYWNoZSxzdGFuZGFyZEZvbnREYXRhQ2FjaGU6dGhpcy5zdGFuZGFyZEZvbnREYXRhQ2FjaGUsZ2xvYmFsSW1hZ2VDYWNoZTp0aGlzLmdsb2JhbEltYWdlQ2FjaGUsc3lzdGVtRm9udENhY2hlOnRoaXMuc3lzdGVtRm9udENhY2hlLG9wdGlvbnM6dGhpcy5ldmFsdWF0b3JPcHRpb25zfSk7cmV0dXJuIHRoaXMuX3BhcnNlZEFubm90YXRpb25zLnRoZW4oKGZ1bmN0aW9uKGUpe2NvbnN0IGk9W107Zm9yKGNvbnN0IHMgb2YgZSlzLm11c3RCZVByaW50ZWQoYSkmJmkucHVzaChzLnNhdmUobix0LGEpLmNhdGNoKChmdW5jdGlvbihlKXsoMCxyLndhcm4pKGBzYXZlIC0gaWdub3JpbmcgYW5ub3RhdGlvbiBkYXRhIGR1cmluZyAiJHt0Lm5hbWV9IiB0YXNrOiAiJHtlfSIuYCk7cmV0dXJuIG51bGx9KSkpO3JldHVybiBQcm9taXNlLmFsbChpKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gZS5maWx0ZXIoKGU9PiEhZSkpfSkpfSkpfWxvYWRSZXNvdXJjZXMoZSl7dGhpcy5yZXNvdXJjZXNQcm9taXNlfHwodGhpcy5yZXNvdXJjZXNQcm9taXNlPXRoaXMucGRmTWFuYWdlci5lbnN1cmUodGhpcywicmVzb3VyY2VzIikpO3JldHVybiB0aGlzLnJlc291cmNlc1Byb21pc2UudGhlbigoKCk9Pm5ldyBwLk9iamVjdExvYWRlcih0aGlzLnJlc291cmNlcyxlLHRoaXMueHJlZikubG9hZCgpKSl9Z2V0T3BlcmF0b3JMaXN0KHtoYW5kbGVyOmUsc2luazp0LHRhc2s6YSxpbnRlbnQ6byxjYWNoZUtleTpjLGFubm90YXRpb25TdG9yYWdlOmw9bnVsbH0pe2NvbnN0IGg9dGhpcy5nZXRDb250ZW50U3RyZWFtKCksdT10aGlzLmxvYWRSZXNvdXJjZXMoWyJDb2xvclNwYWNlIiwiRXh0R1N0YXRlIiwiRm9udCIsIlBhdHRlcm4iLCJQcm9wZXJ0aWVzIiwiU2hhZGluZyIsIlhPYmplY3QiXSksZD1uZXcgYi5QYXJ0aWFsRXZhbHVhdG9yKHt4cmVmOnRoaXMueHJlZixoYW5kbGVyOmUscGFnZUluZGV4OnRoaXMucGFnZUluZGV4LGlkRmFjdG9yeTp0aGlzLl9sb2NhbElkRmFjdG9yeSxmb250Q2FjaGU6dGhpcy5mb250Q2FjaGUsYnVpbHRJbkNNYXBDYWNoZTp0aGlzLmJ1aWx0SW5DTWFwQ2FjaGUsc3RhbmRhcmRGb250RGF0YUNhY2hlOnRoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlLGdsb2JhbEltYWdlQ2FjaGU6dGhpcy5nbG9iYWxJbWFnZUNhY2hlLHN5c3RlbUZvbnRDYWNoZTp0aGlzLnN5c3RlbUZvbnRDYWNoZSxvcHRpb25zOnRoaXMuZXZhbHVhdG9yT3B0aW9uc30pLGY9dGhpcy54ZmFGYWN0b3J5P251bGw6KDAsaS5nZXROZXdBbm5vdGF0aW9uc01hcCkobCk7bGV0IGc9bnVsbCxwPVByb21pc2UucmVzb2x2ZShudWxsKTtpZihmKXtjb25zdCBlPWYuZ2V0KHRoaXMucGFnZUluZGV4KTtpZihlKXtjb25zdCB0PXRoaXMucGRmTWFuYWdlci5lbnN1cmVEb2MoImFubm90YXRpb25HbG9iYWxzIik7bGV0IGk7Y29uc3Qgbz1uZXcgU2V0O2Zvcihjb25zdHtiaXRtYXBJZDp0LGJpdG1hcDphfW9mIGUpIXR8fGF8fG8uaGFzKHQpfHxvLmFkZCh0KTtjb25zdHtpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDpjfT10aGlzLmV2YWx1YXRvck9wdGlvbnM7aWYoby5zaXplPjApe2NvbnN0IHQ9ZS5zbGljZSgpO2Zvcihjb25zdFtlLGFdb2YgbCllLnN0YXJ0c1dpdGgoci5Bbm5vdGF0aW9uRWRpdG9yUHJlZml4KSYmYS5iaXRtYXAmJm8uaGFzKGEuYml0bWFwSWQpJiZ0LnB1c2goYSk7aT1uLkFubm90YXRpb25GYWN0b3J5LmdlbmVyYXRlSW1hZ2VzKHQsdGhpcy54cmVmLGMpfWVsc2UgaT1uLkFubm90YXRpb25GYWN0b3J5LmdlbmVyYXRlSW1hZ2VzKGUsdGhpcy54cmVmLGMpO2c9bmV3IHMuUmVmU2V0O3RoaXMuI3QoZSxnLG51bGwpO3A9dC50aGVuKCh0PT50P24uQW5ub3RhdGlvbkZhY3RvcnkucHJpbnROZXdBbm5vdGF0aW9ucyh0LGQsYSxlLGkpOm51bGwpKX19Y29uc3QgeT1Qcm9taXNlLmFsbChbaCx1XSkudGhlbigoKFtyXSk9Pntjb25zdCBuPW5ldyBtLk9wZXJhdG9yTGlzdChvLHQpO2Uuc2VuZCgiU3RhcnRSZW5kZXJQYWdlIix7dHJhbnNwYXJlbmN5OmQuaGFzQmxlbmRNb2Rlcyh0aGlzLnJlc291cmNlcyx0aGlzLm5vbkJsZW5kTW9kZXNTZXQpLHBhZ2VJbmRleDp0aGlzLnBhZ2VJbmRleCxjYWNoZUtleTpjfSk7cmV0dXJuIGQuZ2V0T3BlcmF0b3JMaXN0KHtzdHJlYW06cix0YXNrOmEscmVzb3VyY2VzOnRoaXMucmVzb3VyY2VzLG9wZXJhdG9yTGlzdDpufSkudGhlbigoZnVuY3Rpb24oKXtyZXR1cm4gbn0pKX0pKTtyZXR1cm4gUHJvbWlzZS5hbGwoW3ksdGhpcy5fcGFyc2VkQW5ub3RhdGlvbnMscF0pLnRoZW4oKGZ1bmN0aW9uKFtlLHQsbl0pe2lmKG4pe3Q9dC5maWx0ZXIoKGU9PiEoZS5yZWYmJmcuaGFzKGUucmVmKSkpKTtmb3IobGV0IGU9MCxhPW4ubGVuZ3RoO2U8YTtlKyspe2NvbnN0IHI9bltlXTtpZihyLnJlZlRvUmVwbGFjZSl7Y29uc3QgaT10LmZpbmRJbmRleCgoZT0+ZS5yZWYmJigwLHMuaXNSZWZzRXF1YWwpKGUucmVmLHIucmVmVG9SZXBsYWNlKSkpO2lmKGk+PTApe3Quc3BsaWNlKGksMSxyKTtuLnNwbGljZShlLS0sMSk7YS0tfX19dD10LmNvbmNhdChuKX1pZigwPT09dC5sZW5ndGh8fG8mci5SZW5kZXJpbmdJbnRlbnRGbGFnLkFOTk9UQVRJT05TX0RJU0FCTEUpe2UuZmx1c2goITApO3JldHVybntsZW5ndGg6ZS50b3RhbExlbmd0aH19Y29uc3QgaT0hIShvJnIuUmVuZGVyaW5nSW50ZW50RmxhZy5BTk5PVEFUSU9OU19GT1JNUyksYz0hIShvJnIuUmVuZGVyaW5nSW50ZW50RmxhZy5BTlkpLGg9ISEobyZyLlJlbmRlcmluZ0ludGVudEZsYWcuRElTUExBWSksdT0hIShvJnIuUmVuZGVyaW5nSW50ZW50RmxhZy5QUklOVCksZj1bXTtmb3IoY29uc3QgZSBvZiB0KShjfHxoJiZlLm11c3RCZVZpZXdlZChsLGkpfHx1JiZlLm11c3RCZVByaW50ZWQobCkpJiZmLnB1c2goZS5nZXRPcGVyYXRvckxpc3QoZCxhLG8saSxsKS5jYXRjaCgoZnVuY3Rpb24oZSl7KDAsci53YXJuKShgZ2V0T3BlcmF0b3JMaXN0IC0gaWdub3JpbmcgYW5ub3RhdGlvbiBkYXRhIGR1cmluZyAiJHthLm5hbWV9IiB0YXNrOiAiJHtlfSIuYCk7cmV0dXJue29wTGlzdDpudWxsLHNlcGFyYXRlRm9ybTohMSxzZXBhcmF0ZUNhbnZhczohMX19KSkpO3JldHVybiBQcm9taXNlLmFsbChmKS50aGVuKChmdW5jdGlvbih0KXtsZXQgYT0hMSxyPSExO2Zvcihjb25zdHtvcExpc3Q6bixzZXBhcmF0ZUZvcm06aSxzZXBhcmF0ZUNhbnZhczpzfW9mIHQpe2UuYWRkT3BMaXN0KG4pO2F8fD1pO3J8fD1zfWUuZmx1c2goITAse2Zvcm06YSxjYW52YXM6cn0pO3JldHVybntsZW5ndGg6ZS50b3RhbExlbmd0aH19KSl9KSl9ZXh0cmFjdFRleHRDb250ZW50KHtoYW5kbGVyOmUsdGFzazp0LGluY2x1ZGVNYXJrZWRDb250ZW50OmEsZGlzYWJsZU5vcm1hbGl6YXRpb246cixzaW5rOm59KXtjb25zdCBpPXRoaXMuZ2V0Q29udGVudFN0cmVhbSgpLHM9dGhpcy5sb2FkUmVzb3VyY2VzKFsiRXh0R1N0YXRlIiwiRm9udCIsIlByb3BlcnRpZXMiLCJYT2JqZWN0Il0pO3JldHVybiBQcm9taXNlLmFsbChbaSxzXSkudGhlbigoKFtpXSk9Pm5ldyBiLlBhcnRpYWxFdmFsdWF0b3Ioe3hyZWY6dGhpcy54cmVmLGhhbmRsZXI6ZSxwYWdlSW5kZXg6dGhpcy5wYWdlSW5kZXgsaWRGYWN0b3J5OnRoaXMuX2xvY2FsSWRGYWN0b3J5LGZvbnRDYWNoZTp0aGlzLmZvbnRDYWNoZSxidWlsdEluQ01hcENhY2hlOnRoaXMuYnVpbHRJbkNNYXBDYWNoZSxzdGFuZGFyZEZvbnREYXRhQ2FjaGU6dGhpcy5zdGFuZGFyZEZvbnREYXRhQ2FjaGUsZ2xvYmFsSW1hZ2VDYWNoZTp0aGlzLmdsb2JhbEltYWdlQ2FjaGUsc3lzdGVtRm9udENhY2hlOnRoaXMuc3lzdGVtRm9udENhY2hlLG9wdGlvbnM6dGhpcy5ldmFsdWF0b3JPcHRpb25zfSkuZ2V0VGV4dENvbnRlbnQoe3N0cmVhbTppLHRhc2s6dCxyZXNvdXJjZXM6dGhpcy5yZXNvdXJjZXMsaW5jbHVkZU1hcmtlZENvbnRlbnQ6YSxkaXNhYmxlTm9ybWFsaXphdGlvbjpyLHNpbms6bix2aWV3Qm94OnRoaXMudmlld30pKSl9YXN5bmMgZ2V0U3RydWN0VHJlZSgpe2NvbnN0IGU9YXdhaXQgdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coInN0cnVjdFRyZWVSb290Iik7aWYoIWUpcmV0dXJuIG51bGw7YXdhaXQgdGhpcy5fcGFyc2VkQW5ub3RhdGlvbnM7cmV0dXJuKGF3YWl0IHRoaXMucGRmTWFuYWdlci5lbnN1cmUodGhpcywiX3BhcnNlU3RydWN0VHJlZSIsW2VdKSkuc2VyaWFsaXphYmxlfV9wYXJzZVN0cnVjdFRyZWUoZSl7Y29uc3QgdD1uZXcgdy5TdHJ1Y3RUcmVlUGFnZShlLHRoaXMucGFnZURpY3QpO3QucGFyc2UodGhpcy5yZWYpO3JldHVybiB0fWFzeW5jIGdldEFubm90YXRpb25zRGF0YShlLHQsYSl7Y29uc3Qgbj1hd2FpdCB0aGlzLl9wYXJzZWRBbm5vdGF0aW9ucztpZigwPT09bi5sZW5ndGgpcmV0dXJuIG47Y29uc3QgaT1bXSxzPVtdO2xldCBvO2NvbnN0IGM9ISEoYSZyLlJlbmRlcmluZ0ludGVudEZsYWcuQU5ZKSxsPSEhKGEmci5SZW5kZXJpbmdJbnRlbnRGbGFnLkRJU1BMQVkpLGg9ISEoYSZyLlJlbmRlcmluZ0ludGVudEZsYWcuUFJJTlQpO2Zvcihjb25zdCBhIG9mIG4pe2NvbnN0IG49Y3x8bCYmYS52aWV3YWJsZTsobnx8aCYmYS5wcmludGFibGUpJiZpLnB1c2goYS5kYXRhKTtpZihhLmhhc1RleHRDb250ZW50JiZuKXtvfHw9bmV3IGIuUGFydGlhbEV2YWx1YXRvcih7eHJlZjp0aGlzLnhyZWYsaGFuZGxlcjplLHBhZ2VJbmRleDp0aGlzLnBhZ2VJbmRleCxpZEZhY3Rvcnk6dGhpcy5fbG9jYWxJZEZhY3RvcnksZm9udENhY2hlOnRoaXMuZm9udENhY2hlLGJ1aWx0SW5DTWFwQ2FjaGU6dGhpcy5idWlsdEluQ01hcENhY2hlLHN0YW5kYXJkRm9udERhdGFDYWNoZTp0aGlzLnN0YW5kYXJkRm9udERhdGFDYWNoZSxnbG9iYWxJbWFnZUNhY2hlOnRoaXMuZ2xvYmFsSW1hZ2VDYWNoZSxzeXN0ZW1Gb250Q2FjaGU6dGhpcy5zeXN0ZW1Gb250Q2FjaGUsb3B0aW9uczp0aGlzLmV2YWx1YXRvck9wdGlvbnN9KTtzLnB1c2goYS5leHRyYWN0VGV4dENvbnRlbnQobyx0LFstMS8wLC0xLzAsMS8wLDEvMF0pLmNhdGNoKChmdW5jdGlvbihlKXsoMCxyLndhcm4pKGBnZXRBbm5vdGF0aW9uc0RhdGEgLSBpZ25vcmluZyB0ZXh0Q29udGVudCBkdXJpbmcgIiR7dC5uYW1lfSIgdGFzazogIiR7ZX0iLmApfSkpKX19YXdhaXQgUHJvbWlzZS5hbGwocyk7cmV0dXJuIGl9Z2V0IGFubm90YXRpb25zKCl7Y29uc3QgZT10aGlzLl9nZXRJbmhlcml0YWJsZVByb3BlcnR5KCJBbm5vdHMiKTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiYW5ub3RhdGlvbnMiLEFycmF5LmlzQXJyYXkoZSk/ZTpbXSl9Z2V0IF9wYXJzZWRBbm5vdGF0aW9ucygpe2NvbnN0IGU9dGhpcy5wZGZNYW5hZ2VyLmVuc3VyZSh0aGlzLCJhbm5vdGF0aW9ucyIpLnRoZW4oKGFzeW5jIGU9PntpZigwPT09ZS5sZW5ndGgpcmV0dXJuIGU7Y29uc3QgdD1hd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlRG9jKCJhbm5vdGF0aW9uR2xvYmFscyIpO2lmKCF0KXJldHVybltdO2NvbnN0IGE9W107Zm9yKGNvbnN0IGkgb2YgZSlhLnB1c2gobi5Bbm5vdGF0aW9uRmFjdG9yeS5jcmVhdGUodGhpcy54cmVmLGksdCx0aGlzLl9sb2NhbElkRmFjdG9yeSwhMSx0aGlzLnJlZikuY2F0Y2goKGZ1bmN0aW9uKGUpeygwLHIud2FybikoYF9wYXJzZWRBbm5vdGF0aW9uczogIiR7ZX0iLmApO3JldHVybiBudWxsfSkpKTtjb25zdCBpPVtdO2xldCBzO2Zvcihjb25zdCBlIG9mIGF3YWl0IFByb21pc2UuYWxsKGEpKWUmJihlIGluc3RhbmNlb2Ygbi5Qb3B1cEFubm90YXRpb24/KHN8fD1bXSkucHVzaChlKTppLnB1c2goZSkpO3MmJmkucHVzaCguLi5zKTtyZXR1cm4gaX0pKTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiX3BhcnNlZEFubm90YXRpb25zIixlKX1nZXQganNBY3Rpb25zKCl7Y29uc3QgZT0oMCxpLmNvbGxlY3RBY3Rpb25zKSh0aGlzLnhyZWYsdGhpcy5wYWdlRGljdCxyLlBhZ2VBY3Rpb25FdmVudFR5cGUpO3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJqc0FjdGlvbnMiLGUpfX10LlBhZ2U9UGFnZTtjb25zdCB2PW5ldyBVaW50OEFycmF5KFszNyw4MCw2OCw3MCw0NV0pLEY9bmV3IFVpbnQ4QXJyYXkoWzExNSwxMTYsOTcsMTE0LDExNiwxMjAsMTE0LDEwMSwxMDJdKSxPPW5ldyBVaW50OEFycmF5KFsxMDEsMTEwLDEwMCwxMTEsOTgsMTA2XSk7ZnVuY3Rpb24gZmluZChlLHQsYT0xMDI0LHI9ITEpe2NvbnN0IG49dC5sZW5ndGgsaT1lLnBlZWtCeXRlcyhhKSxzPWkubGVuZ3RoLW47aWYoczw9MClyZXR1cm4hMTtpZihyKXtjb25zdCBhPW4tMTtsZXQgcj1pLmxlbmd0aC0xO2Zvcig7cj49YTspe2xldCBzPTA7Zm9yKDtzPG4mJmlbci1zXT09PXRbYS1zXTspcysrO2lmKHM+PW4pe2UucG9zKz1yLWE7cmV0dXJuITB9ci0tfX1lbHNle2xldCBhPTA7Zm9yKDthPD1zOyl7bGV0IHI9MDtmb3IoO3I8biYmaVthK3JdPT09dFtyXTspcisrO2lmKHI+PW4pe2UucG9zKz1hO3JldHVybiEwfWErK319cmV0dXJuITF9dC5QREZEb2N1bWVudD1jbGFzcyBQREZEb2N1bWVudHtjb25zdHJ1Y3RvcihlLHQpe2lmKHQubGVuZ3RoPD0wKXRocm93IG5ldyByLkludmFsaWRQREZFeGNlcHRpb24oIlRoZSBQREYgZmlsZSBpcyBlbXB0eSwgaS5lLiBpdHMgc2l6ZSBpcyB6ZXJvIGJ5dGVzLiIpO3RoaXMucGRmTWFuYWdlcj1lO3RoaXMuc3RyZWFtPXQ7dGhpcy54cmVmPW5ldyBDLlhSZWYodCxlKTt0aGlzLl9wYWdlUHJvbWlzZXM9bmV3IE1hcDt0aGlzLl92ZXJzaW9uPW51bGw7Y29uc3QgYT17Zm9udDowfTt0aGlzLl9nbG9iYWxJZEZhY3Rvcnk9Y2xhc3N7c3RhdGljIGdldERvY0lkKCl7cmV0dXJuYGdfJHtlLmRvY0lkfWB9c3RhdGljIGNyZWF0ZUZvbnRJZCgpe3JldHVybiJmIisgKythLmZvbnR9c3RhdGljIGNyZWF0ZU9iaklkKCl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBgY3JlYXRlT2JqSWRgIGNhbGxlZC4iKX1zdGF0aWMgZ2V0UGFnZU9iaklkKCl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBgZ2V0UGFnZU9iaklkYCBjYWxsZWQuIil9fX1wYXJzZShlKXt0aGlzLnhyZWYucGFyc2UoZSk7dGhpcy5jYXRhbG9nPW5ldyBoLkNhdGFsb2codGhpcy5wZGZNYW5hZ2VyLHRoaXMueHJlZil9Z2V0IGxpbmVhcml6YXRpb24oKXtsZXQgZT1udWxsO3RyeXtlPWYuTGluZWFyaXphdGlvbi5jcmVhdGUodGhpcy5zdHJlYW0pfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBpLk1pc3NpbmdEYXRhRXhjZXB0aW9uKXRocm93IGU7KDAsci5pbmZvKShlKX1yZXR1cm4oMCxyLnNoYWRvdykodGhpcywibGluZWFyaXphdGlvbiIsZSl9Z2V0IHN0YXJ0WFJlZigpe2NvbnN0IGU9dGhpcy5zdHJlYW07bGV0IHQ9MDtpZih0aGlzLmxpbmVhcml6YXRpb24pe2UucmVzZXQoKTtmaW5kKGUsTykmJih0PWUucG9zKzYtZS5zdGFydCl9ZWxzZXtjb25zdCBhPTEwMjQscj1GLmxlbmd0aDtsZXQgbj0hMSxzPWUuZW5kO2Zvcig7IW4mJnM+MDspe3MtPWEtcjtzPDAmJihzPTApO2UucG9zPXM7bj1maW5kKGUsRixhLCEwKX1pZihuKXtlLnNraXAoOSk7bGV0IGE7ZG97YT1lLmdldEJ5dGUoKX13aGlsZSgoMCxpLmlzV2hpdGVTcGFjZSkoYSkpO2xldCByPSIiO2Zvcig7YT49MzImJmE8PTU3Oyl7cis9U3RyaW5nLmZyb21DaGFyQ29kZShhKTthPWUuZ2V0Qnl0ZSgpfXQ9cGFyc2VJbnQociwxMCk7aXNOYU4odCkmJih0PTApfX1yZXR1cm4oMCxyLnNoYWRvdykodGhpcywic3RhcnRYUmVmIix0KX1jaGVja0hlYWRlcigpe2NvbnN0IGU9dGhpcy5zdHJlYW07ZS5yZXNldCgpO2lmKCFmaW5kKGUsdikpcmV0dXJuO2UubW92ZVN0YXJ0KCk7ZS5za2lwKHYubGVuZ3RoKTtsZXQgdCxhPSIiO2Zvcig7KHQ9ZS5nZXRCeXRlKCkpPjMyJiZhLmxlbmd0aDw3OylhKz1TdHJpbmcuZnJvbUNoYXJDb2RlKHQpO2kuUERGX1ZFUlNJT05fUkVHRVhQLnRlc3QoYSk/dGhpcy5fdmVyc2lvbj1hOigwLHIud2FybikoYEludmFsaWQgUERGIGhlYWRlciB2ZXJzaW9uOiAke2F9YCl9cGFyc2VTdGFydFhSZWYoKXt0aGlzLnhyZWYuc2V0U3RhcnRYUmVmKHRoaXMuc3RhcnRYUmVmKX1nZXQgbnVtUGFnZXMoKXtsZXQgZT0wO2U9dGhpcy5jYXRhbG9nLmhhc0FjdHVhbE51bVBhZ2VzP3RoaXMuY2F0YWxvZy5udW1QYWdlczp0aGlzLnhmYUZhY3Rvcnk/dGhpcy54ZmFGYWN0b3J5LmdldE51bVBhZ2VzKCk6dGhpcy5saW5lYXJpemF0aW9uP3RoaXMubGluZWFyaXphdGlvbi5udW1QYWdlczp0aGlzLmNhdGFsb2cubnVtUGFnZXM7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsIm51bVBhZ2VzIixlKX1faGFzT25seURvY3VtZW50U2lnbmF0dXJlcyhlLHQ9MCl7cmV0dXJuISFBcnJheS5pc0FycmF5KGUpJiZlLmV2ZXJ5KChlPT57aWYoISgoZT10aGlzLnhyZWYuZmV0Y2hJZlJlZihlKSlpbnN0YW5jZW9mIHMuRGljdCkpcmV0dXJuITE7aWYoZS5oYXMoIktpZHMiKSl7aWYoKyt0PjEwKXsoMCxyLndhcm4pKCJfaGFzT25seURvY3VtZW50U2lnbmF0dXJlczogbWF4aW11bSByZWN1cnNpb24gZGVwdGggcmVhY2hlZCIpO3JldHVybiExfXJldHVybiB0aGlzLl9oYXNPbmx5RG9jdW1lbnRTaWduYXR1cmVzKGUuZ2V0KCJLaWRzIiksdCl9Y29uc3QgYT0oMCxzLmlzTmFtZSkoZS5nZXQoIkZUIiksIlNpZyIpLG49ZS5nZXQoIlJlY3QiKSxpPUFycmF5LmlzQXJyYXkobikmJm4uZXZlcnkoKGU9PjA9PT1lKSk7cmV0dXJuIGEmJml9KSl9Z2V0IF94ZmFTdHJlYW1zKCl7Y29uc3QgZT10aGlzLmNhdGFsb2cuYWNyb0Zvcm07aWYoIWUpcmV0dXJuIG51bGw7Y29uc3QgdD1lLmdldCgiWEZBIiksYT17InhkcDp4ZHAiOiIiLHRlbXBsYXRlOiIiLGRhdGFzZXRzOiIiLGNvbmZpZzoiIixjb25uZWN0aW9uU2V0OiIiLGxvY2FsZVNldDoiIixzdHlsZXNoZWV0OiIiLCIveGRwOnhkcCI6IiJ9O2lmKHQgaW5zdGFuY2VvZiBjLkJhc2VTdHJlYW0mJiF0LmlzRW1wdHkpe2FbInhkcDp4ZHAiXT10O3JldHVybiBhfWlmKCFBcnJheS5pc0FycmF5KHQpfHwwPT09dC5sZW5ndGgpcmV0dXJuIG51bGw7Zm9yKGxldCBlPTAscj10Lmxlbmd0aDtlPHI7ZSs9Mil7bGV0IG47bj0wPT09ZT8ieGRwOnhkcCI6ZT09PXItMj8iL3hkcDp4ZHAiOnRbZV07aWYoIWEuaGFzT3duUHJvcGVydHkobikpY29udGludWU7Y29uc3QgaT10aGlzLnhyZWYuZmV0Y2hJZlJlZih0W2UrMV0pO2kgaW5zdGFuY2VvZiBjLkJhc2VTdHJlYW0mJiFpLmlzRW1wdHkmJihhW25dPWkpfXJldHVybiBhfWdldCB4ZmFEYXRhc2V0cygpe2NvbnN0IGU9dGhpcy5feGZhU3RyZWFtcztpZighZSlyZXR1cm4oMCxyLnNoYWRvdykodGhpcywieGZhRGF0YXNldHMiLG51bGwpO2Zvcihjb25zdCB0IG9mWyJkYXRhc2V0cyIsInhkcDp4ZHAiXSl7Y29uc3QgYT1lW3RdO2lmKGEpdHJ5e2NvbnN0IGU9e1t0XTooMCxyLnN0cmluZ1RvVVRGOFN0cmluZykoYS5nZXRTdHJpbmcoKSl9O3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJ4ZmFEYXRhc2V0cyIsbmV3IGQuRGF0YXNldFJlYWRlcihlKSl9Y2F0Y2h7KDAsci53YXJuKSgiWEZBIC0gSW52YWxpZCB1dGYtOCBzdHJpbmcuIik7YnJlYWt9fXJldHVybigwLHIuc2hhZG93KSh0aGlzLCJ4ZmFEYXRhc2V0cyIsbnVsbCl9Z2V0IHhmYURhdGEoKXtjb25zdCBlPXRoaXMuX3hmYVN0cmVhbXM7aWYoIWUpcmV0dXJuIG51bGw7Y29uc3QgdD1PYmplY3QuY3JlYXRlKG51bGwpO2Zvcihjb25zdFthLG5db2YgT2JqZWN0LmVudHJpZXMoZSkpaWYobil0cnl7dFthXT0oMCxyLnN0cmluZ1RvVVRGOFN0cmluZykobi5nZXRTdHJpbmcoKSl9Y2F0Y2h7KDAsci53YXJuKSgiWEZBIC0gSW52YWxpZCB1dGYtOCBzdHJpbmcuIik7cmV0dXJuIG51bGx9cmV0dXJuIHR9Z2V0IHhmYUZhY3RvcnkoKXtsZXQgZTt0aGlzLnBkZk1hbmFnZXIuZW5hYmxlWGZhJiZ0aGlzLmNhdGFsb2cubmVlZHNSZW5kZXJpbmcmJnRoaXMuZm9ybUluZm8uaGFzWGZhJiYhdGhpcy5mb3JtSW5mby5oYXNBY3JvRm9ybSYmKGU9dGhpcy54ZmFEYXRhKTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywieGZhRmFjdG9yeSIsZT9uZXcgeC5YRkFGYWN0b3J5KGUpOm51bGwpfWdldCBpc1B1cmVYZmEoKXtyZXR1cm4hIXRoaXMueGZhRmFjdG9yeSYmdGhpcy54ZmFGYWN0b3J5LmlzVmFsaWQoKX1nZXQgaHRtbEZvclhmYSgpe3JldHVybiB0aGlzLnhmYUZhY3Rvcnk/dGhpcy54ZmFGYWN0b3J5LmdldFBhZ2VzKCk6bnVsbH1hc3luYyBsb2FkWGZhSW1hZ2VzKCl7Y29uc3QgZT1hd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygieGZhSW1hZ2VzIik7aWYoIWUpcmV0dXJuO2NvbnN0IHQ9ZS5nZXRLZXlzKCksYT1uZXcgcC5PYmplY3RMb2FkZXIoZSx0LHRoaXMueHJlZik7YXdhaXQgYS5sb2FkKCk7Y29uc3Qgcj1uZXcgTWFwO2Zvcihjb25zdCBhIG9mIHQpe2NvbnN0IHQ9ZS5nZXQoYSk7dCBpbnN0YW5jZW9mIGMuQmFzZVN0cmVhbSYmci5zZXQoYSx0LmdldEJ5dGVzKCkpfXRoaXMueGZhRmFjdG9yeS5zZXRJbWFnZXMocil9YXN5bmMgbG9hZFhmYUZvbnRzKGUsdCl7Y29uc3QgYT1hd2FpdCB0aGlzLnBkZk1hbmFnZXIuZW5zdXJlQ2F0YWxvZygiYWNyb0Zvcm0iKTtpZighYSlyZXR1cm47Y29uc3Qgbj1hd2FpdCBhLmdldEFzeW5jKCJEUiIpO2lmKCEobiBpbnN0YW5jZW9mIHMuRGljdCkpcmV0dXJuO2NvbnN0IGM9bmV3IHAuT2JqZWN0TG9hZGVyKG4sWyJGb250Il0sdGhpcy54cmVmKTthd2FpdCBjLmxvYWQoKTtjb25zdCBsPW4uZ2V0KCJGb250Iik7aWYoIShsIGluc3RhbmNlb2Ygcy5EaWN0KSlyZXR1cm47Y29uc3QgaD1PYmplY3QuYXNzaWduKE9iamVjdC5jcmVhdGUobnVsbCksdGhpcy5wZGZNYW5hZ2VyLmV2YWx1YXRvck9wdGlvbnMpO2gudXNlU3lzdGVtRm9udHM9ITE7Y29uc3QgdT1uZXcgYi5QYXJ0aWFsRXZhbHVhdG9yKHt4cmVmOnRoaXMueHJlZixoYW5kbGVyOmUscGFnZUluZGV4Oi0xLGlkRmFjdG9yeTp0aGlzLl9nbG9iYWxJZEZhY3RvcnksZm9udENhY2hlOnRoaXMuY2F0YWxvZy5mb250Q2FjaGUsYnVpbHRJbkNNYXBDYWNoZTp0aGlzLmNhdGFsb2cuYnVpbHRJbkNNYXBDYWNoZSxzdGFuZGFyZEZvbnREYXRhQ2FjaGU6dGhpcy5jYXRhbG9nLnN0YW5kYXJkRm9udERhdGFDYWNoZSxvcHRpb25zOmh9KSxkPW5ldyBtLk9wZXJhdG9yTGlzdCxmPVtdLGc9e2dldCBmb250KCl7cmV0dXJuIGYuYXQoLTEpfSxzZXQgZm9udChlKXtmLnB1c2goZSl9LGNsb25lKCl7cmV0dXJuIHRoaXN9fSx5PW5ldyBNYXA7bC5mb3JFYWNoKCgoZSx0KT0+e3kuc2V0KGUsdCl9KSk7Y29uc3Qgdz1bXTtmb3IoY29uc3RbZSxhXW9mIHkpe2NvbnN0IG89YS5nZXQoIkZvbnREZXNjcmlwdG9yIik7aWYoIShvIGluc3RhbmNlb2Ygcy5EaWN0KSljb250aW51ZTtsZXQgYz1vLmdldCgiRm9udEZhbWlseSIpO2M9Yy5yZXBsYWNlQWxsKC9bIF0rKFxkKS9nLCIkMSIpO2NvbnN0IGw9e2ZvbnRGYW1pbHk6Yyxmb250V2VpZ2h0Om8uZ2V0KCJGb250V2VpZ2h0IiksaXRhbGljQW5nbGU6LW8uZ2V0KCJJdGFsaWNBbmdsZSIpfTsoMCxpLnZhbGlkYXRlQ1NTRm9udCkobCkmJncucHVzaCh1LmhhbmRsZVNldEZvbnQobixbcy5OYW1lLmdldChlKSwxXSxudWxsLGQsdCxnLG51bGwsbCkuY2F0Y2goKGZ1bmN0aW9uKGUpeygwLHIud2FybikoYGxvYWRYZmFGb250czogIiR7ZX0iLmApO3JldHVybiBudWxsfSkpKX1hd2FpdCBQcm9taXNlLmFsbCh3KTtjb25zdCBTPXRoaXMueGZhRmFjdG9yeS5zZXRGb250cyhmKTtpZighUylyZXR1cm47aC5pZ25vcmVFcnJvcnM9ITA7dy5sZW5ndGg9MDtmLmxlbmd0aD0wO2NvbnN0IHg9bmV3IFNldDtmb3IoY29uc3QgZSBvZiBTKSgwLG8uZ2V0WGZhRm9udE5hbWUpKGAke2V9LVJlZ3VsYXJgKXx8eC5hZGQoZSk7eC5zaXplJiZTLnB1c2goIlBkZkpTLUZhbGxiYWNrIik7Zm9yKGNvbnN0IGUgb2YgUylpZigheC5oYXMoZSkpZm9yKGNvbnN0IGEgb2Zbe25hbWU6IlJlZ3VsYXIiLGZvbnRXZWlnaHQ6NDAwLGl0YWxpY0FuZ2xlOjB9LHtuYW1lOiJCb2xkIixmb250V2VpZ2h0OjcwMCxpdGFsaWNBbmdsZTowfSx7bmFtZToiSXRhbGljIixmb250V2VpZ2h0OjQwMCxpdGFsaWNBbmdsZToxMn0se25hbWU6IkJvbGRJdGFsaWMiLGZvbnRXZWlnaHQ6NzAwLGl0YWxpY0FuZ2xlOjEyfV0pe2NvbnN0IGk9YCR7ZX0tJHthLm5hbWV9YCxjPSgwLG8uZ2V0WGZhRm9udERpY3QpKGkpO3cucHVzaCh1LmhhbmRsZVNldEZvbnQobixbcy5OYW1lLmdldChpKSwxXSxudWxsLGQsdCxnLGMse2ZvbnRGYW1pbHk6ZSxmb250V2VpZ2h0OmEuZm9udFdlaWdodCxpdGFsaWNBbmdsZTphLml0YWxpY0FuZ2xlfSkuY2F0Y2goKGZ1bmN0aW9uKGUpeygwLHIud2FybikoYGxvYWRYZmFGb250czogIiR7ZX0iLmApO3JldHVybiBudWxsfSkpKX1hd2FpdCBQcm9taXNlLmFsbCh3KTt0aGlzLnhmYUZhY3RvcnkuYXBwZW5kRm9udHMoZix4KX1hc3luYyBzZXJpYWxpemVYZmFEYXRhKGUpe3JldHVybiB0aGlzLnhmYUZhY3Rvcnk/dGhpcy54ZmFGYWN0b3J5LnNlcmlhbGl6ZURhdGEoZSk6bnVsbH1nZXQgdmVyc2lvbigpe3JldHVybiB0aGlzLmNhdGFsb2cudmVyc2lvbnx8dGhpcy5fdmVyc2lvbn1nZXQgZm9ybUluZm8oKXtjb25zdCBlPXtoYXNGaWVsZHM6ITEsaGFzQWNyb0Zvcm06ITEsaGFzWGZhOiExLGhhc1NpZ25hdHVyZXM6ITF9LHQ9dGhpcy5jYXRhbG9nLmFjcm9Gb3JtO2lmKCF0KXJldHVybigwLHIuc2hhZG93KSh0aGlzLCJmb3JtSW5mbyIsZSk7dHJ5e2NvbnN0IGE9dC5nZXQoIkZpZWxkcyIpLHI9QXJyYXkuaXNBcnJheShhKSYmYS5sZW5ndGg+MDtlLmhhc0ZpZWxkcz1yO2NvbnN0IG49dC5nZXQoIlhGQSIpO2UuaGFzWGZhPUFycmF5LmlzQXJyYXkobikmJm4ubGVuZ3RoPjB8fG4gaW5zdGFuY2VvZiBjLkJhc2VTdHJlYW0mJiFuLmlzRW1wdHk7Y29uc3QgaT0hISgxJnQuZ2V0KCJTaWdGbGFncyIpKSxzPWkmJnRoaXMuX2hhc09ubHlEb2N1bWVudFNpZ25hdHVyZXMoYSk7ZS5oYXNBY3JvRm9ybT1yJiYhcztlLmhhc1NpZ25hdHVyZXM9aX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgaS5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLHIud2FybikoYENhbm5vdCBmZXRjaCBmb3JtIGluZm9ybWF0aW9uOiAiJHtlfSIuYCl9cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImZvcm1JbmZvIixlKX1nZXQgZG9jdW1lbnRJbmZvKCl7Y29uc3QgZT17UERGRm9ybWF0VmVyc2lvbjp0aGlzLnZlcnNpb24sTGFuZ3VhZ2U6dGhpcy5jYXRhbG9nLmxhbmcsRW5jcnlwdEZpbHRlck5hbWU6dGhpcy54cmVmLmVuY3J5cHQ/dGhpcy54cmVmLmVuY3J5cHQuZmlsdGVyTmFtZTpudWxsLElzTGluZWFyaXplZDohIXRoaXMubGluZWFyaXphdGlvbixJc0Fjcm9Gb3JtUHJlc2VudDp0aGlzLmZvcm1JbmZvLmhhc0Fjcm9Gb3JtLElzWEZBUHJlc2VudDp0aGlzLmZvcm1JbmZvLmhhc1hmYSxJc0NvbGxlY3Rpb25QcmVzZW50OiEhdGhpcy5jYXRhbG9nLmNvbGxlY3Rpb24sSXNTaWduYXR1cmVzUHJlc2VudDp0aGlzLmZvcm1JbmZvLmhhc1NpZ25hdHVyZXN9O2xldCB0O3RyeXt0PXRoaXMueHJlZi50cmFpbGVyLmdldCgiSW5mbyIpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBpLk1pc3NpbmdEYXRhRXhjZXB0aW9uKXRocm93IGU7KDAsci5pbmZvKSgiVGhlIGRvY3VtZW50IGluZm9ybWF0aW9uIGRpY3Rpb25hcnkgaXMgaW52YWxpZC4iKX1pZighKHQgaW5zdGFuY2VvZiBzLkRpY3QpKXJldHVybigwLHIuc2hhZG93KSh0aGlzLCJkb2N1bWVudEluZm8iLGUpO2Zvcihjb25zdCBhIG9mIHQuZ2V0S2V5cygpKXtjb25zdCBuPXQuZ2V0KGEpO3N3aXRjaChhKXtjYXNlIlRpdGxlIjpjYXNlIkF1dGhvciI6Y2FzZSJTdWJqZWN0IjpjYXNlIktleXdvcmRzIjpjYXNlIkNyZWF0b3IiOmNhc2UiUHJvZHVjZXIiOmNhc2UiQ3JlYXRpb25EYXRlIjpjYXNlIk1vZERhdGUiOmlmKCJzdHJpbmciPT10eXBlb2Ygbil7ZVthXT0oMCxyLnN0cmluZ1RvUERGU3RyaW5nKShuKTtjb250aW51ZX1icmVhaztjYXNlIlRyYXBwZWQiOmlmKG4gaW5zdGFuY2VvZiBzLk5hbWUpe2VbYV09bjtjb250aW51ZX1icmVhaztkZWZhdWx0OmxldCB0O3N3aXRjaCh0eXBlb2Ygbil7Y2FzZSJzdHJpbmciOnQ9KDAsci5zdHJpbmdUb1BERlN0cmluZykobik7YnJlYWs7Y2FzZSJudW1iZXIiOmNhc2UiYm9vbGVhbiI6dD1uO2JyZWFrO2RlZmF1bHQ6biBpbnN0YW5jZW9mIHMuTmFtZSYmKHQ9bil9aWYodm9pZCAwPT09dCl7KDAsci53YXJuKShgQmFkIHZhbHVlLCBmb3IgY3VzdG9tIGtleSAiJHthfSIsIGluIEluZm86ICR7bn0uYCk7Y29udGludWV9ZS5DdXN0b218fChlLkN1c3RvbT1PYmplY3QuY3JlYXRlKG51bGwpKTtlLkN1c3RvbVthXT10O2NvbnRpbnVlfSgwLHIud2FybikoYEJhZCB2YWx1ZSwgZm9yIGtleSAiJHthfSIsIGluIEluZm86ICR7bn0uYCl9cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImRvY3VtZW50SW5mbyIsZSl9Z2V0IGZpbmdlcnByaW50cygpe2Z1bmN0aW9uIHZhbGlkYXRlKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZSYmZS5sZW5ndGg+MCYmIlwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIiE9PWV9ZnVuY3Rpb24gaGV4U3RyaW5nKGUpe2NvbnN0IHQ9W107Zm9yKGNvbnN0IGEgb2YgZSl7Y29uc3QgZT1hLnRvU3RyaW5nKDE2KTt0LnB1c2goZS5wYWRTdGFydCgyLCIwIikpfXJldHVybiB0LmpvaW4oIiIpfWNvbnN0IGU9dGhpcy54cmVmLnRyYWlsZXIuZ2V0KCJJRCIpO2xldCB0LGE7aWYoQXJyYXkuaXNBcnJheShlKSYmdmFsaWRhdGUoZVswXSkpe3Q9KDAsci5zdHJpbmdUb0J5dGVzKShlWzBdKTtlWzFdIT09ZVswXSYmdmFsaWRhdGUoZVsxXSkmJihhPSgwLHIuc3RyaW5nVG9CeXRlcykoZVsxXSkpfWVsc2UgdD0oMCxsLmNhbGN1bGF0ZU1ENSkodGhpcy5zdHJlYW0uZ2V0Qnl0ZVJhbmdlKDAsMTAyNCksMCwxMDI0KTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiZmluZ2VycHJpbnRzIixbaGV4U3RyaW5nKHQpLGE/aGV4U3RyaW5nKGEpOm51bGxdKX1hc3luYyBfZ2V0TGluZWFyaXphdGlvblBhZ2UoZSl7Y29uc3R7Y2F0YWxvZzp0LGxpbmVhcml6YXRpb246YSx4cmVmOm59PXRoaXMsaT1zLlJlZi5nZXQoYS5vYmplY3ROdW1iZXJGaXJzdCwwKTt0cnl7Y29uc3QgZT1hd2FpdCBuLmZldGNoQXN5bmMoaSk7aWYoZSBpbnN0YW5jZW9mIHMuRGljdCl7bGV0IGE9ZS5nZXRSYXcoIlR5cGUiKTthIGluc3RhbmNlb2Ygcy5SZWYmJihhPWF3YWl0IG4uZmV0Y2hBc3luYyhhKSk7aWYoKDAscy5pc05hbWUpKGEsIlBhZ2UiKXx8IWUuaGFzKCJUeXBlIikmJiFlLmhhcygiS2lkcyIpKXt0LnBhZ2VLaWRzQ291bnRDYWNoZS5oYXMoaSl8fHQucGFnZUtpZHNDb3VudENhY2hlLnB1dChpLDEpO3QucGFnZUluZGV4Q2FjaGUuaGFzKGkpfHx0LnBhZ2VJbmRleENhY2hlLnB1dChpLDApO3JldHVybltlLGldfX10aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiVGhlIExpbmVhcml6YXRpb24gZGljdGlvbmFyeSBkb2Vzbid0IHBvaW50IHRvIGEgdmFsaWQgUGFnZSBkaWN0aW9uYXJ5LiIpfWNhdGNoKGEpeygwLHIud2FybikoYF9nZXRMaW5lYXJpemF0aW9uUGFnZTogIiR7YS5tZXNzYWdlfSIuYCk7cmV0dXJuIHQuZ2V0UGFnZURpY3QoZSl9fWdldFBhZ2UoZSl7Y29uc3QgdD10aGlzLl9wYWdlUHJvbWlzZXMuZ2V0KGUpO2lmKHQpcmV0dXJuIHQ7Y29uc3R7Y2F0YWxvZzphLGxpbmVhcml6YXRpb246cix4ZmFGYWN0b3J5Om59PXRoaXM7bGV0IGk7aT1uP1Byb21pc2UucmVzb2x2ZShbcy5EaWN0LmVtcHR5LG51bGxdKTpyPy5wYWdlRmlyc3Q9PT1lP3RoaXMuX2dldExpbmVhcml6YXRpb25QYWdlKGUpOmEuZ2V0UGFnZURpY3QoZSk7aT1pLnRoZW4oKChbdCxyXSk9Pm5ldyBQYWdlKHtwZGZNYW5hZ2VyOnRoaXMucGRmTWFuYWdlcix4cmVmOnRoaXMueHJlZixwYWdlSW5kZXg6ZSxwYWdlRGljdDp0LHJlZjpyLGdsb2JhbElkRmFjdG9yeTp0aGlzLl9nbG9iYWxJZEZhY3RvcnksZm9udENhY2hlOmEuZm9udENhY2hlLGJ1aWx0SW5DTWFwQ2FjaGU6YS5idWlsdEluQ01hcENhY2hlLHN0YW5kYXJkRm9udERhdGFDYWNoZTphLnN0YW5kYXJkRm9udERhdGFDYWNoZSxnbG9iYWxJbWFnZUNhY2hlOmEuZ2xvYmFsSW1hZ2VDYWNoZSxzeXN0ZW1Gb250Q2FjaGU6YS5zeXN0ZW1Gb250Q2FjaGUsbm9uQmxlbmRNb2Rlc1NldDphLm5vbkJsZW5kTW9kZXNTZXQseGZhRmFjdG9yeTpufSkpKTt0aGlzLl9wYWdlUHJvbWlzZXMuc2V0KGUsaSk7cmV0dXJuIGl9YXN5bmMgY2hlY2tGaXJzdFBhZ2UoZT0hMSl7aWYoIWUpdHJ5e2F3YWl0IHRoaXMuZ2V0UGFnZSgwKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgaS5YUmVmRW50cnlFeGNlcHRpb24pe3RoaXMuX3BhZ2VQcm9taXNlcy5kZWxldGUoMCk7YXdhaXQgdGhpcy5jbGVhbnVwKCk7dGhyb3cgbmV3IGkuWFJlZlBhcnNlRXhjZXB0aW9ufX19YXN5bmMgY2hlY2tMYXN0UGFnZShlPSExKXtjb25zdHtjYXRhbG9nOnQscGRmTWFuYWdlcjphfT10aGlzO3Quc2V0QWN0dWFsTnVtUGFnZXMoKTtsZXQgbjt0cnl7YXdhaXQgUHJvbWlzZS5hbGwoW2EuZW5zdXJlRG9jKCJ4ZmFGYWN0b3J5IiksYS5lbnN1cmVEb2MoImxpbmVhcml6YXRpb24iKSxhLmVuc3VyZUNhdGFsb2coIm51bVBhZ2VzIildKTtpZih0aGlzLnhmYUZhY3RvcnkpcmV0dXJuO249dGhpcy5saW5lYXJpemF0aW9uP3RoaXMubGluZWFyaXphdGlvbi5udW1QYWdlczp0Lm51bVBhZ2VzO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKG4pKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJQYWdlIGNvdW50IGlzIG5vdCBhbiBpbnRlZ2VyLiIpO2lmKG48PTEpcmV0dXJuO2F3YWl0IHRoaXMuZ2V0UGFnZShuLTEpfWNhdGNoKHMpe3RoaXMuX3BhZ2VQcm9taXNlcy5kZWxldGUobi0xKTthd2FpdCB0aGlzLmNsZWFudXAoKTtpZihzIGluc3RhbmNlb2YgaS5YUmVmRW50cnlFeGNlcHRpb24mJiFlKXRocm93IG5ldyBpLlhSZWZQYXJzZUV4Y2VwdGlvbjsoMCxyLndhcm4pKGBjaGVja0xhc3RQYWdlIC0gaW52YWxpZCAvUGFnZXMgdHJlZSAvQ291bnQ6ICR7bn0uYCk7bGV0IG87dHJ5e289YXdhaXQgdC5nZXRBbGxQYWdlRGljdHMoZSl9Y2F0Y2goYSl7aWYoYSBpbnN0YW5jZW9mIGkuWFJlZkVudHJ5RXhjZXB0aW9uJiYhZSl0aHJvdyBuZXcgaS5YUmVmUGFyc2VFeGNlcHRpb247dC5zZXRBY3R1YWxOdW1QYWdlcygxKTtyZXR1cm59Zm9yKGNvbnN0W2UsW3Isbl1db2Ygbyl7bGV0IGk7aWYociBpbnN0YW5jZW9mIEVycm9yKXtpPVByb21pc2UucmVqZWN0KHIpO2kuY2F0Y2goKCgpPT57fSkpfWVsc2UgaT1Qcm9taXNlLnJlc29sdmUobmV3IFBhZ2Uoe3BkZk1hbmFnZXI6YSx4cmVmOnRoaXMueHJlZixwYWdlSW5kZXg6ZSxwYWdlRGljdDpyLHJlZjpuLGdsb2JhbElkRmFjdG9yeTp0aGlzLl9nbG9iYWxJZEZhY3RvcnksZm9udENhY2hlOnQuZm9udENhY2hlLGJ1aWx0SW5DTWFwQ2FjaGU6dC5idWlsdEluQ01hcENhY2hlLHN0YW5kYXJkRm9udERhdGFDYWNoZTp0LnN0YW5kYXJkRm9udERhdGFDYWNoZSxnbG9iYWxJbWFnZUNhY2hlOnQuZ2xvYmFsSW1hZ2VDYWNoZSxzeXN0ZW1Gb250Q2FjaGU6dC5zeXN0ZW1Gb250Q2FjaGUsbm9uQmxlbmRNb2Rlc1NldDp0Lm5vbkJsZW5kTW9kZXNTZXQseGZhRmFjdG9yeTpudWxsfSkpO3RoaXMuX3BhZ2VQcm9taXNlcy5zZXQoZSxpKX10LnNldEFjdHVhbE51bVBhZ2VzKG8uc2l6ZSl9fWZvbnRGYWxsYmFjayhlLHQpe3JldHVybiB0aGlzLmNhdGFsb2cuZm9udEZhbGxiYWNrKGUsdCl9YXN5bmMgY2xlYW51cChlPSExKXtyZXR1cm4gdGhpcy5jYXRhbG9nP3RoaXMuY2F0YWxvZy5jbGVhbnVwKGUpOigwLHUuY2xlYXJHbG9iYWxDYWNoZXMpKCl9I2EoZSx0LGEsaSl7Y29uc3Qgcz10aGlzLnhyZWYuZmV0Y2hJZlJlZih0KTtpZihzLmhhcygiVCIpKXtjb25zdCB0PSgwLHIuc3RyaW5nVG9QREZTdHJpbmcpKHMuZ2V0KCJUIikpO2U9IiI9PT1lP3Q6YCR7ZX0uJHt0fWB9YS5oYXMoZSl8fGEuc2V0KGUsW10pO2EuZ2V0KGUpLnB1c2gobi5Bbm5vdGF0aW9uRmFjdG9yeS5jcmVhdGUodGhpcy54cmVmLHQsaSx0aGlzLl9sb2NhbElkRmFjdG9yeSwhMCxudWxsKS50aGVuKChlPT5lPy5nZXRGaWVsZE9iamVjdCgpKSkuY2F0Y2goKGZ1bmN0aW9uKGUpeygwLHIud2FybikoYCNjb2xsZWN0RmllbGRPYmplY3RzOiAiJHtlfSIuYCk7cmV0dXJuIG51bGx9KSkpO2lmKHMuaGFzKCJLaWRzIikpZm9yKGNvbnN0IHQgb2Ygcy5nZXQoIktpZHMiKSl0aGlzLiNhKGUsdCxhLGkpfWdldCBmaWVsZE9iamVjdHMoKXtpZighdGhpcy5mb3JtSW5mby5oYXNGaWVsZHMpcmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImZpZWxkT2JqZWN0cyIsUHJvbWlzZS5yZXNvbHZlKG51bGwpKTtjb25zdCBlPXRoaXMucGRmTWFuYWdlci5lbnN1cmVEb2MoImFubm90YXRpb25HbG9iYWxzIikudGhlbigoYXN5bmMgZT0+e2lmKCFlKXJldHVybiBudWxsO2NvbnN0IHQ9T2JqZWN0LmNyZWF0ZShudWxsKSxhPW5ldyBNYXA7Zm9yKGNvbnN0IHQgb2YgdGhpcy5jYXRhbG9nLmFjcm9Gb3JtLmdldCgiRmllbGRzIikpdGhpcy4jYSgiIix0LGEsZSk7Y29uc3Qgcj1bXTtmb3IoY29uc3RbZSxuXW9mIGEpci5wdXNoKFByb21pc2UuYWxsKG4pLnRoZW4oKGE9PnsoYT1hLmZpbHRlcigoZT0+ISFlKSkpLmxlbmd0aD4wJiYodFtlXT1hKX0pKSk7YXdhaXQgUHJvbWlzZS5hbGwocik7cmV0dXJuIHR9KSk7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImZpZWxkT2JqZWN0cyIsZSl9Z2V0IGhhc0pTQWN0aW9ucygpe2NvbnN0IGU9dGhpcy5wZGZNYW5hZ2VyLmVuc3VyZURvYygiX3BhcnNlSGFzSlNBY3Rpb25zIik7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImhhc0pTQWN0aW9ucyIsZSl9YXN5bmMgX3BhcnNlSGFzSlNBY3Rpb25zKCl7Y29uc3RbZSx0XT1hd2FpdCBQcm9taXNlLmFsbChbdGhpcy5wZGZNYW5hZ2VyLmVuc3VyZUNhdGFsb2coImpzQWN0aW9ucyIpLHRoaXMucGRmTWFuYWdlci5lbnN1cmVEb2MoImZpZWxkT2JqZWN0cyIpXSk7cmV0dXJuISFlfHwhIXQmJk9iamVjdC52YWx1ZXModCkuc29tZSgoZT0+ZS5zb21lKChlPT5udWxsIT09ZS5hY3Rpb25zKSkpKX1nZXQgY2FsY3VsYXRpb25PcmRlcklkcygpe2NvbnN0IGU9dGhpcy5jYXRhbG9nLmFjcm9Gb3JtO2lmKCFlPy5oYXMoIkNPIikpcmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImNhbGN1bGF0aW9uT3JkZXJJZHMiLG51bGwpO2NvbnN0IHQ9ZS5nZXQoIkNPIik7aWYoIUFycmF5LmlzQXJyYXkodCl8fDA9PT10Lmxlbmd0aClyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiY2FsY3VsYXRpb25PcmRlcklkcyIsbnVsbCk7Y29uc3QgYT1bXTtmb3IoY29uc3QgZSBvZiB0KWUgaW5zdGFuY2VvZiBzLlJlZiYmYS5wdXNoKGUudG9TdHJpbmcoKSk7cmV0dXJuIDA9PT1hLmxlbmd0aD8oMCxyLnNoYWRvdykodGhpcywiY2FsY3VsYXRpb25PcmRlcklkcyIsbnVsbCk6KDAsci5zaGFkb3cpKHRoaXMsImNhbGN1bGF0aW9uT3JkZXJJZHMiLGEpfWdldCBhbm5vdGF0aW9uR2xvYmFscygpe3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJhbm5vdGF0aW9uR2xvYmFscyIsbi5Bbm5vdGF0aW9uRmFjdG9yeS5jcmVhdGVHbG9iYWxzKHRoaXMucGRmTWFuYWdlcikpfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5Qb3B1cEFubm90YXRpb249dC5NYXJrdXBBbm5vdGF0aW9uPXQuQW5ub3RhdGlvbkZhY3Rvcnk9dC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGU9dC5Bbm5vdGF0aW9uPXZvaWQgMDt0LmdldFF1YWRQb2ludHM9Z2V0UXVhZFBvaW50czt2YXIgcj1hKDIpLG49YSgzKSxpPWEoMTEpLHM9YSg0KSxvPWEoOCksYz1hKDUpLGw9YSg2MCksaD1hKDY2KSx1PWEoMTIpLGQ9YSg2OSksZj1hKDI2KSxnPWEoNzYpLHA9YSg2NCksbT1hKDczKSxiPWEoNzcpO3QuQW5ub3RhdGlvbkZhY3Rvcnk9Y2xhc3MgQW5ub3RhdGlvbkZhY3Rvcnl7c3RhdGljIGNyZWF0ZUdsb2JhbHMoZSl7cmV0dXJuIFByb21pc2UuYWxsKFtlLmVuc3VyZUNhdGFsb2coImFjcm9Gb3JtIiksZS5lbnN1cmVEb2MoInhmYURhdGFzZXRzIiksZS5lbnN1cmVDYXRhbG9nKCJzdHJ1Y3RUcmVlUm9vdCIpLGUuZW5zdXJlQ2F0YWxvZygiYmFzZVVybCIpLGUuZW5zdXJlQ2F0YWxvZygiYXR0YWNobWVudHMiKV0pLnRoZW4oKChbdCxhLHIsbixpXSk9Pih7cGRmTWFuYWdlcjplLGFjcm9Gb3JtOnQgaW5zdGFuY2VvZiBzLkRpY3Q/dDpzLkRpY3QuZW1wdHkseGZhRGF0YXNldHM6YSxzdHJ1Y3RUcmVlUm9vdDpyLGJhc2VVcmw6bixhdHRhY2htZW50czppfSkpLChlPT57KDAsci53YXJuKShgY3JlYXRlR2xvYmFsczogIiR7ZX0iLmApO3JldHVybiBudWxsfSkpfXN0YXRpYyBhc3luYyBjcmVhdGUoZSx0LGEscixuLGkpe2NvbnN0IHM9bj9hd2FpdCB0aGlzLl9nZXRQYWdlSW5kZXgoZSx0LGEucGRmTWFuYWdlcik6bnVsbDtyZXR1cm4gYS5wZGZNYW5hZ2VyLmVuc3VyZSh0aGlzLCJfY3JlYXRlIixbZSx0LGEscixuLHMsaV0pfXN0YXRpYyBfY3JlYXRlKGUsdCxhLGksbz0hMSxjPW51bGwsbD1udWxsKXtjb25zdCBoPWUuZmV0Y2hJZlJlZih0KTtpZighKGggaW5zdGFuY2VvZiBzLkRpY3QpKXJldHVybjtjb25zdHthY3JvRm9ybTp1LHBkZk1hbmFnZXI6ZH09YSxmPXQgaW5zdGFuY2VvZiBzLlJlZj90LnRvU3RyaW5nKCk6YGFubm90XyR7aS5jcmVhdGVPYmpJZCgpfWA7bGV0IGc9aC5nZXQoIlN1YnR5cGUiKTtnPWcgaW5zdGFuY2VvZiBzLk5hbWU/Zy5uYW1lOm51bGw7Y29uc3QgcD17eHJlZjplLHJlZjp0LGRpY3Q6aCxzdWJ0eXBlOmcsaWQ6Zixhbm5vdGF0aW9uR2xvYmFsczphLGNvbGxlY3RGaWVsZHM6byxuZWVkQXBwZWFyYW5jZXM6IW8mJiEwPT09dS5nZXQoIk5lZWRBcHBlYXJhbmNlcyIpLHBhZ2VJbmRleDpjLGV2YWx1YXRvck9wdGlvbnM6ZC5ldmFsdWF0b3JPcHRpb25zLHBhZ2VSZWY6bH07c3dpdGNoKGcpe2Nhc2UiTGluayI6cmV0dXJuIG5ldyBMaW5rQW5ub3RhdGlvbihwKTtjYXNlIlRleHQiOnJldHVybiBuZXcgVGV4dEFubm90YXRpb24ocCk7Y2FzZSJXaWRnZXQiOmxldCBlPSgwLG4uZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSkoe2RpY3Q6aCxrZXk6IkZUIn0pO2U9ZSBpbnN0YW5jZW9mIHMuTmFtZT9lLm5hbWU6bnVsbDtzd2l0Y2goZSl7Y2FzZSJUeCI6cmV0dXJuIG5ldyBUZXh0V2lkZ2V0QW5ub3RhdGlvbihwKTtjYXNlIkJ0biI6cmV0dXJuIG5ldyBCdXR0b25XaWRnZXRBbm5vdGF0aW9uKHApO2Nhc2UiQ2giOnJldHVybiBuZXcgQ2hvaWNlV2lkZ2V0QW5ub3RhdGlvbihwKTtjYXNlIlNpZyI6cmV0dXJuIG5ldyBTaWduYXR1cmVXaWRnZXRBbm5vdGF0aW9uKHApfSgwLHIud2FybikoYFVuaW1wbGVtZW50ZWQgd2lkZ2V0IGZpZWxkIHR5cGUgIiR7ZX0iLCBmYWxsaW5nIGJhY2sgdG8gYmFzZSBmaWVsZCB0eXBlLmApO3JldHVybiBuZXcgV2lkZ2V0QW5ub3RhdGlvbihwKTtjYXNlIlBvcHVwIjpyZXR1cm4gbmV3IFBvcHVwQW5ub3RhdGlvbihwKTtjYXNlIkZyZWVUZXh0IjpyZXR1cm4gbmV3IEZyZWVUZXh0QW5ub3RhdGlvbihwKTtjYXNlIkxpbmUiOnJldHVybiBuZXcgTGluZUFubm90YXRpb24ocCk7Y2FzZSJTcXVhcmUiOnJldHVybiBuZXcgU3F1YXJlQW5ub3RhdGlvbihwKTtjYXNlIkNpcmNsZSI6cmV0dXJuIG5ldyBDaXJjbGVBbm5vdGF0aW9uKHApO2Nhc2UiUG9seUxpbmUiOnJldHVybiBuZXcgUG9seWxpbmVBbm5vdGF0aW9uKHApO2Nhc2UiUG9seWdvbiI6cmV0dXJuIG5ldyBQb2x5Z29uQW5ub3RhdGlvbihwKTtjYXNlIkNhcmV0IjpyZXR1cm4gbmV3IENhcmV0QW5ub3RhdGlvbihwKTtjYXNlIkluayI6cmV0dXJuIG5ldyBJbmtBbm5vdGF0aW9uKHApO2Nhc2UiSGlnaGxpZ2h0IjpyZXR1cm4gbmV3IEhpZ2hsaWdodEFubm90YXRpb24ocCk7Y2FzZSJVbmRlcmxpbmUiOnJldHVybiBuZXcgVW5kZXJsaW5lQW5ub3RhdGlvbihwKTtjYXNlIlNxdWlnZ2x5IjpyZXR1cm4gbmV3IFNxdWlnZ2x5QW5ub3RhdGlvbihwKTtjYXNlIlN0cmlrZU91dCI6cmV0dXJuIG5ldyBTdHJpa2VPdXRBbm5vdGF0aW9uKHApO2Nhc2UiU3RhbXAiOnJldHVybiBuZXcgU3RhbXBBbm5vdGF0aW9uKHApO2Nhc2UiRmlsZUF0dGFjaG1lbnQiOnJldHVybiBuZXcgRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uKHApO2RlZmF1bHQ6b3x8KGc/KDAsci53YXJuKShgVW5pbXBsZW1lbnRlZCBhbm5vdGF0aW9uIHR5cGUgIiR7Z30iLCBmYWxsaW5nIGJhY2sgdG8gYmFzZSBhbm5vdGF0aW9uLmApOigwLHIud2FybikoIkFubm90YXRpb24gaXMgbWlzc2luZyB0aGUgcmVxdWlyZWQgL1N1YnR5cGUuIikpO3JldHVybiBuZXcgQW5ub3RhdGlvbihwKX19c3RhdGljIGFzeW5jIF9nZXRQYWdlSW5kZXgoZSx0LGEpe3RyeXtjb25zdCBuPWF3YWl0IGUuZmV0Y2hJZlJlZkFzeW5jKHQpO2lmKCEobiBpbnN0YW5jZW9mIHMuRGljdCkpcmV0dXJuLTE7Y29uc3QgaT1uLmdldFJhdygiUCIpO2lmKGkgaW5zdGFuY2VvZiBzLlJlZil0cnl7cmV0dXJuIGF3YWl0IGEuZW5zdXJlQ2F0YWxvZygiZ2V0UGFnZUluZGV4IixbaV0pfWNhdGNoKGUpeygwLHIuaW5mbykoYF9nZXRQYWdlSW5kZXggLS0gbm90IGEgdmFsaWQgcGFnZSByZWZlcmVuY2U6ICIke2V9Ii5gKX1pZihuLmhhcygiS2lkcyIpKXJldHVybi0xO2NvbnN0IG89YXdhaXQgYS5lbnN1cmVEb2MoIm51bVBhZ2VzIik7Zm9yKGxldCBlPTA7ZTxvO2UrKyl7Y29uc3Qgcj1hd2FpdCBhLmdldFBhZ2UoZSksbj1hd2FpdCBhLmVuc3VyZShyLCJhbm5vdGF0aW9ucyIpO2Zvcihjb25zdCBhIG9mIG4paWYoYSBpbnN0YW5jZW9mIHMuUmVmJiYoMCxzLmlzUmVmc0VxdWFsKShhLHQpKXJldHVybiBlfX1jYXRjaChlKXsoMCxyLndhcm4pKGBfZ2V0UGFnZUluZGV4OiAiJHtlfSIuYCl9cmV0dXJuLTF9c3RhdGljIGdlbmVyYXRlSW1hZ2VzKGUsdCxhKXtpZighYSl7KDAsci53YXJuKSgiZ2VuZXJhdGVJbWFnZXM6IE9mZnNjcmVlbkNhbnZhcyBpcyBub3Qgc3VwcG9ydGVkLCBjYW5ub3Qgc2F2ZSBvciBwcmludCBzb21lIGFubm90YXRpb25zIHdpdGggaW1hZ2VzLiIpO3JldHVybiBudWxsfWxldCBuO2Zvcihjb25zdHtiaXRtYXBJZDphLGJpdG1hcDpyfW9mIGUpaWYocil7bnx8PW5ldyBNYXA7bi5zZXQoYSxTdGFtcEFubm90YXRpb24uY3JlYXRlSW1hZ2Uocix0KSl9cmV0dXJuIG59c3RhdGljIGFzeW5jIHNhdmVOZXdBbm5vdGF0aW9ucyhlLHQsYSxuKXtjb25zdCBpPWUueHJlZjtsZXQgbztjb25zdCBjPVtdLGw9W10se2lzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkOmh9PWUub3B0aW9ucztmb3IoY29uc3QgdSBvZiBhKWlmKCF1LmRlbGV0ZWQpc3dpdGNoKHUuYW5ub3RhdGlvblR5cGUpe2Nhc2Ugci5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5GUkVFVEVYVDppZighbyl7Y29uc3QgZT1uZXcgcy5EaWN0KGkpO2Uuc2V0KCJCYXNlRm9udCIscy5OYW1lLmdldCgiSGVsdmV0aWNhIikpO2Uuc2V0KCJUeXBlIixzLk5hbWUuZ2V0KCJGb250IikpO2Uuc2V0KCJTdWJ0eXBlIixzLk5hbWUuZ2V0KCJUeXBlMSIpKTtlLnNldCgiRW5jb2RpbmciLHMuTmFtZS5nZXQoIldpbkFuc2lFbmNvZGluZyIpKTtjb25zdCB0PVtdO289aS5nZXROZXdUZW1wb3JhcnlSZWYoKTthd2FpdCgwLG0ud3JpdGVPYmplY3QpKG8sZSx0LGkpO2MucHVzaCh7cmVmOm8sZGF0YTp0LmpvaW4oIiIpfSl9bC5wdXNoKEZyZWVUZXh0QW5ub3RhdGlvbi5jcmVhdGVOZXdBbm5vdGF0aW9uKGksdSxjLHtldmFsdWF0b3I6ZSx0YXNrOnQsYmFzZUZvbnRSZWY6b30pKTticmVhaztjYXNlIHIuQW5ub3RhdGlvbkVkaXRvclR5cGUuSU5LOmwucHVzaChJbmtBbm5vdGF0aW9uLmNyZWF0ZU5ld0Fubm90YXRpb24oaSx1LGMpKTticmVhaztjYXNlIHIuQW5ub3RhdGlvbkVkaXRvclR5cGUuU1RBTVA6aWYoIWgpYnJlYWs7Y29uc3QgYT1hd2FpdCBuLmdldCh1LmJpdG1hcElkKTtpZihhLmltYWdlU3RyZWFtKXtjb25zdHtpbWFnZVN0cmVhbTplLHNtYXNrU3RyZWFtOnR9PWEscj1bXTtpZih0KXtjb25zdCBhPWkuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7YXdhaXQoMCxtLndyaXRlT2JqZWN0KShhLHQscixpKTtjLnB1c2goe3JlZjphLGRhdGE6ci5qb2luKCIiKX0pO2UuZGljdC5zZXQoIlNNYXNrIixhKTtyLmxlbmd0aD0wfWNvbnN0IG49YS5pbWFnZVJlZj1pLmdldE5ld1RlbXBvcmFyeVJlZigpO2F3YWl0KDAsbS53cml0ZU9iamVjdCkobixlLHIsaSk7Yy5wdXNoKHtyZWY6bixkYXRhOnIuam9pbigiIil9KTthLmltYWdlU3RyZWFtPWEuc21hc2tTdHJlYW09bnVsbH1sLnB1c2goU3RhbXBBbm5vdGF0aW9uLmNyZWF0ZU5ld0Fubm90YXRpb24oaSx1LGMse2ltYWdlOmF9KSl9cmV0dXJue2Fubm90YXRpb25zOmF3YWl0IFByb21pc2UuYWxsKGwpLGRlcGVuZGVuY2llczpjfX1zdGF0aWMgYXN5bmMgcHJpbnROZXdBbm5vdGF0aW9ucyhlLHQsYSxuLGkpe2lmKCFuKXJldHVybiBudWxsO2NvbnN0e29wdGlvbnM6cyx4cmVmOm99PXQsYz1bXTtmb3IoY29uc3QgbCBvZiBuKWlmKCFsLmRlbGV0ZWQpc3dpdGNoKGwuYW5ub3RhdGlvblR5cGUpe2Nhc2Ugci5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5GUkVFVEVYVDpjLnB1c2goRnJlZVRleHRBbm5vdGF0aW9uLmNyZWF0ZU5ld1ByaW50QW5ub3RhdGlvbihlLG8sbCx7ZXZhbHVhdG9yOnQsdGFzazphLGV2YWx1YXRvck9wdGlvbnM6c30pKTticmVhaztjYXNlIHIuQW5ub3RhdGlvbkVkaXRvclR5cGUuSU5LOmMucHVzaChJbmtBbm5vdGF0aW9uLmNyZWF0ZU5ld1ByaW50QW5ub3RhdGlvbihlLG8sbCx7ZXZhbHVhdG9yT3B0aW9uczpzfSkpO2JyZWFrO2Nhc2Ugci5Bbm5vdGF0aW9uRWRpdG9yVHlwZS5TVEFNUDppZighcy5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZClicmVhaztjb25zdCBuPWF3YWl0IGkuZ2V0KGwuYml0bWFwSWQpO2lmKG4uaW1hZ2VTdHJlYW0pe2NvbnN0e2ltYWdlU3RyZWFtOmUsc21hc2tTdHJlYW06dH09bjt0JiZlLmRpY3Quc2V0KCJTTWFzayIsdCk7bi5pbWFnZVJlZj1uZXcgZi5KcGVnU3RyZWFtKGUsZS5sZW5ndGgpO24uaW1hZ2VTdHJlYW09bi5zbWFza1N0cmVhbT1udWxsfWMucHVzaChTdGFtcEFubm90YXRpb24uY3JlYXRlTmV3UHJpbnRBbm5vdGF0aW9uKGUsbyxsLHtpbWFnZTpuLGV2YWx1YXRvck9wdGlvbnM6c30pKX1yZXR1cm4gUHJvbWlzZS5hbGwoYyl9fTtmdW5jdGlvbiBnZXRSZ2JDb2xvcihlLHQ9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDMpKXtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gdDtjb25zdCBhPXR8fG5ldyBVaW50OENsYW1wZWRBcnJheSgzKTtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMDpyZXR1cm4gbnVsbDtjYXNlIDE6dS5Db2xvclNwYWNlLnNpbmdsZXRvbnMuZ3JheS5nZXRSZ2JJdGVtKGUsMCxhLDApO3JldHVybiBhO2Nhc2UgMzp1LkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5yZ2IuZ2V0UmdiSXRlbShlLDAsYSwwKTtyZXR1cm4gYTtjYXNlIDQ6dS5Db2xvclNwYWNlLnNpbmdsZXRvbnMuY215ay5nZXRSZ2JJdGVtKGUsMCxhLDApO3JldHVybiBhO2RlZmF1bHQ6cmV0dXJuIHR9fWZ1bmN0aW9uIGdldFBkZkNvbG9yQXJyYXkoZSl7cmV0dXJuIEFycmF5LmZyb20oZSwoZT0+ZS8yNTUpKX1mdW5jdGlvbiBnZXRRdWFkUG9pbnRzKGUsdCl7Y29uc3QgYT1lLmdldEFycmF5KCJRdWFkUG9pbnRzIik7aWYoIUFycmF5LmlzQXJyYXkoYSl8fDA9PT1hLmxlbmd0aHx8YS5sZW5ndGglOD4wKXJldHVybiBudWxsO2NvbnN0IHI9W107Zm9yKGxldCBlPTAsbj1hLmxlbmd0aC84O2U8bjtlKyspe2xldCBuPTEvMCxpPS0xLzAscz0xLzAsbz0tMS8wO2ZvcihsZXQgdD04KmUscj04KmUrODt0PHI7dCs9Mil7Y29uc3QgZT1hW3RdLHI9YVt0KzFdO249TWF0aC5taW4oZSxuKTtpPU1hdGgubWF4KGUsaSk7cz1NYXRoLm1pbihyLHMpO289TWF0aC5tYXgocixvKX1pZihudWxsIT09dCYmKG48dFswXXx8aT50WzJdfHxzPHRbMV18fG8+dFszXSkpcmV0dXJuIG51bGw7ci5wdXNoKFt7eDpuLHk6b30se3g6aSx5Om99LHt4Om4seTpzfSx7eDppLHk6c31dKX1yZXR1cm4gcn1mdW5jdGlvbiBnZXRUcmFuc2Zvcm1NYXRyaXgoZSx0LGEpe2NvbnN0W24saSxzLG9dPXIuVXRpbC5nZXRBeGlhbEFsaWduZWRCb3VuZGluZ0JveCh0LGEpO2lmKG49PT1zfHxpPT09bylyZXR1cm5bMSwwLDAsMSxlWzBdLGVbMV1dO2NvbnN0IGM9KGVbMl0tZVswXSkvKHMtbiksbD0oZVszXS1lWzFdKS8oby1pKTtyZXR1cm5bYywwLDAsbCxlWzBdLW4qYyxlWzFdLWkqbF19Y2xhc3MgQW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtjb25zdHtkaWN0OnQseHJlZjphLGFubm90YXRpb25HbG9iYWxzOml9PWU7dGhpcy5zZXRUaXRsZSh0LmdldCgiVCIpKTt0aGlzLnNldENvbnRlbnRzKHQuZ2V0KCJDb250ZW50cyIpKTt0aGlzLnNldE1vZGlmaWNhdGlvbkRhdGUodC5nZXQoIk0iKSk7dGhpcy5zZXRGbGFncyh0LmdldCgiRiIpKTt0aGlzLnNldFJlY3RhbmdsZSh0LmdldEFycmF5KCJSZWN0IikpO3RoaXMuc2V0Q29sb3IodC5nZXRBcnJheSgiQyIpKTt0aGlzLnNldEJvcmRlclN0eWxlKHQpO3RoaXMuc2V0QXBwZWFyYW5jZSh0KTt0aGlzLnNldE9wdGlvbmFsQ29udGVudCh0KTtjb25zdCBvPXQuZ2V0KCJNSyIpO3RoaXMuc2V0Qm9yZGVyQW5kQmFja2dyb3VuZENvbG9ycyhvKTt0aGlzLnNldFJvdGF0aW9uKG8sdCk7dGhpcy5yZWY9ZS5yZWYgaW5zdGFuY2VvZiBzLlJlZj9lLnJlZjpudWxsO3RoaXMuX3N0cmVhbXM9W107dGhpcy5hcHBlYXJhbmNlJiZ0aGlzLl9zdHJlYW1zLnB1c2godGhpcy5hcHBlYXJhbmNlKTtjb25zdCBjPSEhKHRoaXMuZmxhZ3Mmci5Bbm5vdGF0aW9uRmxhZy5MT0NLRUQpLGw9ISEodGhpcy5mbGFncyZyLkFubm90YXRpb25GbGFnLkxPQ0tFRENPTlRFTlRTKTtpZihpLnN0cnVjdFRyZWVSb290KXtsZXQgYT10LmdldCgiU3RydWN0UGFyZW50Iik7YT1OdW1iZXIuaXNJbnRlZ2VyKGEpJiZhPj0wP2E6LTE7aS5zdHJ1Y3RUcmVlUm9vdC5hZGRBbm5vdGF0aW9uSWRUb1BhZ2UoZS5wYWdlUmVmLGEpfXRoaXMuZGF0YT17YW5ub3RhdGlvbkZsYWdzOnRoaXMuZmxhZ3MsYm9yZGVyU3R5bGU6dGhpcy5ib3JkZXJTdHlsZSxjb2xvcjp0aGlzLmNvbG9yLGJhY2tncm91bmRDb2xvcjp0aGlzLmJhY2tncm91bmRDb2xvcixib3JkZXJDb2xvcjp0aGlzLmJvcmRlckNvbG9yLHJvdGF0aW9uOnRoaXMucm90YXRpb24sY29udGVudHNPYmo6dGhpcy5fY29udGVudHMsaGFzQXBwZWFyYW5jZTohIXRoaXMuYXBwZWFyYW5jZSxpZDplLmlkLG1vZGlmaWNhdGlvbkRhdGU6dGhpcy5tb2RpZmljYXRpb25EYXRlLHJlY3Q6dGhpcy5yZWN0YW5nbGUsc3VidHlwZTplLnN1YnR5cGUsaGFzT3duQ2FudmFzOiExLG5vUm90YXRlOiEhKHRoaXMuZmxhZ3Mmci5Bbm5vdGF0aW9uRmxhZy5OT1JPVEFURSksbm9IVE1MOmMmJmx9O2lmKGUuY29sbGVjdEZpZWxkcyl7Y29uc3QgaT10LmdldCgiS2lkcyIpO2lmKEFycmF5LmlzQXJyYXkoaSkpe2NvbnN0IGU9W107Zm9yKGNvbnN0IHQgb2YgaSl0IGluc3RhbmNlb2Ygcy5SZWYmJmUucHVzaCh0LnRvU3RyaW5nKCkpOzAhPT1lLmxlbmd0aCYmKHRoaXMuZGF0YS5raWRJZHM9ZSl9dGhpcy5kYXRhLmFjdGlvbnM9KDAsbi5jb2xsZWN0QWN0aW9ucykoYSx0LHIuQW5ub3RhdGlvbkFjdGlvbkV2ZW50VHlwZSk7dGhpcy5kYXRhLmZpZWxkTmFtZT10aGlzLl9jb25zdHJ1Y3RGaWVsZE5hbWUodCk7dGhpcy5kYXRhLnBhZ2VJbmRleD1lLnBhZ2VJbmRleH10aGlzLl9pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZD1lLmV2YWx1YXRvck9wdGlvbnMuaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ7dGhpcy5fZmFsbGJhY2tGb250RGljdD1udWxsO3RoaXMuX25lZWRBcHBlYXJhbmNlcz0hMX1faGFzRmxhZyhlLHQpe3JldHVybiEhKGUmdCl9X2lzVmlld2FibGUoZSl7cmV0dXJuIXRoaXMuX2hhc0ZsYWcoZSxyLkFubm90YXRpb25GbGFnLklOVklTSUJMRSkmJiF0aGlzLl9oYXNGbGFnKGUsci5Bbm5vdGF0aW9uRmxhZy5OT1ZJRVcpfV9pc1ByaW50YWJsZShlKXtyZXR1cm4gdGhpcy5faGFzRmxhZyhlLHIuQW5ub3RhdGlvbkZsYWcuUFJJTlQpJiYhdGhpcy5faGFzRmxhZyhlLHIuQW5ub3RhdGlvbkZsYWcuSElEREVOKSYmIXRoaXMuX2hhc0ZsYWcoZSxyLkFubm90YXRpb25GbGFnLklOVklTSUJMRSl9bXVzdEJlVmlld2VkKGUsdCl7Y29uc3QgYT1lPy5nZXQodGhpcy5kYXRhLmlkKT8ubm9WaWV3O3JldHVybiB2b2lkIDAhPT1hPyFhOnRoaXMudmlld2FibGUmJiF0aGlzLl9oYXNGbGFnKHRoaXMuZmxhZ3Msci5Bbm5vdGF0aW9uRmxhZy5ISURERU4pfW11c3RCZVByaW50ZWQoZSl7Y29uc3QgdD1lPy5nZXQodGhpcy5kYXRhLmlkKT8ubm9QcmludDtyZXR1cm4gdm9pZCAwIT09dD8hdDp0aGlzLnByaW50YWJsZX1nZXQgdmlld2FibGUoKXtyZXR1cm4gbnVsbCE9PXRoaXMuZGF0YS5xdWFkUG9pbnRzJiYoMD09PXRoaXMuZmxhZ3N8fHRoaXMuX2lzVmlld2FibGUodGhpcy5mbGFncykpfWdldCBwcmludGFibGUoKXtyZXR1cm4gbnVsbCE9PXRoaXMuZGF0YS5xdWFkUG9pbnRzJiYoMCE9PXRoaXMuZmxhZ3MmJnRoaXMuX2lzUHJpbnRhYmxlKHRoaXMuZmxhZ3MpKX1fcGFyc2VTdHJpbmdIZWxwZXIoZSl7Y29uc3QgdD0ic3RyaW5nIj09dHlwZW9mIGU/KDAsci5zdHJpbmdUb1BERlN0cmluZykoZSk6IiI7cmV0dXJue3N0cjp0LGRpcjp0JiYicnRsIj09PSgwLGwuYmlkaSkodCkuZGlyPyJydGwiOiJsdHIifX1zZXREZWZhdWx0QXBwZWFyYW5jZShlKXtjb25zdHtkaWN0OnQsYW5ub3RhdGlvbkdsb2JhbHM6YX09ZSxyPSgwLG4uZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSkoe2RpY3Q6dCxrZXk6IkRBIn0pfHxhLmFjcm9Gb3JtLmdldCgiREEiKTt0aGlzLl9kZWZhdWx0QXBwZWFyYW5jZT0ic3RyaW5nIj09dHlwZW9mIHI/cjoiIjt0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhPSgwLGkucGFyc2VEZWZhdWx0QXBwZWFyYW5jZSkodGhpcy5fZGVmYXVsdEFwcGVhcmFuY2UpfXNldFRpdGxlKGUpe3RoaXMuX3RpdGxlPXRoaXMuX3BhcnNlU3RyaW5nSGVscGVyKGUpfXNldENvbnRlbnRzKGUpe3RoaXMuX2NvbnRlbnRzPXRoaXMuX3BhcnNlU3RyaW5nSGVscGVyKGUpfXNldE1vZGlmaWNhdGlvbkRhdGUoZSl7dGhpcy5tb2RpZmljYXRpb25EYXRlPSJzdHJpbmciPT10eXBlb2YgZT9lOm51bGx9c2V0RmxhZ3MoZSl7dGhpcy5mbGFncz1OdW1iZXIuaXNJbnRlZ2VyKGUpJiZlPjA/ZTowfWhhc0ZsYWcoZSl7cmV0dXJuIHRoaXMuX2hhc0ZsYWcodGhpcy5mbGFncyxlKX1zZXRSZWN0YW5nbGUoZSl7dGhpcy5yZWN0YW5nbGU9QXJyYXkuaXNBcnJheShlKSYmND09PWUubGVuZ3RoP3IuVXRpbC5ub3JtYWxpemVSZWN0KGUpOlswLDAsMCwwXX1zZXRDb2xvcihlKXt0aGlzLmNvbG9yPWdldFJnYkNvbG9yKGUpfXNldExpbmVFbmRpbmdzKGUpe3RoaXMubGluZUVuZGluZ3M9WyJOb25lIiwiTm9uZSJdO2lmKEFycmF5LmlzQXJyYXkoZSkmJjI9PT1lLmxlbmd0aClmb3IobGV0IHQ9MDt0PDI7dCsrKXtjb25zdCBhPWVbdF07aWYoYSBpbnN0YW5jZW9mIHMuTmFtZSlzd2l0Y2goYS5uYW1lKXtjYXNlIk5vbmUiOmNvbnRpbnVlO2Nhc2UiU3F1YXJlIjpjYXNlIkNpcmNsZSI6Y2FzZSJEaWFtb25kIjpjYXNlIk9wZW5BcnJvdyI6Y2FzZSJDbG9zZWRBcnJvdyI6Y2FzZSJCdXR0IjpjYXNlIlJPcGVuQXJyb3ciOmNhc2UiUkNsb3NlZEFycm93IjpjYXNlIlNsYXNoIjp0aGlzLmxpbmVFbmRpbmdzW3RdPWEubmFtZTtjb250aW51ZX0oMCxyLndhcm4pKGBJZ25vcmluZyBpbnZhbGlkIGxpbmVFbmRpbmc6ICR7YX1gKX19c2V0Um90YXRpb24oZSx0KXt0aGlzLnJvdGF0aW9uPTA7bGV0IGE9ZSBpbnN0YW5jZW9mIHMuRGljdD9lLmdldCgiUiIpfHwwOnQuZ2V0KCJSb3RhdGUiKXx8MDtpZihOdW1iZXIuaXNJbnRlZ2VyKGEpJiYwIT09YSl7YSU9MzYwO2E8MCYmKGErPTM2MCk7YSU5MD09MCYmKHRoaXMucm90YXRpb249YSl9fXNldEJvcmRlckFuZEJhY2tncm91bmRDb2xvcnMoZSl7aWYoZSBpbnN0YW5jZW9mIHMuRGljdCl7dGhpcy5ib3JkZXJDb2xvcj1nZXRSZ2JDb2xvcihlLmdldEFycmF5KCJCQyIpLG51bGwpO3RoaXMuYmFja2dyb3VuZENvbG9yPWdldFJnYkNvbG9yKGUuZ2V0QXJyYXkoIkJHIiksbnVsbCl9ZWxzZSB0aGlzLmJvcmRlckNvbG9yPXRoaXMuYmFja2dyb3VuZENvbG9yPW51bGx9c2V0Qm9yZGVyU3R5bGUoZSl7dGhpcy5ib3JkZXJTdHlsZT1uZXcgQW5ub3RhdGlvbkJvcmRlclN0eWxlO2lmKGUgaW5zdGFuY2VvZiBzLkRpY3QpaWYoZS5oYXMoIkJTIikpe2NvbnN0IHQ9ZS5nZXQoIkJTIiksYT10LmdldCgiVHlwZSIpO2lmKCFhfHwoMCxzLmlzTmFtZSkoYSwiQm9yZGVyIikpe3RoaXMuYm9yZGVyU3R5bGUuc2V0V2lkdGgodC5nZXQoIlciKSx0aGlzLnJlY3RhbmdsZSk7dGhpcy5ib3JkZXJTdHlsZS5zZXRTdHlsZSh0LmdldCgiUyIpKTt0aGlzLmJvcmRlclN0eWxlLnNldERhc2hBcnJheSh0LmdldEFycmF5KCJEIikpfX1lbHNlIGlmKGUuaGFzKCJCb3JkZXIiKSl7Y29uc3QgdD1lLmdldEFycmF5KCJCb3JkZXIiKTtpZihBcnJheS5pc0FycmF5KHQpJiZ0Lmxlbmd0aD49Myl7dGhpcy5ib3JkZXJTdHlsZS5zZXRIb3Jpem9udGFsQ29ybmVyUmFkaXVzKHRbMF0pO3RoaXMuYm9yZGVyU3R5bGUuc2V0VmVydGljYWxDb3JuZXJSYWRpdXModFsxXSk7dGhpcy5ib3JkZXJTdHlsZS5zZXRXaWR0aCh0WzJdLHRoaXMucmVjdGFuZ2xlKTs0PT09dC5sZW5ndGgmJnRoaXMuYm9yZGVyU3R5bGUuc2V0RGFzaEFycmF5KHRbM10sITApfX1lbHNlIHRoaXMuYm9yZGVyU3R5bGUuc2V0V2lkdGgoMCl9c2V0QXBwZWFyYW5jZShlKXt0aGlzLmFwcGVhcmFuY2U9bnVsbDtjb25zdCB0PWUuZ2V0KCJBUCIpO2lmKCEodCBpbnN0YW5jZW9mIHMuRGljdCkpcmV0dXJuO2NvbnN0IGE9dC5nZXQoIk4iKTtpZihhIGluc3RhbmNlb2YgYy5CYXNlU3RyZWFtKXt0aGlzLmFwcGVhcmFuY2U9YTtyZXR1cm59aWYoIShhIGluc3RhbmNlb2Ygcy5EaWN0KSlyZXR1cm47Y29uc3Qgcj1lLmdldCgiQVMiKTtpZighKHIgaW5zdGFuY2VvZiBzLk5hbWUmJmEuaGFzKHIubmFtZSkpKXJldHVybjtjb25zdCBuPWEuZ2V0KHIubmFtZSk7biBpbnN0YW5jZW9mIGMuQmFzZVN0cmVhbSYmKHRoaXMuYXBwZWFyYW5jZT1uKX1zZXRPcHRpb25hbENvbnRlbnQoZSl7dGhpcy5vYz1udWxsO2NvbnN0IHQ9ZS5nZXQoIk9DIik7dCBpbnN0YW5jZW9mIHMuTmFtZT8oMCxyLndhcm4pKCJzZXRPcHRpb25hbENvbnRlbnQ6IFN1cHBvcnQgZm9yIC9OYW1lLWVudHJ5IGlzIG5vdCBpbXBsZW1lbnRlZC4iKTp0IGluc3RhbmNlb2Ygcy5EaWN0JiYodGhpcy5vYz10KX1sb2FkUmVzb3VyY2VzKGUsdCl7cmV0dXJuIHQuZGljdC5nZXRBc3luYygiUmVzb3VyY2VzIikudGhlbigodD0+e2lmKCF0KXJldHVybjtyZXR1cm4gbmV3IGcuT2JqZWN0TG9hZGVyKHQsZSx0LnhyZWYpLmxvYWQoKS50aGVuKChmdW5jdGlvbigpe3JldHVybiB0fSkpfSkpfWFzeW5jIGdldE9wZXJhdG9yTGlzdChlLHQsYSxuLGkpe2NvbnN0IGM9dGhpcy5kYXRhO2xldCBsPXRoaXMuYXBwZWFyYW5jZTtjb25zdCBoPSEhKHRoaXMuZGF0YS5oYXNPd25DYW52YXMmJmEmci5SZW5kZXJpbmdJbnRlbnRGbGFnLkRJU1BMQVkpO2lmKCFsKXtpZighaClyZXR1cm57b3BMaXN0Om5ldyBwLk9wZXJhdG9yTGlzdCxzZXBhcmF0ZUZvcm06ITEsc2VwYXJhdGVDYW52YXM6ITF9O2w9bmV3IG8uU3RyaW5nU3RyZWFtKCIiKTtsLmRpY3Q9bmV3IHMuRGljdH1jb25zdCB1PWwuZGljdCxkPWF3YWl0IHRoaXMubG9hZFJlc291cmNlcyhbIkV4dEdTdGF0ZSIsIkNvbG9yU3BhY2UiLCJQYXR0ZXJuIiwiU2hhZGluZyIsIlhPYmplY3QiLCJGb250Il0sbCksZj11LmdldEFycmF5KCJCQm94Iil8fFswLDAsMSwxXSxnPXUuZ2V0QXJyYXkoIk1hdHJpeCIpfHxbMSwwLDAsMSwwLDBdLG09Z2V0VHJhbnNmb3JtTWF0cml4KGMucmVjdCxmLGcpLGI9bmV3IHAuT3BlcmF0b3JMaXN0O2xldCB5O3RoaXMub2MmJih5PWF3YWl0IGUucGFyc2VNYXJrZWRDb250ZW50UHJvcHModGhpcy5vYyxudWxsKSk7dm9pZCAwIT09eSYmYi5hZGRPcChyLk9QUy5iZWdpbk1hcmtlZENvbnRlbnRQcm9wcyxbIk9DIix5XSk7Yi5hZGRPcChyLk9QUy5iZWdpbkFubm90YXRpb24sW2MuaWQsYy5yZWN0LG0sZyxoXSk7YXdhaXQgZS5nZXRPcGVyYXRvckxpc3Qoe3N0cmVhbTpsLHRhc2s6dCxyZXNvdXJjZXM6ZCxvcGVyYXRvckxpc3Q6YixmYWxsYmFja0ZvbnREaWN0OnRoaXMuX2ZhbGxiYWNrRm9udERpY3R9KTtiLmFkZE9wKHIuT1BTLmVuZEFubm90YXRpb24sW10pO3ZvaWQgMCE9PXkmJmIuYWRkT3Aoci5PUFMuZW5kTWFya2VkQ29udGVudCxbXSk7dGhpcy5yZXNldCgpO3JldHVybntvcExpc3Q6YixzZXBhcmF0ZUZvcm06ITEsc2VwYXJhdGVDYW52YXM6aH19YXN5bmMgc2F2ZShlLHQsYSl7cmV0dXJuIG51bGx9Z2V0IGhhc1RleHRDb250ZW50KCl7cmV0dXJuITF9YXN5bmMgZXh0cmFjdFRleHRDb250ZW50KGUsdCxhKXtpZighdGhpcy5hcHBlYXJhbmNlKXJldHVybjtjb25zdCBuPWF3YWl0IHRoaXMubG9hZFJlc291cmNlcyhbIkV4dEdTdGF0ZSIsIkZvbnQiLCJQcm9wZXJ0aWVzIiwiWE9iamVjdCJdLHRoaXMuYXBwZWFyYW5jZSksaT1bXSxzPVtdO2xldCBvPW51bGw7Y29uc3QgYz17ZGVzaXJlZFNpemU6TWF0aC5JbmZpbml0eSxyZWFkeTohMCxlbnF1ZXVlKGUsdCl7Zm9yKGNvbnN0IHQgb2YgZS5pdGVtcylpZih2b2lkIDAhPT10LnN0cil7b3x8PXQudHJhbnNmb3JtLnNsaWNlKC0yKTtzLnB1c2godC5zdHIpO2lmKHQuaGFzRU9MKXtpLnB1c2gocy5qb2luKCIiKSk7cy5sZW5ndGg9MH19fX07YXdhaXQgZS5nZXRUZXh0Q29udGVudCh7c3RyZWFtOnRoaXMuYXBwZWFyYW5jZSx0YXNrOnQscmVzb3VyY2VzOm4saW5jbHVkZU1hcmtlZENvbnRlbnQ6ITAsc2luazpjLHZpZXdCb3g6YX0pO3RoaXMucmVzZXQoKTtzLmxlbmd0aCYmaS5wdXNoKHMuam9pbigiIikpO2lmKGkubGVuZ3RoPjF8fGlbMF0pe2NvbnN0IGU9dGhpcy5hcHBlYXJhbmNlLmRpY3QsdD1lLmdldEFycmF5KCJCQm94Iil8fFswLDAsMSwxXSxhPWUuZ2V0QXJyYXkoIk1hdHJpeCIpfHxbMSwwLDAsMSwwLDBdLG49dGhpcy5kYXRhLnJlY3Qscz1nZXRUcmFuc2Zvcm1NYXRyaXgobix0LGEpO3NbNF0tPW5bMF07c1s1XS09blsxXTtvPXIuVXRpbC5hcHBseVRyYW5zZm9ybShvLHMpO289ci5VdGlsLmFwcGx5VHJhbnNmb3JtKG8sYSk7dGhpcy5kYXRhLnRleHRQb3NpdGlvbj1vO3RoaXMuZGF0YS50ZXh0Q29udGVudD1pfX1nZXRGaWVsZE9iamVjdCgpe3JldHVybiB0aGlzLmRhdGEua2lkSWRzP3tpZDp0aGlzLmRhdGEuaWQsYWN0aW9uczp0aGlzLmRhdGEuYWN0aW9ucyxuYW1lOnRoaXMuZGF0YS5maWVsZE5hbWUsc3Ryb2tlQ29sb3I6dGhpcy5kYXRhLmJvcmRlckNvbG9yLGZpbGxDb2xvcjp0aGlzLmRhdGEuYmFja2dyb3VuZENvbG9yLHR5cGU6IiIsa2lkSWRzOnRoaXMuZGF0YS5raWRJZHMscGFnZTp0aGlzLmRhdGEucGFnZUluZGV4LHJvdGF0aW9uOnRoaXMucm90YXRpb259Om51bGx9cmVzZXQoKXtmb3IoY29uc3QgZSBvZiB0aGlzLl9zdHJlYW1zKWUucmVzZXQoKX1fY29uc3RydWN0RmllbGROYW1lKGUpe2lmKCFlLmhhcygiVCIpJiYhZS5oYXMoIlBhcmVudCIpKXsoMCxyLndhcm4pKCJVbmtub3duIGZpZWxkIG5hbWUsIGZhbGxpbmcgYmFjayB0byBlbXB0eSBmaWVsZCBuYW1lLiIpO3JldHVybiIifWlmKCFlLmhhcygiUGFyZW50IikpcmV0dXJuKDAsci5zdHJpbmdUb1BERlN0cmluZykoZS5nZXQoIlQiKSk7Y29uc3QgdD1bXTtlLmhhcygiVCIpJiZ0LnVuc2hpZnQoKDAsci5zdHJpbmdUb1BERlN0cmluZykoZS5nZXQoIlQiKSkpO2xldCBhPWU7Y29uc3Qgbj1uZXcgcy5SZWZTZXQ7ZS5vYmpJZCYmbi5wdXQoZS5vYmpJZCk7Zm9yKDthLmhhcygiUGFyZW50Iik7KXthPWEuZ2V0KCJQYXJlbnQiKTtpZighKGEgaW5zdGFuY2VvZiBzLkRpY3QpfHxhLm9iaklkJiZuLmhhcyhhLm9iaklkKSlicmVhazthLm9iaklkJiZuLnB1dChhLm9iaklkKTthLmhhcygiVCIpJiZ0LnVuc2hpZnQoKDAsci5zdHJpbmdUb1BERlN0cmluZykoYS5nZXQoIlQiKSkpfXJldHVybiB0LmpvaW4oIi4iKX19dC5Bbm5vdGF0aW9uPUFubm90YXRpb247Y2xhc3MgQW5ub3RhdGlvbkJvcmRlclN0eWxle2NvbnN0cnVjdG9yKCl7dGhpcy53aWR0aD0xO3RoaXMuc3R5bGU9ci5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLlNPTElEO3RoaXMuZGFzaEFycmF5PVszXTt0aGlzLmhvcml6b250YWxDb3JuZXJSYWRpdXM9MDt0aGlzLnZlcnRpY2FsQ29ybmVyUmFkaXVzPTB9c2V0V2lkdGgoZSx0PVswLDAsMCwwXSl7aWYoZSBpbnN0YW5jZW9mIHMuTmFtZSl0aGlzLndpZHRoPTA7ZWxzZSBpZigibnVtYmVyIj09dHlwZW9mIGUpe2lmKGU+MCl7Y29uc3QgYT0odFsyXS10WzBdKS8yLG49KHRbM10tdFsxXSkvMjtpZihhPjAmJm4+MCYmKGU+YXx8ZT5uKSl7KDAsci53YXJuKShgQW5ub3RhdGlvbkJvcmRlclN0eWxlLnNldFdpZHRoIC0gaWdub3Jpbmcgd2lkdGg6ICR7ZX1gKTtlPTF9fXRoaXMud2lkdGg9ZX19c2V0U3R5bGUoZSl7aWYoZSBpbnN0YW5jZW9mIHMuTmFtZSlzd2l0Y2goZS5uYW1lKXtjYXNlIlMiOnRoaXMuc3R5bGU9ci5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLlNPTElEO2JyZWFrO2Nhc2UiRCI6dGhpcy5zdHlsZT1yLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuREFTSEVEO2JyZWFrO2Nhc2UiQiI6dGhpcy5zdHlsZT1yLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuQkVWRUxFRDticmVhaztjYXNlIkkiOnRoaXMuc3R5bGU9ci5Bbm5vdGF0aW9uQm9yZGVyU3R5bGVUeXBlLklOU0VUO2JyZWFrO2Nhc2UiVSI6dGhpcy5zdHlsZT1yLkFubm90YXRpb25Cb3JkZXJTdHlsZVR5cGUuVU5ERVJMSU5FfX1zZXREYXNoQXJyYXkoZSx0PSExKXtpZihBcnJheS5pc0FycmF5KGUpJiZlLmxlbmd0aD4wKXtsZXQgYT0hMCxyPSEwO2Zvcihjb25zdCB0IG9mIGUpe2lmKCEoK3Q+PTApKXthPSExO2JyZWFrfXQ+MCYmKHI9ITEpfWlmKGEmJiFyKXt0aGlzLmRhc2hBcnJheT1lO3QmJnRoaXMuc2V0U3R5bGUocy5OYW1lLmdldCgiRCIpKX1lbHNlIHRoaXMud2lkdGg9MH1lbHNlIGUmJih0aGlzLndpZHRoPTApfXNldEhvcml6b250YWxDb3JuZXJSYWRpdXMoZSl7TnVtYmVyLmlzSW50ZWdlcihlKSYmKHRoaXMuaG9yaXpvbnRhbENvcm5lclJhZGl1cz1lKX1zZXRWZXJ0aWNhbENvcm5lclJhZGl1cyhlKXtOdW1iZXIuaXNJbnRlZ2VyKGUpJiYodGhpcy52ZXJ0aWNhbENvcm5lclJhZGl1cz1lKX19dC5Bbm5vdGF0aW9uQm9yZGVyU3R5bGU9QW5ub3RhdGlvbkJvcmRlclN0eWxlO2NsYXNzIE1hcmt1cEFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO2NvbnN0e2RpY3Q6dH09ZTtpZih0LmhhcygiSVJUIikpe2NvbnN0IGU9dC5nZXRSYXcoIklSVCIpO3RoaXMuZGF0YS5pblJlcGx5VG89ZSBpbnN0YW5jZW9mIHMuUmVmP2UudG9TdHJpbmcoKTpudWxsO2NvbnN0IGE9dC5nZXQoIlJUIik7dGhpcy5kYXRhLnJlcGx5VHlwZT1hIGluc3RhbmNlb2Ygcy5OYW1lP2EubmFtZTpyLkFubm90YXRpb25SZXBseVR5cGUuUkVQTFl9bGV0IGE9bnVsbDtpZih0aGlzLmRhdGEucmVwbHlUeXBlPT09ci5Bbm5vdGF0aW9uUmVwbHlUeXBlLkdST1VQKXtjb25zdCBlPXQuZ2V0KCJJUlQiKTt0aGlzLnNldFRpdGxlKGUuZ2V0KCJUIikpO3RoaXMuZGF0YS50aXRsZU9iaj10aGlzLl90aXRsZTt0aGlzLnNldENvbnRlbnRzKGUuZ2V0KCJDb250ZW50cyIpKTt0aGlzLmRhdGEuY29udGVudHNPYmo9dGhpcy5fY29udGVudHM7aWYoZS5oYXMoIkNyZWF0aW9uRGF0ZSIpKXt0aGlzLnNldENyZWF0aW9uRGF0ZShlLmdldCgiQ3JlYXRpb25EYXRlIikpO3RoaXMuZGF0YS5jcmVhdGlvbkRhdGU9dGhpcy5jcmVhdGlvbkRhdGV9ZWxzZSB0aGlzLmRhdGEuY3JlYXRpb25EYXRlPW51bGw7aWYoZS5oYXMoIk0iKSl7dGhpcy5zZXRNb2RpZmljYXRpb25EYXRlKGUuZ2V0KCJNIikpO3RoaXMuZGF0YS5tb2RpZmljYXRpb25EYXRlPXRoaXMubW9kaWZpY2F0aW9uRGF0ZX1lbHNlIHRoaXMuZGF0YS5tb2RpZmljYXRpb25EYXRlPW51bGw7YT1lLmdldFJhdygiUG9wdXAiKTtpZihlLmhhcygiQyIpKXt0aGlzLnNldENvbG9yKGUuZ2V0QXJyYXkoIkMiKSk7dGhpcy5kYXRhLmNvbG9yPXRoaXMuY29sb3J9ZWxzZSB0aGlzLmRhdGEuY29sb3I9bnVsbH1lbHNle3RoaXMuZGF0YS50aXRsZU9iaj10aGlzLl90aXRsZTt0aGlzLnNldENyZWF0aW9uRGF0ZSh0LmdldCgiQ3JlYXRpb25EYXRlIikpO3RoaXMuZGF0YS5jcmVhdGlvbkRhdGU9dGhpcy5jcmVhdGlvbkRhdGU7YT10LmdldFJhdygiUG9wdXAiKTt0LmhhcygiQyIpfHwodGhpcy5kYXRhLmNvbG9yPW51bGwpfXRoaXMuZGF0YS5wb3B1cFJlZj1hIGluc3RhbmNlb2Ygcy5SZWY/YS50b1N0cmluZygpOm51bGw7dC5oYXMoIlJDIikmJih0aGlzLmRhdGEucmljaFRleHQ9Yi5YRkFGYWN0b3J5LmdldFJpY2hUZXh0QXNIdG1sKHQuZ2V0KCJSQyIpKSl9c2V0Q3JlYXRpb25EYXRlKGUpe3RoaXMuY3JlYXRpb25EYXRlPSJzdHJpbmciPT10eXBlb2YgZT9lOm51bGx9X3NldERlZmF1bHRBcHBlYXJhbmNlKHt4cmVmOmUsZXh0cmE6dCxzdHJva2VDb2xvcjphLGZpbGxDb2xvcjpyLGJsZW5kTW9kZTpuLHN0cm9rZUFscGhhOmksZmlsbEFscGhhOmMscG9pbnRzQ2FsbGJhY2s6bH0pe2xldCBoPU51bWJlci5NQVhfVkFMVUUsdT1OdW1iZXIuTUFYX1ZBTFVFLGQ9TnVtYmVyLk1JTl9WQUxVRSxmPU51bWJlci5NSU5fVkFMVUU7Y29uc3QgZz1bInEiXTt0JiZnLnB1c2godCk7YSYmZy5wdXNoKGAke2FbMF19ICR7YVsxXX0gJHthWzJdfSBSR2ApO3ImJmcucHVzaChgJHtyWzBdfSAke3JbMV19ICR7clsyXX0gcmdgKTtsZXQgcD10aGlzLmRhdGEucXVhZFBvaW50cztwfHwocD1bW3t4OnRoaXMucmVjdGFuZ2xlWzBdLHk6dGhpcy5yZWN0YW5nbGVbM119LHt4OnRoaXMucmVjdGFuZ2xlWzJdLHk6dGhpcy5yZWN0YW5nbGVbM119LHt4OnRoaXMucmVjdGFuZ2xlWzBdLHk6dGhpcy5yZWN0YW5nbGVbMV19LHt4OnRoaXMucmVjdGFuZ2xlWzJdLHk6dGhpcy5yZWN0YW5nbGVbMV19XV0pO2Zvcihjb25zdCBlIG9mIHApe2NvbnN0W3QsYSxyLG5dPWwoZyxlKTtoPU1hdGgubWluKGgsdCk7ZD1NYXRoLm1heChkLGEpO3U9TWF0aC5taW4odSxyKTtmPU1hdGgubWF4KGYsbil9Zy5wdXNoKCJRIik7Y29uc3QgbT1uZXcgcy5EaWN0KGUpLGI9bmV3IHMuRGljdChlKTtiLnNldCgiU3VidHlwZSIscy5OYW1lLmdldCgiRm9ybSIpKTtjb25zdCB5PW5ldyBvLlN0cmluZ1N0cmVhbShnLmpvaW4oIiAiKSk7eS5kaWN0PWI7bS5zZXQoIkZtMCIseSk7Y29uc3Qgdz1uZXcgcy5EaWN0KGUpO24mJncuc2V0KCJCTSIscy5OYW1lLmdldChuKSk7Im51bWJlciI9PXR5cGVvZiBpJiZ3LnNldCgiQ0EiLGkpOyJudW1iZXIiPT10eXBlb2YgYyYmdy5zZXQoImNhIixjKTtjb25zdCBTPW5ldyBzLkRpY3QoZSk7Uy5zZXQoIkdTMCIsdyk7Y29uc3QgeD1uZXcgcy5EaWN0KGUpO3guc2V0KCJFeHRHU3RhdGUiLFMpO3guc2V0KCJYT2JqZWN0IixtKTtjb25zdCBDPW5ldyBzLkRpY3QoZSk7Qy5zZXQoIlJlc291cmNlcyIseCk7Y29uc3Qgaz10aGlzLmRhdGEucmVjdD1baCx1LGQsZl07Qy5zZXQoIkJCb3giLGspO3RoaXMuYXBwZWFyYW5jZT1uZXcgby5TdHJpbmdTdHJlYW0oIi9HUzAgZ3MgL0ZtMCBEbyIpO3RoaXMuYXBwZWFyYW5jZS5kaWN0PUM7dGhpcy5fc3RyZWFtcy5wdXNoKHRoaXMuYXBwZWFyYW5jZSx5KX1zdGF0aWMgYXN5bmMgY3JlYXRlTmV3QW5ub3RhdGlvbihlLHQsYSxyKXtjb25zdCBuPXQucmVmfHw9ZS5nZXROZXdUZW1wb3JhcnlSZWYoKSxpPWF3YWl0IHRoaXMuY3JlYXRlTmV3QXBwZWFyYW5jZVN0cmVhbSh0LGUscikscz1bXTtsZXQgbztpZihpKXtjb25zdCByPWUuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7bz10aGlzLmNyZWF0ZU5ld0RpY3QodCxlLHthcFJlZjpyfSk7YXdhaXQoMCxtLndyaXRlT2JqZWN0KShyLGkscyxlKTthLnB1c2goe3JlZjpyLGRhdGE6cy5qb2luKCIiKX0pfWVsc2Ugbz10aGlzLmNyZWF0ZU5ld0RpY3QodCxlLHt9KTtOdW1iZXIuaXNJbnRlZ2VyKHQucGFyZW50VHJlZUlkKSYmby5zZXQoIlN0cnVjdFBhcmVudCIsdC5wYXJlbnRUcmVlSWQpO3MubGVuZ3RoPTA7YXdhaXQoMCxtLndyaXRlT2JqZWN0KShuLG8scyxlKTtyZXR1cm57cmVmOm4sZGF0YTpzLmpvaW4oIiIpfX1zdGF0aWMgYXN5bmMgY3JlYXRlTmV3UHJpbnRBbm5vdGF0aW9uKGUsdCxhLHIpe2NvbnN0IG49YXdhaXQgdGhpcy5jcmVhdGVOZXdBcHBlYXJhbmNlU3RyZWFtKGEsdCxyKSxpPXRoaXMuY3JlYXRlTmV3RGljdChhLHQse2FwOm59KSxzPW5ldyB0aGlzLnByb3RvdHlwZS5jb25zdHJ1Y3Rvcih7ZGljdDppLHhyZWY6dCxhbm5vdGF0aW9uR2xvYmFsczplLGV2YWx1YXRvck9wdGlvbnM6ci5ldmFsdWF0b3JPcHRpb25zfSk7YS5yZWYmJihzLnJlZj1zLnJlZlRvUmVwbGFjZT1hLnJlZik7cmV0dXJuIHN9fXQuTWFya3VwQW5ub3RhdGlvbj1NYXJrdXBBbm5vdGF0aW9uO2NsYXNzIFdpZGdldEFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO2NvbnN0e2RpY3Q6dCx4cmVmOmEsYW5ub3RhdGlvbkdsb2JhbHM6aX09ZSxvPXRoaXMuZGF0YTt0aGlzLl9uZWVkQXBwZWFyYW5jZXM9ZS5uZWVkQXBwZWFyYW5jZXM7by5hbm5vdGF0aW9uVHlwZT1yLkFubm90YXRpb25UeXBlLldJREdFVDt2b2lkIDA9PT1vLmZpZWxkTmFtZSYmKG8uZmllbGROYW1lPXRoaXMuX2NvbnN0cnVjdEZpZWxkTmFtZSh0KSk7dm9pZCAwPT09by5hY3Rpb25zJiYoby5hY3Rpb25zPSgwLG4uY29sbGVjdEFjdGlvbnMpKGEsdCxyLkFubm90YXRpb25BY3Rpb25FdmVudFR5cGUpKTtsZXQgYz0oMCxuLmdldEluaGVyaXRhYmxlUHJvcGVydHkpKHtkaWN0OnQsa2V5OiJWIixnZXRBcnJheTohMH0pO28uZmllbGRWYWx1ZT10aGlzLl9kZWNvZGVGb3JtVmFsdWUoYyk7Y29uc3QgbD0oMCxuLmdldEluaGVyaXRhYmxlUHJvcGVydHkpKHtkaWN0OnQsa2V5OiJEViIsZ2V0QXJyYXk6ITB9KTtvLmRlZmF1bHRGaWVsZFZhbHVlPXRoaXMuX2RlY29kZUZvcm1WYWx1ZShsKTtpZih2b2lkIDA9PT1jJiZpLnhmYURhdGFzZXRzKXtjb25zdCBlPXRoaXMuX3RpdGxlLnN0cjtpZihlKXt0aGlzLl9oYXNWYWx1ZUZyb21YRkE9ITA7by5maWVsZFZhbHVlPWM9aS54ZmFEYXRhc2V0cy5nZXRWYWx1ZShlKX19dm9pZCAwPT09YyYmbnVsbCE9PW8uZGVmYXVsdEZpZWxkVmFsdWUmJihvLmZpZWxkVmFsdWU9by5kZWZhdWx0RmllbGRWYWx1ZSk7by5hbHRlcm5hdGl2ZVRleHQ9KDAsci5zdHJpbmdUb1BERlN0cmluZykodC5nZXQoIlRVIil8fCIiKTt0aGlzLnNldERlZmF1bHRBcHBlYXJhbmNlKGUpO28uaGFzQXBwZWFyYW5jZXx8PXRoaXMuX25lZWRBcHBlYXJhbmNlcyYmdm9pZCAwIT09by5maWVsZFZhbHVlJiZudWxsIT09by5maWVsZFZhbHVlO2NvbnN0IGg9KDAsbi5nZXRJbmhlcml0YWJsZVByb3BlcnR5KSh7ZGljdDp0LGtleToiRlQifSk7by5maWVsZFR5cGU9aCBpbnN0YW5jZW9mIHMuTmFtZT9oLm5hbWU6bnVsbDtjb25zdCB1PSgwLG4uZ2V0SW5oZXJpdGFibGVQcm9wZXJ0eSkoe2RpY3Q6dCxrZXk6IkRSIn0pLGQ9aS5hY3JvRm9ybS5nZXQoIkRSIiksZj10aGlzLmFwcGVhcmFuY2U/LmRpY3QuZ2V0KCJSZXNvdXJjZXMiKTt0aGlzLl9maWVsZFJlc291cmNlcz17bG9jYWxSZXNvdXJjZXM6dSxhY3JvRm9ybVJlc291cmNlczpkLGFwcGVhcmFuY2VSZXNvdXJjZXM6ZixtZXJnZWRSZXNvdXJjZXM6cy5EaWN0Lm1lcmdlKHt4cmVmOmEsZGljdEFycmF5Olt1LGYsZF0sbWVyZ2VTdWJEaWN0czohMH0pfTtvLmZpZWxkRmxhZ3M9KDAsbi5nZXRJbmhlcml0YWJsZVByb3BlcnR5KSh7ZGljdDp0LGtleToiRmYifSk7KCFOdW1iZXIuaXNJbnRlZ2VyKG8uZmllbGRGbGFncyl8fG8uZmllbGRGbGFnczwwKSYmKG8uZmllbGRGbGFncz0wKTtvLnJlYWRPbmx5PXRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5SRUFET05MWSk7by5yZXF1aXJlZD10aGlzLmhhc0ZpZWxkRmxhZyhyLkFubm90YXRpb25GaWVsZEZsYWcuUkVRVUlSRUQpO28uaGlkZGVuPXRoaXMuX2hhc0ZsYWcoby5hbm5vdGF0aW9uRmxhZ3Msci5Bbm5vdGF0aW9uRmxhZy5ISURERU4pfHx0aGlzLl9oYXNGbGFnKG8uYW5ub3RhdGlvbkZsYWdzLHIuQW5ub3RhdGlvbkZsYWcuTk9WSUVXKX1fZGVjb2RlRm9ybVZhbHVlKGUpe3JldHVybiBBcnJheS5pc0FycmF5KGUpP2UuZmlsdGVyKChlPT4ic3RyaW5nIj09dHlwZW9mIGUpKS5tYXAoKGU9PigwLHIuc3RyaW5nVG9QREZTdHJpbmcpKGUpKSk6ZSBpbnN0YW5jZW9mIHMuTmFtZT8oMCxyLnN0cmluZ1RvUERGU3RyaW5nKShlLm5hbWUpOiJzdHJpbmciPT10eXBlb2YgZT8oMCxyLnN0cmluZ1RvUERGU3RyaW5nKShlKTpudWxsfWhhc0ZpZWxkRmxhZyhlKXtyZXR1cm4hISh0aGlzLmRhdGEuZmllbGRGbGFncyZlKX1faXNWaWV3YWJsZShlKXtyZXR1cm4hdGhpcy5faGFzRmxhZyhlLHIuQW5ub3RhdGlvbkZsYWcuSU5WSVNJQkxFKX1tdXN0QmVWaWV3ZWQoZSx0KXtyZXR1cm4gdD90aGlzLnZpZXdhYmxlOnN1cGVyLm11c3RCZVZpZXdlZChlLHQpJiYhdGhpcy5faGFzRmxhZyh0aGlzLmZsYWdzLHIuQW5ub3RhdGlvbkZsYWcuTk9WSUVXKX1nZXRSb3RhdGlvbk1hdHJpeChlKXtsZXQgdD1lPy5nZXQodGhpcy5kYXRhLmlkKT8ucm90YXRpb247dm9pZCAwPT09dCYmKHQ9dGhpcy5yb3RhdGlvbik7aWYoMD09PXQpcmV0dXJuIHIuSURFTlRJVFlfTUFUUklYO2NvbnN0IGE9dGhpcy5kYXRhLnJlY3RbMl0tdGhpcy5kYXRhLnJlY3RbMF0saT10aGlzLmRhdGEucmVjdFszXS10aGlzLmRhdGEucmVjdFsxXTtyZXR1cm4oMCxuLmdldFJvdGF0aW9uTWF0cml4KSh0LGEsaSl9Z2V0Qm9yZGVyQW5kQmFja2dyb3VuZEFwcGVhcmFuY2VzKGUpe2xldCB0PWU/LmdldCh0aGlzLmRhdGEuaWQpPy5yb3RhdGlvbjt2b2lkIDA9PT10JiYodD10aGlzLnJvdGF0aW9uKTtpZighdGhpcy5iYWNrZ3JvdW5kQ29sb3ImJiF0aGlzLmJvcmRlckNvbG9yKXJldHVybiIiO2NvbnN0IGE9dGhpcy5kYXRhLnJlY3RbMl0tdGhpcy5kYXRhLnJlY3RbMF0scj10aGlzLmRhdGEucmVjdFszXS10aGlzLmRhdGEucmVjdFsxXSxuPTA9PT10fHwxODA9PT10P2AwIDAgJHthfSAke3J9IHJlYDpgMCAwICR7cn0gJHthfSByZWA7bGV0IHM9IiI7dGhpcy5iYWNrZ3JvdW5kQ29sb3ImJihzPWAkeygwLGkuZ2V0UGRmQ29sb3IpKHRoaXMuYmFja2dyb3VuZENvbG9yLCEwKX0gJHtufSBmIGApO2lmKHRoaXMuYm9yZGVyQ29sb3Ipe3MrPWAke3RoaXMuYm9yZGVyU3R5bGUud2lkdGh8fDF9IHcgJHsoMCxpLmdldFBkZkNvbG9yKSh0aGlzLmJvcmRlckNvbG9yLCExKX0gJHtufSBTIGB9cmV0dXJuIHN9YXN5bmMgZ2V0T3BlcmF0b3JMaXN0KGUsdCxhLG4saSl7aWYobiYmISh0aGlzIGluc3RhbmNlb2YgU2lnbmF0dXJlV2lkZ2V0QW5ub3RhdGlvbikmJiF0aGlzLmRhdGEubm9IVE1MJiYhdGhpcy5kYXRhLmhhc093bkNhbnZhcylyZXR1cm57b3BMaXN0Om5ldyBwLk9wZXJhdG9yTGlzdCxzZXBhcmF0ZUZvcm06ITAsc2VwYXJhdGVDYW52YXM6ITF9O2lmKCF0aGlzLl9oYXNUZXh0KXJldHVybiBzdXBlci5nZXRPcGVyYXRvckxpc3QoZSx0LGEsbixpKTtjb25zdCBzPWF3YWl0IHRoaXMuX2dldEFwcGVhcmFuY2UoZSx0LGEsaSk7aWYodGhpcy5hcHBlYXJhbmNlJiZudWxsPT09cylyZXR1cm4gc3VwZXIuZ2V0T3BlcmF0b3JMaXN0KGUsdCxhLG4saSk7Y29uc3QgYz1uZXcgcC5PcGVyYXRvckxpc3Q7aWYoIXRoaXMuX2RlZmF1bHRBcHBlYXJhbmNlfHxudWxsPT09cylyZXR1cm57b3BMaXN0OmMsc2VwYXJhdGVGb3JtOiExLHNlcGFyYXRlQ2FudmFzOiExfTtjb25zdCBsPSEhKHRoaXMuZGF0YS5oYXNPd25DYW52YXMmJmEmci5SZW5kZXJpbmdJbnRlbnRGbGFnLkRJU1BMQVkpLGg9WzAsMCx0aGlzLmRhdGEucmVjdFsyXS10aGlzLmRhdGEucmVjdFswXSx0aGlzLmRhdGEucmVjdFszXS10aGlzLmRhdGEucmVjdFsxXV0sdT1nZXRUcmFuc2Zvcm1NYXRyaXgodGhpcy5kYXRhLnJlY3QsaCxbMSwwLDAsMSwwLDBdKTtsZXQgZDt0aGlzLm9jJiYoZD1hd2FpdCBlLnBhcnNlTWFya2VkQ29udGVudFByb3BzKHRoaXMub2MsbnVsbCkpO3ZvaWQgMCE9PWQmJmMuYWRkT3Aoci5PUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsWyJPQyIsZF0pO2MuYWRkT3Aoci5PUFMuYmVnaW5Bbm5vdGF0aW9uLFt0aGlzLmRhdGEuaWQsdGhpcy5kYXRhLnJlY3QsdSx0aGlzLmdldFJvdGF0aW9uTWF0cml4KGkpLGxdKTtjb25zdCBmPW5ldyBvLlN0cmluZ1N0cmVhbShzKTthd2FpdCBlLmdldE9wZXJhdG9yTGlzdCh7c3RyZWFtOmYsdGFzazp0LHJlc291cmNlczp0aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMsb3BlcmF0b3JMaXN0OmN9KTtjLmFkZE9wKHIuT1BTLmVuZEFubm90YXRpb24sW10pO3ZvaWQgMCE9PWQmJmMuYWRkT3Aoci5PUFMuZW5kTWFya2VkQ29udGVudCxbXSk7cmV0dXJue29wTGlzdDpjLHNlcGFyYXRlRm9ybTohMSxzZXBhcmF0ZUNhbnZhczpsfX1fZ2V0TUtEaWN0KGUpe2NvbnN0IHQ9bmV3IHMuRGljdChudWxsKTtlJiZ0LnNldCgiUiIsZSk7dGhpcy5ib3JkZXJDb2xvciYmdC5zZXQoIkJDIixnZXRQZGZDb2xvckFycmF5KHRoaXMuYm9yZGVyQ29sb3IpKTt0aGlzLmJhY2tncm91bmRDb2xvciYmdC5zZXQoIkJHIixnZXRQZGZDb2xvckFycmF5KHRoaXMuYmFja2dyb3VuZENvbG9yKSk7cmV0dXJuIHQuc2l6ZT4wP3Q6bnVsbH1hbWVuZFNhdmVkRGljdChlLHQpe31hc3luYyBzYXZlKGUsdCxhKXtjb25zdCBpPWE/LmdldCh0aGlzLmRhdGEuaWQpO2xldCBjPWk/LnZhbHVlLGw9aT8ucm90YXRpb247aWYoYz09PXRoaXMuZGF0YS5maWVsZFZhbHVlfHx2b2lkIDA9PT1jKXtpZighdGhpcy5faGFzVmFsdWVGcm9tWEZBJiZ2b2lkIDA9PT1sKXJldHVybiBudWxsO2N8fD10aGlzLmRhdGEuZmllbGRWYWx1ZX1pZih2b2lkIDA9PT1sJiYhdGhpcy5faGFzVmFsdWVGcm9tWEZBJiZBcnJheS5pc0FycmF5KGMpJiZBcnJheS5pc0FycmF5KHRoaXMuZGF0YS5maWVsZFZhbHVlKSYmYy5sZW5ndGg9PT10aGlzLmRhdGEuZmllbGRWYWx1ZS5sZW5ndGgmJmMuZXZlcnkoKChlLHQpPT5lPT09dGhpcy5kYXRhLmZpZWxkVmFsdWVbdF0pKSlyZXR1cm4gbnVsbDt2b2lkIDA9PT1sJiYobD10aGlzLnJvdGF0aW9uKTtsZXQgaD1udWxsO2lmKCF0aGlzLl9uZWVkQXBwZWFyYW5jZXMpe2g9YXdhaXQgdGhpcy5fZ2V0QXBwZWFyYW5jZShlLHQsci5SZW5kZXJpbmdJbnRlbnRGbGFnLlNBVkUsYSk7aWYobnVsbD09PWgpcmV0dXJuIG51bGx9bGV0IHU9ITE7aWYoaD8ubmVlZEFwcGVhcmFuY2VzKXt1PSEwO2g9bnVsbH1jb25zdHt4cmVmOmR9PWUsZj1kLmZldGNoSWZSZWYodGhpcy5yZWYpO2lmKCEoZiBpbnN0YW5jZW9mIHMuRGljdCkpcmV0dXJuIG51bGw7Y29uc3QgZz1uZXcgcy5EaWN0KGQpO2Zvcihjb25zdCBlIG9mIGYuZ2V0S2V5cygpKSJBUCIhPT1lJiZnLnNldChlLGYuZ2V0UmF3KGUpKTtjb25zdCBwPXtwYXRoOnRoaXMuZGF0YS5maWVsZE5hbWUsdmFsdWU6Y30sZW5jb2Rlcj1lPT4oMCxuLmlzQXNjaWkpKGUpP2U6KDAsbi5zdHJpbmdUb1VURjE2U3RyaW5nKShlLCEwKTtnLnNldCgiViIsQXJyYXkuaXNBcnJheShjKT9jLm1hcChlbmNvZGVyKTplbmNvZGVyKGMpKTt0aGlzLmFtZW5kU2F2ZWREaWN0KGEsZyk7Y29uc3QgYj10aGlzLl9nZXRNS0RpY3QobCk7YiYmZy5zZXQoIk1LIixiKTtjb25zdCB5PVtdLHc9W3tyZWY6dGhpcy5yZWYsZGF0YToiIix4ZmE6cCxuZWVkQXBwZWFyYW5jZXM6dX1dO2lmKG51bGwhPT1oKXtjb25zdCBlPWQuZ2V0TmV3VGVtcG9yYXJ5UmVmKCksdD1uZXcgcy5EaWN0KGQpO2cuc2V0KCJBUCIsdCk7dC5zZXQoIk4iLGUpO2NvbnN0IG49dGhpcy5fZ2V0U2F2ZUZpZWxkUmVzb3VyY2VzKGQpLGk9bmV3IG8uU3RyaW5nU3RyZWFtKGgpLGM9aS5kaWN0PW5ldyBzLkRpY3QoZCk7Yy5zZXQoIlN1YnR5cGUiLHMuTmFtZS5nZXQoIkZvcm0iKSk7Yy5zZXQoIlJlc291cmNlcyIsbik7Yy5zZXQoIkJCb3giLFswLDAsdGhpcy5kYXRhLnJlY3RbMl0tdGhpcy5kYXRhLnJlY3RbMF0sdGhpcy5kYXRhLnJlY3RbM10tdGhpcy5kYXRhLnJlY3RbMV1dKTtjb25zdCBsPXRoaXMuZ2V0Um90YXRpb25NYXRyaXgoYSk7bCE9PXIuSURFTlRJVFlfTUFUUklYJiZjLnNldCgiTWF0cml4IixsKTthd2FpdCgwLG0ud3JpdGVPYmplY3QpKGUsaSx5LGQpO3cucHVzaCh7cmVmOmUsZGF0YTp5LmpvaW4oIiIpLHhmYTpudWxsLG5lZWRBcHBlYXJhbmNlczohMX0pO3kubGVuZ3RoPTB9Zy5zZXQoIk0iLGBEOiR7KDAsci5nZXRNb2RpZmljYXRpb25EYXRlKSgpfWApO2F3YWl0KDAsbS53cml0ZU9iamVjdCkodGhpcy5yZWYsZyx5LGQpO3dbMF0uZGF0YT15LmpvaW4oIiIpO3JldHVybiB3fWFzeW5jIF9nZXRBcHBlYXJhbmNlKGUsdCxhLHMpe2lmKHRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5QQVNTV09SRCkpcmV0dXJuIG51bGw7Y29uc3Qgbz1zPy5nZXQodGhpcy5kYXRhLmlkKTtsZXQgYyxsO2lmKG8pe2M9by5mb3JtYXR0ZWRWYWx1ZXx8by52YWx1ZTtsPW8ucm90YXRpb259aWYodm9pZCAwPT09bCYmdm9pZCAwPT09YyYmIXRoaXMuX25lZWRBcHBlYXJhbmNlcyYmKCF0aGlzLl9oYXNWYWx1ZUZyb21YRkF8fHRoaXMuYXBwZWFyYW5jZSkpcmV0dXJuIG51bGw7Y29uc3QgaD10aGlzLmdldEJvcmRlckFuZEJhY2tncm91bmRBcHBlYXJhbmNlcyhzKTtpZih2b2lkIDA9PT1jKXtjPXRoaXMuZGF0YS5maWVsZFZhbHVlO2lmKCFjKXJldHVybmAvVHggQk1DIHEgJHtofVEgRU1DYH1BcnJheS5pc0FycmF5KGMpJiYxPT09Yy5sZW5ndGgmJihjPWNbMF0pOygwLHIuYXNzZXJ0KSgic3RyaW5nIj09dHlwZW9mIGMsIkV4cGVjdGVkIGB2YWx1ZWAgdG8gYmUgYSBzdHJpbmcuIik7Yz1jLnRyaW0oKTtpZih0aGlzLmRhdGEuY29tYm8pe2NvbnN0IGU9dGhpcy5kYXRhLm9wdGlvbnMuZmluZCgoKHtleHBvcnRWYWx1ZTplfSk9PmM9PT1lKSk7Yz1lPy5kaXNwbGF5VmFsdWV8fGN9aWYoIiI9PT1jKXJldHVybmAvVHggQk1DIHEgJHtofVEgRU1DYDt2b2lkIDA9PT1sJiYobD10aGlzLnJvdGF0aW9uKTtsZXQgdSxkPS0xO2lmKHRoaXMuZGF0YS5tdWx0aUxpbmUpe3U9Yy5zcGxpdCgvXHJcbj98XG4vKS5tYXAoKGU9PmUubm9ybWFsaXplKCJORkMiKSkpO2Q9dS5sZW5ndGh9ZWxzZSB1PVtjLnJlcGxhY2UoL1xyXG4/fFxuLywiIikubm9ybWFsaXplKCJORkMiKV07bGV0IGY9dGhpcy5kYXRhLnJlY3RbM10tdGhpcy5kYXRhLnJlY3RbMV0sZz10aGlzLmRhdGEucmVjdFsyXS10aGlzLmRhdGEucmVjdFswXTs5MCE9PWwmJjI3MCE9PWx8fChbZyxmXT1bZixnXSk7dGhpcy5fZGVmYXVsdEFwcGVhcmFuY2V8fCh0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhPSgwLGkucGFyc2VEZWZhdWx0QXBwZWFyYW5jZSkodGhpcy5fZGVmYXVsdEFwcGVhcmFuY2U9Ii9IZWx2ZXRpY2EgMCBUZiAwIGciKSk7bGV0IHAsbSxiLHk9YXdhaXQgV2lkZ2V0QW5ub3RhdGlvbi5fZ2V0Rm9udERhdGEoZSx0LHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEsdGhpcy5fZmllbGRSZXNvdXJjZXMubWVyZ2VkUmVzb3VyY2VzKTtjb25zdCB3PVtdO2xldCBTPSExO2Zvcihjb25zdCBlIG9mIHUpe2NvbnN0IHQ9eS5lbmNvZGVTdHJpbmcoZSk7dC5sZW5ndGg+MSYmKFM9ITApO3cucHVzaCh0LmpvaW4oIiIpKX1pZihTJiZhJnIuUmVuZGVyaW5nSW50ZW50RmxhZy5TQVZFKXJldHVybntuZWVkQXBwZWFyYW5jZXM6ITB9O2lmKFMmJnRoaXMuX2lzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKXtjb25zdCBhPXRoaXMuZGF0YS5jb21iPyJtb25vc3BhY2UiOiJzYW5zLXNlcmlmIixyPW5ldyBpLkZha2VVbmljb2RlRm9udChlLnhyZWYsYSkscz1yLmNyZWF0ZUZvbnRSZXNvdXJjZXModS5qb2luKCIiKSksbz1zLmdldFJhdygiRm9udCIpO2lmKHRoaXMuX2ZpZWxkUmVzb3VyY2VzLm1lcmdlZFJlc291cmNlcy5oYXMoIkZvbnQiKSl7Y29uc3QgZT10aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMuZ2V0KCJGb250Iik7Zm9yKGNvbnN0IHQgb2Ygby5nZXRLZXlzKCkpZS5zZXQodCxvLmdldFJhdyh0KSl9ZWxzZSB0aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMuc2V0KCJGb250IixvKTtjb25zdCBsPXIuZm9udE5hbWUubmFtZTt5PWF3YWl0IFdpZGdldEFubm90YXRpb24uX2dldEZvbnREYXRhKGUsdCx7Zm9udE5hbWU6bCxmb250U2l6ZTowfSxzKTtmb3IobGV0IGU9MCx0PXcubGVuZ3RoO2U8dDtlKyspd1tlXT0oMCxuLnN0cmluZ1RvVVRGMTZTdHJpbmcpKHVbZV0pO2NvbnN0IGg9T2JqZWN0LmFzc2lnbihPYmplY3QuY3JlYXRlKG51bGwpLHRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEpO3RoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEuZm9udFNpemU9MDt0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhLmZvbnROYW1lPWw7W3AsbSxiXT10aGlzLl9jb21wdXRlRm9udFNpemUoZi0yLGctNCxjLHksZCk7dGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YT1ofWVsc2V7dGhpcy5faXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWR8fCgwLHIud2FybikoIl9nZXRBcHBlYXJhbmNlOiBPZmZzY3JlZW5DYW52YXMgaXMgbm90IHN1cHBvcnRlZCwgYW5ub3RhdGlvbiBtYXkgbm90IHJlbmRlciBjb3JyZWN0bHkuIik7W3AsbSxiXT10aGlzLl9jb21wdXRlRm9udFNpemUoZi0yLGctNCxjLHksZCl9bGV0IHg9eS5kZXNjZW50O3g9aXNOYU4oeCk/ci5CQVNFTElORV9GQUNUT1IqYjpNYXRoLm1heChyLkJBU0VMSU5FX0ZBQ1RPUipiLE1hdGguYWJzKHgpKm0pO2NvbnN0IEM9TWF0aC5taW4oTWF0aC5mbG9vcigoZi1tKS8yKSwxKSxrPXRoaXMuZGF0YS50ZXh0QWxpZ25tZW50O2lmKHRoaXMuZGF0YS5tdWx0aUxpbmUpcmV0dXJuIHRoaXMuX2dldE11bHRpbGluZUFwcGVhcmFuY2UocCx3LHksbSxnLGYsaywyLEMseCxiLHMpO2lmKHRoaXMuZGF0YS5jb21iKXJldHVybiB0aGlzLl9nZXRDb21iQXBwZWFyYW5jZShwLHksd1swXSxtLGcsZiwyLEMseCxiLHMpO2NvbnN0IHY9Qyt4O2lmKDA9PT1rfHxrPjIpcmV0dXJuYC9UeCBCTUMgcSAke2h9QlQgYCtwK2AgMSAwIDAgMSAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKDIpfSAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKHYpfSBUbSAoJHsoMCxuLmVzY2FwZVN0cmluZykod1swXSl9KSBUaiBFVCBRIEVNQ2A7cmV0dXJuYC9UeCBCTUMgcSAke2h9QlQgYCtwK2AgMSAwIDAgMSAwIDAgVG0gJHt0aGlzLl9yZW5kZXJUZXh0KHdbMF0seSxtLGcsayx7c2hpZnQ6MH0sMix2KX0gRVQgUSBFTUNgfXN0YXRpYyBhc3luYyBfZ2V0Rm9udERhdGEoZSx0LGEscil7Y29uc3Qgbj1uZXcgcC5PcGVyYXRvckxpc3QsaT17Zm9udDpudWxsLGNsb25lKCl7cmV0dXJuIHRoaXN9fSx7Zm9udE5hbWU6byxmb250U2l6ZTpjfT1hO2F3YWl0IGUuaGFuZGxlU2V0Rm9udChyLFtvJiZzLk5hbWUuZ2V0KG8pLGNdLG51bGwsbix0LGksbnVsbCk7cmV0dXJuIGkuZm9udH1fZ2V0VGV4dFdpZHRoKGUsdCl7cmV0dXJuIHQuY2hhcnNUb0dseXBocyhlKS5yZWR1Y2UoKChlLHQpPT5lK3Qud2lkdGgpLDApLzFlM31fY29tcHV0ZUZvbnRTaXplKGUsdCxhLG4scyl7bGV0e2ZvbnRTaXplOm99PXRoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEsYz0ob3x8MTIpKnIuTElORV9GQUNUT1IsbD1NYXRoLnJvdW5kKGUvYyk7aWYoIW8pe2NvbnN0IHJvdW5kV2l0aFR3b0RpZ2l0cz1lPT5NYXRoLmZsb29yKDEwMCplKS8xMDA7aWYoLTE9PT1zKXtjb25zdCBpPXRoaXMuX2dldFRleHRXaWR0aChhLG4pO289cm91bmRXaXRoVHdvRGlnaXRzKE1hdGgubWluKGUvci5MSU5FX0ZBQ1RPUixpPnQ/dC9pOjEvMCkpO2w9MX1lbHNle2NvbnN0IGk9YS5zcGxpdCgvXHJcbj98XG4vKSxoPVtdO2Zvcihjb25zdCBlIG9mIGkpe2NvbnN0IHQ9bi5lbmNvZGVTdHJpbmcoZSkuam9pbigiIiksYT1uLmNoYXJzVG9HbHlwaHModCkscj1uLmdldENoYXJQb3NpdGlvbnModCk7aC5wdXNoKHtsaW5lOnQsZ2x5cGhzOmEscG9zaXRpb25zOnJ9KX1jb25zdCBpc1Rvb0JpZz1hPT57bGV0IHI9MDtmb3IoY29uc3QgaSBvZiBoKXtyKz10aGlzLl9zcGxpdExpbmUobnVsbCxuLGEsdCxpKS5sZW5ndGgqYTtpZihyPmUpcmV0dXJuITB9cmV0dXJuITF9O2w9TWF0aC5tYXgobCxzKTtmb3IoOzspe2M9ZS9sO289cm91bmRXaXRoVHdvRGlnaXRzKGMvci5MSU5FX0ZBQ1RPUik7aWYoIWlzVG9vQmlnKG8pKWJyZWFrO2wrK319Y29uc3R7Zm9udE5hbWU6aCxmb250Q29sb3I6dX09dGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YTt0aGlzLl9kZWZhdWx0QXBwZWFyYW5jZT0oMCxpLmNyZWF0ZURlZmF1bHRBcHBlYXJhbmNlKSh7Zm9udFNpemU6byxmb250TmFtZTpoLGZvbnRDb2xvcjp1fSl9cmV0dXJuW3RoaXMuX2RlZmF1bHRBcHBlYXJhbmNlLG8sZS9sXX1fcmVuZGVyVGV4dChlLHQsYSxyLGkscyxvLGMpe2xldCBsO2lmKDE9PT1pKXtsPShyLXRoaXMuX2dldFRleHRXaWR0aChlLHQpKmEpLzJ9ZWxzZSBpZigyPT09aSl7bD1yLXRoaXMuX2dldFRleHRXaWR0aChlLHQpKmEtb31lbHNlIGw9bztjb25zdCBoPSgwLG4ubnVtYmVyVG9TdHJpbmcpKGwtcy5zaGlmdCk7cy5zaGlmdD1sO3JldHVybmAke2h9ICR7Yz0oMCxuLm51bWJlclRvU3RyaW5nKShjKX0gVGQgKCR7KDAsbi5lc2NhcGVTdHJpbmcpKGUpfSkgVGpgfV9nZXRTYXZlRmllbGRSZXNvdXJjZXMoZSl7Y29uc3R7bG9jYWxSZXNvdXJjZXM6dCxhcHBlYXJhbmNlUmVzb3VyY2VzOmEsYWNyb0Zvcm1SZXNvdXJjZXM6cn09dGhpcy5fZmllbGRSZXNvdXJjZXMsbj10aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhPy5mb250TmFtZTtpZighbilyZXR1cm4gdHx8cy5EaWN0LmVtcHR5O2Zvcihjb25zdCBlIG9mW3QsYV0paWYoZSBpbnN0YW5jZW9mIHMuRGljdCl7Y29uc3QgdD1lLmdldCgiRm9udCIpO2lmKHQgaW5zdGFuY2VvZiBzLkRpY3QmJnQuaGFzKG4pKXJldHVybiBlfWlmKHIgaW5zdGFuY2VvZiBzLkRpY3Qpe2NvbnN0IGE9ci5nZXQoIkZvbnQiKTtpZihhIGluc3RhbmNlb2Ygcy5EaWN0JiZhLmhhcyhuKSl7Y29uc3Qgcj1uZXcgcy5EaWN0KGUpO3Iuc2V0KG4sYS5nZXRSYXcobikpO2NvbnN0IGk9bmV3IHMuRGljdChlKTtpLnNldCgiRm9udCIscik7cmV0dXJuIHMuRGljdC5tZXJnZSh7eHJlZjplLGRpY3RBcnJheTpbaSx0XSxtZXJnZVN1YkRpY3RzOiEwfSl9fXJldHVybiB0fHxzLkRpY3QuZW1wdHl9Z2V0RmllbGRPYmplY3QoKXtyZXR1cm4gbnVsbH19Y2xhc3MgVGV4dFdpZGdldEFubm90YXRpb24gZXh0ZW5kcyBXaWRnZXRBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO3RoaXMuZGF0YS5oYXNPd25DYW52YXM9dGhpcy5kYXRhLnJlYWRPbmx5JiYhdGhpcy5kYXRhLm5vSFRNTDt0aGlzLl9oYXNUZXh0PSEwO2NvbnN0IHQ9ZS5kaWN0OyJzdHJpbmciIT10eXBlb2YgdGhpcy5kYXRhLmZpZWxkVmFsdWUmJih0aGlzLmRhdGEuZmllbGRWYWx1ZT0iIik7bGV0IGE9KDAsbi5nZXRJbmhlcml0YWJsZVByb3BlcnR5KSh7ZGljdDp0LGtleToiUSJ9KTsoIU51bWJlci5pc0ludGVnZXIoYSl8fGE8MHx8YT4yKSYmKGE9bnVsbCk7dGhpcy5kYXRhLnRleHRBbGlnbm1lbnQ9YTtsZXQgaT0oMCxuLmdldEluaGVyaXRhYmxlUHJvcGVydHkpKHtkaWN0OnQsa2V5OiJNYXhMZW4ifSk7KCFOdW1iZXIuaXNJbnRlZ2VyKGkpfHxpPDApJiYoaT0wKTt0aGlzLmRhdGEubWF4TGVuPWk7dGhpcy5kYXRhLm11bHRpTGluZT10aGlzLmhhc0ZpZWxkRmxhZyhyLkFubm90YXRpb25GaWVsZEZsYWcuTVVMVElMSU5FKTt0aGlzLmRhdGEuY29tYj10aGlzLmhhc0ZpZWxkRmxhZyhyLkFubm90YXRpb25GaWVsZEZsYWcuQ09NQikmJiF0aGlzLmhhc0ZpZWxkRmxhZyhyLkFubm90YXRpb25GaWVsZEZsYWcuTVVMVElMSU5FKSYmIXRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5QQVNTV09SRCkmJiF0aGlzLmhhc0ZpZWxkRmxhZyhyLkFubm90YXRpb25GaWVsZEZsYWcuRklMRVNFTEVDVCkmJjAhPT10aGlzLmRhdGEubWF4TGVuO3RoaXMuZGF0YS5kb05vdFNjcm9sbD10aGlzLmhhc0ZpZWxkRmxhZyhyLkFubm90YXRpb25GaWVsZEZsYWcuRE9OT1RTQ1JPTEwpfWdldCBoYXNUZXh0Q29udGVudCgpe3JldHVybiEhdGhpcy5hcHBlYXJhbmNlJiYhdGhpcy5fbmVlZEFwcGVhcmFuY2VzfV9nZXRDb21iQXBwZWFyYW5jZShlLHQsYSxyLGkscyxvLGMsbCxoLHUpe2NvbnN0IGQ9aS90aGlzLmRhdGEubWF4TGVuLGY9dGhpcy5nZXRCb3JkZXJBbmRCYWNrZ3JvdW5kQXBwZWFyYW5jZXModSksZz1bXSxwPXQuZ2V0Q2hhclBvc2l0aW9ucyhhKTtmb3IoY29uc3RbZSx0XW9mIHApZy5wdXNoKGAoJHsoMCxuLmVzY2FwZVN0cmluZykoYS5zdWJzdHJpbmcoZSx0KSl9KSBUamApO2NvbnN0IG09Zy5qb2luKGAgJHsoMCxuLm51bWJlclRvU3RyaW5nKShkKX0gMCBUZCBgKTtyZXR1cm5gL1R4IEJNQyBxICR7Zn1CVCBgK2UrYCAxIDAgMCAxICR7KDAsbi5udW1iZXJUb1N0cmluZykobyl9ICR7KDAsbi5udW1iZXJUb1N0cmluZykoYytsKX0gVG0gJHttfSBFVCBRIEVNQ2B9X2dldE11bHRpbGluZUFwcGVhcmFuY2UoZSx0LGEscixpLHMsbyxjLGwsaCx1LGQpe2NvbnN0IGY9W10sZz1pLTIqYyxwPXtzaGlmdDowfTtmb3IobGV0IGU9MCxuPXQubGVuZ3RoO2U8bjtlKyspe2NvbnN0IG49dFtlXSxzPXRoaXMuX3NwbGl0TGluZShuLGEscixnKTtmb3IobGV0IHQ9MCxuPXMubGVuZ3RoO3Q8bjt0Kyspe2NvbnN0IG49c1t0XSxkPTA9PT1lJiYwPT09dD8tbC0odS1oKTotdTtmLnB1c2godGhpcy5fcmVuZGVyVGV4dChuLGEscixpLG8scCxjLGQpKX19Y29uc3QgbT10aGlzLmdldEJvcmRlckFuZEJhY2tncm91bmRBcHBlYXJhbmNlcyhkKSxiPWYuam9pbigiXG4iKTtyZXR1cm5gL1R4IEJNQyBxICR7bX1CVCBgK2UrYCAxIDAgMCAxIDAgJHsoMCxuLm51bWJlclRvU3RyaW5nKShzKX0gVG0gJHtifSBFVCBRIEVNQ2B9X3NwbGl0TGluZShlLHQsYSxyLG49e30pe2U9bi5saW5lfHxlO2NvbnN0IGk9bi5nbHlwaHN8fHQuY2hhcnNUb0dseXBocyhlKTtpZihpLmxlbmd0aDw9MSlyZXR1cm5bZV07Y29uc3Qgcz1uLnBvc2l0aW9uc3x8dC5nZXRDaGFyUG9zaXRpb25zKGUpLG89YS8xZTMsYz1bXTtsZXQgbD0tMSxoPS0xLHU9LTEsZD0wLGY9MDtmb3IobGV0IHQ9MCxhPWkubGVuZ3RoO3Q8YTt0Kyspe2NvbnN0W2Esbl09c1t0XSxnPWlbdF0scD1nLndpZHRoKm87aWYoIiAiPT09Zy51bmljb2RlKWlmKGYrcD5yKXtjLnB1c2goZS5zdWJzdHJpbmcoZCxhKSk7ZD1hO2Y9cDtsPS0xO3U9LTF9ZWxzZXtmKz1wO2w9YTtoPW47dT10fWVsc2UgaWYoZitwPnIpaWYoLTEhPT1sKXtjLnB1c2goZS5zdWJzdHJpbmcoZCxoKSk7ZD1oO3Q9dSsxO2w9LTE7Zj0wfWVsc2V7Yy5wdXNoKGUuc3Vic3RyaW5nKGQsYSkpO2Q9YTtmPXB9ZWxzZSBmKz1wfWQ8ZS5sZW5ndGgmJmMucHVzaChlLnN1YnN0cmluZyhkLGUubGVuZ3RoKSk7cmV0dXJuIGN9Z2V0RmllbGRPYmplY3QoKXtyZXR1cm57aWQ6dGhpcy5kYXRhLmlkLHZhbHVlOnRoaXMuZGF0YS5maWVsZFZhbHVlLGRlZmF1bHRWYWx1ZTp0aGlzLmRhdGEuZGVmYXVsdEZpZWxkVmFsdWV8fCIiLG11bHRpbGluZTp0aGlzLmRhdGEubXVsdGlMaW5lLHBhc3N3b3JkOnRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5QQVNTV09SRCksY2hhckxpbWl0OnRoaXMuZGF0YS5tYXhMZW4sY29tYjp0aGlzLmRhdGEuY29tYixlZGl0YWJsZTohdGhpcy5kYXRhLnJlYWRPbmx5LGhpZGRlbjp0aGlzLmRhdGEuaGlkZGVuLG5hbWU6dGhpcy5kYXRhLmZpZWxkTmFtZSxyZWN0OnRoaXMuZGF0YS5yZWN0LGFjdGlvbnM6dGhpcy5kYXRhLmFjdGlvbnMscGFnZTp0aGlzLmRhdGEucGFnZUluZGV4LHN0cm9rZUNvbG9yOnRoaXMuZGF0YS5ib3JkZXJDb2xvcixmaWxsQ29sb3I6dGhpcy5kYXRhLmJhY2tncm91bmRDb2xvcixyb3RhdGlvbjp0aGlzLnJvdGF0aW9uLHR5cGU6InRleHQifX19Y2xhc3MgQnV0dG9uV2lkZ2V0QW5ub3RhdGlvbiBleHRlbmRzIFdpZGdldEFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7dGhpcy5jaGVja2VkQXBwZWFyYW5jZT1udWxsO3RoaXMudW5jaGVja2VkQXBwZWFyYW5jZT1udWxsO3RoaXMuZGF0YS5jaGVja0JveD0hdGhpcy5oYXNGaWVsZEZsYWcoci5Bbm5vdGF0aW9uRmllbGRGbGFnLlJBRElPKSYmIXRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5QVVNIQlVUVE9OKTt0aGlzLmRhdGEucmFkaW9CdXR0b249dGhpcy5oYXNGaWVsZEZsYWcoci5Bbm5vdGF0aW9uRmllbGRGbGFnLlJBRElPKSYmIXRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5QVVNIQlVUVE9OKTt0aGlzLmRhdGEucHVzaEJ1dHRvbj10aGlzLmhhc0ZpZWxkRmxhZyhyLkFubm90YXRpb25GaWVsZEZsYWcuUFVTSEJVVFRPTik7dGhpcy5kYXRhLmlzVG9vbHRpcE9ubHk9ITE7aWYodGhpcy5kYXRhLmNoZWNrQm94KXRoaXMuX3Byb2Nlc3NDaGVja0JveChlKTtlbHNlIGlmKHRoaXMuZGF0YS5yYWRpb0J1dHRvbil0aGlzLl9wcm9jZXNzUmFkaW9CdXR0b24oZSk7ZWxzZSBpZih0aGlzLmRhdGEucHVzaEJ1dHRvbil7dGhpcy5kYXRhLmhhc093bkNhbnZhcz0hMDt0aGlzLl9wcm9jZXNzUHVzaEJ1dHRvbihlKX1lbHNlKDAsci53YXJuKSgiSW52YWxpZCBmaWVsZCBmbGFncyBmb3IgYnV0dG9uIHdpZGdldCBhbm5vdGF0aW9uIil9YXN5bmMgZ2V0T3BlcmF0b3JMaXN0KGUsdCxhLG4saSl7aWYodGhpcy5kYXRhLnB1c2hCdXR0b24pcmV0dXJuIHN1cGVyLmdldE9wZXJhdG9yTGlzdChlLHQsYSwhMSxpKTtsZXQgcz1udWxsLG89bnVsbDtpZihpKXtjb25zdCBlPWkuZ2V0KHRoaXMuZGF0YS5pZCk7cz1lP2UudmFsdWU6bnVsbDtvPWU/ZS5yb3RhdGlvbjpudWxsfWlmKG51bGw9PT1zJiZ0aGlzLmFwcGVhcmFuY2UpcmV0dXJuIHN1cGVyLmdldE9wZXJhdG9yTGlzdChlLHQsYSxuLGkpO251bGw9PXMmJihzPXRoaXMuZGF0YS5jaGVja0JveD90aGlzLmRhdGEuZmllbGRWYWx1ZT09PXRoaXMuZGF0YS5leHBvcnRWYWx1ZTp0aGlzLmRhdGEuZmllbGRWYWx1ZT09PXRoaXMuZGF0YS5idXR0b25WYWx1ZSk7Y29uc3QgYz1zP3RoaXMuY2hlY2tlZEFwcGVhcmFuY2U6dGhpcy51bmNoZWNrZWRBcHBlYXJhbmNlO2lmKGMpe2NvbnN0IHM9dGhpcy5hcHBlYXJhbmNlLGw9Yy5kaWN0LmdldEFycmF5KCJNYXRyaXgiKXx8ci5JREVOVElUWV9NQVRSSVg7byYmYy5kaWN0LnNldCgiTWF0cml4Iix0aGlzLmdldFJvdGF0aW9uTWF0cml4KGkpKTt0aGlzLmFwcGVhcmFuY2U9Yztjb25zdCBoPXN1cGVyLmdldE9wZXJhdG9yTGlzdChlLHQsYSxuLGkpO3RoaXMuYXBwZWFyYW5jZT1zO2MuZGljdC5zZXQoIk1hdHJpeCIsbCk7cmV0dXJuIGh9cmV0dXJue29wTGlzdDpuZXcgcC5PcGVyYXRvckxpc3Qsc2VwYXJhdGVGb3JtOiExLHNlcGFyYXRlQ2FudmFzOiExfX1hc3luYyBzYXZlKGUsdCxhKXtyZXR1cm4gdGhpcy5kYXRhLmNoZWNrQm94P3RoaXMuX3NhdmVDaGVja2JveChlLHQsYSk6dGhpcy5kYXRhLnJhZGlvQnV0dG9uP3RoaXMuX3NhdmVSYWRpb0J1dHRvbihlLHQsYSk6bnVsbH1hc3luYyBfc2F2ZUNoZWNrYm94KGUsdCxhKXtpZighYSlyZXR1cm4gbnVsbDtjb25zdCBuPWEuZ2V0KHRoaXMuZGF0YS5pZCk7bGV0IGk9bj8ucm90YXRpb24sbz1uPy52YWx1ZTtpZih2b2lkIDA9PT1pKXtpZih2b2lkIDA9PT1vKXJldHVybiBudWxsO2lmKHRoaXMuZGF0YS5maWVsZFZhbHVlPT09dGhpcy5kYXRhLmV4cG9ydFZhbHVlPT09bylyZXR1cm4gbnVsbH1jb25zdCBjPWUueHJlZi5mZXRjaElmUmVmKHRoaXMucmVmKTtpZighKGMgaW5zdGFuY2VvZiBzLkRpY3QpKXJldHVybiBudWxsO3ZvaWQgMD09PWkmJihpPXRoaXMucm90YXRpb24pO3ZvaWQgMD09PW8mJihvPXRoaXMuZGF0YS5maWVsZFZhbHVlPT09dGhpcy5kYXRhLmV4cG9ydFZhbHVlKTtjb25zdCBsPXtwYXRoOnRoaXMuZGF0YS5maWVsZE5hbWUsdmFsdWU6bz90aGlzLmRhdGEuZXhwb3J0VmFsdWU6IiJ9LGg9cy5OYW1lLmdldChvP3RoaXMuZGF0YS5leHBvcnRWYWx1ZToiT2ZmIik7Yy5zZXQoIlYiLGgpO2Muc2V0KCJBUyIsaCk7Yy5zZXQoIk0iLGBEOiR7KDAsci5nZXRNb2RpZmljYXRpb25EYXRlKSgpfWApO2NvbnN0IHU9dGhpcy5fZ2V0TUtEaWN0KGkpO3UmJmMuc2V0KCJNSyIsdSk7Y29uc3QgZD1bXTthd2FpdCgwLG0ud3JpdGVPYmplY3QpKHRoaXMucmVmLGMsZCxlLnhyZWYpO3JldHVyblt7cmVmOnRoaXMucmVmLGRhdGE6ZC5qb2luKCIiKSx4ZmE6bH1dfWFzeW5jIF9zYXZlUmFkaW9CdXR0b24oZSx0LGEpe2lmKCFhKXJldHVybiBudWxsO2NvbnN0IG49YS5nZXQodGhpcy5kYXRhLmlkKTtsZXQgaT1uPy5yb3RhdGlvbixvPW4/LnZhbHVlO2lmKHZvaWQgMD09PWkpe2lmKHZvaWQgMD09PW8pcmV0dXJuIG51bGw7aWYodGhpcy5kYXRhLmZpZWxkVmFsdWU9PT10aGlzLmRhdGEuYnV0dG9uVmFsdWU9PT1vKXJldHVybiBudWxsfWNvbnN0IGM9ZS54cmVmLmZldGNoSWZSZWYodGhpcy5yZWYpO2lmKCEoYyBpbnN0YW5jZW9mIHMuRGljdCkpcmV0dXJuIG51bGw7dm9pZCAwPT09byYmKG89dGhpcy5kYXRhLmZpZWxkVmFsdWU9PT10aGlzLmRhdGEuYnV0dG9uVmFsdWUpO3ZvaWQgMD09PWkmJihpPXRoaXMucm90YXRpb24pO2NvbnN0IGw9e3BhdGg6dGhpcy5kYXRhLmZpZWxkTmFtZSx2YWx1ZTpvP3RoaXMuZGF0YS5idXR0b25WYWx1ZToiIn0saD1zLk5hbWUuZ2V0KG8/dGhpcy5kYXRhLmJ1dHRvblZhbHVlOiJPZmYiKSx1PVtdO2xldCBkPW51bGw7aWYobylpZih0aGlzLnBhcmVudCBpbnN0YW5jZW9mIHMuUmVmKXtjb25zdCB0PWUueHJlZi5mZXRjaCh0aGlzLnBhcmVudCk7dC5zZXQoIlYiLGgpO2F3YWl0KDAsbS53cml0ZU9iamVjdCkodGhpcy5wYXJlbnQsdCx1LGUueHJlZik7ZD11LmpvaW4oIiIpO3UubGVuZ3RoPTB9ZWxzZSB0aGlzLnBhcmVudCBpbnN0YW5jZW9mIHMuRGljdCYmdGhpcy5wYXJlbnQuc2V0KCJWIixoKTtjLnNldCgiQVMiLGgpO2Muc2V0KCJNIixgRDokeygwLHIuZ2V0TW9kaWZpY2F0aW9uRGF0ZSkoKX1gKTtjb25zdCBmPXRoaXMuX2dldE1LRGljdChpKTtmJiZjLnNldCgiTUsiLGYpO2F3YWl0KDAsbS53cml0ZU9iamVjdCkodGhpcy5yZWYsYyx1LGUueHJlZik7Y29uc3QgZz1be3JlZjp0aGlzLnJlZixkYXRhOnUuam9pbigiIikseGZhOmx9XTtkJiZnLnB1c2goe3JlZjp0aGlzLnBhcmVudCxkYXRhOmQseGZhOm51bGx9KTtyZXR1cm4gZ31fZ2V0RGVmYXVsdENoZWNrZWRBcHBlYXJhbmNlKGUsdCl7Y29uc3QgYT10aGlzLmRhdGEucmVjdFsyXS10aGlzLmRhdGEucmVjdFswXSxpPXRoaXMuZGF0YS5yZWN0WzNdLXRoaXMuZGF0YS5yZWN0WzFdLGM9WzAsMCxhLGldLGw9LjgqTWF0aC5taW4oYSxpKTtsZXQgaCx1O2lmKCJjaGVjayI9PT10KXtoPXt3aWR0aDouNzU1KmwsaGVpZ2h0Oi43MDUqbH07dT0iMyJ9ZWxzZSBpZigiZGlzYyI9PT10KXtoPXt3aWR0aDouNzkxKmwsaGVpZ2h0Oi43MDUqbH07dT0ibCJ9ZWxzZSgwLHIudW5yZWFjaGFibGUpKGBfZ2V0RGVmYXVsdENoZWNrZWRBcHBlYXJhbmNlIC0gdW5zdXBwb3J0ZWQgdHlwZTogJHt0fWApO2NvbnN0IGQ9YHEgQlQgL1BkZkpzWmFEYiAke2x9IFRmIDAgZyAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKChhLWgud2lkdGgpLzIpfSAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKChpLWguaGVpZ2h0KS8yKX0gVGQgKCR7dX0pIFRqIEVUIFFgLGY9bmV3IHMuRGljdChlLnhyZWYpO2Yuc2V0KCJGb3JtVHlwZSIsMSk7Zi5zZXQoIlN1YnR5cGUiLHMuTmFtZS5nZXQoIkZvcm0iKSk7Zi5zZXQoIlR5cGUiLHMuTmFtZS5nZXQoIlhPYmplY3QiKSk7Zi5zZXQoIkJCb3giLGMpO2Yuc2V0KCJNYXRyaXgiLFsxLDAsMCwxLDAsMF0pO2Yuc2V0KCJMZW5ndGgiLGQubGVuZ3RoKTtjb25zdCBnPW5ldyBzLkRpY3QoZS54cmVmKSxwPW5ldyBzLkRpY3QoZS54cmVmKTtwLnNldCgiUGRmSnNaYURiIix0aGlzLmZhbGxiYWNrRm9udERpY3QpO2cuc2V0KCJGb250IixwKTtmLnNldCgiUmVzb3VyY2VzIixnKTt0aGlzLmNoZWNrZWRBcHBlYXJhbmNlPW5ldyBvLlN0cmluZ1N0cmVhbShkKTt0aGlzLmNoZWNrZWRBcHBlYXJhbmNlLmRpY3Q9Zjt0aGlzLl9zdHJlYW1zLnB1c2godGhpcy5jaGVja2VkQXBwZWFyYW5jZSl9X3Byb2Nlc3NDaGVja0JveChlKXtjb25zdCB0PWUuZGljdC5nZXQoIkFQIik7aWYoISh0IGluc3RhbmNlb2Ygcy5EaWN0KSlyZXR1cm47Y29uc3QgYT10LmdldCgiTiIpO2lmKCEoYSBpbnN0YW5jZW9mIHMuRGljdCkpcmV0dXJuO2NvbnN0IHI9dGhpcy5fZGVjb2RlRm9ybVZhbHVlKGUuZGljdC5nZXQoIkFTIikpOyJzdHJpbmciPT10eXBlb2YgciYmKHRoaXMuZGF0YS5maWVsZFZhbHVlPXIpO2NvbnN0IG49bnVsbCE9PXRoaXMuZGF0YS5maWVsZFZhbHVlJiYiT2ZmIiE9PXRoaXMuZGF0YS5maWVsZFZhbHVlP3RoaXMuZGF0YS5maWVsZFZhbHVlOiJZZXMiLGk9YS5nZXRLZXlzKCk7aWYoMD09PWkubGVuZ3RoKWkucHVzaCgiT2ZmIixuKTtlbHNlIGlmKDE9PT1pLmxlbmd0aCkiT2ZmIj09PWlbMF0/aS5wdXNoKG4pOmkudW5zaGlmdCgiT2ZmIik7ZWxzZSBpZihpLmluY2x1ZGVzKG4pKXtpLmxlbmd0aD0wO2kucHVzaCgiT2ZmIixuKX1lbHNle2NvbnN0IGU9aS5maW5kKChlPT4iT2ZmIiE9PWUpKTtpLmxlbmd0aD0wO2kucHVzaCgiT2ZmIixlKX1pLmluY2x1ZGVzKHRoaXMuZGF0YS5maWVsZFZhbHVlKXx8KHRoaXMuZGF0YS5maWVsZFZhbHVlPSJPZmYiKTt0aGlzLmRhdGEuZXhwb3J0VmFsdWU9aVsxXTtjb25zdCBvPWEuZ2V0KHRoaXMuZGF0YS5leHBvcnRWYWx1ZSk7dGhpcy5jaGVja2VkQXBwZWFyYW5jZT1vIGluc3RhbmNlb2YgYy5CYXNlU3RyZWFtP286bnVsbDtjb25zdCBsPWEuZ2V0KCJPZmYiKTt0aGlzLnVuY2hlY2tlZEFwcGVhcmFuY2U9bCBpbnN0YW5jZW9mIGMuQmFzZVN0cmVhbT9sOm51bGw7dGhpcy5jaGVja2VkQXBwZWFyYW5jZT90aGlzLl9zdHJlYW1zLnB1c2godGhpcy5jaGVja2VkQXBwZWFyYW5jZSk6dGhpcy5fZ2V0RGVmYXVsdENoZWNrZWRBcHBlYXJhbmNlKGUsImNoZWNrIik7dGhpcy51bmNoZWNrZWRBcHBlYXJhbmNlJiZ0aGlzLl9zdHJlYW1zLnB1c2godGhpcy51bmNoZWNrZWRBcHBlYXJhbmNlKTt0aGlzLl9mYWxsYmFja0ZvbnREaWN0PXRoaXMuZmFsbGJhY2tGb250RGljdDtudWxsPT09dGhpcy5kYXRhLmRlZmF1bHRGaWVsZFZhbHVlJiYodGhpcy5kYXRhLmRlZmF1bHRGaWVsZFZhbHVlPSJPZmYiKX1fcHJvY2Vzc1JhZGlvQnV0dG9uKGUpe3RoaXMuZGF0YS5maWVsZFZhbHVlPXRoaXMuZGF0YS5idXR0b25WYWx1ZT1udWxsO2NvbnN0IHQ9ZS5kaWN0LmdldCgiUGFyZW50Iik7aWYodCBpbnN0YW5jZW9mIHMuRGljdCl7dGhpcy5wYXJlbnQ9ZS5kaWN0LmdldFJhdygiUGFyZW50Iik7Y29uc3QgYT10LmdldCgiViIpO2EgaW5zdGFuY2VvZiBzLk5hbWUmJih0aGlzLmRhdGEuZmllbGRWYWx1ZT10aGlzLl9kZWNvZGVGb3JtVmFsdWUoYSkpfWNvbnN0IGE9ZS5kaWN0LmdldCgiQVAiKTtpZighKGEgaW5zdGFuY2VvZiBzLkRpY3QpKXJldHVybjtjb25zdCByPWEuZ2V0KCJOIik7aWYoIShyIGluc3RhbmNlb2Ygcy5EaWN0KSlyZXR1cm47Zm9yKGNvbnN0IGUgb2Ygci5nZXRLZXlzKCkpaWYoIk9mZiIhPT1lKXt0aGlzLmRhdGEuYnV0dG9uVmFsdWU9dGhpcy5fZGVjb2RlRm9ybVZhbHVlKGUpO2JyZWFrfWNvbnN0IG49ci5nZXQodGhpcy5kYXRhLmJ1dHRvblZhbHVlKTt0aGlzLmNoZWNrZWRBcHBlYXJhbmNlPW4gaW5zdGFuY2VvZiBjLkJhc2VTdHJlYW0/bjpudWxsO2NvbnN0IGk9ci5nZXQoIk9mZiIpO3RoaXMudW5jaGVja2VkQXBwZWFyYW5jZT1pIGluc3RhbmNlb2YgYy5CYXNlU3RyZWFtP2k6bnVsbDt0aGlzLmNoZWNrZWRBcHBlYXJhbmNlP3RoaXMuX3N0cmVhbXMucHVzaCh0aGlzLmNoZWNrZWRBcHBlYXJhbmNlKTp0aGlzLl9nZXREZWZhdWx0Q2hlY2tlZEFwcGVhcmFuY2UoZSwiZGlzYyIpO3RoaXMudW5jaGVja2VkQXBwZWFyYW5jZSYmdGhpcy5fc3RyZWFtcy5wdXNoKHRoaXMudW5jaGVja2VkQXBwZWFyYW5jZSk7dGhpcy5fZmFsbGJhY2tGb250RGljdD10aGlzLmZhbGxiYWNrRm9udERpY3Q7bnVsbD09PXRoaXMuZGF0YS5kZWZhdWx0RmllbGRWYWx1ZSYmKHRoaXMuZGF0YS5kZWZhdWx0RmllbGRWYWx1ZT0iT2ZmIil9X3Byb2Nlc3NQdXNoQnV0dG9uKGUpe2NvbnN0e2RpY3Q6dCxhbm5vdGF0aW9uR2xvYmFsczphfT1lO2lmKHQuaGFzKCJBIil8fHQuaGFzKCJBQSIpfHx0aGlzLmRhdGEuYWx0ZXJuYXRpdmVUZXh0KXt0aGlzLmRhdGEuaXNUb29sdGlwT25seT0hdC5oYXMoIkEiKSYmIXQuaGFzKCJBQSIpO2guQ2F0YWxvZy5wYXJzZURlc3REaWN0aW9uYXJ5KHtkZXN0RGljdDp0LHJlc3VsdE9iajp0aGlzLmRhdGEsZG9jQmFzZVVybDphLmJhc2VVcmwsZG9jQXR0YWNobWVudHM6YS5hdHRhY2htZW50c30pfWVsc2UoMCxyLndhcm4pKCJQdXNoIGJ1dHRvbnMgd2l0aG91dCBhY3Rpb24gZGljdGlvbmFyaWVzIGFyZSBub3Qgc3VwcG9ydGVkIil9Z2V0RmllbGRPYmplY3QoKXtsZXQgZSx0PSJidXR0b24iO2lmKHRoaXMuZGF0YS5jaGVja0JveCl7dD0iY2hlY2tib3giO2U9dGhpcy5kYXRhLmV4cG9ydFZhbHVlfWVsc2UgaWYodGhpcy5kYXRhLnJhZGlvQnV0dG9uKXt0PSJyYWRpb2J1dHRvbiI7ZT10aGlzLmRhdGEuYnV0dG9uVmFsdWV9cmV0dXJue2lkOnRoaXMuZGF0YS5pZCx2YWx1ZTp0aGlzLmRhdGEuZmllbGRWYWx1ZXx8Ik9mZiIsZGVmYXVsdFZhbHVlOnRoaXMuZGF0YS5kZWZhdWx0RmllbGRWYWx1ZSxleHBvcnRWYWx1ZXM6ZSxlZGl0YWJsZTohdGhpcy5kYXRhLnJlYWRPbmx5LG5hbWU6dGhpcy5kYXRhLmZpZWxkTmFtZSxyZWN0OnRoaXMuZGF0YS5yZWN0LGhpZGRlbjp0aGlzLmRhdGEuaGlkZGVuLGFjdGlvbnM6dGhpcy5kYXRhLmFjdGlvbnMscGFnZTp0aGlzLmRhdGEucGFnZUluZGV4LHN0cm9rZUNvbG9yOnRoaXMuZGF0YS5ib3JkZXJDb2xvcixmaWxsQ29sb3I6dGhpcy5kYXRhLmJhY2tncm91bmRDb2xvcixyb3RhdGlvbjp0aGlzLnJvdGF0aW9uLHR5cGU6dH19Z2V0IGZhbGxiYWNrRm9udERpY3QoKXtjb25zdCBlPW5ldyBzLkRpY3Q7ZS5zZXQoIkJhc2VGb250IixzLk5hbWUuZ2V0KCJaYXBmRGluZ2JhdHMiKSk7ZS5zZXQoIlR5cGUiLHMuTmFtZS5nZXQoIkZhbGxiYWNrVHlwZSIpKTtlLnNldCgiU3VidHlwZSIscy5OYW1lLmdldCgiRmFsbGJhY2tUeXBlIikpO2Uuc2V0KCJFbmNvZGluZyIscy5OYW1lLmdldCgiWmFwZkRpbmdiYXRzRW5jb2RpbmciKSk7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImZhbGxiYWNrRm9udERpY3QiLGUpfX1jbGFzcyBDaG9pY2VXaWRnZXRBbm5vdGF0aW9uIGV4dGVuZHMgV2lkZ2V0QW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTtjb25zdHtkaWN0OnQseHJlZjphfT1lO3RoaXMuaW5kaWNlcz10LmdldEFycmF5KCJJIik7dGhpcy5oYXNJbmRpY2VzPUFycmF5LmlzQXJyYXkodGhpcy5pbmRpY2VzKSYmdGhpcy5pbmRpY2VzLmxlbmd0aD4wO3RoaXMuZGF0YS5vcHRpb25zPVtdO2NvbnN0IGk9KDAsbi5nZXRJbmhlcml0YWJsZVByb3BlcnR5KSh7ZGljdDp0LGtleToiT3B0In0pO2lmKEFycmF5LmlzQXJyYXkoaSkpZm9yKGxldCBlPTAsdD1pLmxlbmd0aDtlPHQ7ZSsrKXtjb25zdCB0PWEuZmV0Y2hJZlJlZihpW2VdKSxyPUFycmF5LmlzQXJyYXkodCk7dGhpcy5kYXRhLm9wdGlvbnNbZV09e2V4cG9ydFZhbHVlOnRoaXMuX2RlY29kZUZvcm1WYWx1ZShyP2EuZmV0Y2hJZlJlZih0WzBdKTp0KSxkaXNwbGF5VmFsdWU6dGhpcy5fZGVjb2RlRm9ybVZhbHVlKHI/YS5mZXRjaElmUmVmKHRbMV0pOnQpfX1pZih0aGlzLmhhc0luZGljZXMpe3RoaXMuZGF0YS5maWVsZFZhbHVlPVtdO2NvbnN0IGU9dGhpcy5kYXRhLm9wdGlvbnMubGVuZ3RoO2Zvcihjb25zdCB0IG9mIHRoaXMuaW5kaWNlcylOdW1iZXIuaXNJbnRlZ2VyKHQpJiZ0Pj0wJiZ0PGUmJnRoaXMuZGF0YS5maWVsZFZhbHVlLnB1c2godGhpcy5kYXRhLm9wdGlvbnNbdF0uZXhwb3J0VmFsdWUpfWVsc2Uic3RyaW5nIj09dHlwZW9mIHRoaXMuZGF0YS5maWVsZFZhbHVlP3RoaXMuZGF0YS5maWVsZFZhbHVlPVt0aGlzLmRhdGEuZmllbGRWYWx1ZV06dGhpcy5kYXRhLmZpZWxkVmFsdWV8fCh0aGlzLmRhdGEuZmllbGRWYWx1ZT1bXSk7dGhpcy5kYXRhLmNvbWJvPXRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5DT01CTyk7dGhpcy5kYXRhLm11bHRpU2VsZWN0PXRoaXMuaGFzRmllbGRGbGFnKHIuQW5ub3RhdGlvbkZpZWxkRmxhZy5NVUxUSVNFTEVDVCk7dGhpcy5faGFzVGV4dD0hMH1nZXRGaWVsZE9iamVjdCgpe2NvbnN0IGU9dGhpcy5kYXRhLmNvbWJvPyJjb21ib2JveCI6Imxpc3Rib3giLHQ9dGhpcy5kYXRhLmZpZWxkVmFsdWUubGVuZ3RoPjA/dGhpcy5kYXRhLmZpZWxkVmFsdWVbMF06bnVsbDtyZXR1cm57aWQ6dGhpcy5kYXRhLmlkLHZhbHVlOnQsZGVmYXVsdFZhbHVlOnRoaXMuZGF0YS5kZWZhdWx0RmllbGRWYWx1ZSxlZGl0YWJsZTohdGhpcy5kYXRhLnJlYWRPbmx5LG5hbWU6dGhpcy5kYXRhLmZpZWxkTmFtZSxyZWN0OnRoaXMuZGF0YS5yZWN0LG51bUl0ZW1zOnRoaXMuZGF0YS5maWVsZFZhbHVlLmxlbmd0aCxtdWx0aXBsZVNlbGVjdGlvbjp0aGlzLmRhdGEubXVsdGlTZWxlY3QsaGlkZGVuOnRoaXMuZGF0YS5oaWRkZW4sYWN0aW9uczp0aGlzLmRhdGEuYWN0aW9ucyxpdGVtczp0aGlzLmRhdGEub3B0aW9ucyxwYWdlOnRoaXMuZGF0YS5wYWdlSW5kZXgsc3Ryb2tlQ29sb3I6dGhpcy5kYXRhLmJvcmRlckNvbG9yLGZpbGxDb2xvcjp0aGlzLmRhdGEuYmFja2dyb3VuZENvbG9yLHJvdGF0aW9uOnRoaXMucm90YXRpb24sdHlwZTplfX1hbWVuZFNhdmVkRGljdChlLHQpe2lmKCF0aGlzLmhhc0luZGljZXMpcmV0dXJuO2xldCBhPWU/LmdldCh0aGlzLmRhdGEuaWQpPy52YWx1ZTtBcnJheS5pc0FycmF5KGEpfHwoYT1bYV0pO2NvbnN0IHI9W10se29wdGlvbnM6bn09dGhpcy5kYXRhO2ZvcihsZXQgZT0wLHQ9MCxpPW4ubGVuZ3RoO2U8aTtlKyspaWYobltlXS5leHBvcnRWYWx1ZT09PWFbdF0pe3IucHVzaChlKTt0Kz0xfXQuc2V0KCJJIixyKX1hc3luYyBfZ2V0QXBwZWFyYW5jZShlLHQsYSxuKXtpZih0aGlzLmRhdGEuY29tYm8pcmV0dXJuIHN1cGVyLl9nZXRBcHBlYXJhbmNlKGUsdCxhLG4pO2xldCBzLG87Y29uc3QgYz1uPy5nZXQodGhpcy5kYXRhLmlkKTtpZihjKXtvPWMucm90YXRpb247cz1jLnZhbHVlfWlmKHZvaWQgMD09PW8mJnZvaWQgMD09PXMmJiF0aGlzLl9uZWVkQXBwZWFyYW5jZXMpcmV0dXJuIG51bGw7dm9pZCAwPT09cz9zPXRoaXMuZGF0YS5maWVsZFZhbHVlOkFycmF5LmlzQXJyYXkocyl8fChzPVtzXSk7bGV0IGw9dGhpcy5kYXRhLnJlY3RbM10tdGhpcy5kYXRhLnJlY3RbMV0saD10aGlzLmRhdGEucmVjdFsyXS10aGlzLmRhdGEucmVjdFswXTs5MCE9PW8mJjI3MCE9PW98fChbaCxsXT1bbCxoXSk7Y29uc3QgdT10aGlzLmRhdGEub3B0aW9ucy5sZW5ndGgsZD1bXTtmb3IobGV0IGU9MDtlPHU7ZSsrKXtjb25zdHtleHBvcnRWYWx1ZTp0fT10aGlzLmRhdGEub3B0aW9uc1tlXTtzLmluY2x1ZGVzKHQpJiZkLnB1c2goZSl9dGhpcy5fZGVmYXVsdEFwcGVhcmFuY2V8fCh0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhPSgwLGkucGFyc2VEZWZhdWx0QXBwZWFyYW5jZSkodGhpcy5fZGVmYXVsdEFwcGVhcmFuY2U9Ii9IZWx2ZXRpY2EgMCBUZiAwIGciKSk7Y29uc3QgZj1hd2FpdCBXaWRnZXRBbm5vdGF0aW9uLl9nZXRGb250RGF0YShlLHQsdGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YSx0aGlzLl9maWVsZFJlc291cmNlcy5tZXJnZWRSZXNvdXJjZXMpO2xldCBnLHtmb250U2l6ZTpwfT10aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhO2lmKHApZz10aGlzLl9kZWZhdWx0QXBwZWFyYW5jZTtlbHNle2NvbnN0IGU9KGwtMSkvdTtsZXQgdCxhPS0xO2Zvcihjb25zdHtkaXNwbGF5VmFsdWU6ZX1vZiB0aGlzLmRhdGEub3B0aW9ucyl7Y29uc3Qgcj10aGlzLl9nZXRUZXh0V2lkdGgoZSxmKTtpZihyPmEpe2E9cjt0PWV9fVtnLHBdPXRoaXMuX2NvbXB1dGVGb250U2l6ZShlLGgtNCx0LGYsLTEpfWNvbnN0IG09cCpyLkxJTkVfRkFDVE9SLGI9KG0tcCkvMix5PU1hdGguZmxvb3IobC9tKTtsZXQgdz0wO2lmKGQubGVuZ3RoPjApe2NvbnN0IGU9TWF0aC5taW4oLi4uZCksdD1NYXRoLm1heCguLi5kKTt3PU1hdGgubWF4KDAsdC15KzEpO3c+ZSYmKHc9ZSl9Y29uc3QgUz1NYXRoLm1pbih3K3krMSx1KSx4PVsiL1R4IEJNQyBxIixgMSAxICR7aH0gJHtsfSByZSBXIG5gXTtpZihkLmxlbmd0aCl7eC5wdXNoKCIwLjYwMDAwNiAwLjc1Njg2NiAwLjg1NDkwNCByZyIpO2Zvcihjb25zdCBlIG9mIGQpdzw9ZSYmZTxTJiZ4LnB1c2goYDEgJHtsLShlLXcrMSkqbX0gJHtofSAke219IHJlIGZgKX14LnB1c2goIkJUIixnLGAxIDAgMCAxIDAgJHtsfSBUbWApO2NvbnN0IEM9e3NoaWZ0OjB9O2ZvcihsZXQgZT13O2U8UztlKyspe2NvbnN0e2Rpc3BsYXlWYWx1ZTp0fT10aGlzLmRhdGEub3B0aW9uc1tlXSxhPWU9PT13P2I6MDt4LnB1c2godGhpcy5fcmVuZGVyVGV4dCh0LGYscCxoLDAsQywyLC1tK2EpKX14LnB1c2goIkVUIFEgRU1DIik7cmV0dXJuIHguam9pbigiXG4iKX19Y2xhc3MgU2lnbmF0dXJlV2lkZ2V0QW5ub3RhdGlvbiBleHRlbmRzIFdpZGdldEFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7dGhpcy5kYXRhLmZpZWxkVmFsdWU9bnVsbDt0aGlzLmRhdGEuaGFzT3duQ2FudmFzPXRoaXMuZGF0YS5ub1JvdGF0ZX1nZXRGaWVsZE9iamVjdCgpe3JldHVybntpZDp0aGlzLmRhdGEuaWQsdmFsdWU6bnVsbCxwYWdlOnRoaXMuZGF0YS5wYWdlSW5kZXgsdHlwZToic2lnbmF0dXJlIn19fWNsYXNzIFRleHRBbm5vdGF0aW9uIGV4dGVuZHMgTWFya3VwQW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTt0aGlzLmRhdGEubm9Sb3RhdGU9ITA7dGhpcy5kYXRhLmhhc093bkNhbnZhcz10aGlzLmRhdGEubm9Sb3RhdGU7Y29uc3R7ZGljdDp0fT1lO3RoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZT1yLkFubm90YXRpb25UeXBlLlRFWFQ7aWYodGhpcy5kYXRhLmhhc0FwcGVhcmFuY2UpdGhpcy5kYXRhLm5hbWU9Ik5vSWNvbiI7ZWxzZXt0aGlzLmRhdGEucmVjdFsxXT10aGlzLmRhdGEucmVjdFszXS0yMjt0aGlzLmRhdGEucmVjdFsyXT10aGlzLmRhdGEucmVjdFswXSsyMjt0aGlzLmRhdGEubmFtZT10LmhhcygiTmFtZSIpP3QuZ2V0KCJOYW1lIikubmFtZToiTm90ZSJ9aWYodC5oYXMoIlN0YXRlIikpe3RoaXMuZGF0YS5zdGF0ZT10LmdldCgiU3RhdGUiKXx8bnVsbDt0aGlzLmRhdGEuc3RhdGVNb2RlbD10LmdldCgiU3RhdGVNb2RlbCIpfHxudWxsfWVsc2V7dGhpcy5kYXRhLnN0YXRlPW51bGw7dGhpcy5kYXRhLnN0YXRlTW9kZWw9bnVsbH19fWNsYXNzIExpbmtBbm5vdGF0aW9uIGV4dGVuZHMgQW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTtjb25zdHtkaWN0OnQsYW5ub3RhdGlvbkdsb2JhbHM6YX09ZTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5MSU5LO2NvbnN0IG49Z2V0UXVhZFBvaW50cyh0LHRoaXMucmVjdGFuZ2xlKTtuJiYodGhpcy5kYXRhLnF1YWRQb2ludHM9bik7dGhpcy5kYXRhLmJvcmRlckNvbG9yfHw9dGhpcy5kYXRhLmNvbG9yO2guQ2F0YWxvZy5wYXJzZURlc3REaWN0aW9uYXJ5KHtkZXN0RGljdDp0LHJlc3VsdE9iajp0aGlzLmRhdGEsZG9jQmFzZVVybDphLmJhc2VVcmwsZG9jQXR0YWNobWVudHM6YS5hdHRhY2htZW50c30pfX1jbGFzcyBQb3B1cEFubm90YXRpb24gZXh0ZW5kcyBBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO2NvbnN0e2RpY3Q6dH09ZTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5QT1BVUDt0aGlzLmRhdGEucmVjdFswXSE9PXRoaXMuZGF0YS5yZWN0WzJdJiZ0aGlzLmRhdGEucmVjdFsxXSE9PXRoaXMuZGF0YS5yZWN0WzNdfHwodGhpcy5kYXRhLnJlY3Q9bnVsbCk7bGV0IGE9dC5nZXQoIlBhcmVudCIpO2lmKCFhKXsoMCxyLndhcm4pKCJQb3B1cCBhbm5vdGF0aW9uIGhhcyBhIG1pc3Npbmcgb3IgaW52YWxpZCBwYXJlbnQgYW5ub3RhdGlvbi4iKTtyZXR1cm59Y29uc3Qgbj1hLmdldEFycmF5KCJSZWN0Iik7dGhpcy5kYXRhLnBhcmVudFJlY3Q9QXJyYXkuaXNBcnJheShuKSYmND09PW4ubGVuZ3RoP3IuVXRpbC5ub3JtYWxpemVSZWN0KG4pOm51bGw7Y29uc3QgaT1hLmdldCgiUlQiKTsoMCxzLmlzTmFtZSkoaSxyLkFubm90YXRpb25SZXBseVR5cGUuR1JPVVApJiYoYT1hLmdldCgiSVJUIikpO2lmKGEuaGFzKCJNIikpe3RoaXMuc2V0TW9kaWZpY2F0aW9uRGF0ZShhLmdldCgiTSIpKTt0aGlzLmRhdGEubW9kaWZpY2F0aW9uRGF0ZT10aGlzLm1vZGlmaWNhdGlvbkRhdGV9ZWxzZSB0aGlzLmRhdGEubW9kaWZpY2F0aW9uRGF0ZT1udWxsO2lmKGEuaGFzKCJDIikpe3RoaXMuc2V0Q29sb3IoYS5nZXRBcnJheSgiQyIpKTt0aGlzLmRhdGEuY29sb3I9dGhpcy5jb2xvcn1lbHNlIHRoaXMuZGF0YS5jb2xvcj1udWxsO2lmKCF0aGlzLnZpZXdhYmxlKXtjb25zdCBlPWEuZ2V0KCJGIik7dGhpcy5faXNWaWV3YWJsZShlKSYmdGhpcy5zZXRGbGFncyhlKX10aGlzLnNldFRpdGxlKGEuZ2V0KCJUIikpO3RoaXMuZGF0YS50aXRsZU9iaj10aGlzLl90aXRsZTt0aGlzLnNldENvbnRlbnRzKGEuZ2V0KCJDb250ZW50cyIpKTt0aGlzLmRhdGEuY29udGVudHNPYmo9dGhpcy5fY29udGVudHM7YS5oYXMoIlJDIikmJih0aGlzLmRhdGEucmljaFRleHQ9Yi5YRkFGYWN0b3J5LmdldFJpY2hUZXh0QXNIdG1sKGEuZ2V0KCJSQyIpKSk7dGhpcy5kYXRhLm9wZW49ISF0LmdldCgiT3BlbiIpfX10LlBvcHVwQW5ub3RhdGlvbj1Qb3B1cEFubm90YXRpb247Y2xhc3MgRnJlZVRleHRBbm5vdGF0aW9uIGV4dGVuZHMgTWFya3VwQW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTt0aGlzLmRhdGEuaGFzT3duQ2FudmFzPSEwO2NvbnN0e2V2YWx1YXRvck9wdGlvbnM6dCx4cmVmOmF9PWU7dGhpcy5kYXRhLmFubm90YXRpb25UeXBlPXIuQW5ub3RhdGlvblR5cGUuRlJFRVRFWFQ7dGhpcy5zZXREZWZhdWx0QXBwZWFyYW5jZShlKTtpZih0aGlzLmFwcGVhcmFuY2Upe2NvbnN0e2ZvbnRDb2xvcjplLGZvbnRTaXplOnJ9PSgwLGkucGFyc2VBcHBlYXJhbmNlU3RyZWFtKSh0aGlzLmFwcGVhcmFuY2UsdCxhKTt0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhLmZvbnRDb2xvcj1lO3RoaXMuZGF0YS5kZWZhdWx0QXBwZWFyYW5jZURhdGEuZm9udFNpemU9cnx8MTB9ZWxzZSBpZih0aGlzLl9pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCl7Y29uc3QgdD1lLmRpY3QuZ2V0KCJDQSIpLHI9bmV3IGkuRmFrZVVuaWNvZGVGb250KGEsInNhbnMtc2VyaWYiKTt0aGlzLmRhdGEuZGVmYXVsdEFwcGVhcmFuY2VEYXRhLmZvbnRTaXplfHw9MTA7Y29uc3R7Zm9udENvbG9yOm4sZm9udFNpemU6c309dGhpcy5kYXRhLmRlZmF1bHRBcHBlYXJhbmNlRGF0YTt0aGlzLmFwcGVhcmFuY2U9ci5jcmVhdGVBcHBlYXJhbmNlKHRoaXMuX2NvbnRlbnRzLnN0cix0aGlzLnJlY3RhbmdsZSx0aGlzLnJvdGF0aW9uLHMsbix0KTt0aGlzLl9zdHJlYW1zLnB1c2godGhpcy5hcHBlYXJhbmNlLGkuRmFrZVVuaWNvZGVGb250LnRvVW5pY29kZVN0cmVhbSl9ZWxzZSgwLHIud2FybikoIkZyZWVUZXh0QW5ub3RhdGlvbjogT2Zmc2NyZWVuQ2FudmFzIGlzIG5vdCBzdXBwb3J0ZWQsIGFubm90YXRpb24gbWF5IG5vdCByZW5kZXIgY29ycmVjdGx5LiIpfWdldCBoYXNUZXh0Q29udGVudCgpe3JldHVybiEhdGhpcy5hcHBlYXJhbmNlfXN0YXRpYyBjcmVhdGVOZXdEaWN0KGUsdCx7YXBSZWY6YSxhcDpvfSl7Y29uc3R7Y29sb3I6Yyxmb250U2l6ZTpsLHJlY3Q6aCxyb3RhdGlvbjp1LHVzZXI6ZCx2YWx1ZTpmfT1lLGc9bmV3IHMuRGljdCh0KTtnLnNldCgiVHlwZSIscy5OYW1lLmdldCgiQW5ub3QiKSk7Zy5zZXQoIlN1YnR5cGUiLHMuTmFtZS5nZXQoIkZyZWVUZXh0IikpO2cuc2V0KCJDcmVhdGlvbkRhdGUiLGBEOiR7KDAsci5nZXRNb2RpZmljYXRpb25EYXRlKSgpfWApO2cuc2V0KCJSZWN0IixoKTtjb25zdCBwPWAvSGVsdiAke2x9IFRmICR7KDAsaS5nZXRQZGZDb2xvcikoYywhMCl9YDtnLnNldCgiREEiLHApO2cuc2V0KCJDb250ZW50cyIsKDAsbi5pc0FzY2lpKShmKT9mOigwLG4uc3RyaW5nVG9VVEYxNlN0cmluZykoZiwhMCkpO2cuc2V0KCJGIiw0KTtnLnNldCgiQm9yZGVyIixbMCwwLDBdKTtnLnNldCgiUm90YXRlIix1KTtkJiZnLnNldCgiVCIsKDAsbi5pc0FzY2lpKShkKT9kOigwLG4uc3RyaW5nVG9VVEYxNlN0cmluZykoZCwhMCkpO2lmKGF8fG8pe2NvbnN0IGU9bmV3IHMuRGljdCh0KTtnLnNldCgiQVAiLGUpO2E/ZS5zZXQoIk4iLGEpOmUuc2V0KCJOIixvKX1yZXR1cm4gZ31zdGF0aWMgYXN5bmMgY3JlYXRlTmV3QXBwZWFyYW5jZVN0cmVhbShlLHQsYSl7Y29uc3R7YmFzZUZvbnRSZWY6YyxldmFsdWF0b3I6bCx0YXNrOmh9PWEse2NvbG9yOnUsZm9udFNpemU6ZCxyZWN0OmYscm90YXRpb246Zyx2YWx1ZTpwfT1lLG09bmV3IHMuRGljdCh0KSxiPW5ldyBzLkRpY3QodCk7aWYoYyliLnNldCgiSGVsdiIsYyk7ZWxzZXtjb25zdCBlPW5ldyBzLkRpY3QodCk7ZS5zZXQoIkJhc2VGb250IixzLk5hbWUuZ2V0KCJIZWx2ZXRpY2EiKSk7ZS5zZXQoIlR5cGUiLHMuTmFtZS5nZXQoIkZvbnQiKSk7ZS5zZXQoIlN1YnR5cGUiLHMuTmFtZS5nZXQoIlR5cGUxIikpO2Uuc2V0KCJFbmNvZGluZyIscy5OYW1lLmdldCgiV2luQW5zaUVuY29kaW5nIikpO2Iuc2V0KCJIZWx2IixlKX1tLnNldCgiRm9udCIsYik7Y29uc3QgeT1hd2FpdCBXaWRnZXRBbm5vdGF0aW9uLl9nZXRGb250RGF0YShsLGgse2ZvbnROYW1lOiJIZWx2Iixmb250U2l6ZTpkfSxtKSxbdyxTLHgsQ109ZjtsZXQgaz14LXcsdj1DLVM7ZyUxODAhPTAmJihbayx2XT1bdixrXSk7Y29uc3QgRj1wLnNwbGl0KCJcbiIpLE89ZC8xZTM7bGV0IFQ9LTEvMDtjb25zdCBNPVtdO2ZvcihsZXQgZSBvZiBGKXtjb25zdCB0PXkuZW5jb2RlU3RyaW5nKGUpO2lmKHQubGVuZ3RoPjEpcmV0dXJuIG51bGw7ZT10LmpvaW4oIiIpO00ucHVzaChlKTtsZXQgYT0wO2NvbnN0IHI9eS5jaGFyc1RvR2x5cGhzKGUpO2Zvcihjb25zdCBlIG9mIHIpYSs9ZS53aWR0aCpPO1Q9TWF0aC5tYXgoVCxhKX1sZXQgRD0xO1Q+ayYmKEQ9ay9UKTtsZXQgRT0xO2NvbnN0IE49ci5MSU5FX0ZBQ1RPUipkLFI9KHIuTElORV9GQUNUT1Itci5MSU5FX0RFU0NFTlRfRkFDVE9SKSpkLEw9TipGLmxlbmd0aDtMPnYmJihFPXYvTCk7Y29uc3QgJD1kKk1hdGgubWluKEQsRSk7bGV0IF8saixVO3N3aXRjaChnKXtjYXNlIDA6VT1bMSwwLDAsMV07aj1bZlswXSxmWzFdLGssdl07Xz1bZlswXSxmWzNdLVJdO2JyZWFrO2Nhc2UgOTA6VT1bMCwxLC0xLDBdO2o9W2ZbMV0sLWZbMl0sayx2XTtfPVtmWzFdLC1mWzBdLVJdO2JyZWFrO2Nhc2UgMTgwOlU9Wy0xLDAsMCwtMV07aj1bLWZbMl0sLWZbM10sayx2XTtfPVstZlsyXSwtZlsxXS1SXTticmVhaztjYXNlIDI3MDpVPVswLC0xLDEsMF07aj1bLWZbM10sZlswXSxrLHZdO189Wy1mWzNdLGZbMl0tUl19Y29uc3QgWD1bInEiLGAke1Uuam9pbigiICIpfSAwIDAgY21gLGAke2ouam9pbigiICIpfSByZSBXIG5gLCJCVCIsYCR7KDAsaS5nZXRQZGZDb2xvcikodSwhMCl9YCxgMCBUYyAvSGVsdiAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKCQpfSBUZmBdO1gucHVzaChgJHtfLmpvaW4oIiAiKX0gVGQgKCR7KDAsbi5lc2NhcGVTdHJpbmcpKE1bMF0pfSkgVGpgKTtjb25zdCBIPSgwLG4ubnVtYmVyVG9TdHJpbmcpKE4pO2ZvcihsZXQgZT0xLHQ9TS5sZW5ndGg7ZTx0O2UrKyl7Y29uc3QgdD1NW2VdO1gucHVzaChgMCAtJHtIfSBUZCAoJHsoMCxuLmVzY2FwZVN0cmluZykodCl9KSBUamApfVgucHVzaCgiRVQiLCJRIik7Y29uc3QgcT1YLmpvaW4oIlxuIiksej1uZXcgcy5EaWN0KHQpO3ouc2V0KCJGb3JtVHlwZSIsMSk7ei5zZXQoIlN1YnR5cGUiLHMuTmFtZS5nZXQoIkZvcm0iKSk7ei5zZXQoIlR5cGUiLHMuTmFtZS5nZXQoIlhPYmplY3QiKSk7ei5zZXQoIkJCb3giLGYpO3ouc2V0KCJSZXNvdXJjZXMiLG0pO3ouc2V0KCJNYXRyaXgiLFsxLDAsMCwxLC1mWzBdLC1mWzFdXSk7Y29uc3QgVz1uZXcgby5TdHJpbmdTdHJlYW0ocSk7Vy5kaWN0PXo7cmV0dXJuIFd9fWNsYXNzIExpbmVBbm5vdGF0aW9uIGV4dGVuZHMgTWFya3VwQW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTtjb25zdHtkaWN0OnQseHJlZjphfT1lO3RoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZT1yLkFubm90YXRpb25UeXBlLkxJTkU7dGhpcy5kYXRhLmhhc093bkNhbnZhcz10aGlzLmRhdGEubm9Sb3RhdGU7Y29uc3Qgbj10LmdldEFycmF5KCJMIik7dGhpcy5kYXRhLmxpbmVDb29yZGluYXRlcz1yLlV0aWwubm9ybWFsaXplUmVjdChuKTt0aGlzLnNldExpbmVFbmRpbmdzKHQuZ2V0QXJyYXkoIkxFIikpO3RoaXMuZGF0YS5saW5lRW5kaW5ncz10aGlzLmxpbmVFbmRpbmdzO2lmKCF0aGlzLmFwcGVhcmFuY2Upe2NvbnN0IGU9dGhpcy5jb2xvcj9nZXRQZGZDb2xvckFycmF5KHRoaXMuY29sb3IpOlswLDAsMF0saT10LmdldCgiQ0EiKSxzPWdldFJnYkNvbG9yKHQuZ2V0QXJyYXkoIklDIiksbnVsbCksbz1zP2dldFBkZkNvbG9yQXJyYXkocyk6bnVsbCxjPW8/aTpudWxsLGw9dGhpcy5ib3JkZXJTdHlsZS53aWR0aHx8MSxoPTIqbCx1PVt0aGlzLmRhdGEubGluZUNvb3JkaW5hdGVzWzBdLWgsdGhpcy5kYXRhLmxpbmVDb29yZGluYXRlc1sxXS1oLHRoaXMuZGF0YS5saW5lQ29vcmRpbmF0ZXNbMl0raCx0aGlzLmRhdGEubGluZUNvb3JkaW5hdGVzWzNdK2hdO3IuVXRpbC5pbnRlcnNlY3QodGhpcy5yZWN0YW5nbGUsdSl8fCh0aGlzLnJlY3RhbmdsZT11KTt0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7eHJlZjphLGV4dHJhOmAke2x9IHdgLHN0cm9rZUNvbG9yOmUsZmlsbENvbG9yOm8sc3Ryb2tlQWxwaGE6aSxmaWxsQWxwaGE6Yyxwb2ludHNDYWxsYmFjazooZSx0KT0+e2UucHVzaChgJHtuWzBdfSAke25bMV19IG1gLGAke25bMl19ICR7blszXX0gbGAsIlMiKTtyZXR1cm5bdFswXS54LWwsdFsxXS54K2wsdFszXS55LWwsdFsxXS55K2xdfX0pfX19Y2xhc3MgU3F1YXJlQW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7Y29uc3R7ZGljdDp0LHhyZWY6YX09ZTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5TUVVBUkU7dGhpcy5kYXRhLmhhc093bkNhbnZhcz10aGlzLmRhdGEubm9Sb3RhdGU7aWYoIXRoaXMuYXBwZWFyYW5jZSl7Y29uc3QgZT10aGlzLmNvbG9yP2dldFBkZkNvbG9yQXJyYXkodGhpcy5jb2xvcik6WzAsMCwwXSxyPXQuZ2V0KCJDQSIpLG49Z2V0UmdiQ29sb3IodC5nZXRBcnJheSgiSUMiKSxudWxsKSxpPW4/Z2V0UGRmQ29sb3JBcnJheShuKTpudWxsLHM9aT9yOm51bGw7aWYoMD09PXRoaXMuYm9yZGVyU3R5bGUud2lkdGgmJiFpKXJldHVybjt0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7eHJlZjphLGV4dHJhOmAke3RoaXMuYm9yZGVyU3R5bGUud2lkdGh9IHdgLHN0cm9rZUNvbG9yOmUsZmlsbENvbG9yOmksc3Ryb2tlQWxwaGE6cixmaWxsQWxwaGE6cyxwb2ludHNDYWxsYmFjazooZSx0KT0+e2NvbnN0IGE9dFsyXS54K3RoaXMuYm9yZGVyU3R5bGUud2lkdGgvMixyPXRbMl0ueSt0aGlzLmJvcmRlclN0eWxlLndpZHRoLzIsbj10WzNdLngtdFsyXS54LXRoaXMuYm9yZGVyU3R5bGUud2lkdGgscz10WzFdLnktdFszXS55LXRoaXMuYm9yZGVyU3R5bGUud2lkdGg7ZS5wdXNoKGAke2F9ICR7cn0gJHtufSAke3N9IHJlYCk7aT9lLnB1c2goIkIiKTplLnB1c2goIlMiKTtyZXR1cm5bdFswXS54LHRbMV0ueCx0WzNdLnksdFsxXS55XX19KX19fWNsYXNzIENpcmNsZUFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO2NvbnN0e2RpY3Q6dCx4cmVmOmF9PWU7dGhpcy5kYXRhLmFubm90YXRpb25UeXBlPXIuQW5ub3RhdGlvblR5cGUuQ0lSQ0xFO2lmKCF0aGlzLmFwcGVhcmFuY2Upe2NvbnN0IGU9dGhpcy5jb2xvcj9nZXRQZGZDb2xvckFycmF5KHRoaXMuY29sb3IpOlswLDAsMF0scj10LmdldCgiQ0EiKSxuPWdldFJnYkNvbG9yKHQuZ2V0QXJyYXkoIklDIiksbnVsbCksaT1uP2dldFBkZkNvbG9yQXJyYXkobik6bnVsbCxzPWk/cjpudWxsO2lmKDA9PT10aGlzLmJvcmRlclN0eWxlLndpZHRoJiYhaSlyZXR1cm47Y29uc3Qgbz00LzMqTWF0aC50YW4oTWF0aC5QSS84KTt0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7eHJlZjphLGV4dHJhOmAke3RoaXMuYm9yZGVyU3R5bGUud2lkdGh9IHdgLHN0cm9rZUNvbG9yOmUsZmlsbENvbG9yOmksc3Ryb2tlQWxwaGE6cixmaWxsQWxwaGE6cyxwb2ludHNDYWxsYmFjazooZSx0KT0+e2NvbnN0IGE9dFswXS54K3RoaXMuYm9yZGVyU3R5bGUud2lkdGgvMixyPXRbMF0ueS10aGlzLmJvcmRlclN0eWxlLndpZHRoLzIsbj10WzNdLngtdGhpcy5ib3JkZXJTdHlsZS53aWR0aC8yLHM9dFszXS55K3RoaXMuYm9yZGVyU3R5bGUud2lkdGgvMixjPWErKG4tYSkvMixsPXIrKHMtcikvMixoPShuLWEpLzIqbyx1PShzLXIpLzIqbztlLnB1c2goYCR7Y30gJHtzfSBtYCxgJHtjK2h9ICR7c30gJHtufSAke2wrdX0gJHtufSAke2x9IGNgLGAke259ICR7bC11fSAke2MraH0gJHtyfSAke2N9ICR7cn0gY2AsYCR7Yy1ofSAke3J9ICR7YX0gJHtsLXV9ICR7YX0gJHtsfSBjYCxgJHthfSAke2wrdX0gJHtjLWh9ICR7c30gJHtjfSAke3N9IGNgLCJoIik7aT9lLnB1c2goIkIiKTplLnB1c2goIlMiKTtyZXR1cm5bdFswXS54LHRbMV0ueCx0WzNdLnksdFsxXS55XX19KX19fWNsYXNzIFBvbHlsaW5lQW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7Y29uc3R7ZGljdDp0LHhyZWY6YX09ZTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5QT0xZTElORTt0aGlzLmRhdGEuaGFzT3duQ2FudmFzPXRoaXMuZGF0YS5ub1JvdGF0ZTt0aGlzLmRhdGEudmVydGljZXM9W107aWYoISh0aGlzIGluc3RhbmNlb2YgUG9seWdvbkFubm90YXRpb24pKXt0aGlzLnNldExpbmVFbmRpbmdzKHQuZ2V0QXJyYXkoIkxFIikpO3RoaXMuZGF0YS5saW5lRW5kaW5ncz10aGlzLmxpbmVFbmRpbmdzfWNvbnN0IG49dC5nZXRBcnJheSgiVmVydGljZXMiKTtpZihBcnJheS5pc0FycmF5KG4pKXtmb3IobGV0IGU9MCx0PW4ubGVuZ3RoO2U8dDtlKz0yKXRoaXMuZGF0YS52ZXJ0aWNlcy5wdXNoKHt4Om5bZV0seTpuW2UrMV19KTtpZighdGhpcy5hcHBlYXJhbmNlKXtjb25zdCBlPXRoaXMuY29sb3I/Z2V0UGRmQ29sb3JBcnJheSh0aGlzLmNvbG9yKTpbMCwwLDBdLG49dC5nZXQoIkNBIiksaT10aGlzLmJvcmRlclN0eWxlLndpZHRofHwxLHM9MippLG89WzEvMCwxLzAsLTEvMCwtMS8wXTtmb3IoY29uc3QgZSBvZiB0aGlzLmRhdGEudmVydGljZXMpe29bMF09TWF0aC5taW4ob1swXSxlLngtcyk7b1sxXT1NYXRoLm1pbihvWzFdLGUueS1zKTtvWzJdPU1hdGgubWF4KG9bMl0sZS54K3MpO29bM109TWF0aC5tYXgob1szXSxlLnkrcyl9ci5VdGlsLmludGVyc2VjdCh0aGlzLnJlY3RhbmdsZSxvKXx8KHRoaXMucmVjdGFuZ2xlPW8pO3RoaXMuX3NldERlZmF1bHRBcHBlYXJhbmNlKHt4cmVmOmEsZXh0cmE6YCR7aX0gd2Asc3Ryb2tlQ29sb3I6ZSxzdHJva2VBbHBoYTpuLHBvaW50c0NhbGxiYWNrOihlLHQpPT57Y29uc3QgYT10aGlzLmRhdGEudmVydGljZXM7Zm9yKGxldCB0PTAscj1hLmxlbmd0aDt0PHI7dCsrKWUucHVzaChgJHthW3RdLnh9ICR7YVt0XS55fSAkezA9PT10PyJtIjoibCJ9YCk7ZS5wdXNoKCJTIik7cmV0dXJuW3RbMF0ueCx0WzFdLngsdFszXS55LHRbMV0ueV19fSl9fX19Y2xhc3MgUG9seWdvbkFubm90YXRpb24gZXh0ZW5kcyBQb2x5bGluZUFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7dGhpcy5kYXRhLmFubm90YXRpb25UeXBlPXIuQW5ub3RhdGlvblR5cGUuUE9MWUdPTn19Y2xhc3MgQ2FyZXRBbm5vdGF0aW9uIGV4dGVuZHMgTWFya3VwQW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5DQVJFVH19Y2xhc3MgSW5rQW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7dGhpcy5kYXRhLmhhc093bkNhbnZhcz10aGlzLmRhdGEubm9Sb3RhdGU7Y29uc3R7ZGljdDp0LHhyZWY6YX09ZTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5JTks7dGhpcy5kYXRhLmlua0xpc3RzPVtdO2NvbnN0IG49dC5nZXRBcnJheSgiSW5rTGlzdCIpO2lmKEFycmF5LmlzQXJyYXkobikpe2ZvcihsZXQgZT0wLHQ9bi5sZW5ndGg7ZTx0OysrZSl7dGhpcy5kYXRhLmlua0xpc3RzLnB1c2goW10pO2ZvcihsZXQgdD0wLHI9bltlXS5sZW5ndGg7dDxyO3QrPTIpdGhpcy5kYXRhLmlua0xpc3RzW2VdLnB1c2goe3g6YS5mZXRjaElmUmVmKG5bZV1bdF0pLHk6YS5mZXRjaElmUmVmKG5bZV1bdCsxXSl9KX1pZighdGhpcy5hcHBlYXJhbmNlKXtjb25zdCBlPXRoaXMuY29sb3I/Z2V0UGRmQ29sb3JBcnJheSh0aGlzLmNvbG9yKTpbMCwwLDBdLG49dC5nZXQoIkNBIiksaT10aGlzLmJvcmRlclN0eWxlLndpZHRofHwxLHM9MippLG89WzEvMCwxLzAsLTEvMCwtMS8wXTtmb3IoY29uc3QgZSBvZiB0aGlzLmRhdGEuaW5rTGlzdHMpZm9yKGNvbnN0IHQgb2YgZSl7b1swXT1NYXRoLm1pbihvWzBdLHQueC1zKTtvWzFdPU1hdGgubWluKG9bMV0sdC55LXMpO29bMl09TWF0aC5tYXgob1syXSx0Lngrcyk7b1szXT1NYXRoLm1heChvWzNdLHQueStzKX1yLlV0aWwuaW50ZXJzZWN0KHRoaXMucmVjdGFuZ2xlLG8pfHwodGhpcy5yZWN0YW5nbGU9byk7dGhpcy5fc2V0RGVmYXVsdEFwcGVhcmFuY2Uoe3hyZWY6YSxleHRyYTpgJHtpfSB3YCxzdHJva2VDb2xvcjplLHN0cm9rZUFscGhhOm4scG9pbnRzQ2FsbGJhY2s6KGUsdCk9Pntmb3IoY29uc3QgdCBvZiB0aGlzLmRhdGEuaW5rTGlzdHMpe2ZvcihsZXQgYT0wLHI9dC5sZW5ndGg7YTxyO2ErKyllLnB1c2goYCR7dFthXS54fSAke3RbYV0ueX0gJHswPT09YT8ibSI6ImwifWApO2UucHVzaCgiUyIpfXJldHVyblt0WzBdLngsdFsxXS54LHRbM10ueSx0WzFdLnldfX0pfX19c3RhdGljIGNyZWF0ZU5ld0RpY3QoZSx0LHthcFJlZjphLGFwOm59KXtjb25zdHtjb2xvcjppLG9wYWNpdHk6byxwYXRoczpjLHJlY3Q6bCxyb3RhdGlvbjpoLHRoaWNrbmVzczp1fT1lLGQ9bmV3IHMuRGljdCh0KTtkLnNldCgiVHlwZSIscy5OYW1lLmdldCgiQW5ub3QiKSk7ZC5zZXQoIlN1YnR5cGUiLHMuTmFtZS5nZXQoIkluayIpKTtkLnNldCgiQ3JlYXRpb25EYXRlIixgRDokeygwLHIuZ2V0TW9kaWZpY2F0aW9uRGF0ZSkoKX1gKTtkLnNldCgiUmVjdCIsbCk7ZC5zZXQoIklua0xpc3QiLGMubWFwKChlPT5lLnBvaW50cykpKTtkLnNldCgiRiIsNCk7ZC5zZXQoIlJvdGF0ZSIsaCk7Y29uc3QgZj1uZXcgcy5EaWN0KHQpO2Quc2V0KCJCUyIsZik7Zi5zZXQoIlciLHUpO2Quc2V0KCJDIixBcnJheS5mcm9tKGksKGU9PmUvMjU1KSkpO2Quc2V0KCJDQSIsbyk7Y29uc3QgZz1uZXcgcy5EaWN0KHQpO2Quc2V0KCJBUCIsZyk7YT9nLnNldCgiTiIsYSk6Zy5zZXQoIk4iLG4pO3JldHVybiBkfXN0YXRpYyBhc3luYyBjcmVhdGVOZXdBcHBlYXJhbmNlU3RyZWFtKGUsdCxhKXtjb25zdHtjb2xvcjpyLHJlY3Q6YyxwYXRoczpsLHRoaWNrbmVzczpoLG9wYWNpdHk6dX09ZSxkPVtgJHtofSB3IDEgSiAxIGpgLGAkeygwLGkuZ2V0UGRmQ29sb3IpKHIsITEpfWBdOzEhPT11JiZkLnB1c2goIi9SMCBncyIpO2NvbnN0IGY9W107Zm9yKGNvbnN0e2JlemllcjplfW9mIGwpe2YubGVuZ3RoPTA7Zi5wdXNoKGAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKGVbMF0pfSAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKGVbMV0pfSBtYCk7Zm9yKGxldCB0PTIsYT1lLmxlbmd0aDt0PGE7dCs9Nil7Y29uc3QgYT1lLnNsaWNlKHQsdCs2KS5tYXAobi5udW1iZXJUb1N0cmluZykuam9pbigiICIpO2YucHVzaChgJHthfSBjYCl9Zi5wdXNoKCJTIik7ZC5wdXNoKGYuam9pbigiXG4iKSl9Y29uc3QgZz1kLmpvaW4oIlxuIikscD1uZXcgcy5EaWN0KHQpO3Auc2V0KCJGb3JtVHlwZSIsMSk7cC5zZXQoIlN1YnR5cGUiLHMuTmFtZS5nZXQoIkZvcm0iKSk7cC5zZXQoIlR5cGUiLHMuTmFtZS5nZXQoIlhPYmplY3QiKSk7cC5zZXQoIkJCb3giLGMpO3Auc2V0KCJMZW5ndGgiLGcubGVuZ3RoKTtpZigxIT09dSl7Y29uc3QgZT1uZXcgcy5EaWN0KHQpLGE9bmV3IHMuRGljdCh0KSxyPW5ldyBzLkRpY3QodCk7ci5zZXQoIkNBIix1KTtyLnNldCgiVHlwZSIscy5OYW1lLmdldCgiRXh0R1N0YXRlIikpO2Euc2V0KCJSMCIscik7ZS5zZXQoIkV4dEdTdGF0ZSIsYSk7cC5zZXQoIlJlc291cmNlcyIsZSl9Y29uc3QgbT1uZXcgby5TdHJpbmdTdHJlYW0oZyk7bS5kaWN0PXA7cmV0dXJuIG19fWNsYXNzIEhpZ2hsaWdodEFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO2NvbnN0e2RpY3Q6dCx4cmVmOmF9PWU7dGhpcy5kYXRhLmFubm90YXRpb25UeXBlPXIuQW5ub3RhdGlvblR5cGUuSElHSExJR0hUO2lmKHRoaXMuZGF0YS5xdWFkUG9pbnRzPWdldFF1YWRQb2ludHModCxudWxsKSl7Y29uc3QgZT10aGlzLmFwcGVhcmFuY2U/LmRpY3QuZ2V0KCJSZXNvdXJjZXMiKTtpZighdGhpcy5hcHBlYXJhbmNlfHwhZT8uaGFzKCJFeHRHU3RhdGUiKSl7dGhpcy5hcHBlYXJhbmNlJiYoMCxyLndhcm4pKCJIaWdobGlnaHRBbm5vdGF0aW9uIC0gaWdub3JpbmcgYnVpbHQtaW4gYXBwZWFyYW5jZSBzdHJlYW0uIik7Y29uc3QgZT10aGlzLmNvbG9yP2dldFBkZkNvbG9yQXJyYXkodGhpcy5jb2xvcik6WzEsMSwwXSxuPXQuZ2V0KCJDQSIpO3RoaXMuX3NldERlZmF1bHRBcHBlYXJhbmNlKHt4cmVmOmEsZmlsbENvbG9yOmUsYmxlbmRNb2RlOiJNdWx0aXBseSIsZmlsbEFscGhhOm4scG9pbnRzQ2FsbGJhY2s6KGUsdCk9PntlLnB1c2goYCR7dFswXS54fSAke3RbMF0ueX0gbWAsYCR7dFsxXS54fSAke3RbMV0ueX0gbGAsYCR7dFszXS54fSAke3RbM10ueX0gbGAsYCR7dFsyXS54fSAke3RbMl0ueX0gbGAsImYiKTtyZXR1cm5bdFswXS54LHRbMV0ueCx0WzNdLnksdFsxXS55XX19KX19ZWxzZSB0aGlzLmRhdGEucG9wdXBSZWY9bnVsbH19Y2xhc3MgVW5kZXJsaW5lQW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7Y29uc3R7ZGljdDp0LHhyZWY6YX09ZTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5VTkRFUkxJTkU7aWYodGhpcy5kYXRhLnF1YWRQb2ludHM9Z2V0UXVhZFBvaW50cyh0LG51bGwpKXtpZighdGhpcy5hcHBlYXJhbmNlKXtjb25zdCBlPXRoaXMuY29sb3I/Z2V0UGRmQ29sb3JBcnJheSh0aGlzLmNvbG9yKTpbMCwwLDBdLHI9dC5nZXQoIkNBIik7dGhpcy5fc2V0RGVmYXVsdEFwcGVhcmFuY2Uoe3hyZWY6YSxleHRyYToiW10gMCBkIDAuNTcxIHciLHN0cm9rZUNvbG9yOmUsc3Ryb2tlQWxwaGE6cixwb2ludHNDYWxsYmFjazooZSx0KT0+e2UucHVzaChgJHt0WzJdLnh9ICR7dFsyXS55KzEuM30gbWAsYCR7dFszXS54fSAke3RbM10ueSsxLjN9IGxgLCJTIik7cmV0dXJuW3RbMF0ueCx0WzFdLngsdFszXS55LHRbMV0ueV19fSl9fWVsc2UgdGhpcy5kYXRhLnBvcHVwUmVmPW51bGx9fWNsYXNzIFNxdWlnZ2x5QW5ub3RhdGlvbiBleHRlbmRzIE1hcmt1cEFubm90YXRpb257Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7Y29uc3R7ZGljdDp0LHhyZWY6YX09ZTt0aGlzLmRhdGEuYW5ub3RhdGlvblR5cGU9ci5Bbm5vdGF0aW9uVHlwZS5TUVVJR0dMWTtpZih0aGlzLmRhdGEucXVhZFBvaW50cz1nZXRRdWFkUG9pbnRzKHQsbnVsbCkpe2lmKCF0aGlzLmFwcGVhcmFuY2Upe2NvbnN0IGU9dGhpcy5jb2xvcj9nZXRQZGZDb2xvckFycmF5KHRoaXMuY29sb3IpOlswLDAsMF0scj10LmdldCgiQ0EiKTt0aGlzLl9zZXREZWZhdWx0QXBwZWFyYW5jZSh7eHJlZjphLGV4dHJhOiJbXSAwIGQgMSB3IixzdHJva2VDb2xvcjplLHN0cm9rZUFscGhhOnIscG9pbnRzQ2FsbGJhY2s6KGUsdCk9Pntjb25zdCBhPSh0WzBdLnktdFsyXS55KS82O2xldCByPWEsbj10WzJdLng7Y29uc3QgaT10WzJdLnkscz10WzNdLng7ZS5wdXNoKGAke259ICR7aStyfSBtYCk7ZG97bis9MjtyPTA9PT1yP2E6MDtlLnB1c2goYCR7bn0gJHtpK3J9IGxgKX13aGlsZShuPHMpO2UucHVzaCgiUyIpO3JldHVyblt0WzJdLngscyxpLTIqYSxpKzIqYV19fSl9fWVsc2UgdGhpcy5kYXRhLnBvcHVwUmVmPW51bGx9fWNsYXNzIFN0cmlrZU91dEFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO2NvbnN0e2RpY3Q6dCx4cmVmOmF9PWU7dGhpcy5kYXRhLmFubm90YXRpb25UeXBlPXIuQW5ub3RhdGlvblR5cGUuU1RSSUtFT1VUO2lmKHRoaXMuZGF0YS5xdWFkUG9pbnRzPWdldFF1YWRQb2ludHModCxudWxsKSl7aWYoIXRoaXMuYXBwZWFyYW5jZSl7Y29uc3QgZT10aGlzLmNvbG9yP2dldFBkZkNvbG9yQXJyYXkodGhpcy5jb2xvcik6WzAsMCwwXSxyPXQuZ2V0KCJDQSIpO3RoaXMuX3NldERlZmF1bHRBcHBlYXJhbmNlKHt4cmVmOmEsZXh0cmE6IltdIDAgZCAxIHciLHN0cm9rZUNvbG9yOmUsc3Ryb2tlQWxwaGE6cixwb2ludHNDYWxsYmFjazooZSx0KT0+e2UucHVzaCgodFswXS54K3RbMl0ueCkvMisiICIrKHRbMF0ueSt0WzJdLnkpLzIrIiBtIiwodFsxXS54K3RbM10ueCkvMisiICIrKHRbMV0ueSt0WzNdLnkpLzIrIiBsIiwiUyIpO3JldHVyblt0WzBdLngsdFsxXS54LHRbM10ueSx0WzFdLnldfX0pfX1lbHNlIHRoaXMuZGF0YS5wb3B1cFJlZj1udWxsfX1jbGFzcyBTdGFtcEFubm90YXRpb24gZXh0ZW5kcyBNYXJrdXBBbm5vdGF0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUpO3RoaXMuZGF0YS5hbm5vdGF0aW9uVHlwZT1yLkFubm90YXRpb25UeXBlLlNUQU1QO3RoaXMuZGF0YS5oYXNPd25DYW52YXM9dGhpcy5kYXRhLm5vUm90YXRlfXN0YXRpYyBhc3luYyBjcmVhdGVJbWFnZShlLHQpe2NvbnN0e3dpZHRoOmEsaGVpZ2h0Om59PWUsaT1uZXcgT2Zmc2NyZWVuQ2FudmFzKGEsbiksYz1pLmdldENvbnRleHQoIjJkIix7YWxwaGE6ITB9KTtjLmRyYXdJbWFnZShlLDAsMCk7Y29uc3QgbD1jLmdldEltYWdlRGF0YSgwLDAsYSxuKS5kYXRhLGg9bmV3IFVpbnQzMkFycmF5KGwuYnVmZmVyKSx1PWguc29tZShyLkZlYXR1cmVUZXN0LmlzTGl0dGxlRW5kaWFuP2U9PmU+Pj4yNCE9MjU1OmU9PjI1NSE9KDI1NSZlKSk7aWYodSl7Yy5maWxsU3R5bGU9IndoaXRlIjtjLmZpbGxSZWN0KDAsMCxhLG4pO2MuZHJhd0ltYWdlKGUsMCwwKX1jb25zdCBkPWkuY29udmVydFRvQmxvYih7dHlwZToiaW1hZ2UvanBlZyIscXVhbGl0eToxfSkudGhlbigoZT0+ZS5hcnJheUJ1ZmZlcigpKSksZj1zLk5hbWUuZ2V0KCJYT2JqZWN0IiksZz1zLk5hbWUuZ2V0KCJJbWFnZSIpLHA9bmV3IHMuRGljdCh0KTtwLnNldCgiVHlwZSIsZik7cC5zZXQoIlN1YnR5cGUiLGcpO3Auc2V0KCJCaXRzUGVyQ29tcG9uZW50Iiw4KTtwLnNldCgiQ29sb3JTcGFjZSIscy5OYW1lLmdldCgiRGV2aWNlUkdCIikpO3Auc2V0KCJGaWx0ZXIiLHMuTmFtZS5nZXQoIkRDVERlY29kZSIpKTtwLnNldCgiQkJveCIsWzAsMCxhLG5dKTtwLnNldCgiV2lkdGgiLGEpO3Auc2V0KCJIZWlnaHQiLG4pO2xldCBtPW51bGw7aWYodSl7Y29uc3QgZT1uZXcgVWludDhBcnJheShoLmxlbmd0aCk7aWYoci5GZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbilmb3IobGV0IHQ9MCxhPWgubGVuZ3RoO3Q8YTt0KyspZVt0XT1oW3RdPj4+MjQ7ZWxzZSBmb3IobGV0IHQ9MCxhPWgubGVuZ3RoO3Q8YTt0KyspZVt0XT0yNTUmaFt0XTtjb25zdCBpPW5ldyBzLkRpY3QodCk7aS5zZXQoIlR5cGUiLGYpO2kuc2V0KCJTdWJ0eXBlIixnKTtpLnNldCgiQml0c1BlckNvbXBvbmVudCIsOCk7aS5zZXQoIkNvbG9yU3BhY2UiLHMuTmFtZS5nZXQoIkRldmljZUdyYXkiKSk7aS5zZXQoIldpZHRoIixhKTtpLnNldCgiSGVpZ2h0IixuKTttPW5ldyBvLlN0cmVhbShlLDAsMCxpKX1yZXR1cm57aW1hZ2VTdHJlYW06bmV3IG8uU3RyZWFtKGF3YWl0IGQsMCwwLHApLHNtYXNrU3RyZWFtOm0sd2lkdGg6YSxoZWlnaHQ6bn19c3RhdGljIGNyZWF0ZU5ld0RpY3QoZSx0LHthcFJlZjphLGFwOml9KXtjb25zdHtyZWN0Om8scm90YXRpb246Yyx1c2VyOmx9PWUsaD1uZXcgcy5EaWN0KHQpO2guc2V0KCJUeXBlIixzLk5hbWUuZ2V0KCJBbm5vdCIpKTtoLnNldCgiU3VidHlwZSIscy5OYW1lLmdldCgiU3RhbXAiKSk7aC5zZXQoIkNyZWF0aW9uRGF0ZSIsYEQ6JHsoMCxyLmdldE1vZGlmaWNhdGlvbkRhdGUpKCl9YCk7aC5zZXQoIlJlY3QiLG8pO2guc2V0KCJGIiw0KTtoLnNldCgiQm9yZGVyIixbMCwwLDBdKTtoLnNldCgiUm90YXRlIixjKTtsJiZoLnNldCgiVCIsKDAsbi5pc0FzY2lpKShsKT9sOigwLG4uc3RyaW5nVG9VVEYxNlN0cmluZykobCwhMCkpO2lmKGF8fGkpe2NvbnN0IGU9bmV3IHMuRGljdCh0KTtoLnNldCgiQVAiLGUpO2E/ZS5zZXQoIk4iLGEpOmUuc2V0KCJOIixpKX1yZXR1cm4gaH1zdGF0aWMgYXN5bmMgY3JlYXRlTmV3QXBwZWFyYW5jZVN0cmVhbShlLHQsYSl7Y29uc3R7cm90YXRpb246cn09ZSx7aW1hZ2VSZWY6aSx3aWR0aDpjLGhlaWdodDpsfT1hLmltYWdlLGg9bmV3IHMuRGljdCh0KSx1PW5ldyBzLkRpY3QodCk7aC5zZXQoIlhPYmplY3QiLHUpO3Uuc2V0KCJJbTAiLGkpO2NvbnN0IGQ9YHEgJHtjfSAwIDAgJHtsfSAwIDAgY20gL0ltMCBEbyBRYCxmPW5ldyBzLkRpY3QodCk7Zi5zZXQoIkZvcm1UeXBlIiwxKTtmLnNldCgiU3VidHlwZSIscy5OYW1lLmdldCgiRm9ybSIpKTtmLnNldCgiVHlwZSIscy5OYW1lLmdldCgiWE9iamVjdCIpKTtmLnNldCgiQkJveCIsWzAsMCxjLGxdKTtmLnNldCgiUmVzb3VyY2VzIixoKTtpZihyKXtjb25zdCBlPSgwLG4uZ2V0Um90YXRpb25NYXRyaXgpKHIsYyxsKTtmLnNldCgiTWF0cml4IixlKX1jb25zdCBnPW5ldyBvLlN0cmluZ1N0cmVhbShkKTtnLmRpY3Q9ZjtyZXR1cm4gZ319Y2xhc3MgRmlsZUF0dGFjaG1lbnRBbm5vdGF0aW9uIGV4dGVuZHMgTWFya3VwQW5ub3RhdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTtjb25zdHtkaWN0OnQseHJlZjphfT1lLG49bmV3IGQuRmlsZVNwZWModC5nZXQoIkZTIiksYSk7dGhpcy5kYXRhLmFubm90YXRpb25UeXBlPXIuQW5ub3RhdGlvblR5cGUuRklMRUFUVEFDSE1FTlQ7dGhpcy5kYXRhLmhhc093bkNhbnZhcz10aGlzLmRhdGEubm9Sb3RhdGU7dGhpcy5kYXRhLmZpbGU9bi5zZXJpYWxpemFibGU7Y29uc3QgaT10LmdldCgiTmFtZSIpO3RoaXMuZGF0YS5uYW1lPWkgaW5zdGFuY2VvZiBzLk5hbWU/KDAsci5zdHJpbmdUb1BERlN0cmluZykoaS5uYW1lKToiUHVzaFBpbiI7Y29uc3Qgbz10LmdldCgiY2EiKTt0aGlzLmRhdGEuZmlsbEFscGhhPSJudW1iZXIiPT10eXBlb2YgbyYmbz49MCYmbzw9MT9vOm51bGx9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkZha2VVbmljb2RlRm9udD12b2lkIDA7dC5jcmVhdGVEZWZhdWx0QXBwZWFyYW5jZT1mdW5jdGlvbiBjcmVhdGVEZWZhdWx0QXBwZWFyYW5jZSh7Zm9udFNpemU6ZSxmb250TmFtZTp0LGZvbnRDb2xvcjphfSl7cmV0dXJuYC8keygwLG4uZXNjYXBlUERGTmFtZSkodCl9ICR7ZX0gVGYgJHtnZXRQZGZDb2xvcihhLCEwKX1gfTt0LmdldFBkZkNvbG9yPWdldFBkZkNvbG9yO3QucGFyc2VBcHBlYXJhbmNlU3RyZWFtPWZ1bmN0aW9uIHBhcnNlQXBwZWFyYW5jZVN0cmVhbShlLHQsYSl7cmV0dXJuIG5ldyBBcHBlYXJhbmNlU3RyZWFtRXZhbHVhdG9yKGUsdCxhKS5wYXJzZSgpfTt0LnBhcnNlRGVmYXVsdEFwcGVhcmFuY2U9ZnVuY3Rpb24gcGFyc2VEZWZhdWx0QXBwZWFyYW5jZShlKXtyZXR1cm4gbmV3IERlZmF1bHRBcHBlYXJhbmNlRXZhbHVhdG9yKGUpLnBhcnNlKCl9O3ZhciByPWEoNCksbj1hKDMpLGk9YSgyKSxzPWEoMTIpLG89YSgxMyksYz1hKDU5KSxsPWEoNTcpLGg9YSg4KTtjbGFzcyBEZWZhdWx0QXBwZWFyYW5jZUV2YWx1YXRvciBleHRlbmRzIG8uRXZhbHVhdG9yUHJlcHJvY2Vzc29ye2NvbnN0cnVjdG9yKGUpe3N1cGVyKG5ldyBoLlN0cmluZ1N0cmVhbShlKSl9cGFyc2UoKXtjb25zdCBlPXtmbjowLGFyZ3M6W119LHQ9e2ZvbnRTaXplOjAsZm9udE5hbWU6IiIsZm9udENvbG9yOm5ldyBVaW50OENsYW1wZWRBcnJheSgzKX07dHJ5e2Zvcig7Oyl7ZS5hcmdzLmxlbmd0aD0wO2lmKCF0aGlzLnJlYWQoZSkpYnJlYWs7aWYoMCE9PXRoaXMuc2F2ZWRTdGF0ZXNEZXB0aCljb250aW51ZTtjb25zdHtmbjphLGFyZ3M6bn09ZTtzd2l0Y2goMHxhKXtjYXNlIGkuT1BTLnNldEZvbnQ6Y29uc3RbZSxhXT1uO2UgaW5zdGFuY2VvZiByLk5hbWUmJih0LmZvbnROYW1lPWUubmFtZSk7Im51bWJlciI9PXR5cGVvZiBhJiZhPjAmJih0LmZvbnRTaXplPWEpO2JyZWFrO2Nhc2UgaS5PUFMuc2V0RmlsbFJHQkNvbG9yOnMuQ29sb3JTcGFjZS5zaW5nbGV0b25zLnJnYi5nZXRSZ2JJdGVtKG4sMCx0LmZvbnRDb2xvciwwKTticmVhaztjYXNlIGkuT1BTLnNldEZpbGxHcmF5OnMuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmdyYXkuZ2V0UmdiSXRlbShuLDAsdC5mb250Q29sb3IsMCk7YnJlYWs7Y2FzZSBpLk9QUy5zZXRGaWxsQ01ZS0NvbG9yOnMuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmNteWsuZ2V0UmdiSXRlbShuLDAsdC5mb250Q29sb3IsMCl9fX1jYXRjaChlKXsoMCxpLndhcm4pKGBwYXJzZURlZmF1bHRBcHBlYXJhbmNlIC0gaWdub3JpbmcgZXJyb3JzOiAiJHtlfSIuYCl9cmV0dXJuIHR9fWNsYXNzIEFwcGVhcmFuY2VTdHJlYW1FdmFsdWF0b3IgZXh0ZW5kcyBvLkV2YWx1YXRvclByZXByb2Nlc3Nvcntjb25zdHJ1Y3RvcihlLHQsYSl7c3VwZXIoZSk7dGhpcy5zdHJlYW09ZTt0aGlzLmV2YWx1YXRvck9wdGlvbnM9dDt0aGlzLnhyZWY9YTt0aGlzLnJlc291cmNlcz1lLmRpY3Q/LmdldCgiUmVzb3VyY2VzIil9cGFyc2UoKXtjb25zdCBlPXtmbjowLGFyZ3M6W119O2xldCB0PXtzY2FsZUZhY3RvcjoxLGZvbnRTaXplOjAsZm9udE5hbWU6IiIsZm9udENvbG9yOm5ldyBVaW50OENsYW1wZWRBcnJheSgzKSxmaWxsQ29sb3JTcGFjZTpzLkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5ncmF5fSxhPSExO2NvbnN0IG49W107dHJ5e2Zvcig7Oyl7ZS5hcmdzLmxlbmd0aD0wO2lmKGF8fCF0aGlzLnJlYWQoZSkpYnJlYWs7Y29uc3R7Zm46byxhcmdzOmN9PWU7c3dpdGNoKDB8byl7Y2FzZSBpLk9QUy5zYXZlOm4ucHVzaCh7c2NhbGVGYWN0b3I6dC5zY2FsZUZhY3Rvcixmb250U2l6ZTp0LmZvbnRTaXplLGZvbnROYW1lOnQuZm9udE5hbWUsZm9udENvbG9yOnQuZm9udENvbG9yLnNsaWNlKCksZmlsbENvbG9yU3BhY2U6dC5maWxsQ29sb3JTcGFjZX0pO2JyZWFrO2Nhc2UgaS5PUFMucmVzdG9yZTp0PW4ucG9wKCl8fHQ7YnJlYWs7Y2FzZSBpLk9QUy5zZXRUZXh0TWF0cml4OnQuc2NhbGVGYWN0b3IqPU1hdGguaHlwb3QoY1swXSxjWzFdKTticmVhaztjYXNlIGkuT1BTLnNldEZvbnQ6Y29uc3RbZSxvXT1jO2UgaW5zdGFuY2VvZiByLk5hbWUmJih0LmZvbnROYW1lPWUubmFtZSk7Im51bWJlciI9PXR5cGVvZiBvJiZvPjAmJih0LmZvbnRTaXplPW8qdC5zY2FsZUZhY3Rvcik7YnJlYWs7Y2FzZSBpLk9QUy5zZXRGaWxsQ29sb3JTcGFjZTp0LmZpbGxDb2xvclNwYWNlPXMuQ29sb3JTcGFjZS5wYXJzZSh7Y3M6Y1swXSx4cmVmOnRoaXMueHJlZixyZXNvdXJjZXM6dGhpcy5yZXNvdXJjZXMscGRmRnVuY3Rpb25GYWN0b3J5OnRoaXMuX3BkZkZ1bmN0aW9uRmFjdG9yeSxsb2NhbENvbG9yU3BhY2VDYWNoZTp0aGlzLl9sb2NhbENvbG9yU3BhY2VDYWNoZX0pO2JyZWFrO2Nhc2UgaS5PUFMuc2V0RmlsbENvbG9yOnQuZmlsbENvbG9yU3BhY2UuZ2V0UmdiSXRlbShjLDAsdC5mb250Q29sb3IsMCk7YnJlYWs7Y2FzZSBpLk9QUy5zZXRGaWxsUkdCQ29sb3I6cy5Db2xvclNwYWNlLnNpbmdsZXRvbnMucmdiLmdldFJnYkl0ZW0oYywwLHQuZm9udENvbG9yLDApO2JyZWFrO2Nhc2UgaS5PUFMuc2V0RmlsbEdyYXk6cy5Db2xvclNwYWNlLnNpbmdsZXRvbnMuZ3JheS5nZXRSZ2JJdGVtKGMsMCx0LmZvbnRDb2xvciwwKTticmVhaztjYXNlIGkuT1BTLnNldEZpbGxDTVlLQ29sb3I6cy5Db2xvclNwYWNlLnNpbmdsZXRvbnMuY215ay5nZXRSZ2JJdGVtKGMsMCx0LmZvbnRDb2xvciwwKTticmVhaztjYXNlIGkuT1BTLnNob3dUZXh0OmNhc2UgaS5PUFMuc2hvd1NwYWNlZFRleHQ6Y2FzZSBpLk9QUy5uZXh0TGluZVNob3dUZXh0OmNhc2UgaS5PUFMubmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQ6YT0hMH19fWNhdGNoKGUpeygwLGkud2FybikoYHBhcnNlQXBwZWFyYW5jZVN0cmVhbSAtIGlnbm9yaW5nIGVycm9yczogIiR7ZX0iLmApfXRoaXMuc3RyZWFtLnJlc2V0KCk7ZGVsZXRlIHQuc2NhbGVGYWN0b3I7ZGVsZXRlIHQuZmlsbENvbG9yU3BhY2U7cmV0dXJuIHR9Z2V0IF9sb2NhbENvbG9yU3BhY2VDYWNoZSgpe3JldHVybigwLGkuc2hhZG93KSh0aGlzLCJfbG9jYWxDb2xvclNwYWNlQ2FjaGUiLG5ldyBjLkxvY2FsQ29sb3JTcGFjZUNhY2hlKX1nZXQgX3BkZkZ1bmN0aW9uRmFjdG9yeSgpe2NvbnN0IGU9bmV3IGwuUERGRnVuY3Rpb25GYWN0b3J5KHt4cmVmOnRoaXMueHJlZixpc0V2YWxTdXBwb3J0ZWQ6dGhpcy5ldmFsdWF0b3JPcHRpb25zLmlzRXZhbFN1cHBvcnRlZH0pO3JldHVybigwLGkuc2hhZG93KSh0aGlzLCJfcGRmRnVuY3Rpb25GYWN0b3J5IixlKX19ZnVuY3Rpb24gZ2V0UGRmQ29sb3IoZSx0KXtpZihlWzBdPT09ZVsxXSYmZVsxXT09PWVbMl0pe2NvbnN0IGE9ZVswXS8yNTU7cmV0dXJuYCR7KDAsbi5udW1iZXJUb1N0cmluZykoYSl9ICR7dD8iZyI6IkcifWB9cmV0dXJuIEFycmF5LmZyb20oZSwoZT0+KDAsbi5udW1iZXJUb1N0cmluZykoZS8yNTUpKSkuam9pbigiICIpKyIgIisodD8icmciOiJSRyIpfWNsYXNzIEZha2VVbmljb2RlRm9udHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMueHJlZj1lO3RoaXMud2lkdGhzPW51bGw7dGhpcy5maXJzdENoYXI9MS8wO3RoaXMubGFzdENoYXI9LTEvMDt0aGlzLmZvbnRGYW1pbHk9dDtjb25zdCBhPW5ldyBPZmZzY3JlZW5DYW52YXMoMSwxKTt0aGlzLmN0eE1lYXN1cmU9YS5nZXRDb250ZXh0KCIyZCIpO0Zha2VVbmljb2RlRm9udC5fZm9udE5hbWVJZHx8KEZha2VVbmljb2RlRm9udC5fZm9udE5hbWVJZD0xKTt0aGlzLmZvbnROYW1lPXIuTmFtZS5nZXQoYEludmFsaWRQREZqc0ZvbnRfJHt0fV8ke0Zha2VVbmljb2RlRm9udC5fZm9udE5hbWVJZCsrfWApfWdldCB0b1VuaWNvZGVSZWYoKXtpZighRmFrZVVuaWNvZGVGb250Ll90b1VuaWNvZGVSZWYpe2NvbnN0IGU9Ii9DSURJbml0IC9Qcm9jU2V0IGZpbmRyZXNvdXJjZSBiZWdpblxuMTIgZGljdCBiZWdpblxuYmVnaW5jbWFwXG4vQ0lEU3lzdGVtSW5mb1xuPDwgL1JlZ2lzdHJ5IChBZG9iZSlcbi9PcmRlcmluZyAoVUNTKSAvU3VwcGxlbWVudCAwID4+IGRlZlxuL0NNYXBOYW1lIC9BZG9iZS1JZGVudGl0eS1VQ1MgZGVmXG4vQ01hcFR5cGUgMiBkZWZcbjEgYmVnaW5jb2Rlc3BhY2VyYW5nZVxuPDAwMDA+IDxGRkZGPlxuZW5kY29kZXNwYWNlcmFuZ2VcbjEgYmVnaW5iZnJhbmdlXG48MDAwMD4gPEZGRkY+IDwwMDAwPlxuZW5kYmZyYW5nZVxuZW5kY21hcCBDTWFwTmFtZSBjdXJyZW50ZGljdCAvQ01hcCBkZWZpbmVyZXNvdXJjZSBwb3AgZW5kIGVuZCIsdD1GYWtlVW5pY29kZUZvbnQudG9Vbmljb2RlU3RyZWFtPW5ldyBoLlN0cmluZ1N0cmVhbShlKSxhPW5ldyByLkRpY3QodGhpcy54cmVmKTt0LmRpY3Q9YTthLnNldCgiTGVuZ3RoIixlLmxlbmd0aCk7RmFrZVVuaWNvZGVGb250Ll90b1VuaWNvZGVSZWY9dGhpcy54cmVmLmdldE5ld1BlcnNpc3RlbnRSZWYodCl9cmV0dXJuIEZha2VVbmljb2RlRm9udC5fdG9Vbmljb2RlUmVmfWdldCBmb250RGVzY3JpcHRvclJlZigpe2lmKCFGYWtlVW5pY29kZUZvbnQuX2ZvbnREZXNjcmlwdG9yUmVmKXtjb25zdCBlPW5ldyByLkRpY3QodGhpcy54cmVmKTtlLnNldCgiVHlwZSIsci5OYW1lLmdldCgiRm9udERlc2NyaXB0b3IiKSk7ZS5zZXQoIkZvbnROYW1lIix0aGlzLmZvbnROYW1lKTtlLnNldCgiRm9udEZhbWlseSIsIk15cmlhZFBybyBSZWd1bGFyIik7ZS5zZXQoIkZvbnRCQm94IixbMCwwLDAsMF0pO2Uuc2V0KCJGb250U3RyZXRjaCIsci5OYW1lLmdldCgiTm9ybWFsIikpO2Uuc2V0KCJGb250V2VpZ2h0Iiw0MDApO2Uuc2V0KCJJdGFsaWNBbmdsZSIsMCk7RmFrZVVuaWNvZGVGb250Ll9mb250RGVzY3JpcHRvclJlZj10aGlzLnhyZWYuZ2V0TmV3UGVyc2lzdGVudFJlZihlKX1yZXR1cm4gRmFrZVVuaWNvZGVGb250Ll9mb250RGVzY3JpcHRvclJlZn1nZXQgZGVzY2VuZGFudEZvbnRSZWYoKXtjb25zdCBlPW5ldyByLkRpY3QodGhpcy54cmVmKTtlLnNldCgiQmFzZUZvbnQiLHRoaXMuZm9udE5hbWUpO2Uuc2V0KCJUeXBlIixyLk5hbWUuZ2V0KCJGb250IikpO2Uuc2V0KCJTdWJ0eXBlIixyLk5hbWUuZ2V0KCJDSURGb250VHlwZTAiKSk7ZS5zZXQoIkNJRFRvR0lETWFwIixyLk5hbWUuZ2V0KCJJZGVudGl0eSIpKTtlLnNldCgiRmlyc3RDaGFyIix0aGlzLmZpcnN0Q2hhcik7ZS5zZXQoIkxhc3RDaGFyIix0aGlzLmxhc3RDaGFyKTtlLnNldCgiRm9udERlc2NyaXB0b3IiLHRoaXMuZm9udERlc2NyaXB0b3JSZWYpO2Uuc2V0KCJEVyIsMWUzKTtjb25zdCB0PVtdLGE9Wy4uLnRoaXMud2lkdGhzLmVudHJpZXMoKV0uc29ydCgpO2xldCBuPW51bGwsaT1udWxsO2Zvcihjb25zdFtlLHJdb2YgYSlpZihuKWlmKGU9PT1uK2kubGVuZ3RoKWkucHVzaChyKTtlbHNle3QucHVzaChuLGkpO249ZTtpPVtyXX1lbHNle249ZTtpPVtyXX1uJiZ0LnB1c2gobixpKTtlLnNldCgiVyIsdCk7Y29uc3Qgcz1uZXcgci5EaWN0KHRoaXMueHJlZik7cy5zZXQoIk9yZGVyaW5nIiwiSWRlbnRpdHkiKTtzLnNldCgiUmVnaXN0cnkiLCJBZG9iZSIpO3Muc2V0KCJTdXBwbGVtZW50IiwwKTtlLnNldCgiQ0lEU3lzdGVtSW5mbyIscyk7cmV0dXJuIHRoaXMueHJlZi5nZXROZXdQZXJzaXN0ZW50UmVmKGUpfWdldCBiYXNlRm9udFJlZigpe2NvbnN0IGU9bmV3IHIuRGljdCh0aGlzLnhyZWYpO2Uuc2V0KCJCYXNlRm9udCIsdGhpcy5mb250TmFtZSk7ZS5zZXQoIlR5cGUiLHIuTmFtZS5nZXQoIkZvbnQiKSk7ZS5zZXQoIlN1YnR5cGUiLHIuTmFtZS5nZXQoIlR5cGUwIikpO2Uuc2V0KCJFbmNvZGluZyIsci5OYW1lLmdldCgiSWRlbnRpdHktSCIpKTtlLnNldCgiRGVzY2VuZGFudEZvbnRzIixbdGhpcy5kZXNjZW5kYW50Rm9udFJlZl0pO2Uuc2V0KCJUb1VuaWNvZGUiLHRoaXMudG9Vbmljb2RlUmVmKTtyZXR1cm4gdGhpcy54cmVmLmdldE5ld1BlcnNpc3RlbnRSZWYoZSl9Z2V0IHJlc291cmNlcygpe2NvbnN0IGU9bmV3IHIuRGljdCh0aGlzLnhyZWYpLHQ9bmV3IHIuRGljdCh0aGlzLnhyZWYpO3Quc2V0KHRoaXMuZm9udE5hbWUubmFtZSx0aGlzLmJhc2VGb250UmVmKTtlLnNldCgiRm9udCIsdCk7cmV0dXJuIGV9X2NyZWF0ZUNvbnRleHQoKXt0aGlzLndpZHRocz1uZXcgTWFwO3RoaXMuY3R4TWVhc3VyZS5mb250PWAxMDAwcHggJHt0aGlzLmZvbnRGYW1pbHl9YDtyZXR1cm4gdGhpcy5jdHhNZWFzdXJlfWNyZWF0ZUZvbnRSZXNvdXJjZXMoZSl7Y29uc3QgdD10aGlzLl9jcmVhdGVDb250ZXh0KCk7Zm9yKGNvbnN0IGEgb2YgZS5zcGxpdCgvXHJcbj98XG4vKSlmb3IoY29uc3QgZSBvZiBhLnNwbGl0KCIiKSl7Y29uc3QgYT1lLmNoYXJDb2RlQXQoMCk7aWYodGhpcy53aWR0aHMuaGFzKGEpKWNvbnRpbnVlO2NvbnN0IHI9dC5tZWFzdXJlVGV4dChlKSxuPU1hdGguY2VpbChyLndpZHRoKTt0aGlzLndpZHRocy5zZXQoYSxuKTt0aGlzLmZpcnN0Q2hhcj1NYXRoLm1pbihhLHRoaXMuZmlyc3RDaGFyKTt0aGlzLmxhc3RDaGFyPU1hdGgubWF4KGEsdGhpcy5sYXN0Q2hhcil9cmV0dXJuIHRoaXMucmVzb3VyY2VzfWNyZWF0ZUFwcGVhcmFuY2UoZSx0LGEscyxvLGMpe2NvbnN0IGw9dGhpcy5fY3JlYXRlQ29udGV4dCgpLHU9W107bGV0IGQ9LTEvMDtmb3IoY29uc3QgdCBvZiBlLnNwbGl0KC9cclxuP3xcbi8pKXt1LnB1c2godCk7Y29uc3QgZT1sLm1lYXN1cmVUZXh0KHQpLndpZHRoO2Q9TWF0aC5tYXgoZCxlKTtmb3IoY29uc3QgZSBvZiB0LnNwbGl0KCIiKSl7Y29uc3QgdD1lLmNoYXJDb2RlQXQoMCk7bGV0IGE9dGhpcy53aWR0aHMuZ2V0KHQpO2lmKHZvaWQgMD09PWEpe2NvbnN0IHI9bC5tZWFzdXJlVGV4dChlKTthPU1hdGguY2VpbChyLndpZHRoKTt0aGlzLndpZHRocy5zZXQodCxhKTt0aGlzLmZpcnN0Q2hhcj1NYXRoLm1pbih0LHRoaXMuZmlyc3RDaGFyKTt0aGlzLmxhc3RDaGFyPU1hdGgubWF4KHQsdGhpcy5sYXN0Q2hhcil9fX1kKj1zLzFlMztjb25zdFtmLGcscCxtXT10O2xldCBiPXAtZix5PW0tZzthJTE4MCE9MCYmKFtiLHldPVt5LGJdKTtsZXQgdz0xO2Q+YiYmKHc9Yi9kKTtsZXQgUz0xO2NvbnN0IHg9aS5MSU5FX0ZBQ1RPUipzLEM9aS5MSU5FX0RFU0NFTlRfRkFDVE9SKnMsaz14KnUubGVuZ3RoO2s+eSYmKFM9eS9rKTtjb25zdCB2PXMqTWF0aC5taW4odyxTKSxGPVsicSIsYDAgMCAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKGIpfSAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKHkpfSByZSBXIG5gLCJCVCIsYDEgMCAwIDEgMCAkeygwLG4ubnVtYmVyVG9TdHJpbmcpKHkrQyl9IFRtIDAgVGMgJHtnZXRQZGZDb2xvcihvLCEwKX1gLGAvJHt0aGlzLmZvbnROYW1lLm5hbWV9ICR7KDAsbi5udW1iZXJUb1N0cmluZykodil9IFRmYF0se3Jlc291cmNlczpPfT10aGlzO2lmKDEhPT0oYz0ibnVtYmVyIj09dHlwZW9mIGMmJmM+PTAmJmM8PTE/YzoxKSl7Ri5wdXNoKCIvUjAgZ3MiKTtjb25zdCBlPW5ldyByLkRpY3QodGhpcy54cmVmKSx0PW5ldyByLkRpY3QodGhpcy54cmVmKTt0LnNldCgiY2EiLGMpO3Quc2V0KCJDQSIsYyk7dC5zZXQoIlR5cGUiLHIuTmFtZS5nZXQoIkV4dEdTdGF0ZSIpKTtlLnNldCgiUjAiLHQpO08uc2V0KCJFeHRHU3RhdGUiLGUpfWNvbnN0IFQ9KDAsbi5udW1iZXJUb1N0cmluZykoeCk7Zm9yKGNvbnN0IGUgb2YgdSlGLnB1c2goYDAgLSR7VH0gVGQgPCR7KDAsbi5zdHJpbmdUb1VURjE2SGV4U3RyaW5nKShlKX0+IFRqYCk7Ri5wdXNoKCJFVCIsIlEiKTtjb25zdCBNPUYuam9pbigiXG4iKSxEPW5ldyByLkRpY3QodGhpcy54cmVmKTtELnNldCgiU3VidHlwZSIsci5OYW1lLmdldCgiRm9ybSIpKTtELnNldCgiVHlwZSIsci5OYW1lLmdldCgiWE9iamVjdCIpKTtELnNldCgiQkJveCIsWzAsMCxiLHldKTtELnNldCgiTGVuZ3RoIixNLmxlbmd0aCk7RC5zZXQoIlJlc291cmNlcyIsTyk7aWYoYSl7Y29uc3QgZT0oMCxuLmdldFJvdGF0aW9uTWF0cml4KShhLGIseSk7RC5zZXQoIk1hdHJpeCIsZSl9Y29uc3QgRT1uZXcgaC5TdHJpbmdTdHJlYW0oTSk7RS5kaWN0PUQ7cmV0dXJuIEV9fXQuRmFrZVVuaWNvZGVGb250PUZha2VVbmljb2RlRm9udH0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkNvbG9yU3BhY2U9dm9pZCAwO3ZhciByPWEoMiksbj1hKDQpLGk9YSg1KSxzPWEoMyk7Y2xhc3MgQ29sb3JTcGFjZXtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuY29uc3RydWN0b3I9PT1Db2xvclNwYWNlJiYoMCxyLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgQ29sb3JTcGFjZS4iKTt0aGlzLm5hbWU9ZTt0aGlzLm51bUNvbXBzPXR9Z2V0UmdiKGUsdCl7Y29uc3QgYT1uZXcgVWludDhDbGFtcGVkQXJyYXkoMyk7dGhpcy5nZXRSZ2JJdGVtKGUsdCxhLDApO3JldHVybiBhfWdldFJnYkl0ZW0oZSx0LGEsbil7KDAsci51bnJlYWNoYWJsZSkoIlNob3VsZCBub3QgY2FsbCBDb2xvclNwYWNlLmdldFJnYkl0ZW0iKX1nZXRSZ2JCdWZmZXIoZSx0LGEsbixpLHMsbyl7KDAsci51bnJlYWNoYWJsZSkoIlNob3VsZCBub3QgY2FsbCBDb2xvclNwYWNlLmdldFJnYkJ1ZmZlciIpfWdldE91dHB1dExlbmd0aChlLHQpeygwLHIudW5yZWFjaGFibGUpKCJTaG91bGQgbm90IGNhbGwgQ29sb3JTcGFjZS5nZXRPdXRwdXRMZW5ndGgiKX1pc1Bhc3N0aHJvdWdoKGUpe3JldHVybiExfWlzRGVmYXVsdERlY29kZShlLHQpe3JldHVybiBDb2xvclNwYWNlLmlzRGVmYXVsdERlY29kZShlLHRoaXMubnVtQ29tcHMpfWZpbGxSZ2IoZSx0LGEscixuLGkscyxvLGMpe2NvbnN0IGw9dCphO2xldCBoPW51bGw7Y29uc3QgdT0xPDxzLGQ9YSE9PW58fHQhPT1yO2lmKHRoaXMuaXNQYXNzdGhyb3VnaChzKSloPW87ZWxzZSBpZigxPT09dGhpcy5udW1Db21wcyYmbD51JiYiRGV2aWNlR3JheSIhPT10aGlzLm5hbWUmJiJEZXZpY2VSR0IiIT09dGhpcy5uYW1lKXtjb25zdCB0PXM8PTg/bmV3IFVpbnQ4QXJyYXkodSk6bmV3IFVpbnQxNkFycmF5KHUpO2ZvcihsZXQgZT0wO2U8dTtlKyspdFtlXT1lO2NvbnN0IGE9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDMqdSk7dGhpcy5nZXRSZ2JCdWZmZXIodCwwLHUsYSwwLHMsMCk7aWYoZCl7aD1uZXcgVWludDhBcnJheSgzKmwpO2xldCBlPTA7Zm9yKGxldCB0PTA7dDxsOysrdCl7Y29uc3Qgcj0zKm9bdF07aFtlKytdPWFbcl07aFtlKytdPWFbcisxXTtoW2UrK109YVtyKzJdfX1lbHNle2xldCB0PTA7Zm9yKGxldCByPTA7cjxsOysrcil7Y29uc3Qgbj0zKm9bcl07ZVt0KytdPWFbbl07ZVt0KytdPWFbbisxXTtlW3QrK109YVtuKzJdO3QrPWN9fX1lbHNlIGlmKGQpe2g9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KDMqbCk7dGhpcy5nZXRSZ2JCdWZmZXIobywwLGwsaCwwLHMsMCl9ZWxzZSB0aGlzLmdldFJnYkJ1ZmZlcihvLDAscippLGUsMCxzLGMpO2lmKGgpaWYoZCkhZnVuY3Rpb24gcmVzaXplUmdiSW1hZ2UoZSx0LGEscixuLGkscyl7cz0xIT09cz8wOnM7Y29uc3Qgbz1hL24sYz1yL2k7bGV0IGwsaD0wO2NvbnN0IHU9bmV3IFVpbnQxNkFycmF5KG4pLGQ9MyphO2ZvcihsZXQgZT0wO2U8bjtlKyspdVtlXT0zKk1hdGguZmxvb3IoZSpvKTtmb3IobGV0IGE9MDthPGk7YSsrKXtjb25zdCByPU1hdGguZmxvb3IoYSpjKSpkO2ZvcihsZXQgYT0wO2E8bjthKyspe2w9cit1W2FdO3RbaCsrXT1lW2wrK107dFtoKytdPWVbbCsrXTt0W2grK109ZVtsKytdO2grPXN9fX0oaCxlLHQsYSxyLG4sYyk7ZWxzZXtsZXQgdD0wLGE9MDtmb3IobGV0IG49MCxzPXIqaTtuPHM7bisrKXtlW3QrK109aFthKytdO2VbdCsrXT1oW2ErK107ZVt0KytdPWhbYSsrXTt0Kz1jfX19Z2V0IHVzZXNaZXJvVG9PbmVSYW5nZSgpe3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJ1c2VzWmVyb1RvT25lUmFuZ2UiLCEwKX1zdGF0aWMgX2NhY2hlKGUsdCxhLHIpe2lmKCFhKXRocm93IG5ldyBFcnJvcignQ29sb3JTcGFjZS5fY2FjaGUgLSBleHBlY3RlZCAibG9jYWxDb2xvclNwYWNlQ2FjaGUiIGFyZ3VtZW50LicpO2lmKCFyKXRocm93IG5ldyBFcnJvcignQ29sb3JTcGFjZS5fY2FjaGUgLSBleHBlY3RlZCAicGFyc2VkQ29sb3JTcGFjZSIgYXJndW1lbnQuJyk7bGV0IGkscztpZihlIGluc3RhbmNlb2Ygbi5SZWYpe3M9ZTtlPXQuZmV0Y2goZSl9ZSBpbnN0YW5jZW9mIG4uTmFtZSYmKGk9ZS5uYW1lKTsoaXx8cykmJmEuc2V0KGkscyxyKX1zdGF0aWMgZ2V0Q2FjaGVkKGUsdCxhKXtpZighYSl0aHJvdyBuZXcgRXJyb3IoJ0NvbG9yU3BhY2UuZ2V0Q2FjaGVkIC0gZXhwZWN0ZWQgImxvY2FsQ29sb3JTcGFjZUNhY2hlIiBhcmd1bWVudC4nKTtpZihlIGluc3RhbmNlb2Ygbi5SZWYpe2NvbnN0IHI9YS5nZXRCeVJlZihlKTtpZihyKXJldHVybiByO3RyeXtlPXQuZmV0Y2goZSl9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIHMuTWlzc2luZ0RhdGFFeGNlcHRpb24pdGhyb3cgZX19aWYoZSBpbnN0YW5jZW9mIG4uTmFtZSl7Y29uc3QgdD1hLmdldEJ5TmFtZShlLm5hbWUpO2lmKHQpcmV0dXJuIHR9cmV0dXJuIG51bGx9c3RhdGljIGFzeW5jIHBhcnNlQXN5bmMoe2NzOmUseHJlZjp0LHJlc291cmNlczphPW51bGwscGRmRnVuY3Rpb25GYWN0b3J5OnIsbG9jYWxDb2xvclNwYWNlQ2FjaGU6bn0pe2NvbnN0IGk9dGhpcy5fcGFyc2UoZSx0LGEscik7dGhpcy5fY2FjaGUoZSx0LG4saSk7cmV0dXJuIGl9c3RhdGljIHBhcnNlKHtjczplLHhyZWY6dCxyZXNvdXJjZXM6YT1udWxsLHBkZkZ1bmN0aW9uRmFjdG9yeTpyLGxvY2FsQ29sb3JTcGFjZUNhY2hlOm59KXtjb25zdCBpPXRoaXMuZ2V0Q2FjaGVkKGUsdCxuKTtpZihpKXJldHVybiBpO2NvbnN0IHM9dGhpcy5fcGFyc2UoZSx0LGEscik7dGhpcy5fY2FjaGUoZSx0LG4scyk7cmV0dXJuIHN9c3RhdGljIF9wYXJzZShlLHQsYT1udWxsLGkpe2lmKChlPXQuZmV0Y2hJZlJlZihlKSlpbnN0YW5jZW9mIG4uTmFtZSlzd2l0Y2goZS5uYW1lKXtjYXNlIkciOmNhc2UiRGV2aWNlR3JheSI6cmV0dXJuIHRoaXMuc2luZ2xldG9ucy5ncmF5O2Nhc2UiUkdCIjpjYXNlIkRldmljZVJHQiI6cmV0dXJuIHRoaXMuc2luZ2xldG9ucy5yZ2I7Y2FzZSJDTVlLIjpjYXNlIkRldmljZUNNWUsiOnJldHVybiB0aGlzLnNpbmdsZXRvbnMuY215aztjYXNlIlBhdHRlcm4iOnJldHVybiBuZXcgUGF0dGVybkNTKG51bGwpO2RlZmF1bHQ6aWYoYSBpbnN0YW5jZW9mIG4uRGljdCl7Y29uc3Qgcj1hLmdldCgiQ29sb3JTcGFjZSIpO2lmKHIgaW5zdGFuY2VvZiBuLkRpY3Qpe2NvbnN0IHM9ci5nZXQoZS5uYW1lKTtpZihzKXtpZihzIGluc3RhbmNlb2Ygbi5OYW1lKXJldHVybiB0aGlzLl9wYXJzZShzLHQsYSxpKTtlPXM7YnJlYWt9fX10aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgVW5yZWNvZ25pemVkIENvbG9yU3BhY2U6ICR7ZS5uYW1lfWApfWlmKEFycmF5LmlzQXJyYXkoZSkpe2NvbnN0IG49dC5mZXRjaElmUmVmKGVbMF0pLm5hbWU7bGV0IHMsbyxjLGwsaCx1O3N3aXRjaChuKXtjYXNlIkciOmNhc2UiRGV2aWNlR3JheSI6cmV0dXJuIHRoaXMuc2luZ2xldG9ucy5ncmF5O2Nhc2UiUkdCIjpjYXNlIkRldmljZVJHQiI6cmV0dXJuIHRoaXMuc2luZ2xldG9ucy5yZ2I7Y2FzZSJDTVlLIjpjYXNlIkRldmljZUNNWUsiOnJldHVybiB0aGlzLnNpbmdsZXRvbnMuY215aztjYXNlIkNhbEdyYXkiOnM9dC5mZXRjaElmUmVmKGVbMV0pO2w9cy5nZXRBcnJheSgiV2hpdGVQb2ludCIpO2g9cy5nZXRBcnJheSgiQmxhY2tQb2ludCIpO3U9cy5nZXQoIkdhbW1hIik7cmV0dXJuIG5ldyBDYWxHcmF5Q1MobCxoLHUpO2Nhc2UiQ2FsUkdCIjpzPXQuZmV0Y2hJZlJlZihlWzFdKTtsPXMuZ2V0QXJyYXkoIldoaXRlUG9pbnQiKTtoPXMuZ2V0QXJyYXkoIkJsYWNrUG9pbnQiKTt1PXMuZ2V0QXJyYXkoIkdhbW1hIik7Y29uc3QgZD1zLmdldEFycmF5KCJNYXRyaXgiKTtyZXR1cm4gbmV3IENhbFJHQkNTKGwsaCx1LGQpO2Nhc2UiSUNDQmFzZWQiOmNvbnN0IGY9dC5mZXRjaElmUmVmKGVbMV0pLmRpY3Q7bz1mLmdldCgiTiIpO2NvbnN0IGc9Zi5nZXQoIkFsdGVybmF0ZSIpO2lmKGcpe2NvbnN0IGU9dGhpcy5fcGFyc2UoZyx0LGEsaSk7aWYoZS5udW1Db21wcz09PW8pcmV0dXJuIGU7KDAsci53YXJuKSgiSUNDQmFzZWQgY29sb3Igc3BhY2U6IElnbm9yaW5nIGluY29ycmVjdCAvQWx0ZXJuYXRlIGVudHJ5LiIpfWlmKDE9PT1vKXJldHVybiB0aGlzLnNpbmdsZXRvbnMuZ3JheTtpZigzPT09bylyZXR1cm4gdGhpcy5zaW5nbGV0b25zLnJnYjtpZig0PT09bylyZXR1cm4gdGhpcy5zaW5nbGV0b25zLmNteWs7YnJlYWs7Y2FzZSJQYXR0ZXJuIjpjPWVbMV18fG51bGw7YyYmKGM9dGhpcy5fcGFyc2UoYyx0LGEsaSkpO3JldHVybiBuZXcgUGF0dGVybkNTKGMpO2Nhc2UiSSI6Y2FzZSJJbmRleGVkIjpjPXRoaXMuX3BhcnNlKGVbMV0sdCxhLGkpO2NvbnN0IHA9dC5mZXRjaElmUmVmKGVbMl0pKzEsbT10LmZldGNoSWZSZWYoZVszXSk7cmV0dXJuIG5ldyBJbmRleGVkQ1MoYyxwLG0pO2Nhc2UiU2VwYXJhdGlvbiI6Y2FzZSJEZXZpY2VOIjpjb25zdCBiPXQuZmV0Y2hJZlJlZihlWzFdKTtvPUFycmF5LmlzQXJyYXkoYik/Yi5sZW5ndGg6MTtjPXRoaXMuX3BhcnNlKGVbMl0sdCxhLGkpO2NvbnN0IHk9aS5jcmVhdGUoZVszXSk7cmV0dXJuIG5ldyBBbHRlcm5hdGVDUyhvLGMseSk7Y2FzZSJMYWIiOnM9dC5mZXRjaElmUmVmKGVbMV0pO2w9cy5nZXRBcnJheSgiV2hpdGVQb2ludCIpO2g9cy5nZXRBcnJheSgiQmxhY2tQb2ludCIpO2NvbnN0IHc9cy5nZXRBcnJheSgiUmFuZ2UiKTtyZXR1cm4gbmV3IExhYkNTKGwsaCx3KTtkZWZhdWx0OnRocm93IG5ldyByLkZvcm1hdEVycm9yKGBVbmltcGxlbWVudGVkIENvbG9yU3BhY2Ugb2JqZWN0OiAke259YCl9fXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBVbnJlY29nbml6ZWQgQ29sb3JTcGFjZSBvYmplY3Q6ICR7ZX1gKX1zdGF0aWMgaXNEZWZhdWx0RGVjb2RlKGUsdCl7aWYoIUFycmF5LmlzQXJyYXkoZSkpcmV0dXJuITA7aWYoMip0IT09ZS5sZW5ndGgpeygwLHIud2FybikoIlRoZSBkZWNvZGUgbWFwIGlzIG5vdCB0aGUgY29ycmVjdCBsZW5ndGgiKTtyZXR1cm4hMH1mb3IobGV0IHQ9MCxhPWUubGVuZ3RoO3Q8YTt0Kz0yKWlmKDAhPT1lW3RdfHwxIT09ZVt0KzFdKXJldHVybiExO3JldHVybiEwfXN0YXRpYyBnZXQgc2luZ2xldG9ucygpe3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJzaW5nbGV0b25zIix7Z2V0IGdyYXkoKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiZ3JheSIsbmV3IERldmljZUdyYXlDUyl9LGdldCByZ2IoKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywicmdiIixuZXcgRGV2aWNlUmdiQ1MpfSxnZXQgY215aygpe3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJjbXlrIixuZXcgRGV2aWNlQ215a0NTKX19KX19dC5Db2xvclNwYWNlPUNvbG9yU3BhY2U7Y2xhc3MgQWx0ZXJuYXRlQ1MgZXh0ZW5kcyBDb2xvclNwYWNle2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcigiQWx0ZXJuYXRlIixlKTt0aGlzLmJhc2U9dDt0aGlzLnRpbnRGbj1hO3RoaXMudG1wQnVmPW5ldyBGbG9hdDMyQXJyYXkodC5udW1Db21wcyl9Z2V0UmdiSXRlbShlLHQsYSxyKXtjb25zdCBuPXRoaXMudG1wQnVmO3RoaXMudGludEZuKGUsdCxuLDApO3RoaXMuYmFzZS5nZXRSZ2JJdGVtKG4sMCxhLHIpfWdldFJnYkJ1ZmZlcihlLHQsYSxyLG4saSxzKXtjb25zdCBvPXRoaXMudGludEZuLGM9dGhpcy5iYXNlLGw9MS8oKDE8PGkpLTEpLGg9Yy5udW1Db21wcyx1PWMudXNlc1plcm9Ub09uZVJhbmdlLGQ9KGMuaXNQYXNzdGhyb3VnaCg4KXx8IXUpJiYwPT09cztsZXQgZj1kP246MDtjb25zdCBnPWQ/cjpuZXcgVWludDhDbGFtcGVkQXJyYXkoaCphKSxwPXRoaXMubnVtQ29tcHMsbT1uZXcgRmxvYXQzMkFycmF5KHApLGI9bmV3IEZsb2F0MzJBcnJheShoKTtsZXQgeSx3O2Zvcih5PTA7eTxhO3krKyl7Zm9yKHc9MDt3PHA7dysrKW1bd109ZVt0KytdKmw7byhtLDAsYiwwKTtpZih1KWZvcih3PTA7dzxoO3crKylnW2YrK109MjU1KmJbd107ZWxzZXtjLmdldFJnYkl0ZW0oYiwwLGcsZik7Zis9aH19ZHx8Yy5nZXRSZ2JCdWZmZXIoZywwLGEscixuLDgscyl9Z2V0T3V0cHV0TGVuZ3RoKGUsdCl7cmV0dXJuIHRoaXMuYmFzZS5nZXRPdXRwdXRMZW5ndGgoZSp0aGlzLmJhc2UubnVtQ29tcHMvdGhpcy5udW1Db21wcyx0KX19Y2xhc3MgUGF0dGVybkNTIGV4dGVuZHMgQ29sb3JTcGFjZXtjb25zdHJ1Y3RvcihlKXtzdXBlcigiUGF0dGVybiIsbnVsbCk7dGhpcy5iYXNlPWV9aXNEZWZhdWx0RGVjb2RlKGUsdCl7KDAsci51bnJlYWNoYWJsZSkoIlNob3VsZCBub3QgY2FsbCBQYXR0ZXJuQ1MuaXNEZWZhdWx0RGVjb2RlIil9fWNsYXNzIEluZGV4ZWRDUyBleHRlbmRzIENvbG9yU3BhY2V7Y29uc3RydWN0b3IoZSx0LGEpe3N1cGVyKCJJbmRleGVkIiwxKTt0aGlzLmJhc2U9ZTt0aGlzLmhpZ2hWYWw9dDtjb25zdCBuPWUubnVtQ29tcHMqdDt0aGlzLmxvb2t1cD1uZXcgVWludDhBcnJheShuKTtpZihhIGluc3RhbmNlb2YgaS5CYXNlU3RyZWFtKXtjb25zdCBlPWEuZ2V0Qnl0ZXMobik7dGhpcy5sb29rdXAuc2V0KGUpfWVsc2V7aWYoInN0cmluZyIhPXR5cGVvZiBhKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBJbmRleGVkQ1MgLSB1bnJlY29nbml6ZWQgbG9va3VwIHRhYmxlOiAke2F9YCk7Zm9yKGxldCBlPTA7ZTxuOysrZSl0aGlzLmxvb2t1cFtlXT0yNTUmYS5jaGFyQ29kZUF0KGUpfX1nZXRSZ2JJdGVtKGUsdCxhLHIpe2NvbnN0IG49dGhpcy5iYXNlLm51bUNvbXBzLGk9ZVt0XSpuO3RoaXMuYmFzZS5nZXRSZ2JCdWZmZXIodGhpcy5sb29rdXAsaSwxLGEsciw4LDApfWdldFJnYkJ1ZmZlcihlLHQsYSxyLG4saSxzKXtjb25zdCBvPXRoaXMuYmFzZSxjPW8ubnVtQ29tcHMsbD1vLmdldE91dHB1dExlbmd0aChjLHMpLGg9dGhpcy5sb29rdXA7Zm9yKGxldCBpPTA7aTxhOysraSl7Y29uc3QgYT1lW3QrK10qYztvLmdldFJnYkJ1ZmZlcihoLGEsMSxyLG4sOCxzKTtuKz1sfX1nZXRPdXRwdXRMZW5ndGgoZSx0KXtyZXR1cm4gdGhpcy5iYXNlLmdldE91dHB1dExlbmd0aChlKnRoaXMuYmFzZS5udW1Db21wcyx0KX1pc0RlZmF1bHREZWNvZGUoZSx0KXtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4hMDtpZigyIT09ZS5sZW5ndGgpeygwLHIud2FybikoIkRlY29kZSBtYXAgbGVuZ3RoIGlzIG5vdCBjb3JyZWN0Iik7cmV0dXJuITB9aWYoIU51bWJlci5pc0ludGVnZXIodCl8fHQ8MSl7KDAsci53YXJuKSgiQml0cyBwZXIgY29tcG9uZW50IGlzIG5vdCBjb3JyZWN0Iik7cmV0dXJuITB9cmV0dXJuIDA9PT1lWzBdJiZlWzFdPT09KDE8PHQpLTF9fWNsYXNzIERldmljZUdyYXlDUyBleHRlbmRzIENvbG9yU3BhY2V7Y29uc3RydWN0b3IoKXtzdXBlcigiRGV2aWNlR3JheSIsMSl9Z2V0UmdiSXRlbShlLHQsYSxyKXtjb25zdCBuPTI1NSplW3RdO2Fbcl09YVtyKzFdPWFbcisyXT1ufWdldFJnYkJ1ZmZlcihlLHQsYSxyLG4saSxzKXtjb25zdCBvPTI1NS8oKDE8PGkpLTEpO2xldCBjPXQsbD1uO2ZvcihsZXQgdD0wO3Q8YTsrK3Qpe2NvbnN0IHQ9byplW2MrK107cltsKytdPXQ7cltsKytdPXQ7cltsKytdPXQ7bCs9c319Z2V0T3V0cHV0TGVuZ3RoKGUsdCl7cmV0dXJuIGUqKDMrdCl9fWNsYXNzIERldmljZVJnYkNTIGV4dGVuZHMgQ29sb3JTcGFjZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCJEZXZpY2VSR0IiLDMpfWdldFJnYkl0ZW0oZSx0LGEscil7YVtyXT0yNTUqZVt0XTthW3IrMV09MjU1KmVbdCsxXTthW3IrMl09MjU1KmVbdCsyXX1nZXRSZ2JCdWZmZXIoZSx0LGEscixuLGkscyl7aWYoOD09PWkmJjA9PT1zKXtyLnNldChlLnN1YmFycmF5KHQsdCszKmEpLG4pO3JldHVybn1jb25zdCBvPTI1NS8oKDE8PGkpLTEpO2xldCBjPXQsbD1uO2ZvcihsZXQgdD0wO3Q8YTsrK3Qpe3JbbCsrXT1vKmVbYysrXTtyW2wrK109byplW2MrK107cltsKytdPW8qZVtjKytdO2wrPXN9fWdldE91dHB1dExlbmd0aChlLHQpe3JldHVybiBlKigzK3QpLzN8MH1pc1Bhc3N0aHJvdWdoKGUpe3JldHVybiA4PT09ZX19Y2xhc3MgRGV2aWNlQ215a0NTIGV4dGVuZHMgQ29sb3JTcGFjZXtjb25zdHJ1Y3Rvcigpe3N1cGVyKCJEZXZpY2VDTVlLIiw0KX0jcihlLHQsYSxyLG4pe2NvbnN0IGk9ZVt0XSphLHM9ZVt0KzFdKmEsbz1lW3QrMl0qYSxjPWVbdCszXSphO3Jbbl09MjU1K2kqKC00LjM4NzMzMjM4NDYwOTk4OCppKzU0LjQ4NjE1MTk0MTg5MTc2KnMrMTguODIyOTA1MDIxNjUzMDIqbysyMTIuMjU2NjI0NTE2Mzk1ODUqYy0yODUuMjMzMTAyNjEzNzAwNCkrcyooMS43MTQ5NzYzNDc3MzYyMTM0KnMtNS42MDk2NzM2OTA0MDQ3MzE1Km8rLTE3Ljg3Mzg3MDg2MTQxNTQ0NCpjLTUuNDk3MDA2NDI3MTk2MzY2KStvKigtMi41MjE3MzQwMTMxNjgzMDMzKm8tMjEuMjQ4OTIzMzM3MzUzMDczKmMrMTcuNTExOTI3MDg0MTgxMykrYyooLTIxLjg2MTIyMTQ3NDYzNjA1KmMtMTg5LjQ4MTgwODM1OTIyNzQ3KTtyW24rMV09MjU1K2kqKDguODQxMDQxNDIyMDM2MTQ5KmkrNjAuMTE4MDI3MDQ1NTk3MzY2KnMrNi44NzE0MjU1OTIwNDkwMDcqbyszMS4xNTkxMDAxMzAwNTU5MjIqYy03OS4yOTcwODQ0ODE2NTQ4KStzKigtMTUuMzEwMzYxMzA2OTY3ODE3KnMrMTcuNTc1MjUxMjYxMTA5NDgyKm8rMTMxLjM1MjUwOTEyNDkzOTc2KmMtMTkwLjk0NTMzMDI1ODg5NTEpK28qKDQuNDQ0MzM5MTAyODUyNzM5Km8rOS44NjMyODYxNDkzNDA1KmMtMjQuODY3NDE1ODI1NTU4NzgpK2MqKC0yMC43MzczMjU0NzExODEwMzQqYy0xODcuODA0NTM3MDk3MTk1NzgpO3JbbisyXT0yNTUraSooLjg4NDI1MjI0MzAwMDMyOTYqaSs4LjA3ODY3NzUwMzExMjkyOCpzKzMwLjg5OTc4MzA5NzAzNzI5Km8tLjIzODgzMjM4Njg5MTc4OTM0KmMtMTQuMTgzNTc2Nzk5NjczMjg2KStzKigxMC40OTU5MzI3MzQzMjA3MipzKzYzLjAyMzc4NDk0NzU0MDUyKm8rNTAuNjA2OTU3NjU2MzYwNzM0KmMtMTEyLjIzODg0MjUzNzE5MjQ4KStvKiguMDMyOTYwNDExMTQ4NzMyMTcqbysxMTUuNjAzODQ0NDk2NDY2NDEqYy0xOTMuNTgyMDkzNTY4NjE1MDUpK2MqKC0yMi4zMzgxNjgwNzMwOTg4NipjLTE4MC4xMjYxMzk3NDcwODM2Nyl9Z2V0UmdiSXRlbShlLHQsYSxyKXt0aGlzLiNyKGUsdCwxLGEscil9Z2V0UmdiQnVmZmVyKGUsdCxhLHIsbixpLHMpe2NvbnN0IG89MS8oKDE8PGkpLTEpO2ZvcihsZXQgaT0wO2k8YTtpKyspe3RoaXMuI3IoZSx0LG8scixuKTt0Kz00O24rPTMrc319Z2V0T3V0cHV0TGVuZ3RoKGUsdCl7cmV0dXJuIGUvNCooMyt0KXwwfX1jbGFzcyBDYWxHcmF5Q1MgZXh0ZW5kcyBDb2xvclNwYWNle2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcigiQ2FsR3JheSIsMSk7aWYoIWUpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIldoaXRlUG9pbnQgbWlzc2luZyAtIHJlcXVpcmVkIGZvciBjb2xvciBzcGFjZSBDYWxHcmF5Iik7W3RoaXMuWFcsdGhpcy5ZVyx0aGlzLlpXXT1lO1t0aGlzLlhCLHRoaXMuWUIsdGhpcy5aQl09dHx8WzAsMCwwXTt0aGlzLkc9YXx8MTtpZih0aGlzLlhXPDB8fHRoaXMuWlc8MHx8MSE9PXRoaXMuWVcpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYEludmFsaWQgV2hpdGVQb2ludCBjb21wb25lbnRzIGZvciAke3RoaXMubmFtZX0sIG5vIGZhbGxiYWNrIGF2YWlsYWJsZWApO2lmKHRoaXMuWEI8MHx8dGhpcy5ZQjwwfHx0aGlzLlpCPDApeygwLHIuaW5mbykoYEludmFsaWQgQmxhY2tQb2ludCBmb3IgJHt0aGlzLm5hbWV9LCBmYWxsaW5nIGJhY2sgdG8gZGVmYXVsdC5gKTt0aGlzLlhCPXRoaXMuWUI9dGhpcy5aQj0wfTA9PT10aGlzLlhCJiYwPT09dGhpcy5ZQiYmMD09PXRoaXMuWkJ8fCgwLHIud2FybikoYCR7dGhpcy5uYW1lfSwgQmxhY2tQb2ludDogWEI6ICR7dGhpcy5YQn0sIFlCOiAke3RoaXMuWUJ9LCBaQjogJHt0aGlzLlpCfSwgb25seSBkZWZhdWx0IHZhbHVlcyBhcmUgc3VwcG9ydGVkLmApO2lmKHRoaXMuRzwxKXsoMCxyLmluZm8pKGBJbnZhbGlkIEdhbW1hOiAke3RoaXMuR30gZm9yICR7dGhpcy5uYW1lfSwgZmFsbGluZyBiYWNrIHRvIGRlZmF1bHQuYCk7dGhpcy5HPTF9fSNyKGUsdCxhLHIsbil7Y29uc3QgaT0oZVt0XSpuKSoqdGhpcy5HLHM9dGhpcy5ZVyppLG89TWF0aC5tYXgoMjk1LjgqcyoqLjMzMzMzMzMzMzMzMzMzMzMtNDAuOCwwKTthW3JdPW87YVtyKzFdPW87YVtyKzJdPW99Z2V0UmdiSXRlbShlLHQsYSxyKXt0aGlzLiNyKGUsdCxhLHIsMSl9Z2V0UmdiQnVmZmVyKGUsdCxhLHIsbixpLHMpe2NvbnN0IG89MS8oKDE8PGkpLTEpO2ZvcihsZXQgaT0wO2k8YTsrK2kpe3RoaXMuI3IoZSx0LHIsbixvKTt0Kz0xO24rPTMrc319Z2V0T3V0cHV0TGVuZ3RoKGUsdCl7cmV0dXJuIGUqKDMrdCl9fWNsYXNzIENhbFJHQkNTIGV4dGVuZHMgQ29sb3JTcGFjZXtzdGF0aWMjbj1uZXcgRmxvYXQzMkFycmF5KFsuODk1MSwuMjY2NCwtLjE2MTQsLS43NTAyLDEuNzEzNSwuMDM2NywuMDM4OSwtLjA2ODUsMS4wMjk2XSk7c3RhdGljI2k9bmV3IEZsb2F0MzJBcnJheShbLjk4Njk5MjksLS4xNDcwNTQzLC4xNTk5NjI3LC40MzIzMDUzLC41MTgzNjAzLC4wNDkyOTEyLC0uMDA4NTI4NywuMDQwMDQyOCwuOTY4NDg2N10pO3N0YXRpYyNzPW5ldyBGbG9hdDMyQXJyYXkoWzMuMjQwNDU0MiwtMS41MzcxMzg1LC0uNDk4NTMxNCwtLjk2OTI2NiwxLjg3NjAxMDgsLjA0MTU1NiwuMDU1NjQzNCwtLjIwNDAyNTksMS4wNTcyMjUyXSk7c3RhdGljI289bmV3IEZsb2F0MzJBcnJheShbMSwxLDFdKTtzdGF0aWMjYz1uZXcgRmxvYXQzMkFycmF5KDMpO3N0YXRpYyNsPW5ldyBGbG9hdDMyQXJyYXkoMyk7c3RhdGljI2g9bmV3IEZsb2F0MzJBcnJheSgzKTtzdGF0aWMjdT0oMjQvMTE2KSoqMy84O2NvbnN0cnVjdG9yKGUsdCxhLG4pe3N1cGVyKCJDYWxSR0IiLDMpO2lmKCFlKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJXaGl0ZVBvaW50IG1pc3NpbmcgLSByZXF1aXJlZCBmb3IgY29sb3Igc3BhY2UgQ2FsUkdCIik7Y29uc3RbaSxzLG9dPXRoaXMud2hpdGVQb2ludD1lLFtjLGwsaF09dGhpcy5ibGFja1BvaW50PXR8fG5ldyBGbG9hdDMyQXJyYXkoMyk7W3RoaXMuR1IsdGhpcy5HRyx0aGlzLkdCXT1hfHxuZXcgRmxvYXQzMkFycmF5KFsxLDEsMV0pO1t0aGlzLk1YQSx0aGlzLk1ZQSx0aGlzLk1aQSx0aGlzLk1YQix0aGlzLk1ZQix0aGlzLk1aQix0aGlzLk1YQyx0aGlzLk1ZQyx0aGlzLk1aQ109bnx8bmV3IEZsb2F0MzJBcnJheShbMSwwLDAsMCwxLDAsMCwwLDFdKTtpZihpPDB8fG88MHx8MSE9PXMpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYEludmFsaWQgV2hpdGVQb2ludCBjb21wb25lbnRzIGZvciAke3RoaXMubmFtZX0sIG5vIGZhbGxiYWNrIGF2YWlsYWJsZWApO2lmKGM8MHx8bDwwfHxoPDApeygwLHIuaW5mbykoYEludmFsaWQgQmxhY2tQb2ludCBmb3IgJHt0aGlzLm5hbWV9IFske2N9LCAke2x9LCAke2h9XSwgZmFsbGluZyBiYWNrIHRvIGRlZmF1bHQuYCk7dGhpcy5ibGFja1BvaW50PW5ldyBGbG9hdDMyQXJyYXkoMyl9aWYodGhpcy5HUjwwfHx0aGlzLkdHPDB8fHRoaXMuR0I8MCl7KDAsci5pbmZvKShgSW52YWxpZCBHYW1tYSBbJHt0aGlzLkdSfSwgJHt0aGlzLkdHfSwgJHt0aGlzLkdCfV0gZm9yICR7dGhpcy5uYW1lfSwgZmFsbGluZyBiYWNrIHRvIGRlZmF1bHQuYCk7dGhpcy5HUj10aGlzLkdHPXRoaXMuR0I9MX19I2QoZSx0LGEpe2FbMF09ZVswXSp0WzBdK2VbMV0qdFsxXStlWzJdKnRbMl07YVsxXT1lWzNdKnRbMF0rZVs0XSp0WzFdK2VbNV0qdFsyXTthWzJdPWVbNl0qdFswXStlWzddKnRbMV0rZVs4XSp0WzJdfSNmKGUsdCxhKXthWzBdPTEqdFswXS9lWzBdO2FbMV09MSp0WzFdL2VbMV07YVsyXT0xKnRbMl0vZVsyXX0jZyhlLHQsYSl7YVswXT0uOTUwNDcqdFswXS9lWzBdO2FbMV09MSp0WzFdL2VbMV07YVsyXT0xLjA4ODgzKnRbMl0vZVsyXX0jcChlKXtyZXR1cm4gZTw9LjAwMzEzMDg/dGhpcy4jbSgwLDEsMTIuOTIqZSk6ZT49Ljk5NTU0NTI1PzE6dGhpcy4jbSgwLDEsMS4wNTUqZSoqKDEvMi40KS0uMDU1KX0jbShlLHQsYSl7cmV0dXJuIE1hdGgubWF4KGUsTWF0aC5taW4odCxhKSl9I2IoZSl7cmV0dXJuIGU8MD8tdGhpcy4jYigtZSk6ZT44PygoZSsxNikvMTE2KSoqMzplKkNhbFJHQkNTLiN1fSN5KGUsdCxhKXtpZigwPT09ZVswXSYmMD09PWVbMV0mJjA9PT1lWzJdKXthWzBdPXRbMF07YVsxXT10WzFdO2FbMl09dFsyXTtyZXR1cm59Y29uc3Qgcj10aGlzLiNiKDApLG49KDEtcikvKDEtdGhpcy4jYihlWzBdKSksaT0xLW4scz0oMS1yKS8oMS10aGlzLiNiKGVbMV0pKSxvPTEtcyxjPSgxLXIpLygxLXRoaXMuI2IoZVsyXSkpLGw9MS1jO2FbMF09dFswXSpuK2k7YVsxXT10WzFdKnMrbzthWzJdPXRbMl0qYytsfSN3KGUsdCxhKXtpZigxPT09ZVswXSYmMT09PWVbMl0pe2FbMF09dFswXTthWzFdPXRbMV07YVsyXT10WzJdO3JldHVybn1jb25zdCByPWE7dGhpcy4jZChDYWxSR0JDUy4jbix0LHIpO2NvbnN0IG49Q2FsUkdCQ1MuI2M7dGhpcy4jZihlLHIsbik7dGhpcy4jZChDYWxSR0JDUy4jaSxuLGEpfSNTKGUsdCxhKXtjb25zdCByPWE7dGhpcy4jZChDYWxSR0JDUy4jbix0LHIpO2NvbnN0IG49Q2FsUkdCQ1MuI2M7dGhpcy4jZyhlLHIsbik7dGhpcy4jZChDYWxSR0JDUy4jaSxuLGEpfSNyKGUsdCxhLHIsbil7Y29uc3QgaT10aGlzLiNtKDAsMSxlW3RdKm4pLHM9dGhpcy4jbSgwLDEsZVt0KzFdKm4pLG89dGhpcy4jbSgwLDEsZVt0KzJdKm4pLGM9MT09PWk/MTppKip0aGlzLkdSLGw9MT09PXM/MTpzKip0aGlzLkdHLGg9MT09PW8/MTpvKip0aGlzLkdCLHU9dGhpcy5NWEEqYyt0aGlzLk1YQipsK3RoaXMuTVhDKmgsZD10aGlzLk1ZQSpjK3RoaXMuTVlCKmwrdGhpcy5NWUMqaCxmPXRoaXMuTVpBKmMrdGhpcy5NWkIqbCt0aGlzLk1aQypoLGc9Q2FsUkdCQ1MuI2w7Z1swXT11O2dbMV09ZDtnWzJdPWY7Y29uc3QgcD1DYWxSR0JDUy4jaDt0aGlzLiN3KHRoaXMud2hpdGVQb2ludCxnLHApO2NvbnN0IG09Q2FsUkdCQ1MuI2w7dGhpcy4jeSh0aGlzLmJsYWNrUG9pbnQscCxtKTtjb25zdCBiPUNhbFJHQkNTLiNoO3RoaXMuI1MoQ2FsUkdCQ1MuI28sbSxiKTtjb25zdCB5PUNhbFJHQkNTLiNsO3RoaXMuI2QoQ2FsUkdCQ1MuI3MsYix5KTthW3JdPTI1NSp0aGlzLiNwKHlbMF0pO2FbcisxXT0yNTUqdGhpcy4jcCh5WzFdKTthW3IrMl09MjU1KnRoaXMuI3AoeVsyXSl9Z2V0UmdiSXRlbShlLHQsYSxyKXt0aGlzLiNyKGUsdCxhLHIsMSl9Z2V0UmdiQnVmZmVyKGUsdCxhLHIsbixpLHMpe2NvbnN0IG89MS8oKDE8PGkpLTEpO2ZvcihsZXQgaT0wO2k8YTsrK2kpe3RoaXMuI3IoZSx0LHIsbixvKTt0Kz0zO24rPTMrc319Z2V0T3V0cHV0TGVuZ3RoKGUsdCl7cmV0dXJuIGUqKDMrdCkvM3wwfX1jbGFzcyBMYWJDUyBleHRlbmRzIENvbG9yU3BhY2V7Y29uc3RydWN0b3IoZSx0LGEpe3N1cGVyKCJMYWIiLDMpO2lmKCFlKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJXaGl0ZVBvaW50IG1pc3NpbmcgLSByZXF1aXJlZCBmb3IgY29sb3Igc3BhY2UgTGFiIik7W3RoaXMuWFcsdGhpcy5ZVyx0aGlzLlpXXT1lO1t0aGlzLmFtaW4sdGhpcy5hbWF4LHRoaXMuYm1pbix0aGlzLmJtYXhdPWF8fFstMTAwLDEwMCwtMTAwLDEwMF07W3RoaXMuWEIsdGhpcy5ZQix0aGlzLlpCXT10fHxbMCwwLDBdO2lmKHRoaXMuWFc8MHx8dGhpcy5aVzwwfHwxIT09dGhpcy5ZVyl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiSW52YWxpZCBXaGl0ZVBvaW50IGNvbXBvbmVudHMsIG5vIGZhbGxiYWNrIGF2YWlsYWJsZSIpO2lmKHRoaXMuWEI8MHx8dGhpcy5ZQjwwfHx0aGlzLlpCPDApeygwLHIuaW5mbykoIkludmFsaWQgQmxhY2tQb2ludCwgZmFsbGluZyBiYWNrIHRvIGRlZmF1bHQiKTt0aGlzLlhCPXRoaXMuWUI9dGhpcy5aQj0wfWlmKHRoaXMuYW1pbj50aGlzLmFtYXh8fHRoaXMuYm1pbj50aGlzLmJtYXgpeygwLHIuaW5mbykoIkludmFsaWQgUmFuZ2UsIGZhbGxpbmcgYmFjayB0byBkZWZhdWx0cyIpO3RoaXMuYW1pbj0tMTAwO3RoaXMuYW1heD0xMDA7dGhpcy5ibWluPS0xMDA7dGhpcy5ibWF4PTEwMH19I3goZSl7cmV0dXJuIGU+PTYvMjk/ZSoqMzoxMDgvODQxKihlLTQvMjkpfSNBKGUsdCxhLHIpe3JldHVybiBhK2UqKHItYSkvdH0jcihlLHQsYSxyLG4pe2xldCBpPWVbdF0scz1lW3QrMV0sbz1lW3QrMl07aWYoITEhPT1hKXtpPXRoaXMuI0EoaSxhLDAsMTAwKTtzPXRoaXMuI0EocyxhLHRoaXMuYW1pbix0aGlzLmFtYXgpO289dGhpcy4jQShvLGEsdGhpcy5ibWluLHRoaXMuYm1heCl9cz50aGlzLmFtYXg/cz10aGlzLmFtYXg6czx0aGlzLmFtaW4mJihzPXRoaXMuYW1pbik7bz50aGlzLmJtYXg/bz10aGlzLmJtYXg6bzx0aGlzLmJtaW4mJihvPXRoaXMuYm1pbik7Y29uc3QgYz0oaSsxNikvMTE2LGw9YytzLzUwMCxoPWMtby8yMDAsdT10aGlzLlhXKnRoaXMuI3gobCksZD10aGlzLllXKnRoaXMuI3goYyksZj10aGlzLlpXKnRoaXMuI3goaCk7bGV0IGcscCxtO2lmKHRoaXMuWlc8MSl7Zz0zLjEzMzkqdSstMS42MTcqZCstLjQ5MDYqZjtwPS0uOTc4NSp1KzEuOTE2KmQrLjAzMzMqZjttPS4wNzIqdSstLjIyOSpkKzEuNDA1NypmfWVsc2V7Zz0zLjI0MDYqdSstMS41MzcyKmQrLS40OTg2KmY7cD0tLjk2ODkqdSsxLjg3NTgqZCsuMDQxNSpmO209LjA1NTcqdSstLjIwNCpkKzEuMDU3KmZ9cltuXT0yNTUqTWF0aC5zcXJ0KGcpO3JbbisxXT0yNTUqTWF0aC5zcXJ0KHApO3JbbisyXT0yNTUqTWF0aC5zcXJ0KG0pfWdldFJnYkl0ZW0oZSx0LGEscil7dGhpcy4jcihlLHQsITEsYSxyKX1nZXRSZ2JCdWZmZXIoZSx0LGEscixuLGkscyl7Y29uc3Qgbz0oMTw8aSktMTtmb3IobGV0IGk9MDtpPGE7aSsrKXt0aGlzLiNyKGUsdCxvLHIsbik7dCs9MztuKz0zK3N9fWdldE91dHB1dExlbmd0aChlLHQpe3JldHVybiBlKigzK3QpLzN8MH1pc0RlZmF1bHREZWNvZGUoZSx0KXtyZXR1cm4hMH1nZXQgdXNlc1plcm9Ub09uZVJhbmdlKCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsInVzZXNaZXJvVG9PbmVSYW5nZSIsITEpfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5QYXJ0aWFsRXZhbHVhdG9yPXQuRXZhbHVhdG9yUHJlcHJvY2Vzc29yPXZvaWQgMDt2YXIgcj1hKDIpLG49YSgxNCksaT1hKDQpLHM9YSgzNCksbz1hKDM3KSxjPWEoNDEpLGw9YSg1MCksaD1hKDUxKSx1PWEoNDIpLGQ9YSg1NyksZj1hKDE2KSxnPWEoNTkpLHA9YSg4KSxtPWEoNSksYj1hKDYwKSx5PWEoMTIpLHc9YSgxOCksUz1hKDM4KSx4PWEoNjEpLEM9YSgzOSksaz1hKDQ1KSx2PWEoNDApLEY9YSg2MiksTz1hKDYzKSxUPWEoNjQpLE09YSg2NSk7Y29uc3QgRD1PYmplY3QuZnJlZXplKHttYXhJbWFnZVNpemU6LTEsZGlzYWJsZUZvbnRGYWNlOiExLGlnbm9yZUVycm9yczohMSxpc0V2YWxTdXBwb3J0ZWQ6ITAsaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ6ITEsY2FudmFzTWF4QXJlYUluQnl0ZXM6LTEsZm9udEV4dHJhUHJvcGVydGllczohMSx1c2VTeXN0ZW1Gb250czohMCxjTWFwVXJsOm51bGwsc3RhbmRhcmRGb250RGF0YVVybDpudWxsfSksRT0xLE49MixSPVByb21pc2UucmVzb2x2ZSgpO2Z1bmN0aW9uIG5vcm1hbGl6ZUJsZW5kTW9kZShlLHQ9ITEpe2lmKEFycmF5LmlzQXJyYXkoZSkpe2Zvcihjb25zdCB0IG9mIGUpe2NvbnN0IGU9bm9ybWFsaXplQmxlbmRNb2RlKHQsITApO2lmKGUpcmV0dXJuIGV9KDAsci53YXJuKShgVW5zdXBwb3J0ZWQgYmxlbmQgbW9kZSBBcnJheTogJHtlfWApO3JldHVybiJzb3VyY2Utb3ZlciJ9aWYoIShlIGluc3RhbmNlb2YgaS5OYW1lKSlyZXR1cm4gdD9udWxsOiJzb3VyY2Utb3ZlciI7c3dpdGNoKGUubmFtZSl7Y2FzZSJOb3JtYWwiOmNhc2UiQ29tcGF0aWJsZSI6cmV0dXJuInNvdXJjZS1vdmVyIjtjYXNlIk11bHRpcGx5IjpyZXR1cm4ibXVsdGlwbHkiO2Nhc2UiU2NyZWVuIjpyZXR1cm4ic2NyZWVuIjtjYXNlIk92ZXJsYXkiOnJldHVybiJvdmVybGF5IjtjYXNlIkRhcmtlbiI6cmV0dXJuImRhcmtlbiI7Y2FzZSJMaWdodGVuIjpyZXR1cm4ibGlnaHRlbiI7Y2FzZSJDb2xvckRvZGdlIjpyZXR1cm4iY29sb3ItZG9kZ2UiO2Nhc2UiQ29sb3JCdXJuIjpyZXR1cm4iY29sb3ItYnVybiI7Y2FzZSJIYXJkTGlnaHQiOnJldHVybiJoYXJkLWxpZ2h0IjtjYXNlIlNvZnRMaWdodCI6cmV0dXJuInNvZnQtbGlnaHQiO2Nhc2UiRGlmZmVyZW5jZSI6cmV0dXJuImRpZmZlcmVuY2UiO2Nhc2UiRXhjbHVzaW9uIjpyZXR1cm4iZXhjbHVzaW9uIjtjYXNlIkh1ZSI6cmV0dXJuImh1ZSI7Y2FzZSJTYXR1cmF0aW9uIjpyZXR1cm4ic2F0dXJhdGlvbiI7Y2FzZSJDb2xvciI6cmV0dXJuImNvbG9yIjtjYXNlIkx1bWlub3NpdHkiOnJldHVybiJsdW1pbm9zaXR5In1pZih0KXJldHVybiBudWxsOygwLHIud2FybikoYFVuc3VwcG9ydGVkIGJsZW5kIG1vZGU6ICR7ZS5uYW1lfWApO3JldHVybiJzb3VyY2Utb3ZlciJ9ZnVuY3Rpb24gaW5jcmVtZW50Q2FjaGVkSW1hZ2VNYXNrQ291bnQoZSl7ZS5mbj09PXIuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdCYmZS5hcmdzWzBdPy5jb3VudD4wJiZlLmFyZ3NbMF0uY291bnQrK31jbGFzcyBUaW1lU2xvdE1hbmFnZXJ7c3RhdGljIFRJTUVfU0xPVF9EVVJBVElPTl9NUz0yMDtzdGF0aWMgQ0hFQ0tfVElNRV9FVkVSWT0xMDA7Y29uc3RydWN0b3IoKXt0aGlzLnJlc2V0KCl9Y2hlY2soKXtpZigrK3RoaXMuY2hlY2tlZDxUaW1lU2xvdE1hbmFnZXIuQ0hFQ0tfVElNRV9FVkVSWSlyZXR1cm4hMTt0aGlzLmNoZWNrZWQ9MDtyZXR1cm4gdGhpcy5lbmRUaW1lPD1EYXRlLm5vdygpfXJlc2V0KCl7dGhpcy5lbmRUaW1lPURhdGUubm93KCkrVGltZVNsb3RNYW5hZ2VyLlRJTUVfU0xPVF9EVVJBVElPTl9NUzt0aGlzLmNoZWNrZWQ9MH19Y2xhc3MgUGFydGlhbEV2YWx1YXRvcntjb25zdHJ1Y3Rvcih7eHJlZjplLGhhbmRsZXI6dCxwYWdlSW5kZXg6YSxpZEZhY3Rvcnk6cixmb250Q2FjaGU6bixidWlsdEluQ01hcENhY2hlOmksc3RhbmRhcmRGb250RGF0YUNhY2hlOnMsZ2xvYmFsSW1hZ2VDYWNoZTpvLHN5c3RlbUZvbnRDYWNoZTpjLG9wdGlvbnM6bD1udWxsfSl7dGhpcy54cmVmPWU7dGhpcy5oYW5kbGVyPXQ7dGhpcy5wYWdlSW5kZXg9YTt0aGlzLmlkRmFjdG9yeT1yO3RoaXMuZm9udENhY2hlPW47dGhpcy5idWlsdEluQ01hcENhY2hlPWk7dGhpcy5zdGFuZGFyZEZvbnREYXRhQ2FjaGU9czt0aGlzLmdsb2JhbEltYWdlQ2FjaGU9bzt0aGlzLnN5c3RlbUZvbnRDYWNoZT1jO3RoaXMub3B0aW9ucz1sfHxEO3RoaXMucGFyc2luZ1R5cGUzRm9udD0hMTt0aGlzLl9yZWdpb25hbEltYWdlQ2FjaGU9bmV3IGcuUmVnaW9uYWxJbWFnZUNhY2hlO3RoaXMuX2ZldGNoQnVpbHRJbkNNYXBCb3VuZD10aGlzLmZldGNoQnVpbHRJbkNNYXAuYmluZCh0aGlzKTtGLkltYWdlUmVzaXplci5zZXRNYXhBcmVhKHRoaXMub3B0aW9ucy5jYW52YXNNYXhBcmVhSW5CeXRlcyl9Z2V0IF9wZGZGdW5jdGlvbkZhY3RvcnkoKXtjb25zdCBlPW5ldyBkLlBERkZ1bmN0aW9uRmFjdG9yeSh7eHJlZjp0aGlzLnhyZWYsaXNFdmFsU3VwcG9ydGVkOnRoaXMub3B0aW9ucy5pc0V2YWxTdXBwb3J0ZWR9KTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiX3BkZkZ1bmN0aW9uRmFjdG9yeSIsZSl9Y2xvbmUoZT1udWxsKXtjb25zdCB0PU9iamVjdC5jcmVhdGUodGhpcyk7dC5vcHRpb25zPU9iamVjdC5hc3NpZ24oT2JqZWN0LmNyZWF0ZShudWxsKSx0aGlzLm9wdGlvbnMsZSk7cmV0dXJuIHR9aGFzQmxlbmRNb2RlcyhlLHQpe2lmKCEoZSBpbnN0YW5jZW9mIGkuRGljdCkpcmV0dXJuITE7aWYoZS5vYmpJZCYmdC5oYXMoZS5vYmpJZCkpcmV0dXJuITE7Y29uc3QgYT1uZXcgaS5SZWZTZXQodCk7ZS5vYmpJZCYmYS5wdXQoZS5vYmpJZCk7Y29uc3Qgbj1bZV0scz10aGlzLnhyZWY7Zm9yKDtuLmxlbmd0aDspe2NvbnN0IGU9bi5zaGlmdCgpLHQ9ZS5nZXQoIkV4dEdTdGF0ZSIpO2lmKHQgaW5zdGFuY2VvZiBpLkRpY3QpZm9yKGxldCBlIG9mIHQuZ2V0UmF3VmFsdWVzKCkpe2lmKGUgaW5zdGFuY2VvZiBpLlJlZil7aWYoYS5oYXMoZSkpY29udGludWU7dHJ5e2U9cy5mZXRjaChlKX1jYXRjaCh0KXthLnB1dChlKTsoMCxyLmluZm8pKGBoYXNCbGVuZE1vZGVzIC0gaWdub3JpbmcgRXh0R1N0YXRlOiAiJHt0fSIuYCk7Y29udGludWV9fWlmKCEoZSBpbnN0YW5jZW9mIGkuRGljdCkpY29udGludWU7ZS5vYmpJZCYmYS5wdXQoZS5vYmpJZCk7Y29uc3QgdD1lLmdldCgiQk0iKTtpZih0IGluc3RhbmNlb2YgaS5OYW1lKXtpZigiTm9ybWFsIiE9PXQubmFtZSlyZXR1cm4hMH1lbHNlIGlmKHZvaWQgMCE9PXQmJkFycmF5LmlzQXJyYXkodCkpZm9yKGNvbnN0IGUgb2YgdClpZihlIGluc3RhbmNlb2YgaS5OYW1lJiYiTm9ybWFsIiE9PWUubmFtZSlyZXR1cm4hMH1jb25zdCBvPWUuZ2V0KCJYT2JqZWN0Iik7aWYobyBpbnN0YW5jZW9mIGkuRGljdClmb3IobGV0IGUgb2Ygby5nZXRSYXdWYWx1ZXMoKSl7aWYoZSBpbnN0YW5jZW9mIGkuUmVmKXtpZihhLmhhcyhlKSljb250aW51ZTt0cnl7ZT1zLmZldGNoKGUpfWNhdGNoKHQpe2EucHV0KGUpOygwLHIuaW5mbykoYGhhc0JsZW5kTW9kZXMgLSBpZ25vcmluZyBYT2JqZWN0OiAiJHt0fSIuYCk7Y29udGludWV9fWlmKCEoZSBpbnN0YW5jZW9mIG0uQmFzZVN0cmVhbSkpY29udGludWU7ZS5kaWN0Lm9iaklkJiZhLnB1dChlLmRpY3Qub2JqSWQpO2NvbnN0IHQ9ZS5kaWN0LmdldCgiUmVzb3VyY2VzIik7aWYodCBpbnN0YW5jZW9mIGkuRGljdCYmKCF0Lm9iaklkfHwhYS5oYXModC5vYmpJZCkpKXtuLnB1c2godCk7dC5vYmpJZCYmYS5wdXQodC5vYmpJZCl9fX1mb3IoY29uc3QgZSBvZiBhKXQucHV0KGUpO3JldHVybiExfWFzeW5jIGZldGNoQnVpbHRJbkNNYXAoZSl7Y29uc3QgdD10aGlzLmJ1aWx0SW5DTWFwQ2FjaGUuZ2V0KGUpO2lmKHQpcmV0dXJuIHQ7bGV0IGE7aWYobnVsbCE9PXRoaXMub3B0aW9ucy5jTWFwVXJsKXtjb25zdCB0PWAke3RoaXMub3B0aW9ucy5jTWFwVXJsfSR7ZX0uYmNtYXBgLG49YXdhaXQgZmV0Y2godCk7aWYoIW4ub2spdGhyb3cgbmV3IEVycm9yKGBmZXRjaEJ1aWx0SW5DTWFwOiBmYWlsZWQgdG8gZmV0Y2ggZmlsZSAiJHt0fSIgd2l0aCAiJHtuLnN0YXR1c1RleHR9Ii5gKTthPXtjTWFwRGF0YTpuZXcgVWludDhBcnJheShhd2FpdCBuLmFycmF5QnVmZmVyKCkpLGNvbXByZXNzaW9uVHlwZTpyLkNNYXBDb21wcmVzc2lvblR5cGUuQklOQVJZfX1lbHNlIGE9YXdhaXQgdGhpcy5oYW5kbGVyLnNlbmRXaXRoUHJvbWlzZSgiRmV0Y2hCdWlsdEluQ01hcCIse25hbWU6ZX0pO2EuY29tcHJlc3Npb25UeXBlIT09ci5DTWFwQ29tcHJlc3Npb25UeXBlLk5PTkUmJnRoaXMuYnVpbHRJbkNNYXBDYWNoZS5zZXQoZSxhKTtyZXR1cm4gYX1hc3luYyBmZXRjaFN0YW5kYXJkRm9udERhdGEoZSl7Y29uc3QgdD10aGlzLnN0YW5kYXJkRm9udERhdGFDYWNoZS5nZXQoZSk7aWYodClyZXR1cm4gbmV3IHAuU3RyZWFtKHQpO2lmKHRoaXMub3B0aW9ucy51c2VTeXN0ZW1Gb250cyYmIlN5bWJvbCIhPT1lJiYiWmFwZkRpbmdiYXRzIiE9PWUpcmV0dXJuIG51bGw7Y29uc3QgYT0oMCxjLmdldEZvbnROYW1lVG9GaWxlTWFwKSgpW2VdO2xldCBuO2lmKG51bGwhPT10aGlzLm9wdGlvbnMuc3RhbmRhcmRGb250RGF0YVVybCl7Y29uc3QgZT1gJHt0aGlzLm9wdGlvbnMuc3RhbmRhcmRGb250RGF0YVVybH0ke2F9YCx0PWF3YWl0IGZldGNoKGUpO3Qub2s/bj1hd2FpdCB0LmFycmF5QnVmZmVyKCk6KDAsci53YXJuKShgZmV0Y2hTdGFuZGFyZEZvbnREYXRhOiBmYWlsZWQgdG8gZmV0Y2ggZmlsZSAiJHtlfSIgd2l0aCAiJHt0LnN0YXR1c1RleHR9Ii5gKX1lbHNlIHRyeXtuPWF3YWl0IHRoaXMuaGFuZGxlci5zZW5kV2l0aFByb21pc2UoIkZldGNoU3RhbmRhcmRGb250RGF0YSIse2ZpbGVuYW1lOmF9KX1jYXRjaChlKXsoMCxyLndhcm4pKGBmZXRjaFN0YW5kYXJkRm9udERhdGE6IGZhaWxlZCB0byBmZXRjaCBmaWxlICIke2F9IiB3aXRoICIke2V9Ii5gKX1pZighbilyZXR1cm4gbnVsbDt0aGlzLnN0YW5kYXJkRm9udERhdGFDYWNoZS5zZXQoZSxuKTtyZXR1cm4gbmV3IHAuU3RyZWFtKG4pfWFzeW5jIGJ1aWxkRm9ybVhPYmplY3QoZSx0LGEsbixzLG8sYyl7Y29uc3QgbD10LmRpY3QsaD1sLmdldEFycmF5KCJNYXRyaXgiKTtsZXQgdSxkLGY9bC5nZXRBcnJheSgiQkJveCIpO2Y9QXJyYXkuaXNBcnJheShmKSYmND09PWYubGVuZ3RoP3IuVXRpbC5ub3JtYWxpemVSZWN0KGYpOm51bGw7bC5oYXMoIk9DIikmJih1PWF3YWl0IHRoaXMucGFyc2VNYXJrZWRDb250ZW50UHJvcHMobC5nZXQoIk9DIiksZSkpO3ZvaWQgMCE9PXUmJm4uYWRkT3Aoci5PUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsWyJPQyIsdV0pO2NvbnN0IGc9bC5nZXQoIkdyb3VwIik7aWYoZyl7ZD17bWF0cml4OmgsYmJveDpmLHNtYXNrOmEsaXNvbGF0ZWQ6ITEsa25vY2tvdXQ6ITF9O2NvbnN0IHQ9Zy5nZXQoIlMiKTtsZXQgcz1udWxsO2lmKCgwLGkuaXNOYW1lKSh0LCJUcmFuc3BhcmVuY3kiKSl7ZC5pc29sYXRlZD1nLmdldCgiSSIpfHwhMTtkLmtub2Nrb3V0PWcuZ2V0KCJLIil8fCExO2lmKGcuaGFzKCJDUyIpKXtjb25zdCB0PWcuZ2V0UmF3KCJDUyIpLGE9eS5Db2xvclNwYWNlLmdldENhY2hlZCh0LHRoaXMueHJlZixjKTtzPWF8fGF3YWl0IHRoaXMucGFyc2VDb2xvclNwYWNlKHtjczp0LHJlc291cmNlczplLGxvY2FsQ29sb3JTcGFjZUNhY2hlOmN9KX19aWYoYT8uYmFja2Ryb3Ape3N8fD15LkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5yZ2I7YS5iYWNrZHJvcD1zLmdldFJnYihhLmJhY2tkcm9wLDApfW4uYWRkT3Aoci5PUFMuYmVnaW5Hcm91cCxbZF0pfWNvbnN0IHA9Zz9baCxudWxsXTpbaCxmXTtuLmFkZE9wKHIuT1BTLnBhaW50Rm9ybVhPYmplY3RCZWdpbixwKTtyZXR1cm4gdGhpcy5nZXRPcGVyYXRvckxpc3Qoe3N0cmVhbTp0LHRhc2s6cyxyZXNvdXJjZXM6bC5nZXQoIlJlc291cmNlcyIpfHxlLG9wZXJhdG9yTGlzdDpuLGluaXRpYWxTdGF0ZTpvfSkudGhlbigoZnVuY3Rpb24oKXtuLmFkZE9wKHIuT1BTLnBhaW50Rm9ybVhPYmplY3RFbmQsW10pO2cmJm4uYWRkT3Aoci5PUFMuZW5kR3JvdXAsW2RdKTt2b2lkIDAhPT11JiZuLmFkZE9wKHIuT1BTLmVuZE1hcmtlZENvbnRlbnQsW10pfSkpfV9zZW5kSW1nRGF0YShlLHQsYT0hMSl7Y29uc3Qgcj10P1t0LmJpdG1hcHx8dC5kYXRhLmJ1ZmZlcl06bnVsbDtyZXR1cm4gdGhpcy5wYXJzaW5nVHlwZTNGb250fHxhP3RoaXMuaGFuZGxlci5zZW5kKCJjb21tb25vYmoiLFtlLCJJbWFnZSIsdF0scik6dGhpcy5oYW5kbGVyLnNlbmQoIm9iaiIsW2UsdGhpcy5wYWdlSW5kZXgsIkltYWdlIix0XSxyKX1hc3luYyBidWlsZFBhaW50SW1hZ2VYT2JqZWN0KHtyZXNvdXJjZXM6ZSxpbWFnZTp0LGlzSW5saW5lOmE9ITEsb3BlcmF0b3JMaXN0Om4sY2FjaGVLZXk6aSxsb2NhbEltYWdlQ2FjaGU6cyxsb2NhbENvbG9yU3BhY2VDYWNoZTpvfSl7Y29uc3QgYz10LmRpY3QsbD1jLm9iaklkLGg9Yy5nZXQoIlciLCJXaWR0aCIpLHU9Yy5nZXQoIkgiLCJIZWlnaHQiKTtpZighaHx8Im51bWJlciIhPXR5cGVvZiBofHwhdXx8Im51bWJlciIhPXR5cGVvZiB1KXsoMCxyLndhcm4pKCJJbWFnZSBkaW1lbnNpb25zIGFyZSBtaXNzaW5nLCBvciBub3QgbnVtYmVycy4iKTtyZXR1cm59Y29uc3QgZD10aGlzLm9wdGlvbnMubWF4SW1hZ2VTaXplO2lmKC0xIT09ZCYmaCp1PmQpe2NvbnN0IGU9IkltYWdlIGV4Y2VlZGVkIG1heGltdW0gYWxsb3dlZCBzaXplIGFuZCB3YXMgcmVtb3ZlZC4iO2lmKHRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpeygwLHIud2FybikoZSk7cmV0dXJufXRocm93IG5ldyBFcnJvcihlKX1sZXQgZjtjLmhhcygiT0MiKSYmKGY9YXdhaXQgdGhpcy5wYXJzZU1hcmtlZENvbnRlbnRQcm9wcyhjLmdldCgiT0MiKSxlKSk7bGV0IGcscDtpZihjLmdldCgiSU0iLCJJbWFnZU1hc2siKXx8ITEpe2NvbnN0IGU9Yy5nZXQoIkkiLCJJbnRlcnBvbGF0ZSIpLGE9aCs3Pj4zLG89dC5nZXRCeXRlcyhhKnUpLGQ9Yy5nZXRBcnJheSgiRCIsIkRlY29kZSIpO2lmKHRoaXMucGFyc2luZ1R5cGUzRm9udCl7Zz1NLlBERkltYWdlLmNyZWF0ZVJhd01hc2soe2ltZ0FycmF5Om8sd2lkdGg6aCxoZWlnaHQ6dSxpbWFnZUlzRnJvbURlY29kZVN0cmVhbTp0IGluc3RhbmNlb2Ygdy5EZWNvZGVTdHJlYW0saW52ZXJzZURlY29kZTpkPy5bMF0+MCxpbnRlcnBvbGF0ZTplfSk7Zy5jYWNoZWQ9ISFpO3A9W2ddO24uYWRkSW1hZ2VPcHMoci5PUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0LHAsZik7aWYoaSl7Y29uc3QgZT17Zm46ci5PUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0LGFyZ3M6cCxvcHRpb25hbENvbnRlbnQ6Zn07cy5zZXQoaSxsLGUpO2wmJnRoaXMuX3JlZ2lvbmFsSW1hZ2VDYWNoZS5zZXQobnVsbCxsLGUpfXJldHVybn1nPWF3YWl0IE0uUERGSW1hZ2UuY3JlYXRlTWFzayh7aW1nQXJyYXk6byx3aWR0aDpoLGhlaWdodDp1LGltYWdlSXNGcm9tRGVjb2RlU3RyZWFtOnQgaW5zdGFuY2VvZiB3LkRlY29kZVN0cmVhbSxpbnZlcnNlRGVjb2RlOmQ/LlswXT4wLGludGVycG9sYXRlOmUsaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ6dGhpcy5vcHRpb25zLmlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkfSk7aWYoZy5pc1NpbmdsZU9wYXF1ZVBpeGVsKXtuLmFkZEltYWdlT3BzKHIuT1BTLnBhaW50U29saWRDb2xvckltYWdlTWFzayxbXSxmKTtpZihpKXtjb25zdCBlPXtmbjpyLk9QUy5wYWludFNvbGlkQ29sb3JJbWFnZU1hc2ssYXJnczpbXSxvcHRpb25hbENvbnRlbnQ6Zn07cy5zZXQoaSxsLGUpO2wmJnRoaXMuX3JlZ2lvbmFsSW1hZ2VDYWNoZS5zZXQobnVsbCxsLGUpfXJldHVybn1jb25zdCBtPWBtYXNrXyR7dGhpcy5pZEZhY3RvcnkuY3JlYXRlT2JqSWQoKX1gO24uYWRkRGVwZW5kZW5jeShtKTt0aGlzLl9zZW5kSW1nRGF0YShtLGcpO3A9W3tkYXRhOm0sd2lkdGg6Zy53aWR0aCxoZWlnaHQ6Zy5oZWlnaHQsaW50ZXJwb2xhdGU6Zy5pbnRlcnBvbGF0ZSxjb3VudDoxfV07bi5hZGRJbWFnZU9wcyhyLk9QUy5wYWludEltYWdlTWFza1hPYmplY3QscCxmKTtpZihpKXtjb25zdCBlPXtmbjpyLk9QUy5wYWludEltYWdlTWFza1hPYmplY3QsYXJnczpwLG9wdGlvbmFsQ29udGVudDpmfTtzLnNldChpLGwsZSk7bCYmdGhpcy5fcmVnaW9uYWxJbWFnZUNhY2hlLnNldChudWxsLGwsZSl9cmV0dXJufWlmKGEmJiFjLmhhcygiU01hc2siKSYmIWMuaGFzKCJNYXNrIikmJmgrdTwyMDApe2NvbnN0IGk9bmV3IE0uUERGSW1hZ2Uoe3hyZWY6dGhpcy54cmVmLHJlczplLGltYWdlOnQsaXNJbmxpbmU6YSxwZGZGdW5jdGlvbkZhY3Rvcnk6dGhpcy5fcGRmRnVuY3Rpb25GYWN0b3J5LGxvY2FsQ29sb3JTcGFjZUNhY2hlOm99KTtnPWF3YWl0IGkuY3JlYXRlSW1hZ2VEYXRhKCEwLCExKTtuLmlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkPXRoaXMub3B0aW9ucy5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDtuLmFkZEltYWdlT3BzKHIuT1BTLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0LFtnXSxmKTtyZXR1cm59bGV0IG09YGltZ18ke3RoaXMuaWRGYWN0b3J5LmNyZWF0ZU9iaklkKCl9YCxiPSExO2lmKHRoaXMucGFyc2luZ1R5cGUzRm9udCltPWAke3RoaXMuaWRGYWN0b3J5LmdldERvY0lkKCl9X3R5cGUzXyR7bX1gO2Vsc2UgaWYobCl7Yj10aGlzLmdsb2JhbEltYWdlQ2FjaGUuc2hvdWxkQ2FjaGUobCx0aGlzLnBhZ2VJbmRleCk7YiYmKG09YCR7dGhpcy5pZEZhY3RvcnkuZ2V0RG9jSWQoKX1fJHttfWApfW4uYWRkRGVwZW5kZW5jeShtKTtwPVttLGgsdV07TS5QREZJbWFnZS5idWlsZEltYWdlKHt4cmVmOnRoaXMueHJlZixyZXM6ZSxpbWFnZTp0LGlzSW5saW5lOmEscGRmRnVuY3Rpb25GYWN0b3J5OnRoaXMuX3BkZkZ1bmN0aW9uRmFjdG9yeSxsb2NhbENvbG9yU3BhY2VDYWNoZTpvfSkudGhlbigoYXN5bmMgZT0+e2c9YXdhaXQgZS5jcmVhdGVJbWFnZURhdGEoITEsdGhpcy5vcHRpb25zLmlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKTtpZihpJiZsJiZiKXtjb25zdCBlPWcuYml0bWFwP2cud2lkdGgqZy5oZWlnaHQqNDpnLmRhdGEubGVuZ3RoO3RoaXMuZ2xvYmFsSW1hZ2VDYWNoZS5hZGRCeXRlU2l6ZShsLGUpfXJldHVybiB0aGlzLl9zZW5kSW1nRGF0YShtLGcsYil9KSkuY2F0Y2goKGU9PnsoMCxyLndhcm4pKGBVbmFibGUgdG8gZGVjb2RlIGltYWdlICIke219IjogIiR7ZX0iLmApO3JldHVybiB0aGlzLl9zZW5kSW1nRGF0YShtLG51bGwsYil9KSk7bi5hZGRJbWFnZU9wcyhyLk9QUy5wYWludEltYWdlWE9iamVjdCxwLGYpO2lmKGkpe2NvbnN0IGU9e2ZuOnIuT1BTLnBhaW50SW1hZ2VYT2JqZWN0LGFyZ3M6cCxvcHRpb25hbENvbnRlbnQ6Zn07cy5zZXQoaSxsLGUpO2lmKGwpe3RoaXMuX3JlZ2lvbmFsSW1hZ2VDYWNoZS5zZXQobnVsbCxsLGUpO2lmKGIpeygwLHIuYXNzZXJ0KSghYSwiQ2Fubm90IGNhY2hlIGFuIGlubGluZSBpbWFnZSBnbG9iYWxseS4iKTt0aGlzLmdsb2JhbEltYWdlQ2FjaGUuc2V0RGF0YShsLHtvYmpJZDptLGZuOnIuT1BTLnBhaW50SW1hZ2VYT2JqZWN0LGFyZ3M6cCxvcHRpb25hbENvbnRlbnQ6ZixieXRlU2l6ZTowfSl9fX19aGFuZGxlU01hc2soZSx0LGEscixuLGkpe2NvbnN0IHM9ZS5nZXQoIkciKSxvPXtzdWJ0eXBlOmUuZ2V0KCJTIikubmFtZSxiYWNrZHJvcDplLmdldCgiQkMiKX0sYz1lLmdldCgiVFIiKTtpZigoMCxkLmlzUERGRnVuY3Rpb24pKGMpKXtjb25zdCBlPXRoaXMuX3BkZkZ1bmN0aW9uRmFjdG9yeS5jcmVhdGUoYyksdD1uZXcgVWludDhBcnJheSgyNTYpLGE9bmV3IEZsb2F0MzJBcnJheSgxKTtmb3IobGV0IHI9MDtyPDI1NjtyKyspe2FbMF09ci8yNTU7ZShhLDAsYSwwKTt0W3JdPTI1NSphWzBdfDB9by50cmFuc2Zlck1hcD10fXJldHVybiB0aGlzLmJ1aWxkRm9ybVhPYmplY3QodCxzLG8sYSxyLG4uc3RhdGUuY2xvbmUoKSxpKX1oYW5kbGVUcmFuc2ZlckZ1bmN0aW9uKGUpe2xldCB0O2lmKEFycmF5LmlzQXJyYXkoZSkpdD1lO2Vsc2V7aWYoISgwLGQuaXNQREZGdW5jdGlvbikoZSkpcmV0dXJuIG51bGw7dD1bZV19Y29uc3QgYT1bXTtsZXQgcj0wLG49MDtmb3IoY29uc3QgZSBvZiB0KXtjb25zdCB0PXRoaXMueHJlZi5mZXRjaElmUmVmKGUpO3IrKztpZigoMCxpLmlzTmFtZSkodCwiSWRlbnRpdHkiKSl7YS5wdXNoKG51bGwpO2NvbnRpbnVlfWlmKCEoMCxkLmlzUERGRnVuY3Rpb24pKHQpKXJldHVybiBudWxsO2NvbnN0IHM9dGhpcy5fcGRmRnVuY3Rpb25GYWN0b3J5LmNyZWF0ZSh0KSxvPW5ldyBVaW50OEFycmF5KDI1NiksYz1uZXcgRmxvYXQzMkFycmF5KDEpO2ZvcihsZXQgZT0wO2U8MjU2O2UrKyl7Y1swXT1lLzI1NTtzKGMsMCxjLDApO29bZV09MjU1KmNbMF18MH1hLnB1c2gobyk7bisrfXJldHVybiAxIT09ciYmNCE9PXJ8fDA9PT1uP251bGw6YX1oYW5kbGVUaWxpbmdUeXBlKGUsdCxhLG4scyxvLGMsaCl7Y29uc3QgdT1uZXcgVC5PcGVyYXRvckxpc3QsZD1pLkRpY3QubWVyZ2Uoe3hyZWY6dGhpcy54cmVmLGRpY3RBcnJheTpbcy5nZXQoIlJlc291cmNlcyIpLGFdfSk7cmV0dXJuIHRoaXMuZ2V0T3BlcmF0b3JMaXN0KHtzdHJlYW06bix0YXNrOmMscmVzb3VyY2VzOmQsb3BlcmF0b3JMaXN0OnV9KS50aGVuKChmdW5jdGlvbigpe2NvbnN0IGE9dS5nZXRJUigpLHI9KDAsbC5nZXRUaWxpbmdQYXR0ZXJuSVIpKGEscyx0KTtvLmFkZERlcGVuZGVuY2llcyh1LmRlcGVuZGVuY2llcyk7by5hZGRPcChlLHIpO3Mub2JqSWQmJmguc2V0KG51bGwscy5vYmpJZCx7b3BlcmF0b3JMaXN0SVI6YSxkaWN0OnN9KX0pKS5jYXRjaCgoZT0+e2lmKCEoZSBpbnN0YW5jZW9mIHIuQWJvcnRFeGNlcHRpb24pKXtpZighdGhpcy5vcHRpb25zLmlnbm9yZUVycm9ycyl0aHJvdyBlOygwLHIud2FybikoYGhhbmRsZVRpbGluZ1R5cGUgLSBpZ25vcmluZyBwYXR0ZXJuOiAiJHtlfSIuYCl9fSkpfWhhbmRsZVNldEZvbnQoZSx0LGEscixuLG8sYz1udWxsLGw9bnVsbCl7Y29uc3QgaD10Py5bMF1pbnN0YW5jZW9mIGkuTmFtZT90WzBdLm5hbWU6bnVsbDtyZXR1cm4gdGhpcy5sb2FkRm9udChoLGEsZSxjLGwpLnRoZW4oKHQ9PnQuZm9udC5pc1R5cGUzRm9udD90LmxvYWRUeXBlM0RhdGEodGhpcyxlLG4pLnRoZW4oKGZ1bmN0aW9uKCl7ci5hZGREZXBlbmRlbmNpZXModC50eXBlM0RlcGVuZGVuY2llcyk7cmV0dXJuIHR9KSkuY2F0Y2goKGU9Pm5ldyBUcmFuc2xhdGVkRm9udCh7bG9hZGVkTmFtZToiZ19mb250X2Vycm9yIixmb250Om5ldyBzLkVycm9yRm9udChgVHlwZTMgZm9udCBsb2FkIGVycm9yOiAke2V9YCksZGljdDp0LmZvbnQsZXZhbHVhdG9yT3B0aW9uczp0aGlzLm9wdGlvbnN9KSkpOnQpKS50aGVuKChlPT57by5mb250PWUuZm9udDtlLnNlbmQodGhpcy5oYW5kbGVyKTtyZXR1cm4gZS5sb2FkZWROYW1lfSkpfWhhbmRsZVRleHQoZSx0KXtjb25zdCBhPXQuZm9udCxuPWEuY2hhcnNUb0dseXBocyhlKTtpZihhLmRhdGEpeyghISh0LnRleHRSZW5kZXJpbmdNb2RlJnIuVGV4dFJlbmRlcmluZ01vZGUuQUREX1RPX1BBVEhfRkxBRyl8fCJQYXR0ZXJuIj09PXQuZmlsbENvbG9yU3BhY2UubmFtZXx8YS5kaXNhYmxlRm9udEZhY2V8fHRoaXMub3B0aW9ucy5kaXNhYmxlRm9udEZhY2UpJiZQYXJ0aWFsRXZhbHVhdG9yLmJ1aWxkRm9udFBhdGhzKGEsbix0aGlzLmhhbmRsZXIsdGhpcy5vcHRpb25zKX1yZXR1cm4gbn1lbnN1cmVTdGF0ZUZvbnQoZSl7aWYoZS5mb250KXJldHVybjtjb25zdCB0PW5ldyByLkZvcm1hdEVycm9yKCJNaXNzaW5nIHNldEZvbnQgKFRmKSBvcGVyYXRvciBiZWZvcmUgdGV4dCByZW5kZXJpbmcgb3BlcmF0b3IuIik7aWYoIXRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpdGhyb3cgdDsoMCxyLndhcm4pKGBlbnN1cmVTdGF0ZUZvbnQ6ICIke3R9Ii5gKX1hc3luYyBzZXRHU3RhdGUoe3Jlc291cmNlczplLGdTdGF0ZTp0LG9wZXJhdG9yTGlzdDphLGNhY2hlS2V5Om4sdGFzazpzLHN0YXRlTWFuYWdlcjpvLGxvY2FsR1N0YXRlQ2FjaGU6Yyxsb2NhbENvbG9yU3BhY2VDYWNoZTpsfSl7Y29uc3QgaD10Lm9iaklkO2xldCB1PSEwO2NvbnN0IGQ9W107bGV0IGY9UHJvbWlzZS5yZXNvbHZlKCk7Zm9yKGNvbnN0IG4gb2YgdC5nZXRLZXlzKCkpe2NvbnN0IGM9dC5nZXQobik7c3dpdGNoKG4pe2Nhc2UiVHlwZSI6YnJlYWs7Y2FzZSJMVyI6Y2FzZSJMQyI6Y2FzZSJMSiI6Y2FzZSJNTCI6Y2FzZSJEIjpjYXNlIlJJIjpjYXNlIkZMIjpjYXNlIkNBIjpjYXNlImNhIjpkLnB1c2goW24sY10pO2JyZWFrO2Nhc2UiRm9udCI6dT0hMTtmPWYudGhlbigoKCk9PnRoaXMuaGFuZGxlU2V0Rm9udChlLG51bGwsY1swXSxhLHMsby5zdGF0ZSkudGhlbigoZnVuY3Rpb24oZSl7YS5hZGREZXBlbmRlbmN5KGUpO2QucHVzaChbbixbZSxjWzFdXV0pfSkpKSk7YnJlYWs7Y2FzZSJCTSI6ZC5wdXNoKFtuLG5vcm1hbGl6ZUJsZW5kTW9kZShjKV0pO2JyZWFrO2Nhc2UiU01hc2siOmlmKCgwLGkuaXNOYW1lKShjLCJOb25lIikpe2QucHVzaChbbiwhMV0pO2JyZWFrfWlmKGMgaW5zdGFuY2VvZiBpLkRpY3Qpe3U9ITE7Zj1mLnRoZW4oKCgpPT50aGlzLmhhbmRsZVNNYXNrKGMsZSxhLHMsbyxsKSkpO2QucHVzaChbbiwhMF0pfWVsc2UoMCxyLndhcm4pKCJVbnN1cHBvcnRlZCBTTWFzayB0eXBlIik7YnJlYWs7Y2FzZSJUUiI6Y29uc3QgdD10aGlzLmhhbmRsZVRyYW5zZmVyRnVuY3Rpb24oYyk7ZC5wdXNoKFtuLHRdKTticmVhaztjYXNlIk9QIjpjYXNlIm9wIjpjYXNlIk9QTSI6Y2FzZSJCRyI6Y2FzZSJCRzIiOmNhc2UiVUNSIjpjYXNlIlVDUjIiOmNhc2UiVFIyIjpjYXNlIkhUIjpjYXNlIlNNIjpjYXNlIlNBIjpjYXNlIkFJUyI6Y2FzZSJUSyI6KDAsci5pbmZvKSgiZ3JhcGhpYyBzdGF0ZSBvcGVyYXRvciAiK24pO2JyZWFrO2RlZmF1bHQ6KDAsci5pbmZvKSgiVW5rbm93biBncmFwaGljIHN0YXRlIG9wZXJhdG9yICIrbil9fXJldHVybiBmLnRoZW4oKGZ1bmN0aW9uKCl7ZC5sZW5ndGg+MCYmYS5hZGRPcChyLk9QUy5zZXRHU3RhdGUsW2RdKTt1JiZjLnNldChuLGgsZCl9KSl9bG9hZEZvbnQoZSx0LGEsbj1udWxsLG89bnVsbCl7Y29uc3QgZXJyb3JGb250PWFzeW5jKCk9Pm5ldyBUcmFuc2xhdGVkRm9udCh7bG9hZGVkTmFtZToiZ19mb250X2Vycm9yIixmb250Om5ldyBzLkVycm9yRm9udChgRm9udCAiJHtlfSIgaXMgbm90IGF2YWlsYWJsZS5gKSxkaWN0OnQsZXZhbHVhdG9yT3B0aW9uczp0aGlzLm9wdGlvbnN9KTtsZXQgYztpZih0KXQgaW5zdGFuY2VvZiBpLlJlZiYmKGM9dCk7ZWxzZXtjb25zdCB0PWEuZ2V0KCJGb250Iik7dCYmKGM9dC5nZXRSYXcoZSkpfWlmKGMpe2lmKHRoaXMucGFyc2luZ1R5cGUzRm9udCYmdGhpcy50eXBlM0ZvbnRSZWZzLmhhcyhjKSlyZXR1cm4gZXJyb3JGb250KCk7aWYodGhpcy5mb250Q2FjaGUuaGFzKGMpKXJldHVybiB0aGlzLmZvbnRDYWNoZS5nZXQoYyk7dD10aGlzLnhyZWYuZmV0Y2hJZlJlZihjKX1pZighKHQgaW5zdGFuY2VvZiBpLkRpY3QpKXtpZighdGhpcy5vcHRpb25zLmlnbm9yZUVycm9ycyYmIXRoaXMucGFyc2luZ1R5cGUzRm9udCl7KDAsci53YXJuKShgRm9udCAiJHtlfSIgaXMgbm90IGF2YWlsYWJsZS5gKTtyZXR1cm4gZXJyb3JGb250KCl9KDAsci53YXJuKShgRm9udCAiJHtlfSIgaXMgbm90IGF2YWlsYWJsZSAtLSBhdHRlbXB0aW5nIHRvIGZhbGxiYWNrIHRvIGEgZGVmYXVsdCBmb250LmApO3Q9bnx8UGFydGlhbEV2YWx1YXRvci5mYWxsYmFja0ZvbnREaWN0fWlmKHQuY2FjaGVLZXkmJnRoaXMuZm9udENhY2hlLmhhcyh0LmNhY2hlS2V5KSlyZXR1cm4gdGhpcy5mb250Q2FjaGUuZ2V0KHQuY2FjaGVLZXkpO2NvbnN0IGw9bmV3IHIuUHJvbWlzZUNhcGFiaWxpdHk7bGV0IGg7dHJ5e2g9dGhpcy5wcmVFdmFsdWF0ZUZvbnQodCk7aC5jc3NGb250SW5mbz1vfWNhdGNoKGUpeygwLHIud2FybikoYGxvYWRGb250IC0gcHJlRXZhbHVhdGVGb250IGZhaWxlZDogIiR7ZX0iLmApO3JldHVybiBlcnJvckZvbnQoKX1jb25zdHtkZXNjcmlwdG9yOnUsaGFzaDpkfT1oLGY9YyBpbnN0YW5jZW9mIGkuUmVmO2xldCBnO2lmKGQmJnUgaW5zdGFuY2VvZiBpLkRpY3Qpe2NvbnN0IGU9dS5mb250QWxpYXNlc3x8PU9iamVjdC5jcmVhdGUobnVsbCk7aWYoZVtkXSl7Y29uc3QgdD1lW2RdLmFsaWFzUmVmO2lmKGYmJnQmJnRoaXMuZm9udENhY2hlLmhhcyh0KSl7dGhpcy5mb250Q2FjaGUucHV0QWxpYXMoYyx0KTtyZXR1cm4gdGhpcy5mb250Q2FjaGUuZ2V0KGMpfX1lbHNlIGVbZF09e2ZvbnRJRDp0aGlzLmlkRmFjdG9yeS5jcmVhdGVGb250SWQoKX07ZiYmKGVbZF0uYWxpYXNSZWY9Yyk7Zz1lW2RdLmZvbnRJRH1lbHNlIGc9dGhpcy5pZEZhY3RvcnkuY3JlYXRlRm9udElkKCk7KDAsci5hc3NlcnQpKGc/LnN0YXJ0c1dpdGgoImYiKSwnVGhlICJmb250SUQiIG11c3QgYmUgKGNvcnJlY3RseSkgZGVmaW5lZC4nKTtpZihmKXRoaXMuZm9udENhY2hlLnB1dChjLGwucHJvbWlzZSk7ZWxzZXt0LmNhY2hlS2V5PWBjYWNoZUtleV8ke2d9YDt0aGlzLmZvbnRDYWNoZS5wdXQodC5jYWNoZUtleSxsLnByb21pc2UpfXQubG9hZGVkTmFtZT1gJHt0aGlzLmlkRmFjdG9yeS5nZXREb2NJZCgpfV8ke2d9YDt0aGlzLnRyYW5zbGF0ZUZvbnQoaCkudGhlbigoZT0+e2wucmVzb2x2ZShuZXcgVHJhbnNsYXRlZEZvbnQoe2xvYWRlZE5hbWU6dC5sb2FkZWROYW1lLGZvbnQ6ZSxkaWN0OnQsZXZhbHVhdG9yT3B0aW9uczp0aGlzLm9wdGlvbnN9KSl9KSkuY2F0Y2goKGU9PnsoMCxyLndhcm4pKGBsb2FkRm9udCAtIHRyYW5zbGF0ZUZvbnQgZmFpbGVkOiAiJHtlfSIuYCk7bC5yZXNvbHZlKG5ldyBUcmFuc2xhdGVkRm9udCh7bG9hZGVkTmFtZTp0LmxvYWRlZE5hbWUsZm9udDpuZXcgcy5FcnJvckZvbnQoZSBpbnN0YW5jZW9mIEVycm9yP2UubWVzc2FnZTplKSxkaWN0OnQsZXZhbHVhdG9yT3B0aW9uczp0aGlzLm9wdGlvbnN9KSl9KSk7cmV0dXJuIGwucHJvbWlzZX1idWlsZFBhdGgoZSx0LGEsbj0hMSl7Y29uc3QgaT1lLmxlbmd0aC0xO2F8fChhPVtdKTtpZihpPDB8fGUuZm5BcnJheVtpXSE9PXIuT1BTLmNvbnN0cnVjdFBhdGgpe2lmKG4peygwLHIud2FybikoYEVuY291bnRlcmVkIHBhdGggb3BlcmF0b3IgIiR7dH0iIGluc2lkZSBvZiBhIHRleHQgb2JqZWN0LmApO2UuYWRkT3Aoci5PUFMuc2F2ZSxudWxsKX1sZXQgaTtzd2l0Y2godCl7Y2FzZSByLk9QUy5yZWN0YW5nbGU6Y29uc3QgZT1hWzBdK2FbMl0sdD1hWzFdK2FbM107aT1bTWF0aC5taW4oYVswXSxlKSxNYXRoLm1heChhWzBdLGUpLE1hdGgubWluKGFbMV0sdCksTWF0aC5tYXgoYVsxXSx0KV07YnJlYWs7Y2FzZSByLk9QUy5tb3ZlVG86Y2FzZSByLk9QUy5saW5lVG86aT1bYVswXSxhWzBdLGFbMV0sYVsxXV07YnJlYWs7ZGVmYXVsdDppPVsxLzAsLTEvMCwxLzAsLTEvMF19ZS5hZGRPcChyLk9QUy5jb25zdHJ1Y3RQYXRoLFtbdF0sYSxpXSk7biYmZS5hZGRPcChyLk9QUy5yZXN0b3JlLG51bGwpfWVsc2V7Y29uc3Qgbj1lLmFyZ3NBcnJheVtpXTtuWzBdLnB1c2godCk7blsxXS5wdXNoKC4uLmEpO2NvbnN0IHM9blsyXTtzd2l0Y2godCl7Y2FzZSByLk9QUy5yZWN0YW5nbGU6Y29uc3QgZT1hWzBdK2FbMl0sdD1hWzFdK2FbM107c1swXT1NYXRoLm1pbihzWzBdLGFbMF0sZSk7c1sxXT1NYXRoLm1heChzWzFdLGFbMF0sZSk7c1syXT1NYXRoLm1pbihzWzJdLGFbMV0sdCk7c1szXT1NYXRoLm1heChzWzNdLGFbMV0sdCk7YnJlYWs7Y2FzZSByLk9QUy5tb3ZlVG86Y2FzZSByLk9QUy5saW5lVG86c1swXT1NYXRoLm1pbihzWzBdLGFbMF0pO3NbMV09TWF0aC5tYXgoc1sxXSxhWzBdKTtzWzJdPU1hdGgubWluKHNbMl0sYVsxXSk7c1szXT1NYXRoLm1heChzWzNdLGFbMV0pfX19cGFyc2VDb2xvclNwYWNlKHtjczplLHJlc291cmNlczp0LGxvY2FsQ29sb3JTcGFjZUNhY2hlOmF9KXtyZXR1cm4geS5Db2xvclNwYWNlLnBhcnNlQXN5bmMoe2NzOmUseHJlZjp0aGlzLnhyZWYscmVzb3VyY2VzOnQscGRmRnVuY3Rpb25GYWN0b3J5OnRoaXMuX3BkZkZ1bmN0aW9uRmFjdG9yeSxsb2NhbENvbG9yU3BhY2VDYWNoZTphfSkuY2F0Y2goKGU9PntpZihlIGluc3RhbmNlb2Ygci5BYm9ydEV4Y2VwdGlvbilyZXR1cm4gbnVsbDtpZih0aGlzLm9wdGlvbnMuaWdub3JlRXJyb3JzKXsoMCxyLndhcm4pKGBwYXJzZUNvbG9yU3BhY2UgLSBpZ25vcmluZyBDb2xvclNwYWNlOiAiJHtlfSIuYCk7cmV0dXJuIG51bGx9dGhyb3cgZX0pKX1wYXJzZVNoYWRpbmcoe3NoYWRpbmc6ZSxyZXNvdXJjZXM6dCxsb2NhbENvbG9yU3BhY2VDYWNoZTphLGxvY2FsU2hhZGluZ1BhdHRlcm5DYWNoZTpyfSl7bGV0IG49ci5nZXQoZSk7aWYoIW4pe2NvbnN0IGk9bC5QYXR0ZXJuLnBhcnNlU2hhZGluZyhlLHRoaXMueHJlZix0LHRoaXMuX3BkZkZ1bmN0aW9uRmFjdG9yeSxhKS5nZXRJUigpO249YHBhdHRlcm5fJHt0aGlzLmlkRmFjdG9yeS5jcmVhdGVPYmpJZCgpfWA7dGhpcy5wYXJzaW5nVHlwZTNGb250JiYobj1gJHt0aGlzLmlkRmFjdG9yeS5nZXREb2NJZCgpfV90eXBlM18ke259YCk7ci5zZXQoZSxuKTt0aGlzLnBhcnNpbmdUeXBlM0ZvbnQ/dGhpcy5oYW5kbGVyLnNlbmQoImNvbW1vbm9iaiIsW24sIlBhdHRlcm4iLGldKTp0aGlzLmhhbmRsZXIuc2VuZCgib2JqIixbbix0aGlzLnBhZ2VJbmRleCwiUGF0dGVybiIsaV0pfXJldHVybiBufWhhbmRsZUNvbG9yTihlLHQsYSxuLHMsbyxjLGgsdSxkKXtjb25zdCBmPWEucG9wKCk7aWYoZiBpbnN0YW5jZW9mIGkuTmFtZSl7Y29uc3QgZz1zLmdldFJhdyhmLm5hbWUpLHA9ZyBpbnN0YW5jZW9mIGkuUmVmJiZ1LmdldEJ5UmVmKGcpO2lmKHApdHJ5e2NvbnN0IHI9bi5iYXNlP24uYmFzZS5nZXRSZ2IoYSwwKTpudWxsLGk9KDAsbC5nZXRUaWxpbmdQYXR0ZXJuSVIpKHAub3BlcmF0b3JMaXN0SVIscC5kaWN0LHIpO2UuYWRkT3AodCxpKTtyZXR1cm59Y2F0Y2h7fWNvbnN0IGI9dGhpcy54cmVmLmZldGNoSWZSZWYoZyk7aWYoYil7Y29uc3QgaT1iIGluc3RhbmNlb2YgbS5CYXNlU3RyZWFtP2IuZGljdDpiLHM9aS5nZXQoIlBhdHRlcm5UeXBlIik7aWYocz09PUUpe2NvbnN0IHI9bi5iYXNlP24uYmFzZS5nZXRSZ2IoYSwwKTpudWxsO3JldHVybiB0aGlzLmhhbmRsZVRpbGluZ1R5cGUodCxyLG8sYixpLGUsYyx1KX1pZihzPT09Til7Y29uc3QgYT1pLmdldCgiU2hhZGluZyIpLHI9aS5nZXRBcnJheSgiTWF0cml4Iiksbj10aGlzLnBhcnNlU2hhZGluZyh7c2hhZGluZzphLHJlc291cmNlczpvLGxvY2FsQ29sb3JTcGFjZUNhY2hlOmgsbG9jYWxTaGFkaW5nUGF0dGVybkNhY2hlOmR9KTtlLmFkZE9wKHQsWyJTaGFkaW5nIixuLHJdKTtyZXR1cm59dGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYFVua25vd24gUGF0dGVyblR5cGU6ICR7c31gKX19dGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYFVua25vd24gUGF0dGVybk5hbWU6ICR7Zn1gKX1fcGFyc2VWaXNpYmlsaXR5RXhwcmVzc2lvbihlLHQsYSl7aWYoKyt0PjEwKXsoMCxyLndhcm4pKCJWaXNpYmlsaXR5IGV4cHJlc3Npb24gaXMgdG9vIGRlZXBseSBuZXN0ZWQiKTtyZXR1cm59Y29uc3Qgbj1lLmxlbmd0aCxzPXRoaXMueHJlZi5mZXRjaElmUmVmKGVbMF0pO2lmKCEobjwyKSYmcyBpbnN0YW5jZW9mIGkuTmFtZSl7c3dpdGNoKHMubmFtZSl7Y2FzZSJBbmQiOmNhc2UiT3IiOmNhc2UiTm90IjphLnB1c2gocy5uYW1lKTticmVhaztkZWZhdWx0OigwLHIud2FybikoYEludmFsaWQgb3BlcmF0b3IgJHtzLm5hbWV9IGluIHZpc2liaWxpdHkgZXhwcmVzc2lvbmApO3JldHVybn1mb3IobGV0IHI9MTtyPG47cisrKXtjb25zdCBuPWVbcl0scz10aGlzLnhyZWYuZmV0Y2hJZlJlZihuKTtpZihBcnJheS5pc0FycmF5KHMpKXtjb25zdCBlPVtdO2EucHVzaChlKTt0aGlzLl9wYXJzZVZpc2liaWxpdHlFeHByZXNzaW9uKHMsdCxlKX1lbHNlIG4gaW5zdGFuY2VvZiBpLlJlZiYmYS5wdXNoKG4udG9TdHJpbmcoKSl9fWVsc2UoMCxyLndhcm4pKCJJbnZhbGlkIHZpc2liaWxpdHkgZXhwcmVzc2lvbiIpfWFzeW5jIHBhcnNlTWFya2VkQ29udGVudFByb3BzKGUsdCl7bGV0IGE7aWYoZSBpbnN0YW5jZW9mIGkuTmFtZSl7YT10LmdldCgiUHJvcGVydGllcyIpLmdldChlLm5hbWUpfWVsc2V7aWYoIShlIGluc3RhbmNlb2YgaS5EaWN0KSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiT3B0aW9uYWwgY29udGVudCBwcm9wZXJ0aWVzIG1hbGZvcm1lZC4iKTthPWV9Y29uc3Qgbj1hLmdldCgiVHlwZSIpPy5uYW1lO2lmKCJPQ0ciPT09bilyZXR1cm57dHlwZTpuLGlkOmEub2JqSWR9O2lmKCJPQ01EIj09PW4pe2NvbnN0IGU9YS5nZXQoIlZFIik7aWYoQXJyYXkuaXNBcnJheShlKSl7Y29uc3QgdD1bXTt0aGlzLl9wYXJzZVZpc2liaWxpdHlFeHByZXNzaW9uKGUsMCx0KTtpZih0Lmxlbmd0aD4wKXJldHVybnt0eXBlOiJPQ01EIixleHByZXNzaW9uOnR9fWNvbnN0IHQ9YS5nZXQoIk9DR3MiKTtpZihBcnJheS5pc0FycmF5KHQpfHx0IGluc3RhbmNlb2YgaS5EaWN0KXtjb25zdCBlPVtdO2lmKEFycmF5LmlzQXJyYXkodCkpZm9yKGNvbnN0IGEgb2YgdCllLnB1c2goYS50b1N0cmluZygpKTtlbHNlIGUucHVzaCh0Lm9iaklkKTtyZXR1cm57dHlwZTpuLGlkczplLHBvbGljeTphLmdldCgiUCIpaW5zdGFuY2VvZiBpLk5hbWU/YS5nZXQoIlAiKS5uYW1lOm51bGwsZXhwcmVzc2lvbjpudWxsfX1pZih0IGluc3RhbmNlb2YgaS5SZWYpcmV0dXJue3R5cGU6bixpZDp0LnRvU3RyaW5nKCl9fXJldHVybiBudWxsfWdldE9wZXJhdG9yTGlzdCh7c3RyZWFtOmUsdGFzazp0LHJlc291cmNlczphLG9wZXJhdG9yTGlzdDpuLGluaXRpYWxTdGF0ZTpzPW51bGwsZmFsbGJhY2tGb250RGljdDpvPW51bGx9KXthfHw9aS5EaWN0LmVtcHR5O3N8fD1uZXcgRXZhbFN0YXRlO2lmKCFuKXRocm93IG5ldyBFcnJvcignZ2V0T3BlcmF0b3JMaXN0OiBtaXNzaW5nICJvcGVyYXRvckxpc3QiIHBhcmFtZXRlcicpO2NvbnN0IGM9dGhpcyxsPXRoaXMueHJlZjtsZXQgaD0hMTtjb25zdCB1PW5ldyBnLkxvY2FsSW1hZ2VDYWNoZSxkPW5ldyBnLkxvY2FsQ29sb3JTcGFjZUNhY2hlLGY9bmV3IGcuTG9jYWxHU3RhdGVDYWNoZSxwPW5ldyBnLkxvY2FsVGlsaW5nUGF0dGVybkNhY2hlLGI9bmV3IE1hcCx3PWEuZ2V0KCJYT2JqZWN0Iil8fGkuRGljdC5lbXB0eSxTPWEuZ2V0KCJQYXR0ZXJuIil8fGkuRGljdC5lbXB0eSx4PW5ldyBTdGF0ZU1hbmFnZXIocyksQz1uZXcgRXZhbHVhdG9yUHJlcHJvY2Vzc29yKGUsbCx4KSxrPW5ldyBUaW1lU2xvdE1hbmFnZXI7ZnVuY3Rpb24gY2xvc2VQZW5kaW5nUmVzdG9yZU9QUyhlKXtmb3IobGV0IGU9MCx0PUMuc2F2ZWRTdGF0ZXNEZXB0aDtlPHQ7ZSsrKW4uYWRkT3Aoci5PUFMucmVzdG9yZSxbXSl9cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiBwcm9taXNlQm9keShlLHMpe2NvbnN0IG5leHQ9ZnVuY3Rpb24odCl7UHJvbWlzZS5hbGwoW3Qsbi5yZWFkeV0pLnRoZW4oKGZ1bmN0aW9uKCl7dHJ5e3Byb21pc2VCb2R5KGUscyl9Y2F0Y2goZSl7cyhlKX19KSxzKX07dC5lbnN1cmVOb3RUZXJtaW5hdGVkKCk7ay5yZXNldCgpO2NvbnN0IGc9e307bGV0IHYsRixPLFQsTSxEO2Zvcig7ISh2PWsuY2hlY2soKSk7KXtnLmFyZ3M9bnVsbDtpZighQy5yZWFkKGcpKWJyZWFrO2xldCBlPWcuYXJncyxzPWcuZm47c3dpdGNoKDB8cyl7Y2FzZSByLk9QUy5wYWludFhPYmplY3Q6RD1lWzBdaW5zdGFuY2VvZiBpLk5hbWU7TT1lWzBdLm5hbWU7aWYoRCl7Y29uc3QgdD11LmdldEJ5TmFtZShNKTtpZih0KXtuLmFkZEltYWdlT3BzKHQuZm4sdC5hcmdzLHQub3B0aW9uYWxDb250ZW50KTtpbmNyZW1lbnRDYWNoZWRJbWFnZU1hc2tDb3VudCh0KTtlPW51bGw7Y29udGludWV9fW5leHQobmV3IFByb21pc2UoKGZ1bmN0aW9uKGUscyl7aWYoIUQpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlhPYmplY3QgbXVzdCBiZSByZWZlcnJlZCB0byBieSBuYW1lLiIpO2xldCBvPXcuZ2V0UmF3KE0pO2lmKG8gaW5zdGFuY2VvZiBpLlJlZil7Y29uc3QgdD11LmdldEJ5UmVmKG8pfHxjLl9yZWdpb25hbEltYWdlQ2FjaGUuZ2V0QnlSZWYobyk7aWYodCl7bi5hZGRJbWFnZU9wcyh0LmZuLHQuYXJncyx0Lm9wdGlvbmFsQ29udGVudCk7aW5jcmVtZW50Q2FjaGVkSW1hZ2VNYXNrQ291bnQodCk7ZSgpO3JldHVybn1jb25zdCBhPWMuZ2xvYmFsSW1hZ2VDYWNoZS5nZXREYXRhKG8sYy5wYWdlSW5kZXgpO2lmKGEpe24uYWRkRGVwZW5kZW5jeShhLm9iaklkKTtuLmFkZEltYWdlT3BzKGEuZm4sYS5hcmdzLGEub3B0aW9uYWxDb250ZW50KTtlKCk7cmV0dXJufW89bC5mZXRjaChvKX1pZighKG8gaW5zdGFuY2VvZiBtLkJhc2VTdHJlYW0pKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJYT2JqZWN0IHNob3VsZCBiZSBhIHN0cmVhbSIpO2NvbnN0IGg9by5kaWN0LmdldCgiU3VidHlwZSIpO2lmKCEoaCBpbnN0YW5jZW9mIGkuTmFtZSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlhPYmplY3Qgc2hvdWxkIGhhdmUgYSBOYW1lIHN1YnR5cGUiKTtpZigiRm9ybSIhPT1oLm5hbWUpaWYoIkltYWdlIiE9PWgubmFtZSl7aWYoIlBTIiE9PWgubmFtZSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgVW5oYW5kbGVkIFhPYmplY3Qgc3VidHlwZSAke2gubmFtZX1gKTsoMCxyLmluZm8pKCJJZ25vcmVkIFhPYmplY3Qgc3VidHlwZSBQUyIpO2UoKX1lbHNlIGMuYnVpbGRQYWludEltYWdlWE9iamVjdCh7cmVzb3VyY2VzOmEsaW1hZ2U6byxvcGVyYXRvckxpc3Q6bixjYWNoZUtleTpNLGxvY2FsSW1hZ2VDYWNoZTp1LGxvY2FsQ29sb3JTcGFjZUNhY2hlOmR9KS50aGVuKGUscyk7ZWxzZXt4LnNhdmUoKTtjLmJ1aWxkRm9ybVhPYmplY3QoYSxvLG51bGwsbix0LHguc3RhdGUuY2xvbmUoKSxkKS50aGVuKChmdW5jdGlvbigpe3gucmVzdG9yZSgpO2UoKX0pLHMpfX0pKS5jYXRjaCgoZnVuY3Rpb24oZSl7aWYoIShlIGluc3RhbmNlb2Ygci5BYm9ydEV4Y2VwdGlvbikpe2lmKCFjLm9wdGlvbnMuaWdub3JlRXJyb3JzKXRocm93IGU7KDAsci53YXJuKShgZ2V0T3BlcmF0b3JMaXN0IC0gaWdub3JpbmcgWE9iamVjdDogIiR7ZX0iLmApfX0pKSk7cmV0dXJuO2Nhc2Ugci5PUFMuc2V0Rm9udDp2YXIgRT1lWzFdO25leHQoYy5oYW5kbGVTZXRGb250KGEsZSxudWxsLG4sdCx4LnN0YXRlLG8pLnRoZW4oKGZ1bmN0aW9uKGUpe24uYWRkRGVwZW5kZW5jeShlKTtuLmFkZE9wKHIuT1BTLnNldEZvbnQsW2UsRV0pfSkpKTtyZXR1cm47Y2FzZSByLk9QUy5iZWdpblRleHQ6aD0hMDticmVhaztjYXNlIHIuT1BTLmVuZFRleHQ6aD0hMTticmVhaztjYXNlIHIuT1BTLmVuZElubGluZUltYWdlOnZhciBOPWVbMF0uY2FjaGVLZXk7aWYoTil7Y29uc3QgdD11LmdldEJ5TmFtZShOKTtpZih0KXtuLmFkZEltYWdlT3BzKHQuZm4sdC5hcmdzLHQub3B0aW9uYWxDb250ZW50KTtpbmNyZW1lbnRDYWNoZWRJbWFnZU1hc2tDb3VudCh0KTtlPW51bGw7Y29udGludWV9fW5leHQoYy5idWlsZFBhaW50SW1hZ2VYT2JqZWN0KHtyZXNvdXJjZXM6YSxpbWFnZTplWzBdLGlzSW5saW5lOiEwLG9wZXJhdG9yTGlzdDpuLGNhY2hlS2V5Ok4sbG9jYWxJbWFnZUNhY2hlOnUsbG9jYWxDb2xvclNwYWNlQ2FjaGU6ZH0pKTtyZXR1cm47Y2FzZSByLk9QUy5zaG93VGV4dDppZigheC5zdGF0ZS5mb250KXtjLmVuc3VyZVN0YXRlRm9udCh4LnN0YXRlKTtjb250aW51ZX1lWzBdPWMuaGFuZGxlVGV4dChlWzBdLHguc3RhdGUpO2JyZWFrO2Nhc2Ugci5PUFMuc2hvd1NwYWNlZFRleHQ6aWYoIXguc3RhdGUuZm9udCl7Yy5lbnN1cmVTdGF0ZUZvbnQoeC5zdGF0ZSk7Y29udGludWV9dmFyIEw9W10sJD14LnN0YXRlO2Zvcihjb25zdCB0IG9mIGVbMF0pInN0cmluZyI9PXR5cGVvZiB0P0wucHVzaCguLi5jLmhhbmRsZVRleHQodCwkKSk6Im51bWJlciI9PXR5cGVvZiB0JiZMLnB1c2godCk7ZVswXT1MO3M9ci5PUFMuc2hvd1RleHQ7YnJlYWs7Y2FzZSByLk9QUy5uZXh0TGluZVNob3dUZXh0OmlmKCF4LnN0YXRlLmZvbnQpe2MuZW5zdXJlU3RhdGVGb250KHguc3RhdGUpO2NvbnRpbnVlfW4uYWRkT3Aoci5PUFMubmV4dExpbmUpO2VbMF09Yy5oYW5kbGVUZXh0KGVbMF0seC5zdGF0ZSk7cz1yLk9QUy5zaG93VGV4dDticmVhaztjYXNlIHIuT1BTLm5leHRMaW5lU2V0U3BhY2luZ1Nob3dUZXh0OmlmKCF4LnN0YXRlLmZvbnQpe2MuZW5zdXJlU3RhdGVGb250KHguc3RhdGUpO2NvbnRpbnVlfW4uYWRkT3Aoci5PUFMubmV4dExpbmUpO24uYWRkT3Aoci5PUFMuc2V0V29yZFNwYWNpbmcsW2Uuc2hpZnQoKV0pO24uYWRkT3Aoci5PUFMuc2V0Q2hhclNwYWNpbmcsW2Uuc2hpZnQoKV0pO2VbMF09Yy5oYW5kbGVUZXh0KGVbMF0seC5zdGF0ZSk7cz1yLk9QUy5zaG93VGV4dDticmVhaztjYXNlIHIuT1BTLnNldFRleHRSZW5kZXJpbmdNb2RlOnguc3RhdGUudGV4dFJlbmRlcmluZ01vZGU9ZVswXTticmVhaztjYXNlIHIuT1BTLnNldEZpbGxDb2xvclNwYWNlOntjb25zdCB0PXkuQ29sb3JTcGFjZS5nZXRDYWNoZWQoZVswXSxsLGQpO2lmKHQpe3guc3RhdGUuZmlsbENvbG9yU3BhY2U9dDtjb250aW51ZX1uZXh0KGMucGFyc2VDb2xvclNwYWNlKHtjczplWzBdLHJlc291cmNlczphLGxvY2FsQ29sb3JTcGFjZUNhY2hlOmR9KS50aGVuKChmdW5jdGlvbihlKXtlJiYoeC5zdGF0ZS5maWxsQ29sb3JTcGFjZT1lKX0pKSk7cmV0dXJufWNhc2Ugci5PUFMuc2V0U3Ryb2tlQ29sb3JTcGFjZTp7Y29uc3QgdD15LkNvbG9yU3BhY2UuZ2V0Q2FjaGVkKGVbMF0sbCxkKTtpZih0KXt4LnN0YXRlLnN0cm9rZUNvbG9yU3BhY2U9dDtjb250aW51ZX1uZXh0KGMucGFyc2VDb2xvclNwYWNlKHtjczplWzBdLHJlc291cmNlczphLGxvY2FsQ29sb3JTcGFjZUNhY2hlOmR9KS50aGVuKChmdW5jdGlvbihlKXtlJiYoeC5zdGF0ZS5zdHJva2VDb2xvclNwYWNlPWUpfSkpKTtyZXR1cm59Y2FzZSByLk9QUy5zZXRGaWxsQ29sb3I6VD14LnN0YXRlLmZpbGxDb2xvclNwYWNlO2U9VC5nZXRSZ2IoZSwwKTtzPXIuT1BTLnNldEZpbGxSR0JDb2xvcjticmVhaztjYXNlIHIuT1BTLnNldFN0cm9rZUNvbG9yOlQ9eC5zdGF0ZS5zdHJva2VDb2xvclNwYWNlO2U9VC5nZXRSZ2IoZSwwKTtzPXIuT1BTLnNldFN0cm9rZVJHQkNvbG9yO2JyZWFrO2Nhc2Ugci5PUFMuc2V0RmlsbEdyYXk6eC5zdGF0ZS5maWxsQ29sb3JTcGFjZT15LkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5ncmF5O2U9eS5Db2xvclNwYWNlLnNpbmdsZXRvbnMuZ3JheS5nZXRSZ2IoZSwwKTtzPXIuT1BTLnNldEZpbGxSR0JDb2xvcjticmVhaztjYXNlIHIuT1BTLnNldFN0cm9rZUdyYXk6eC5zdGF0ZS5zdHJva2VDb2xvclNwYWNlPXkuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmdyYXk7ZT15LkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5ncmF5LmdldFJnYihlLDApO3M9ci5PUFMuc2V0U3Ryb2tlUkdCQ29sb3I7YnJlYWs7Y2FzZSByLk9QUy5zZXRGaWxsQ01ZS0NvbG9yOnguc3RhdGUuZmlsbENvbG9yU3BhY2U9eS5Db2xvclNwYWNlLnNpbmdsZXRvbnMuY215aztlPXkuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmNteWsuZ2V0UmdiKGUsMCk7cz1yLk9QUy5zZXRGaWxsUkdCQ29sb3I7YnJlYWs7Y2FzZSByLk9QUy5zZXRTdHJva2VDTVlLQ29sb3I6eC5zdGF0ZS5zdHJva2VDb2xvclNwYWNlPXkuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmNteWs7ZT15LkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5jbXlrLmdldFJnYihlLDApO3M9ci5PUFMuc2V0U3Ryb2tlUkdCQ29sb3I7YnJlYWs7Y2FzZSByLk9QUy5zZXRGaWxsUkdCQ29sb3I6eC5zdGF0ZS5maWxsQ29sb3JTcGFjZT15LkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5yZ2I7ZT15LkNvbG9yU3BhY2Uuc2luZ2xldG9ucy5yZ2IuZ2V0UmdiKGUsMCk7YnJlYWs7Y2FzZSByLk9QUy5zZXRTdHJva2VSR0JDb2xvcjp4LnN0YXRlLnN0cm9rZUNvbG9yU3BhY2U9eS5Db2xvclNwYWNlLnNpbmdsZXRvbnMucmdiO2U9eS5Db2xvclNwYWNlLnNpbmdsZXRvbnMucmdiLmdldFJnYihlLDApO2JyZWFrO2Nhc2Ugci5PUFMuc2V0RmlsbENvbG9yTjpUPXguc3RhdGUuZmlsbENvbG9yU3BhY2U7aWYoIlBhdHRlcm4iPT09VC5uYW1lKXtuZXh0KGMuaGFuZGxlQ29sb3JOKG4sci5PUFMuc2V0RmlsbENvbG9yTixlLFQsUyxhLHQsZCxwLGIpKTtyZXR1cm59ZT1ULmdldFJnYihlLDApO3M9ci5PUFMuc2V0RmlsbFJHQkNvbG9yO2JyZWFrO2Nhc2Ugci5PUFMuc2V0U3Ryb2tlQ29sb3JOOlQ9eC5zdGF0ZS5zdHJva2VDb2xvclNwYWNlO2lmKCJQYXR0ZXJuIj09PVQubmFtZSl7bmV4dChjLmhhbmRsZUNvbG9yTihuLHIuT1BTLnNldFN0cm9rZUNvbG9yTixlLFQsUyxhLHQsZCxwLGIpKTtyZXR1cm59ZT1ULmdldFJnYihlLDApO3M9ci5PUFMuc2V0U3Ryb2tlUkdCQ29sb3I7YnJlYWs7Y2FzZSByLk9QUy5zaGFkaW5nRmlsbDp2YXIgXz1hLmdldCgiU2hhZGluZyIpO2lmKCFfKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJObyBzaGFkaW5nIHJlc291cmNlIGZvdW5kIik7dmFyIGo9Xy5nZXQoZVswXS5uYW1lKTtpZighail0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiTm8gc2hhZGluZyBvYmplY3QgZm91bmQiKTtlPVtjLnBhcnNlU2hhZGluZyh7c2hhZGluZzpqLHJlc291cmNlczphLGxvY2FsQ29sb3JTcGFjZUNhY2hlOmQsbG9jYWxTaGFkaW5nUGF0dGVybkNhY2hlOmJ9KV07cz1yLk9QUy5zaGFkaW5nRmlsbDticmVhaztjYXNlIHIuT1BTLnNldEdTdGF0ZTpEPWVbMF1pbnN0YW5jZW9mIGkuTmFtZTtNPWVbMF0ubmFtZTtpZihEKXtjb25zdCB0PWYuZ2V0QnlOYW1lKE0pO2lmKHQpe3QubGVuZ3RoPjAmJm4uYWRkT3Aoci5PUFMuc2V0R1N0YXRlLFt0XSk7ZT1udWxsO2NvbnRpbnVlfX1uZXh0KG5ldyBQcm9taXNlKChmdW5jdGlvbihlLHMpe2lmKCFEKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJHU3RhdGUgbXVzdCBiZSByZWZlcnJlZCB0byBieSBuYW1lLiIpO2NvbnN0IG89YS5nZXQoIkV4dEdTdGF0ZSIpO2lmKCEobyBpbnN0YW5jZW9mIGkuRGljdCkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkV4dEdTdGF0ZSBzaG91bGQgYmUgYSBkaWN0aW9uYXJ5LiIpO2NvbnN0IGw9by5nZXQoTSk7aWYoIShsIGluc3RhbmNlb2YgaS5EaWN0KSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiR1N0YXRlIHNob3VsZCBiZSBhIGRpY3Rpb25hcnkuIik7Yy5zZXRHU3RhdGUoe3Jlc291cmNlczphLGdTdGF0ZTpsLG9wZXJhdG9yTGlzdDpuLGNhY2hlS2V5Ok0sdGFzazp0LHN0YXRlTWFuYWdlcjp4LGxvY2FsR1N0YXRlQ2FjaGU6Zixsb2NhbENvbG9yU3BhY2VDYWNoZTpkfSkudGhlbihlLHMpfSkpLmNhdGNoKChmdW5jdGlvbihlKXtpZighKGUgaW5zdGFuY2VvZiByLkFib3J0RXhjZXB0aW9uKSl7aWYoIWMub3B0aW9ucy5pZ25vcmVFcnJvcnMpdGhyb3cgZTsoMCxyLndhcm4pKGBnZXRPcGVyYXRvckxpc3QgLSBpZ25vcmluZyBFeHRHU3RhdGU6ICIke2V9Ii5gKX19KSkpO3JldHVybjtjYXNlIHIuT1BTLm1vdmVUbzpjYXNlIHIuT1BTLmxpbmVUbzpjYXNlIHIuT1BTLmN1cnZlVG86Y2FzZSByLk9QUy5jdXJ2ZVRvMjpjYXNlIHIuT1BTLmN1cnZlVG8zOmNhc2Ugci5PUFMuY2xvc2VQYXRoOmNhc2Ugci5PUFMucmVjdGFuZ2xlOmMuYnVpbGRQYXRoKG4scyxlLGgpO2NvbnRpbnVlO2Nhc2Ugci5PUFMubWFya1BvaW50OmNhc2Ugci5PUFMubWFya1BvaW50UHJvcHM6Y2FzZSByLk9QUy5iZWdpbkNvbXBhdDpjYXNlIHIuT1BTLmVuZENvbXBhdDpjb250aW51ZTtjYXNlIHIuT1BTLmJlZ2luTWFya2VkQ29udGVudFByb3BzOmlmKCEoZVswXWluc3RhbmNlb2YgaS5OYW1lKSl7KDAsci53YXJuKShgRXhwZWN0ZWQgbmFtZSBmb3IgYmVnaW5NYXJrZWRDb250ZW50UHJvcHMgYXJnMD0ke2VbMF19YCk7Y29udGludWV9aWYoIk9DIj09PWVbMF0ubmFtZSl7bmV4dChjLnBhcnNlTWFya2VkQ29udGVudFByb3BzKGVbMV0sYSkudGhlbigoZT0+e24uYWRkT3Aoci5PUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsWyJPQyIsZV0pfSkpLmNhdGNoKChlPT57aWYoIShlIGluc3RhbmNlb2Ygci5BYm9ydEV4Y2VwdGlvbikpe2lmKCFjLm9wdGlvbnMuaWdub3JlRXJyb3JzKXRocm93IGU7KDAsci53YXJuKShgZ2V0T3BlcmF0b3JMaXN0IC0gaWdub3JpbmcgYmVnaW5NYXJrZWRDb250ZW50UHJvcHM6ICIke2V9Ii5gKX19KSkpO3JldHVybn1lPVtlWzBdLm5hbWUsZVsxXWluc3RhbmNlb2YgaS5EaWN0P2VbMV0uZ2V0KCJNQ0lEIik6bnVsbF07YnJlYWs7Y2FzZSByLk9QUy5iZWdpbk1hcmtlZENvbnRlbnQ6Y2FzZSByLk9QUy5lbmRNYXJrZWRDb250ZW50OmRlZmF1bHQ6aWYobnVsbCE9PWUpe2ZvcihGPTAsTz1lLmxlbmd0aDtGPE8mJiEoZVtGXWluc3RhbmNlb2YgaS5EaWN0KTtGKyspO2lmKEY8Tyl7KDAsci53YXJuKSgiZ2V0T3BlcmF0b3JMaXN0IC0gaWdub3Jpbmcgb3BlcmF0b3I6ICIrcyk7Y29udGludWV9fX1uLmFkZE9wKHMsZSl9aWYodiluZXh0KFIpO2Vsc2V7Y2xvc2VQZW5kaW5nUmVzdG9yZU9QUygpO2UoKX19KSkuY2F0Y2goKGU9PntpZighKGUgaW5zdGFuY2VvZiByLkFib3J0RXhjZXB0aW9uKSl7aWYoIXRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpdGhyb3cgZTsoMCxyLndhcm4pKGBnZXRPcGVyYXRvckxpc3QgLSBpZ25vcmluZyBlcnJvcnMgZHVyaW5nICIke3QubmFtZX0iIHRhc2s6ICIke2V9Ii5gKTtjbG9zZVBlbmRpbmdSZXN0b3JlT1BTKCl9fSkpfWdldFRleHRDb250ZW50KHtzdHJlYW06ZSx0YXNrOnQscmVzb3VyY2VzOmEsc3RhdGVNYW5hZ2VyOm49bnVsbCxpbmNsdWRlTWFya2VkQ29udGVudDpzPSExLHNpbms6byxzZWVuU3R5bGVzOmM9bmV3IFNldCx2aWV3Qm94OmwsbWFya2VkQ29udGVudERhdGE6aD1udWxsLGRpc2FibGVOb3JtYWxpemF0aW9uOnU9ITF9KXthfHw9aS5EaWN0LmVtcHR5O258fD1uZXcgU3RhdGVNYW5hZ2VyKG5ldyBUZXh0U3RhdGUpO3MmJihofHw9e2xldmVsOjB9KTtjb25zdCBkPXtpdGVtczpbXSxzdHlsZXM6T2JqZWN0LmNyZWF0ZShudWxsKX0sZj17aW5pdGlhbGl6ZWQ6ITEsc3RyOltdLHRvdGFsV2lkdGg6MCx0b3RhbEhlaWdodDowLHdpZHRoOjAsaGVpZ2h0OjAsdmVydGljYWw6ITEscHJldlRyYW5zZm9ybTpudWxsLHRleHRBZHZhbmNlU2NhbGU6MCxzcGFjZUluRmxvd01pbjowLHNwYWNlSW5GbG93TWF4OjAsdHJhY2tpbmdTcGFjZU1pbjoxLzAsbmVnYXRpdmVTcGFjZU1heDotMS8wLG5vdEFTcGFjZTotMS8wLHRyYW5zZm9ybTpudWxsLGZvbnROYW1lOm51bGwsaGFzRU9MOiExfSxwPVsiICIsIiAiXTtsZXQgeT0wO2Z1bmN0aW9uIHNhdmVMYXN0Q2hhcihlKXtjb25zdCB0PSh5KzEpJTIsYT0iICIhPT1wW3ldJiYiICI9PT1wW3RdO3BbeV09ZTt5PXQ7cmV0dXJuIGF9ZnVuY3Rpb24gc2hvdWxkQWRkV2hpdGVwc2FjZSgpe3JldHVybiIgIiE9PXBbeV0mJiIgIj09PXBbKHkrMSklMl19ZnVuY3Rpb24gcmVzZXRMYXN0Q2hhcnMoKXtwWzBdPXBbMV09IiAiO3k9MH1jb25zdCB3PXRoaXMsUz10aGlzLnhyZWYseD1bXTtsZXQgQz1udWxsO2NvbnN0IGs9bmV3IGcuTG9jYWxJbWFnZUNhY2hlLHY9bmV3IGcuTG9jYWxHU3RhdGVDYWNoZSxGPW5ldyBFdmFsdWF0b3JQcmVwcm9jZXNzb3IoZSxTLG4pO2xldCBPO2Z1bmN0aW9uIHB1c2hXaGl0ZXNwYWNlKHt3aWR0aDplPTAsaGVpZ2h0OnQ9MCx0cmFuc2Zvcm06YT1mLnByZXZUcmFuc2Zvcm0sZm9udE5hbWU6cj1mLmZvbnROYW1lfSl7ZC5pdGVtcy5wdXNoKHtzdHI6IiAiLGRpcjoibHRyIix3aWR0aDplLGhlaWdodDp0LHRyYW5zZm9ybTphLGZvbnROYW1lOnIsaGFzRU9MOiExfSl9ZnVuY3Rpb24gZ2V0Q3VycmVudFRleHRUcmFuc2Zvcm0oKXtjb25zdCBlPU8uZm9udCx0PVtPLmZvbnRTaXplKk8udGV4dEhTY2FsZSwwLDAsTy5mb250U2l6ZSwwLE8udGV4dFJpc2VdO2lmKGUuaXNUeXBlM0ZvbnQmJihPLmZvbnRTaXplPD0xfHxlLmlzQ2hhckJCb3gpJiYhKDAsci5pc0FycmF5RXF1YWwpKE8uZm9udE1hdHJpeCxyLkZPTlRfSURFTlRJVFlfTUFUUklYKSl7Y29uc3QgYT1lLmJib3hbM10tZS5iYm94WzFdO2E+MCYmKHRbM10qPWEqTy5mb250TWF0cml4WzNdKX1yZXR1cm4gci5VdGlsLnRyYW5zZm9ybShPLmN0bSxyLlV0aWwudHJhbnNmb3JtKE8udGV4dE1hdHJpeCx0KSl9ZnVuY3Rpb24gZW5zdXJlVGV4dENvbnRlbnRJdGVtKCl7aWYoZi5pbml0aWFsaXplZClyZXR1cm4gZjtjb25zdHtmb250OmUsbG9hZGVkTmFtZTp0fT1PO2lmKCFjLmhhcyh0KSl7Yy5hZGQodCk7ZC5zdHlsZXNbdF09e2ZvbnRGYW1pbHk6ZS5mYWxsYmFja05hbWUsYXNjZW50OmUuYXNjZW50LGRlc2NlbnQ6ZS5kZXNjZW50LHZlcnRpY2FsOmUudmVydGljYWx9fWYuZm9udE5hbWU9dDtjb25zdCBhPWYudHJhbnNmb3JtPWdldEN1cnJlbnRUZXh0VHJhbnNmb3JtKCk7aWYoZS52ZXJ0aWNhbCl7Zi53aWR0aD1mLnRvdGFsV2lkdGg9TWF0aC5oeXBvdChhWzBdLGFbMV0pO2YuaGVpZ2h0PWYudG90YWxIZWlnaHQ9MDtmLnZlcnRpY2FsPSEwfWVsc2V7Zi53aWR0aD1mLnRvdGFsV2lkdGg9MDtmLmhlaWdodD1mLnRvdGFsSGVpZ2h0PU1hdGguaHlwb3QoYVsyXSxhWzNdKTtmLnZlcnRpY2FsPSExfWNvbnN0IHI9TWF0aC5oeXBvdChPLnRleHRMaW5lTWF0cml4WzBdLE8udGV4dExpbmVNYXRyaXhbMV0pLG49TWF0aC5oeXBvdChPLmN0bVswXSxPLmN0bVsxXSk7Zi50ZXh0QWR2YW5jZVNjYWxlPW4qcjtjb25zdHtmb250U2l6ZTppfT1PO2YudHJhY2tpbmdTcGFjZU1pbj0uMTAyKmk7Zi5ub3RBU3BhY2U9LjAzKmk7Zi5uZWdhdGl2ZVNwYWNlTWF4PS0uMippO2Yuc3BhY2VJbkZsb3dNaW49LjEwMippO2Yuc3BhY2VJbkZsb3dNYXg9LjYqaTtmLmhhc0VPTD0hMTtmLmluaXRpYWxpemVkPSEwO3JldHVybiBmfWZ1bmN0aW9uIHVwZGF0ZUFkdmFuY2VTY2FsZSgpe2lmKCFmLmluaXRpYWxpemVkKXJldHVybjtjb25zdCBlPU1hdGguaHlwb3QoTy50ZXh0TGluZU1hdHJpeFswXSxPLnRleHRMaW5lTWF0cml4WzFdKSx0PU1hdGguaHlwb3QoTy5jdG1bMF0sTy5jdG1bMV0pKmU7aWYodCE9PWYudGV4dEFkdmFuY2VTY2FsZSl7aWYoZi52ZXJ0aWNhbCl7Zi50b3RhbEhlaWdodCs9Zi5oZWlnaHQqZi50ZXh0QWR2YW5jZVNjYWxlO2YuaGVpZ2h0PTB9ZWxzZXtmLnRvdGFsV2lkdGgrPWYud2lkdGgqZi50ZXh0QWR2YW5jZVNjYWxlO2Yud2lkdGg9MH1mLnRleHRBZHZhbmNlU2NhbGU9dH19ZnVuY3Rpb24gaGFuZGxlU2V0Rm9udChlLG4pe3JldHVybiB3LmxvYWRGb250KGUsbixhKS50aGVuKChmdW5jdGlvbihlKXtyZXR1cm4gZS5mb250LmlzVHlwZTNGb250P2UubG9hZFR5cGUzRGF0YSh3LGEsdCkuY2F0Y2goKGZ1bmN0aW9uKCl7fSkpLnRoZW4oKGZ1bmN0aW9uKCl7cmV0dXJuIGV9KSk6ZX0pKS50aGVuKChmdW5jdGlvbihlKXtPLmxvYWRlZE5hbWU9ZS5sb2FkZWROYW1lO08uZm9udD1lLmZvbnQ7Ty5mb250TWF0cml4PWUuZm9udC5mb250TWF0cml4fHxyLkZPTlRfSURFTlRJVFlfTUFUUklYfSkpfWZ1bmN0aW9uIGFwcGx5SW52ZXJzZVJvdGF0aW9uKGUsdCxhKXtjb25zdCByPU1hdGguaHlwb3QoYVswXSxhWzFdKTtyZXR1cm5bKGFbMF0qZSthWzFdKnQpL3IsKGFbMl0qZSthWzNdKnQpL3JdfWZ1bmN0aW9uIGNvbXBhcmVXaXRoTGFzdFBvc2l0aW9uKGUpe2NvbnN0IHQ9Z2V0Q3VycmVudFRleHRUcmFuc2Zvcm0oKTtsZXQgYT10WzRdLHI9dFs1XTtpZihPLmZvbnQ/LnZlcnRpY2FsKXtpZihhPGxbMF18fGE+bFsyXXx8citlPGxbMV18fHI+bFszXSlyZXR1cm4hMX1lbHNlIGlmKGErZTxsWzBdfHxhPmxbMl18fHI8bFsxXXx8cj5sWzNdKXJldHVybiExO2lmKCFPLmZvbnR8fCFmLnByZXZUcmFuc2Zvcm0pcmV0dXJuITA7bGV0IG49Zi5wcmV2VHJhbnNmb3JtWzRdLGk9Zi5wcmV2VHJhbnNmb3JtWzVdO2lmKG49PT1hJiZpPT09cilyZXR1cm4hMDtsZXQgcz0tMTt0WzBdJiYwPT09dFsxXSYmMD09PXRbMl0/cz10WzBdPjA/MDoxODA6dFsxXSYmMD09PXRbMF0mJjA9PT10WzNdJiYocz10WzFdPjA/OTA6MjcwKTtzd2l0Y2gocyl7Y2FzZSAwOmJyZWFrO2Nhc2UgOTA6W2Escl09W3IsYV07W24saV09W2ksbl07YnJlYWs7Y2FzZSAxODA6W2EscixuLGldPVstYSwtciwtbiwtaV07YnJlYWs7Y2FzZSAyNzA6W2Escl09Wy1yLC1hXTtbbixpXT1bLWksLW5dO2JyZWFrO2RlZmF1bHQ6W2Escl09YXBwbHlJbnZlcnNlUm90YXRpb24oYSxyLHQpO1tuLGldPWFwcGx5SW52ZXJzZVJvdGF0aW9uKG4saSxmLnByZXZUcmFuc2Zvcm0pfWlmKE8uZm9udC52ZXJ0aWNhbCl7Y29uc3QgZT0oaS1yKS9mLnRleHRBZHZhbmNlU2NhbGUsdD1hLW4scz1NYXRoLnNpZ24oZi5oZWlnaHQpO2lmKGU8cypmLm5lZ2F0aXZlU3BhY2VNYXgpe2lmKE1hdGguYWJzKHQpPi41KmYud2lkdGgpe2FwcGVuZEVPTCgpO3JldHVybiEwfXJlc2V0TGFzdENoYXJzKCk7Zmx1c2hUZXh0Q29udGVudEl0ZW0oKTtyZXR1cm4hMH1pZihNYXRoLmFicyh0KT5mLndpZHRoKXthcHBlbmRFT0woKTtyZXR1cm4hMH1lPD1zKmYubm90QVNwYWNlJiZyZXNldExhc3RDaGFycygpO2lmKGU8PXMqZi50cmFja2luZ1NwYWNlTWluKWlmKHNob3VsZEFkZFdoaXRlcHNhY2UoKSl7cmVzZXRMYXN0Q2hhcnMoKTtmbHVzaFRleHRDb250ZW50SXRlbSgpO3B1c2hXaGl0ZXNwYWNlKHtoZWlnaHQ6TWF0aC5hYnMoZSl9KX1lbHNlIGYuaGVpZ2h0Kz1lO2Vsc2UgaWYoIWFkZEZha2VTcGFjZXMoZSxmLnByZXZUcmFuc2Zvcm0scykpaWYoMD09PWYuc3RyLmxlbmd0aCl7cmVzZXRMYXN0Q2hhcnMoKTtwdXNoV2hpdGVzcGFjZSh7aGVpZ2h0Ok1hdGguYWJzKGUpfSl9ZWxzZSBmLmhlaWdodCs9ZTtNYXRoLmFicyh0KT4uMjUqZi53aWR0aCYmZmx1c2hUZXh0Q29udGVudEl0ZW0oKTtyZXR1cm4hMH1jb25zdCBvPShhLW4pL2YudGV4dEFkdmFuY2VTY2FsZSxjPXItaSxoPU1hdGguc2lnbihmLndpZHRoKTtpZihvPGgqZi5uZWdhdGl2ZVNwYWNlTWF4KXtpZihNYXRoLmFicyhjKT4uNSpmLmhlaWdodCl7YXBwZW5kRU9MKCk7cmV0dXJuITB9cmVzZXRMYXN0Q2hhcnMoKTtmbHVzaFRleHRDb250ZW50SXRlbSgpO3JldHVybiEwfWlmKE1hdGguYWJzKGMpPmYuaGVpZ2h0KXthcHBlbmRFT0woKTtyZXR1cm4hMH1vPD1oKmYubm90QVNwYWNlJiZyZXNldExhc3RDaGFycygpO2lmKG88PWgqZi50cmFja2luZ1NwYWNlTWluKWlmKHNob3VsZEFkZFdoaXRlcHNhY2UoKSl7cmVzZXRMYXN0Q2hhcnMoKTtmbHVzaFRleHRDb250ZW50SXRlbSgpO3B1c2hXaGl0ZXNwYWNlKHt3aWR0aDpNYXRoLmFicyhvKX0pfWVsc2UgZi53aWR0aCs9bztlbHNlIGlmKCFhZGRGYWtlU3BhY2VzKG8sZi5wcmV2VHJhbnNmb3JtLGgpKWlmKDA9PT1mLnN0ci5sZW5ndGgpe3Jlc2V0TGFzdENoYXJzKCk7cHVzaFdoaXRlc3BhY2Uoe3dpZHRoOk1hdGguYWJzKG8pfSl9ZWxzZSBmLndpZHRoKz1vO01hdGguYWJzKGMpPi4yNSpmLmhlaWdodCYmZmx1c2hUZXh0Q29udGVudEl0ZW0oKTtyZXR1cm4hMH1mdW5jdGlvbiBidWlsZFRleHRDb250ZW50SXRlbSh7Y2hhcnM6ZSxleHRyYVNwYWNpbmc6dH0pe2NvbnN0IGE9Ty5mb250O2lmKCFlKXtjb25zdCBlPU8uY2hhclNwYWNpbmcrdDtlJiYoYS52ZXJ0aWNhbD9PLnRyYW5zbGF0ZVRleHRNYXRyaXgoMCwtZSk6Ty50cmFuc2xhdGVUZXh0TWF0cml4KGUqTy50ZXh0SFNjYWxlLDApKTtyZXR1cm59Y29uc3Qgcj1hLmNoYXJzVG9HbHlwaHMoZSksbj1PLmZvbnRNYXRyaXhbMF0qTy5mb250U2l6ZTtmb3IobGV0IGU9MCxpPXIubGVuZ3RoO2U8aTtlKyspe2NvbnN0IHM9cltlXSx7Y2F0ZWdvcnk6b309cztpZihvLmlzSW52aXNpYmxlRm9ybWF0TWFyayljb250aW51ZTtsZXQgYz1PLmNoYXJTcGFjaW5nKyhlKzE9PT1pP3Q6MCksbD1zLndpZHRoO2EudmVydGljYWwmJihsPXMudm1ldHJpYz9zLnZtZXRyaWNbMF06LWwpO2xldCBoPWwqbjtpZihvLmlzV2hpdGVzcGFjZSl7aWYoYS52ZXJ0aWNhbCl7Yys9LWgrTy53b3JkU3BhY2luZztPLnRyYW5zbGF0ZVRleHRNYXRyaXgoMCwtYyl9ZWxzZXtjKz1oK08ud29yZFNwYWNpbmc7Ty50cmFuc2xhdGVUZXh0TWF0cml4KGMqTy50ZXh0SFNjYWxlLDApfXNhdmVMYXN0Q2hhcigiICIpO2NvbnRpbnVlfWlmKCFvLmlzWmVyb1dpZHRoRGlhY3JpdGljJiYhY29tcGFyZVdpdGhMYXN0UG9zaXRpb24oaCkpe2EudmVydGljYWw/Ty50cmFuc2xhdGVUZXh0TWF0cml4KDAsaCk6Ty50cmFuc2xhdGVUZXh0TWF0cml4KGgqTy50ZXh0SFNjYWxlLDApO2NvbnRpbnVlfWNvbnN0IHU9ZW5zdXJlVGV4dENvbnRlbnRJdGVtKCk7by5pc1plcm9XaWR0aERpYWNyaXRpYyYmKGg9MCk7aWYoYS52ZXJ0aWNhbCl7Ty50cmFuc2xhdGVUZXh0TWF0cml4KDAsaCk7aD1NYXRoLmFicyhoKTt1LmhlaWdodCs9aH1lbHNle2gqPU8udGV4dEhTY2FsZTtPLnRyYW5zbGF0ZVRleHRNYXRyaXgoaCwwKTt1LndpZHRoKz1ofWgmJih1LnByZXZUcmFuc2Zvcm09Z2V0Q3VycmVudFRleHRUcmFuc2Zvcm0oKSk7Y29uc3QgZD1zLnVuaWNvZGU7c2F2ZUxhc3RDaGFyKGQpJiZ1LnN0ci5wdXNoKCIgIik7dS5zdHIucHVzaChkKTtjJiYoYS52ZXJ0aWNhbD9PLnRyYW5zbGF0ZVRleHRNYXRyaXgoMCwtYyk6Ty50cmFuc2xhdGVUZXh0TWF0cml4KGMqTy50ZXh0SFNjYWxlLDApKX19ZnVuY3Rpb24gYXBwZW5kRU9MKCl7cmVzZXRMYXN0Q2hhcnMoKTtpZihmLmluaXRpYWxpemVkKXtmLmhhc0VPTD0hMDtmbHVzaFRleHRDb250ZW50SXRlbSgpfWVsc2UgZC5pdGVtcy5wdXNoKHtzdHI6IiIsZGlyOiJsdHIiLHdpZHRoOjAsaGVpZ2h0OjAsdHJhbnNmb3JtOmdldEN1cnJlbnRUZXh0VHJhbnNmb3JtKCksZm9udE5hbWU6Ty5sb2FkZWROYW1lLGhhc0VPTDohMH0pfWZ1bmN0aW9uIGFkZEZha2VTcGFjZXMoZSx0LGEpe2lmKGEqZi5zcGFjZUluRmxvd01pbjw9ZSYmZTw9YSpmLnNwYWNlSW5GbG93TWF4KXtpZihmLmluaXRpYWxpemVkKXtyZXNldExhc3RDaGFycygpO2Yuc3RyLnB1c2goIiAiKX1yZXR1cm4hMX1jb25zdCByPWYuZm9udE5hbWU7bGV0IG49MDtpZihmLnZlcnRpY2FsKXtuPWU7ZT0wfWZsdXNoVGV4dENvbnRlbnRJdGVtKCk7cmVzZXRMYXN0Q2hhcnMoKTtwdXNoV2hpdGVzcGFjZSh7d2lkdGg6TWF0aC5hYnMoZSksaGVpZ2h0Ok1hdGguYWJzKG4pLHRyYW5zZm9ybTp0fHxnZXRDdXJyZW50VGV4dFRyYW5zZm9ybSgpLGZvbnROYW1lOnJ9KTtyZXR1cm4hMH1mdW5jdGlvbiBmbHVzaFRleHRDb250ZW50SXRlbSgpe2lmKGYuaW5pdGlhbGl6ZWQmJmYuc3RyKXtmLnZlcnRpY2FsP2YudG90YWxIZWlnaHQrPWYuaGVpZ2h0KmYudGV4dEFkdmFuY2VTY2FsZTpmLnRvdGFsV2lkdGgrPWYud2lkdGgqZi50ZXh0QWR2YW5jZVNjYWxlO2QuaXRlbXMucHVzaChmdW5jdGlvbiBydW5CaWRpVHJhbnNmb3JtKGUpe2xldCB0PWUuc3RyLmpvaW4oIiIpO3V8fCh0PSgwLHIubm9ybWFsaXplVW5pY29kZSkodCkpO2NvbnN0IGE9KDAsYi5iaWRpKSh0LC0xLGUudmVydGljYWwpO3JldHVybntzdHI6YS5zdHIsZGlyOmEuZGlyLHdpZHRoOk1hdGguYWJzKGUudG90YWxXaWR0aCksaGVpZ2h0Ok1hdGguYWJzKGUudG90YWxIZWlnaHQpLHRyYW5zZm9ybTplLnRyYW5zZm9ybSxmb250TmFtZTplLmZvbnROYW1lLGhhc0VPTDplLmhhc0VPTH19KGYpKTtmLmluaXRpYWxpemVkPSExO2Yuc3RyLmxlbmd0aD0wfX1mdW5jdGlvbiBlbnF1ZXVlQ2h1bmsoZT0hMSl7Y29uc3QgdD1kLml0ZW1zLmxlbmd0aDtpZigwIT09dCYmIShlJiZ0PDEwKSl7by5lbnF1ZXVlKGQsdCk7ZC5pdGVtcz1bXTtkLnN0eWxlcz1PYmplY3QuY3JlYXRlKG51bGwpfX1jb25zdCBUPW5ldyBUaW1lU2xvdE1hbmFnZXI7cmV0dXJuIG5ldyBQcm9taXNlKChmdW5jdGlvbiBwcm9taXNlQm9keShlLGYpe2NvbnN0IG5leHQ9ZnVuY3Rpb24odCl7ZW5xdWV1ZUNodW5rKCEwKTtQcm9taXNlLmFsbChbdCxvLnJlYWR5XSkudGhlbigoZnVuY3Rpb24oKXt0cnl7cHJvbWlzZUJvZHkoZSxmKX1jYXRjaChlKXtmKGUpfX0pLGYpfTt0LmVuc3VyZU5vdFRlcm1pbmF0ZWQoKTtULnJlc2V0KCk7Y29uc3QgZz17fTtsZXQgcCxiPVtdO2Zvcig7IShwPVQuY2hlY2soKSk7KXtiLmxlbmd0aD0wO2cuYXJncz1iO2lmKCFGLnJlYWQoZykpYnJlYWs7Y29uc3QgZT1PO089bi5zdGF0ZTtjb25zdCBmPWcuZm47Yj1nLmFyZ3M7c3dpdGNoKDB8Zil7Y2FzZSByLk9QUy5zZXRGb250OnZhciB5PWJbMF0ubmFtZSxNPWJbMV07aWYoTy5mb250JiZ5PT09Ty5mb250TmFtZSYmTT09PU8uZm9udFNpemUpYnJlYWs7Zmx1c2hUZXh0Q29udGVudEl0ZW0oKTtPLmZvbnROYW1lPXk7Ty5mb250U2l6ZT1NO25leHQoaGFuZGxlU2V0Rm9udCh5LG51bGwpKTtyZXR1cm47Y2FzZSByLk9QUy5zZXRUZXh0UmlzZTpPLnRleHRSaXNlPWJbMF07YnJlYWs7Y2FzZSByLk9QUy5zZXRIU2NhbGU6Ty50ZXh0SFNjYWxlPWJbMF0vMTAwO2JyZWFrO2Nhc2Ugci5PUFMuc2V0TGVhZGluZzpPLmxlYWRpbmc9YlswXTticmVhaztjYXNlIHIuT1BTLm1vdmVUZXh0Ok8udHJhbnNsYXRlVGV4dExpbmVNYXRyaXgoYlswXSxiWzFdKTtPLnRleHRNYXRyaXg9Ty50ZXh0TGluZU1hdHJpeC5zbGljZSgpO2JyZWFrO2Nhc2Ugci5PUFMuc2V0TGVhZGluZ01vdmVUZXh0Ok8ubGVhZGluZz0tYlsxXTtPLnRyYW5zbGF0ZVRleHRMaW5lTWF0cml4KGJbMF0sYlsxXSk7Ty50ZXh0TWF0cml4PU8udGV4dExpbmVNYXRyaXguc2xpY2UoKTticmVhaztjYXNlIHIuT1BTLm5leHRMaW5lOk8uY2FycmlhZ2VSZXR1cm4oKTticmVhaztjYXNlIHIuT1BTLnNldFRleHRNYXRyaXg6Ty5zZXRUZXh0TWF0cml4KGJbMF0sYlsxXSxiWzJdLGJbM10sYls0XSxiWzVdKTtPLnNldFRleHRMaW5lTWF0cml4KGJbMF0sYlsxXSxiWzJdLGJbM10sYls0XSxiWzVdKTt1cGRhdGVBZHZhbmNlU2NhbGUoKTticmVhaztjYXNlIHIuT1BTLnNldENoYXJTcGFjaW5nOk8uY2hhclNwYWNpbmc9YlswXTticmVhaztjYXNlIHIuT1BTLnNldFdvcmRTcGFjaW5nOk8ud29yZFNwYWNpbmc9YlswXTticmVhaztjYXNlIHIuT1BTLmJlZ2luVGV4dDpPLnRleHRNYXRyaXg9ci5JREVOVElUWV9NQVRSSVguc2xpY2UoKTtPLnRleHRMaW5lTWF0cml4PXIuSURFTlRJVFlfTUFUUklYLnNsaWNlKCk7YnJlYWs7Y2FzZSByLk9QUy5zaG93U3BhY2VkVGV4dDppZighbi5zdGF0ZS5mb250KXt3LmVuc3VyZVN0YXRlRm9udChuLnN0YXRlKTtjb250aW51ZX1jb25zdCBmPShPLmZvbnQudmVydGljYWw/MTotMSkqTy5mb250U2l6ZS8xZTMsZz1iWzBdO2ZvcihsZXQgZT0wLHQ9Zy5sZW5ndGg7ZTx0O2UrKyl7Y29uc3QgdD1nW2VdO2lmKCJzdHJpbmciPT10eXBlb2YgdCl4LnB1c2godCk7ZWxzZSBpZigibnVtYmVyIj09dHlwZW9mIHQmJjAhPT10KXtjb25zdCBlPXguam9pbigiIik7eC5sZW5ndGg9MDtidWlsZFRleHRDb250ZW50SXRlbSh7Y2hhcnM6ZSxleHRyYVNwYWNpbmc6dCpmfSl9fWlmKHgubGVuZ3RoPjApe2NvbnN0IGU9eC5qb2luKCIiKTt4Lmxlbmd0aD0wO2J1aWxkVGV4dENvbnRlbnRJdGVtKHtjaGFyczplLGV4dHJhU3BhY2luZzowfSl9YnJlYWs7Y2FzZSByLk9QUy5zaG93VGV4dDppZighbi5zdGF0ZS5mb250KXt3LmVuc3VyZVN0YXRlRm9udChuLnN0YXRlKTtjb250aW51ZX1idWlsZFRleHRDb250ZW50SXRlbSh7Y2hhcnM6YlswXSxleHRyYVNwYWNpbmc6MH0pO2JyZWFrO2Nhc2Ugci5PUFMubmV4dExpbmVTaG93VGV4dDppZighbi5zdGF0ZS5mb250KXt3LmVuc3VyZVN0YXRlRm9udChuLnN0YXRlKTtjb250aW51ZX1PLmNhcnJpYWdlUmV0dXJuKCk7YnVpbGRUZXh0Q29udGVudEl0ZW0oe2NoYXJzOmJbMF0sZXh0cmFTcGFjaW5nOjB9KTticmVhaztjYXNlIHIuT1BTLm5leHRMaW5lU2V0U3BhY2luZ1Nob3dUZXh0OmlmKCFuLnN0YXRlLmZvbnQpe3cuZW5zdXJlU3RhdGVGb250KG4uc3RhdGUpO2NvbnRpbnVlfU8ud29yZFNwYWNpbmc9YlswXTtPLmNoYXJTcGFjaW5nPWJbMV07Ty5jYXJyaWFnZVJldHVybigpO2J1aWxkVGV4dENvbnRlbnRJdGVtKHtjaGFyczpiWzJdLGV4dHJhU3BhY2luZzowfSk7YnJlYWs7Y2FzZSByLk9QUy5wYWludFhPYmplY3Q6Zmx1c2hUZXh0Q29udGVudEl0ZW0oKTtDfHwoQz1hLmdldCgiWE9iamVjdCIpfHxpLkRpY3QuZW1wdHkpO3ZhciBEPWJbMF1pbnN0YW5jZW9mIGkuTmFtZSxFPWJbMF0ubmFtZTtpZihEJiZrLmdldEJ5TmFtZShFKSlicmVhaztuZXh0KG5ldyBQcm9taXNlKChmdW5jdGlvbihlLGQpe2lmKCFEKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJYT2JqZWN0IG11c3QgYmUgcmVmZXJyZWQgdG8gYnkgbmFtZS4iKTtsZXQgZj1DLmdldFJhdyhFKTtpZihmIGluc3RhbmNlb2YgaS5SZWYpe2lmKGsuZ2V0QnlSZWYoZikpe2UoKTtyZXR1cm59aWYody5nbG9iYWxJbWFnZUNhY2hlLmdldERhdGEoZix3LnBhZ2VJbmRleCkpe2UoKTtyZXR1cm59Zj1TLmZldGNoKGYpfWlmKCEoZiBpbnN0YW5jZW9mIG0uQmFzZVN0cmVhbSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlhPYmplY3Qgc2hvdWxkIGJlIGEgc3RyZWFtIik7Y29uc3QgZz1mLmRpY3QuZ2V0KCJTdWJ0eXBlIik7aWYoIShnIGluc3RhbmNlb2YgaS5OYW1lKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiWE9iamVjdCBzaG91bGQgaGF2ZSBhIE5hbWUgc3VidHlwZSIpO2lmKCJGb3JtIiE9PWcubmFtZSl7ay5zZXQoRSxmLmRpY3Qub2JqSWQsITApO2UoKTtyZXR1cm59Y29uc3QgcD1uLnN0YXRlLmNsb25lKCksYj1uZXcgU3RhdGVNYW5hZ2VyKHApLHk9Zi5kaWN0LmdldEFycmF5KCJNYXRyaXgiKTtBcnJheS5pc0FycmF5KHkpJiY2PT09eS5sZW5ndGgmJmIudHJhbnNmb3JtKHkpO2VucXVldWVDaHVuaygpO2NvbnN0IHg9e2VucXVldWVJbnZva2VkOiExLGVucXVldWUoZSx0KXt0aGlzLmVucXVldWVJbnZva2VkPSEwO28uZW5xdWV1ZShlLHQpfSxnZXQgZGVzaXJlZFNpemUoKXtyZXR1cm4gby5kZXNpcmVkU2l6ZX0sZ2V0IHJlYWR5KCl7cmV0dXJuIG8ucmVhZHl9fTt3LmdldFRleHRDb250ZW50KHtzdHJlYW06Zix0YXNrOnQscmVzb3VyY2VzOmYuZGljdC5nZXQoIlJlc291cmNlcyIpfHxhLHN0YXRlTWFuYWdlcjpiLGluY2x1ZGVNYXJrZWRDb250ZW50OnMsc2luazp4LHNlZW5TdHlsZXM6Yyx2aWV3Qm94OmwsbWFya2VkQ29udGVudERhdGE6aCxkaXNhYmxlTm9ybWFsaXphdGlvbjp1fSkudGhlbigoZnVuY3Rpb24oKXt4LmVucXVldWVJbnZva2VkfHxrLnNldChFLGYuZGljdC5vYmpJZCwhMCk7ZSgpfSksZCl9KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe2lmKCEoZSBpbnN0YW5jZW9mIHIuQWJvcnRFeGNlcHRpb24pKXtpZighdy5vcHRpb25zLmlnbm9yZUVycm9ycyl0aHJvdyBlOygwLHIud2FybikoYGdldFRleHRDb250ZW50IC0gaWdub3JpbmcgWE9iamVjdDogIiR7ZX0iLmApfX0pKSk7cmV0dXJuO2Nhc2Ugci5PUFMuc2V0R1N0YXRlOkQ9YlswXWluc3RhbmNlb2YgaS5OYW1lO0U9YlswXS5uYW1lO2lmKEQmJnYuZ2V0QnlOYW1lKEUpKWJyZWFrO25leHQobmV3IFByb21pc2UoKGZ1bmN0aW9uKGUsdCl7aWYoIUQpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkdTdGF0ZSBtdXN0IGJlIHJlZmVycmVkIHRvIGJ5IG5hbWUuIik7Y29uc3Qgbj1hLmdldCgiRXh0R1N0YXRlIik7aWYoIShuIGluc3RhbmNlb2YgaS5EaWN0KSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiRXh0R1N0YXRlIHNob3VsZCBiZSBhIGRpY3Rpb25hcnkuIik7Y29uc3Qgcz1uLmdldChFKTtpZighKHMgaW5zdGFuY2VvZiBpLkRpY3QpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJHU3RhdGUgc2hvdWxkIGJlIGEgZGljdGlvbmFyeS4iKTtjb25zdCBvPXMuZ2V0KCJGb250Iik7aWYobyl7Zmx1c2hUZXh0Q29udGVudEl0ZW0oKTtPLmZvbnROYW1lPW51bGw7Ty5mb250U2l6ZT1vWzFdO2hhbmRsZVNldEZvbnQobnVsbCxvWzBdKS50aGVuKGUsdCl9ZWxzZXt2LnNldChFLHMub2JqSWQsITApO2UoKX19KSkuY2F0Y2goKGZ1bmN0aW9uKGUpe2lmKCEoZSBpbnN0YW5jZW9mIHIuQWJvcnRFeGNlcHRpb24pKXtpZighdy5vcHRpb25zLmlnbm9yZUVycm9ycyl0aHJvdyBlOygwLHIud2FybikoYGdldFRleHRDb250ZW50IC0gaWdub3JpbmcgRXh0R1N0YXRlOiAiJHtlfSIuYCl9fSkpKTtyZXR1cm47Y2FzZSByLk9QUy5iZWdpbk1hcmtlZENvbnRlbnQ6Zmx1c2hUZXh0Q29udGVudEl0ZW0oKTtpZihzKXtoLmxldmVsKys7ZC5pdGVtcy5wdXNoKHt0eXBlOiJiZWdpbk1hcmtlZENvbnRlbnQiLHRhZzpiWzBdaW5zdGFuY2VvZiBpLk5hbWU/YlswXS5uYW1lOm51bGx9KX1icmVhaztjYXNlIHIuT1BTLmJlZ2luTWFya2VkQ29udGVudFByb3BzOmZsdXNoVGV4dENvbnRlbnRJdGVtKCk7aWYocyl7aC5sZXZlbCsrO2xldCBlPW51bGw7YlsxXWluc3RhbmNlb2YgaS5EaWN0JiYoZT1iWzFdLmdldCgiTUNJRCIpKTtkLml0ZW1zLnB1c2goe3R5cGU6ImJlZ2luTWFya2VkQ29udGVudFByb3BzIixpZDpOdW1iZXIuaXNJbnRlZ2VyKGUpP2Ake3cuaWRGYWN0b3J5LmdldFBhZ2VPYmpJZCgpfV9tYyR7ZX1gOm51bGwsdGFnOmJbMF1pbnN0YW5jZW9mIGkuTmFtZT9iWzBdLm5hbWU6bnVsbH0pfWJyZWFrO2Nhc2Ugci5PUFMuZW5kTWFya2VkQ29udGVudDpmbHVzaFRleHRDb250ZW50SXRlbSgpO2lmKHMpe2lmKDA9PT1oLmxldmVsKWJyZWFrO2gubGV2ZWwtLTtkLml0ZW1zLnB1c2goe3R5cGU6ImVuZE1hcmtlZENvbnRlbnQifSl9YnJlYWs7Y2FzZSByLk9QUy5yZXN0b3JlOiFlfHxlLmZvbnQ9PT1PLmZvbnQmJmUuZm9udFNpemU9PT1PLmZvbnRTaXplJiZlLmZvbnROYW1lPT09Ty5mb250TmFtZXx8Zmx1c2hUZXh0Q29udGVudEl0ZW0oKX1pZihkLml0ZW1zLmxlbmd0aD49by5kZXNpcmVkU2l6ZSl7cD0hMDticmVha319aWYocCluZXh0KFIpO2Vsc2V7Zmx1c2hUZXh0Q29udGVudEl0ZW0oKTtlbnF1ZXVlQ2h1bmsoKTtlKCl9fSkpLmNhdGNoKChlPT57aWYoIShlIGluc3RhbmNlb2Ygci5BYm9ydEV4Y2VwdGlvbikpe2lmKCF0aGlzLm9wdGlvbnMuaWdub3JlRXJyb3JzKXRocm93IGU7KDAsci53YXJuKShgZ2V0VGV4dENvbnRlbnQgLSBpZ25vcmluZyBlcnJvcnMgZHVyaW5nICIke3QubmFtZX0iIHRhc2s6ICIke2V9Ii5gKTtmbHVzaFRleHRDb250ZW50SXRlbSgpO2VucXVldWVDaHVuaygpfX0pKX1leHRyYWN0RGF0YVN0cnVjdHVyZXMoZSx0LGEpe2NvbnN0IG49dGhpcy54cmVmO2xldCBzO2NvbnN0IGw9dGhpcy5yZWFkVG9Vbmljb2RlKGEudG9Vbmljb2RlfHxlLmdldCgiVG9Vbmljb2RlIil8fHQuZ2V0KCJUb1VuaWNvZGUiKSk7aWYoYS5jb21wb3NpdGUpe2NvbnN0IHQ9ZS5nZXQoIkNJRFN5c3RlbUluZm8iKTt0IGluc3RhbmNlb2YgaS5EaWN0JiYoYS5jaWRTeXN0ZW1JbmZvPXtyZWdpc3RyeTooMCxyLnN0cmluZ1RvUERGU3RyaW5nKSh0LmdldCgiUmVnaXN0cnkiKSksb3JkZXJpbmc6KDAsci5zdHJpbmdUb1BERlN0cmluZykodC5nZXQoIk9yZGVyaW5nIikpLHN1cHBsZW1lbnQ6dC5nZXQoIlN1cHBsZW1lbnQiKX0pO3RyeXtjb25zdCB0PWUuZ2V0KCJDSURUb0dJRE1hcCIpO3QgaW5zdGFuY2VvZiBtLkJhc2VTdHJlYW0mJihzPXQuZ2V0Qnl0ZXMoKSl9Y2F0Y2goZSl7aWYoIXRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpdGhyb3cgZTsoMCxyLndhcm4pKGBleHRyYWN0RGF0YVN0cnVjdHVyZXMgLSBpZ25vcmluZyBDSURUb0dJRE1hcCBkYXRhOiAiJHtlfSIuYCl9fWNvbnN0IGg9W107bGV0IHUsZD1udWxsO2lmKGUuaGFzKCJFbmNvZGluZyIpKXt1PWUuZ2V0KCJFbmNvZGluZyIpO2lmKHUgaW5zdGFuY2VvZiBpLkRpY3Qpe2Q9dS5nZXQoIkJhc2VFbmNvZGluZyIpO2Q9ZCBpbnN0YW5jZW9mIGkuTmFtZT9kLm5hbWU6bnVsbDtpZih1LmhhcygiRGlmZmVyZW5jZXMiKSl7Y29uc3QgZT11LmdldCgiRGlmZmVyZW5jZXMiKTtsZXQgdD0wO2Zvcihjb25zdCBhIG9mIGUpe2NvbnN0IGU9bi5mZXRjaElmUmVmKGEpO2lmKCJudW1iZXIiPT10eXBlb2YgZSl0PWU7ZWxzZXtpZighKGUgaW5zdGFuY2VvZiBpLk5hbWUpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBJbnZhbGlkIGVudHJ5IGluICdEaWZmZXJlbmNlcycgYXJyYXk6ICR7ZX1gKTtoW3QrK109ZS5uYW1lfX19fWVsc2UgaWYodSBpbnN0YW5jZW9mIGkuTmFtZSlkPXUubmFtZTtlbHNle2NvbnN0IGU9IkVuY29kaW5nIGlzIG5vdCBhIE5hbWUgbm9yIGEgRGljdCI7aWYoIXRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoZSk7KDAsci53YXJuKShlKX0iTWFjUm9tYW5FbmNvZGluZyIhPT1kJiYiTWFjRXhwZXJ0RW5jb2RpbmciIT09ZCYmIldpbkFuc2lFbmNvZGluZyIhPT1kJiYoZD1udWxsKX1jb25zdCBmPSFhLmZpbGV8fGEuaXNJbnRlcm5hbEZvbnQsZz0oMCxjLmdldFN5bWJvbHNGb250cykoKVthLm5hbWVdO2QmJmYmJmcmJihkPW51bGwpO2lmKGQpYS5kZWZhdWx0RW5jb2Rpbmc9KDAsby5nZXRFbmNvZGluZykoZCk7ZWxzZXtjb25zdCBlPSEhKGEuZmxhZ3MmUy5Gb250RmxhZ3MuU3ltYm9saWMpLHQ9ISEoYS5mbGFncyZTLkZvbnRGbGFncy5Ob25zeW1ib2xpYyk7dT1vLlN0YW5kYXJkRW5jb2Rpbmc7IlRydWVUeXBlIiE9PWEudHlwZXx8dHx8KHU9by5XaW5BbnNpRW5jb2RpbmcpO2lmKGV8fGcpe3U9by5NYWNSb21hbkVuY29kaW5nO2YmJigvU3ltYm9sL2kudGVzdChhLm5hbWUpP3U9by5TeW1ib2xTZXRFbmNvZGluZzovRGluZ2JhdHMvaS50ZXN0KGEubmFtZSk/dT1vLlphcGZEaW5nYmF0c0VuY29kaW5nOi9XaW5nZGluZ3MvaS50ZXN0KGEubmFtZSkmJih1PW8uV2luQW5zaUVuY29kaW5nKSl9YS5kZWZhdWx0RW5jb2Rpbmc9dX1hLmRpZmZlcmVuY2VzPWg7YS5iYXNlRW5jb2RpbmdOYW1lPWQ7YS5oYXNFbmNvZGluZz0hIWR8fGgubGVuZ3RoPjA7YS5kaWN0PWU7cmV0dXJuIGwudGhlbigoZT0+e2EudG9Vbmljb2RlPWU7cmV0dXJuIHRoaXMuYnVpbGRUb1VuaWNvZGUoYSl9KSkudGhlbigoZT0+e2EudG9Vbmljb2RlPWU7cyYmKGEuY2lkVG9HaWRNYXA9dGhpcy5yZWFkQ2lkVG9HaWRNYXAocyxlKSk7cmV0dXJuIGF9KSl9X3NpbXBsZUZvbnRUb1VuaWNvZGUoZSx0PSExKXsoMCxyLmFzc2VydCkoIWUuY29tcG9zaXRlLCJNdXN0IGJlIGEgc2ltcGxlIGZvbnQuIik7Y29uc3QgYT1bXSxuPWUuZGVmYXVsdEVuY29kaW5nLnNsaWNlKCksaT1lLmJhc2VFbmNvZGluZ05hbWUscz1lLmRpZmZlcmVuY2VzO2Zvcihjb25zdCBlIGluIHMpe2NvbnN0IHQ9c1tlXTsiLm5vdGRlZiIhPT10JiYobltlXT10KX1jb25zdCBjPSgwLEMuZ2V0R2x5cGhzVW5pY29kZSkoKTtmb3IoY29uc3QgciBpbiBuKXtsZXQgcz1uW3JdO2lmKCIiPT09cyljb250aW51ZTtsZXQgbD1jW3NdO2lmKHZvaWQgMCE9PWwpe2Fbcl09U3RyaW5nLmZyb21DaGFyQ29kZShsKTtjb250aW51ZX1sZXQgaD0wO3N3aXRjaChzWzBdKXtjYXNlIkciOjM9PT1zLmxlbmd0aCYmKGg9cGFyc2VJbnQocy5zdWJzdHJpbmcoMSksMTYpKTticmVhaztjYXNlImciOjU9PT1zLmxlbmd0aCYmKGg9cGFyc2VJbnQocy5zdWJzdHJpbmcoMSksMTYpKTticmVhaztjYXNlIkMiOmNhc2UiYyI6aWYocy5sZW5ndGg+PTMmJnMubGVuZ3RoPD00KXtjb25zdCBhPXMuc3Vic3RyaW5nKDEpO2lmKHQpe2g9cGFyc2VJbnQoYSwxNik7YnJlYWt9aD0rYTtpZihOdW1iZXIuaXNOYU4oaCkmJk51bWJlci5pc0ludGVnZXIocGFyc2VJbnQoYSwxNikpKXJldHVybiB0aGlzLl9zaW1wbGVGb250VG9Vbmljb2RlKGUsITApfWJyZWFrO2Nhc2UidSI6bD0oMCx2LmdldFVuaWNvZGVGb3JHbHlwaCkocyxjKTstMSE9PWwmJihoPWwpO2JyZWFrO2RlZmF1bHQ6c3dpdGNoKHMpe2Nhc2UiZl9oIjpjYXNlImZfdCI6Y2FzZSJUX2giOmFbcl09cy5yZXBsYWNlQWxsKCJfIiwiIik7Y29udGludWV9fWlmKGg+MCYmaDw9MTExNDExMSYmTnVtYmVyLmlzSW50ZWdlcihoKSl7aWYoaSYmaD09PStyKXtjb25zdCBlPSgwLG8uZ2V0RW5jb2RpbmcpKGkpO2lmKGUmJihzPWVbcl0pKXthW3JdPVN0cmluZy5mcm9tQ2hhckNvZGUoY1tzXSk7Y29udGludWV9fWFbcl09U3RyaW5nLmZyb21Db2RlUG9pbnQoaCl9fXJldHVybiBhfWFzeW5jIGJ1aWxkVG9Vbmljb2RlKGUpe2UuaGFzSW5jbHVkZWRUb1VuaWNvZGVNYXA9ZS50b1VuaWNvZGU/Lmxlbmd0aD4wO2lmKGUuaGFzSW5jbHVkZWRUb1VuaWNvZGVNYXApeyFlLmNvbXBvc2l0ZSYmZS5oYXNFbmNvZGluZyYmKGUuZmFsbGJhY2tUb1VuaWNvZGU9dGhpcy5fc2ltcGxlRm9udFRvVW5pY29kZShlKSk7cmV0dXJuIGUudG9Vbmljb2RlfWlmKCFlLmNvbXBvc2l0ZSlyZXR1cm4gbmV3IHUuVG9Vbmljb2RlTWFwKHRoaXMuX3NpbXBsZUZvbnRUb1VuaWNvZGUoZSkpO2lmKGUuY29tcG9zaXRlJiYoZS5jTWFwLmJ1aWx0SW5DTWFwJiYhKGUuY01hcCBpbnN0YW5jZW9mIG4uSWRlbnRpdHlDTWFwKXx8IkFkb2JlIj09PWUuY2lkU3lzdGVtSW5mby5yZWdpc3RyeSYmKCJHQjEiPT09ZS5jaWRTeXN0ZW1JbmZvLm9yZGVyaW5nfHwiQ05TMSI9PT1lLmNpZFN5c3RlbUluZm8ub3JkZXJpbmd8fCJKYXBhbjEiPT09ZS5jaWRTeXN0ZW1JbmZvLm9yZGVyaW5nfHwiS29yZWExIj09PWUuY2lkU3lzdGVtSW5mby5vcmRlcmluZykpKXtjb25zdHtyZWdpc3RyeTp0LG9yZGVyaW5nOmF9PWUuY2lkU3lzdGVtSW5mbyxzPWkuTmFtZS5nZXQoYCR7dH0tJHthfS1VQ1MyYCksbz1hd2FpdCBuLkNNYXBGYWN0b3J5LmNyZWF0ZSh7ZW5jb2Rpbmc6cyxmZXRjaEJ1aWx0SW5DTWFwOnRoaXMuX2ZldGNoQnVpbHRJbkNNYXBCb3VuZCx1c2VDTWFwOm51bGx9KSxjPVtdLGw9W107ZS5jTWFwLmZvckVhY2goKGZ1bmN0aW9uKGUsdCl7aWYodD42NTUzNSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiTWF4IHNpemUgb2YgQ0lEIGlzIDY1LDUzNSIpO2NvbnN0IGE9by5sb29rdXAodCk7aWYoYSl7bC5sZW5ndGg9MDtmb3IobGV0IGU9MCx0PWEubGVuZ3RoO2U8dDtlKz0yKWwucHVzaCgoYS5jaGFyQ29kZUF0KGUpPDw4KSthLmNoYXJDb2RlQXQoZSsxKSk7Y1tlXT1TdHJpbmcuZnJvbUNoYXJDb2RlKC4uLmwpfX0pKTtyZXR1cm4gbmV3IHUuVG9Vbmljb2RlTWFwKGMpfXJldHVybiBuZXcgdS5JZGVudGl0eVRvVW5pY29kZU1hcChlLmZpcnN0Q2hhcixlLmxhc3RDaGFyKX1yZWFkVG9Vbmljb2RlKGUpe3JldHVybiBlP2UgaW5zdGFuY2VvZiBpLk5hbWU/bi5DTWFwRmFjdG9yeS5jcmVhdGUoe2VuY29kaW5nOmUsZmV0Y2hCdWlsdEluQ01hcDp0aGlzLl9mZXRjaEJ1aWx0SW5DTWFwQm91bmQsdXNlQ01hcDpudWxsfSkudGhlbigoZnVuY3Rpb24oZSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBuLklkZW50aXR5Q01hcD9uZXcgdS5JZGVudGl0eVRvVW5pY29kZU1hcCgwLDY1NTM1KTpuZXcgdS5Ub1VuaWNvZGVNYXAoZS5nZXRNYXAoKSl9KSk6ZSBpbnN0YW5jZW9mIG0uQmFzZVN0cmVhbT9uLkNNYXBGYWN0b3J5LmNyZWF0ZSh7ZW5jb2Rpbmc6ZSxmZXRjaEJ1aWx0SW5DTWFwOnRoaXMuX2ZldGNoQnVpbHRJbkNNYXBCb3VuZCx1c2VDTWFwOm51bGx9KS50aGVuKChmdW5jdGlvbihlKXtpZihlIGluc3RhbmNlb2Ygbi5JZGVudGl0eUNNYXApcmV0dXJuIG5ldyB1LklkZW50aXR5VG9Vbmljb2RlTWFwKDAsNjU1MzUpO2NvbnN0IHQ9bmV3IEFycmF5KGUubGVuZ3RoKTtlLmZvckVhY2goKGZ1bmN0aW9uKGUsYSl7aWYoIm51bWJlciI9PXR5cGVvZiBhKXt0W2VdPVN0cmluZy5mcm9tQ29kZVBvaW50KGEpO3JldHVybn1jb25zdCByPVtdO2ZvcihsZXQgZT0wO2U8YS5sZW5ndGg7ZSs9Mil7Y29uc3QgdD1hLmNoYXJDb2RlQXQoZSk8PDh8YS5jaGFyQ29kZUF0KGUrMSk7aWYoNTUyOTYhPSg2MzQ4OCZ0KSl7ci5wdXNoKHQpO2NvbnRpbnVlfWUrPTI7Y29uc3Qgbj1hLmNoYXJDb2RlQXQoZSk8PDh8YS5jaGFyQ29kZUF0KGUrMSk7ci5wdXNoKCgoMTAyMyZ0KTw8MTApKygxMDIzJm4pKzY1NTM2KX10W2VdPVN0cmluZy5mcm9tQ29kZVBvaW50KC4uLnIpfSkpO3JldHVybiBuZXcgdS5Ub1VuaWNvZGVNYXAodCl9KSwoZT0+e2lmKGUgaW5zdGFuY2VvZiByLkFib3J0RXhjZXB0aW9uKXJldHVybiBudWxsO2lmKHRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpeygwLHIud2FybikoYHJlYWRUb1VuaWNvZGUgLSBpZ25vcmluZyBUb1VuaWNvZGUgZGF0YTogIiR7ZX0iLmApO3JldHVybiBudWxsfXRocm93IGV9KSk6UHJvbWlzZS5yZXNvbHZlKG51bGwpOlByb21pc2UucmVzb2x2ZShudWxsKX1yZWFkQ2lkVG9HaWRNYXAoZSx0KXtjb25zdCBhPVtdO2ZvcihsZXQgcj0wLG49ZS5sZW5ndGg7cjxuO3IrKyl7Y29uc3Qgbj1lW3IrK108PDh8ZVtyXSxpPXI+PjE7KDAhPT1ufHx0LmhhcyhpKSkmJihhW2ldPW4pfXJldHVybiBhfWV4dHJhY3RXaWR0aHMoZSx0LGEpe2NvbnN0IHI9dGhpcy54cmVmO2xldCBuPVtdLHM9MDtjb25zdCBvPVtdO2xldCBjLGwsaCx1LGQsZixnLHA7aWYoYS5jb21wb3NpdGUpe3M9ZS5oYXMoIkRXIik/ZS5nZXQoIkRXIik6MWUzO3A9ZS5nZXQoIlciKTtpZihwKWZvcihsPTAsaD1wLmxlbmd0aDtsPGg7bCsrKXtmPXIuZmV0Y2hJZlJlZihwW2wrK10pO2c9ci5mZXRjaElmUmVmKHBbbF0pO2lmKEFycmF5LmlzQXJyYXkoZykpZm9yKHU9MCxkPWcubGVuZ3RoO3U8ZDt1KyspbltmKytdPXIuZmV0Y2hJZlJlZihnW3VdKTtlbHNle2NvbnN0IGU9ci5mZXRjaElmUmVmKHBbKytsXSk7Zm9yKHU9Zjt1PD1nO3UrKyluW3VdPWV9fWlmKGEudmVydGljYWwpe2xldCB0PWUuZ2V0QXJyYXkoIkRXMiIpfHxbODgwLC0xZTNdO2M9W3RbMV0sLjUqcyx0WzBdXTt0PWUuZ2V0KCJXMiIpO2lmKHQpZm9yKGw9MCxoPXQubGVuZ3RoO2w8aDtsKyspe2Y9ci5mZXRjaElmUmVmKHRbbCsrXSk7Zz1yLmZldGNoSWZSZWYodFtsXSk7aWYoQXJyYXkuaXNBcnJheShnKSlmb3IodT0wLGQ9Zy5sZW5ndGg7dTxkO3UrKylvW2YrK109W3IuZmV0Y2hJZlJlZihnW3UrK10pLHIuZmV0Y2hJZlJlZihnW3UrK10pLHIuZmV0Y2hJZlJlZihnW3VdKV07ZWxzZXtjb25zdCBlPVtyLmZldGNoSWZSZWYodFsrK2xdKSxyLmZldGNoSWZSZWYodFsrK2xdKSxyLmZldGNoSWZSZWYodFsrK2xdKV07Zm9yKHU9Zjt1PD1nO3UrKylvW3VdPWV9fX19ZWxzZXtjb25zdCBvPWEuZmlyc3RDaGFyO3A9ZS5nZXQoIldpZHRocyIpO2lmKHApe3U9bztmb3IobD0wLGg9cC5sZW5ndGg7bDxoO2wrKyluW3UrK109ci5mZXRjaElmUmVmKHBbbF0pO3M9cGFyc2VGbG9hdCh0LmdldCgiTWlzc2luZ1dpZHRoIikpfHwwfWVsc2V7Y29uc3QgdD1lLmdldCgiQmFzZUZvbnQiKTtpZih0IGluc3RhbmNlb2YgaS5OYW1lKXtjb25zdCBlPXRoaXMuZ2V0QmFzZUZvbnRNZXRyaWNzKHQubmFtZSk7bj10aGlzLmJ1aWxkQ2hhckNvZGVUb1dpZHRoKGUud2lkdGhzLGEpO3M9ZS5kZWZhdWx0V2lkdGh9fX1sZXQgbT0hMCxiPXM7Zm9yKGNvbnN0IGUgaW4gbil7Y29uc3QgdD1uW2VdO2lmKHQpaWYoYil7aWYoYiE9PXQpe209ITE7YnJlYWt9fWVsc2UgYj10fW0/YS5mbGFnc3w9Uy5Gb250RmxhZ3MuRml4ZWRQaXRjaDphLmZsYWdzJj1+Uy5Gb250RmxhZ3MuRml4ZWRQaXRjaDthLmRlZmF1bHRXaWR0aD1zO2Eud2lkdGhzPW47YS5kZWZhdWx0Vk1ldHJpY3M9YzthLnZtZXRyaWNzPW99aXNTZXJpZkZvbnQoZSl7Y29uc3QgdD1lLnNwbGl0KCItIilbMF07cmV0dXJuIHQgaW4oMCxjLmdldFNlcmlmRm9udHMpKCl8fC9zZXJpZi9naS50ZXN0KHQpfWdldEJhc2VGb250TWV0cmljcyhlKXtsZXQgdD0wLGE9T2JqZWN0LmNyZWF0ZShudWxsKSxyPSExO2xldCBuPSgwLGMuZ2V0U3RkRm9udE1hcCkoKVtlXXx8ZTtjb25zdCBpPSgwLGsuZ2V0TWV0cmljcykoKTtuIGluIGl8fChuPXRoaXMuaXNTZXJpZkZvbnQoZSk/IlRpbWVzLVJvbWFuIjoiSGVsdmV0aWNhIik7Y29uc3Qgcz1pW25dO2lmKCJudW1iZXIiPT10eXBlb2Ygcyl7dD1zO3I9ITB9ZWxzZSBhPXMoKTtyZXR1cm57ZGVmYXVsdFdpZHRoOnQsbW9ub3NwYWNlOnIsd2lkdGhzOmF9fWJ1aWxkQ2hhckNvZGVUb1dpZHRoKGUsdCl7Y29uc3QgYT1PYmplY3QuY3JlYXRlKG51bGwpLHI9dC5kaWZmZXJlbmNlcyxuPXQuZGVmYXVsdEVuY29kaW5nO2ZvcihsZXQgdD0wO3Q8MjU2O3QrKyl0IGluIHImJmVbclt0XV0/YVt0XT1lW3JbdF1dOnQgaW4gbiYmZVtuW3RdXSYmKGFbdF09ZVtuW3RdXSk7cmV0dXJuIGF9cHJlRXZhbHVhdGVGb250KGUpe2NvbnN0IHQ9ZTtsZXQgYT1lLmdldCgiU3VidHlwZSIpO2lmKCEoYSBpbnN0YW5jZW9mIGkuTmFtZSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoImludmFsaWQgZm9udCBTdWJ0eXBlIik7bGV0IG4scyxvPSExO2lmKCJUeXBlMCI9PT1hLm5hbWUpe2NvbnN0IHQ9ZS5nZXQoIkRlc2NlbmRhbnRGb250cyIpO2lmKCF0KXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJEZXNjZW5kYW50IGZvbnRzIGFyZSBub3Qgc3BlY2lmaWVkIik7aWYoISgoZT1BcnJheS5pc0FycmF5KHQpP3RoaXMueHJlZi5mZXRjaElmUmVmKHRbMF0pOnQpaW5zdGFuY2VvZiBpLkRpY3QpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJEZXNjZW5kYW50IGZvbnQgaXMgbm90IGEgZGljdGlvbmFyeS4iKTthPWUuZ2V0KCJTdWJ0eXBlIik7aWYoIShhIGluc3RhbmNlb2YgaS5OYW1lKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiaW52YWxpZCBmb250IFN1YnR5cGUiKTtvPSEwfWNvbnN0IGM9ZS5nZXQoIkZpcnN0Q2hhciIpfHwwLGw9ZS5nZXQoIkxhc3RDaGFyIil8fChvPzY1NTM1OjI1NSksaD1lLmdldCgiRm9udERlc2NyaXB0b3IiKTtpZihoKXtuPW5ldyBPLk11cm11ckhhc2gzXzY0O2NvbnN0IGE9dC5nZXRSYXcoIkVuY29kaW5nIik7aWYoYSBpbnN0YW5jZW9mIGkuTmFtZSluLnVwZGF0ZShhLm5hbWUpO2Vsc2UgaWYoYSBpbnN0YW5jZW9mIGkuUmVmKW4udXBkYXRlKGEudG9TdHJpbmcoKSk7ZWxzZSBpZihhIGluc3RhbmNlb2YgaS5EaWN0KWZvcihjb25zdCBlIG9mIGEuZ2V0UmF3VmFsdWVzKCkpaWYoZSBpbnN0YW5jZW9mIGkuTmFtZSluLnVwZGF0ZShlLm5hbWUpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIGkuUmVmKW4udXBkYXRlKGUudG9TdHJpbmcoKSk7ZWxzZSBpZihBcnJheS5pc0FycmF5KGUpKXtjb25zdCB0PWUubGVuZ3RoLGE9bmV3IEFycmF5KHQpO2ZvcihsZXQgcj0wO3I8dDtyKyspe2NvbnN0IHQ9ZVtyXTt0IGluc3RhbmNlb2YgaS5OYW1lP2Fbcl09dC5uYW1lOigibnVtYmVyIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBpLlJlZikmJihhW3JdPXQudG9TdHJpbmcoKSl9bi51cGRhdGUoYS5qb2luKCkpfW4udXBkYXRlKGAke2N9LSR7bH1gKTtzPWUuZ2V0KCJUb1VuaWNvZGUiKXx8dC5nZXQoIlRvVW5pY29kZSIpO2lmKHMgaW5zdGFuY2VvZiBtLkJhc2VTdHJlYW0pe2NvbnN0IGU9cy5zdHJ8fHMsdD1lLmJ1ZmZlcj9uZXcgVWludDhBcnJheShlLmJ1ZmZlci5idWZmZXIsMCxlLmJ1ZmZlckxlbmd0aCk6bmV3IFVpbnQ4QXJyYXkoZS5ieXRlcy5idWZmZXIsZS5zdGFydCxlLmVuZC1lLnN0YXJ0KTtuLnVwZGF0ZSh0KX1lbHNlIHMgaW5zdGFuY2VvZiBpLk5hbWUmJm4udXBkYXRlKHMubmFtZSk7Y29uc3Qgcj1lLmdldCgiV2lkdGhzIil8fHQuZ2V0KCJXaWR0aHMiKTtpZihBcnJheS5pc0FycmF5KHIpKXtjb25zdCBlPVtdO2Zvcihjb25zdCB0IG9mIHIpKCJudW1iZXIiPT10eXBlb2YgdHx8dCBpbnN0YW5jZW9mIGkuUmVmKSYmZS5wdXNoKHQudG9TdHJpbmcoKSk7bi51cGRhdGUoZS5qb2luKCkpfWlmKG8pe24udXBkYXRlKCJjb21wb3NpdGVGb250Iik7Y29uc3QgYT1lLmdldCgiVyIpfHx0LmdldCgiVyIpO2lmKEFycmF5LmlzQXJyYXkoYSkpe2NvbnN0IGU9W107Zm9yKGNvbnN0IHQgb2YgYSlpZigibnVtYmVyIj09dHlwZW9mIHR8fHQgaW5zdGFuY2VvZiBpLlJlZillLnB1c2godC50b1N0cmluZygpKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkodCkpe2NvbnN0IGE9W107Zm9yKGNvbnN0IGUgb2YgdCkoIm51bWJlciI9PXR5cGVvZiBlfHxlIGluc3RhbmNlb2YgaS5SZWYpJiZhLnB1c2goZS50b1N0cmluZygpKTtlLnB1c2goYFske2Euam9pbigpfV1gKX1uLnVwZGF0ZShlLmpvaW4oKSl9Y29uc3Qgcj1lLmdldFJhdygiQ0lEVG9HSURNYXAiKXx8dC5nZXRSYXcoIkNJRFRvR0lETWFwIik7ciBpbnN0YW5jZW9mIGkuTmFtZT9uLnVwZGF0ZShyLm5hbWUpOnIgaW5zdGFuY2VvZiBpLlJlZj9uLnVwZGF0ZShyLnRvU3RyaW5nKCkpOnIgaW5zdGFuY2VvZiBtLkJhc2VTdHJlYW0mJm4udXBkYXRlKHIucGVla0J5dGVzKCkpfX1yZXR1cm57ZGVzY3JpcHRvcjpoLGRpY3Q6ZSxiYXNlRGljdDp0LGNvbXBvc2l0ZTpvLHR5cGU6YS5uYW1lLGZpcnN0Q2hhcjpjLGxhc3RDaGFyOmwsdG9Vbmljb2RlOnMsaGFzaDpuP24uaGV4ZGlnZXN0KCk6IiJ9fWFzeW5jIHRyYW5zbGF0ZUZvbnQoe2Rlc2NyaXB0b3I6ZSxkaWN0OnQsYmFzZURpY3Q6YSxjb21wb3NpdGU6byx0eXBlOmwsZmlyc3RDaGFyOnUsbGFzdENoYXI6ZCx0b1VuaWNvZGU6Zixjc3NGb250SW5mbzpnfSl7Y29uc3QgbT0iVHlwZTMiPT09bDtsZXQgYjtpZighZSl7aWYoIW0pe2xldCBlPXQuZ2V0KCJCYXNlRm9udCIpO2lmKCEoZSBpbnN0YW5jZW9mIGkuTmFtZSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkJhc2UgZm9udCBpcyBub3Qgc3BlY2lmaWVkIik7ZT1lLm5hbWUucmVwbGFjZUFsbCgvWyxfXS9nLCItIik7Y29uc3Qgbj10aGlzLmdldEJhc2VGb250TWV0cmljcyhlKSxvPWUuc3BsaXQoIi0iKVswXSxoPSh0aGlzLmlzU2VyaWZGb250KG8pP1MuRm9udEZsYWdzLlNlcmlmOjApfChuLm1vbm9zcGFjZT9TLkZvbnRGbGFncy5GaXhlZFBpdGNoOjApfCgoMCxjLmdldFN5bWJvbHNGb250cykoKVtvXT9TLkZvbnRGbGFncy5TeW1ib2xpYzpTLkZvbnRGbGFncy5Ob25zeW1ib2xpYyk7Yj17dHlwZTpsLG5hbWU6ZSxsb2FkZWROYW1lOmEubG9hZGVkTmFtZSxzeXN0ZW1Gb250SW5mbzpudWxsLHdpZHRoczpuLndpZHRocyxkZWZhdWx0V2lkdGg6bi5kZWZhdWx0V2lkdGgsaXNTaW11bGF0ZWRGbGFnczohMCxmbGFnczpoLGZpcnN0Q2hhcjp1LGxhc3RDaGFyOmQsdG9Vbmljb2RlOmYseEhlaWdodDowLGNhcEhlaWdodDowLGl0YWxpY0FuZ2xlOjAsaXNUeXBlM0ZvbnQ6bX07Y29uc3QgZz10LmdldCgiV2lkdGhzIikscD0oMCxjLmdldFN0YW5kYXJkRm9udE5hbWUpKGUpO2xldCB5PW51bGw7aWYocCl7eT1hd2FpdCB0aGlzLmZldGNoU3RhbmRhcmRGb250RGF0YShwKTtiLmlzSW50ZXJuYWxGb250PSEheX0hYi5pc0ludGVybmFsRm9udCYmdGhpcy5vcHRpb25zLnVzZVN5c3RlbUZvbnRzJiYoYi5zeXN0ZW1Gb250SW5mbz0oMCx4LmdldEZvbnRTdWJzdGl0dXRpb24pKHRoaXMuc3lzdGVtRm9udENhY2hlLHRoaXMuaWRGYWN0b3J5LHRoaXMub3B0aW9ucy5zdGFuZGFyZEZvbnREYXRhVXJsLGUscCkpO3JldHVybiB0aGlzLmV4dHJhY3REYXRhU3RydWN0dXJlcyh0LHQsYikudGhlbigodD0+e2lmKGcpe2NvbnN0IGU9W107bGV0IGE9dTtmb3IoY29uc3QgdCBvZiBnKWVbYSsrXT10aGlzLnhyZWYuZmV0Y2hJZlJlZih0KTt0LndpZHRocz1lfWVsc2UgdC53aWR0aHM9dGhpcy5idWlsZENoYXJDb2RlVG9XaWR0aChuLndpZHRocyx0KTtyZXR1cm4gbmV3IHMuRm9udChlLHksdCl9KSl9KGU9bmV3IGkuRGljdChudWxsKSkuc2V0KCJGb250TmFtZSIsaS5OYW1lLmdldChsKSk7ZS5zZXQoIkZvbnRCQm94Iix0LmdldEFycmF5KCJGb250QkJveCIpfHxbMCwwLDAsMF0pfWxldCB5PWUuZ2V0KCJGb250TmFtZSIpLHc9dC5nZXQoIkJhc2VGb250Iik7InN0cmluZyI9PXR5cGVvZiB5JiYoeT1pLk5hbWUuZ2V0KHkpKTsic3RyaW5nIj09dHlwZW9mIHcmJih3PWkuTmFtZS5nZXQodykpO2NvbnN0IEM9eT8ubmFtZSxrPXc/Lm5hbWU7aWYoIW0mJkMhPT1rKXsoMCxyLmluZm8pKGBUaGUgRm9udERlc2NyaXB0b3IncyBGb250TmFtZSBpcyAiJHtDfSIgYnV0IHNob3VsZCBiZSB0aGUgc2FtZSBhcyB0aGUgRm9udCdzIEJhc2VGb250ICIke2t9Ii5gKTtDJiZrJiYoay5zdGFydHNXaXRoKEMpfHwhKDAsYy5pc0tub3duRm9udE5hbWUpKEMpJiYoMCxjLmlzS25vd25Gb250TmFtZSkoaykpJiYoeT1udWxsKX15fHw9dztpZighKHkgaW5zdGFuY2VvZiBpLk5hbWUpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJpbnZhbGlkIGZvbnQgbmFtZSIpO2xldCB2LEYsTyxULE07dHJ5e3Y9ZS5nZXQoIkZvbnRGaWxlIiwiRm9udEZpbGUyIiwiRm9udEZpbGUzIil9Y2F0Y2goZSl7aWYoIXRoaXMub3B0aW9ucy5pZ25vcmVFcnJvcnMpdGhyb3cgZTsoMCxyLndhcm4pKGB0cmFuc2xhdGVGb250IC0gZmV0Y2hpbmcgIiR7eS5uYW1lfSIgZm9udCBmaWxlOiAiJHtlfSIuYCk7dj1uZXcgcC5OdWxsU3RyZWFtfWxldCBEPSExLEU9bnVsbCxOPW51bGw7aWYodil7aWYodi5kaWN0KXtjb25zdCBlPXYuZGljdC5nZXQoIlN1YnR5cGUiKTtlIGluc3RhbmNlb2YgaS5OYW1lJiYoRj1lLm5hbWUpO089di5kaWN0LmdldCgiTGVuZ3RoMSIpO1Q9di5kaWN0LmdldCgiTGVuZ3RoMiIpO009di5kaWN0LmdldCgiTGVuZ3RoMyIpfX1lbHNlIGlmKGcpe2NvbnN0IGU9KDAsaC5nZXRYZmFGb250TmFtZSkoeS5uYW1lKTtpZihlKXtnLmZvbnRGYW1pbHk9YCR7Zy5mb250RmFtaWx5fS1QZGZKUy1YRkFgO2cubWV0cmljcz1lLm1ldHJpY3N8fG51bGw7RT1lLmZhY3RvcnN8fG51bGw7dj1hd2FpdCB0aGlzLmZldGNoU3RhbmRhcmRGb250RGF0YShlLm5hbWUpO0Q9ISF2O2E9dD0oMCxoLmdldFhmYUZvbnREaWN0KSh5Lm5hbWUpO289ITB9fWVsc2UgaWYoIW0pe2NvbnN0IGU9KDAsYy5nZXRTdGFuZGFyZEZvbnROYW1lKSh5Lm5hbWUpO2lmKGUpe3Y9YXdhaXQgdGhpcy5mZXRjaFN0YW5kYXJkRm9udERhdGEoZSk7RD0hIXZ9IUQmJnRoaXMub3B0aW9ucy51c2VTeXN0ZW1Gb250cyYmKE49KDAseC5nZXRGb250U3Vic3RpdHV0aW9uKSh0aGlzLnN5c3RlbUZvbnRDYWNoZSx0aGlzLmlkRmFjdG9yeSx0aGlzLm9wdGlvbnMuc3RhbmRhcmRGb250RGF0YVVybCx5Lm5hbWUsZSkpfWI9e3R5cGU6bCxuYW1lOnkubmFtZSxzdWJ0eXBlOkYsZmlsZTp2LGxlbmd0aDE6TyxsZW5ndGgyOlQsbGVuZ3RoMzpNLGlzSW50ZXJuYWxGb250OkQsbG9hZGVkTmFtZTphLmxvYWRlZE5hbWUsY29tcG9zaXRlOm8sZml4ZWRQaXRjaDohMSxmb250TWF0cml4OnQuZ2V0QXJyYXkoIkZvbnRNYXRyaXgiKXx8ci5GT05UX0lERU5USVRZX01BVFJJWCxmaXJzdENoYXI6dSxsYXN0Q2hhcjpkLHRvVW5pY29kZTpmLGJib3g6ZS5nZXRBcnJheSgiRm9udEJCb3giKXx8dC5nZXRBcnJheSgiRm9udEJCb3giKSxhc2NlbnQ6ZS5nZXQoIkFzY2VudCIpLGRlc2NlbnQ6ZS5nZXQoIkRlc2NlbnQiKSx4SGVpZ2h0OmUuZ2V0KCJYSGVpZ2h0Iil8fDAsY2FwSGVpZ2h0OmUuZ2V0KCJDYXBIZWlnaHQiKXx8MCxmbGFnczplLmdldCgiRmxhZ3MiKSxpdGFsaWNBbmdsZTplLmdldCgiSXRhbGljQW5nbGUiKXx8MCxpc1R5cGUzRm9udDptLGNzc0ZvbnRJbmZvOmcsc2NhbGVGYWN0b3JzOkUsc3lzdGVtRm9udEluZm86Tn07aWYobyl7Y29uc3QgZT1hLmdldCgiRW5jb2RpbmciKTtlIGluc3RhbmNlb2YgaS5OYW1lJiYoYi5jaWRFbmNvZGluZz1lLm5hbWUpO2NvbnN0IHQ9YXdhaXQgbi5DTWFwRmFjdG9yeS5jcmVhdGUoe2VuY29kaW5nOmUsZmV0Y2hCdWlsdEluQ01hcDp0aGlzLl9mZXRjaEJ1aWx0SW5DTWFwQm91bmQsdXNlQ01hcDpudWxsfSk7Yi5jTWFwPXQ7Yi52ZXJ0aWNhbD1iLmNNYXAudmVydGljYWx9cmV0dXJuIHRoaXMuZXh0cmFjdERhdGFTdHJ1Y3R1cmVzKHQsYSxiKS50aGVuKChhPT57dGhpcy5leHRyYWN0V2lkdGhzKHQsZSxhKTtyZXR1cm4gbmV3IHMuRm9udCh5Lm5hbWUsdixhKX0pKX1zdGF0aWMgYnVpbGRGb250UGF0aHMoZSx0LGEsbil7ZnVuY3Rpb24gYnVpbGRQYXRoKHQpe2NvbnN0IGk9YCR7ZS5sb2FkZWROYW1lfV9wYXRoXyR7dH1gO3RyeXtpZihlLnJlbmRlcmVyLmhhc0J1aWx0UGF0aCh0KSlyZXR1cm47YS5zZW5kKCJjb21tb25vYmoiLFtpLCJGb250UGF0aCIsZS5yZW5kZXJlci5nZXRQYXRoSnModCldKX1jYXRjaChlKXtpZihuLmlnbm9yZUVycm9ycyl7KDAsci53YXJuKShgYnVpbGRGb250UGF0aHMgLSBpZ25vcmluZyAke2l9IGdseXBoOiAiJHtlfSIuYCk7cmV0dXJufXRocm93IGV9fWZvcihjb25zdCBlIG9mIHQpe2J1aWxkUGF0aChlLmZvbnRDaGFyKTtjb25zdCB0PWUuYWNjZW50O3Q/LmZvbnRDaGFyJiZidWlsZFBhdGgodC5mb250Q2hhcil9fXN0YXRpYyBnZXQgZmFsbGJhY2tGb250RGljdCgpe2NvbnN0IGU9bmV3IGkuRGljdDtlLnNldCgiQmFzZUZvbnQiLGkuTmFtZS5nZXQoIkhlbHZldGljYSIpKTtlLnNldCgiVHlwZSIsaS5OYW1lLmdldCgiRmFsbGJhY2tUeXBlIikpO2Uuc2V0KCJTdWJ0eXBlIixpLk5hbWUuZ2V0KCJGYWxsYmFja1R5cGUiKSk7ZS5zZXQoIkVuY29kaW5nIixpLk5hbWUuZ2V0KCJXaW5BbnNpRW5jb2RpbmciKSk7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImZhbGxiYWNrRm9udERpY3QiLGUpfX10LlBhcnRpYWxFdmFsdWF0b3I9UGFydGlhbEV2YWx1YXRvcjtjbGFzcyBUcmFuc2xhdGVkRm9udHtjb25zdHJ1Y3Rvcih7bG9hZGVkTmFtZTplLGZvbnQ6dCxkaWN0OmEsZXZhbHVhdG9yT3B0aW9uczpyfSl7dGhpcy5sb2FkZWROYW1lPWU7dGhpcy5mb250PXQ7dGhpcy5kaWN0PWE7dGhpcy5fZXZhbHVhdG9yT3B0aW9ucz1yfHxEO3RoaXMudHlwZTNMb2FkZWQ9bnVsbDt0aGlzLnR5cGUzRGVwZW5kZW5jaWVzPXQuaXNUeXBlM0ZvbnQ/bmV3IFNldDpudWxsO3RoaXMuc2VudD0hMX1zZW5kKGUpe2lmKCF0aGlzLnNlbnQpe3RoaXMuc2VudD0hMDtlLnNlbmQoImNvbW1vbm9iaiIsW3RoaXMubG9hZGVkTmFtZSwiRm9udCIsdGhpcy5mb250LmV4cG9ydERhdGEodGhpcy5fZXZhbHVhdG9yT3B0aW9ucy5mb250RXh0cmFQcm9wZXJ0aWVzKV0pfX1mYWxsYmFjayhlKXtpZih0aGlzLmZvbnQuZGF0YSl7dGhpcy5mb250LmRpc2FibGVGb250RmFjZT0hMDtQYXJ0aWFsRXZhbHVhdG9yLmJ1aWxkRm9udFBhdGhzKHRoaXMuZm9udCx0aGlzLmZvbnQuZ2x5cGhDYWNoZVZhbHVlcyxlLHRoaXMuX2V2YWx1YXRvck9wdGlvbnMpfX1sb2FkVHlwZTNEYXRhKGUsdCxhKXtpZih0aGlzLnR5cGUzTG9hZGVkKXJldHVybiB0aGlzLnR5cGUzTG9hZGVkO2lmKCF0aGlzLmZvbnQuaXNUeXBlM0ZvbnQpdGhyb3cgbmV3IEVycm9yKCJNdXN0IGJlIGEgVHlwZTMgZm9udC4iKTtjb25zdCBuPWUuY2xvbmUoe2lnbm9yZUVycm9yczohMX0pO24ucGFyc2luZ1R5cGUzRm9udD0hMDtjb25zdCBzPW5ldyBpLlJlZlNldChlLnR5cGUzRm9udFJlZnMpO3RoaXMuZGljdC5vYmpJZCYmIXMuaGFzKHRoaXMuZGljdC5vYmpJZCkmJnMucHV0KHRoaXMuZGljdC5vYmpJZCk7bi50eXBlM0ZvbnRSZWZzPXM7Y29uc3Qgbz10aGlzLmZvbnQsYz10aGlzLnR5cGUzRGVwZW5kZW5jaWVzO2xldCBsPVByb21pc2UucmVzb2x2ZSgpO2NvbnN0IGg9dGhpcy5kaWN0LmdldCgiQ2hhclByb2NzIiksdT10aGlzLmRpY3QuZ2V0KCJSZXNvdXJjZXMiKXx8dCxkPU9iamVjdC5jcmVhdGUobnVsbCksZj1yLlV0aWwubm9ybWFsaXplUmVjdChvLmJib3h8fFswLDAsMCwwXSksZz1mWzJdLWZbMF0scD1mWzNdLWZbMV0sbT1NYXRoLmh5cG90KGcscCk7Zm9yKGNvbnN0IGUgb2YgaC5nZXRLZXlzKCkpbD1sLnRoZW4oKCgpPT57Y29uc3QgdD1oLmdldChlKSxpPW5ldyBULk9wZXJhdG9yTGlzdDtyZXR1cm4gbi5nZXRPcGVyYXRvckxpc3Qoe3N0cmVhbTp0LHRhc2s6YSxyZXNvdXJjZXM6dSxvcGVyYXRvckxpc3Q6aX0pLnRoZW4oKCgpPT57aS5mbkFycmF5WzBdPT09ci5PUFMuc2V0Q2hhcldpZHRoQW5kQm91bmRzJiZ0aGlzLl9yZW1vdmVUeXBlM0NvbG9yT3BlcmF0b3JzKGksbSk7ZFtlXT1pLmdldElSKCk7Zm9yKGNvbnN0IGUgb2YgaS5kZXBlbmRlbmNpZXMpYy5hZGQoZSl9KSkuY2F0Y2goKGZ1bmN0aW9uKHQpeygwLHIud2FybikoYFR5cGUzIGZvbnQgcmVzb3VyY2UgIiR7ZX0iIGlzIG5vdCBhdmFpbGFibGUuYCk7Y29uc3QgYT1uZXcgVC5PcGVyYXRvckxpc3Q7ZFtlXT1hLmdldElSKCl9KSl9KSk7dGhpcy50eXBlM0xvYWRlZD1sLnRoZW4oKCgpPT57by5jaGFyUHJvY09wZXJhdG9yTGlzdD1kO2lmKHRoaXMuX2Jib3gpe28uaXNDaGFyQkJveD0hMDtvLmJib3g9dGhpcy5fYmJveH19KSk7cmV0dXJuIHRoaXMudHlwZTNMb2FkZWR9X3JlbW92ZVR5cGUzQ29sb3JPcGVyYXRvcnMoZSx0PU5hTil7Y29uc3QgYT1yLlV0aWwubm9ybWFsaXplUmVjdChlLmFyZ3NBcnJheVswXS5zbGljZSgyKSksbj1hWzJdLWFbMF0saT1hWzNdLWFbMV0scz1NYXRoLmh5cG90KG4saSk7aWYoMD09PW58fDA9PT1pKXtlLmZuQXJyYXkuc3BsaWNlKDAsMSk7ZS5hcmdzQXJyYXkuc3BsaWNlKDAsMSl9ZWxzZSBpZigwPT09dHx8TWF0aC5yb3VuZChzL3QpPj0xMCl7dGhpcy5fYmJveHx8KHRoaXMuX2Jib3g9WzEvMCwxLzAsLTEvMCwtMS8wXSk7dGhpcy5fYmJveFswXT1NYXRoLm1pbih0aGlzLl9iYm94WzBdLGFbMF0pO3RoaXMuX2Jib3hbMV09TWF0aC5taW4odGhpcy5fYmJveFsxXSxhWzFdKTt0aGlzLl9iYm94WzJdPU1hdGgubWF4KHRoaXMuX2Jib3hbMl0sYVsyXSk7dGhpcy5fYmJveFszXT1NYXRoLm1heCh0aGlzLl9iYm94WzNdLGFbM10pfWxldCBvPTAsYz1lLmxlbmd0aDtmb3IoO288Yzspe3N3aXRjaChlLmZuQXJyYXlbb10pe2Nhc2Ugci5PUFMuc2V0Q2hhcldpZHRoQW5kQm91bmRzOmJyZWFrO2Nhc2Ugci5PUFMuc2V0U3Ryb2tlQ29sb3JTcGFjZTpjYXNlIHIuT1BTLnNldEZpbGxDb2xvclNwYWNlOmNhc2Ugci5PUFMuc2V0U3Ryb2tlQ29sb3I6Y2FzZSByLk9QUy5zZXRTdHJva2VDb2xvck46Y2FzZSByLk9QUy5zZXRGaWxsQ29sb3I6Y2FzZSByLk9QUy5zZXRGaWxsQ29sb3JOOmNhc2Ugci5PUFMuc2V0U3Ryb2tlR3JheTpjYXNlIHIuT1BTLnNldEZpbGxHcmF5OmNhc2Ugci5PUFMuc2V0U3Ryb2tlUkdCQ29sb3I6Y2FzZSByLk9QUy5zZXRGaWxsUkdCQ29sb3I6Y2FzZSByLk9QUy5zZXRTdHJva2VDTVlLQ29sb3I6Y2FzZSByLk9QUy5zZXRGaWxsQ01ZS0NvbG9yOmNhc2Ugci5PUFMuc2hhZGluZ0ZpbGw6Y2FzZSByLk9QUy5zZXRSZW5kZXJpbmdJbnRlbnQ6ZS5mbkFycmF5LnNwbGljZShvLDEpO2UuYXJnc0FycmF5LnNwbGljZShvLDEpO2MtLTtjb250aW51ZTtjYXNlIHIuT1BTLnNldEdTdGF0ZTpjb25zdFt0XT1lLmFyZ3NBcnJheVtvXTtsZXQgYT0wLG49dC5sZW5ndGg7Zm9yKDthPG47KXtjb25zdFtlXT10W2FdO3N3aXRjaChlKXtjYXNlIlRSIjpjYXNlIlRSMiI6Y2FzZSJIVCI6Y2FzZSJCRyI6Y2FzZSJCRzIiOmNhc2UiVUNSIjpjYXNlIlVDUjIiOnQuc3BsaWNlKGEsMSk7bi0tO2NvbnRpbnVlfWErK319bysrfX19Y2xhc3MgU3RhdGVNYW5hZ2Vye2NvbnN0cnVjdG9yKGU9bmV3IEV2YWxTdGF0ZSl7dGhpcy5zdGF0ZT1lO3RoaXMuc3RhdGVTdGFjaz1bXX1zYXZlKCl7Y29uc3QgZT10aGlzLnN0YXRlO3RoaXMuc3RhdGVTdGFjay5wdXNoKHRoaXMuc3RhdGUpO3RoaXMuc3RhdGU9ZS5jbG9uZSgpfXJlc3RvcmUoKXtjb25zdCBlPXRoaXMuc3RhdGVTdGFjay5wb3AoKTtlJiYodGhpcy5zdGF0ZT1lKX10cmFuc2Zvcm0oZSl7dGhpcy5zdGF0ZS5jdG09ci5VdGlsLnRyYW5zZm9ybSh0aGlzLnN0YXRlLmN0bSxlKX19Y2xhc3MgVGV4dFN0YXRle2NvbnN0cnVjdG9yKCl7dGhpcy5jdG09bmV3IEZsb2F0MzJBcnJheShyLklERU5USVRZX01BVFJJWCk7dGhpcy5mb250TmFtZT1udWxsO3RoaXMuZm9udFNpemU9MDt0aGlzLmxvYWRlZE5hbWU9bnVsbDt0aGlzLmZvbnQ9bnVsbDt0aGlzLmZvbnRNYXRyaXg9ci5GT05UX0lERU5USVRZX01BVFJJWDt0aGlzLnRleHRNYXRyaXg9ci5JREVOVElUWV9NQVRSSVguc2xpY2UoKTt0aGlzLnRleHRMaW5lTWF0cml4PXIuSURFTlRJVFlfTUFUUklYLnNsaWNlKCk7dGhpcy5jaGFyU3BhY2luZz0wO3RoaXMud29yZFNwYWNpbmc9MDt0aGlzLmxlYWRpbmc9MDt0aGlzLnRleHRIU2NhbGU9MTt0aGlzLnRleHRSaXNlPTB9c2V0VGV4dE1hdHJpeChlLHQsYSxyLG4saSl7Y29uc3Qgcz10aGlzLnRleHRNYXRyaXg7c1swXT1lO3NbMV09dDtzWzJdPWE7c1szXT1yO3NbNF09bjtzWzVdPWl9c2V0VGV4dExpbmVNYXRyaXgoZSx0LGEscixuLGkpe2NvbnN0IHM9dGhpcy50ZXh0TGluZU1hdHJpeDtzWzBdPWU7c1sxXT10O3NbMl09YTtzWzNdPXI7c1s0XT1uO3NbNV09aX10cmFuc2xhdGVUZXh0TWF0cml4KGUsdCl7Y29uc3QgYT10aGlzLnRleHRNYXRyaXg7YVs0XT1hWzBdKmUrYVsyXSp0K2FbNF07YVs1XT1hWzFdKmUrYVszXSp0K2FbNV19dHJhbnNsYXRlVGV4dExpbmVNYXRyaXgoZSx0KXtjb25zdCBhPXRoaXMudGV4dExpbmVNYXRyaXg7YVs0XT1hWzBdKmUrYVsyXSp0K2FbNF07YVs1XT1hWzFdKmUrYVszXSp0K2FbNV19Y2FycmlhZ2VSZXR1cm4oKXt0aGlzLnRyYW5zbGF0ZVRleHRMaW5lTWF0cml4KDAsLXRoaXMubGVhZGluZyk7dGhpcy50ZXh0TWF0cml4PXRoaXMudGV4dExpbmVNYXRyaXguc2xpY2UoKX1jbG9uZSgpe2NvbnN0IGU9T2JqZWN0LmNyZWF0ZSh0aGlzKTtlLnRleHRNYXRyaXg9dGhpcy50ZXh0TWF0cml4LnNsaWNlKCk7ZS50ZXh0TGluZU1hdHJpeD10aGlzLnRleHRMaW5lTWF0cml4LnNsaWNlKCk7ZS5mb250TWF0cml4PXRoaXMuZm9udE1hdHJpeC5zbGljZSgpO3JldHVybiBlfX1jbGFzcyBFdmFsU3RhdGV7Y29uc3RydWN0b3IoKXt0aGlzLmN0bT1uZXcgRmxvYXQzMkFycmF5KHIuSURFTlRJVFlfTUFUUklYKTt0aGlzLmZvbnQ9bnVsbDt0aGlzLnRleHRSZW5kZXJpbmdNb2RlPXIuVGV4dFJlbmRlcmluZ01vZGUuRklMTDt0aGlzLmZpbGxDb2xvclNwYWNlPXkuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmdyYXk7dGhpcy5zdHJva2VDb2xvclNwYWNlPXkuQ29sb3JTcGFjZS5zaW5nbGV0b25zLmdyYXl9Y2xvbmUoKXtyZXR1cm4gT2JqZWN0LmNyZWF0ZSh0aGlzKX19Y2xhc3MgRXZhbHVhdG9yUHJlcHJvY2Vzc29ye3N0YXRpYyBnZXQgb3BNYXAoKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywib3BNYXAiLHt3OntpZDpyLk9QUy5zZXRMaW5lV2lkdGgsbnVtQXJnczoxLHZhcmlhYmxlQXJnczohMX0sSjp7aWQ6ci5PUFMuc2V0TGluZUNhcCxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxqOntpZDpyLk9QUy5zZXRMaW5lSm9pbixudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxNOntpZDpyLk9QUy5zZXRNaXRlckxpbWl0LG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LGQ6e2lkOnIuT1BTLnNldERhc2gsbnVtQXJnczoyLHZhcmlhYmxlQXJnczohMX0scmk6e2lkOnIuT1BTLnNldFJlbmRlcmluZ0ludGVudCxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxpOntpZDpyLk9QUy5zZXRGbGF0bmVzcyxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxnczp7aWQ6ci5PUFMuc2V0R1N0YXRlLG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LHE6e2lkOnIuT1BTLnNhdmUsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sUTp7aWQ6ci5PUFMucmVzdG9yZSxudW1BcmdzOjAsdmFyaWFibGVBcmdzOiExfSxjbTp7aWQ6ci5PUFMudHJhbnNmb3JtLG51bUFyZ3M6Nix2YXJpYWJsZUFyZ3M6ITF9LG06e2lkOnIuT1BTLm1vdmVUbyxudW1BcmdzOjIsdmFyaWFibGVBcmdzOiExfSxsOntpZDpyLk9QUy5saW5lVG8sbnVtQXJnczoyLHZhcmlhYmxlQXJnczohMX0sYzp7aWQ6ci5PUFMuY3VydmVUbyxudW1BcmdzOjYsdmFyaWFibGVBcmdzOiExfSx2OntpZDpyLk9QUy5jdXJ2ZVRvMixudW1BcmdzOjQsdmFyaWFibGVBcmdzOiExfSx5OntpZDpyLk9QUy5jdXJ2ZVRvMyxudW1BcmdzOjQsdmFyaWFibGVBcmdzOiExfSxoOntpZDpyLk9QUy5jbG9zZVBhdGgsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0scmU6e2lkOnIuT1BTLnJlY3RhbmdsZSxudW1BcmdzOjQsdmFyaWFibGVBcmdzOiExfSxTOntpZDpyLk9QUy5zdHJva2UsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sczp7aWQ6ci5PUFMuY2xvc2VTdHJva2UsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sZjp7aWQ6ci5PUFMuZmlsbCxudW1BcmdzOjAsdmFyaWFibGVBcmdzOiExfSxGOntpZDpyLk9QUy5maWxsLG51bUFyZ3M6MCx2YXJpYWJsZUFyZ3M6ITF9LCJmKiI6e2lkOnIuT1BTLmVvRmlsbCxudW1BcmdzOjAsdmFyaWFibGVBcmdzOiExfSxCOntpZDpyLk9QUy5maWxsU3Ryb2tlLG51bUFyZ3M6MCx2YXJpYWJsZUFyZ3M6ITF9LCJCKiI6e2lkOnIuT1BTLmVvRmlsbFN0cm9rZSxudW1BcmdzOjAsdmFyaWFibGVBcmdzOiExfSxiOntpZDpyLk9QUy5jbG9zZUZpbGxTdHJva2UsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sImIqIjp7aWQ6ci5PUFMuY2xvc2VFT0ZpbGxTdHJva2UsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sbjp7aWQ6ci5PUFMuZW5kUGF0aCxudW1BcmdzOjAsdmFyaWFibGVBcmdzOiExfSxXOntpZDpyLk9QUy5jbGlwLG51bUFyZ3M6MCx2YXJpYWJsZUFyZ3M6ITF9LCJXKiI6e2lkOnIuT1BTLmVvQ2xpcCxudW1BcmdzOjAsdmFyaWFibGVBcmdzOiExfSxCVDp7aWQ6ci5PUFMuYmVnaW5UZXh0LG51bUFyZ3M6MCx2YXJpYWJsZUFyZ3M6ITF9LEVUOntpZDpyLk9QUy5lbmRUZXh0LG51bUFyZ3M6MCx2YXJpYWJsZUFyZ3M6ITF9LFRjOntpZDpyLk9QUy5zZXRDaGFyU3BhY2luZyxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxUdzp7aWQ6ci5PUFMuc2V0V29yZFNwYWNpbmcsbnVtQXJnczoxLHZhcmlhYmxlQXJnczohMX0sVHo6e2lkOnIuT1BTLnNldEhTY2FsZSxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxUTDp7aWQ6ci5PUFMuc2V0TGVhZGluZyxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxUZjp7aWQ6ci5PUFMuc2V0Rm9udCxudW1BcmdzOjIsdmFyaWFibGVBcmdzOiExfSxUcjp7aWQ6ci5PUFMuc2V0VGV4dFJlbmRlcmluZ01vZGUsbnVtQXJnczoxLHZhcmlhYmxlQXJnczohMX0sVHM6e2lkOnIuT1BTLnNldFRleHRSaXNlLG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LFRkOntpZDpyLk9QUy5tb3ZlVGV4dCxudW1BcmdzOjIsdmFyaWFibGVBcmdzOiExfSxURDp7aWQ6ci5PUFMuc2V0TGVhZGluZ01vdmVUZXh0LG51bUFyZ3M6Mix2YXJpYWJsZUFyZ3M6ITF9LFRtOntpZDpyLk9QUy5zZXRUZXh0TWF0cml4LG51bUFyZ3M6Nix2YXJpYWJsZUFyZ3M6ITF9LCJUKiI6e2lkOnIuT1BTLm5leHRMaW5lLG51bUFyZ3M6MCx2YXJpYWJsZUFyZ3M6ITF9LFRqOntpZDpyLk9QUy5zaG93VGV4dCxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxUSjp7aWQ6ci5PUFMuc2hvd1NwYWNlZFRleHQsbnVtQXJnczoxLHZhcmlhYmxlQXJnczohMX0sIiciOntpZDpyLk9QUy5uZXh0TGluZVNob3dUZXh0LG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LCciJzp7aWQ6ci5PUFMubmV4dExpbmVTZXRTcGFjaW5nU2hvd1RleHQsbnVtQXJnczozLHZhcmlhYmxlQXJnczohMX0sZDA6e2lkOnIuT1BTLnNldENoYXJXaWR0aCxudW1BcmdzOjIsdmFyaWFibGVBcmdzOiExfSxkMTp7aWQ6ci5PUFMuc2V0Q2hhcldpZHRoQW5kQm91bmRzLG51bUFyZ3M6Nix2YXJpYWJsZUFyZ3M6ITF9LENTOntpZDpyLk9QUy5zZXRTdHJva2VDb2xvclNwYWNlLG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LGNzOntpZDpyLk9QUy5zZXRGaWxsQ29sb3JTcGFjZSxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxTQzp7aWQ6ci5PUFMuc2V0U3Ryb2tlQ29sb3IsbnVtQXJnczo0LHZhcmlhYmxlQXJnczohMH0sU0NOOntpZDpyLk9QUy5zZXRTdHJva2VDb2xvck4sbnVtQXJnczozMyx2YXJpYWJsZUFyZ3M6ITB9LHNjOntpZDpyLk9QUy5zZXRGaWxsQ29sb3IsbnVtQXJnczo0LHZhcmlhYmxlQXJnczohMH0sc2NuOntpZDpyLk9QUy5zZXRGaWxsQ29sb3JOLG51bUFyZ3M6MzMsdmFyaWFibGVBcmdzOiEwfSxHOntpZDpyLk9QUy5zZXRTdHJva2VHcmF5LG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LGc6e2lkOnIuT1BTLnNldEZpbGxHcmF5LG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LFJHOntpZDpyLk9QUy5zZXRTdHJva2VSR0JDb2xvcixudW1BcmdzOjMsdmFyaWFibGVBcmdzOiExfSxyZzp7aWQ6ci5PUFMuc2V0RmlsbFJHQkNvbG9yLG51bUFyZ3M6Myx2YXJpYWJsZUFyZ3M6ITF9LEs6e2lkOnIuT1BTLnNldFN0cm9rZUNNWUtDb2xvcixudW1BcmdzOjQsdmFyaWFibGVBcmdzOiExfSxrOntpZDpyLk9QUy5zZXRGaWxsQ01ZS0NvbG9yLG51bUFyZ3M6NCx2YXJpYWJsZUFyZ3M6ITF9LHNoOntpZDpyLk9QUy5zaGFkaW5nRmlsbCxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxCSTp7aWQ6ci5PUFMuYmVnaW5JbmxpbmVJbWFnZSxudW1BcmdzOjAsdmFyaWFibGVBcmdzOiExfSxJRDp7aWQ6ci5PUFMuYmVnaW5JbWFnZURhdGEsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sRUk6e2lkOnIuT1BTLmVuZElubGluZUltYWdlLG51bUFyZ3M6MSx2YXJpYWJsZUFyZ3M6ITF9LERvOntpZDpyLk9QUy5wYWludFhPYmplY3QsbnVtQXJnczoxLHZhcmlhYmxlQXJnczohMX0sTVA6e2lkOnIuT1BTLm1hcmtQb2ludCxudW1BcmdzOjEsdmFyaWFibGVBcmdzOiExfSxEUDp7aWQ6ci5PUFMubWFya1BvaW50UHJvcHMsbnVtQXJnczoyLHZhcmlhYmxlQXJnczohMX0sQk1DOntpZDpyLk9QUy5iZWdpbk1hcmtlZENvbnRlbnQsbnVtQXJnczoxLHZhcmlhYmxlQXJnczohMX0sQkRDOntpZDpyLk9QUy5iZWdpbk1hcmtlZENvbnRlbnRQcm9wcyxudW1BcmdzOjIsdmFyaWFibGVBcmdzOiExfSxFTUM6e2lkOnIuT1BTLmVuZE1hcmtlZENvbnRlbnQsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sQlg6e2lkOnIuT1BTLmJlZ2luQ29tcGF0LG51bUFyZ3M6MCx2YXJpYWJsZUFyZ3M6ITF9LEVYOntpZDpyLk9QUy5lbmRDb21wYXQsbnVtQXJnczowLHZhcmlhYmxlQXJnczohMX0sQk06bnVsbCxCRDpudWxsLHRydWU6bnVsbCxmYTpudWxsLGZhbDpudWxsLGZhbHM6bnVsbCxmYWxzZTpudWxsLG51Om51bGwsbnVsOm51bGwsbnVsbDpudWxsfSl9c3RhdGljIE1BWF9JTlZBTElEX1BBVEhfT1BTPTEwO2NvbnN0cnVjdG9yKGUsdCxhPW5ldyBTdGF0ZU1hbmFnZXIpe3RoaXMucGFyc2VyPW5ldyBmLlBhcnNlcih7bGV4ZXI6bmV3IGYuTGV4ZXIoZSxFdmFsdWF0b3JQcmVwcm9jZXNzb3Iub3BNYXApLHhyZWY6dH0pO3RoaXMuc3RhdGVNYW5hZ2VyPWE7dGhpcy5ub25Qcm9jZXNzZWRBcmdzPVtdO3RoaXMuX2lzUGF0aE9wPSExO3RoaXMuX251bUludmFsaWRQYXRoT1BTPTB9Z2V0IHNhdmVkU3RhdGVzRGVwdGgoKXtyZXR1cm4gdGhpcy5zdGF0ZU1hbmFnZXIuc3RhdGVTdGFjay5sZW5ndGh9cmVhZChlKXtsZXQgdD1lLmFyZ3M7Zm9yKDs7KXtjb25zdCBhPXRoaXMucGFyc2VyLmdldE9iaigpO2lmKGEgaW5zdGFuY2VvZiBpLkNtZCl7Y29uc3Qgbj1hLmNtZCxpPUV2YWx1YXRvclByZXByb2Nlc3Nvci5vcE1hcFtuXTtpZighaSl7KDAsci53YXJuKShgVW5rbm93biBjb21tYW5kICIke259Ii5gKTtjb250aW51ZX1jb25zdCBzPWkuaWQsbz1pLm51bUFyZ3M7bGV0IGM9bnVsbCE9PXQ/dC5sZW5ndGg6MDt0aGlzLl9pc1BhdGhPcHx8KHRoaXMuX251bUludmFsaWRQYXRoT1BTPTApO3RoaXMuX2lzUGF0aE9wPXM+PXIuT1BTLm1vdmVUbyYmczw9ci5PUFMuZW5kUGF0aDtpZihpLnZhcmlhYmxlQXJncyljPm8mJigwLHIuaW5mbykoYENvbW1hbmQgJHtufTogZXhwZWN0ZWQgWzAsICR7b31dIGFyZ3MsIGJ1dCByZWNlaXZlZCAke2N9IGFyZ3MuYCk7ZWxzZXtpZihjIT09byl7Y29uc3QgZT10aGlzLm5vblByb2Nlc3NlZEFyZ3M7Zm9yKDtjPm87KXtlLnB1c2godC5zaGlmdCgpKTtjLS19Zm9yKDtjPG8mJjAhPT1lLmxlbmd0aDspe251bGw9PT10JiYodD1bXSk7dC51bnNoaWZ0KGUucG9wKCkpO2MrK319aWYoYzxvKXtjb25zdCBlPWBjb21tYW5kICR7bn06IGV4cGVjdGVkICR7b30gYXJncywgYnV0IHJlY2VpdmVkICR7Y30gYXJncy5gO2lmKHRoaXMuX2lzUGF0aE9wJiYrK3RoaXMuX251bUludmFsaWRQYXRoT1BTPkV2YWx1YXRvclByZXByb2Nlc3Nvci5NQVhfSU5WQUxJRF9QQVRIX09QUyl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgSW52YWxpZCAke2V9YCk7KDAsci53YXJuKShgU2tpcHBpbmcgJHtlfWApO251bGwhPT10JiYodC5sZW5ndGg9MCk7Y29udGludWV9fXRoaXMucHJlcHJvY2Vzc0NvbW1hbmQocyx0KTtlLmZuPXM7ZS5hcmdzPXQ7cmV0dXJuITB9aWYoYT09PWkuRU9GKXJldHVybiExO2lmKG51bGwhPT1hKXtudWxsPT09dCYmKHQ9W10pO3QucHVzaChhKTtpZih0Lmxlbmd0aD4zMyl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiVG9vIG1hbnkgYXJndW1lbnRzIil9fX1wcmVwcm9jZXNzQ29tbWFuZChlLHQpe3N3aXRjaCgwfGUpe2Nhc2Ugci5PUFMuc2F2ZTp0aGlzLnN0YXRlTWFuYWdlci5zYXZlKCk7YnJlYWs7Y2FzZSByLk9QUy5yZXN0b3JlOnRoaXMuc3RhdGVNYW5hZ2VyLnJlc3RvcmUoKTticmVhaztjYXNlIHIuT1BTLnRyYW5zZm9ybTp0aGlzLnN0YXRlTWFuYWdlci50cmFuc2Zvcm0odCl9fX10LkV2YWx1YXRvclByZXByb2Nlc3Nvcj1FdmFsdWF0b3JQcmVwcm9jZXNzb3J9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5JZGVudGl0eUNNYXA9dC5DTWFwRmFjdG9yeT10LkNNYXA9dm9pZCAwO3ZhciByPWEoMiksbj1hKDQpLGk9YSg1KSxzPWEoMTUpLG89YSgxNiksYz1hKDMpLGw9YSg4KTtjb25zdCBoPVsiQWRvYmUtR0IxLVVDUzIiLCJBZG9iZS1DTlMxLVVDUzIiLCJBZG9iZS1KYXBhbjEtVUNTMiIsIkFkb2JlLUtvcmVhMS1VQ1MyIiwiNzgtRVVDLUgiLCI3OC1FVUMtViIsIjc4LUgiLCI3OC1SS1NKLUgiLCI3OC1SS1NKLVYiLCI3OC1WIiwiNzhtcy1SS1NKLUgiLCI3OG1zLVJLU0otViIsIjgzcHYtUktTSi1IIiwiOTBtcy1SS1NKLUgiLCI5MG1zLVJLU0otViIsIjkwbXNwLVJLU0otSCIsIjkwbXNwLVJLU0otViIsIjkwcHYtUktTSi1IIiwiOTBwdi1SS1NKLVYiLCJBZGQtSCIsIkFkZC1SS1NKLUgiLCJBZGQtUktTSi1WIiwiQWRkLVYiLCJBZG9iZS1DTlMxLTAiLCJBZG9iZS1DTlMxLTEiLCJBZG9iZS1DTlMxLTIiLCJBZG9iZS1DTlMxLTMiLCJBZG9iZS1DTlMxLTQiLCJBZG9iZS1DTlMxLTUiLCJBZG9iZS1DTlMxLTYiLCJBZG9iZS1HQjEtMCIsIkFkb2JlLUdCMS0xIiwiQWRvYmUtR0IxLTIiLCJBZG9iZS1HQjEtMyIsIkFkb2JlLUdCMS00IiwiQWRvYmUtR0IxLTUiLCJBZG9iZS1KYXBhbjEtMCIsIkFkb2JlLUphcGFuMS0xIiwiQWRvYmUtSmFwYW4xLTIiLCJBZG9iZS1KYXBhbjEtMyIsIkFkb2JlLUphcGFuMS00IiwiQWRvYmUtSmFwYW4xLTUiLCJBZG9iZS1KYXBhbjEtNiIsIkFkb2JlLUtvcmVhMS0wIiwiQWRvYmUtS29yZWExLTEiLCJBZG9iZS1Lb3JlYTEtMiIsIkI1LUgiLCJCNS1WIiwiQjVwYy1IIiwiQjVwYy1WIiwiQ05TLUVVQy1IIiwiQ05TLUVVQy1WIiwiQ05TMS1IIiwiQ05TMS1WIiwiQ05TMi1IIiwiQ05TMi1WIiwiRVRISy1CNS1IIiwiRVRISy1CNS1WIiwiRVRlbi1CNS1IIiwiRVRlbi1CNS1WIiwiRVRlbm1zLUI1LUgiLCJFVGVubXMtQjUtViIsIkVVQy1IIiwiRVVDLVYiLCJFeHQtSCIsIkV4dC1SS1NKLUgiLCJFeHQtUktTSi1WIiwiRXh0LVYiLCJHQi1FVUMtSCIsIkdCLUVVQy1WIiwiR0ItSCIsIkdCLVYiLCJHQkstRVVDLUgiLCJHQkstRVVDLVYiLCJHQksySy1IIiwiR0JLMkstViIsIkdCS3AtRVVDLUgiLCJHQktwLUVVQy1WIiwiR0JULUVVQy1IIiwiR0JULUVVQy1WIiwiR0JULUgiLCJHQlQtViIsIkdCVHBjLUVVQy1IIiwiR0JUcGMtRVVDLVYiLCJHQnBjLUVVQy1IIiwiR0JwYy1FVUMtViIsIkgiLCJIS2RsYS1CNS1IIiwiSEtkbGEtQjUtViIsIkhLZGxiLUI1LUgiLCJIS2RsYi1CNS1WIiwiSEtnY2NzLUI1LUgiLCJIS2djY3MtQjUtViIsIkhLbTMxNC1CNS1IIiwiSEttMzE0LUI1LVYiLCJIS200NzEtQjUtSCIsIkhLbTQ3MS1CNS1WIiwiSEtzY3MtQjUtSCIsIkhLc2NzLUI1LVYiLCJIYW5rYWt1IiwiSGlyYWdhbmEiLCJLU0MtRVVDLUgiLCJLU0MtRVVDLVYiLCJLU0MtSCIsIktTQy1Kb2hhYi1IIiwiS1NDLUpvaGFiLVYiLCJLU0MtViIsIktTQ21zLVVIQy1IIiwiS1NDbXMtVUhDLUhXLUgiLCJLU0Ntcy1VSEMtSFctViIsIktTQ21zLVVIQy1WIiwiS1NDcGMtRVVDLUgiLCJLU0NwYy1FVUMtViIsIkthdGFrYW5hIiwiTldQLUgiLCJOV1AtViIsIlJLU0otSCIsIlJLU0otViIsIlJvbWFuIiwiVW5pQ05TLVVDUzItSCIsIlVuaUNOUy1VQ1MyLVYiLCJVbmlDTlMtVVRGMTYtSCIsIlVuaUNOUy1VVEYxNi1WIiwiVW5pQ05TLVVURjMyLUgiLCJVbmlDTlMtVVRGMzItViIsIlVuaUNOUy1VVEY4LUgiLCJVbmlDTlMtVVRGOC1WIiwiVW5pR0ItVUNTMi1IIiwiVW5pR0ItVUNTMi1WIiwiVW5pR0ItVVRGMTYtSCIsIlVuaUdCLVVURjE2LVYiLCJVbmlHQi1VVEYzMi1IIiwiVW5pR0ItVVRGMzItViIsIlVuaUdCLVVURjgtSCIsIlVuaUdCLVVURjgtViIsIlVuaUpJUy1VQ1MyLUgiLCJVbmlKSVMtVUNTMi1IVy1IIiwiVW5pSklTLVVDUzItSFctViIsIlVuaUpJUy1VQ1MyLVYiLCJVbmlKSVMtVVRGMTYtSCIsIlVuaUpJUy1VVEYxNi1WIiwiVW5pSklTLVVURjMyLUgiLCJVbmlKSVMtVVRGMzItViIsIlVuaUpJUy1VVEY4LUgiLCJVbmlKSVMtVVRGOC1WIiwiVW5pSklTMjAwNC1VVEYxNi1IIiwiVW5pSklTMjAwNC1VVEYxNi1WIiwiVW5pSklTMjAwNC1VVEYzMi1IIiwiVW5pSklTMjAwNC1VVEYzMi1WIiwiVW5pSklTMjAwNC1VVEY4LUgiLCJVbmlKSVMyMDA0LVVURjgtViIsIlVuaUpJU1Byby1VQ1MyLUhXLVYiLCJVbmlKSVNQcm8tVUNTMi1WIiwiVW5pSklTUHJvLVVURjgtViIsIlVuaUpJU1gwMjEzLVVURjMyLUgiLCJVbmlKSVNYMDIxMy1VVEYzMi1WIiwiVW5pSklTWDAyMTMyMDA0LVVURjMyLUgiLCJVbmlKSVNYMDIxMzIwMDQtVVRGMzItViIsIlVuaUtTLVVDUzItSCIsIlVuaUtTLVVDUzItViIsIlVuaUtTLVVURjE2LUgiLCJVbmlLUy1VVEYxNi1WIiwiVW5pS1MtVVRGMzItSCIsIlVuaUtTLVVURjMyLVYiLCJVbmlLUy1VVEY4LUgiLCJVbmlLUy1VVEY4LVYiLCJWIiwiV1AtU3ltYm9sIl0sdT0yKioyNC0xO2NsYXNzIENNYXB7Y29uc3RydWN0b3IoZT0hMSl7dGhpcy5jb2Rlc3BhY2VSYW5nZXM9W1tdLFtdLFtdLFtdXTt0aGlzLm51bUNvZGVzcGFjZVJhbmdlcz0wO3RoaXMuX21hcD1bXTt0aGlzLm5hbWU9IiI7dGhpcy52ZXJ0aWNhbD0hMTt0aGlzLnVzZUNNYXA9bnVsbDt0aGlzLmJ1aWx0SW5DTWFwPWV9YWRkQ29kZXNwYWNlUmFuZ2UoZSx0LGEpe3RoaXMuY29kZXNwYWNlUmFuZ2VzW2UtMV0ucHVzaCh0LGEpO3RoaXMubnVtQ29kZXNwYWNlUmFuZ2VzKyt9bWFwQ2lkUmFuZ2UoZSx0LGEpe2lmKHQtZT51KXRocm93IG5ldyBFcnJvcigibWFwQ2lkUmFuZ2UgLSBpZ25vcmluZyBkYXRhIGFib3ZlIE1BWF9NQVBfUkFOR0UuIik7Zm9yKDtlPD10Oyl0aGlzLl9tYXBbZSsrXT1hKyt9bWFwQmZSYW5nZShlLHQsYSl7aWYodC1lPnUpdGhyb3cgbmV3IEVycm9yKCJtYXBCZlJhbmdlIC0gaWdub3JpbmcgZGF0YSBhYm92ZSBNQVhfTUFQX1JBTkdFLiIpO2NvbnN0IHI9YS5sZW5ndGgtMTtmb3IoO2U8PXQ7KXt0aGlzLl9tYXBbZSsrXT1hO2NvbnN0IHQ9YS5jaGFyQ29kZUF0KHIpKzE7dD4yNTU/YT1hLnN1YnN0cmluZygwLHItMSkrU3RyaW5nLmZyb21DaGFyQ29kZShhLmNoYXJDb2RlQXQoci0xKSsxKSsiXDAiOmE9YS5zdWJzdHJpbmcoMCxyKStTdHJpbmcuZnJvbUNoYXJDb2RlKHQpfX1tYXBCZlJhbmdlVG9BcnJheShlLHQsYSl7aWYodC1lPnUpdGhyb3cgbmV3IEVycm9yKCJtYXBCZlJhbmdlVG9BcnJheSAtIGlnbm9yaW5nIGRhdGEgYWJvdmUgTUFYX01BUF9SQU5HRS4iKTtjb25zdCByPWEubGVuZ3RoO2xldCBuPTA7Zm9yKDtlPD10JiZuPHI7KXt0aGlzLl9tYXBbZV09YVtuKytdOysrZX19bWFwT25lKGUsdCl7dGhpcy5fbWFwW2VdPXR9bG9va3VwKGUpe3JldHVybiB0aGlzLl9tYXBbZV19Y29udGFpbnMoZSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuX21hcFtlXX1mb3JFYWNoKGUpe2NvbnN0IHQ9dGhpcy5fbWFwLGE9dC5sZW5ndGg7aWYoYTw9NjU1MzYpZm9yKGxldCByPTA7cjxhO3IrKyl2b2lkIDAhPT10W3JdJiZlKHIsdFtyXSk7ZWxzZSBmb3IoY29uc3QgYSBpbiB0KWUoYSx0W2FdKX1jaGFyQ29kZU9mKGUpe2NvbnN0IHQ9dGhpcy5fbWFwO2lmKHQubGVuZ3RoPD02NTUzNilyZXR1cm4gdC5pbmRleE9mKGUpO2Zvcihjb25zdCBhIGluIHQpaWYodFthXT09PWUpcmV0dXJuIDB8YTtyZXR1cm4tMX1nZXRNYXAoKXtyZXR1cm4gdGhpcy5fbWFwfXJlYWRDaGFyQ29kZShlLHQsYSl7bGV0IHI9MDtjb25zdCBuPXRoaXMuY29kZXNwYWNlUmFuZ2VzO2ZvcihsZXQgaT0wLHM9bi5sZW5ndGg7aTxzO2krKyl7cj0ocjw8OHxlLmNoYXJDb2RlQXQodCtpKSk+Pj4wO2NvbnN0IHM9bltpXTtmb3IobGV0IGU9MCx0PXMubGVuZ3RoO2U8dDspe2NvbnN0IHQ9c1tlKytdLG49c1tlKytdO2lmKHI+PXQmJnI8PW4pe2EuY2hhcmNvZGU9cjthLmxlbmd0aD1pKzE7cmV0dXJufX19YS5jaGFyY29kZT0wO2EubGVuZ3RoPTF9Z2V0Q2hhckNvZGVMZW5ndGgoZSl7Y29uc3QgdD10aGlzLmNvZGVzcGFjZVJhbmdlcztmb3IobGV0IGE9MCxyPXQubGVuZ3RoO2E8cjthKyspe2NvbnN0IHI9dFthXTtmb3IobGV0IHQ9MCxuPXIubGVuZ3RoO3Q8bjspe2NvbnN0IG49clt0KytdLGk9clt0KytdO2lmKGU+PW4mJmU8PWkpcmV0dXJuIGErMX19cmV0dXJuIDF9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLl9tYXAubGVuZ3RofWdldCBpc0lkZW50aXR5Q01hcCgpe2lmKCJJZGVudGl0eS1IIiE9PXRoaXMubmFtZSYmIklkZW50aXR5LVYiIT09dGhpcy5uYW1lKXJldHVybiExO2lmKDY1NTM2IT09dGhpcy5fbWFwLmxlbmd0aClyZXR1cm4hMTtmb3IobGV0IGU9MDtlPDY1NTM2O2UrKylpZih0aGlzLl9tYXBbZV0hPT1lKXJldHVybiExO3JldHVybiEwfX10LkNNYXA9Q01hcDtjbGFzcyBJZGVudGl0eUNNYXAgZXh0ZW5kcyBDTWFwe2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoKTt0aGlzLnZlcnRpY2FsPWU7dGhpcy5hZGRDb2Rlc3BhY2VSYW5nZSh0LDAsNjU1MzUpfW1hcENpZFJhbmdlKGUsdCxhKXsoMCxyLnVucmVhY2hhYmxlKSgic2hvdWxkIG5vdCBjYWxsIG1hcENpZFJhbmdlIil9bWFwQmZSYW5nZShlLHQsYSl7KDAsci51bnJlYWNoYWJsZSkoInNob3VsZCBub3QgY2FsbCBtYXBCZlJhbmdlIil9bWFwQmZSYW5nZVRvQXJyYXkoZSx0LGEpeygwLHIudW5yZWFjaGFibGUpKCJzaG91bGQgbm90IGNhbGwgbWFwQmZSYW5nZVRvQXJyYXkiKX1tYXBPbmUoZSx0KXsoMCxyLnVucmVhY2hhYmxlKSgic2hvdWxkIG5vdCBjYWxsIG1hcENpZE9uZSIpfWxvb2t1cChlKXtyZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihlKSYmZTw9NjU1MzU/ZTp2b2lkIDB9Y29udGFpbnMoZSl7cmV0dXJuIE51bWJlci5pc0ludGVnZXIoZSkmJmU8PTY1NTM1fWZvckVhY2goZSl7Zm9yKGxldCB0PTA7dDw9NjU1MzU7dCsrKWUodCx0KX1jaGFyQ29kZU9mKGUpe3JldHVybiBOdW1iZXIuaXNJbnRlZ2VyKGUpJiZlPD02NTUzNT9lOi0xfWdldE1hcCgpe2NvbnN0IGU9bmV3IEFycmF5KDY1NTM2KTtmb3IobGV0IHQ9MDt0PD02NTUzNTt0KyspZVt0XT10O3JldHVybiBlfWdldCBsZW5ndGgoKXtyZXR1cm4gNjU1MzZ9Z2V0IGlzSWRlbnRpdHlDTWFwKCl7KDAsci51bnJlYWNoYWJsZSkoInNob3VsZCBub3QgYWNjZXNzIC5pc0lkZW50aXR5Q01hcCIpfX10LklkZW50aXR5Q01hcD1JZGVudGl0eUNNYXA7ZnVuY3Rpb24gc3RyVG9JbnQoZSl7bGV0IHQ9MDtmb3IobGV0IGE9MDthPGUubGVuZ3RoO2ErKyl0PXQ8PDh8ZS5jaGFyQ29kZUF0KGEpO3JldHVybiB0Pj4+MH1mdW5jdGlvbiBleHBlY3RTdHJpbmcoZSl7aWYoInN0cmluZyIhPXR5cGVvZiBlKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJNYWxmb3JtZWQgQ01hcDogZXhwZWN0ZWQgc3RyaW5nLiIpfWZ1bmN0aW9uIGV4cGVjdEludChlKXtpZighTnVtYmVyLmlzSW50ZWdlcihlKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiTWFsZm9ybWVkIENNYXA6IGV4cGVjdGVkIGludC4iKX1mdW5jdGlvbiBwYXJzZUJmQ2hhcihlLHQpe2Zvcig7Oyl7bGV0IGE9dC5nZXRPYmooKTtpZihhPT09bi5FT0YpYnJlYWs7aWYoKDAsbi5pc0NtZCkoYSwiZW5kYmZjaGFyIikpcmV0dXJuO2V4cGVjdFN0cmluZyhhKTtjb25zdCByPXN0clRvSW50KGEpO2E9dC5nZXRPYmooKTtleHBlY3RTdHJpbmcoYSk7Y29uc3QgaT1hO2UubWFwT25lKHIsaSl9fWZ1bmN0aW9uIHBhcnNlQmZSYW5nZShlLHQpe2Zvcig7Oyl7bGV0IGE9dC5nZXRPYmooKTtpZihhPT09bi5FT0YpYnJlYWs7aWYoKDAsbi5pc0NtZCkoYSwiZW5kYmZyYW5nZSIpKXJldHVybjtleHBlY3RTdHJpbmcoYSk7Y29uc3Qgcj1zdHJUb0ludChhKTthPXQuZ2V0T2JqKCk7ZXhwZWN0U3RyaW5nKGEpO2NvbnN0IGk9c3RyVG9JbnQoYSk7YT10LmdldE9iaigpO2lmKE51bWJlci5pc0ludGVnZXIoYSl8fCJzdHJpbmciPT10eXBlb2YgYSl7Y29uc3QgdD1OdW1iZXIuaXNJbnRlZ2VyKGEpP1N0cmluZy5mcm9tQ2hhckNvZGUoYSk6YTtlLm1hcEJmUmFuZ2UocixpLHQpfWVsc2V7aWYoISgwLG4uaXNDbWQpKGEsIlsiKSlicmVhazt7YT10LmdldE9iaigpO2NvbnN0IHM9W107Zm9yKDshKDAsbi5pc0NtZCkoYSwiXSIpJiZhIT09bi5FT0Y7KXtzLnB1c2goYSk7YT10LmdldE9iaigpfWUubWFwQmZSYW5nZVRvQXJyYXkocixpLHMpfX19dGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgYmYgcmFuZ2UuIil9ZnVuY3Rpb24gcGFyc2VDaWRDaGFyKGUsdCl7Zm9yKDs7KXtsZXQgYT10LmdldE9iaigpO2lmKGE9PT1uLkVPRilicmVhaztpZigoMCxuLmlzQ21kKShhLCJlbmRjaWRjaGFyIikpcmV0dXJuO2V4cGVjdFN0cmluZyhhKTtjb25zdCByPXN0clRvSW50KGEpO2E9dC5nZXRPYmooKTtleHBlY3RJbnQoYSk7Y29uc3QgaT1hO2UubWFwT25lKHIsaSl9fWZ1bmN0aW9uIHBhcnNlQ2lkUmFuZ2UoZSx0KXtmb3IoOzspe2xldCBhPXQuZ2V0T2JqKCk7aWYoYT09PW4uRU9GKWJyZWFrO2lmKCgwLG4uaXNDbWQpKGEsImVuZGNpZHJhbmdlIikpcmV0dXJuO2V4cGVjdFN0cmluZyhhKTtjb25zdCByPXN0clRvSW50KGEpO2E9dC5nZXRPYmooKTtleHBlY3RTdHJpbmcoYSk7Y29uc3QgaT1zdHJUb0ludChhKTthPXQuZ2V0T2JqKCk7ZXhwZWN0SW50KGEpO2NvbnN0IHM9YTtlLm1hcENpZFJhbmdlKHIsaSxzKX19ZnVuY3Rpb24gcGFyc2VDb2Rlc3BhY2VSYW5nZShlLHQpe2Zvcig7Oyl7bGV0IGE9dC5nZXRPYmooKTtpZihhPT09bi5FT0YpYnJlYWs7aWYoKDAsbi5pc0NtZCkoYSwiZW5kY29kZXNwYWNlcmFuZ2UiKSlyZXR1cm47aWYoInN0cmluZyIhPXR5cGVvZiBhKWJyZWFrO2NvbnN0IHI9c3RyVG9JbnQoYSk7YT10LmdldE9iaigpO2lmKCJzdHJpbmciIT10eXBlb2YgYSlicmVhaztjb25zdCBpPXN0clRvSW50KGEpO2UuYWRkQ29kZXNwYWNlUmFuZ2UoYS5sZW5ndGgscixpKX10aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiSW52YWxpZCBjb2Rlc3BhY2UgcmFuZ2UuIil9ZnVuY3Rpb24gcGFyc2VXTW9kZShlLHQpe2NvbnN0IGE9dC5nZXRPYmooKTtOdW1iZXIuaXNJbnRlZ2VyKGEpJiYoZS52ZXJ0aWNhbD0hIWEpfWZ1bmN0aW9uIHBhcnNlQ01hcE5hbWUoZSx0KXtjb25zdCBhPXQuZ2V0T2JqKCk7YSBpbnN0YW5jZW9mIG4uTmFtZSYmKGUubmFtZT1hLm5hbWUpfWFzeW5jIGZ1bmN0aW9uIHBhcnNlQ01hcChlLHQsYSxpKXtsZXQgcyxvO2U6Zm9yKDs7KXRyeXtjb25zdCBhPXQuZ2V0T2JqKCk7aWYoYT09PW4uRU9GKWJyZWFrO2lmKGEgaW5zdGFuY2VvZiBuLk5hbWUpeyJXTW9kZSI9PT1hLm5hbWU/cGFyc2VXTW9kZShlLHQpOiJDTWFwTmFtZSI9PT1hLm5hbWUmJnBhcnNlQ01hcE5hbWUoZSx0KTtzPWF9ZWxzZSBpZihhIGluc3RhbmNlb2Ygbi5DbWQpc3dpdGNoKGEuY21kKXtjYXNlImVuZGNtYXAiOmJyZWFrIGU7Y2FzZSJ1c2VjbWFwIjpzIGluc3RhbmNlb2Ygbi5OYW1lJiYobz1zLm5hbWUpO2JyZWFrO2Nhc2UiYmVnaW5jb2Rlc3BhY2VyYW5nZSI6cGFyc2VDb2Rlc3BhY2VSYW5nZShlLHQpO2JyZWFrO2Nhc2UiYmVnaW5iZmNoYXIiOnBhcnNlQmZDaGFyKGUsdCk7YnJlYWs7Y2FzZSJiZWdpbmNpZGNoYXIiOnBhcnNlQ2lkQ2hhcihlLHQpO2JyZWFrO2Nhc2UiYmVnaW5iZnJhbmdlIjpwYXJzZUJmUmFuZ2UoZSx0KTticmVhaztjYXNlImJlZ2luY2lkcmFuZ2UiOnBhcnNlQ2lkUmFuZ2UoZSx0KX19Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIGMuTWlzc2luZ0RhdGFFeGNlcHRpb24pdGhyb3cgZTsoMCxyLndhcm4pKCJJbnZhbGlkIGNNYXAgZGF0YTogIitlKTtjb250aW51ZX0haSYmbyYmKGk9byk7cmV0dXJuIGk/ZXh0ZW5kQ01hcChlLGEsaSk6ZX1hc3luYyBmdW5jdGlvbiBleHRlbmRDTWFwKGUsdCxhKXtlLnVzZUNNYXA9YXdhaXQgY3JlYXRlQnVpbHRJbkNNYXAoYSx0KTtpZigwPT09ZS5udW1Db2Rlc3BhY2VSYW5nZXMpe2NvbnN0IHQ9ZS51c2VDTWFwLmNvZGVzcGFjZVJhbmdlcztmb3IobGV0IGE9MDthPHQubGVuZ3RoO2ErKyllLmNvZGVzcGFjZVJhbmdlc1thXT10W2FdLnNsaWNlKCk7ZS5udW1Db2Rlc3BhY2VSYW5nZXM9ZS51c2VDTWFwLm51bUNvZGVzcGFjZVJhbmdlc31lLnVzZUNNYXAuZm9yRWFjaCgoZnVuY3Rpb24odCxhKXtlLmNvbnRhaW5zKHQpfHxlLm1hcE9uZSh0LGUudXNlQ01hcC5sb29rdXAodCkpfSkpO3JldHVybiBlfWFzeW5jIGZ1bmN0aW9uIGNyZWF0ZUJ1aWx0SW5DTWFwKGUsdCl7aWYoIklkZW50aXR5LUgiPT09ZSlyZXR1cm4gbmV3IElkZW50aXR5Q01hcCghMSwyKTtpZigiSWRlbnRpdHktViI9PT1lKXJldHVybiBuZXcgSWRlbnRpdHlDTWFwKCEwLDIpO2lmKCFoLmluY2x1ZGVzKGUpKXRocm93IG5ldyBFcnJvcigiVW5rbm93biBDTWFwIG5hbWU6ICIrZSk7aWYoIXQpdGhyb3cgbmV3IEVycm9yKCJCdWlsdC1pbiBDTWFwIHBhcmFtZXRlcnMgYXJlIG5vdCBwcm92aWRlZC4iKTtjb25zdHtjTWFwRGF0YTphLGNvbXByZXNzaW9uVHlwZTpufT1hd2FpdCB0KGUpLGk9bmV3IENNYXAoITApO2lmKG49PT1yLkNNYXBDb21wcmVzc2lvblR5cGUuQklOQVJZKXJldHVybihuZXcgcy5CaW5hcnlDTWFwUmVhZGVyKS5wcm9jZXNzKGEsaSwoZT0+ZXh0ZW5kQ01hcChpLHQsZSkpKTtpZihuPT09ci5DTWFwQ29tcHJlc3Npb25UeXBlLk5PTkUpe2NvbnN0IGU9bmV3IG8uTGV4ZXIobmV3IGwuU3RyZWFtKGEpKTtyZXR1cm4gcGFyc2VDTWFwKGksZSx0LG51bGwpfXRocm93IG5ldyBFcnJvcihgSW52YWxpZCBDTWFwICJjb21wcmVzc2lvblR5cGUiIHZhbHVlOiAke259YCl9dC5DTWFwRmFjdG9yeT1jbGFzcyBDTWFwRmFjdG9yeXtzdGF0aWMgYXN5bmMgY3JlYXRlKHtlbmNvZGluZzplLGZldGNoQnVpbHRJbkNNYXA6dCx1c2VDTWFwOmF9KXtpZihlIGluc3RhbmNlb2Ygbi5OYW1lKXJldHVybiBjcmVhdGVCdWlsdEluQ01hcChlLm5hbWUsdCk7aWYoZSBpbnN0YW5jZW9mIGkuQmFzZVN0cmVhbSl7Y29uc3Qgcj1hd2FpdCBwYXJzZUNNYXAobmV3IENNYXAsbmV3IG8uTGV4ZXIoZSksdCxhKTtyZXR1cm4gci5pc0lkZW50aXR5Q01hcD9jcmVhdGVCdWlsdEluQ01hcChyLm5hbWUsdCk6cn10aHJvdyBuZXcgRXJyb3IoIkVuY29kaW5nIHJlcXVpcmVkLiIpfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5CaW5hcnlDTWFwUmVhZGVyPXZvaWQgMDt2YXIgcj1hKDIpO2Z1bmN0aW9uIGhleFRvSW50KGUsdCl7bGV0IGE9MDtmb3IobGV0IHI9MDtyPD10O3IrKylhPWE8PDh8ZVtyXTtyZXR1cm4gYT4+PjB9ZnVuY3Rpb24gaGV4VG9TdHIoZSx0KXtyZXR1cm4gMT09PXQ/U3RyaW5nLmZyb21DaGFyQ29kZShlWzBdLGVbMV0pOjM9PT10P1N0cmluZy5mcm9tQ2hhckNvZGUoZVswXSxlWzFdLGVbMl0sZVszXSk6U3RyaW5nLmZyb21DaGFyQ29kZSguLi5lLnN1YmFycmF5KDAsdCsxKSl9ZnVuY3Rpb24gYWRkSGV4KGUsdCxhKXtsZXQgcj0wO2ZvcihsZXQgbj1hO24+PTA7bi0tKXtyKz1lW25dK3Rbbl07ZVtuXT0yNTUmcjtyPj49OH19ZnVuY3Rpb24gaW5jSGV4KGUsdCl7bGV0IGE9MTtmb3IobGV0IHI9dDtyPj0wJiZhPjA7ci0tKXthKz1lW3JdO2Vbcl09MjU1JmE7YT4+PTh9fWNvbnN0IG49MTY7Y2xhc3MgQmluYXJ5Q01hcFN0cmVhbXtjb25zdHJ1Y3RvcihlKXt0aGlzLmJ1ZmZlcj1lO3RoaXMucG9zPTA7dGhpcy5lbmQ9ZS5sZW5ndGg7dGhpcy50bXBCdWY9bmV3IFVpbnQ4QXJyYXkoMTkpfXJlYWRCeXRlKCl7cmV0dXJuIHRoaXMucG9zPj10aGlzLmVuZD8tMTp0aGlzLmJ1ZmZlclt0aGlzLnBvcysrXX1yZWFkTnVtYmVyKCl7bGV0IGUsdD0wO2Rve2NvbnN0IGE9dGhpcy5yZWFkQnl0ZSgpO2lmKGE8MCl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigidW5leHBlY3RlZCBFT0YgaW4gYmNtYXAiKTtlPSEoMTI4JmEpO3Q9dDw8N3wxMjcmYX13aGlsZSghZSk7cmV0dXJuIHR9cmVhZFNpZ25lZCgpe2NvbnN0IGU9dGhpcy5yZWFkTnVtYmVyKCk7cmV0dXJuIDEmZT9+KGU+Pj4xKTplPj4+MX1yZWFkSGV4KGUsdCl7ZS5zZXQodGhpcy5idWZmZXIuc3ViYXJyYXkodGhpcy5wb3MsdGhpcy5wb3MrdCsxKSk7dGhpcy5wb3MrPXQrMX1yZWFkSGV4TnVtYmVyKGUsdCl7bGV0IGE7Y29uc3Qgbj10aGlzLnRtcEJ1ZjtsZXQgaT0wO2Rve2NvbnN0IGU9dGhpcy5yZWFkQnl0ZSgpO2lmKGU8MCl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigidW5leHBlY3RlZCBFT0YgaW4gYmNtYXAiKTthPSEoMTI4JmUpO25baSsrXT0xMjcmZX13aGlsZSghYSk7bGV0IHM9dCxvPTAsYz0wO2Zvcig7cz49MDspe2Zvcig7Yzw4JiZuLmxlbmd0aD4wOyl7b3w9blstLWldPDxjO2MrPTd9ZVtzXT0yNTUmbztzLS07bz4+PTg7Yy09OH19cmVhZEhleFNpZ25lZChlLHQpe3RoaXMucmVhZEhleE51bWJlcihlLHQpO2NvbnN0IGE9MSZlW3RdPzI1NTowO2xldCByPTA7Zm9yKGxldCBuPTA7bjw9dDtuKyspe3I9KDEmcik8PDh8ZVtuXTtlW25dPXI+PjFeYX19cmVhZFN0cmluZygpe2NvbnN0IGU9dGhpcy5yZWFkTnVtYmVyKCksdD1uZXcgQXJyYXkoZSk7Zm9yKGxldCBhPTA7YTxlO2ErKyl0W2FdPXRoaXMucmVhZE51bWJlcigpO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKC4uLnQpfX10LkJpbmFyeUNNYXBSZWFkZXI9Y2xhc3MgQmluYXJ5Q01hcFJlYWRlcnthc3luYyBwcm9jZXNzKGUsdCxhKXtjb25zdCByPW5ldyBCaW5hcnlDTWFwU3RyZWFtKGUpLGk9ci5yZWFkQnl0ZSgpO3QudmVydGljYWw9ISEoMSZpKTtsZXQgcz1udWxsO2NvbnN0IG89bmV3IFVpbnQ4QXJyYXkobiksYz1uZXcgVWludDhBcnJheShuKSxsPW5ldyBVaW50OEFycmF5KG4pLGg9bmV3IFVpbnQ4QXJyYXkobiksdT1uZXcgVWludDhBcnJheShuKTtsZXQgZCxmO2Zvcig7KGY9ci5yZWFkQnl0ZSgpKT49MDspe2NvbnN0IGU9Zj4+NTtpZig3PT09ZSl7c3dpdGNoKDMxJmYpe2Nhc2UgMDpyLnJlYWRTdHJpbmcoKTticmVhaztjYXNlIDE6cz1yLnJlYWRTdHJpbmcoKX1jb250aW51ZX1jb25zdCBhPSEhKDE2JmYpLGk9MTUmZjtpZihpKzE+bil0aHJvdyBuZXcgRXJyb3IoIkJpbmFyeUNNYXBSZWFkZXIucHJvY2VzczogSW52YWxpZCBkYXRhU2l6ZS4iKTtjb25zdCBnPTEscD1yLnJlYWROdW1iZXIoKTtzd2l0Y2goZSl7Y2FzZSAwOnIucmVhZEhleChvLGkpO3IucmVhZEhleE51bWJlcihjLGkpO2FkZEhleChjLG8saSk7dC5hZGRDb2Rlc3BhY2VSYW5nZShpKzEsaGV4VG9JbnQobyxpKSxoZXhUb0ludChjLGkpKTtmb3IobGV0IGU9MTtlPHA7ZSsrKXtpbmNIZXgoYyxpKTtyLnJlYWRIZXhOdW1iZXIobyxpKTthZGRIZXgobyxjLGkpO3IucmVhZEhleE51bWJlcihjLGkpO2FkZEhleChjLG8saSk7dC5hZGRDb2Rlc3BhY2VSYW5nZShpKzEsaGV4VG9JbnQobyxpKSxoZXhUb0ludChjLGkpKX1icmVhaztjYXNlIDE6ci5yZWFkSGV4KG8saSk7ci5yZWFkSGV4TnVtYmVyKGMsaSk7YWRkSGV4KGMsbyxpKTtyLnJlYWROdW1iZXIoKTtmb3IobGV0IGU9MTtlPHA7ZSsrKXtpbmNIZXgoYyxpKTtyLnJlYWRIZXhOdW1iZXIobyxpKTthZGRIZXgobyxjLGkpO3IucmVhZEhleE51bWJlcihjLGkpO2FkZEhleChjLG8saSk7ci5yZWFkTnVtYmVyKCl9YnJlYWs7Y2FzZSAyOnIucmVhZEhleChsLGkpO2Q9ci5yZWFkTnVtYmVyKCk7dC5tYXBPbmUoaGV4VG9JbnQobCxpKSxkKTtmb3IobGV0IGU9MTtlPHA7ZSsrKXtpbmNIZXgobCxpKTtpZighYSl7ci5yZWFkSGV4TnVtYmVyKHUsaSk7YWRkSGV4KGwsdSxpKX1kPXIucmVhZFNpZ25lZCgpKyhkKzEpO3QubWFwT25lKGhleFRvSW50KGwsaSksZCl9YnJlYWs7Y2FzZSAzOnIucmVhZEhleChvLGkpO3IucmVhZEhleE51bWJlcihjLGkpO2FkZEhleChjLG8saSk7ZD1yLnJlYWROdW1iZXIoKTt0Lm1hcENpZFJhbmdlKGhleFRvSW50KG8saSksaGV4VG9JbnQoYyxpKSxkKTtmb3IobGV0IGU9MTtlPHA7ZSsrKXtpbmNIZXgoYyxpKTtpZihhKW8uc2V0KGMpO2Vsc2V7ci5yZWFkSGV4TnVtYmVyKG8saSk7YWRkSGV4KG8sYyxpKX1yLnJlYWRIZXhOdW1iZXIoYyxpKTthZGRIZXgoYyxvLGkpO2Q9ci5yZWFkTnVtYmVyKCk7dC5tYXBDaWRSYW5nZShoZXhUb0ludChvLGkpLGhleFRvSW50KGMsaSksZCl9YnJlYWs7Y2FzZSA0OnIucmVhZEhleChsLGcpO3IucmVhZEhleChoLGkpO3QubWFwT25lKGhleFRvSW50KGwsZyksaGV4VG9TdHIoaCxpKSk7Zm9yKGxldCBlPTE7ZTxwO2UrKyl7aW5jSGV4KGwsZyk7aWYoIWEpe3IucmVhZEhleE51bWJlcih1LGcpO2FkZEhleChsLHUsZyl9aW5jSGV4KGgsaSk7ci5yZWFkSGV4U2lnbmVkKHUsaSk7YWRkSGV4KGgsdSxpKTt0Lm1hcE9uZShoZXhUb0ludChsLGcpLGhleFRvU3RyKGgsaSkpfWJyZWFrO2Nhc2UgNTpyLnJlYWRIZXgobyxnKTtyLnJlYWRIZXhOdW1iZXIoYyxnKTthZGRIZXgoYyxvLGcpO3IucmVhZEhleChoLGkpO3QubWFwQmZSYW5nZShoZXhUb0ludChvLGcpLGhleFRvSW50KGMsZyksaGV4VG9TdHIoaCxpKSk7Zm9yKGxldCBlPTE7ZTxwO2UrKyl7aW5jSGV4KGMsZyk7aWYoYSlvLnNldChjKTtlbHNle3IucmVhZEhleE51bWJlcihvLGcpO2FkZEhleChvLGMsZyl9ci5yZWFkSGV4TnVtYmVyKGMsZyk7YWRkSGV4KGMsbyxnKTtyLnJlYWRIZXgoaCxpKTt0Lm1hcEJmUmFuZ2UoaGV4VG9JbnQobyxnKSxoZXhUb0ludChjLGcpLGhleFRvU3RyKGgsaSkpfWJyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKGBCaW5hcnlDTWFwUmVhZGVyLnByb2Nlc3MgLSB1bmtub3duIHR5cGU6ICR7ZX1gKX19cmV0dXJuIHM/YShzKTp0fX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5QYXJzZXI9dC5MaW5lYXJpemF0aW9uPXQuTGV4ZXI9dm9pZCAwO3ZhciByPWEoMiksbj1hKDQpLGk9YSgzKSxzPWEoOCksbz1hKDE3KSxjPWEoMTkpLGw9YSgyMCksaD1hKDIyKSx1PWEoMjMpLGQ9YSgyNiksZj1hKDI5KSxnPWEoMzEpLHA9YSgzMiksbT1hKDMzKTtjbGFzcyBQYXJzZXJ7Y29uc3RydWN0b3Ioe2xleGVyOmUseHJlZjp0LGFsbG93U3RyZWFtczphPSExLHJlY292ZXJ5TW9kZTpyPSExfSl7dGhpcy5sZXhlcj1lO3RoaXMueHJlZj10O3RoaXMuYWxsb3dTdHJlYW1zPWE7dGhpcy5yZWNvdmVyeU1vZGU9cjt0aGlzLmltYWdlQ2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLl9pbWFnZUlkPTA7dGhpcy5yZWZpbGwoKX1yZWZpbGwoKXt0aGlzLmJ1ZjE9dGhpcy5sZXhlci5nZXRPYmooKTt0aGlzLmJ1ZjI9dGhpcy5sZXhlci5nZXRPYmooKX1zaGlmdCgpe2lmKHRoaXMuYnVmMiBpbnN0YW5jZW9mIG4uQ21kJiYiSUQiPT09dGhpcy5idWYyLmNtZCl7dGhpcy5idWYxPXRoaXMuYnVmMjt0aGlzLmJ1ZjI9bnVsbH1lbHNle3RoaXMuYnVmMT10aGlzLmJ1ZjI7dGhpcy5idWYyPXRoaXMubGV4ZXIuZ2V0T2JqKCl9fXRyeVNoaWZ0KCl7dHJ5e3RoaXMuc2hpZnQoKTtyZXR1cm4hMH1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgaS5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlO3JldHVybiExfX1nZXRPYmooZT1udWxsKXtjb25zdCB0PXRoaXMuYnVmMTt0aGlzLnNoaWZ0KCk7aWYodCBpbnN0YW5jZW9mIG4uQ21kKXN3aXRjaCh0LmNtZCl7Y2FzZSJCSSI6cmV0dXJuIHRoaXMubWFrZUlubGluZUltYWdlKGUpO2Nhc2UiWyI6Y29uc3QgYT1bXTtmb3IoOyEoMCxuLmlzQ21kKSh0aGlzLmJ1ZjEsIl0iKSYmdGhpcy5idWYxIT09bi5FT0Y7KWEucHVzaCh0aGlzLmdldE9iaihlKSk7aWYodGhpcy5idWYxPT09bi5FT0Ype2lmKHRoaXMucmVjb3ZlcnlNb2RlKXJldHVybiBhO3Rocm93IG5ldyBpLlBhcnNlckVPRkV4Y2VwdGlvbigiRW5kIG9mIGZpbGUgaW5zaWRlIGFycmF5LiIpfXRoaXMuc2hpZnQoKTtyZXR1cm4gYTtjYXNlIjw8Ijpjb25zdCBzPW5ldyBuLkRpY3QodGhpcy54cmVmKTtmb3IoOyEoMCxuLmlzQ21kKSh0aGlzLmJ1ZjEsIj4+IikmJnRoaXMuYnVmMSE9PW4uRU9GOyl7aWYoISh0aGlzLmJ1ZjEgaW5zdGFuY2VvZiBuLk5hbWUpKXsoMCxyLmluZm8pKCJNYWxmb3JtZWQgZGljdGlvbmFyeToga2V5IG11c3QgYmUgYSBuYW1lIG9iamVjdCIpO3RoaXMuc2hpZnQoKTtjb250aW51ZX1jb25zdCB0PXRoaXMuYnVmMS5uYW1lO3RoaXMuc2hpZnQoKTtpZih0aGlzLmJ1ZjE9PT1uLkVPRilicmVhaztzLnNldCh0LHRoaXMuZ2V0T2JqKGUpKX1pZih0aGlzLmJ1ZjE9PT1uLkVPRil7aWYodGhpcy5yZWNvdmVyeU1vZGUpcmV0dXJuIHM7dGhyb3cgbmV3IGkuUGFyc2VyRU9GRXhjZXB0aW9uKCJFbmQgb2YgZmlsZSBpbnNpZGUgZGljdGlvbmFyeS4iKX1pZigoMCxuLmlzQ21kKSh0aGlzLmJ1ZjIsInN0cmVhbSIpKXJldHVybiB0aGlzLmFsbG93U3RyZWFtcz90aGlzLm1ha2VTdHJlYW0ocyxlKTpzO3RoaXMuc2hpZnQoKTtyZXR1cm4gcztkZWZhdWx0OnJldHVybiB0fWlmKE51bWJlci5pc0ludGVnZXIodCkpe2lmKE51bWJlci5pc0ludGVnZXIodGhpcy5idWYxKSYmKDAsbi5pc0NtZCkodGhpcy5idWYyLCJSIikpe2NvbnN0IGU9bi5SZWYuZ2V0KHQsdGhpcy5idWYxKTt0aGlzLnNoaWZ0KCk7dGhpcy5zaGlmdCgpO3JldHVybiBlfXJldHVybiB0fXJldHVybiJzdHJpbmciPT10eXBlb2YgdCYmZT9lLmRlY3J5cHRTdHJpbmcodCk6dH1maW5kRGVmYXVsdElubGluZVN0cmVhbUVuZChlKXtjb25zdHtrbm93bkNvbW1hbmRzOnR9PXRoaXMubGV4ZXIsYT1lLnBvcztsZXQgbyxjLGw9MDtmb3IoOy0xIT09KG89ZS5nZXRCeXRlKCkpOylpZigwPT09bClsPTY5PT09bz8xOjA7ZWxzZSBpZigxPT09bClsPTczPT09bz8yOjA7ZWxzZSBpZigzMj09PW98fDEwPT09b3x8MTM9PT1vKXtjPWUucG9zO2NvbnN0IGE9ZS5wZWVrQnl0ZXMoMTUpLGk9YS5sZW5ndGg7aWYoMD09PWkpYnJlYWs7Zm9yKGxldCBlPTA7ZTxpO2UrKyl7bz1hW2VdO2lmKCgwIT09b3x8MD09PWFbZSsxXSkmJigxMCE9PW8mJjEzIT09byYmKG88MzJ8fG8+MTI3KSkpe2w9MDticmVha319aWYoMiE9PWwpY29udGludWU7aWYoIXQpeygwLHIud2FybikoImZpbmREZWZhdWx0SW5saW5lU3RyZWFtRW5kIC0gYGxleGVyLmtub3duQ29tbWFuZHNgIGlzIHVuZGVmaW5lZC4iKTtjb250aW51ZX1jb25zdCBoPW5ldyBMZXhlcihuZXcgcy5TdHJlYW0oYS5zbGljZSgpKSx0KTtoLl9oZXhTdHJpbmdXYXJuPSgpPT57fTtsZXQgdT0wO2Zvcig7Oyl7Y29uc3QgZT1oLmdldE9iaigpO2lmKGU9PT1uLkVPRil7bD0wO2JyZWFrfWlmKGUgaW5zdGFuY2VvZiBuLkNtZCl7Y29uc3QgYT10W2UuY21kXTtpZighYSl7bD0wO2JyZWFrfWlmKGEudmFyaWFibGVBcmdzP3U8PWEubnVtQXJnczp1PT09YS5udW1BcmdzKWJyZWFrO3U9MH1lbHNlIHUrK31pZigyPT09bClicmVha31lbHNlIGw9MDtpZigtMT09PW8peygwLHIud2FybikoImZpbmREZWZhdWx0SW5saW5lU3RyZWFtRW5kOiBSZWFjaGVkIHRoZSBlbmQgb2YgdGhlIHN0cmVhbSB3aXRob3V0IGZpbmRpbmcgYSB2YWxpZCBFSSBtYXJrZXIiKTtpZihjKXsoMCxyLndhcm4pKCcuLi4gdHJ5aW5nIHRvIHJlY292ZXIgYnkgdXNpbmcgdGhlIGxhc3QgIkVJIiBvY2N1cnJlbmNlLicpO2Uuc2tpcCgtKGUucG9zLWMpKX19bGV0IGg9NDtlLnNraXAoLWgpO289ZS5wZWVrQnl0ZSgpO2Uuc2tpcChoKTsoMCxpLmlzV2hpdGVTcGFjZSkobyl8fGgtLTtyZXR1cm4gZS5wb3MtaC1hfWZpbmREQ1REZWNvZGVJbmxpbmVTdHJlYW1FbmQoZSl7Y29uc3QgdD1lLnBvcztsZXQgYSxuLGk9ITE7Zm9yKDstMSE9PShhPWUuZ2V0Qnl0ZSgpKTspaWYoMjU1PT09YSl7c3dpdGNoKGUuZ2V0Qnl0ZSgpKXtjYXNlIDA6YnJlYWs7Y2FzZSAyNTU6ZS5za2lwKC0xKTticmVhaztjYXNlIDIxNzppPSEwO2JyZWFrO2Nhc2UgMTkyOmNhc2UgMTkzOmNhc2UgMTk0OmNhc2UgMTk1OmNhc2UgMTk3OmNhc2UgMTk4OmNhc2UgMTk5OmNhc2UgMjAxOmNhc2UgMjAyOmNhc2UgMjAzOmNhc2UgMjA1OmNhc2UgMjA2OmNhc2UgMjA3OmNhc2UgMTk2OmNhc2UgMjA0OmNhc2UgMjE4OmNhc2UgMjE5OmNhc2UgMjIwOmNhc2UgMjIxOmNhc2UgMjIyOmNhc2UgMjIzOmNhc2UgMjI0OmNhc2UgMjI1OmNhc2UgMjI2OmNhc2UgMjI3OmNhc2UgMjI4OmNhc2UgMjI5OmNhc2UgMjMwOmNhc2UgMjMxOmNhc2UgMjMyOmNhc2UgMjMzOmNhc2UgMjM0OmNhc2UgMjM1OmNhc2UgMjM2OmNhc2UgMjM3OmNhc2UgMjM4OmNhc2UgMjM5OmNhc2UgMjU0Om49ZS5nZXRVaW50MTYoKTtuPjI/ZS5za2lwKG4tMik6ZS5za2lwKC0yKX1pZihpKWJyZWFrfWNvbnN0IHM9ZS5wb3MtdDtpZigtMT09PWEpeygwLHIud2FybikoIklubGluZSBEQ1REZWNvZGUgaW1hZ2Ugc3RyZWFtOiBFT0kgbWFya2VyIG5vdCBmb3VuZCwgc2VhcmNoaW5nIGZvciAvRUkvIGluc3RlYWQuIik7ZS5za2lwKC1zKTtyZXR1cm4gdGhpcy5maW5kRGVmYXVsdElubGluZVN0cmVhbUVuZChlKX10aGlzLmlubGluZVN0cmVhbVNraXBFSShlKTtyZXR1cm4gc31maW5kQVNDSUk4NURlY29kZUlubGluZVN0cmVhbUVuZChlKXtjb25zdCB0PWUucG9zO2xldCBhO2Zvcig7LTEhPT0oYT1lLmdldEJ5dGUoKSk7KWlmKDEyNj09PWEpe2NvbnN0IHQ9ZS5wb3M7YT1lLnBlZWtCeXRlKCk7Zm9yKDsoMCxpLmlzV2hpdGVTcGFjZSkoYSk7KXtlLnNraXAoKTthPWUucGVla0J5dGUoKX1pZig2Mj09PWEpe2Uuc2tpcCgpO2JyZWFrfWlmKGUucG9zPnQpe2NvbnN0IHQ9ZS5wZWVrQnl0ZXMoMik7aWYoNjk9PT10WzBdJiY3Mz09PXRbMV0pYnJlYWt9fWNvbnN0IG49ZS5wb3MtdDtpZigtMT09PWEpeygwLHIud2FybikoIklubGluZSBBU0NJSTg1RGVjb2RlIGltYWdlIHN0cmVhbTogRU9EIG1hcmtlciBub3QgZm91bmQsIHNlYXJjaGluZyBmb3IgL0VJLyBpbnN0ZWFkLiIpO2Uuc2tpcCgtbik7cmV0dXJuIHRoaXMuZmluZERlZmF1bHRJbmxpbmVTdHJlYW1FbmQoZSl9dGhpcy5pbmxpbmVTdHJlYW1Ta2lwRUkoZSk7cmV0dXJuIG59ZmluZEFTQ0lJSGV4RGVjb2RlSW5saW5lU3RyZWFtRW5kKGUpe2NvbnN0IHQ9ZS5wb3M7bGV0IGE7Zm9yKDstMSE9PShhPWUuZ2V0Qnl0ZSgpKSYmNjIhPT1hOyk7Y29uc3Qgbj1lLnBvcy10O2lmKC0xPT09YSl7KDAsci53YXJuKSgiSW5saW5lIEFTQ0lJSGV4RGVjb2RlIGltYWdlIHN0cmVhbTogRU9EIG1hcmtlciBub3QgZm91bmQsIHNlYXJjaGluZyBmb3IgL0VJLyBpbnN0ZWFkLiIpO2Uuc2tpcCgtbik7cmV0dXJuIHRoaXMuZmluZERlZmF1bHRJbmxpbmVTdHJlYW1FbmQoZSl9dGhpcy5pbmxpbmVTdHJlYW1Ta2lwRUkoZSk7cmV0dXJuIG59aW5saW5lU3RyZWFtU2tpcEVJKGUpe2xldCB0LGE9MDtmb3IoOy0xIT09KHQ9ZS5nZXRCeXRlKCkpOylpZigwPT09YSlhPTY5PT09dD8xOjA7ZWxzZSBpZigxPT09YSlhPTczPT09dD8yOjA7ZWxzZSBpZigyPT09YSlicmVha31tYWtlSW5saW5lSW1hZ2UoZSl7Y29uc3QgdD10aGlzLmxleGVyLGE9dC5zdHJlYW0saT1PYmplY3QuY3JlYXRlKG51bGwpO2xldCBzO2Zvcig7ISgwLG4uaXNDbWQpKHRoaXMuYnVmMSwiSUQiKSYmdGhpcy5idWYxIT09bi5FT0Y7KXtpZighKHRoaXMuYnVmMSBpbnN0YW5jZW9mIG4uTmFtZSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkRpY3Rpb25hcnkga2V5IG11c3QgYmUgYSBuYW1lIG9iamVjdCIpO2NvbnN0IHQ9dGhpcy5idWYxLm5hbWU7dGhpcy5zaGlmdCgpO2lmKHRoaXMuYnVmMT09PW4uRU9GKWJyZWFrO2lbdF09dGhpcy5nZXRPYmooZSl9LTEhPT10LmJlZ2luSW5saW5lSW1hZ2VQb3MmJihzPWEucG9zLXQuYmVnaW5JbmxpbmVJbWFnZVBvcyk7Y29uc3Qgbz10aGlzLnhyZWYuZmV0Y2hJZlJlZihpLkZ8fGkuRmlsdGVyKTtsZXQgYztpZihvIGluc3RhbmNlb2Ygbi5OYW1lKWM9by5uYW1lO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShvKSl7Y29uc3QgZT10aGlzLnhyZWYuZmV0Y2hJZlJlZihvWzBdKTtlIGluc3RhbmNlb2Ygbi5OYW1lJiYoYz1lLm5hbWUpfWNvbnN0IGw9YS5wb3M7bGV0IGgsdTtzd2l0Y2goYyl7Y2FzZSJEQ1QiOmNhc2UiRENURGVjb2RlIjpoPXRoaXMuZmluZERDVERlY29kZUlubGluZVN0cmVhbUVuZChhKTticmVhaztjYXNlIkE4NSI6Y2FzZSJBU0NJSTg1RGVjb2RlIjpoPXRoaXMuZmluZEFTQ0lJODVEZWNvZGVJbmxpbmVTdHJlYW1FbmQoYSk7YnJlYWs7Y2FzZSJBSHgiOmNhc2UiQVNDSUlIZXhEZWNvZGUiOmg9dGhpcy5maW5kQVNDSUlIZXhEZWNvZGVJbmxpbmVTdHJlYW1FbmQoYSk7YnJlYWs7ZGVmYXVsdDpoPXRoaXMuZmluZERlZmF1bHRJbmxpbmVTdHJlYW1FbmQoYSl9aWYoaDwxZTMmJnM+MCl7Y29uc3QgZT1hLnBvczthLnBvcz10LmJlZ2luSW5saW5lSW1hZ2VQb3M7dT1mdW5jdGlvbiBnZXRJbmxpbmVJbWFnZUNhY2hlS2V5KGUpe2NvbnN0IHQ9W10sYT1lLmxlbmd0aDtsZXQgcj0wO2Zvcig7cjxhLTE7KXQucHVzaChlW3IrK108PDh8ZVtyKytdKTtyPGEmJnQucHVzaChlW3JdKTtyZXR1cm4gYSsiXyIrU3RyaW5nLmZyb21DaGFyQ29kZS5hcHBseShudWxsLHQpfShhLmdldEJ5dGVzKHMraCkpO2EucG9zPWU7Y29uc3Qgcj10aGlzLmltYWdlQ2FjaGVbdV07aWYodm9pZCAwIT09cil7dGhpcy5idWYyPW4uQ21kLmdldCgiRUkiKTt0aGlzLnNoaWZ0KCk7ci5yZXNldCgpO3JldHVybiByfX1jb25zdCBkPW5ldyBuLkRpY3QodGhpcy54cmVmKTtmb3IoY29uc3QgZSBpbiBpKWQuc2V0KGUsaVtlXSk7bGV0IGY9YS5tYWtlU3ViU3RyZWFtKGwsaCxkKTtlJiYoZj1lLmNyZWF0ZVN0cmVhbShmLGgpKTtmPXRoaXMuZmlsdGVyKGYsZCxoKTtmLmRpY3Q9ZDtpZih2b2lkIDAhPT11KXtmLmNhY2hlS2V5PSJpbmxpbmVfaW1nXyIrICsrdGhpcy5faW1hZ2VJZDt0aGlzLmltYWdlQ2FjaGVbdV09Zn10aGlzLmJ1ZjI9bi5DbWQuZ2V0KCJFSSIpO3RoaXMuc2hpZnQoKTtyZXR1cm4gZn1fZmluZFN0cmVhbUxlbmd0aChlLHQpe2NvbnN0e3N0cmVhbTphfT10aGlzLmxleGVyO2EucG9zPWU7Y29uc3Qgcj10Lmxlbmd0aDtmb3IoO2EucG9zPGEuZW5kOyl7Y29uc3Qgbj1hLnBlZWtCeXRlcygyMDQ4KSxpPW4ubGVuZ3RoLXI7aWYoaTw9MClicmVhaztsZXQgcz0wO2Zvcig7czxpOyl7bGV0IGk9MDtmb3IoO2k8ciYmbltzK2ldPT09dFtpXTspaSsrO2lmKGk+PXIpe2EucG9zKz1zO3JldHVybiBhLnBvcy1lfXMrK31hLnBvcys9aX1yZXR1cm4tMX1tYWtlU3RyZWFtKGUsdCl7Y29uc3QgYT10aGlzLmxleGVyO2xldCBzPWEuc3RyZWFtO2Euc2tpcFRvTmV4dExpbmUoKTtjb25zdCBvPXMucG9zLTE7bGV0IGM9ZS5nZXQoIkxlbmd0aCIpO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKGMpKXsoMCxyLmluZm8pKGBCYWQgbGVuZ3RoICIke2MmJmMudG9TdHJpbmcoKX0iIGluIHN0cmVhbS5gKTtjPTB9cy5wb3M9bytjO2EubmV4dENoYXIoKTtpZih0aGlzLnRyeVNoaWZ0KCkmJigwLG4uaXNDbWQpKHRoaXMuYnVmMiwiZW5kc3RyZWFtIikpdGhpcy5zaGlmdCgpO2Vsc2V7Y29uc3QgZT1uZXcgVWludDhBcnJheShbMTAxLDExMCwxMDAsMTE1LDExNiwxMTQsMTAxLDk3LDEwOV0pO2xldCB0PXRoaXMuX2ZpbmRTdHJlYW1MZW5ndGgobyxlKTtpZih0PDApe2NvbnN0IGE9MTtmb3IobGV0IG49MTtuPD1hO24rKyl7Y29uc3QgYT1lLmxlbmd0aC1uLGM9ZS5zbGljZSgwLGEpLGw9dGhpcy5fZmluZFN0cmVhbUxlbmd0aChvLGMpO2lmKGw+PTApe2NvbnN0IGU9cy5wZWVrQnl0ZXMoYSsxKVthXTtpZighKDAsaS5pc1doaXRlU3BhY2UpKGUpKWJyZWFrOygwLHIuaW5mbykoYEZvdW5kICIkeygwLHIuYnl0ZXNUb1N0cmluZykoYyl9IiB3aGVuIHNlYXJjaGluZyBmb3IgZW5kc3RyZWFtIGNvbW1hbmQuYCk7dD1sO2JyZWFrfX1pZih0PDApdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIk1pc3NpbmcgZW5kc3RyZWFtIGNvbW1hbmQuIil9Yz10O2EubmV4dENoYXIoKTt0aGlzLnNoaWZ0KCk7dGhpcy5zaGlmdCgpfXRoaXMuc2hpZnQoKTtzPXMubWFrZVN1YlN0cmVhbShvLGMsZSk7dCYmKHM9dC5jcmVhdGVTdHJlYW0ocyxjKSk7cz10aGlzLmZpbHRlcihzLGUsYyk7cy5kaWN0PWU7cmV0dXJuIHN9ZmlsdGVyKGUsdCxhKXtsZXQgaT10LmdldCgiRiIsIkZpbHRlciIpLHM9dC5nZXQoIkRQIiwiRGVjb2RlUGFybXMiKTtpZihpIGluc3RhbmNlb2Ygbi5OYW1lKXtBcnJheS5pc0FycmF5KHMpJiYoMCxyLndhcm4pKCIvRGVjb2RlUGFybXMgc2hvdWxkIG5vdCBiZSBhbiBBcnJheSwgd2hlbiAvRmlsdGVyIGlzIGEgTmFtZS4iKTtyZXR1cm4gdGhpcy5tYWtlRmlsdGVyKGUsaS5uYW1lLGEscyl9bGV0IG89YTtpZihBcnJheS5pc0FycmF5KGkpKXtjb25zdCB0PWksYT1zO2ZvcihsZXQgYz0wLGw9dC5sZW5ndGg7YzxsOysrYyl7aT10aGlzLnhyZWYuZmV0Y2hJZlJlZih0W2NdKTtpZighKGkgaW5zdGFuY2VvZiBuLk5hbWUpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBCYWQgZmlsdGVyIG5hbWUgIiR7aX0iYCk7cz1udWxsO0FycmF5LmlzQXJyYXkoYSkmJmMgaW4gYSYmKHM9dGhpcy54cmVmLmZldGNoSWZSZWYoYVtjXSkpO2U9dGhpcy5tYWtlRmlsdGVyKGUsaS5uYW1lLG8scyk7bz1udWxsfX1yZXR1cm4gZX1tYWtlRmlsdGVyKGUsdCxhLG4pe2lmKDA9PT1hKXsoMCxyLndhcm4pKGBFbXB0eSAiJHt0fSIgc3RyZWFtLmApO3JldHVybiBuZXcgcy5OdWxsU3RyZWFtfXRyeXtzd2l0Y2godCl7Y2FzZSJGbCI6Y2FzZSJGbGF0ZURlY29kZSI6cmV0dXJuIG4/bmV3IHAuUHJlZGljdG9yU3RyZWFtKG5ldyBoLkZsYXRlU3RyZWFtKGUsYSksYSxuKTpuZXcgaC5GbGF0ZVN0cmVhbShlLGEpO2Nhc2UiTFpXIjpjYXNlIkxaV0RlY29kZSI6bGV0IHQ9MTtpZihuKXtuLmhhcygiRWFybHlDaGFuZ2UiKSYmKHQ9bi5nZXQoIkVhcmx5Q2hhbmdlIikpO3JldHVybiBuZXcgcC5QcmVkaWN0b3JTdHJlYW0obmV3IGcuTFpXU3RyZWFtKGUsYSx0KSxhLG4pfXJldHVybiBuZXcgZy5MWldTdHJlYW0oZSxhLHQpO2Nhc2UiRENUIjpjYXNlIkRDVERlY29kZSI6cmV0dXJuIG5ldyBkLkpwZWdTdHJlYW0oZSxhLG4pO2Nhc2UiSlBYIjpjYXNlIkpQWERlY29kZSI6cmV0dXJuIG5ldyBmLkpweFN0cmVhbShlLGEsbik7Y2FzZSJBODUiOmNhc2UiQVNDSUk4NURlY29kZSI6cmV0dXJuIG5ldyBvLkFzY2lpODVTdHJlYW0oZSxhKTtjYXNlIkFIeCI6Y2FzZSJBU0NJSUhleERlY29kZSI6cmV0dXJuIG5ldyBjLkFzY2lpSGV4U3RyZWFtKGUsYSk7Y2FzZSJDQ0YiOmNhc2UiQ0NJVFRGYXhEZWNvZGUiOnJldHVybiBuZXcgbC5DQ0lUVEZheFN0cmVhbShlLGEsbik7Y2FzZSJSTCI6Y2FzZSJSdW5MZW5ndGhEZWNvZGUiOnJldHVybiBuZXcgbS5SdW5MZW5ndGhTdHJlYW0oZSxhKTtjYXNlIkpCSUcyRGVjb2RlIjpyZXR1cm4gbmV3IHUuSmJpZzJTdHJlYW0oZSxhLG4pfSgwLHIud2FybikoYEZpbHRlciAiJHt0fSIgaXMgbm90IHN1cHBvcnRlZC5gKTtyZXR1cm4gZX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2YgaS5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLHIud2FybikoYEludmFsaWQgc3RyZWFtOiAiJHtlfSJgKTtyZXR1cm4gbmV3IHMuTnVsbFN0cmVhbX19fXQuUGFyc2VyPVBhcnNlcjtjb25zdCBiPVsxLDAsMCwwLDAsMCwwLDAsMCwxLDEsMCwxLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMSwwLDAsMCwwLDIsMCwwLDIsMiwwLDAsMCwwLDAsMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDAsMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDIsMCwyLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwyLDAsMiwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsMCwwXTtmdW5jdGlvbiB0b0hleERpZ2l0KGUpe3JldHVybiBlPj00OCYmZTw9NTc/MTUmZTplPj02NSYmZTw9NzB8fGU+PTk3JiZlPD0xMDI/OSsoMTUmZSk6LTF9Y2xhc3MgTGV4ZXJ7Y29uc3RydWN0b3IoZSx0PW51bGwpe3RoaXMuc3RyZWFtPWU7dGhpcy5uZXh0Q2hhcigpO3RoaXMuc3RyQnVmPVtdO3RoaXMua25vd25Db21tYW5kcz10O3RoaXMuX2hleFN0cmluZ051bVdhcm49MDt0aGlzLmJlZ2luSW5saW5lSW1hZ2VQb3M9LTF9bmV4dENoYXIoKXtyZXR1cm4gdGhpcy5jdXJyZW50Q2hhcj10aGlzLnN0cmVhbS5nZXRCeXRlKCl9cGVla0NoYXIoKXtyZXR1cm4gdGhpcy5zdHJlYW0ucGVla0J5dGUoKX1nZXROdW1iZXIoKXtsZXQgZT10aGlzLmN1cnJlbnRDaGFyLHQ9ITEsYT0wLG49MTtpZig0NT09PWUpe249LTE7ZT10aGlzLm5leHRDaGFyKCk7NDU9PT1lJiYoZT10aGlzLm5leHRDaGFyKCkpfWVsc2UgNDM9PT1lJiYoZT10aGlzLm5leHRDaGFyKCkpO2lmKDEwPT09ZXx8MTM9PT1lKWRve2U9dGhpcy5uZXh0Q2hhcigpfXdoaWxlKDEwPT09ZXx8MTM9PT1lKTtpZig0Nj09PWUpe2E9MTA7ZT10aGlzLm5leHRDaGFyKCl9aWYoZTw0OHx8ZT41Nyl7Y29uc3QgdD1gSW52YWxpZCBudW1iZXI6ICR7U3RyaW5nLmZyb21DaGFyQ29kZShlKX0gKGNoYXJDb2RlICR7ZX0pYDtpZigoMCxpLmlzV2hpdGVTcGFjZSkoZSl8fC0xPT09ZSl7KDAsci5pbmZvKShgTGV4ZXIuZ2V0TnVtYmVyIC0gIiR7dH0iLmApO3JldHVybiAwfXRocm93IG5ldyByLkZvcm1hdEVycm9yKHQpfWxldCBzPWUtNDgsbz0wLGM9MTtmb3IoOyhlPXRoaXMubmV4dENoYXIoKSk+PTA7KWlmKGU+PTQ4JiZlPD01Nyl7Y29uc3Qgcj1lLTQ4O2lmKHQpbz0xMCpvK3I7ZWxzZXswIT09YSYmKGEqPTEwKTtzPTEwKnMrcn19ZWxzZSBpZig0Nj09PWUpe2lmKDAhPT1hKWJyZWFrO2E9MX1lbHNlIGlmKDQ1PT09ZSkoMCxyLndhcm4pKCJCYWRseSBmb3JtYXR0ZWQgbnVtYmVyOiBtaW51cyBzaWduIGluIHRoZSBtaWRkbGUiKTtlbHNle2lmKDY5IT09ZSYmMTAxIT09ZSlicmVhaztlPXRoaXMucGVla0NoYXIoKTtpZig0Mz09PWV8fDQ1PT09ZSl7Yz00NT09PWU/LTE6MTt0aGlzLm5leHRDaGFyKCl9ZWxzZSBpZihlPDQ4fHxlPjU3KWJyZWFrO3Q9ITB9MCE9PWEmJihzLz1hKTt0JiYocyo9MTAqKihjKm8pKTtyZXR1cm4gbipzfWdldFN0cmluZygpe2xldCBlPTEsdD0hMTtjb25zdCBhPXRoaXMuc3RyQnVmO2EubGVuZ3RoPTA7bGV0IG49dGhpcy5uZXh0Q2hhcigpO2Zvcig7Oyl7bGV0IGk9ITE7c3dpdGNoKDB8bil7Y2FzZS0xOigwLHIud2FybikoIlVudGVybWluYXRlZCBzdHJpbmciKTt0PSEwO2JyZWFrO2Nhc2UgNDA6KytlO2EucHVzaCgiKCIpO2JyZWFrO2Nhc2UgNDE6aWYoMD09LS1lKXt0aGlzLm5leHRDaGFyKCk7dD0hMH1lbHNlIGEucHVzaCgiKSIpO2JyZWFrO2Nhc2UgOTI6bj10aGlzLm5leHRDaGFyKCk7c3dpdGNoKG4pe2Nhc2UtMTooMCxyLndhcm4pKCJVbnRlcm1pbmF0ZWQgc3RyaW5nIik7dD0hMDticmVhaztjYXNlIDExMDphLnB1c2goIlxuIik7YnJlYWs7Y2FzZSAxMTQ6YS5wdXNoKCJcciIpO2JyZWFrO2Nhc2UgMTE2OmEucHVzaCgiXHQiKTticmVhaztjYXNlIDk4OmEucHVzaCgiXGIiKTticmVhaztjYXNlIDEwMjphLnB1c2goIlxmIik7YnJlYWs7Y2FzZSA5MjpjYXNlIDQwOmNhc2UgNDE6YS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUobikpO2JyZWFrO2Nhc2UgNDg6Y2FzZSA0OTpjYXNlIDUwOmNhc2UgNTE6Y2FzZSA1MjpjYXNlIDUzOmNhc2UgNTQ6Y2FzZSA1NTpsZXQgZT0xNSZuO249dGhpcy5uZXh0Q2hhcigpO2k9ITA7aWYobj49NDgmJm48PTU1KXtlPShlPDwzKSsoMTUmbik7bj10aGlzLm5leHRDaGFyKCk7aWYobj49NDgmJm48PTU1KXtpPSExO2U9KGU8PDMpKygxNSZuKX19YS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUoZSkpO2JyZWFrO2Nhc2UgMTM6MTA9PT10aGlzLnBlZWtDaGFyKCkmJnRoaXMubmV4dENoYXIoKTticmVhaztjYXNlIDEwOmJyZWFrO2RlZmF1bHQ6YS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUobikpfWJyZWFrO2RlZmF1bHQ6YS5wdXNoKFN0cmluZy5mcm9tQ2hhckNvZGUobikpfWlmKHQpYnJlYWs7aXx8KG49dGhpcy5uZXh0Q2hhcigpKX1yZXR1cm4gYS5qb2luKCIiKX1nZXROYW1lKCl7bGV0IGUsdDtjb25zdCBhPXRoaXMuc3RyQnVmO2EubGVuZ3RoPTA7Zm9yKDsoZT10aGlzLm5leHRDaGFyKCkpPj0wJiYhYltlXTspaWYoMzU9PT1lKXtlPXRoaXMubmV4dENoYXIoKTtpZihiW2VdKXsoMCxyLndhcm4pKCJMZXhlcl9nZXROYW1lOiBOVU1CRVIgU0lHTiAoIykgc2hvdWxkIGJlIGZvbGxvd2VkIGJ5IGEgaGV4YWRlY2ltYWwgbnVtYmVyLiIpO2EucHVzaCgiIyIpO2JyZWFrfWNvbnN0IG49dG9IZXhEaWdpdChlKTtpZigtMSE9PW4pe3Q9ZTtlPXRoaXMubmV4dENoYXIoKTtjb25zdCBpPXRvSGV4RGlnaXQoZSk7aWYoLTE9PT1pKXsoMCxyLndhcm4pKGBMZXhlcl9nZXROYW1lOiBJbGxlZ2FsIGRpZ2l0ICgke1N0cmluZy5mcm9tQ2hhckNvZGUoZSl9KSBpbiBoZXhhZGVjaW1hbCBudW1iZXIuYCk7YS5wdXNoKCIjIixTdHJpbmcuZnJvbUNoYXJDb2RlKHQpKTtpZihiW2VdKWJyZWFrO2EucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKGUpKTtjb250aW51ZX1hLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShuPDw0fGkpKX1lbHNlIGEucHVzaCgiIyIsU3RyaW5nLmZyb21DaGFyQ29kZShlKSl9ZWxzZSBhLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShlKSk7YS5sZW5ndGg+MTI3JiYoMCxyLndhcm4pKGBOYW1lIHRva2VuIGlzIGxvbmdlciB0aGFuIGFsbG93ZWQgYnkgdGhlIHNwZWM6ICR7YS5sZW5ndGh9YCk7cmV0dXJuIG4uTmFtZS5nZXQoYS5qb2luKCIiKSl9X2hleFN0cmluZ1dhcm4oZSl7NSE9dGhpcy5faGV4U3RyaW5nTnVtV2FybisrP3RoaXMuX2hleFN0cmluZ051bVdhcm4+NXx8KDAsci53YXJuKShgZ2V0SGV4U3RyaW5nIC0gaWdub3JpbmcgaW52YWxpZCBjaGFyYWN0ZXI6ICR7ZX1gKTooMCxyLndhcm4pKCJnZXRIZXhTdHJpbmcgLSBpZ25vcmluZyBhZGRpdGlvbmFsIGludmFsaWQgY2hhcmFjdGVycy4iKX1nZXRIZXhTdHJpbmcoKXtjb25zdCBlPXRoaXMuc3RyQnVmO2UubGVuZ3RoPTA7bGV0IHQsYSxuPXRoaXMuY3VycmVudENoYXIsaT0hMDt0aGlzLl9oZXhTdHJpbmdOdW1XYXJuPTA7Zm9yKDs7KXtpZihuPDApeygwLHIud2FybikoIlVudGVybWluYXRlZCBoZXggc3RyaW5nIik7YnJlYWt9aWYoNjI9PT1uKXt0aGlzLm5leHRDaGFyKCk7YnJlYWt9aWYoMSE9PWJbbl0pe2lmKGkpe3Q9dG9IZXhEaWdpdChuKTtpZigtMT09PXQpe3RoaXMuX2hleFN0cmluZ1dhcm4obik7bj10aGlzLm5leHRDaGFyKCk7Y29udGludWV9fWVsc2V7YT10b0hleERpZ2l0KG4pO2lmKC0xPT09YSl7dGhpcy5faGV4U3RyaW5nV2FybihuKTtuPXRoaXMubmV4dENoYXIoKTtjb250aW51ZX1lLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh0PDw0fGEpKX1pPSFpO249dGhpcy5uZXh0Q2hhcigpfWVsc2Ugbj10aGlzLm5leHRDaGFyKCl9cmV0dXJuIGUuam9pbigiIil9Z2V0T2JqKCl7bGV0IGU9ITEsdD10aGlzLmN1cnJlbnRDaGFyO2Zvcig7Oyl7aWYodDwwKXJldHVybiBuLkVPRjtpZihlKTEwIT09dCYmMTMhPT10fHwoZT0hMSk7ZWxzZSBpZigzNz09PXQpZT0hMDtlbHNlIGlmKDEhPT1iW3RdKWJyZWFrO3Q9dGhpcy5uZXh0Q2hhcigpfXN3aXRjaCgwfHQpe2Nhc2UgNDg6Y2FzZSA0OTpjYXNlIDUwOmNhc2UgNTE6Y2FzZSA1MjpjYXNlIDUzOmNhc2UgNTQ6Y2FzZSA1NTpjYXNlIDU2OmNhc2UgNTc6Y2FzZSA0MzpjYXNlIDQ1OmNhc2UgNDY6cmV0dXJuIHRoaXMuZ2V0TnVtYmVyKCk7Y2FzZSA0MDpyZXR1cm4gdGhpcy5nZXRTdHJpbmcoKTtjYXNlIDQ3OnJldHVybiB0aGlzLmdldE5hbWUoKTtjYXNlIDkxOnRoaXMubmV4dENoYXIoKTtyZXR1cm4gbi5DbWQuZ2V0KCJbIik7Y2FzZSA5Mzp0aGlzLm5leHRDaGFyKCk7cmV0dXJuIG4uQ21kLmdldCgiXSIpO2Nhc2UgNjA6dD10aGlzLm5leHRDaGFyKCk7aWYoNjA9PT10KXt0aGlzLm5leHRDaGFyKCk7cmV0dXJuIG4uQ21kLmdldCgiPDwiKX1yZXR1cm4gdGhpcy5nZXRIZXhTdHJpbmcoKTtjYXNlIDYyOnQ9dGhpcy5uZXh0Q2hhcigpO2lmKDYyPT09dCl7dGhpcy5uZXh0Q2hhcigpO3JldHVybiBuLkNtZC5nZXQoIj4+Iil9cmV0dXJuIG4uQ21kLmdldCgiPiIpO2Nhc2UgMTIzOnRoaXMubmV4dENoYXIoKTtyZXR1cm4gbi5DbWQuZ2V0KCJ7Iik7Y2FzZSAxMjU6dGhpcy5uZXh0Q2hhcigpO3JldHVybiBuLkNtZC5nZXQoIn0iKTtjYXNlIDQxOnRoaXMubmV4dENoYXIoKTt0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgSWxsZWdhbCBjaGFyYWN0ZXI6ICR7dH1gKX1sZXQgYT1TdHJpbmcuZnJvbUNoYXJDb2RlKHQpO2lmKHQ8MzJ8fHQ+MTI3KXtjb25zdCBlPXRoaXMucGVla0NoYXIoKTtpZihlPj0zMiYmZTw9MTI3KXt0aGlzLm5leHRDaGFyKCk7cmV0dXJuIG4uQ21kLmdldChhKX19Y29uc3QgaT10aGlzLmtub3duQ29tbWFuZHM7bGV0IHM9dm9pZCAwIT09aT8uW2FdO2Zvcig7KHQ9dGhpcy5uZXh0Q2hhcigpKT49MCYmIWJbdF07KXtjb25zdCBlPWErU3RyaW5nLmZyb21DaGFyQ29kZSh0KTtpZihzJiZ2b2lkIDA9PT1pW2VdKWJyZWFrO2lmKDEyOD09PWEubGVuZ3RoKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBDb21tYW5kIHRva2VuIHRvbyBsb25nOiAke2EubGVuZ3RofWApO2E9ZTtzPXZvaWQgMCE9PWk/LlthXX1pZigidHJ1ZSI9PT1hKXJldHVybiEwO2lmKCJmYWxzZSI9PT1hKXJldHVybiExO2lmKCJudWxsIj09PWEpcmV0dXJuIG51bGw7IkJJIj09PWEmJih0aGlzLmJlZ2luSW5saW5lSW1hZ2VQb3M9dGhpcy5zdHJlYW0ucG9zKTtyZXR1cm4gbi5DbWQuZ2V0KGEpfXNraXBUb05leHRMaW5lKCl7bGV0IGU9dGhpcy5jdXJyZW50Q2hhcjtmb3IoO2U+PTA7KXtpZigxMz09PWUpe2U9dGhpcy5uZXh0Q2hhcigpOzEwPT09ZSYmdGhpcy5uZXh0Q2hhcigpO2JyZWFrfWlmKDEwPT09ZSl7dGhpcy5uZXh0Q2hhcigpO2JyZWFrfWU9dGhpcy5uZXh0Q2hhcigpfX19dC5MZXhlcj1MZXhlcjt0LkxpbmVhcml6YXRpb249Y2xhc3MgTGluZWFyaXphdGlvbntzdGF0aWMgY3JlYXRlKGUpe2Z1bmN0aW9uIGdldEludChlLHQsYT0hMSl7Y29uc3Qgcj1lLmdldCh0KTtpZihOdW1iZXIuaXNJbnRlZ2VyKHIpJiYoYT9yPj0wOnI+MCkpcmV0dXJuIHI7dGhyb3cgbmV3IEVycm9yKGBUaGUgIiR7dH0iIHBhcmFtZXRlciBpbiB0aGUgbGluZWFyaXphdGlvbiBkaWN0aW9uYXJ5IGlzIGludmFsaWQuYCl9Y29uc3QgdD1uZXcgUGFyc2VyKHtsZXhlcjpuZXcgTGV4ZXIoZSkseHJlZjpudWxsfSksYT10LmdldE9iaigpLHI9dC5nZXRPYmooKSxpPXQuZ2V0T2JqKCkscz10LmdldE9iaigpO2xldCBvLGM7aWYoIShOdW1iZXIuaXNJbnRlZ2VyKGEpJiZOdW1iZXIuaXNJbnRlZ2VyKHIpJiYoMCxuLmlzQ21kKShpLCJvYmoiKSYmcyBpbnN0YW5jZW9mIG4uRGljdCYmIm51bWJlciI9PXR5cGVvZihvPXMuZ2V0KCJMaW5lYXJpemVkIikpJiZvPjApKXJldHVybiBudWxsO2lmKChjPWdldEludChzLCJMIikpIT09ZS5sZW5ndGgpdGhyb3cgbmV3IEVycm9yKCdUaGUgIkwiIHBhcmFtZXRlciBpbiB0aGUgbGluZWFyaXphdGlvbiBkaWN0aW9uYXJ5IGRvZXMgbm90IGVxdWFsIHRoZSBzdHJlYW0gbGVuZ3RoLicpO3JldHVybntsZW5ndGg6YyxoaW50czpmdW5jdGlvbiBnZXRIaW50cyhlKXtjb25zdCB0PWUuZ2V0KCJIIik7bGV0IGE7aWYoQXJyYXkuaXNBcnJheSh0KSYmKDI9PT0oYT10Lmxlbmd0aCl8fDQ9PT1hKSl7Zm9yKGxldCBlPTA7ZTxhO2UrKyl7Y29uc3QgYT10W2VdO2lmKCEoTnVtYmVyLmlzSW50ZWdlcihhKSYmYT4wKSl0aHJvdyBuZXcgRXJyb3IoYEhpbnQgKCR7ZX0pIGluIHRoZSBsaW5lYXJpemF0aW9uIGRpY3Rpb25hcnkgaXMgaW52YWxpZC5gKX1yZXR1cm4gdH10aHJvdyBuZXcgRXJyb3IoIkhpbnQgYXJyYXkgaW4gdGhlIGxpbmVhcml6YXRpb24gZGljdGlvbmFyeSBpcyBpbnZhbGlkLiIpfShzKSxvYmplY3ROdW1iZXJGaXJzdDpnZXRJbnQocywiTyIpLGVuZEZpcnN0OmdldEludChzLCJFIiksbnVtUGFnZXM6Z2V0SW50KHMsIk4iKSxtYWluWFJlZkVudHJpZXNPZmZzZXQ6Z2V0SW50KHMsIlQiKSxwYWdlRmlyc3Q6cy5oYXMoIlAiKT9nZXRJbnQocywiUCIsITApOjB9fX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5Bc2NpaTg1U3RyZWFtPXZvaWQgMDt2YXIgcj1hKDE4KSxuPWEoMyk7Y2xhc3MgQXNjaWk4NVN0cmVhbSBleHRlbmRzIHIuRGVjb2RlU3RyZWFte2NvbnN0cnVjdG9yKGUsdCl7dCYmKHQqPS44KTtzdXBlcih0KTt0aGlzLnN0cj1lO3RoaXMuZGljdD1lLmRpY3Q7dGhpcy5pbnB1dD1uZXcgVWludDhBcnJheSg1KX1yZWFkQmxvY2soKXtjb25zdCBlPXRoaXMuc3RyO2xldCB0PWUuZ2V0Qnl0ZSgpO2Zvcig7KDAsbi5pc1doaXRlU3BhY2UpKHQpOyl0PWUuZ2V0Qnl0ZSgpO2lmKC0xPT09dHx8MTI2PT09dCl7dGhpcy5lb2Y9ITA7cmV0dXJufWNvbnN0IGE9dGhpcy5idWZmZXJMZW5ndGg7bGV0IHIsaTtpZigxMjI9PT10KXtyPXRoaXMuZW5zdXJlQnVmZmVyKGErNCk7Zm9yKGk9MDtpPDQ7KytpKXJbYStpXT0wO3RoaXMuYnVmZmVyTGVuZ3RoKz00fWVsc2V7Y29uc3Qgcz10aGlzLmlucHV0O3NbMF09dDtmb3IoaT0xO2k8NTsrK2kpe3Q9ZS5nZXRCeXRlKCk7Zm9yKDsoMCxuLmlzV2hpdGVTcGFjZSkodCk7KXQ9ZS5nZXRCeXRlKCk7c1tpXT10O2lmKC0xPT09dHx8MTI2PT09dClicmVha31yPXRoaXMuZW5zdXJlQnVmZmVyKGEraS0xKTt0aGlzLmJ1ZmZlckxlbmd0aCs9aS0xO2lmKGk8NSl7Zm9yKDtpPDU7KytpKXNbaV09MTE3O3RoaXMuZW9mPSEwfWxldCBvPTA7Zm9yKGk9MDtpPDU7KytpKW89ODUqbysoc1tpXS0zMyk7Zm9yKGk9MztpPj0wOy0taSl7clthK2ldPTI1NSZvO28+Pj04fX19fXQuQXNjaWk4NVN0cmVhbT1Bc2NpaTg1U3RyZWFtfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuU3RyZWFtc1NlcXVlbmNlU3RyZWFtPXQuRGVjb2RlU3RyZWFtPXZvaWQgMDt2YXIgcj1hKDUpLG49YSg4KTtjb25zdCBpPW5ldyBVaW50OEFycmF5KDApO2NsYXNzIERlY29kZVN0cmVhbSBleHRlbmRzIHIuQmFzZVN0cmVhbXtjb25zdHJ1Y3RvcihlKXtzdXBlcigpO3RoaXMuX3Jhd01pbkJ1ZmZlckxlbmd0aD1lfHwwO3RoaXMucG9zPTA7dGhpcy5idWZmZXJMZW5ndGg9MDt0aGlzLmVvZj0hMTt0aGlzLmJ1ZmZlcj1pO3RoaXMubWluQnVmZmVyTGVuZ3RoPTUxMjtpZihlKWZvcig7dGhpcy5taW5CdWZmZXJMZW5ndGg8ZTspdGhpcy5taW5CdWZmZXJMZW5ndGgqPTJ9Z2V0IGlzRW1wdHkoKXtmb3IoOyF0aGlzLmVvZiYmMD09PXRoaXMuYnVmZmVyTGVuZ3RoOyl0aGlzLnJlYWRCbG9jaygpO3JldHVybiAwPT09dGhpcy5idWZmZXJMZW5ndGh9ZW5zdXJlQnVmZmVyKGUpe2NvbnN0IHQ9dGhpcy5idWZmZXI7aWYoZTw9dC5ieXRlTGVuZ3RoKXJldHVybiB0O2xldCBhPXRoaXMubWluQnVmZmVyTGVuZ3RoO2Zvcig7YTxlOylhKj0yO2NvbnN0IHI9bmV3IFVpbnQ4QXJyYXkoYSk7ci5zZXQodCk7cmV0dXJuIHRoaXMuYnVmZmVyPXJ9Z2V0Qnl0ZSgpe2NvbnN0IGU9dGhpcy5wb3M7Zm9yKDt0aGlzLmJ1ZmZlckxlbmd0aDw9ZTspe2lmKHRoaXMuZW9mKXJldHVybi0xO3RoaXMucmVhZEJsb2NrKCl9cmV0dXJuIHRoaXMuYnVmZmVyW3RoaXMucG9zKytdfWdldEJ5dGVzKGUpe2NvbnN0IHQ9dGhpcy5wb3M7bGV0IGE7aWYoZSl7dGhpcy5lbnN1cmVCdWZmZXIodCtlKTthPXQrZTtmb3IoOyF0aGlzLmVvZiYmdGhpcy5idWZmZXJMZW5ndGg8YTspdGhpcy5yZWFkQmxvY2soKTtjb25zdCByPXRoaXMuYnVmZmVyTGVuZ3RoO2E+ciYmKGE9cil9ZWxzZXtmb3IoOyF0aGlzLmVvZjspdGhpcy5yZWFkQmxvY2soKTthPXRoaXMuYnVmZmVyTGVuZ3RofXRoaXMucG9zPWE7cmV0dXJuIHRoaXMuYnVmZmVyLnN1YmFycmF5KHQsYSl9cmVzZXQoKXt0aGlzLnBvcz0wfW1ha2VTdWJTdHJlYW0oZSx0LGE9bnVsbCl7aWYodm9pZCAwPT09dClmb3IoOyF0aGlzLmVvZjspdGhpcy5yZWFkQmxvY2soKTtlbHNle2NvbnN0IGE9ZSt0O2Zvcig7dGhpcy5idWZmZXJMZW5ndGg8PWEmJiF0aGlzLmVvZjspdGhpcy5yZWFkQmxvY2soKX1yZXR1cm4gbmV3IG4uU3RyZWFtKHRoaXMuYnVmZmVyLGUsdCxhKX1nZXRCYXNlU3RyZWFtcygpe3JldHVybiB0aGlzLnN0cj90aGlzLnN0ci5nZXRCYXNlU3RyZWFtcygpOm51bGx9fXQuRGVjb2RlU3RyZWFtPURlY29kZVN0cmVhbTt0LlN0cmVhbXNTZXF1ZW5jZVN0cmVhbT1jbGFzcyBTdHJlYW1zU2VxdWVuY2VTdHJlYW0gZXh0ZW5kcyBEZWNvZGVTdHJlYW17Y29uc3RydWN0b3IoZSx0PW51bGwpe2xldCBhPTA7Zm9yKGNvbnN0IHQgb2YgZSlhKz10IGluc3RhbmNlb2YgRGVjb2RlU3RyZWFtP3QuX3Jhd01pbkJ1ZmZlckxlbmd0aDp0Lmxlbmd0aDtzdXBlcihhKTt0aGlzLnN0cmVhbXM9ZTt0aGlzLl9vbkVycm9yPXR9cmVhZEJsb2NrKCl7Y29uc3QgZT10aGlzLnN0cmVhbXM7aWYoMD09PWUubGVuZ3RoKXt0aGlzLmVvZj0hMDtyZXR1cm59Y29uc3QgdD1lLnNoaWZ0KCk7bGV0IGE7dHJ5e2E9dC5nZXRCeXRlcygpfWNhdGNoKGUpe2lmKHRoaXMuX29uRXJyb3Ipe3RoaXMuX29uRXJyb3IoZSx0LmRpY3Q/Lm9iaklkKTtyZXR1cm59dGhyb3cgZX1jb25zdCByPXRoaXMuYnVmZmVyTGVuZ3RoLG49cithLmxlbmd0aDt0aGlzLmVuc3VyZUJ1ZmZlcihuKS5zZXQoYSxyKTt0aGlzLmJ1ZmZlckxlbmd0aD1ufWdldEJhc2VTdHJlYW1zKCl7Y29uc3QgZT1bXTtmb3IoY29uc3QgdCBvZiB0aGlzLnN0cmVhbXMpe2NvbnN0IGE9dC5nZXRCYXNlU3RyZWFtcygpO2EmJmUucHVzaCguLi5hKX1yZXR1cm4gZS5sZW5ndGg+MD9lOm51bGx9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkFzY2lpSGV4U3RyZWFtPXZvaWQgMDt2YXIgcj1hKDE4KTtjbGFzcyBBc2NpaUhleFN0cmVhbSBleHRlbmRzIHIuRGVjb2RlU3RyZWFte2NvbnN0cnVjdG9yKGUsdCl7dCYmKHQqPS41KTtzdXBlcih0KTt0aGlzLnN0cj1lO3RoaXMuZGljdD1lLmRpY3Q7dGhpcy5maXJzdERpZ2l0PS0xfXJlYWRCbG9jaygpe2NvbnN0IGU9dGhpcy5zdHIuZ2V0Qnl0ZXMoOGUzKTtpZighZS5sZW5ndGgpe3RoaXMuZW9mPSEwO3JldHVybn1jb25zdCB0PWUubGVuZ3RoKzE+PjEsYT10aGlzLmVuc3VyZUJ1ZmZlcih0aGlzLmJ1ZmZlckxlbmd0aCt0KTtsZXQgcj10aGlzLmJ1ZmZlckxlbmd0aCxuPXRoaXMuZmlyc3REaWdpdDtmb3IoY29uc3QgdCBvZiBlKXtsZXQgZTtpZih0Pj00OCYmdDw9NTcpZT0xNSZ0O2Vsc2V7aWYoISh0Pj02NSYmdDw9NzB8fHQ+PTk3JiZ0PD0xMDIpKXtpZig2Mj09PXQpe3RoaXMuZW9mPSEwO2JyZWFrfWNvbnRpbnVlfWU9OSsoMTUmdCl9aWYobjwwKW49ZTtlbHNle2FbcisrXT1uPDw0fGU7bj0tMX19aWYobj49MCYmdGhpcy5lb2Ype2FbcisrXT1uPDw0O249LTF9dGhpcy5maXJzdERpZ2l0PW47dGhpcy5idWZmZXJMZW5ndGg9cn19dC5Bc2NpaUhleFN0cmVhbT1Bc2NpaUhleFN0cmVhbX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkNDSVRURmF4U3RyZWFtPXZvaWQgMDt2YXIgcj1hKDIxKSxuPWEoMTgpLGk9YSg0KTtjbGFzcyBDQ0lUVEZheFN0cmVhbSBleHRlbmRzIG4uRGVjb2RlU3RyZWFte2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcih0KTt0aGlzLnN0cj1lO3RoaXMuZGljdD1lLmRpY3Q7YSBpbnN0YW5jZW9mIGkuRGljdHx8KGE9aS5EaWN0LmVtcHR5KTtjb25zdCBuPXtuZXh0OigpPT5lLmdldEJ5dGUoKX07dGhpcy5jY2l0dEZheERlY29kZXI9bmV3IHIuQ0NJVFRGYXhEZWNvZGVyKG4se0s6YS5nZXQoIksiKSxFbmRPZkxpbmU6YS5nZXQoIkVuZE9mTGluZSIpLEVuY29kZWRCeXRlQWxpZ246YS5nZXQoIkVuY29kZWRCeXRlQWxpZ24iKSxDb2x1bW5zOmEuZ2V0KCJDb2x1bW5zIiksUm93czphLmdldCgiUm93cyIpLEVuZE9mQmxvY2s6YS5nZXQoIkVuZE9mQmxvY2siKSxCbGFja0lzMTphLmdldCgiQmxhY2tJczEiKX0pfXJlYWRCbG9jaygpe2Zvcig7IXRoaXMuZW9mOyl7Y29uc3QgZT10aGlzLmNjaXR0RmF4RGVjb2Rlci5yZWFkTmV4dENoYXIoKTtpZigtMT09PWUpe3RoaXMuZW9mPSEwO3JldHVybn10aGlzLmVuc3VyZUJ1ZmZlcih0aGlzLmJ1ZmZlckxlbmd0aCsxKTt0aGlzLmJ1ZmZlclt0aGlzLmJ1ZmZlckxlbmd0aCsrXT1lfX19dC5DQ0lUVEZheFN0cmVhbT1DQ0lUVEZheFN0cmVhbX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkNDSVRURmF4RGVjb2Rlcj12b2lkIDA7dmFyIHI9YSgyKTtjb25zdCBuPS0xLGk9W1stMSwtMV0sWy0xLC0xXSxbNyw4XSxbNyw3XSxbNiw2XSxbNiw2XSxbNiw1XSxbNiw1XSxbNCwwXSxbNCwwXSxbNCwwXSxbNCwwXSxbNCwwXSxbNCwwXSxbNCwwXSxbNCwwXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMywxXSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMyw0XSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMywzXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXSxbMSwyXV0scz1bWy0xLC0xXSxbMTIsLTJdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbMTEsMTc5Ml0sWzExLDE3OTJdLFsxMiwxOTg0XSxbMTIsMjA0OF0sWzEyLDIxMTJdLFsxMiwyMTc2XSxbMTIsMjI0MF0sWzEyLDIzMDRdLFsxMSwxODU2XSxbMTEsMTg1Nl0sWzExLDE5MjBdLFsxMSwxOTIwXSxbMTIsMjM2OF0sWzEyLDI0MzJdLFsxMiwyNDk2XSxbMTIsMjU2MF1dLG89W1stMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWzgsMjldLFs4LDI5XSxbOCwzMF0sWzgsMzBdLFs4LDQ1XSxbOCw0NV0sWzgsNDZdLFs4LDQ2XSxbNywyMl0sWzcsMjJdLFs3LDIyXSxbNywyMl0sWzcsMjNdLFs3LDIzXSxbNywyM10sWzcsMjNdLFs4LDQ3XSxbOCw0N10sWzgsNDhdLFs4LDQ4XSxbNiwxM10sWzYsMTNdLFs2LDEzXSxbNiwxM10sWzYsMTNdLFs2LDEzXSxbNiwxM10sWzYsMTNdLFs3LDIwXSxbNywyMF0sWzcsMjBdLFs3LDIwXSxbOCwzM10sWzgsMzNdLFs4LDM0XSxbOCwzNF0sWzgsMzVdLFs4LDM1XSxbOCwzNl0sWzgsMzZdLFs4LDM3XSxbOCwzN10sWzgsMzhdLFs4LDM4XSxbNywxOV0sWzcsMTldLFs3LDE5XSxbNywxOV0sWzgsMzFdLFs4LDMxXSxbOCwzMl0sWzgsMzJdLFs2LDFdLFs2LDFdLFs2LDFdLFs2LDFdLFs2LDFdLFs2LDFdLFs2LDFdLFs2LDFdLFs2LDEyXSxbNiwxMl0sWzYsMTJdLFs2LDEyXSxbNiwxMl0sWzYsMTJdLFs2LDEyXSxbNiwxMl0sWzgsNTNdLFs4LDUzXSxbOCw1NF0sWzgsNTRdLFs3LDI2XSxbNywyNl0sWzcsMjZdLFs3LDI2XSxbOCwzOV0sWzgsMzldLFs4LDQwXSxbOCw0MF0sWzgsNDFdLFs4LDQxXSxbOCw0Ml0sWzgsNDJdLFs4LDQzXSxbOCw0M10sWzgsNDRdLFs4LDQ0XSxbNywyMV0sWzcsMjFdLFs3LDIxXSxbNywyMV0sWzcsMjhdLFs3LDI4XSxbNywyOF0sWzcsMjhdLFs4LDYxXSxbOCw2MV0sWzgsNjJdLFs4LDYyXSxbOCw2M10sWzgsNjNdLFs4LDBdLFs4LDBdLFs4LDMyMF0sWzgsMzIwXSxbOCwzODRdLFs4LDM4NF0sWzUsMTBdLFs1LDEwXSxbNSwxMF0sWzUsMTBdLFs1LDEwXSxbNSwxMF0sWzUsMTBdLFs1LDEwXSxbNSwxMF0sWzUsMTBdLFs1LDEwXSxbNSwxMF0sWzUsMTBdLFs1LDEwXSxbNSwxMF0sWzUsMTBdLFs1LDExXSxbNSwxMV0sWzUsMTFdLFs1LDExXSxbNSwxMV0sWzUsMTFdLFs1LDExXSxbNSwxMV0sWzUsMTFdLFs1LDExXSxbNSwxMV0sWzUsMTFdLFs1LDExXSxbNSwxMV0sWzUsMTFdLFs1LDExXSxbNywyN10sWzcsMjddLFs3LDI3XSxbNywyN10sWzgsNTldLFs4LDU5XSxbOCw2MF0sWzgsNjBdLFs5LDE0NzJdLFs5LDE1MzZdLFs5LDE2MDBdLFs5LDE3MjhdLFs3LDE4XSxbNywxOF0sWzcsMThdLFs3LDE4XSxbNywyNF0sWzcsMjRdLFs3LDI0XSxbNywyNF0sWzgsNDldLFs4LDQ5XSxbOCw1MF0sWzgsNTBdLFs4LDUxXSxbOCw1MV0sWzgsNTJdLFs4LDUyXSxbNywyNV0sWzcsMjVdLFs3LDI1XSxbNywyNV0sWzgsNTVdLFs4LDU1XSxbOCw1Nl0sWzgsNTZdLFs4LDU3XSxbOCw1N10sWzgsNThdLFs4LDU4XSxbNiwxOTJdLFs2LDE5Ml0sWzYsMTkyXSxbNiwxOTJdLFs2LDE5Ml0sWzYsMTkyXSxbNiwxOTJdLFs2LDE5Ml0sWzYsMTY2NF0sWzYsMTY2NF0sWzYsMTY2NF0sWzYsMTY2NF0sWzYsMTY2NF0sWzYsMTY2NF0sWzYsMTY2NF0sWzYsMTY2NF0sWzgsNDQ4XSxbOCw0NDhdLFs4LDUxMl0sWzgsNTEyXSxbOSw3MDRdLFs5LDc2OF0sWzgsNjQwXSxbOCw2NDBdLFs4LDU3Nl0sWzgsNTc2XSxbOSw4MzJdLFs5LDg5Nl0sWzksOTYwXSxbOSwxMDI0XSxbOSwxMDg4XSxbOSwxMTUyXSxbOSwxMjE2XSxbOSwxMjgwXSxbOSwxMzQ0XSxbOSwxNDA4XSxbNywyNTZdLFs3LDI1Nl0sWzcsMjU2XSxbNywyNTZdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDJdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs0LDNdLFs1LDEyOF0sWzUsMTI4XSxbNSwxMjhdLFs1LDEyOF0sWzUsMTI4XSxbNSwxMjhdLFs1LDEyOF0sWzUsMTI4XSxbNSwxMjhdLFs1LDEyOF0sWzUsMTI4XSxbNSwxMjhdLFs1LDEyOF0sWzUsMTI4XSxbNSwxMjhdLFs1LDEyOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOF0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzUsOV0sWzYsMTZdLFs2LDE2XSxbNiwxNl0sWzYsMTZdLFs2LDE2XSxbNiwxNl0sWzYsMTZdLFs2LDE2XSxbNiwxN10sWzYsMTddLFs2LDE3XSxbNiwxN10sWzYsMTddLFs2LDE3XSxbNiwxN10sWzYsMTddLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDRdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFs2LDE0XSxbNiwxNF0sWzYsMTRdLFs2LDE0XSxbNiwxNF0sWzYsMTRdLFs2LDE0XSxbNiwxNF0sWzYsMTVdLFs2LDE1XSxbNiwxNV0sWzYsMTVdLFs2LDE1XSxbNiwxNV0sWzYsMTVdLFs2LDE1XSxbNSw2NF0sWzUsNjRdLFs1LDY0XSxbNSw2NF0sWzUsNjRdLFs1LDY0XSxbNSw2NF0sWzUsNjRdLFs1LDY0XSxbNSw2NF0sWzUsNjRdLFs1LDY0XSxbNSw2NF0sWzUsNjRdLFs1LDY0XSxbNSw2NF0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsNl0sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN10sWzQsN11dLGM9W1stMSwtMV0sWy0xLC0xXSxbMTIsLTJdLFsxMiwtMl0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbMTEsMTc5Ml0sWzExLDE3OTJdLFsxMSwxNzkyXSxbMTEsMTc5Ml0sWzEyLDE5ODRdLFsxMiwxOTg0XSxbMTIsMjA0OF0sWzEyLDIwNDhdLFsxMiwyMTEyXSxbMTIsMjExMl0sWzEyLDIxNzZdLFsxMiwyMTc2XSxbMTIsMjI0MF0sWzEyLDIyNDBdLFsxMiwyMzA0XSxbMTIsMjMwNF0sWzExLDE4NTZdLFsxMSwxODU2XSxbMTEsMTg1Nl0sWzExLDE4NTZdLFsxMSwxOTIwXSxbMTEsMTkyMF0sWzExLDE5MjBdLFsxMSwxOTIwXSxbMTIsMjM2OF0sWzEyLDIzNjhdLFsxMiwyNDMyXSxbMTIsMjQzMl0sWzEyLDI0OTZdLFsxMiwyNDk2XSxbMTIsMjU2MF0sWzEyLDI1NjBdLFsxMCwxOF0sWzEwLDE4XSxbMTAsMThdLFsxMCwxOF0sWzEwLDE4XSxbMTAsMThdLFsxMCwxOF0sWzEwLDE4XSxbMTIsNTJdLFsxMiw1Ml0sWzEzLDY0MF0sWzEzLDcwNF0sWzEzLDc2OF0sWzEzLDgzMl0sWzEyLDU1XSxbMTIsNTVdLFsxMiw1Nl0sWzEyLDU2XSxbMTMsMTI4MF0sWzEzLDEzNDRdLFsxMywxNDA4XSxbMTMsMTQ3Ml0sWzEyLDU5XSxbMTIsNTldLFsxMiw2MF0sWzEyLDYwXSxbMTMsMTUzNl0sWzEzLDE2MDBdLFsxMSwyNF0sWzExLDI0XSxbMTEsMjRdLFsxMSwyNF0sWzExLDI1XSxbMTEsMjVdLFsxMSwyNV0sWzExLDI1XSxbMTMsMTY2NF0sWzEzLDE3MjhdLFsxMiwzMjBdLFsxMiwzMjBdLFsxMiwzODRdLFsxMiwzODRdLFsxMiw0NDhdLFsxMiw0NDhdLFsxMyw1MTJdLFsxMyw1NzZdLFsxMiw1M10sWzEyLDUzXSxbMTIsNTRdLFsxMiw1NF0sWzEzLDg5Nl0sWzEzLDk2MF0sWzEzLDEwMjRdLFsxMywxMDg4XSxbMTMsMTE1Ml0sWzEzLDEyMTZdLFsxMCw2NF0sWzEwLDY0XSxbMTAsNjRdLFsxMCw2NF0sWzEwLDY0XSxbMTAsNjRdLFsxMCw2NF0sWzEwLDY0XV0sbD1bWzgsMTNdLFs4LDEzXSxbOCwxM10sWzgsMTNdLFs4LDEzXSxbOCwxM10sWzgsMTNdLFs4LDEzXSxbOCwxM10sWzgsMTNdLFs4LDEzXSxbOCwxM10sWzgsMTNdLFs4LDEzXSxbOCwxM10sWzgsMTNdLFsxMSwyM10sWzExLDIzXSxbMTIsNTBdLFsxMiw1MV0sWzEyLDQ0XSxbMTIsNDVdLFsxMiw0Nl0sWzEyLDQ3XSxbMTIsNTddLFsxMiw1OF0sWzEyLDYxXSxbMTIsMjU2XSxbMTAsMTZdLFsxMCwxNl0sWzEwLDE2XSxbMTAsMTZdLFsxMCwxN10sWzEwLDE3XSxbMTAsMTddLFsxMCwxN10sWzEyLDQ4XSxbMTIsNDldLFsxMiw2Ml0sWzEyLDYzXSxbMTIsMzBdLFsxMiwzMV0sWzEyLDMyXSxbMTIsMzNdLFsxMiw0MF0sWzEyLDQxXSxbMTEsMjJdLFsxMSwyMl0sWzgsMTRdLFs4LDE0XSxbOCwxNF0sWzgsMTRdLFs4LDE0XSxbOCwxNF0sWzgsMTRdLFs4LDE0XSxbOCwxNF0sWzgsMTRdLFs4LDE0XSxbOCwxNF0sWzgsMTRdLFs4LDE0XSxbOCwxNF0sWzgsMTRdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTBdLFs3LDEwXSxbNywxMF0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbNywxMV0sWzcsMTFdLFs3LDExXSxbOSwxNV0sWzksMTVdLFs5LDE1XSxbOSwxNV0sWzksMTVdLFs5LDE1XSxbOSwxNV0sWzksMTVdLFsxMiwxMjhdLFsxMiwxOTJdLFsxMiwyNl0sWzEyLDI3XSxbMTIsMjhdLFsxMiwyOV0sWzExLDE5XSxbMTEsMTldLFsxMSwyMF0sWzExLDIwXSxbMTIsMzRdLFsxMiwzNV0sWzEyLDM2XSxbMTIsMzddLFsxMiwzOF0sWzEyLDM5XSxbMTEsMjFdLFsxMSwyMV0sWzEyLDQyXSxbMTIsNDNdLFsxMCwwXSxbMTAsMF0sWzEwLDBdLFsxMCwwXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdLFs3LDEyXSxbNywxMl0sWzcsMTJdXSxoPVtbLTEsLTFdLFstMSwtMV0sWy0xLC0xXSxbLTEsLTFdLFs2LDldLFs2LDhdLFs1LDddLFs1LDddLFs0LDZdLFs0LDZdLFs0LDZdLFs0LDZdLFs0LDVdLFs0LDVdLFs0LDVdLFs0LDVdLFszLDFdLFszLDFdLFszLDFdLFszLDFdLFszLDFdLFszLDFdLFszLDFdLFszLDFdLFszLDRdLFszLDRdLFszLDRdLFszLDRdLFszLDRdLFszLDRdLFszLDRdLFszLDRdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDNdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdLFsyLDJdXTt0LkNDSVRURmF4RGVjb2Rlcj1jbGFzcyBDQ0lUVEZheERlY29kZXJ7Y29uc3RydWN0b3IoZSx0PXt9KXtpZighZXx8ImZ1bmN0aW9uIiE9dHlwZW9mIGUubmV4dCl0aHJvdyBuZXcgRXJyb3IoJ0NDSVRURmF4RGVjb2RlciAtIGludmFsaWQgInNvdXJjZSIgcGFyYW1ldGVyLicpO3RoaXMuc291cmNlPWU7dGhpcy5lb2Y9ITE7dGhpcy5lbmNvZGluZz10Lkt8fDA7dGhpcy5lb2xpbmU9dC5FbmRPZkxpbmV8fCExO3RoaXMuYnl0ZUFsaWduPXQuRW5jb2RlZEJ5dGVBbGlnbnx8ITE7dGhpcy5jb2x1bW5zPXQuQ29sdW1uc3x8MTcyODt0aGlzLnJvd3M9dC5Sb3dzfHwwO3RoaXMuZW9ibG9jaz10LkVuZE9mQmxvY2s/PyEwO3RoaXMuYmxhY2s9dC5CbGFja0lzMXx8ITE7dGhpcy5jb2RpbmdMaW5lPW5ldyBVaW50MzJBcnJheSh0aGlzLmNvbHVtbnMrMSk7dGhpcy5yZWZMaW5lPW5ldyBVaW50MzJBcnJheSh0aGlzLmNvbHVtbnMrMik7dGhpcy5jb2RpbmdMaW5lWzBdPXRoaXMuY29sdW1uczt0aGlzLmNvZGluZ1Bvcz0wO3RoaXMucm93PTA7dGhpcy5uZXh0TGluZTJEPXRoaXMuZW5jb2Rpbmc8MDt0aGlzLmlucHV0Qml0cz0wO3RoaXMuaW5wdXRCdWY9MDt0aGlzLm91dHB1dEJpdHM9MDt0aGlzLnJvd3NEb25lPSExO2xldCBhO2Zvcig7MD09PShhPXRoaXMuX2xvb2tCaXRzKDEyKSk7KXRoaXMuX2VhdEJpdHMoMSk7MT09PWEmJnRoaXMuX2VhdEJpdHMoMTIpO2lmKHRoaXMuZW5jb2Rpbmc+MCl7dGhpcy5uZXh0TGluZTJEPSF0aGlzLl9sb29rQml0cygxKTt0aGlzLl9lYXRCaXRzKDEpfX1yZWFkTmV4dENoYXIoKXtpZih0aGlzLmVvZilyZXR1cm4tMTtjb25zdCBlPXRoaXMucmVmTGluZSx0PXRoaXMuY29kaW5nTGluZSxhPXRoaXMuY29sdW1ucztsZXQgaSxzLG8sYyxsO2lmKDA9PT10aGlzLm91dHB1dEJpdHMpe3RoaXMucm93c0RvbmUmJih0aGlzLmVvZj0hMCk7aWYodGhpcy5lb2YpcmV0dXJuLTE7dGhpcy5lcnI9ITE7bGV0IG8sbCxoO2lmKHRoaXMubmV4dExpbmUyRCl7Zm9yKGM9MDt0W2NdPGE7KytjKWVbY109dFtjXTtlW2MrK109YTtlW2NdPWE7dFswXT0wO3RoaXMuY29kaW5nUG9zPTA7aT0wO3M9MDtmb3IoO3RbdGhpcy5jb2RpbmdQb3NdPGE7KXtvPXRoaXMuX2dldFR3b0RpbUNvZGUoKTtzd2l0Y2gobyl7Y2FzZSAwOnRoaXMuX2FkZFBpeGVscyhlW2krMV0scyk7ZVtpKzFdPGEmJihpKz0yKTticmVhaztjYXNlIDE6bz1sPTA7aWYocyl7ZG97bys9aD10aGlzLl9nZXRCbGFja0NvZGUoKX13aGlsZShoPj02NCk7ZG97bCs9aD10aGlzLl9nZXRXaGl0ZUNvZGUoKX13aGlsZShoPj02NCl9ZWxzZXtkb3tvKz1oPXRoaXMuX2dldFdoaXRlQ29kZSgpfXdoaWxlKGg+PTY0KTtkb3tsKz1oPXRoaXMuX2dldEJsYWNrQ29kZSgpfXdoaWxlKGg+PTY0KX10aGlzLl9hZGRQaXhlbHModFt0aGlzLmNvZGluZ1Bvc10rbyxzKTt0W3RoaXMuY29kaW5nUG9zXTxhJiZ0aGlzLl9hZGRQaXhlbHModFt0aGlzLmNvZGluZ1Bvc10rbCwxXnMpO2Zvcig7ZVtpXTw9dFt0aGlzLmNvZGluZ1Bvc10mJmVbaV08YTspaSs9MjticmVhaztjYXNlIDc6dGhpcy5fYWRkUGl4ZWxzKGVbaV0rMyxzKTtzXj0xO2lmKHRbdGhpcy5jb2RpbmdQb3NdPGEpeysraTtmb3IoO2VbaV08PXRbdGhpcy5jb2RpbmdQb3NdJiZlW2ldPGE7KWkrPTJ9YnJlYWs7Y2FzZSA1OnRoaXMuX2FkZFBpeGVscyhlW2ldKzIscyk7c149MTtpZih0W3RoaXMuY29kaW5nUG9zXTxhKXsrK2k7Zm9yKDtlW2ldPD10W3RoaXMuY29kaW5nUG9zXSYmZVtpXTxhOylpKz0yfWJyZWFrO2Nhc2UgMzp0aGlzLl9hZGRQaXhlbHMoZVtpXSsxLHMpO3NePTE7aWYodFt0aGlzLmNvZGluZ1Bvc108YSl7KytpO2Zvcig7ZVtpXTw9dFt0aGlzLmNvZGluZ1Bvc10mJmVbaV08YTspaSs9Mn1icmVhaztjYXNlIDI6dGhpcy5fYWRkUGl4ZWxzKGVbaV0scyk7c149MTtpZih0W3RoaXMuY29kaW5nUG9zXTxhKXsrK2k7Zm9yKDtlW2ldPD10W3RoaXMuY29kaW5nUG9zXSYmZVtpXTxhOylpKz0yfWJyZWFrO2Nhc2UgODp0aGlzLl9hZGRQaXhlbHNOZWcoZVtpXS0zLHMpO3NePTE7aWYodFt0aGlzLmNvZGluZ1Bvc108YSl7aT4wPy0taTorK2k7Zm9yKDtlW2ldPD10W3RoaXMuY29kaW5nUG9zXSYmZVtpXTxhOylpKz0yfWJyZWFrO2Nhc2UgNjp0aGlzLl9hZGRQaXhlbHNOZWcoZVtpXS0yLHMpO3NePTE7aWYodFt0aGlzLmNvZGluZ1Bvc108YSl7aT4wPy0taTorK2k7Zm9yKDtlW2ldPD10W3RoaXMuY29kaW5nUG9zXSYmZVtpXTxhOylpKz0yfWJyZWFrO2Nhc2UgNDp0aGlzLl9hZGRQaXhlbHNOZWcoZVtpXS0xLHMpO3NePTE7aWYodFt0aGlzLmNvZGluZ1Bvc108YSl7aT4wPy0taTorK2k7Zm9yKDtlW2ldPD10W3RoaXMuY29kaW5nUG9zXSYmZVtpXTxhOylpKz0yfWJyZWFrO2Nhc2Ugbjp0aGlzLl9hZGRQaXhlbHMoYSwwKTt0aGlzLmVvZj0hMDticmVhaztkZWZhdWx0OigwLHIuaW5mbykoImJhZCAyZCBjb2RlIik7dGhpcy5fYWRkUGl4ZWxzKGEsMCk7dGhpcy5lcnI9ITB9fX1lbHNle3RbMF09MDt0aGlzLmNvZGluZ1Bvcz0wO3M9MDtmb3IoO3RbdGhpcy5jb2RpbmdQb3NdPGE7KXtvPTA7aWYocylkb3tvKz1oPXRoaXMuX2dldEJsYWNrQ29kZSgpfXdoaWxlKGg+PTY0KTtlbHNlIGRve28rPWg9dGhpcy5fZ2V0V2hpdGVDb2RlKCl9d2hpbGUoaD49NjQpO3RoaXMuX2FkZFBpeGVscyh0W3RoaXMuY29kaW5nUG9zXStvLHMpO3NePTF9fWxldCB1PSExO3RoaXMuYnl0ZUFsaWduJiYodGhpcy5pbnB1dEJpdHMmPS04KTtpZih0aGlzLmVvYmxvY2t8fHRoaXMucm93IT09dGhpcy5yb3dzLTEpe289dGhpcy5fbG9va0JpdHMoMTIpO2lmKHRoaXMuZW9saW5lKWZvcig7byE9PW4mJjEhPT1vOyl7dGhpcy5fZWF0Qml0cygxKTtvPXRoaXMuX2xvb2tCaXRzKDEyKX1lbHNlIGZvcig7MD09PW87KXt0aGlzLl9lYXRCaXRzKDEpO289dGhpcy5fbG9va0JpdHMoMTIpfWlmKDE9PT1vKXt0aGlzLl9lYXRCaXRzKDEyKTt1PSEwfWVsc2Ugbz09PW4mJih0aGlzLmVvZj0hMCl9ZWxzZSB0aGlzLnJvd3NEb25lPSEwO2lmKCF0aGlzLmVvZiYmdGhpcy5lbmNvZGluZz4wJiYhdGhpcy5yb3dzRG9uZSl7dGhpcy5uZXh0TGluZTJEPSF0aGlzLl9sb29rQml0cygxKTt0aGlzLl9lYXRCaXRzKDEpfWlmKHRoaXMuZW9ibG9jayYmdSYmdGhpcy5ieXRlQWxpZ24pe289dGhpcy5fbG9va0JpdHMoMTIpO2lmKDE9PT1vKXt0aGlzLl9lYXRCaXRzKDEyKTtpZih0aGlzLmVuY29kaW5nPjApe3RoaXMuX2xvb2tCaXRzKDEpO3RoaXMuX2VhdEJpdHMoMSl9aWYodGhpcy5lbmNvZGluZz49MClmb3IoYz0wO2M8NDsrK2Mpe289dGhpcy5fbG9va0JpdHMoMTIpOzEhPT1vJiYoMCxyLmluZm8pKCJiYWQgcnRjIGNvZGU6ICIrbyk7dGhpcy5fZWF0Qml0cygxMik7aWYodGhpcy5lbmNvZGluZz4wKXt0aGlzLl9sb29rQml0cygxKTt0aGlzLl9lYXRCaXRzKDEpfX10aGlzLmVvZj0hMH19ZWxzZSBpZih0aGlzLmVyciYmdGhpcy5lb2xpbmUpe2Zvcig7Oyl7bz10aGlzLl9sb29rQml0cygxMyk7aWYobz09PW4pe3RoaXMuZW9mPSEwO3JldHVybi0xfWlmKG8+PjE9PTEpYnJlYWs7dGhpcy5fZWF0Qml0cygxKX10aGlzLl9lYXRCaXRzKDEyKTtpZih0aGlzLmVuY29kaW5nPjApe3RoaXMuX2VhdEJpdHMoMSk7dGhpcy5uZXh0TGluZTJEPSEoMSZvKX19dGhpcy5vdXRwdXRCaXRzPXRbMF0+MD90W3RoaXMuY29kaW5nUG9zPTBdOnRbdGhpcy5jb2RpbmdQb3M9MV07dGhpcy5yb3crK31pZih0aGlzLm91dHB1dEJpdHM+PTgpe2w9MSZ0aGlzLmNvZGluZ1Bvcz8wOjI1NTt0aGlzLm91dHB1dEJpdHMtPTg7aWYoMD09PXRoaXMub3V0cHV0Qml0cyYmdFt0aGlzLmNvZGluZ1Bvc108YSl7dGhpcy5jb2RpbmdQb3MrKzt0aGlzLm91dHB1dEJpdHM9dFt0aGlzLmNvZGluZ1Bvc10tdFt0aGlzLmNvZGluZ1Bvcy0xXX19ZWxzZXtvPTg7bD0wO2Rve2lmKCJudW1iZXIiIT10eXBlb2YgdGhpcy5vdXRwdXRCaXRzKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCdJbnZhbGlkIC9DQ0lUVEZheERlY29kZSBkYXRhLCAib3V0cHV0Qml0cyIgbXVzdCBiZSBhIG51bWJlci4nKTtpZih0aGlzLm91dHB1dEJpdHM+byl7bDw8PW87MSZ0aGlzLmNvZGluZ1Bvc3x8KGx8PTI1NT4+OC1vKTt0aGlzLm91dHB1dEJpdHMtPW87bz0wfWVsc2V7bDw8PXRoaXMub3V0cHV0Qml0czsxJnRoaXMuY29kaW5nUG9zfHwobHw9MjU1Pj44LXRoaXMub3V0cHV0Qml0cyk7by09dGhpcy5vdXRwdXRCaXRzO3RoaXMub3V0cHV0Qml0cz0wO2lmKHRbdGhpcy5jb2RpbmdQb3NdPGEpe3RoaXMuY29kaW5nUG9zKys7dGhpcy5vdXRwdXRCaXRzPXRbdGhpcy5jb2RpbmdQb3NdLXRbdGhpcy5jb2RpbmdQb3MtMV19ZWxzZSBpZihvPjApe2w8PD1vO289MH19fXdoaWxlKG8pfXRoaXMuYmxhY2smJihsXj0yNTUpO3JldHVybiBsfV9hZGRQaXhlbHMoZSx0KXtjb25zdCBhPXRoaXMuY29kaW5nTGluZTtsZXQgbj10aGlzLmNvZGluZ1BvcztpZihlPmFbbl0pe2lmKGU+dGhpcy5jb2x1bW5zKXsoMCxyLmluZm8pKCJyb3cgaXMgd3JvbmcgbGVuZ3RoIik7dGhpcy5lcnI9ITA7ZT10aGlzLmNvbHVtbnN9MSZuXnQmJisrbjthW25dPWV9dGhpcy5jb2RpbmdQb3M9bn1fYWRkUGl4ZWxzTmVnKGUsdCl7Y29uc3QgYT10aGlzLmNvZGluZ0xpbmU7bGV0IG49dGhpcy5jb2RpbmdQb3M7aWYoZT5hW25dKXtpZihlPnRoaXMuY29sdW1ucyl7KDAsci5pbmZvKSgicm93IGlzIHdyb25nIGxlbmd0aCIpO3RoaXMuZXJyPSEwO2U9dGhpcy5jb2x1bW5zfTEmbl50JiYrK247YVtuXT1lfWVsc2UgaWYoZTxhW25dKXtpZihlPDApeygwLHIuaW5mbykoImludmFsaWQgY29kZSIpO3RoaXMuZXJyPSEwO2U9MH1mb3IoO24+MCYmZTxhW24tMV07KS0tbjthW25dPWV9dGhpcy5jb2RpbmdQb3M9bn1fZmluZFRhYmxlQ29kZShlLHQsYSxyKXtjb25zdCBpPXJ8fDA7Zm9yKGxldCByPWU7cjw9dDsrK3Ipe2xldCBlPXRoaXMuX2xvb2tCaXRzKHIpO2lmKGU9PT1uKXJldHVyblshMCwxLCExXTtyPHQmJihlPDw9dC1yKTtpZighaXx8ZT49aSl7Y29uc3QgdD1hW2UtaV07aWYodFswXT09PXIpe3RoaXMuX2VhdEJpdHMocik7cmV0dXJuWyEwLHRbMV0sITBdfX19cmV0dXJuWyExLDAsITFdfV9nZXRUd29EaW1Db2RlKCl7bGV0IGUsdD0wO2lmKHRoaXMuZW9ibG9jayl7dD10aGlzLl9sb29rQml0cyg3KTtlPWlbdF07aWYoZT8uWzBdPjApe3RoaXMuX2VhdEJpdHMoZVswXSk7cmV0dXJuIGVbMV19fWVsc2V7Y29uc3QgZT10aGlzLl9maW5kVGFibGVDb2RlKDEsNyxpKTtpZihlWzBdJiZlWzJdKXJldHVybiBlWzFdfSgwLHIuaW5mbykoIkJhZCB0d28gZGltIGNvZGUiKTtyZXR1cm4gbn1fZ2V0V2hpdGVDb2RlKCl7bGV0IGUsdD0wO2lmKHRoaXMuZW9ibG9jayl7dD10aGlzLl9sb29rQml0cygxMik7aWYodD09PW4pcmV0dXJuIDE7ZT10Pj41PT0wP3NbdF06b1t0Pj4zXTtpZihlWzBdPjApe3RoaXMuX2VhdEJpdHMoZVswXSk7cmV0dXJuIGVbMV19fWVsc2V7bGV0IGU9dGhpcy5fZmluZFRhYmxlQ29kZSgxLDksbyk7aWYoZVswXSlyZXR1cm4gZVsxXTtlPXRoaXMuX2ZpbmRUYWJsZUNvZGUoMTEsMTIscyk7aWYoZVswXSlyZXR1cm4gZVsxXX0oMCxyLmluZm8pKCJiYWQgd2hpdGUgY29kZSIpO3RoaXMuX2VhdEJpdHMoMSk7cmV0dXJuIDF9X2dldEJsYWNrQ29kZSgpe2xldCBlLHQ7aWYodGhpcy5lb2Jsb2NrKXtlPXRoaXMuX2xvb2tCaXRzKDEzKTtpZihlPT09bilyZXR1cm4gMTt0PWU+Pjc9PTA/Y1tlXTplPj45PT0wJiZlPj43IT0wP2xbKGU+PjEpLTY0XTpoW2U+PjddO2lmKHRbMF0+MCl7dGhpcy5fZWF0Qml0cyh0WzBdKTtyZXR1cm4gdFsxXX19ZWxzZXtsZXQgZT10aGlzLl9maW5kVGFibGVDb2RlKDIsNixoKTtpZihlWzBdKXJldHVybiBlWzFdO2U9dGhpcy5fZmluZFRhYmxlQ29kZSg3LDEyLGwsNjQpO2lmKGVbMF0pcmV0dXJuIGVbMV07ZT10aGlzLl9maW5kVGFibGVDb2RlKDEwLDEzLGMpO2lmKGVbMF0pcmV0dXJuIGVbMV19KDAsci5pbmZvKSgiYmFkIGJsYWNrIGNvZGUiKTt0aGlzLl9lYXRCaXRzKDEpO3JldHVybiAxfV9sb29rQml0cyhlKXtsZXQgdDtmb3IoO3RoaXMuaW5wdXRCaXRzPGU7KXtpZigtMT09PSh0PXRoaXMuc291cmNlLm5leHQoKSkpcmV0dXJuIDA9PT10aGlzLmlucHV0Qml0cz9uOnRoaXMuaW5wdXRCdWY8PGUtdGhpcy5pbnB1dEJpdHMmNjU1MzU+PjE2LWU7dGhpcy5pbnB1dEJ1Zj10aGlzLmlucHV0QnVmPDw4fHQ7dGhpcy5pbnB1dEJpdHMrPTh9cmV0dXJuIHRoaXMuaW5wdXRCdWY+PnRoaXMuaW5wdXRCaXRzLWUmNjU1MzU+PjE2LWV9X2VhdEJpdHMoZSl7KHRoaXMuaW5wdXRCaXRzLT1lKTwwJiYodGhpcy5pbnB1dEJpdHM9MCl9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkZsYXRlU3RyZWFtPXZvaWQgMDt2YXIgcj1hKDE4KSxuPWEoMik7Y29uc3QgaT1uZXcgSW50MzJBcnJheShbMTYsMTcsMTgsMCw4LDcsOSw2LDEwLDUsMTEsNCwxMiwzLDEzLDIsMTQsMSwxNV0pLHM9bmV3IEludDMyQXJyYXkoWzMsNCw1LDYsNyw4LDksMTAsNjU1NDcsNjU1NDksNjU1NTEsNjU1NTMsMTMxMDkxLDEzMTA5NSwxMzEwOTksMTMxMTAzLDE5NjY0MywxOTY2NTEsMTk2NjU5LDE5NjY2NywyNjIyMTEsMjYyMjI3LDI2MjI0MywyNjIyNTksMzI3ODExLDMyNzg0MywzMjc4NzUsMzI3OTA3LDI1OCwyNTgsMjU4XSksbz1uZXcgSW50MzJBcnJheShbMSwyLDMsNCw2NTU0MSw2NTU0MywxMzEwODEsMTMxMDg1LDE5NjYyNSwxOTY2MzMsMjYyMTc3LDI2MjE5MywzMjc3NDUsMzI3Nzc3LDM5MzM0NSwzOTM0MDksNDU5MDA5LDQ1OTEzNyw1MjQ4MDEsNTI1MDU3LDU5MDg0OSw1OTEzNjEsNjU3NDA5LDY1ODQzMyw3MjQ5OTMsNzI3MDQxLDc5NDYyNSw3OTg3MjEsODY4MzUzLDg3NjU0NV0pLGM9W25ldyBJbnQzMkFycmF5KFs0NTkwMDgsNTI0MzY4LDUyNDMwNCw1MjQ1NjgsNDU5MDI0LDUyNDQwMCw1MjQzMzYsNTkwMDE2LDQ1OTAxNiw1MjQzODQsNTI0MzIwLDU4OTk4NCw1MjQyODgsNTI0NDE2LDUyNDM1Miw1OTAwNDgsNDU5MDEyLDUyNDM3Niw1MjQzMTIsNTg5OTY4LDQ1OTAyOCw1MjQ0MDgsNTI0MzQ0LDU5MDAzMiw0NTkwMjAsNTI0MzkyLDUyNDMyOCw1OWU0LDUyNDI5Niw1MjQ0MjQsNTI0MzYwLDU5MDA2NCw0NTkwMTAsNTI0MzcyLDUyNDMwOCw1MjQ1NzIsNDU5MDI2LDUyNDQwNCw1MjQzNDAsNTkwMDI0LDQ1OTAxOCw1MjQzODgsNTI0MzI0LDU4OTk5Miw1MjQyOTIsNTI0NDIwLDUyNDM1Niw1OTAwNTYsNDU5MDE0LDUyNDM4MCw1MjQzMTYsNTg5OTc2LDQ1OTAzMCw1MjQ0MTIsNTI0MzQ4LDU5MDA0MCw0NTkwMjIsNTI0Mzk2LDUyNDMzMiw1OTAwMDgsNTI0MzAwLDUyNDQyOCw1MjQzNjQsNTkwMDcyLDQ1OTAwOSw1MjQzNzAsNTI0MzA2LDUyNDU3MCw0NTkwMjUsNTI0NDAyLDUyNDMzOCw1OTAwMjAsNDU5MDE3LDUyNDM4Niw1MjQzMjIsNTg5OTg4LDUyNDI5MCw1MjQ0MTgsNTI0MzU0LDU5MDA1Miw0NTkwMTMsNTI0Mzc4LDUyNDMxNCw1ODk5NzIsNDU5MDI5LDUyNDQxMCw1MjQzNDYsNTkwMDM2LDQ1OTAyMSw1MjQzOTQsNTI0MzMwLDU5MDAwNCw1MjQyOTgsNTI0NDI2LDUyNDM2Miw1OTAwNjgsNDU5MDExLDUyNDM3NCw1MjQzMTAsNTI0NTc0LDQ1OTAyNyw1MjQ0MDYsNTI0MzQyLDU5MDAyOCw0NTkwMTksNTI0MzkwLDUyNDMyNiw1ODk5OTYsNTI0Mjk0LDUyNDQyMiw1MjQzNTgsNTkwMDYwLDQ1OTAxNSw1MjQzODIsNTI0MzE4LDU4OTk4MCw0NTkwMzEsNTI0NDE0LDUyNDM1MCw1OTAwNDQsNDU5MDIzLDUyNDM5OCw1MjQzMzQsNTkwMDEyLDUyNDMwMiw1MjQ0MzAsNTI0MzY2LDU5MDA3Niw0NTkwMDgsNTI0MzY5LDUyNDMwNSw1MjQ1NjksNDU5MDI0LDUyNDQwMSw1MjQzMzcsNTkwMDE4LDQ1OTAxNiw1MjQzODUsNTI0MzIxLDU4OTk4Niw1MjQyODksNTI0NDE3LDUyNDM1Myw1OTAwNTAsNDU5MDEyLDUyNDM3Nyw1MjQzMTMsNTg5OTcwLDQ1OTAyOCw1MjQ0MDksNTI0MzQ1LDU5MDAzNCw0NTkwMjAsNTI0MzkzLDUyNDMyOSw1OTAwMDIsNTI0Mjk3LDUyNDQyNSw1MjQzNjEsNTkwMDY2LDQ1OTAxMCw1MjQzNzMsNTI0MzA5LDUyNDU3Myw0NTkwMjYsNTI0NDA1LDUyNDM0MSw1OTAwMjYsNDU5MDE4LDUyNDM4OSw1MjQzMjUsNTg5OTk0LDUyNDI5Myw1MjQ0MjEsNTI0MzU3LDU5MDA1OCw0NTkwMTQsNTI0MzgxLDUyNDMxNyw1ODk5NzgsNDU5MDMwLDUyNDQxMyw1MjQzNDksNTkwMDQyLDQ1OTAyMiw1MjQzOTcsNTI0MzMzLDU5MDAxMCw1MjQzMDEsNTI0NDI5LDUyNDM2NSw1OTAwNzQsNDU5MDA5LDUyNDM3MSw1MjQzMDcsNTI0NTcxLDQ1OTAyNSw1MjQ0MDMsNTI0MzM5LDU5MDAyMiw0NTkwMTcsNTI0Mzg3LDUyNDMyMyw1ODk5OTAsNTI0MjkxLDUyNDQxOSw1MjQzNTUsNTkwMDU0LDQ1OTAxMyw1MjQzNzksNTI0MzE1LDU4OTk3NCw0NTkwMjksNTI0NDExLDUyNDM0Nyw1OTAwMzgsNDU5MDIxLDUyNDM5NSw1MjQzMzEsNTkwMDA2LDUyNDI5OSw1MjQ0MjcsNTI0MzYzLDU5MDA3MCw0NTkwMTEsNTI0Mzc1LDUyNDMxMSw1MjQ1NzUsNDU5MDI3LDUyNDQwNyw1MjQzNDMsNTkwMDMwLDQ1OTAxOSw1MjQzOTEsNTI0MzI3LDU4OTk5OCw1MjQyOTUsNTI0NDIzLDUyNDM1OSw1OTAwNjIsNDU5MDE1LDUyNDM4Myw1MjQzMTksNTg5OTgyLDQ1OTAzMSw1MjQ0MTUsNTI0MzUxLDU5MDA0Niw0NTkwMjMsNTI0Mzk5LDUyNDMzNSw1OTAwMTQsNTI0MzAzLDUyNDQzMSw1MjQzNjcsNTkwMDc4LDQ1OTAwOCw1MjQzNjgsNTI0MzA0LDUyNDU2OCw0NTkwMjQsNTI0NDAwLDUyNDMzNiw1OTAwMTcsNDU5MDE2LDUyNDM4NCw1MjQzMjAsNTg5OTg1LDUyNDI4OCw1MjQ0MTYsNTI0MzUyLDU5MDA0OSw0NTkwMTIsNTI0Mzc2LDUyNDMxMiw1ODk5NjksNDU5MDI4LDUyNDQwOCw1MjQzNDQsNTkwMDMzLDQ1OTAyMCw1MjQzOTIsNTI0MzI4LDU5MDAwMSw1MjQyOTYsNTI0NDI0LDUyNDM2MCw1OTAwNjUsNDU5MDEwLDUyNDM3Miw1MjQzMDgsNTI0NTcyLDQ1OTAyNiw1MjQ0MDQsNTI0MzQwLDU5MDAyNSw0NTkwMTgsNTI0Mzg4LDUyNDMyNCw1ODk5OTMsNTI0MjkyLDUyNDQyMCw1MjQzNTYsNTkwMDU3LDQ1OTAxNCw1MjQzODAsNTI0MzE2LDU4OTk3Nyw0NTkwMzAsNTI0NDEyLDUyNDM0OCw1OTAwNDEsNDU5MDIyLDUyNDM5Niw1MjQzMzIsNTkwMDA5LDUyNDMwMCw1MjQ0MjgsNTI0MzY0LDU5MDA3Myw0NTkwMDksNTI0MzcwLDUyNDMwNiw1MjQ1NzAsNDU5MDI1LDUyNDQwMiw1MjQzMzgsNTkwMDIxLDQ1OTAxNyw1MjQzODYsNTI0MzIyLDU4OTk4OSw1MjQyOTAsNTI0NDE4LDUyNDM1NCw1OTAwNTMsNDU5MDEzLDUyNDM3OCw1MjQzMTQsNTg5OTczLDQ1OTAyOSw1MjQ0MTAsNTI0MzQ2LDU5MDAzNyw0NTkwMjEsNTI0Mzk0LDUyNDMzMCw1OTAwMDUsNTI0Mjk4LDUyNDQyNiw1MjQzNjIsNTkwMDY5LDQ1OTAxMSw1MjQzNzQsNTI0MzEwLDUyNDU3NCw0NTkwMjcsNTI0NDA2LDUyNDM0Miw1OTAwMjksNDU5MDE5LDUyNDM5MCw1MjQzMjYsNTg5OTk3LDUyNDI5NCw1MjQ0MjIsNTI0MzU4LDU5MDA2MSw0NTkwMTUsNTI0MzgyLDUyNDMxOCw1ODk5ODEsNDU5MDMxLDUyNDQxNCw1MjQzNTAsNTkwMDQ1LDQ1OTAyMyw1MjQzOTgsNTI0MzM0LDU5MDAxMyw1MjQzMDIsNTI0NDMwLDUyNDM2Niw1OTAwNzcsNDU5MDA4LDUyNDM2OSw1MjQzMDUsNTI0NTY5LDQ1OTAyNCw1MjQ0MDEsNTI0MzM3LDU5MDAxOSw0NTkwMTYsNTI0Mzg1LDUyNDMyMSw1ODk5ODcsNTI0Mjg5LDUyNDQxNyw1MjQzNTMsNTkwMDUxLDQ1OTAxMiw1MjQzNzcsNTI0MzEzLDU4OTk3MSw0NTkwMjgsNTI0NDA5LDUyNDM0NSw1OTAwMzUsNDU5MDIwLDUyNDM5Myw1MjQzMjksNTkwMDAzLDUyNDI5Nyw1MjQ0MjUsNTI0MzYxLDU5MDA2Nyw0NTkwMTAsNTI0MzczLDUyNDMwOSw1MjQ1NzMsNDU5MDI2LDUyNDQwNSw1MjQzNDEsNTkwMDI3LDQ1OTAxOCw1MjQzODksNTI0MzI1LDU4OTk5NSw1MjQyOTMsNTI0NDIxLDUyNDM1Nyw1OTAwNTksNDU5MDE0LDUyNDM4MSw1MjQzMTcsNTg5OTc5LDQ1OTAzMCw1MjQ0MTMsNTI0MzQ5LDU5MDA0Myw0NTkwMjIsNTI0Mzk3LDUyNDMzMyw1OTAwMTEsNTI0MzAxLDUyNDQyOSw1MjQzNjUsNTkwMDc1LDQ1OTAwOSw1MjQzNzEsNTI0MzA3LDUyNDU3MSw0NTkwMjUsNTI0NDAzLDUyNDMzOSw1OTAwMjMsNDU5MDE3LDUyNDM4Nyw1MjQzMjMsNTg5OTkxLDUyNDI5MSw1MjQ0MTksNTI0MzU1LDU5MDA1NSw0NTkwMTMsNTI0Mzc5LDUyNDMxNSw1ODk5NzUsNDU5MDI5LDUyNDQxMSw1MjQzNDcsNTkwMDM5LDQ1OTAyMSw1MjQzOTUsNTI0MzMxLDU5MDAwNyw1MjQyOTksNTI0NDI3LDUyNDM2Myw1OTAwNzEsNDU5MDExLDUyNDM3NSw1MjQzMTEsNTI0NTc1LDQ1OTAyNyw1MjQ0MDcsNTI0MzQzLDU5MDAzMSw0NTkwMTksNTI0MzkxLDUyNDMyNyw1ODk5OTksNTI0Mjk1LDUyNDQyMyw1MjQzNTksNTkwMDYzLDQ1OTAxNSw1MjQzODMsNTI0MzE5LDU4OTk4Myw0NTkwMzEsNTI0NDE1LDUyNDM1MSw1OTAwNDcsNDU5MDIzLDUyNDM5OSw1MjQzMzUsNTkwMDE1LDUyNDMwMyw1MjQ0MzEsNTI0MzY3LDU5MDA3OV0pLDldLGw9W25ldyBJbnQzMkFycmF5KFszMjc2ODAsMzI3Njk2LDMyNzY4OCwzMjc3MDQsMzI3Njg0LDMyNzcwMCwzMjc2OTIsMzI3NzA4LDMyNzY4MiwzMjc2OTgsMzI3NjkwLDMyNzcwNiwzMjc2ODYsMzI3NzAyLDMyNzY5NCwwLDMyNzY4MSwzMjc2OTcsMzI3Njg5LDMyNzcwNSwzMjc2ODUsMzI3NzAxLDMyNzY5MywzMjc3MDksMzI3NjgzLDMyNzY5OSwzMjc2OTEsMzI3NzA3LDMyNzY4NywzMjc3MDMsMzI3Njk1LDBdKSw1XTtjbGFzcyBGbGF0ZVN0cmVhbSBleHRlbmRzIHIuRGVjb2RlU3RyZWFte2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIodCk7dGhpcy5zdHI9ZTt0aGlzLmRpY3Q9ZS5kaWN0O2NvbnN0IGE9ZS5nZXRCeXRlKCkscj1lLmdldEJ5dGUoKTtpZigtMT09PWF8fC0xPT09cil0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcihgSW52YWxpZCBoZWFkZXIgaW4gZmxhdGUgc3RyZWFtOiAke2F9LCAke3J9YCk7aWYoOCE9KDE1JmEpKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKGBVbmtub3duIGNvbXByZXNzaW9uIG1ldGhvZCBpbiBmbGF0ZSBzdHJlYW06ICR7YX0sICR7cn1gKTtpZigoKGE8PDgpK3IpJTMxIT0wKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKGBCYWQgRkNIRUNLIGluIGZsYXRlIHN0cmVhbTogJHthfSwgJHtyfWApO2lmKDMyJnIpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoYEZESUNUIGJpdCBzZXQgaW4gZmxhdGUgc3RyZWFtOiAke2F9LCAke3J9YCk7dGhpcy5jb2RlU2l6ZT0wO3RoaXMuY29kZUJ1Zj0wfWdldEJpdHMoZSl7Y29uc3QgdD10aGlzLnN0cjtsZXQgYSxyPXRoaXMuY29kZVNpemUsaT10aGlzLmNvZGVCdWY7Zm9yKDtyPGU7KXtpZigtMT09PShhPXQuZ2V0Qnl0ZSgpKSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiQmFkIGVuY29kaW5nIGluIGZsYXRlIHN0cmVhbSIpO2l8PWE8PHI7cis9OH1hPWkmKDE8PGUpLTE7dGhpcy5jb2RlQnVmPWk+PmU7dGhpcy5jb2RlU2l6ZT1yLT1lO3JldHVybiBhfWdldENvZGUoZSl7Y29uc3QgdD10aGlzLnN0cixhPWVbMF0scj1lWzFdO2xldCBpLHM9dGhpcy5jb2RlU2l6ZSxvPXRoaXMuY29kZUJ1Zjtmb3IoO3M8ciYmLTEhPT0oaT10LmdldEJ5dGUoKSk7KXtvfD1pPDxzO3MrPTh9Y29uc3QgYz1hW28mKDE8PHIpLTFdLGw9Yz4+MTYsaD02NTUzNSZjO2lmKGw8MXx8czxsKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJCYWQgZW5jb2RpbmcgaW4gZmxhdGUgc3RyZWFtIik7dGhpcy5jb2RlQnVmPW8+Pmw7dGhpcy5jb2RlU2l6ZT1zLWw7cmV0dXJuIGh9Z2VuZXJhdGVIdWZmbWFuVGFibGUoZSl7Y29uc3QgdD1lLmxlbmd0aDtsZXQgYSxyPTA7Zm9yKGE9MDthPHQ7KythKWVbYV0+ciYmKHI9ZVthXSk7Y29uc3Qgbj0xPDxyLGk9bmV3IEludDMyQXJyYXkobik7Zm9yKGxldCBzPTEsbz0wLGM9MjtzPD1yOysrcyxvPDw9MSxjPDw9MSlmb3IobGV0IHI9MDtyPHQ7KytyKWlmKGVbcl09PT1zKXtsZXQgZT0wLHQ9bztmb3IoYT0wO2E8czsrK2Epe2U9ZTw8MXwxJnQ7dD4+PTF9Zm9yKGE9ZTthPG47YSs9YylpW2FdPXM8PDE2fHI7KytvfXJldHVybltpLHJdfXJlYWRCbG9jaygpe2xldCBlLHQ7Y29uc3QgYT10aGlzLnN0cjtsZXQgcixoLHU9dGhpcy5nZXRCaXRzKDMpOzEmdSYmKHRoaXMuZW9mPSEwKTt1Pj49MTtpZigwPT09dSl7bGV0IHQ7aWYoLTE9PT0odD1hLmdldEJ5dGUoKSkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIkJhZCBibG9jayBoZWFkZXIgaW4gZmxhdGUgc3RyZWFtIik7bGV0IHI9dDtpZigtMT09PSh0PWEuZ2V0Qnl0ZSgpKSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiQmFkIGJsb2NrIGhlYWRlciBpbiBmbGF0ZSBzdHJlYW0iKTtyfD10PDw4O2lmKC0xPT09KHQ9YS5nZXRCeXRlKCkpKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJCYWQgYmxvY2sgaGVhZGVyIGluIGZsYXRlIHN0cmVhbSIpO2xldCBpPXQ7aWYoLTE9PT0odD1hLmdldEJ5dGUoKSkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIkJhZCBibG9jayBoZWFkZXIgaW4gZmxhdGUgc3RyZWFtIik7aXw9dDw8ODtpZihpIT09KDY1NTM1Jn5yKSYmKDAhPT1yfHwwIT09aSkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIkJhZCB1bmNvbXByZXNzZWQgYmxvY2sgbGVuZ3RoIGluIGZsYXRlIHN0cmVhbSIpO3RoaXMuY29kZUJ1Zj0wO3RoaXMuY29kZVNpemU9MDtjb25zdCBzPXRoaXMuYnVmZmVyTGVuZ3RoLG89cytyO2U9dGhpcy5lbnN1cmVCdWZmZXIobyk7dGhpcy5idWZmZXJMZW5ndGg9bztpZigwPT09ciktMT09PWEucGVla0J5dGUoKSYmKHRoaXMuZW9mPSEwKTtlbHNle2NvbnN0IHQ9YS5nZXRCeXRlcyhyKTtlLnNldCh0LHMpO3QubGVuZ3RoPHImJih0aGlzLmVvZj0hMCl9cmV0dXJufWlmKDE9PT11KXtyPWM7aD1sfWVsc2V7aWYoMiE9PXUpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIlVua25vd24gYmxvY2sgdHlwZSBpbiBmbGF0ZSBzdHJlYW0iKTt7Y29uc3QgZT10aGlzLmdldEJpdHMoNSkrMjU3LGE9dGhpcy5nZXRCaXRzKDUpKzEsbj10aGlzLmdldEJpdHMoNCkrNCxzPW5ldyBVaW50OEFycmF5KGkubGVuZ3RoKTtsZXQgbztmb3Iobz0wO288bjsrK28pc1tpW29dXT10aGlzLmdldEJpdHMoMyk7Y29uc3QgYz10aGlzLmdlbmVyYXRlSHVmZm1hblRhYmxlKHMpO3Q9MDtvPTA7Y29uc3QgbD1lK2EsdT1uZXcgVWludDhBcnJheShsKTtsZXQgZCxmLGc7Zm9yKDtvPGw7KXtjb25zdCBlPXRoaXMuZ2V0Q29kZShjKTtpZigxNj09PWUpe2Q9MjtmPTM7Zz10fWVsc2UgaWYoMTc9PT1lKXtkPTM7Zj0zO2c9dD0wfWVsc2V7aWYoMTghPT1lKXt1W28rK109dD1lO2NvbnRpbnVlfWQ9NztmPTExO2c9dD0wfWxldCBhPXRoaXMuZ2V0Qml0cyhkKStmO2Zvcig7YS0tID4wOyl1W28rK109Z31yPXRoaXMuZ2VuZXJhdGVIdWZmbWFuVGFibGUodS5zdWJhcnJheSgwLGUpKTtoPXRoaXMuZ2VuZXJhdGVIdWZmbWFuVGFibGUodS5zdWJhcnJheShlLGwpKX19ZT10aGlzLmJ1ZmZlcjtsZXQgZD1lP2UubGVuZ3RoOjAsZj10aGlzLmJ1ZmZlckxlbmd0aDtmb3IoOzspe2xldCBhPXRoaXMuZ2V0Q29kZShyKTtpZihhPDI1Nil7aWYoZisxPj1kKXtlPXRoaXMuZW5zdXJlQnVmZmVyKGYrMSk7ZD1lLmxlbmd0aH1lW2YrK109YTtjb250aW51ZX1pZigyNTY9PT1hKXt0aGlzLmJ1ZmZlckxlbmd0aD1mO3JldHVybn1hLT0yNTc7YT1zW2FdO2xldCBuPWE+PjE2O24+MCYmKG49dGhpcy5nZXRCaXRzKG4pKTt0PSg2NTUzNSZhKStuO2E9dGhpcy5nZXRDb2RlKGgpO2E9b1thXTtuPWE+PjE2O24+MCYmKG49dGhpcy5nZXRCaXRzKG4pKTtjb25zdCBpPSg2NTUzNSZhKStuO2lmKGYrdD49ZCl7ZT10aGlzLmVuc3VyZUJ1ZmZlcihmK3QpO2Q9ZS5sZW5ndGh9Zm9yKGxldCBhPTA7YTx0OysrYSwrK2YpZVtmXT1lW2YtaV19fX10LkZsYXRlU3RyZWFtPUZsYXRlU3RyZWFtfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuSmJpZzJTdHJlYW09dm9pZCAwO3ZhciByPWEoNSksbj1hKDE4KSxpPWEoNCkscz1hKDI0KSxvPWEoMik7Y2xhc3MgSmJpZzJTdHJlYW0gZXh0ZW5kcyBuLkRlY29kZVN0cmVhbXtjb25zdHJ1Y3RvcihlLHQsYSl7c3VwZXIodCk7dGhpcy5zdHJlYW09ZTt0aGlzLmRpY3Q9ZS5kaWN0O3RoaXMubWF5YmVMZW5ndGg9dDt0aGlzLnBhcmFtcz1hfWdldCBieXRlcygpe3JldHVybigwLG8uc2hhZG93KSh0aGlzLCJieXRlcyIsdGhpcy5zdHJlYW0uZ2V0Qnl0ZXModGhpcy5tYXliZUxlbmd0aCkpfWVuc3VyZUJ1ZmZlcihlKXt9cmVhZEJsb2NrKCl7aWYodGhpcy5lb2YpcmV0dXJuO2NvbnN0IGU9bmV3IHMuSmJpZzJJbWFnZSx0PVtdO2lmKHRoaXMucGFyYW1zIGluc3RhbmNlb2YgaS5EaWN0KXtjb25zdCBlPXRoaXMucGFyYW1zLmdldCgiSkJJRzJHbG9iYWxzIik7aWYoZSBpbnN0YW5jZW9mIHIuQmFzZVN0cmVhbSl7Y29uc3QgYT1lLmdldEJ5dGVzKCk7dC5wdXNoKHtkYXRhOmEsc3RhcnQ6MCxlbmQ6YS5sZW5ndGh9KX19dC5wdXNoKHtkYXRhOnRoaXMuYnl0ZXMsc3RhcnQ6MCxlbmQ6dGhpcy5ieXRlcy5sZW5ndGh9KTtjb25zdCBhPWUucGFyc2VDaHVua3ModCksbj1hLmxlbmd0aDtmb3IobGV0IGU9MDtlPG47ZSsrKWFbZV1ePTI1NTt0aGlzLmJ1ZmZlcj1hO3RoaXMuYnVmZmVyTGVuZ3RoPW47dGhpcy5lb2Y9ITB9fXQuSmJpZzJTdHJlYW09SmJpZzJTdHJlYW19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5KYmlnMkltYWdlPXZvaWQgMDt2YXIgcj1hKDIpLG49YSgzKSxpPWEoMjUpLHM9YSgyMSk7Y2xhc3MgSmJpZzJFcnJvciBleHRlbmRzIHIuQmFzZUV4Y2VwdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihgSkJJRzIgZXJyb3I6ICR7ZX1gLCJKYmlnMkVycm9yIil9fWNsYXNzIENvbnRleHRDYWNoZXtnZXRDb250ZXh0cyhlKXtyZXR1cm4gZSBpbiB0aGlzP3RoaXNbZV06dGhpc1tlXT1uZXcgSW50OEFycmF5KDY1NTM2KX19Y2xhc3MgRGVjb2RpbmdDb250ZXh0e2NvbnN0cnVjdG9yKGUsdCxhKXt0aGlzLmRhdGE9ZTt0aGlzLnN0YXJ0PXQ7dGhpcy5lbmQ9YX1nZXQgZGVjb2Rlcigpe2NvbnN0IGU9bmV3IGkuQXJpdGhtZXRpY0RlY29kZXIodGhpcy5kYXRhLHRoaXMuc3RhcnQsdGhpcy5lbmQpO3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJkZWNvZGVyIixlKX1nZXQgY29udGV4dENhY2hlKCl7Y29uc3QgZT1uZXcgQ29udGV4dENhY2hlO3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJjb250ZXh0Q2FjaGUiLGUpfX1jb25zdCBvPTIqKjMxLTEsYz0tKDIqKjMxKTtmdW5jdGlvbiBkZWNvZGVJbnRlZ2VyKGUsdCxhKXtjb25zdCByPWUuZ2V0Q29udGV4dHModCk7bGV0IG49MTtmdW5jdGlvbiByZWFkQml0cyhlKXtsZXQgdD0wO2ZvcihsZXQgaT0wO2k8ZTtpKyspe2NvbnN0IGU9YS5yZWFkQml0KHIsbik7bj1uPDI1Nj9uPDwxfGU6NTExJihuPDwxfGUpfDI1Njt0PXQ8PDF8ZX1yZXR1cm4gdD4+PjB9Y29uc3QgaT1yZWFkQml0cygxKSxzPXJlYWRCaXRzKDEpP3JlYWRCaXRzKDEpP3JlYWRCaXRzKDEpP3JlYWRCaXRzKDEpP3JlYWRCaXRzKDEpP3JlYWRCaXRzKDMyKSs0NDM2OnJlYWRCaXRzKDEyKSszNDA6cmVhZEJpdHMoOCkrODQ6cmVhZEJpdHMoNikrMjA6cmVhZEJpdHMoNCkrNDpyZWFkQml0cygyKTtsZXQgbDswPT09aT9sPXM6cz4wJiYobD0tcyk7cmV0dXJuIGw+PWMmJmw8PW8/bDpudWxsfWZ1bmN0aW9uIGRlY29kZUlBSUQoZSx0LGEpe2NvbnN0IHI9ZS5nZXRDb250ZXh0cygiSUFJRCIpO2xldCBuPTE7Zm9yKGxldCBlPTA7ZTxhO2UrKyl7bj1uPDwxfHQucmVhZEJpdChyLG4pfXJldHVybiBhPDMxP24mKDE8PGEpLTE6MjE0NzQ4MzY0NyZufWNvbnN0IGw9WyJTeW1ib2xEaWN0aW9uYXJ5IixudWxsLG51bGwsbnVsbCwiSW50ZXJtZWRpYXRlVGV4dFJlZ2lvbiIsbnVsbCwiSW1tZWRpYXRlVGV4dFJlZ2lvbiIsIkltbWVkaWF0ZUxvc3NsZXNzVGV4dFJlZ2lvbiIsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCJQYXR0ZXJuRGljdGlvbmFyeSIsbnVsbCxudWxsLG51bGwsIkludGVybWVkaWF0ZUhhbGZ0b25lUmVnaW9uIixudWxsLCJJbW1lZGlhdGVIYWxmdG9uZVJlZ2lvbiIsIkltbWVkaWF0ZUxvc3NsZXNzSGFsZnRvbmVSZWdpb24iLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCJJbnRlcm1lZGlhdGVHZW5lcmljUmVnaW9uIixudWxsLCJJbW1lZGlhdGVHZW5lcmljUmVnaW9uIiwiSW1tZWRpYXRlTG9zc2xlc3NHZW5lcmljUmVnaW9uIiwiSW50ZXJtZWRpYXRlR2VuZXJpY1JlZmluZW1lbnRSZWdpb24iLG51bGwsIkltbWVkaWF0ZUdlbmVyaWNSZWZpbmVtZW50UmVnaW9uIiwiSW1tZWRpYXRlTG9zc2xlc3NHZW5lcmljUmVmaW5lbWVudFJlZ2lvbiIsbnVsbCxudWxsLG51bGwsbnVsbCwiUGFnZUluZm9ybWF0aW9uIiwiRW5kT2ZQYWdlIiwiRW5kT2ZTdHJpcGUiLCJFbmRPZkZpbGUiLCJQcm9maWxlcyIsIlRhYmxlcyIsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLG51bGwsbnVsbCxudWxsLCJFeHRlbnNpb24iXSxoPVtbe3g6LTEseTotMn0se3g6MCx5Oi0yfSx7eDoxLHk6LTJ9LHt4Oi0yLHk6LTF9LHt4Oi0xLHk6LTF9LHt4OjAseTotMX0se3g6MSx5Oi0xfSx7eDoyLHk6LTF9LHt4Oi00LHk6MH0se3g6LTMseTowfSx7eDotMix5OjB9LHt4Oi0xLHk6MH1dLFt7eDotMSx5Oi0yfSx7eDowLHk6LTJ9LHt4OjEseTotMn0se3g6Mix5Oi0yfSx7eDotMix5Oi0xfSx7eDotMSx5Oi0xfSx7eDowLHk6LTF9LHt4OjEseTotMX0se3g6Mix5Oi0xfSx7eDotMyx5OjB9LHt4Oi0yLHk6MH0se3g6LTEseTowfV0sW3t4Oi0xLHk6LTJ9LHt4OjAseTotMn0se3g6MSx5Oi0yfSx7eDotMix5Oi0xfSx7eDotMSx5Oi0xfSx7eDowLHk6LTF9LHt4OjEseTotMX0se3g6LTIseTowfSx7eDotMSx5OjB9XSxbe3g6LTMseTotMX0se3g6LTIseTotMX0se3g6LTEseTotMX0se3g6MCx5Oi0xfSx7eDoxLHk6LTF9LHt4Oi00LHk6MH0se3g6LTMseTowfSx7eDotMix5OjB9LHt4Oi0xLHk6MH1dXSx1PVt7Y29kaW5nOlt7eDowLHk6LTF9LHt4OjEseTotMX0se3g6LTEseTowfV0scmVmZXJlbmNlOlt7eDowLHk6LTF9LHt4OjEseTotMX0se3g6LTEseTowfSx7eDowLHk6MH0se3g6MSx5OjB9LHt4Oi0xLHk6MX0se3g6MCx5OjF9LHt4OjEseToxfV19LHtjb2Rpbmc6W3t4Oi0xLHk6LTF9LHt4OjAseTotMX0se3g6MSx5Oi0xfSx7eDotMSx5OjB9XSxyZWZlcmVuY2U6W3t4OjAseTotMX0se3g6LTEseTowfSx7eDowLHk6MH0se3g6MSx5OjB9LHt4OjAseToxfSx7eDoxLHk6MX1dfV0sZD1bMzk3MTcsMTk0MSwyMjksNDA1XSxmPVszMiw4XTtmdW5jdGlvbiBkZWNvZGVCaXRtYXAoZSx0LGEscixuLGkscyxvKXtpZihlKXtyZXR1cm4gZGVjb2RlTU1SQml0bWFwKG5ldyBSZWFkZXIoby5kYXRhLG8uc3RhcnQsby5lbmQpLHQsYSwhMSl9aWYoMD09PXImJiFpJiYhbiYmND09PXMubGVuZ3RoJiYzPT09c1swXS54JiYtMT09PXNbMF0ueSYmLTM9PT1zWzFdLngmJi0xPT09c1sxXS55JiYyPT09c1syXS54JiYtMj09PXNbMl0ueSYmLTI9PT1zWzNdLngmJi0yPT09c1szXS55KXJldHVybiBmdW5jdGlvbiBkZWNvZGVCaXRtYXBUZW1wbGF0ZTAoZSx0LGEpe2NvbnN0IHI9YS5kZWNvZGVyLG49YS5jb250ZXh0Q2FjaGUuZ2V0Q29udGV4dHMoIkdCIiksaT1bXTtsZXQgcyxvLGMsbCxoLHUsZDtmb3Iobz0wO288dDtvKyspe2g9aVtvXT1uZXcgVWludDhBcnJheShlKTt1PW88MT9oOmlbby0xXTtkPW88Mj9oOmlbby0yXTtzPWRbMF08PDEzfGRbMV08PDEyfGRbMl08PDExfHVbMF08PDd8dVsxXTw8Nnx1WzJdPDw1fHVbM108PDQ7Zm9yKGM9MDtjPGU7YysrKXtoW2NdPWw9ci5yZWFkQml0KG4scyk7cz0oMzE3MzUmcyk8PDF8KGMrMzxlP2RbYyszXTw8MTE6MCl8KGMrNDxlP3VbYys0XTw8NDowKXxsfX1yZXR1cm4gaX0odCxhLG8pO2NvbnN0IGM9ISFpLGw9aFtyXS5jb25jYXQocyk7bC5zb3J0KChmdW5jdGlvbihlLHQpe3JldHVybiBlLnktdC55fHxlLngtdC54fSkpO2NvbnN0IHU9bC5sZW5ndGgsZj1uZXcgSW50OEFycmF5KHUpLGc9bmV3IEludDhBcnJheSh1KSxwPVtdO2xldCBtLGIseT0wLHc9MCxTPTAseD0wO2ZvcihiPTA7Yjx1O2IrKyl7ZltiXT1sW2JdLng7Z1tiXT1sW2JdLnk7dz1NYXRoLm1pbih3LGxbYl0ueCk7Uz1NYXRoLm1heChTLGxbYl0ueCk7eD1NYXRoLm1pbih4LGxbYl0ueSk7Yjx1LTEmJmxbYl0ueT09PWxbYisxXS55JiZsW2JdLng9PT1sW2IrMV0ueC0xP3l8PTE8PHUtMS1iOnAucHVzaChiKX1jb25zdCBDPXAubGVuZ3RoLGs9bmV3IEludDhBcnJheShDKSx2PW5ldyBJbnQ4QXJyYXkoQyksRj1uZXcgVWludDE2QXJyYXkoQyk7Zm9yKG09MDttPEM7bSsrKXtiPXBbbV07a1ttXT1sW2JdLng7dlttXT1sW2JdLnk7RlttXT0xPDx1LTEtYn1jb25zdCBPPS13LFQ9LXgsTT10LVMsRD1kW3JdO2xldCBFPW5ldyBVaW50OEFycmF5KHQpO2NvbnN0IE49W10sUj1vLmRlY29kZXIsTD1vLmNvbnRleHRDYWNoZS5nZXRDb250ZXh0cygiR0IiKTtsZXQgJCxfLGosVSxYLEg9MCxxPTA7Zm9yKGxldCBlPTA7ZTxhO2UrKyl7aWYobil7SF49Ui5yZWFkQml0KEwsRCk7aWYoSCl7Ti5wdXNoKEUpO2NvbnRpbnVlfX1FPW5ldyBVaW50OEFycmF5KEUpO04ucHVzaChFKTtmb3IoJD0wOyQ8dDskKyspe2lmKGMmJmlbZV1bJF0pe0VbJF09MDtjb250aW51ZX1pZigkPj1PJiYkPE0mJmU+PVQpe3E9cTw8MSZ5O2ZvcihiPTA7YjxDO2IrKyl7Xz1lK3ZbYl07aj0kK2tbYl07VT1OW19dW2pdO2lmKFUpe1U9RltiXTtxfD1VfX19ZWxzZXtxPTA7WD11LTE7Zm9yKGI9MDtiPHU7YisrLFgtLSl7aj0kK2ZbYl07aWYoaj49MCYmajx0KXtfPWUrZ1tiXTtpZihfPj0wKXtVPU5bX11bal07VSYmKHF8PVU8PFgpfX19fWNvbnN0IGE9Ui5yZWFkQml0KEwscSk7RVskXT1hfX1yZXR1cm4gTn1mdW5jdGlvbiBkZWNvZGVSZWZpbmVtZW50KGUsdCxhLHIsbixpLHMsbyxjKXtsZXQgbD11W2FdLmNvZGluZzswPT09YSYmKGw9bC5jb25jYXQoW29bMF1dKSk7Y29uc3QgaD1sLmxlbmd0aCxkPW5ldyBJbnQzMkFycmF5KGgpLGc9bmV3IEludDMyQXJyYXkoaCk7bGV0IHA7Zm9yKHA9MDtwPGg7cCsrKXtkW3BdPWxbcF0ueDtnW3BdPWxbcF0ueX1sZXQgbT11W2FdLnJlZmVyZW5jZTswPT09YSYmKG09bS5jb25jYXQoW29bMV1dKSk7Y29uc3QgYj1tLmxlbmd0aCx5PW5ldyBJbnQzMkFycmF5KGIpLHc9bmV3IEludDMyQXJyYXkoYik7Zm9yKHA9MDtwPGI7cCsrKXt5W3BdPW1bcF0ueDt3W3BdPW1bcF0ueX1jb25zdCBTPXJbMF0ubGVuZ3RoLHg9ci5sZW5ndGgsQz1mW2FdLGs9W10sdj1jLmRlY29kZXIsRj1jLmNvbnRleHRDYWNoZS5nZXRDb250ZXh0cygiR1IiKTtsZXQgTz0wO2ZvcihsZXQgYT0wO2E8dDthKyspe2lmKHMpe09ePXYucmVhZEJpdChGLEMpO2lmKE8pdGhyb3cgbmV3IEpiaWcyRXJyb3IoInByZWRpY3Rpb24gaXMgbm90IHN1cHBvcnRlZCIpfWNvbnN0IHQ9bmV3IFVpbnQ4QXJyYXkoZSk7ay5wdXNoKHQpO2ZvcihsZXQgcz0wO3M8ZTtzKyspe2xldCBvLGMsbD0wO2ZvcihwPTA7cDxoO3ArKyl7bz1hK2dbcF07Yz1zK2RbcF07bzwwfHxjPDB8fGM+PWU/bDw8PTE6bD1sPDwxfGtbb11bY119Zm9yKHA9MDtwPGI7cCsrKXtvPWErd1twXS1pO2M9cyt5W3BdLW47bzwwfHxvPj14fHxjPDB8fGM+PVM/bDw8PTE6bD1sPDwxfHJbb11bY119Y29uc3QgdT12LnJlYWRCaXQoRixsKTt0W3NdPXV9fXJldHVybiBrfWZ1bmN0aW9uIGRlY29kZVRleHRSZWdpb24oZSx0LGEscixuLGkscyxvLGMsbCxoLHUsZCxmLGcscCxtLGIseSl7aWYoZSYmdCl0aHJvdyBuZXcgSmJpZzJFcnJvcigicmVmaW5lbWVudCB3aXRoIEh1ZmZtYW4gaXMgbm90IHN1cHBvcnRlZCIpO2NvbnN0IHc9W107bGV0IFMseDtmb3IoUz0wO1M8cjtTKyspe3g9bmV3IFVpbnQ4QXJyYXkoYSk7aWYobilmb3IobGV0IGU9MDtlPGE7ZSsrKXhbZV09bjt3LnB1c2goeCl9Y29uc3QgQz1tLmRlY29kZXIsaz1tLmNvbnRleHRDYWNoZTtsZXQgdj1lPy1mLnRhYmxlRGVsdGFULmRlY29kZSh5KTotZGVjb2RlSW50ZWdlcihrLCJJQURUIixDKSxGPTA7Uz0wO2Zvcig7UzxpOyl7dis9ZT9mLnRhYmxlRGVsdGFULmRlY29kZSh5KTpkZWNvZGVJbnRlZ2VyKGssIklBRFQiLEMpO0YrPWU/Zi50YWJsZUZpcnN0Uy5kZWNvZGUoeSk6ZGVjb2RlSW50ZWdlcihrLCJJQUZTIixDKTtsZXQgcj1GO2Zvcig7Oyl7bGV0IG49MDtzPjEmJihuPWU/eS5yZWFkQml0cyhiKTpkZWNvZGVJbnRlZ2VyKGssIklBSVQiLEMpKTtjb25zdCBpPXMqdituLEY9ZT9mLnN5bWJvbElEVGFibGUuZGVjb2RlKHkpOmRlY29kZUlBSUQoayxDLGMpLE89dCYmKGU/eS5yZWFkQml0KCk6ZGVjb2RlSW50ZWdlcihrLCJJQVJJIixDKSk7bGV0IFQ9b1tGXSxNPVRbMF0ubGVuZ3RoLEQ9VC5sZW5ndGg7aWYoTyl7Y29uc3QgZT1kZWNvZGVJbnRlZ2VyKGssIklBUkRXIixDKSx0PWRlY29kZUludGVnZXIoaywiSUFSREgiLEMpO00rPWU7RCs9dDtUPWRlY29kZVJlZmluZW1lbnQoTSxELGcsVCwoZT4+MSkrZGVjb2RlSW50ZWdlcihrLCJJQVJEWCIsQyksKHQ+PjEpK2RlY29kZUludGVnZXIoaywiSUFSRFkiLEMpLCExLHAsbSl9Y29uc3QgRT1pLSgxJnU/MDpELTEpLE49ci0oMiZ1P00tMTowKTtsZXQgUixMLCQ7aWYobCl7Zm9yKFI9MDtSPEQ7UisrKXt4PXdbTitSXTtpZigheCljb250aW51ZTskPVRbUl07Y29uc3QgZT1NYXRoLm1pbihhLUUsTSk7c3dpdGNoKGQpe2Nhc2UgMDpmb3IoTD0wO0w8ZTtMKyspeFtFK0xdfD0kW0xdO2JyZWFrO2Nhc2UgMjpmb3IoTD0wO0w8ZTtMKyspeFtFK0xdXj0kW0xdO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEpiaWcyRXJyb3IoYG9wZXJhdG9yICR7ZH0gaXMgbm90IHN1cHBvcnRlZGApfX1yKz1ELTF9ZWxzZXtmb3IoTD0wO0w8RDtMKyspe3g9d1tFK0xdO2lmKHgpeyQ9VFtMXTtzd2l0Y2goZCl7Y2FzZSAwOmZvcihSPTA7UjxNO1IrKyl4W04rUl18PSRbUl07YnJlYWs7Y2FzZSAyOmZvcihSPTA7UjxNO1IrKyl4W04rUl1ePSRbUl07YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgSmJpZzJFcnJvcihgb3BlcmF0b3IgJHtkfSBpcyBub3Qgc3VwcG9ydGVkYCl9fX1yKz1NLTF9UysrO2NvbnN0IF89ZT9mLnRhYmxlRGVsdGFTLmRlY29kZSh5KTpkZWNvZGVJbnRlZ2VyKGssIklBRFMiLEMpO2lmKG51bGw9PT1fKWJyZWFrO3IrPV8raH19cmV0dXJuIHd9ZnVuY3Rpb24gcmVhZFNlZ21lbnRIZWFkZXIoZSx0KXtjb25zdCBhPXt9O2EubnVtYmVyPSgwLG4ucmVhZFVpbnQzMikoZSx0KTtjb25zdCByPWVbdCs0XSxpPTYzJnI7aWYoIWxbaV0pdGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgc2VnbWVudCB0eXBlOiAiK2kpO2EudHlwZT1pO2EudHlwZU5hbWU9bFtpXTthLmRlZmVycmVkTm9uUmV0YWluPSEhKDEyOCZyKTtjb25zdCBzPSEhKDY0JnIpLG89ZVt0KzVdO2xldCBjPW8+PjUmNztjb25zdCBoPVszMSZvXTtsZXQgdT10KzY7aWYoNz09PW8pe2M9NTM2ODcwOTExJigwLG4ucmVhZFVpbnQzMikoZSx1LTEpO3UrPTM7bGV0IHQ9Yys3Pj4zO2hbMF09ZVt1KytdO2Zvcig7LS10PjA7KWgucHVzaChlW3UrK10pfWVsc2UgaWYoNT09PW98fDY9PT1vKXRocm93IG5ldyBKYmlnMkVycm9yKCJpbnZhbGlkIHJlZmVycmVkLXRvIGZsYWdzIik7YS5yZXRhaW5CaXRzPWg7bGV0IGQ9NDthLm51bWJlcjw9MjU2P2Q9MTphLm51bWJlcjw9NjU1MzYmJihkPTIpO2NvbnN0IGY9W107bGV0IHAsbTtmb3IocD0wO3A8YztwKyspe2xldCB0O3Q9MT09PWQ/ZVt1XToyPT09ZD8oMCxuLnJlYWRVaW50MTYpKGUsdSk6KDAsbi5yZWFkVWludDMyKShlLHUpO2YucHVzaCh0KTt1Kz1kfWEucmVmZXJyZWRUbz1mO2lmKHMpe2EucGFnZUFzc29jaWF0aW9uPSgwLG4ucmVhZFVpbnQzMikoZSx1KTt1Kz00fWVsc2UgYS5wYWdlQXNzb2NpYXRpb249ZVt1KytdO2EubGVuZ3RoPSgwLG4ucmVhZFVpbnQzMikoZSx1KTt1Kz00O2lmKDQyOTQ5NjcyOTU9PT1hLmxlbmd0aCl7aWYoMzghPT1pKXRocm93IG5ldyBKYmlnMkVycm9yKCJpbnZhbGlkIHVua25vd24gc2VnbWVudCBsZW5ndGgiKTt7Y29uc3QgdD1yZWFkUmVnaW9uU2VnbWVudEluZm9ybWF0aW9uKGUsdSkscj0hISgxJmVbdStnXSksbj02LGk9bmV3IFVpbnQ4QXJyYXkobik7aWYoIXIpe2lbMF09MjU1O2lbMV09MTcyfWlbMl09dC5oZWlnaHQ+Pj4yNCYyNTU7aVszXT10LmhlaWdodD4+MTYmMjU1O2lbNF09dC5oZWlnaHQ+PjgmMjU1O2lbNV09MjU1JnQuaGVpZ2h0O2ZvcihwPXUsbT1lLmxlbmd0aDtwPG07cCsrKXtsZXQgdD0wO2Zvcig7dDxuJiZpW3RdPT09ZVtwK3RdOyl0Kys7aWYodD09PW4pe2EubGVuZ3RoPXArbjticmVha319aWYoNDI5NDk2NzI5NT09PWEubGVuZ3RoKXRocm93IG5ldyBKYmlnMkVycm9yKCJzZWdtZW50IGVuZCB3YXMgbm90IGZvdW5kIil9fWEuaGVhZGVyRW5kPXU7cmV0dXJuIGF9ZnVuY3Rpb24gcmVhZFNlZ21lbnRzKGUsdCxhLHIpe2NvbnN0IG49W107bGV0IGk9YTtmb3IoO2k8cjspe2NvbnN0IGE9cmVhZFNlZ21lbnRIZWFkZXIodCxpKTtpPWEuaGVhZGVyRW5kO2NvbnN0IHI9e2hlYWRlcjphLGRhdGE6dH07aWYoIWUucmFuZG9tQWNjZXNzKXtyLnN0YXJ0PWk7aSs9YS5sZW5ndGg7ci5lbmQ9aX1uLnB1c2gocik7aWYoNTE9PT1hLnR5cGUpYnJlYWt9aWYoZS5yYW5kb21BY2Nlc3MpZm9yKGxldCBlPTAsdD1uLmxlbmd0aDtlPHQ7ZSsrKXtuW2VdLnN0YXJ0PWk7aSs9bltlXS5oZWFkZXIubGVuZ3RoO25bZV0uZW5kPWl9cmV0dXJuIG59ZnVuY3Rpb24gcmVhZFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbihlLHQpe3JldHVybnt3aWR0aDooMCxuLnJlYWRVaW50MzIpKGUsdCksaGVpZ2h0OigwLG4ucmVhZFVpbnQzMikoZSx0KzQpLHg6KDAsbi5yZWFkVWludDMyKShlLHQrOCkseTooMCxuLnJlYWRVaW50MzIpKGUsdCsxMiksY29tYmluYXRpb25PcGVyYXRvcjo3JmVbdCsxNl19fWNvbnN0IGc9MTc7ZnVuY3Rpb24gcHJvY2Vzc1NlZ21lbnQoZSx0KXtjb25zdCBhPWUuaGVhZGVyLHI9ZS5kYXRhLGk9ZS5lbmQ7bGV0IHMsbyxjLGwsaD1lLnN0YXJ0O3N3aXRjaChhLnR5cGUpe2Nhc2UgMDpjb25zdCBlPXt9LHQ9KDAsbi5yZWFkVWludDE2KShyLGgpO2UuaHVmZm1hbj0hISgxJnQpO2UucmVmaW5lbWVudD0hISgyJnQpO2UuaHVmZm1hbkRIU2VsZWN0b3I9dD4+MiYzO2UuaHVmZm1hbkRXU2VsZWN0b3I9dD4+NCYzO2UuYml0bWFwU2l6ZVNlbGVjdG9yPXQ+PjYmMTtlLmFnZ3JlZ2F0aW9uSW5zdGFuY2VzU2VsZWN0b3I9dD4+NyYxO2UuYml0bWFwQ29kaW5nQ29udGV4dFVzZWQ9ISEoMjU2JnQpO2UuYml0bWFwQ29kaW5nQ29udGV4dFJldGFpbmVkPSEhKDUxMiZ0KTtlLnRlbXBsYXRlPXQ+PjEwJjM7ZS5yZWZpbmVtZW50VGVtcGxhdGU9dD4+MTImMTtoKz0yO2lmKCFlLmh1ZmZtYW4pe2w9MD09PWUudGVtcGxhdGU/NDoxO289W107Zm9yKGM9MDtjPGw7YysrKXtvLnB1c2goe3g6KDAsbi5yZWFkSW50OCkocixoKSx5OigwLG4ucmVhZEludDgpKHIsaCsxKX0pO2grPTJ9ZS5hdD1vfWlmKGUucmVmaW5lbWVudCYmIWUucmVmaW5lbWVudFRlbXBsYXRlKXtvPVtdO2ZvcihjPTA7YzwyO2MrKyl7by5wdXNoKHt4OigwLG4ucmVhZEludDgpKHIsaCkseTooMCxuLnJlYWRJbnQ4KShyLGgrMSl9KTtoKz0yfWUucmVmaW5lbWVudEF0PW99ZS5udW1iZXJPZkV4cG9ydGVkU3ltYm9scz0oMCxuLnJlYWRVaW50MzIpKHIsaCk7aCs9NDtlLm51bWJlck9mTmV3U3ltYm9scz0oMCxuLnJlYWRVaW50MzIpKHIsaCk7aCs9NDtzPVtlLGEubnVtYmVyLGEucmVmZXJyZWRUbyxyLGgsaV07YnJlYWs7Y2FzZSA2OmNhc2UgNzpjb25zdCB1PXt9O3UuaW5mbz1yZWFkUmVnaW9uU2VnbWVudEluZm9ybWF0aW9uKHIsaCk7aCs9Zztjb25zdCBkPSgwLG4ucmVhZFVpbnQxNikocixoKTtoKz0yO3UuaHVmZm1hbj0hISgxJmQpO3UucmVmaW5lbWVudD0hISgyJmQpO3UubG9nU3RyaXBTaXplPWQ+PjImMzt1LnN0cmlwU2l6ZT0xPDx1LmxvZ1N0cmlwU2l6ZTt1LnJlZmVyZW5jZUNvcm5lcj1kPj40JjM7dS50cmFuc3Bvc2VkPSEhKDY0JmQpO3UuY29tYmluYXRpb25PcGVyYXRvcj1kPj43JjM7dS5kZWZhdWx0UGl4ZWxWYWx1ZT1kPj45JjE7dS5kc09mZnNldD1kPDwxNz4+Mjc7dS5yZWZpbmVtZW50VGVtcGxhdGU9ZD4+MTUmMTtpZih1Lmh1ZmZtYW4pe2NvbnN0IGU9KDAsbi5yZWFkVWludDE2KShyLGgpO2grPTI7dS5odWZmbWFuRlM9MyZlO3UuaHVmZm1hbkRTPWU+PjImMzt1Lmh1ZmZtYW5EVD1lPj40JjM7dS5odWZmbWFuUmVmaW5lbWVudERXPWU+PjYmMzt1Lmh1ZmZtYW5SZWZpbmVtZW50REg9ZT4+OCYzO3UuaHVmZm1hblJlZmluZW1lbnREWD1lPj4xMCYzO3UuaHVmZm1hblJlZmluZW1lbnREWT1lPj4xMiYzO3UuaHVmZm1hblJlZmluZW1lbnRTaXplU2VsZWN0b3I9ISEoMTYzODQmZSl9aWYodS5yZWZpbmVtZW50JiYhdS5yZWZpbmVtZW50VGVtcGxhdGUpe289W107Zm9yKGM9MDtjPDI7YysrKXtvLnB1c2goe3g6KDAsbi5yZWFkSW50OCkocixoKSx5OigwLG4ucmVhZEludDgpKHIsaCsxKX0pO2grPTJ9dS5yZWZpbmVtZW50QXQ9b311Lm51bWJlck9mU3ltYm9sSW5zdGFuY2VzPSgwLG4ucmVhZFVpbnQzMikocixoKTtoKz00O3M9W3UsYS5yZWZlcnJlZFRvLHIsaCxpXTticmVhaztjYXNlIDE2OmNvbnN0IGY9e30scD1yW2grK107Zi5tbXI9ISEoMSZwKTtmLnRlbXBsYXRlPXA+PjEmMztmLnBhdHRlcm5XaWR0aD1yW2grK107Zi5wYXR0ZXJuSGVpZ2h0PXJbaCsrXTtmLm1heFBhdHRlcm5JbmRleD0oMCxuLnJlYWRVaW50MzIpKHIsaCk7aCs9NDtzPVtmLGEubnVtYmVyLHIsaCxpXTticmVhaztjYXNlIDIyOmNhc2UgMjM6Y29uc3QgbT17fTttLmluZm89cmVhZFJlZ2lvblNlZ21lbnRJbmZvcm1hdGlvbihyLGgpO2grPWc7Y29uc3QgYj1yW2grK107bS5tbXI9ISEoMSZiKTttLnRlbXBsYXRlPWI+PjEmMzttLmVuYWJsZVNraXA9ISEoOCZiKTttLmNvbWJpbmF0aW9uT3BlcmF0b3I9Yj4+NCY3O20uZGVmYXVsdFBpeGVsVmFsdWU9Yj4+NyYxO20uZ3JpZFdpZHRoPSgwLG4ucmVhZFVpbnQzMikocixoKTtoKz00O20uZ3JpZEhlaWdodD0oMCxuLnJlYWRVaW50MzIpKHIsaCk7aCs9NDttLmdyaWRPZmZzZXRYPTQyOTQ5NjcyOTUmKDAsbi5yZWFkVWludDMyKShyLGgpO2grPTQ7bS5ncmlkT2Zmc2V0WT00Mjk0OTY3Mjk1JigwLG4ucmVhZFVpbnQzMikocixoKTtoKz00O20uZ3JpZFZlY3Rvclg9KDAsbi5yZWFkVWludDE2KShyLGgpO2grPTI7bS5ncmlkVmVjdG9yWT0oMCxuLnJlYWRVaW50MTYpKHIsaCk7aCs9MjtzPVttLGEucmVmZXJyZWRUbyxyLGgsaV07YnJlYWs7Y2FzZSAzODpjYXNlIDM5OmNvbnN0IHk9e307eS5pbmZvPXJlYWRSZWdpb25TZWdtZW50SW5mb3JtYXRpb24ocixoKTtoKz1nO2NvbnN0IHc9cltoKytdO3kubW1yPSEhKDEmdyk7eS50ZW1wbGF0ZT13Pj4xJjM7eS5wcmVkaWN0aW9uPSEhKDgmdyk7aWYoIXkubW1yKXtsPTA9PT15LnRlbXBsYXRlPzQ6MTtvPVtdO2ZvcihjPTA7YzxsO2MrKyl7by5wdXNoKHt4OigwLG4ucmVhZEludDgpKHIsaCkseTooMCxuLnJlYWRJbnQ4KShyLGgrMSl9KTtoKz0yfXkuYXQ9b31zPVt5LHIsaCxpXTticmVhaztjYXNlIDQ4OmNvbnN0IFM9e3dpZHRoOigwLG4ucmVhZFVpbnQzMikocixoKSxoZWlnaHQ6KDAsbi5yZWFkVWludDMyKShyLGgrNCkscmVzb2x1dGlvblg6KDAsbi5yZWFkVWludDMyKShyLGgrOCkscmVzb2x1dGlvblk6KDAsbi5yZWFkVWludDMyKShyLGgrMTIpfTs0Mjk0OTY3Mjk1PT09Uy5oZWlnaHQmJmRlbGV0ZSBTLmhlaWdodDtjb25zdCB4PXJbaCsxNl07KDAsbi5yZWFkVWludDE2KShyLGgrMTcpO1MubG9zc2xlc3M9ISEoMSZ4KTtTLnJlZmluZW1lbnQ9ISEoMiZ4KTtTLmRlZmF1bHRQaXhlbFZhbHVlPXg+PjImMTtTLmNvbWJpbmF0aW9uT3BlcmF0b3I9eD4+MyYzO1MucmVxdWlyZXNCdWZmZXI9ISEoMzImeCk7Uy5jb21iaW5hdGlvbk9wZXJhdG9yT3ZlcnJpZGU9ISEoNjQmeCk7cz1bU107YnJlYWs7Y2FzZSA0OTpjYXNlIDUwOmNhc2UgNTE6Y2FzZSA2MjpicmVhaztjYXNlIDUzOnM9W2EubnVtYmVyLHIsaCxpXTticmVhaztkZWZhdWx0OnRocm93IG5ldyBKYmlnMkVycm9yKGBzZWdtZW50IHR5cGUgJHthLnR5cGVOYW1lfSgke2EudHlwZX0pIGlzIG5vdCBpbXBsZW1lbnRlZGApfWNvbnN0IHU9Im9uIithLnR5cGVOYW1lO3UgaW4gdCYmdFt1XS5hcHBseSh0LHMpfWZ1bmN0aW9uIHByb2Nlc3NTZWdtZW50cyhlLHQpe2ZvcihsZXQgYT0wLHI9ZS5sZW5ndGg7YTxyO2ErKylwcm9jZXNzU2VnbWVudChlW2FdLHQpfWNsYXNzIFNpbXBsZVNlZ21lbnRWaXNpdG9ye29uUGFnZUluZm9ybWF0aW9uKGUpe3RoaXMuY3VycmVudFBhZ2VJbmZvPWU7Y29uc3QgdD1lLndpZHRoKzc+PjMsYT1uZXcgVWludDhDbGFtcGVkQXJyYXkodCplLmhlaWdodCk7ZS5kZWZhdWx0UGl4ZWxWYWx1ZSYmYS5maWxsKDI1NSk7dGhpcy5idWZmZXI9YX1kcmF3Qml0bWFwKGUsdCl7Y29uc3QgYT10aGlzLmN1cnJlbnRQYWdlSW5mbyxyPWUud2lkdGgsbj1lLmhlaWdodCxpPWEud2lkdGgrNz4+MyxzPWEuY29tYmluYXRpb25PcGVyYXRvck92ZXJyaWRlP2UuY29tYmluYXRpb25PcGVyYXRvcjphLmNvbWJpbmF0aW9uT3BlcmF0b3Isbz10aGlzLmJ1ZmZlcixjPTEyOD4+KDcmZS54KTtsZXQgbCxoLHUsZCxmPWUueSppKyhlLng+PjMpO3N3aXRjaChzKXtjYXNlIDA6Zm9yKGw9MDtsPG47bCsrKXt1PWM7ZD1mO2ZvcihoPTA7aDxyO2grKyl7dFtsXVtoXSYmKG9bZF18PXUpO3U+Pj0xO2lmKCF1KXt1PTEyODtkKyt9fWYrPWl9YnJlYWs7Y2FzZSAyOmZvcihsPTA7bDxuO2wrKyl7dT1jO2Q9Zjtmb3IoaD0wO2g8cjtoKyspe3RbbF1baF0mJihvW2RdXj11KTt1Pj49MTtpZighdSl7dT0xMjg7ZCsrfX1mKz1pfWJyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEpiaWcyRXJyb3IoYG9wZXJhdG9yICR7c30gaXMgbm90IHN1cHBvcnRlZGApfX1vbkltbWVkaWF0ZUdlbmVyaWNSZWdpb24oZSx0LGEscil7Y29uc3Qgbj1lLmluZm8saT1uZXcgRGVjb2RpbmdDb250ZXh0KHQsYSxyKSxzPWRlY29kZUJpdG1hcChlLm1tcixuLndpZHRoLG4uaGVpZ2h0LGUudGVtcGxhdGUsZS5wcmVkaWN0aW9uLG51bGwsZS5hdCxpKTt0aGlzLmRyYXdCaXRtYXAobixzKX1vbkltbWVkaWF0ZUxvc3NsZXNzR2VuZXJpY1JlZ2lvbigpe3RoaXMub25JbW1lZGlhdGVHZW5lcmljUmVnaW9uKC4uLmFyZ3VtZW50cyl9b25TeW1ib2xEaWN0aW9uYXJ5KGUsdCxhLHIsaSxzKXtsZXQgbyxjO2lmKGUuaHVmZm1hbil7bz1mdW5jdGlvbiBnZXRTeW1ib2xEaWN0aW9uYXJ5SHVmZm1hblRhYmxlcyhlLHQsYSl7bGV0IHIsbixpLHMsbz0wO3N3aXRjaChlLmh1ZmZtYW5ESFNlbGVjdG9yKXtjYXNlIDA6Y2FzZSAxOnI9Z2V0U3RhbmRhcmRUYWJsZShlLmh1ZmZtYW5ESFNlbGVjdG9yKzQpO2JyZWFrO2Nhc2UgMzpyPWdldEN1c3RvbUh1ZmZtYW5UYWJsZShvLHQsYSk7bysrO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgSHVmZm1hbiBESCBzZWxlY3RvciIpfXN3aXRjaChlLmh1ZmZtYW5EV1NlbGVjdG9yKXtjYXNlIDA6Y2FzZSAxOm49Z2V0U3RhbmRhcmRUYWJsZShlLmh1ZmZtYW5EV1NlbGVjdG9yKzIpO2JyZWFrO2Nhc2UgMzpuPWdldEN1c3RvbUh1ZmZtYW5UYWJsZShvLHQsYSk7bysrO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgSHVmZm1hbiBEVyBzZWxlY3RvciIpfWlmKGUuYml0bWFwU2l6ZVNlbGVjdG9yKXtpPWdldEN1c3RvbUh1ZmZtYW5UYWJsZShvLHQsYSk7bysrfWVsc2UgaT1nZXRTdGFuZGFyZFRhYmxlKDEpO3M9ZS5hZ2dyZWdhdGlvbkluc3RhbmNlc1NlbGVjdG9yP2dldEN1c3RvbUh1ZmZtYW5UYWJsZShvLHQsYSk6Z2V0U3RhbmRhcmRUYWJsZSgxKTtyZXR1cm57dGFibGVEZWx0YUhlaWdodDpyLHRhYmxlRGVsdGFXaWR0aDpuLHRhYmxlQml0bWFwU2l6ZTppLHRhYmxlQWdncmVnYXRlSW5zdGFuY2VzOnN9fShlLGEsdGhpcy5jdXN0b21UYWJsZXMpO2M9bmV3IFJlYWRlcihyLGkscyl9bGV0IGw9dGhpcy5zeW1ib2xzO2x8fCh0aGlzLnN5bWJvbHM9bD17fSk7Y29uc3QgaD1bXTtmb3IoY29uc3QgZSBvZiBhKXtjb25zdCB0PWxbZV07dCYmaC5wdXNoKC4uLnQpfWNvbnN0IHU9bmV3IERlY29kaW5nQ29udGV4dChyLGkscyk7bFt0XT1mdW5jdGlvbiBkZWNvZGVTeW1ib2xEaWN0aW9uYXJ5KGUsdCxhLHIsaSxzLG8sYyxsLGgsdSxkKXtpZihlJiZ0KXRocm93IG5ldyBKYmlnMkVycm9yKCJzeW1ib2wgcmVmaW5lbWVudCB3aXRoIEh1ZmZtYW4gaXMgbm90IHN1cHBvcnRlZCIpO2NvbnN0IGY9W107bGV0IGc9MCxwPSgwLG4ubG9nMikoYS5sZW5ndGgrcik7Y29uc3QgbT11LmRlY29kZXIsYj11LmNvbnRleHRDYWNoZTtsZXQgeSx3O2lmKGUpe3k9Z2V0U3RhbmRhcmRUYWJsZSgxKTt3PVtdO3A9TWF0aC5tYXgocCwxKX1mb3IoO2YubGVuZ3RoPHI7KXtnKz1lP3MudGFibGVEZWx0YUhlaWdodC5kZWNvZGUoZCk6ZGVjb2RlSW50ZWdlcihiLCJJQURIIixtKTtsZXQgcj0wLG49MDtjb25zdCBpPWU/dy5sZW5ndGg6MDtmb3IoOzspe2NvbnN0IGk9ZT9zLnRhYmxlRGVsdGFXaWR0aC5kZWNvZGUoZCk6ZGVjb2RlSW50ZWdlcihiLCJJQURXIixtKTtpZihudWxsPT09aSlicmVhaztyKz1pO24rPXI7bGV0IHk7aWYodCl7Y29uc3Qgbj1kZWNvZGVJbnRlZ2VyKGIsIklBQUkiLG0pO2lmKG4+MSl5PWRlY29kZVRleHRSZWdpb24oZSx0LHIsZywwLG4sMSxhLmNvbmNhdChmKSxwLDAsMCwxLDAscyxsLGgsdSwwLGQpO2Vsc2V7Y29uc3QgZT1kZWNvZGVJQUlEKGIsbSxwKSx0PWRlY29kZUludGVnZXIoYiwiSUFSRFgiLG0pLG49ZGVjb2RlSW50ZWdlcihiLCJJQVJEWSIsbSk7eT1kZWNvZGVSZWZpbmVtZW50KHIsZyxsLGU8YS5sZW5ndGg/YVtlXTpmW2UtYS5sZW5ndGhdLHQsbiwhMSxoLHUpfWYucHVzaCh5KX1lbHNlIGlmKGUpdy5wdXNoKHIpO2Vsc2V7eT1kZWNvZGVCaXRtYXAoITEscixnLG8sITEsbnVsbCxjLHUpO2YucHVzaCh5KX19aWYoZSYmIXQpe2NvbnN0IGU9cy50YWJsZUJpdG1hcFNpemUuZGVjb2RlKGQpO2QuYnl0ZUFsaWduKCk7bGV0IHQ7aWYoMD09PWUpdD1yZWFkVW5jb21wcmVzc2VkQml0bWFwKGQsbixnKTtlbHNle2NvbnN0IGE9ZC5lbmQscj1kLnBvc2l0aW9uK2U7ZC5lbmQ9cjt0PWRlY29kZU1NUkJpdG1hcChkLG4sZywhMSk7ZC5lbmQ9YTtkLnBvc2l0aW9uPXJ9Y29uc3QgYT13Lmxlbmd0aDtpZihpPT09YS0xKWYucHVzaCh0KTtlbHNle2xldCBlLHIsbixzLG8sYz0wO2ZvcihlPWk7ZTxhO2UrKyl7cz13W2VdO249YytzO289W107Zm9yKHI9MDtyPGc7cisrKW8ucHVzaCh0W3JdLnN1YmFycmF5KGMsbikpO2YucHVzaChvKTtjPW59fX19Y29uc3QgUz1bXSx4PVtdO2xldCBDLGssdj0hMTtjb25zdCBGPWEubGVuZ3RoK3I7Zm9yKDt4Lmxlbmd0aDxGOyl7bGV0IHQ9ZT95LmRlY29kZShkKTpkZWNvZGVJbnRlZ2VyKGIsIklBRVgiLG0pO2Zvcig7dC0tOyl4LnB1c2godik7dj0hdn1mb3IoQz0wLGs9YS5sZW5ndGg7QzxrO0MrKyl4W0NdJiZTLnB1c2goYVtDXSk7Zm9yKGxldCBlPTA7ZTxyO0MrKyxlKyspeFtDXSYmUy5wdXNoKGZbZV0pO3JldHVybiBTfShlLmh1ZmZtYW4sZS5yZWZpbmVtZW50LGgsZS5udW1iZXJPZk5ld1N5bWJvbHMsZS5udW1iZXJPZkV4cG9ydGVkU3ltYm9scyxvLGUudGVtcGxhdGUsZS5hdCxlLnJlZmluZW1lbnRUZW1wbGF0ZSxlLnJlZmluZW1lbnRBdCx1LGMpfW9uSW1tZWRpYXRlVGV4dFJlZ2lvbihlLHQsYSxyLGkpe2NvbnN0IHM9ZS5pbmZvO2xldCBvLGM7Y29uc3QgbD10aGlzLnN5bWJvbHMsaD1bXTtmb3IoY29uc3QgZSBvZiB0KXtjb25zdCB0PWxbZV07dCYmaC5wdXNoKC4uLnQpfWNvbnN0IHU9KDAsbi5sb2cyKShoLmxlbmd0aCk7aWYoZS5odWZmbWFuKXtjPW5ldyBSZWFkZXIoYSxyLGkpO289ZnVuY3Rpb24gZ2V0VGV4dFJlZ2lvbkh1ZmZtYW5UYWJsZXMoZSx0LGEscixuKXtjb25zdCBpPVtdO2ZvcihsZXQgZT0wO2U8PTM0O2UrKyl7Y29uc3QgdD1uLnJlYWRCaXRzKDQpO2kucHVzaChuZXcgSHVmZm1hbkxpbmUoW2UsdCwwLDBdKSl9Y29uc3Qgcz1uZXcgSHVmZm1hblRhYmxlKGksITEpO2kubGVuZ3RoPTA7Zm9yKGxldCBlPTA7ZTxyOyl7Y29uc3QgdD1zLmRlY29kZShuKTtpZih0Pj0zMil7bGV0IGEscixzO3N3aXRjaCh0KXtjYXNlIDMyOmlmKDA9PT1lKXRocm93IG5ldyBKYmlnMkVycm9yKCJubyBwcmV2aW91cyB2YWx1ZSBpbiBzeW1ib2wgSUQgdGFibGUiKTtyPW4ucmVhZEJpdHMoMikrMzthPWlbZS0xXS5wcmVmaXhMZW5ndGg7YnJlYWs7Y2FzZSAzMzpyPW4ucmVhZEJpdHMoMykrMzthPTA7YnJlYWs7Y2FzZSAzNDpyPW4ucmVhZEJpdHMoNykrMTE7YT0wO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgY29kZSBsZW5ndGggaW4gc3ltYm9sIElEIHRhYmxlIil9Zm9yKHM9MDtzPHI7cysrKXtpLnB1c2gobmV3IEh1ZmZtYW5MaW5lKFtlLGEsMCwwXSkpO2UrK319ZWxzZXtpLnB1c2gobmV3IEh1ZmZtYW5MaW5lKFtlLHQsMCwwXSkpO2UrK319bi5ieXRlQWxpZ24oKTtjb25zdCBvPW5ldyBIdWZmbWFuVGFibGUoaSwhMSk7bGV0IGMsbCxoLHU9MDtzd2l0Y2goZS5odWZmbWFuRlMpe2Nhc2UgMDpjYXNlIDE6Yz1nZXRTdGFuZGFyZFRhYmxlKGUuaHVmZm1hbkZTKzYpO2JyZWFrO2Nhc2UgMzpjPWdldEN1c3RvbUh1ZmZtYW5UYWJsZSh1LHQsYSk7dSsrO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgSHVmZm1hbiBGUyBzZWxlY3RvciIpfXN3aXRjaChlLmh1ZmZtYW5EUyl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6bD1nZXRTdGFuZGFyZFRhYmxlKGUuaHVmZm1hbkRTKzgpO2JyZWFrO2Nhc2UgMzpsPWdldEN1c3RvbUh1ZmZtYW5UYWJsZSh1LHQsYSk7dSsrO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEpiaWcyRXJyb3IoImludmFsaWQgSHVmZm1hbiBEUyBzZWxlY3RvciIpfXN3aXRjaChlLmh1ZmZtYW5EVCl7Y2FzZSAwOmNhc2UgMTpjYXNlIDI6aD1nZXRTdGFuZGFyZFRhYmxlKGUuaHVmZm1hbkRUKzExKTticmVhaztjYXNlIDM6aD1nZXRDdXN0b21IdWZmbWFuVGFibGUodSx0LGEpO3UrKzticmVhaztkZWZhdWx0OnRocm93IG5ldyBKYmlnMkVycm9yKCJpbnZhbGlkIEh1ZmZtYW4gRFQgc2VsZWN0b3IiKX1pZihlLnJlZmluZW1lbnQpdGhyb3cgbmV3IEpiaWcyRXJyb3IoInJlZmluZW1lbnQgd2l0aCBIdWZmbWFuIGlzIG5vdCBzdXBwb3J0ZWQiKTtyZXR1cm57c3ltYm9sSURUYWJsZTpvLHRhYmxlRmlyc3RTOmMsdGFibGVEZWx0YVM6bCx0YWJsZURlbHRhVDpofX0oZSx0LHRoaXMuY3VzdG9tVGFibGVzLGgubGVuZ3RoLGMpfWNvbnN0IGQ9bmV3IERlY29kaW5nQ29udGV4dChhLHIsaSksZj1kZWNvZGVUZXh0UmVnaW9uKGUuaHVmZm1hbixlLnJlZmluZW1lbnQscy53aWR0aCxzLmhlaWdodCxlLmRlZmF1bHRQaXhlbFZhbHVlLGUubnVtYmVyT2ZTeW1ib2xJbnN0YW5jZXMsZS5zdHJpcFNpemUsaCx1LGUudHJhbnNwb3NlZCxlLmRzT2Zmc2V0LGUucmVmZXJlbmNlQ29ybmVyLGUuY29tYmluYXRpb25PcGVyYXRvcixvLGUucmVmaW5lbWVudFRlbXBsYXRlLGUucmVmaW5lbWVudEF0LGQsZS5sb2dTdHJpcFNpemUsYyk7dGhpcy5kcmF3Qml0bWFwKHMsZil9b25JbW1lZGlhdGVMb3NzbGVzc1RleHRSZWdpb24oKXt0aGlzLm9uSW1tZWRpYXRlVGV4dFJlZ2lvbiguLi5hcmd1bWVudHMpfW9uUGF0dGVybkRpY3Rpb25hcnkoZSx0LGEscixuKXtsZXQgaT10aGlzLnBhdHRlcm5zO2l8fCh0aGlzLnBhdHRlcm5zPWk9e30pO2NvbnN0IHM9bmV3IERlY29kaW5nQ29udGV4dChhLHIsbik7aVt0XT1mdW5jdGlvbiBkZWNvZGVQYXR0ZXJuRGljdGlvbmFyeShlLHQsYSxyLG4saSl7Y29uc3Qgcz1bXTtpZighZSl7cy5wdXNoKHt4Oi10LHk6MH0pOzA9PT1uJiZzLnB1c2goe3g6LTMseTotMX0se3g6Mix5Oi0yfSx7eDotMix5Oi0yfSl9Y29uc3Qgbz1kZWNvZGVCaXRtYXAoZSwocisxKSp0LGEsbiwhMSxudWxsLHMsaSksYz1bXTtmb3IobGV0IGU9MDtlPD1yO2UrKyl7Y29uc3Qgcj1bXSxuPXQqZSxpPW4rdDtmb3IobGV0IGU9MDtlPGE7ZSsrKXIucHVzaChvW2VdLnN1YmFycmF5KG4saSkpO2MucHVzaChyKX1yZXR1cm4gY30oZS5tbXIsZS5wYXR0ZXJuV2lkdGgsZS5wYXR0ZXJuSGVpZ2h0LGUubWF4UGF0dGVybkluZGV4LGUudGVtcGxhdGUscyl9b25JbW1lZGlhdGVIYWxmdG9uZVJlZ2lvbihlLHQsYSxyLGkpe2NvbnN0IHM9dGhpcy5wYXR0ZXJuc1t0WzBdXSxvPWUuaW5mbyxjPW5ldyBEZWNvZGluZ0NvbnRleHQoYSxyLGkpLGw9ZnVuY3Rpb24gZGVjb2RlSGFsZnRvbmVSZWdpb24oZSx0LGEscixpLHMsbyxjLGwsaCx1LGQsZixnLHApe2lmKG8pdGhyb3cgbmV3IEpiaWcyRXJyb3IoInNraXAgaXMgbm90IHN1cHBvcnRlZCIpO2lmKDAhPT1jKXRocm93IG5ldyBKYmlnMkVycm9yKGBvcGVyYXRvciAiJHtjfSIgaXMgbm90IHN1cHBvcnRlZCBpbiBoYWxmdG9uZSByZWdpb25gKTtjb25zdCBtPVtdO2xldCBiLHksdztmb3IoYj0wO2I8aTtiKyspe3c9bmV3IFVpbnQ4QXJyYXkocik7aWYocylmb3IoeT0wO3k8cjt5Kyspd1t5XT1zO20ucHVzaCh3KX1jb25zdCBTPXQubGVuZ3RoLHg9dFswXSxDPXhbMF0ubGVuZ3RoLGs9eC5sZW5ndGgsdj0oMCxuLmxvZzIpKFMpLEY9W107aWYoIWUpe0YucHVzaCh7eDphPD0xPzM6Mix5Oi0xfSk7MD09PWEmJkYucHVzaCh7eDotMyx5Oi0xfSx7eDoyLHk6LTJ9LHt4Oi0yLHk6LTJ9KX1jb25zdCBPPVtdO2xldCBULE0sRCxFLE4sUixMLCQsXyxqLFU7ZSYmKFQ9bmV3IFJlYWRlcihwLmRhdGEscC5zdGFydCxwLmVuZCkpO2ZvcihiPXYtMTtiPj0wO2ItLSl7TT1lP2RlY29kZU1NUkJpdG1hcChULGwsaCwhMCk6ZGVjb2RlQml0bWFwKCExLGwsaCxhLCExLG51bGwsRixwKTtPW2JdPU19Zm9yKEQ9MDtEPGg7RCsrKWZvcihFPTA7RTxsO0UrKyl7Tj0wO1I9MDtmb3IoeT12LTE7eT49MDt5LS0pe05ePU9beV1bRF1bRV07Unw9Tjw8eX1MPXRbUl07JD11K0QqZytFKmY+Pjg7Xz1kK0QqZi1FKmc+Pjg7aWYoJD49MCYmJCtDPD1yJiZfPj0wJiZfK2s8PWkpZm9yKGI9MDtiPGs7YisrKXtVPW1bXytiXTtqPUxbYl07Zm9yKHk9MDt5PEM7eSsrKVVbJCt5XXw9alt5XX1lbHNle2xldCBlLHQ7Zm9yKGI9MDtiPGs7YisrKXt0PV8rYjtpZighKHQ8MHx8dD49aSkpe1U9bVt0XTtqPUxbYl07Zm9yKHk9MDt5PEM7eSsrKXtlPSQreTtlPj0wJiZlPHImJihVW2VdfD1qW3ldKX19fX19cmV0dXJuIG19KGUubW1yLHMsZS50ZW1wbGF0ZSxvLndpZHRoLG8uaGVpZ2h0LGUuZGVmYXVsdFBpeGVsVmFsdWUsZS5lbmFibGVTa2lwLGUuY29tYmluYXRpb25PcGVyYXRvcixlLmdyaWRXaWR0aCxlLmdyaWRIZWlnaHQsZS5ncmlkT2Zmc2V0WCxlLmdyaWRPZmZzZXRZLGUuZ3JpZFZlY3RvclgsZS5ncmlkVmVjdG9yWSxjKTt0aGlzLmRyYXdCaXRtYXAobyxsKX1vbkltbWVkaWF0ZUxvc3NsZXNzSGFsZnRvbmVSZWdpb24oKXt0aGlzLm9uSW1tZWRpYXRlSGFsZnRvbmVSZWdpb24oLi4uYXJndW1lbnRzKX1vblRhYmxlcyhlLHQsYSxyKXtsZXQgaT10aGlzLmN1c3RvbVRhYmxlcztpfHwodGhpcy5jdXN0b21UYWJsZXM9aT17fSk7aVtlXT1mdW5jdGlvbiBkZWNvZGVUYWJsZXNTZWdtZW50KGUsdCxhKXtjb25zdCByPWVbdF0saT00Mjk0OTY3Mjk1JigwLG4ucmVhZFVpbnQzMikoZSx0KzEpLHM9NDI5NDk2NzI5NSYoMCxuLnJlYWRVaW50MzIpKGUsdCs1KSxvPW5ldyBSZWFkZXIoZSx0KzksYSksYz0xKyhyPj4xJjcpLGw9MSsocj4+NCY3KSxoPVtdO2xldCB1LGQsZj1pO2Rve3U9by5yZWFkQml0cyhjKTtkPW8ucmVhZEJpdHMobCk7aC5wdXNoKG5ldyBIdWZmbWFuTGluZShbZix1LGQsMF0pKTtmKz0xPDxkfXdoaWxlKGY8cyk7dT1vLnJlYWRCaXRzKGMpO2gucHVzaChuZXcgSHVmZm1hbkxpbmUoW2ktMSx1LDMyLDAsImxvd2VyIl0pKTt1PW8ucmVhZEJpdHMoYyk7aC5wdXNoKG5ldyBIdWZmbWFuTGluZShbcyx1LDMyLDBdKSk7aWYoMSZyKXt1PW8ucmVhZEJpdHMoYyk7aC5wdXNoKG5ldyBIdWZmbWFuTGluZShbdSwwXSkpfXJldHVybiBuZXcgSHVmZm1hblRhYmxlKGgsITEpfSh0LGEscil9fWNsYXNzIEh1ZmZtYW5MaW5le2NvbnN0cnVjdG9yKGUpe2lmKDI9PT1lLmxlbmd0aCl7dGhpcy5pc09PQj0hMDt0aGlzLnJhbmdlTG93PTA7dGhpcy5wcmVmaXhMZW5ndGg9ZVswXTt0aGlzLnJhbmdlTGVuZ3RoPTA7dGhpcy5wcmVmaXhDb2RlPWVbMV07dGhpcy5pc0xvd2VyUmFuZ2U9ITF9ZWxzZXt0aGlzLmlzT09CPSExO3RoaXMucmFuZ2VMb3c9ZVswXTt0aGlzLnByZWZpeExlbmd0aD1lWzFdO3RoaXMucmFuZ2VMZW5ndGg9ZVsyXTt0aGlzLnByZWZpeENvZGU9ZVszXTt0aGlzLmlzTG93ZXJSYW5nZT0ibG93ZXIiPT09ZVs0XX19fWNsYXNzIEh1ZmZtYW5UcmVlTm9kZXtjb25zdHJ1Y3RvcihlKXt0aGlzLmNoaWxkcmVuPVtdO2lmKGUpe3RoaXMuaXNMZWFmPSEwO3RoaXMucmFuZ2VMZW5ndGg9ZS5yYW5nZUxlbmd0aDt0aGlzLnJhbmdlTG93PWUucmFuZ2VMb3c7dGhpcy5pc0xvd2VyUmFuZ2U9ZS5pc0xvd2VyUmFuZ2U7dGhpcy5pc09PQj1lLmlzT09CfWVsc2UgdGhpcy5pc0xlYWY9ITF9YnVpbGRUcmVlKGUsdCl7Y29uc3QgYT1lLnByZWZpeENvZGU+PnQmMTtpZih0PD0wKXRoaXMuY2hpbGRyZW5bYV09bmV3IEh1ZmZtYW5UcmVlTm9kZShlKTtlbHNle2xldCByPXRoaXMuY2hpbGRyZW5bYV07cnx8KHRoaXMuY2hpbGRyZW5bYV09cj1uZXcgSHVmZm1hblRyZWVOb2RlKG51bGwpKTtyLmJ1aWxkVHJlZShlLHQtMSl9fWRlY29kZU5vZGUoZSl7aWYodGhpcy5pc0xlYWYpe2lmKHRoaXMuaXNPT0IpcmV0dXJuIG51bGw7Y29uc3QgdD1lLnJlYWRCaXRzKHRoaXMucmFuZ2VMZW5ndGgpO3JldHVybiB0aGlzLnJhbmdlTG93Kyh0aGlzLmlzTG93ZXJSYW5nZT8tdDp0KX1jb25zdCB0PXRoaXMuY2hpbGRyZW5bZS5yZWFkQml0KCldO2lmKCF0KXRocm93IG5ldyBKYmlnMkVycm9yKCJpbnZhbGlkIEh1ZmZtYW4gZGF0YSIpO3JldHVybiB0LmRlY29kZU5vZGUoZSl9fWNsYXNzIEh1ZmZtYW5UYWJsZXtjb25zdHJ1Y3RvcihlLHQpe3R8fHRoaXMuYXNzaWduUHJlZml4Q29kZXMoZSk7dGhpcy5yb290Tm9kZT1uZXcgSHVmZm1hblRyZWVOb2RlKG51bGwpO2ZvcihsZXQgdD0wLGE9ZS5sZW5ndGg7dDxhO3QrKyl7Y29uc3QgYT1lW3RdO2EucHJlZml4TGVuZ3RoPjAmJnRoaXMucm9vdE5vZGUuYnVpbGRUcmVlKGEsYS5wcmVmaXhMZW5ndGgtMSl9fWRlY29kZShlKXtyZXR1cm4gdGhpcy5yb290Tm9kZS5kZWNvZGVOb2RlKGUpfWFzc2lnblByZWZpeENvZGVzKGUpe2NvbnN0IHQ9ZS5sZW5ndGg7bGV0IGE9MDtmb3IobGV0IHI9MDtyPHQ7cisrKWE9TWF0aC5tYXgoYSxlW3JdLnByZWZpeExlbmd0aCk7Y29uc3Qgcj1uZXcgVWludDMyQXJyYXkoYSsxKTtmb3IobGV0IGE9MDthPHQ7YSsrKXJbZVthXS5wcmVmaXhMZW5ndGhdKys7bGV0IG4saSxzLG89MSxjPTA7clswXT0wO2Zvcig7bzw9YTspe2M9YytyW28tMV08PDE7bj1jO2k9MDtmb3IoO2k8dDspe3M9ZVtpXTtpZihzLnByZWZpeExlbmd0aD09PW8pe3MucHJlZml4Q29kZT1uO24rK31pKyt9bysrfX19Y29uc3QgcD17fTtmdW5jdGlvbiBnZXRTdGFuZGFyZFRhYmxlKGUpe2xldCB0LGE9cFtlXTtpZihhKXJldHVybiBhO3N3aXRjaChlKXtjYXNlIDE6dD1bWzAsMSw0LDBdLFsxNiwyLDgsMl0sWzI3MiwzLDE2LDZdLFs2NTgwOCwzLDMyLDddXTticmVhaztjYXNlIDI6dD1bWzAsMSwwLDBdLFsxLDIsMCwyXSxbMiwzLDAsNl0sWzMsNCwzLDE0XSxbMTEsNSw2LDMwXSxbNzUsNiwzMiw2Ml0sWzYsNjNdXTticmVhaztjYXNlIDM6dD1bWy0yNTYsOCw4LDI1NF0sWzAsMSwwLDBdLFsxLDIsMCwyXSxbMiwzLDAsNl0sWzMsNCwzLDE0XSxbMTEsNSw2LDMwXSxbLTI1Nyw4LDMyLDI1NSwibG93ZXIiXSxbNzUsNywzMiwxMjZdLFs2LDYyXV07YnJlYWs7Y2FzZSA0OnQ9W1sxLDEsMCwwXSxbMiwyLDAsMl0sWzMsMywwLDZdLFs0LDQsMywxNF0sWzEyLDUsNiwzMF0sWzc2LDUsMzIsMzFdXTticmVhaztjYXNlIDU6dD1bWy0yNTUsNyw4LDEyNl0sWzEsMSwwLDBdLFsyLDIsMCwyXSxbMywzLDAsNl0sWzQsNCwzLDE0XSxbMTIsNSw2LDMwXSxbLTI1Niw3LDMyLDEyNywibG93ZXIiXSxbNzYsNiwzMiw2Ml1dO2JyZWFrO2Nhc2UgNjp0PVtbLTIwNDgsNSwxMCwyOF0sWy0xMDI0LDQsOSw4XSxbLTUxMiw0LDgsOV0sWy0yNTYsNCw3LDEwXSxbLTEyOCw1LDYsMjldLFstNjQsNSw1LDMwXSxbLTMyLDQsNSwxMV0sWzAsMiw3LDBdLFsxMjgsMyw3LDJdLFsyNTYsMyw4LDNdLFs1MTIsNCw5LDEyXSxbMTAyNCw0LDEwLDEzXSxbLTIwNDksNiwzMiw2MiwibG93ZXIiXSxbMjA0OCw2LDMyLDYzXV07YnJlYWs7Y2FzZSA3OnQ9W1stMTAyNCw0LDksOF0sWy01MTIsMyw4LDBdLFstMjU2LDQsNyw5XSxbLTEyOCw1LDYsMjZdLFstNjQsNSw1LDI3XSxbLTMyLDQsNSwxMF0sWzAsNCw1LDExXSxbMzIsNSw1LDI4XSxbNjQsNSw2LDI5XSxbMTI4LDQsNywxMl0sWzI1NiwzLDgsMV0sWzUxMiwzLDksMl0sWzEwMjQsMywxMCwzXSxbLTEwMjUsNSwzMiwzMCwibG93ZXIiXSxbMjA0OCw1LDMyLDMxXV07YnJlYWs7Y2FzZSA4OnQ9W1stMTUsOCwzLDI1Ml0sWy03LDksMSw1MDhdLFstNSw4LDEsMjUzXSxbLTMsOSwwLDUwOV0sWy0yLDcsMCwxMjRdLFstMSw0LDAsMTBdLFswLDIsMSwwXSxbMiw1LDAsMjZdLFszLDYsMCw1OF0sWzQsMyw0LDRdLFsyMCw2LDEsNTldLFsyMiw0LDQsMTFdLFszOCw0LDUsMTJdLFs3MCw1LDYsMjddLFsxMzQsNSw3LDI4XSxbMjYyLDYsNyw2MF0sWzM5MCw3LDgsMTI1XSxbNjQ2LDYsMTAsNjFdLFstMTYsOSwzMiw1MTAsImxvd2VyIl0sWzE2NzAsOSwzMiw1MTFdLFsyLDFdXTticmVhaztjYXNlIDk6dD1bWy0zMSw4LDQsMjUyXSxbLTE1LDksMiw1MDhdLFstMTEsOCwyLDI1M10sWy03LDksMSw1MDldLFstNSw3LDEsMTI0XSxbLTMsNCwxLDEwXSxbLTEsMywxLDJdLFsxLDMsMSwzXSxbMyw1LDEsMjZdLFs1LDYsMSw1OF0sWzcsMyw1LDRdLFszOSw2LDIsNTldLFs0Myw0LDUsMTFdLFs3NSw0LDYsMTJdLFsxMzksNSw3LDI3XSxbMjY3LDUsOCwyOF0sWzUyMyw2LDgsNjBdLFs3NzksNyw5LDEyNV0sWzEyOTEsNiwxMSw2MV0sWy0zMiw5LDMyLDUxMCwibG93ZXIiXSxbMzMzOSw5LDMyLDUxMV0sWzIsMF1dO2JyZWFrO2Nhc2UgMTA6dD1bWy0yMSw3LDQsMTIyXSxbLTUsOCwwLDI1Ml0sWy00LDcsMCwxMjNdLFstMyw1LDAsMjRdLFstMiwyLDIsMF0sWzIsNSwwLDI1XSxbMyw2LDAsNTRdLFs0LDcsMCwxMjRdLFs1LDgsMCwyNTNdLFs2LDIsNiwxXSxbNzAsNSw1LDI2XSxbMTAyLDYsNSw1NV0sWzEzNCw2LDYsNTZdLFsxOTgsNiw3LDU3XSxbMzI2LDYsOCw1OF0sWzU4Miw2LDksNTldLFsxMDk0LDYsMTAsNjBdLFsyMTE4LDcsMTEsMTI1XSxbLTIyLDgsMzIsMjU0LCJsb3dlciJdLFs0MTY2LDgsMzIsMjU1XSxbMiwyXV07YnJlYWs7Y2FzZSAxMTp0PVtbMSwxLDAsMF0sWzIsMiwxLDJdLFs0LDQsMCwxMl0sWzUsNCwxLDEzXSxbNyw1LDEsMjhdLFs5LDUsMiwyOV0sWzEzLDYsMiw2MF0sWzE3LDcsMiwxMjJdLFsyMSw3LDMsMTIzXSxbMjksNyw0LDEyNF0sWzQ1LDcsNSwxMjVdLFs3Nyw3LDYsMTI2XSxbMTQxLDcsMzIsMTI3XV07YnJlYWs7Y2FzZSAxMjp0PVtbMSwxLDAsMF0sWzIsMiwwLDJdLFszLDMsMSw2XSxbNSw1LDAsMjhdLFs2LDUsMSwyOV0sWzgsNiwxLDYwXSxbMTAsNywwLDEyMl0sWzExLDcsMSwxMjNdLFsxMyw3LDIsMTI0XSxbMTcsNywzLDEyNV0sWzI1LDcsNCwxMjZdLFs0MSw4LDUsMjU0XSxbNzMsOCwzMiwyNTVdXTticmVhaztjYXNlIDEzOnQ9W1sxLDEsMCwwXSxbMiwzLDAsNF0sWzMsNCwwLDEyXSxbNCw1LDAsMjhdLFs1LDQsMSwxM10sWzcsMywzLDVdLFsxNSw2LDEsNThdLFsxNyw2LDIsNTldLFsyMSw2LDMsNjBdLFsyOSw2LDQsNjFdLFs0NSw2LDUsNjJdLFs3Nyw3LDYsMTI2XSxbMTQxLDcsMzIsMTI3XV07YnJlYWs7Y2FzZSAxNDp0PVtbLTIsMywwLDRdLFstMSwzLDAsNV0sWzAsMSwwLDBdLFsxLDMsMCw2XSxbMiwzLDAsN11dO2JyZWFrO2Nhc2UgMTU6dD1bWy0yNCw3LDQsMTI0XSxbLTgsNiwyLDYwXSxbLTQsNSwxLDI4XSxbLTIsNCwwLDEyXSxbLTEsMywwLDRdLFswLDEsMCwwXSxbMSwzLDAsNV0sWzIsNCwwLDEzXSxbMyw1LDEsMjldLFs1LDYsMiw2MV0sWzksNyw0LDEyNV0sWy0yNSw3LDMyLDEyNiwibG93ZXIiXSxbMjUsNywzMiwxMjddXTticmVhaztkZWZhdWx0OnRocm93IG5ldyBKYmlnMkVycm9yKGBzdGFuZGFyZCB0YWJsZSBCLiR7ZX0gZG9lcyBub3QgZXhpc3RgKX1mb3IobGV0IGU9MCxhPXQubGVuZ3RoO2U8YTtlKyspdFtlXT1uZXcgSHVmZm1hbkxpbmUodFtlXSk7YT1uZXcgSHVmZm1hblRhYmxlKHQsITApO3BbZV09YTtyZXR1cm4gYX1jbGFzcyBSZWFkZXJ7Y29uc3RydWN0b3IoZSx0LGEpe3RoaXMuZGF0YT1lO3RoaXMuc3RhcnQ9dDt0aGlzLmVuZD1hO3RoaXMucG9zaXRpb249dDt0aGlzLnNoaWZ0PS0xO3RoaXMuY3VycmVudEJ5dGU9MH1yZWFkQml0KCl7aWYodGhpcy5zaGlmdDwwKXtpZih0aGlzLnBvc2l0aW9uPj10aGlzLmVuZCl0aHJvdyBuZXcgSmJpZzJFcnJvcigiZW5kIG9mIGRhdGEgd2hpbGUgcmVhZGluZyBiaXQiKTt0aGlzLmN1cnJlbnRCeXRlPXRoaXMuZGF0YVt0aGlzLnBvc2l0aW9uKytdO3RoaXMuc2hpZnQ9N31jb25zdCBlPXRoaXMuY3VycmVudEJ5dGU+PnRoaXMuc2hpZnQmMTt0aGlzLnNoaWZ0LS07cmV0dXJuIGV9cmVhZEJpdHMoZSl7bGV0IHQsYT0wO2Zvcih0PWUtMTt0Pj0wO3QtLSlhfD10aGlzLnJlYWRCaXQoKTw8dDtyZXR1cm4gYX1ieXRlQWxpZ24oKXt0aGlzLnNoaWZ0PS0xfW5leHQoKXtyZXR1cm4gdGhpcy5wb3NpdGlvbj49dGhpcy5lbmQ/LTE6dGhpcy5kYXRhW3RoaXMucG9zaXRpb24rK119fWZ1bmN0aW9uIGdldEN1c3RvbUh1ZmZtYW5UYWJsZShlLHQsYSl7bGV0IHI9MDtmb3IobGV0IG49MCxpPXQubGVuZ3RoO248aTtuKyspe2NvbnN0IGk9YVt0W25dXTtpZihpKXtpZihlPT09cilyZXR1cm4gaTtyKyt9fXRocm93IG5ldyBKYmlnMkVycm9yKCJjYW4ndCBmaW5kIGN1c3RvbSBIdWZmbWFuIHRhYmxlIil9ZnVuY3Rpb24gcmVhZFVuY29tcHJlc3NlZEJpdG1hcChlLHQsYSl7Y29uc3Qgcj1bXTtmb3IobGV0IG49MDtuPGE7bisrKXtjb25zdCBhPW5ldyBVaW50OEFycmF5KHQpO3IucHVzaChhKTtmb3IobGV0IHI9MDtyPHQ7cisrKWFbcl09ZS5yZWFkQml0KCk7ZS5ieXRlQWxpZ24oKX1yZXR1cm4gcn1mdW5jdGlvbiBkZWNvZGVNTVJCaXRtYXAoZSx0LGEscil7Y29uc3Qgbj17SzotMSxDb2x1bW5zOnQsUm93czphLEJsYWNrSXMxOiEwLEVuZE9mQmxvY2s6cn0saT1uZXcgcy5DQ0lUVEZheERlY29kZXIoZSxuKSxvPVtdO2xldCBjLGw9ITE7Zm9yKGxldCBlPTA7ZTxhO2UrKyl7Y29uc3QgZT1uZXcgVWludDhBcnJheSh0KTtvLnB1c2goZSk7bGV0IGE9LTE7Zm9yKGxldCByPTA7cjx0O3IrKyl7aWYoYTwwKXtjPWkucmVhZE5leHRDaGFyKCk7aWYoLTE9PT1jKXtjPTA7bD0hMH1hPTd9ZVtyXT1jPj5hJjE7YS0tfX1pZihyJiYhbCl7Y29uc3QgZT01O2ZvcihsZXQgdD0wO3Q8ZSYmLTEhPT1pLnJlYWROZXh0Q2hhcigpO3QrKyk7fXJldHVybiBvfXQuSmJpZzJJbWFnZT1jbGFzcyBKYmlnMkltYWdle3BhcnNlQ2h1bmtzKGUpe3JldHVybiBmdW5jdGlvbiBwYXJzZUpiaWcyQ2h1bmtzKGUpe2NvbnN0IHQ9bmV3IFNpbXBsZVNlZ21lbnRWaXNpdG9yO2ZvcihsZXQgYT0wLHI9ZS5sZW5ndGg7YTxyO2ErKyl7Y29uc3Qgcj1lW2FdO3Byb2Nlc3NTZWdtZW50cyhyZWFkU2VnbWVudHMoe30sci5kYXRhLHIuc3RhcnQsci5lbmQpLHQpfXJldHVybiB0LmJ1ZmZlcn0oZSl9cGFyc2UoZSl7dGhyb3cgbmV3IEVycm9yKCJOb3QgaW1wbGVtZW50ZWQ6IEpiaWcySW1hZ2UucGFyc2UiKX19fSwoZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkFyaXRobWV0aWNEZWNvZGVyPXZvaWQgMDtjb25zdCBhPVt7cWU6MjIwMTcsbm1wczoxLG5scHM6MSxzd2l0Y2hGbGFnOjF9LHtxZToxMzMxMyxubXBzOjIsbmxwczo2LHN3aXRjaEZsYWc6MH0se3FlOjYxNDUsbm1wczozLG5scHM6OSxzd2l0Y2hGbGFnOjB9LHtxZToyNzUzLG5tcHM6NCxubHBzOjEyLHN3aXRjaEZsYWc6MH0se3FlOjEzMTMsbm1wczo1LG5scHM6Mjksc3dpdGNoRmxhZzowfSx7cWU6NTQ1LG5tcHM6MzgsbmxwczozMyxzd2l0Y2hGbGFnOjB9LHtxZToyMjAxNyxubXBzOjcsbmxwczo2LHN3aXRjaEZsYWc6MX0se3FlOjIxNTA1LG5tcHM6OCxubHBzOjE0LHN3aXRjaEZsYWc6MH0se3FlOjE4NDMzLG5tcHM6OSxubHBzOjE0LHN3aXRjaEZsYWc6MH0se3FlOjE0MzM3LG5tcHM6MTAsbmxwczoxNCxzd2l0Y2hGbGFnOjB9LHtxZToxMjI4OSxubXBzOjExLG5scHM6MTcsc3dpdGNoRmxhZzowfSx7cWU6OTIxNyxubXBzOjEyLG5scHM6MTgsc3dpdGNoRmxhZzowfSx7cWU6NzE2OSxubXBzOjEzLG5scHM6MjAsc3dpdGNoRmxhZzowfSx7cWU6NTYzMyxubXBzOjI5LG5scHM6MjEsc3dpdGNoRmxhZzowfSx7cWU6MjIwMTcsbm1wczoxNSxubHBzOjE0LHN3aXRjaEZsYWc6MX0se3FlOjIxNTA1LG5tcHM6MTYsbmxwczoxNCxzd2l0Y2hGbGFnOjB9LHtxZToyMDczNyxubXBzOjE3LG5scHM6MTUsc3dpdGNoRmxhZzowfSx7cWU6MTg0MzMsbm1wczoxOCxubHBzOjE2LHN3aXRjaEZsYWc6MH0se3FlOjE0MzM3LG5tcHM6MTksbmxwczoxNyxzd2l0Y2hGbGFnOjB9LHtxZToxMzMxMyxubXBzOjIwLG5scHM6MTgsc3dpdGNoRmxhZzowfSx7cWU6MTIyODksbm1wczoyMSxubHBzOjE5LHN3aXRjaEZsYWc6MH0se3FlOjEwMjQxLG5tcHM6MjIsbmxwczoxOSxzd2l0Y2hGbGFnOjB9LHtxZTo5MjE3LG5tcHM6MjMsbmxwczoyMCxzd2l0Y2hGbGFnOjB9LHtxZTo4NzA1LG5tcHM6MjQsbmxwczoyMSxzd2l0Y2hGbGFnOjB9LHtxZTo3MTY5LG5tcHM6MjUsbmxwczoyMixzd2l0Y2hGbGFnOjB9LHtxZTo2MTQ1LG5tcHM6MjYsbmxwczoyMyxzd2l0Y2hGbGFnOjB9LHtxZTo1NjMzLG5tcHM6MjcsbmxwczoyNCxzd2l0Y2hGbGFnOjB9LHtxZTo1MTIxLG5tcHM6MjgsbmxwczoyNSxzd2l0Y2hGbGFnOjB9LHtxZTo0NjA5LG5tcHM6MjksbmxwczoyNixzd2l0Y2hGbGFnOjB9LHtxZTo0MzUzLG5tcHM6MzAsbmxwczoyNyxzd2l0Y2hGbGFnOjB9LHtxZToyNzUzLG5tcHM6MzEsbmxwczoyOCxzd2l0Y2hGbGFnOjB9LHtxZToyNDk3LG5tcHM6MzIsbmxwczoyOSxzd2l0Y2hGbGFnOjB9LHtxZToyMjA5LG5tcHM6MzMsbmxwczozMCxzd2l0Y2hGbGFnOjB9LHtxZToxMzEzLG5tcHM6MzQsbmxwczozMSxzd2l0Y2hGbGFnOjB9LHtxZToxMDg5LG5tcHM6MzUsbmxwczozMixzd2l0Y2hGbGFnOjB9LHtxZTo2NzMsbm1wczozNixubHBzOjMzLHN3aXRjaEZsYWc6MH0se3FlOjU0NSxubXBzOjM3LG5scHM6MzQsc3dpdGNoRmxhZzowfSx7cWU6MzIxLG5tcHM6MzgsbmxwczozNSxzd2l0Y2hGbGFnOjB9LHtxZToyNzMsbm1wczozOSxubHBzOjM2LHN3aXRjaEZsYWc6MH0se3FlOjEzMyxubXBzOjQwLG5scHM6Mzcsc3dpdGNoRmxhZzowfSx7cWU6NzMsbm1wczo0MSxubHBzOjM4LHN3aXRjaEZsYWc6MH0se3FlOjM3LG5tcHM6NDIsbmxwczozOSxzd2l0Y2hGbGFnOjB9LHtxZToyMSxubXBzOjQzLG5scHM6NDAsc3dpdGNoRmxhZzowfSx7cWU6OSxubXBzOjQ0LG5scHM6NDEsc3dpdGNoRmxhZzowfSx7cWU6NSxubXBzOjQ1LG5scHM6NDIsc3dpdGNoRmxhZzowfSx7cWU6MSxubXBzOjQ1LG5scHM6NDMsc3dpdGNoRmxhZzowfSx7cWU6MjIwMTcsbm1wczo0NixubHBzOjQ2LHN3aXRjaEZsYWc6MH1dO3QuQXJpdGhtZXRpY0RlY29kZXI9Y2xhc3MgQXJpdGhtZXRpY0RlY29kZXJ7Y29uc3RydWN0b3IoZSx0LGEpe3RoaXMuZGF0YT1lO3RoaXMuYnA9dDt0aGlzLmRhdGFFbmQ9YTt0aGlzLmNoaWdoPWVbdF07dGhpcy5jbG93PTA7dGhpcy5ieXRlSW4oKTt0aGlzLmNoaWdoPXRoaXMuY2hpZ2g8PDcmNjU1MzV8dGhpcy5jbG93Pj45JjEyNzt0aGlzLmNsb3c9dGhpcy5jbG93PDw3JjY1NTM1O3RoaXMuY3QtPTc7dGhpcy5hPTMyNzY4fWJ5dGVJbigpe2NvbnN0IGU9dGhpcy5kYXRhO2xldCB0PXRoaXMuYnA7aWYoMjU1PT09ZVt0XSlpZihlW3QrMV0+MTQzKXt0aGlzLmNsb3crPTY1MjgwO3RoaXMuY3Q9OH1lbHNle3QrKzt0aGlzLmNsb3crPWVbdF08PDk7dGhpcy5jdD03O3RoaXMuYnA9dH1lbHNle3QrKzt0aGlzLmNsb3crPXQ8dGhpcy5kYXRhRW5kP2VbdF08PDg6NjUyODA7dGhpcy5jdD04O3RoaXMuYnA9dH1pZih0aGlzLmNsb3c+NjU1MzUpe3RoaXMuY2hpZ2grPXRoaXMuY2xvdz4+MTY7dGhpcy5jbG93Jj02NTUzNX19cmVhZEJpdChlLHQpe2xldCByPWVbdF0+PjEsbj0xJmVbdF07Y29uc3QgaT1hW3JdLHM9aS5xZTtsZXQgbyxjPXRoaXMuYS1zO2lmKHRoaXMuY2hpZ2g8cylpZihjPHMpe2M9cztvPW47cj1pLm5tcHN9ZWxzZXtjPXM7bz0xXm47MT09PWkuc3dpdGNoRmxhZyYmKG49byk7cj1pLm5scHN9ZWxzZXt0aGlzLmNoaWdoLT1zO2lmKDAhPSgzMjc2OCZjKSl7dGhpcy5hPWM7cmV0dXJuIG59aWYoYzxzKXtvPTFebjsxPT09aS5zd2l0Y2hGbGFnJiYobj1vKTtyPWkubmxwc31lbHNle289bjtyPWkubm1wc319ZG97MD09PXRoaXMuY3QmJnRoaXMuYnl0ZUluKCk7Yzw8PTE7dGhpcy5jaGlnaD10aGlzLmNoaWdoPDwxJjY1NTM1fHRoaXMuY2xvdz4+MTUmMTt0aGlzLmNsb3c9dGhpcy5jbG93PDwxJjY1NTM1O3RoaXMuY3QtLX13aGlsZSgwPT0oMzI3NjgmYykpO3RoaXMuYT1jO2VbdF09cjw8MXxuO3JldHVybiBvfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5KcGVnU3RyZWFtPXZvaWQgMDt2YXIgcj1hKDE4KSxuPWEoNCksaT1hKDI3KSxzPWEoMik7Y2xhc3MgSnBlZ1N0cmVhbSBleHRlbmRzIHIuRGVjb2RlU3RyZWFte2NvbnN0cnVjdG9yKGUsdCxhKXtsZXQgcjtmb3IoOy0xIT09KHI9ZS5nZXRCeXRlKCkpOylpZigyNTU9PT1yKXtlLnNraXAoLTEpO2JyZWFrfXN1cGVyKHQpO3RoaXMuc3RyZWFtPWU7dGhpcy5kaWN0PWUuZGljdDt0aGlzLm1heWJlTGVuZ3RoPXQ7dGhpcy5wYXJhbXM9YX1nZXQgYnl0ZXMoKXtyZXR1cm4oMCxzLnNoYWRvdykodGhpcywiYnl0ZXMiLHRoaXMuc3RyZWFtLmdldEJ5dGVzKHRoaXMubWF5YmVMZW5ndGgpKX1lbnN1cmVCdWZmZXIoZSl7fXJlYWRCbG9jaygpe2lmKHRoaXMuZW9mKXJldHVybjtjb25zdCBlPXtkZWNvZGVUcmFuc2Zvcm06dm9pZCAwLGNvbG9yVHJhbnNmb3JtOnZvaWQgMH0sdD10aGlzLmRpY3QuZ2V0QXJyYXkoIkQiLCJEZWNvZGUiKTtpZigodGhpcy5mb3JjZVJHQkF8fHRoaXMuZm9yY2VSR0IpJiZBcnJheS5pc0FycmF5KHQpKXtjb25zdCBhPXRoaXMuZGljdC5nZXQoIkJQQyIsIkJpdHNQZXJDb21wb25lbnQiKXx8OCxyPXQubGVuZ3RoLG49bmV3IEludDMyQXJyYXkocik7bGV0IGk9ITE7Y29uc3Qgcz0oMTw8YSktMTtmb3IobGV0IGU9MDtlPHI7ZSs9Mil7bltlXT0yNTYqKHRbZSsxXS10W2VdKXwwO25bZSsxXT10W2VdKnN8MDsyNTY9PT1uW2VdJiYwPT09bltlKzFdfHwoaT0hMCl9aSYmKGUuZGVjb2RlVHJhbnNmb3JtPW4pfWlmKHRoaXMucGFyYW1zIGluc3RhbmNlb2Ygbi5EaWN0KXtjb25zdCB0PXRoaXMucGFyYW1zLmdldCgiQ29sb3JUcmFuc2Zvcm0iKTtOdW1iZXIuaXNJbnRlZ2VyKHQpJiYoZS5jb2xvclRyYW5zZm9ybT10KX1jb25zdCBhPW5ldyBpLkpwZWdJbWFnZShlKTthLnBhcnNlKHRoaXMuYnl0ZXMpO2NvbnN0IHI9YS5nZXREYXRhKHt3aWR0aDp0aGlzLmRyYXdXaWR0aCxoZWlnaHQ6dGhpcy5kcmF3SGVpZ2h0LGZvcmNlUkdCQTp0aGlzLmZvcmNlUkdCQSxmb3JjZVJHQjp0aGlzLmZvcmNlUkdCLGlzU291cmNlUERGOiEwfSk7dGhpcy5idWZmZXI9cjt0aGlzLmJ1ZmZlckxlbmd0aD1yLmxlbmd0aDt0aGlzLmVvZj0hMH19dC5KcGVnU3RyZWFtPUpwZWdTdHJlYW19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5KcGVnSW1hZ2U9dm9pZCAwO3ZhciByPWEoMiksbj1hKDI4KSxpPWEoMyk7Y2xhc3MgSnBlZ0Vycm9yIGV4dGVuZHMgci5CYXNlRXhjZXB0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGBKUEVHIGVycm9yOiAke2V9YCwiSnBlZ0Vycm9yIil9fWNsYXNzIEROTE1hcmtlckVycm9yIGV4dGVuZHMgci5CYXNlRXhjZXB0aW9ue2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoZSwiRE5MTWFya2VyRXJyb3IiKTt0aGlzLnNjYW5MaW5lcz10fX1jbGFzcyBFT0lNYXJrZXJFcnJvciBleHRlbmRzIHIuQmFzZUV4Y2VwdGlvbntjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJFT0lNYXJrZXJFcnJvciIpfX1jb25zdCBzPW5ldyBVaW50OEFycmF5KFswLDEsOCwxNiw5LDIsMywxMCwxNywyNCwzMiwyNSwxOCwxMSw0LDUsMTIsMTksMjYsMzMsNDAsNDgsNDEsMzQsMjcsMjAsMTMsNiw3LDE0LDIxLDI4LDM1LDQyLDQ5LDU2LDU3LDUwLDQzLDM2LDI5LDIyLDE1LDIzLDMwLDM3LDQ0LDUxLDU4LDU5LDUyLDQ1LDM4LDMxLDM5LDQ2LDUzLDYwLDYxLDU0LDQ3LDU1LDYyLDYzXSksbz00MDE3LGM9Nzk5LGw9MzQwNixoPTIyNzYsdT0xNTY3LGQ9Mzc4NCxmPTU3OTMsZz0yODk2O2Z1bmN0aW9uIGJ1aWxkSHVmZm1hblRhYmxlKGUsdCl7bGV0IGEscixuPTAsaT0xNjtmb3IoO2k+MCYmIWVbaS0xXTspaS0tO2NvbnN0IHM9W3tjaGlsZHJlbjpbXSxpbmRleDowfV07bGV0IG8sYz1zWzBdO2ZvcihhPTA7YTxpO2ErKyl7Zm9yKHI9MDtyPGVbYV07cisrKXtjPXMucG9wKCk7Yy5jaGlsZHJlbltjLmluZGV4XT10W25dO2Zvcig7Yy5pbmRleD4wOyljPXMucG9wKCk7Yy5pbmRleCsrO3MucHVzaChjKTtmb3IoO3MubGVuZ3RoPD1hOyl7cy5wdXNoKG89e2NoaWxkcmVuOltdLGluZGV4OjB9KTtjLmNoaWxkcmVuW2MuaW5kZXhdPW8uY2hpbGRyZW47Yz1vfW4rK31pZihhKzE8aSl7cy5wdXNoKG89e2NoaWxkcmVuOltdLGluZGV4OjB9KTtjLmNoaWxkcmVuW2MuaW5kZXhdPW8uY2hpbGRyZW47Yz1vfX1yZXR1cm4gc1swXS5jaGlsZHJlbn1mdW5jdGlvbiBnZXRCbG9ja0J1ZmZlck9mZnNldChlLHQsYSl7cmV0dXJuIDY0KigoZS5ibG9ja3NQZXJMaW5lKzEpKnQrYSl9ZnVuY3Rpb24gZGVjb2RlU2NhbihlLHQsYSxuLG8sYyxsLGgsdSxkPSExKXtjb25zdCBmPWEubWN1c1BlckxpbmUsZz1hLnByb2dyZXNzaXZlLHA9dDtsZXQgbT0wLGI9MDtmdW5jdGlvbiByZWFkQml0KCl7aWYoYj4wKXtiLS07cmV0dXJuIG0+PmImMX1tPWVbdCsrXTtpZigyNTU9PT1tKXtjb25zdCByPWVbdCsrXTtpZihyKXtpZigyMjA9PT1yJiZkKXt0Kz0yO2NvbnN0IHI9KDAsaS5yZWFkVWludDE2KShlLHQpO3QrPTI7aWYocj4wJiZyIT09YS5zY2FuTGluZXMpdGhyb3cgbmV3IEROTE1hcmtlckVycm9yKCJGb3VuZCBETkwgbWFya2VyICgweEZGREMpIHdoaWxlIHBhcnNpbmcgc2NhbiBkYXRhIixyKX1lbHNlIGlmKDIxNz09PXIpe2lmKGQpe2NvbnN0IGU9eCooOD09PWEucHJlY2lzaW9uPzg6MCk7aWYoZT4wJiZNYXRoLnJvdW5kKGEuc2NhbkxpbmVzL2UpPj01KXRocm93IG5ldyBETkxNYXJrZXJFcnJvcigiRm91bmQgRU9JIG1hcmtlciAoMHhGRkQ5KSB3aGlsZSBwYXJzaW5nIHNjYW4gZGF0YSwgcG9zc2libHkgY2F1c2VkIGJ5IGluY29ycmVjdCBgc2NhbkxpbmVzYCBwYXJhbWV0ZXIiLGUpfXRocm93IG5ldyBFT0lNYXJrZXJFcnJvcigiRm91bmQgRU9JIG1hcmtlciAoMHhGRkQ5KSB3aGlsZSBwYXJzaW5nIHNjYW4gZGF0YSIpfXRocm93IG5ldyBKcGVnRXJyb3IoYHVuZXhwZWN0ZWQgbWFya2VyICR7KG08PDh8cikudG9TdHJpbmcoMTYpfWApfX1iPTc7cmV0dXJuIG0+Pj43fWZ1bmN0aW9uIGRlY29kZUh1ZmZtYW4oZSl7bGV0IHQ9ZTtmb3IoOzspe3Q9dFtyZWFkQml0KCldO3N3aXRjaCh0eXBlb2YgdCl7Y2FzZSJudW1iZXIiOnJldHVybiB0O2Nhc2Uib2JqZWN0Ijpjb250aW51ZX10aHJvdyBuZXcgSnBlZ0Vycm9yKCJpbnZhbGlkIGh1ZmZtYW4gc2VxdWVuY2UiKX19ZnVuY3Rpb24gcmVjZWl2ZShlKXtsZXQgdD0wO2Zvcig7ZT4wOyl7dD10PDwxfHJlYWRCaXQoKTtlLS19cmV0dXJuIHR9ZnVuY3Rpb24gcmVjZWl2ZUFuZEV4dGVuZChlKXtpZigxPT09ZSlyZXR1cm4gMT09PXJlYWRCaXQoKT8xOi0xO2NvbnN0IHQ9cmVjZWl2ZShlKTtyZXR1cm4gdD49MTw8ZS0xP3Q6dCsoLTE8PGUpKzF9bGV0IHk9MDtsZXQgdyxTPTA7bGV0IHg9MDtmdW5jdGlvbiBkZWNvZGVNY3UoZSx0LGEscixuKXtjb25zdCBpPWElZjt4PShhL2Z8MCkqZS52K3I7Y29uc3Qgcz1pKmUuaCtuO3QoZSxnZXRCbG9ja0J1ZmZlck9mZnNldChlLHgscykpfWZ1bmN0aW9uIGRlY29kZUJsb2NrKGUsdCxhKXt4PWEvZS5ibG9ja3NQZXJMaW5lfDA7Y29uc3Qgcj1hJWUuYmxvY2tzUGVyTGluZTt0KGUsZ2V0QmxvY2tCdWZmZXJPZmZzZXQoZSx4LHIpKX1jb25zdCBDPW4ubGVuZ3RoO2xldCBrLHYsRixPLFQsTTtNPWc/MD09PWM/MD09PWg/ZnVuY3Rpb24gZGVjb2RlRENGaXJzdChlLHQpe2NvbnN0IGE9ZGVjb2RlSHVmZm1hbihlLmh1ZmZtYW5UYWJsZURDKSxyPTA9PT1hPzA6cmVjZWl2ZUFuZEV4dGVuZChhKTw8dTtlLmJsb2NrRGF0YVt0XT1lLnByZWQrPXJ9OmZ1bmN0aW9uIGRlY29kZURDU3VjY2Vzc2l2ZShlLHQpe2UuYmxvY2tEYXRhW3RdfD1yZWFkQml0KCk8PHV9OjA9PT1oP2Z1bmN0aW9uIGRlY29kZUFDRmlyc3QoZSx0KXtpZih5PjApe3ktLTtyZXR1cm59bGV0IGE9Yztjb25zdCByPWw7Zm9yKDthPD1yOyl7Y29uc3Qgcj1kZWNvZGVIdWZmbWFuKGUuaHVmZm1hblRhYmxlQUMpLG49MTUmcixpPXI+PjQ7aWYoMD09PW4pe2lmKGk8MTUpe3k9cmVjZWl2ZShpKSsoMTw8aSktMTticmVha31hKz0xNjtjb250aW51ZX1hKz1pO2NvbnN0IG89c1thXTtlLmJsb2NrRGF0YVt0K29dPXJlY2VpdmVBbmRFeHRlbmQobikqKDE8PHUpO2ErK319OmZ1bmN0aW9uIGRlY29kZUFDU3VjY2Vzc2l2ZShlLHQpe2xldCBhPWM7Y29uc3Qgcj1sO2xldCBuLGksbz0wO2Zvcig7YTw9cjspe2NvbnN0IHI9dCtzW2FdLGM9ZS5ibG9ja0RhdGFbcl08MD8tMToxO3N3aXRjaChTKXtjYXNlIDA6aT1kZWNvZGVIdWZmbWFuKGUuaHVmZm1hblRhYmxlQUMpO249MTUmaTtvPWk+PjQ7aWYoMD09PW4paWYobzwxNSl7eT1yZWNlaXZlKG8pKygxPDxvKTtTPTR9ZWxzZXtvPTE2O1M9MX1lbHNle2lmKDEhPT1uKXRocm93IG5ldyBKcGVnRXJyb3IoImludmFsaWQgQUNuIGVuY29kaW5nIik7dz1yZWNlaXZlQW5kRXh0ZW5kKG4pO1M9bz8yOjN9Y29udGludWU7Y2FzZSAxOmNhc2UgMjppZihlLmJsb2NrRGF0YVtyXSllLmJsb2NrRGF0YVtyXSs9YyoocmVhZEJpdCgpPDx1KTtlbHNle28tLTswPT09byYmKFM9Mj09PVM/MzowKX1icmVhaztjYXNlIDM6aWYoZS5ibG9ja0RhdGFbcl0pZS5ibG9ja0RhdGFbcl0rPWMqKHJlYWRCaXQoKTw8dSk7ZWxzZXtlLmJsb2NrRGF0YVtyXT13PDx1O1M9MH1icmVhaztjYXNlIDQ6ZS5ibG9ja0RhdGFbcl0mJihlLmJsb2NrRGF0YVtyXSs9YyoocmVhZEJpdCgpPDx1KSl9YSsrfWlmKDQ9PT1TKXt5LS07MD09PXkmJihTPTApfX06ZnVuY3Rpb24gZGVjb2RlQmFzZWxpbmUoZSx0KXtjb25zdCBhPWRlY29kZUh1ZmZtYW4oZS5odWZmbWFuVGFibGVEQykscj0wPT09YT8wOnJlY2VpdmVBbmRFeHRlbmQoYSk7ZS5ibG9ja0RhdGFbdF09ZS5wcmVkKz1yO2xldCBuPTE7Zm9yKDtuPDY0Oyl7Y29uc3QgYT1kZWNvZGVIdWZmbWFuKGUuaHVmZm1hblRhYmxlQUMpLHI9MTUmYSxpPWE+PjQ7aWYoMD09PXIpe2lmKGk8MTUpYnJlYWs7bis9MTY7Y29udGludWV9bis9aTtjb25zdCBvPXNbbl07ZS5ibG9ja0RhdGFbdCtvXT1yZWNlaXZlQW5kRXh0ZW5kKHIpO24rK319O2xldCBELEU9MDtjb25zdCBOPTE9PT1DP25bMF0uYmxvY2tzUGVyTGluZSpuWzBdLmJsb2Nrc1BlckNvbHVtbjpmKmEubWN1c1BlckNvbHVtbjtsZXQgUixMO2Zvcig7RTw9Tjspe2NvbnN0IGE9bz9NYXRoLm1pbihOLUUsbyk6TjtpZihhPjApe2Zvcih2PTA7djxDO3YrKyluW3ZdLnByZWQ9MDt5PTA7aWYoMT09PUMpe2s9blswXTtmb3IoVD0wO1Q8YTtUKyspe2RlY29kZUJsb2NrKGssTSxFKTtFKyt9fWVsc2UgZm9yKFQ9MDtUPGE7VCsrKXtmb3Iodj0wO3Y8Qzt2Kyspe2s9blt2XTtSPWsuaDtMPWsudjtmb3IoRj0wO0Y8TDtGKyspZm9yKE89MDtPPFI7TysrKWRlY29kZU1jdShrLE0sRSxGLE8pfUUrK319Yj0wO0Q9ZmluZE5leHRGaWxlTWFya2VyKGUsdCk7aWYoIUQpYnJlYWs7aWYoRC5pbnZhbGlkKXtjb25zdCBlPWE+MD8idW5leHBlY3RlZCI6ImV4Y2Vzc2l2ZSI7KDAsci53YXJuKShgZGVjb2RlU2NhbiAtICR7ZX0gTUNVIGRhdGEsIGN1cnJlbnQgbWFya2VyIGlzOiAke0QuaW52YWxpZH1gKTt0PUQub2Zmc2V0fWlmKCEoRC5tYXJrZXI+PTY1NDg4JiZELm1hcmtlcjw9NjU0OTUpKWJyZWFrO3QrPTJ9cmV0dXJuIHQtcH1mdW5jdGlvbiBxdWFudGl6ZUFuZEludmVyc2UoZSx0LGEpe2NvbnN0IHI9ZS5xdWFudGl6YXRpb25UYWJsZSxuPWUuYmxvY2tEYXRhO2xldCBpLHMscCxtLGIseSx3LFMseCxDLGssdixGLE8sVCxNLEQ7aWYoIXIpdGhyb3cgbmV3IEpwZWdFcnJvcigibWlzc2luZyByZXF1aXJlZCBRdWFudGl6YXRpb24gVGFibGUuIik7Zm9yKGxldCBlPTA7ZTw2NDtlKz04KXt4PW5bdCtlXTtDPW5bdCtlKzFdO2s9blt0K2UrMl07dj1uW3QrZSszXTtGPW5bdCtlKzRdO089blt0K2UrNV07VD1uW3QrZSs2XTtNPW5bdCtlKzddO3gqPXJbZV07aWYoMCE9KEN8a3x2fEZ8T3xUfE0pKXtDKj1yW2UrMV07ayo9cltlKzJdO3YqPXJbZSszXTtGKj1yW2UrNF07Tyo9cltlKzVdO1QqPXJbZSs2XTtNKj1yW2UrN107aT1mKngrMTI4Pj44O3M9ZipGKzEyOD4+ODtwPWs7bT1UO2I9ZyooQy1NKSsxMjg+Pjg7Uz1nKihDK00pKzEyOD4+ODt5PXY8PDQ7dz1PPDw0O2k9aStzKzE+PjE7cz1pLXM7RD1wKmQrbSp1KzEyOD4+ODtwPXAqdS1tKmQrMTI4Pj44O209RDtiPWIrdysxPj4xO3c9Yi13O1M9Uyt5KzE+PjE7eT1TLXk7aT1pK20rMT4+MTttPWktbTtzPXMrcCsxPj4xO3A9cy1wO0Q9YipoK1MqbCsyMDQ4Pj4xMjtiPWIqbC1TKmgrMjA0OD4+MTI7Uz1EO0Q9eSpjK3cqbysyMDQ4Pj4xMjt5PXkqby13KmMrMjA0OD4+MTI7dz1EO2FbZV09aStTO2FbZSs3XT1pLVM7YVtlKzFdPXMrdzthW2UrNl09cy13O2FbZSsyXT1wK3k7YVtlKzVdPXAteTthW2UrM109bStiO2FbZSs0XT1tLWJ9ZWxzZXtEPWYqeCs1MTI+PjEwO2FbZV09RDthW2UrMV09RDthW2UrMl09RDthW2UrM109RDthW2UrNF09RDthW2UrNV09RDthW2UrNl09RDthW2UrN109RH19Zm9yKGxldCBlPTA7ZTw4OysrZSl7eD1hW2VdO0M9YVtlKzhdO2s9YVtlKzE2XTt2PWFbZSsyNF07Rj1hW2UrMzJdO089YVtlKzQwXTtUPWFbZSs0OF07TT1hW2UrNTZdO2lmKDAhPShDfGt8dnxGfE98VHxNKSl7aT1mKngrMjA0OD4+MTI7cz1mKkYrMjA0OD4+MTI7cD1rO209VDtiPWcqKEMtTSkrMjA0OD4+MTI7Uz1nKihDK00pKzIwNDg+PjEyO3k9djt3PU87aT00MTEyKyhpK3MrMT4+MSk7cz1pLXM7RD1wKmQrbSp1KzIwNDg+PjEyO3A9cCp1LW0qZCsyMDQ4Pj4xMjttPUQ7Yj1iK3crMT4+MTt3PWItdztTPVMreSsxPj4xO3k9Uy15O2k9aSttKzE+PjE7bT1pLW07cz1zK3ArMT4+MTtwPXMtcDtEPWIqaCtTKmwrMjA0OD4+MTI7Yj1iKmwtUypoKzIwNDg+PjEyO1M9RDtEPXkqYyt3Km8rMjA0OD4+MTI7eT15Km8tdypjKzIwNDg+PjEyO3c9RDt4PWkrUztNPWktUztDPXMrdztUPXMtdztrPXAreTtPPXAteTt2PW0rYjtGPW0tYjt4PDE2P3g9MDp4Pj00MDgwP3g9MjU1Ong+Pj00O0M8MTY/Qz0wOkM+PTQwODA/Qz0yNTU6Qz4+PTQ7azwxNj9rPTA6az49NDA4MD9rPTI1NTprPj49NDt2PDE2P3Y9MDp2Pj00MDgwP3Y9MjU1OnY+Pj00O0Y8MTY/Rj0wOkY+PTQwODA/Rj0yNTU6Rj4+PTQ7TzwxNj9PPTA6Tz49NDA4MD9PPTI1NTpPPj49NDtUPDE2P1Q9MDpUPj00MDgwP1Q9MjU1OlQ+Pj00O008MTY/TT0wOk0+PTQwODA/TT0yNTU6TT4+PTQ7blt0K2VdPXg7blt0K2UrOF09QztuW3QrZSsxNl09aztuW3QrZSsyNF09djtuW3QrZSszMl09RjtuW3QrZSs0MF09TztuW3QrZSs0OF09VDtuW3QrZSs1Nl09TX1lbHNle0Q9Zip4KzgxOTI+PjE0O0Q9RDwtMjA0MD8wOkQ+PTIwMjQ/MjU1OkQrMjA1Nj4+NDtuW3QrZV09RDtuW3QrZSs4XT1EO25bdCtlKzE2XT1EO25bdCtlKzI0XT1EO25bdCtlKzMyXT1EO25bdCtlKzQwXT1EO25bdCtlKzQ4XT1EO25bdCtlKzU2XT1EfX19ZnVuY3Rpb24gYnVpbGRDb21wb25lbnREYXRhKGUsdCl7Y29uc3QgYT10LmJsb2Nrc1BlckxpbmUscj10LmJsb2Nrc1BlckNvbHVtbixuPW5ldyBJbnQxNkFycmF5KDY0KTtmb3IobGV0IGU9MDtlPHI7ZSsrKWZvcihsZXQgcj0wO3I8YTtyKyspe3F1YW50aXplQW5kSW52ZXJzZSh0LGdldEJsb2NrQnVmZmVyT2Zmc2V0KHQsZSxyKSxuKX1yZXR1cm4gdC5ibG9ja0RhdGF9ZnVuY3Rpb24gZmluZE5leHRGaWxlTWFya2VyKGUsdCxhPXQpe2NvbnN0IHI9ZS5sZW5ndGgtMTtsZXQgbj1hPHQ/YTp0O2lmKHQ+PXIpcmV0dXJuIG51bGw7Y29uc3Qgcz0oMCxpLnJlYWRVaW50MTYpKGUsdCk7aWYocz49NjU0NzImJnM8PTY1NTM0KXJldHVybntpbnZhbGlkOm51bGwsbWFya2VyOnMsb2Zmc2V0OnR9O2xldCBvPSgwLGkucmVhZFVpbnQxNikoZSxuKTtmb3IoOyEobz49NjU0NzImJm88PTY1NTM0KTspe2lmKCsrbj49cilyZXR1cm4gbnVsbDtvPSgwLGkucmVhZFVpbnQxNikoZSxuKX1yZXR1cm57aW52YWxpZDpzLnRvU3RyaW5nKDE2KSxtYXJrZXI6byxvZmZzZXQ6bn19dC5KcGVnSW1hZ2U9Y2xhc3MgSnBlZ0ltYWdle2NvbnN0cnVjdG9yKHtkZWNvZGVUcmFuc2Zvcm06ZT1udWxsLGNvbG9yVHJhbnNmb3JtOnQ9LTF9PXt9KXt0aGlzLl9kZWNvZGVUcmFuc2Zvcm09ZTt0aGlzLl9jb2xvclRyYW5zZm9ybT10fXBhcnNlKGUse2RubFNjYW5MaW5lczp0PW51bGx9PXt9KXtmdW5jdGlvbiByZWFkRGF0YUJsb2NrKCl7Y29uc3QgdD0oMCxpLnJlYWRVaW50MTYpKGUsbyk7bys9MjtsZXQgYT1vK3QtMjtjb25zdCBuPWZpbmROZXh0RmlsZU1hcmtlcihlLGEsbyk7aWYobj8uaW52YWxpZCl7KDAsci53YXJuKSgicmVhZERhdGFCbG9jayAtIGluY29ycmVjdCBsZW5ndGgsIGN1cnJlbnQgbWFya2VyIGlzOiAiK24uaW52YWxpZCk7YT1uLm9mZnNldH1jb25zdCBzPWUuc3ViYXJyYXkobyxhKTtvKz1zLmxlbmd0aDtyZXR1cm4gc31mdW5jdGlvbiBwcmVwYXJlQ29tcG9uZW50cyhlKXtjb25zdCB0PU1hdGguY2VpbChlLnNhbXBsZXNQZXJMaW5lLzgvZS5tYXhIKSxhPU1hdGguY2VpbChlLnNjYW5MaW5lcy84L2UubWF4Vik7Zm9yKGNvbnN0IHIgb2YgZS5jb21wb25lbnRzKXtjb25zdCBuPU1hdGguY2VpbChNYXRoLmNlaWwoZS5zYW1wbGVzUGVyTGluZS84KSpyLmgvZS5tYXhIKSxpPU1hdGguY2VpbChNYXRoLmNlaWwoZS5zY2FuTGluZXMvOCkqci52L2UubWF4Vikscz10KnIuaCxvPTY0KihhKnIudikqKHMrMSk7ci5ibG9ja0RhdGE9bmV3IEludDE2QXJyYXkobyk7ci5ibG9ja3NQZXJMaW5lPW47ci5ibG9ja3NQZXJDb2x1bW49aX1lLm1jdXNQZXJMaW5lPXQ7ZS5tY3VzUGVyQ29sdW1uPWF9bGV0IGEsbixvPTAsYz1udWxsLGw9bnVsbCxoPTA7Y29uc3QgdT1bXSxkPVtdLGY9W107bGV0IGc9KDAsaS5yZWFkVWludDE2KShlLG8pO28rPTI7aWYoNjU0OTYhPT1nKXRocm93IG5ldyBKcGVnRXJyb3IoIlNPSSBub3QgZm91bmQiKTtnPSgwLGkucmVhZFVpbnQxNikoZSxvKTtvKz0yO2U6Zm9yKDs2NTQ5NyE9PWc7KXtsZXQgcCxtLGI7c3dpdGNoKGcpe2Nhc2UgNjU1MDQ6Y2FzZSA2NTUwNTpjYXNlIDY1NTA2OmNhc2UgNjU1MDc6Y2FzZSA2NTUwODpjYXNlIDY1NTA5OmNhc2UgNjU1MTA6Y2FzZSA2NTUxMTpjYXNlIDY1NTEyOmNhc2UgNjU1MTM6Y2FzZSA2NTUxNDpjYXNlIDY1NTE1OmNhc2UgNjU1MTY6Y2FzZSA2NTUxNzpjYXNlIDY1NTE4OmNhc2UgNjU1MTk6Y2FzZSA2NTUzNDpjb25zdCB5PXJlYWREYXRhQmxvY2soKTs2NTUwND09PWcmJjc0PT09eVswXSYmNzA9PT15WzFdJiY3Mz09PXlbMl0mJjcwPT09eVszXSYmMD09PXlbNF0mJihjPXt2ZXJzaW9uOnttYWpvcjp5WzVdLG1pbm9yOnlbNl19LGRlbnNpdHlVbml0czp5WzddLHhEZW5zaXR5OnlbOF08PDh8eVs5XSx5RGVuc2l0eTp5WzEwXTw8OHx5WzExXSx0aHVtYldpZHRoOnlbMTJdLHRodW1iSGVpZ2h0OnlbMTNdLHRodW1iRGF0YTp5LnN1YmFycmF5KDE0LDE0KzMqeVsxMl0qeVsxM10pfSk7NjU1MTg9PT1nJiY2NT09PXlbMF0mJjEwMD09PXlbMV0mJjExMT09PXlbMl0mJjk4PT09eVszXSYmMTAxPT09eVs0XSYmKGw9e3ZlcnNpb246eVs1XTw8OHx5WzZdLGZsYWdzMDp5WzddPDw4fHlbOF0sZmxhZ3MxOnlbOV08PDh8eVsxMF0sdHJhbnNmb3JtQ29kZTp5WzExXX0pO2JyZWFrO2Nhc2UgNjU0OTk6Y29uc3Qgdz0oMCxpLnJlYWRVaW50MTYpKGUsbyk7bys9Mjtjb25zdCBTPXcrby0yO2xldCB4O2Zvcig7bzxTOyl7Y29uc3QgdD1lW28rK10sYT1uZXcgVWludDE2QXJyYXkoNjQpO2lmKHQ+PjQ9PTApZm9yKG09MDttPDY0O20rKyl7eD1zW21dO2FbeF09ZVtvKytdfWVsc2V7aWYodD4+NCE9MSl0aHJvdyBuZXcgSnBlZ0Vycm9yKCJEUVQgLSBpbnZhbGlkIHRhYmxlIHNwZWMiKTtmb3IobT0wO208NjQ7bSsrKXt4PXNbbV07YVt4XT0oMCxpLnJlYWRVaW50MTYpKGUsbyk7bys9Mn19dVsxNSZ0XT1hfWJyZWFrO2Nhc2UgNjU0NzI6Y2FzZSA2NTQ3MzpjYXNlIDY1NDc0OmlmKGEpdGhyb3cgbmV3IEpwZWdFcnJvcigiT25seSBzaW5nbGUgZnJhbWUgSlBFR3Mgc3VwcG9ydGVkIik7bys9MjthPXt9O2EuZXh0ZW5kZWQ9NjU0NzM9PT1nO2EucHJvZ3Jlc3NpdmU9NjU0NzQ9PT1nO2EucHJlY2lzaW9uPWVbbysrXTtjb25zdCBDPSgwLGkucmVhZFVpbnQxNikoZSxvKTtvKz0yO2Euc2NhbkxpbmVzPXR8fEM7YS5zYW1wbGVzUGVyTGluZT0oMCxpLnJlYWRVaW50MTYpKGUsbyk7bys9MjthLmNvbXBvbmVudHM9W107YS5jb21wb25lbnRJZHM9e307Y29uc3Qgaz1lW28rK107bGV0IHY9MCxGPTA7Zm9yKHA9MDtwPGs7cCsrKXtjb25zdCB0PWVbb10scj1lW28rMV0+PjQsbj0xNSZlW28rMV07djxyJiYodj1yKTtGPG4mJihGPW4pO2NvbnN0IGk9ZVtvKzJdO2I9YS5jb21wb25lbnRzLnB1c2goe2g6cix2Om4scXVhbnRpemF0aW9uSWQ6aSxxdWFudGl6YXRpb25UYWJsZTpudWxsfSk7YS5jb21wb25lbnRJZHNbdF09Yi0xO28rPTN9YS5tYXhIPXY7YS5tYXhWPUY7cHJlcGFyZUNvbXBvbmVudHMoYSk7YnJlYWs7Y2FzZSA2NTQ3Njpjb25zdCBPPSgwLGkucmVhZFVpbnQxNikoZSxvKTtvKz0yO2ZvcihwPTI7cDxPOyl7Y29uc3QgdD1lW28rK10sYT1uZXcgVWludDhBcnJheSgxNik7bGV0IHI9MDtmb3IobT0wO208MTY7bSsrLG8rKylyKz1hW21dPWVbb107Y29uc3Qgbj1uZXcgVWludDhBcnJheShyKTtmb3IobT0wO208cjttKyssbysrKW5bbV09ZVtvXTtwKz0xNytyOyh0Pj40PT0wP2Y6ZClbMTUmdF09YnVpbGRIdWZmbWFuVGFibGUoYSxuKX1icmVhaztjYXNlIDY1NTAxOm8rPTI7bj0oMCxpLnJlYWRVaW50MTYpKGUsbyk7bys9MjticmVhaztjYXNlIDY1NDk4OmNvbnN0IFQ9MT09KytoJiYhdDtvKz0yO2NvbnN0IE09ZVtvKytdLEQ9W107Zm9yKHA9MDtwPE07cCsrKXtjb25zdCB0PWVbbysrXSxyPWEuY29tcG9uZW50SWRzW3RdLG49YS5jb21wb25lbnRzW3JdO24uaW5kZXg9dDtjb25zdCBpPWVbbysrXTtuLmh1ZmZtYW5UYWJsZURDPWZbaT4+NF07bi5odWZmbWFuVGFibGVBQz1kWzE1JmldO0QucHVzaChuKX1jb25zdCBFPWVbbysrXSxOPWVbbysrXSxSPWVbbysrXTt0cnl7Y29uc3QgdD1kZWNvZGVTY2FuKGUsbyxhLEQsbixFLE4sUj4+NCwxNSZSLFQpO28rPXR9Y2F0Y2godCl7aWYodCBpbnN0YW5jZW9mIEROTE1hcmtlckVycm9yKXsoMCxyLndhcm4pKGAke3QubWVzc2FnZX0gLS0gYXR0ZW1wdGluZyB0byByZS1wYXJzZSB0aGUgSlBFRyBpbWFnZS5gKTtyZXR1cm4gdGhpcy5wYXJzZShlLHtkbmxTY2FuTGluZXM6dC5zY2FuTGluZXN9KX1pZih0IGluc3RhbmNlb2YgRU9JTWFya2VyRXJyb3IpeygwLHIud2FybikoYCR7dC5tZXNzYWdlfSAtLSBpZ25vcmluZyB0aGUgcmVzdCBvZiB0aGUgaW1hZ2UgZGF0YS5gKTticmVhayBlfXRocm93IHR9YnJlYWs7Y2FzZSA2NTUwMDpvKz00O2JyZWFrO2Nhc2UgNjU1MzU6MjU1IT09ZVtvXSYmby0tO2JyZWFrO2RlZmF1bHQ6Y29uc3QgTD1maW5kTmV4dEZpbGVNYXJrZXIoZSxvLTIsby0zKTtpZihMPy5pbnZhbGlkKXsoMCxyLndhcm4pKCJKcGVnSW1hZ2UucGFyc2UgLSB1bmV4cGVjdGVkIGRhdGEsIGN1cnJlbnQgbWFya2VyIGlzOiAiK0wuaW52YWxpZCk7bz1MLm9mZnNldDticmVha31pZighTHx8bz49ZS5sZW5ndGgtMSl7KDAsci53YXJuKSgiSnBlZ0ltYWdlLnBhcnNlIC0gcmVhY2hlZCB0aGUgZW5kIG9mIHRoZSBpbWFnZSBkYXRhIHdpdGhvdXQgZmluZGluZyBhbiBFT0kgbWFya2VyICgweEZGRDkpLiIpO2JyZWFrIGV9dGhyb3cgbmV3IEpwZWdFcnJvcigiSnBlZ0ltYWdlLnBhcnNlIC0gdW5rbm93biBtYXJrZXI6ICIrZy50b1N0cmluZygxNikpfWc9KDAsaS5yZWFkVWludDE2KShlLG8pO28rPTJ9dGhpcy53aWR0aD1hLnNhbXBsZXNQZXJMaW5lO3RoaXMuaGVpZ2h0PWEuc2NhbkxpbmVzO3RoaXMuamZpZj1jO3RoaXMuYWRvYmU9bDt0aGlzLmNvbXBvbmVudHM9W107Zm9yKGNvbnN0IGUgb2YgYS5jb21wb25lbnRzKXtjb25zdCB0PXVbZS5xdWFudGl6YXRpb25JZF07dCYmKGUucXVhbnRpemF0aW9uVGFibGU9dCk7dGhpcy5jb21wb25lbnRzLnB1c2goe2luZGV4OmUuaW5kZXgsb3V0cHV0OmJ1aWxkQ29tcG9uZW50RGF0YSgwLGUpLHNjYWxlWDplLmgvYS5tYXhILHNjYWxlWTplLnYvYS5tYXhWLGJsb2Nrc1BlckxpbmU6ZS5ibG9ja3NQZXJMaW5lLGJsb2Nrc1BlckNvbHVtbjplLmJsb2Nrc1BlckNvbHVtbn0pfXRoaXMubnVtQ29tcG9uZW50cz10aGlzLmNvbXBvbmVudHMubGVuZ3RofV9nZXRMaW5lYXJpemVkQmxvY2tEYXRhKGUsdCxhPSExKXtjb25zdCByPXRoaXMud2lkdGgvZSxuPXRoaXMuaGVpZ2h0L3Q7bGV0IGkscyxvLGMsbCxoLHUsZCxmLGcscCxtPTA7Y29uc3QgYj10aGlzLmNvbXBvbmVudHMubGVuZ3RoLHk9ZSp0KmIsdz1uZXcgVWludDhDbGFtcGVkQXJyYXkoeSksUz1uZXcgVWludDMyQXJyYXkoZSkseD00Mjk0OTY3Mjg4O2xldCBDO2Zvcih1PTA7dTxiO3UrKyl7aT10aGlzLmNvbXBvbmVudHNbdV07cz1pLnNjYWxlWCpyO289aS5zY2FsZVkqbjttPXU7cD1pLm91dHB1dDtjPWkuYmxvY2tzUGVyTGluZSsxPDwzO2lmKHMhPT1DKXtmb3IobD0wO2w8ZTtsKyspe2Q9MHxsKnM7U1tsXT0oZCZ4KTw8M3w3JmR9Qz1zfWZvcihoPTA7aDx0O2grKyl7ZD0wfGgqbztnPWMqKGQmeCl8KDcmZCk8PDM7Zm9yKGw9MDtsPGU7bCsrKXt3W21dPXBbZytTW2xdXTttKz1ifX19bGV0IGs9dGhpcy5fZGVjb2RlVHJhbnNmb3JtO2F8fDQhPT1ifHxrfHwoaz1uZXcgSW50MzJBcnJheShbLTI1NiwyNTUsLTI1NiwyNTUsLTI1NiwyNTUsLTI1NiwyNTVdKSk7aWYoaylmb3IodT0wO3U8eTspZm9yKGQ9MCxmPTA7ZDxiO2QrKyx1KyssZis9Mil3W3VdPSh3W3VdKmtbZl0+PjgpK2tbZisxXTtyZXR1cm4gd31nZXQgX2lzQ29sb3JDb252ZXJzaW9uTmVlZGVkKCl7cmV0dXJuIHRoaXMuYWRvYmU/ISF0aGlzLmFkb2JlLnRyYW5zZm9ybUNvZGU6Mz09PXRoaXMubnVtQ29tcG9uZW50cz8wIT09dGhpcy5fY29sb3JUcmFuc2Zvcm0mJig4MiE9PXRoaXMuY29tcG9uZW50c1swXS5pbmRleHx8NzEhPT10aGlzLmNvbXBvbmVudHNbMV0uaW5kZXh8fDY2IT09dGhpcy5jb21wb25lbnRzWzJdLmluZGV4KToxPT09dGhpcy5fY29sb3JUcmFuc2Zvcm19X2NvbnZlcnRZY2NUb1JnYihlKXtsZXQgdCxhLHI7Zm9yKGxldCBuPTAsaT1lLmxlbmd0aDtuPGk7bis9Myl7dD1lW25dO2E9ZVtuKzFdO3I9ZVtuKzJdO2Vbbl09dC0xNzkuNDU2KzEuNDAyKnI7ZVtuKzFdPXQrMTM1LjQ1OS0uMzQ0KmEtLjcxNCpyO2VbbisyXT10LTIyNi44MTYrMS43NzIqYX1yZXR1cm4gZX1fY29udmVydFljY1RvUmdiYShlLHQpe2ZvcihsZXQgYT0wLHI9MCxuPWUubGVuZ3RoO2E8bjthKz0zLHIrPTQpe2NvbnN0IG49ZVthXSxpPWVbYSsxXSxzPWVbYSsyXTt0W3JdPW4tMTc5LjQ1NisxLjQwMipzO3RbcisxXT1uKzEzNS40NTktLjM0NCppLS43MTQqczt0W3IrMl09bi0yMjYuODE2KzEuNzcyKmk7dFtyKzNdPTI1NX1yZXR1cm4gdH1fY29udmVydFljY2tUb1JnYihlKXtsZXQgdCxhLHIsbixpPTA7Zm9yKGxldCBzPTAsbz1lLmxlbmd0aDtzPG87cys9NCl7dD1lW3NdO2E9ZVtzKzFdO3I9ZVtzKzJdO249ZVtzKzNdO2VbaSsrXT1hKigtNjYwNjM1NjY5NDIwMzY0ZS0xOSphKy4wMDA0MzcxMzA0NzU5MjYyMzIqci01NDA4MDYxMDA2NDU5OWUtMTgqdCsuMDAwNDg0NDk3OTcxMjAyODEqbi0uMTU0MzYyMTUxODcxMTI2KS0xMjIuNjcxOTU0MDY4OTQrciooLS4wMDA5NTc5NjQzNzg0NDU3NzMqcisuMDAwODE3MDc2OTExMzQ2NjI1KnQtLjAwNDc3MjcxNDA1NDA4NzQ3Km4rMS41MzM4MDI1MzIyMTczNCkrdCooLjAwMDk2MTI1MDE4NDEzMDY4OCp0LS4wMDI2NjI1NzMzMjI4MzkzMypuKy40ODM1NzA4ODQ1MTI2NSkrbiooLS4wMDAzMzYxOTcxNzc2MTgzOTQqbisuNDg0NzkxNTYxNDkwNzc2KTtlW2krK109MTA3LjI2ODAzOTM5NzcyNCthKigyMTk5MjcxMDQ1MjU3NDFlLTE5KmEtLjAwMDY0MDk5MjAxODI5Nzk0NSpyKy4wMDA2NTkzOTcwMDEyNDU1NzcqdCsuMDAwNDI2MTA1NjUyOTM4ODM3Km4tLjE3NjQ5MTc5MjQ2Mjg3NSkrciooLS4wMDA3NzgyNjk5NDE1MTM2ODMqcisuMDAxMzA4NzIyNjE0MDgyNzUqdCsuMDAwNzcwNDgyNjMxODAxMTMyKm4tLjE1MTA1MTQ5Mjc3NTU2MikrdCooLjAwMTI2OTM1MzY4MTE0ODQzKnQtLjAwMjY1MDkwMTg5MDEwODk4Km4rLjI1ODAyOTEwMjA2ODQ1KStuKigtLjAwMDMxODkxMzExNzU4ODMyOCpuLS4yMTM3NDI0MDAzMjM2NjUpO2VbaSsrXT1hKigtLjAwMDU3MDExNTE5Njk3MzY3NyphLTI2MzQwOTA1MTAwNDU4OWUtMTkqcisuMDAyMDc0MTA4ODExNTAxMip0LS4wMDI4ODI2MDIzNjg1MzQ0MipuKy44MTQyNzI5NjgzNTkyOTUpLTIwLjgxMDAxMjU0Njk0NytyKigtMTUzNDk2MDU3NDQwOTc1ZS0xOSpyLS4wMDAxMzI2ODkwNDM5NjE0NDYqdCsuMDAwNTYwODMzNjkxMjQyODEyKm4tLjE5NTE1MjAyNzUzNDA0OSkrdCooLjAwMTc0NDE4MTMyOTI3NTgyKnQtLjAwMjU1MjQzMzIxNDM5MzQ3Km4rLjExNjkzNTAyMDQ2NTE0NSkrbiooLS4wMDAzNDM1MzE5OTY1MTA1NTUqbisuMjQxNjUyNjAyMzI0MDcpfXJldHVybiBlLnN1YmFycmF5KDAsaSl9X2NvbnZlcnRZY2NrVG9SZ2JhKGUpe2ZvcihsZXQgdD0wLGE9ZS5sZW5ndGg7dDxhO3QrPTQpe2NvbnN0IGE9ZVt0XSxyPWVbdCsxXSxuPWVbdCsyXSxpPWVbdCszXTtlW3RdPXIqKC02NjA2MzU2Njk0MjAzNjRlLTE5KnIrLjAwMDQzNzEzMDQ3NTkyNjIzMipuLTU0MDgwNjEwMDY0NTk5ZS0xOCphKy4wMDA0ODQ0OTc5NzEyMDI4MSppLS4xNTQzNjIxNTE4NzExMjYpLTEyMi42NzE5NTQwNjg5NCtuKigtLjAwMDk1Nzk2NDM3ODQ0NTc3MypuKy4wMDA4MTcwNzY5MTEzNDY2MjUqYS0uMDA0NzcyNzE0MDU0MDg3NDcqaSsxLjUzMzgwMjUzMjIxNzM0KSthKiguMDAwOTYxMjUwMTg0MTMwNjg4KmEtLjAwMjY2MjU3MzMyMjgzOTMzKmkrLjQ4MzU3MDg4NDUxMjY1KStpKigtLjAwMDMzNjE5NzE3NzYxODM5NCppKy40ODQ3OTE1NjE0OTA3NzYpO2VbdCsxXT0xMDcuMjY4MDM5Mzk3NzI0K3IqKDIxOTkyNzEwNDUyNTc0MWUtMTkqci0uMDAwNjQwOTkyMDE4Mjk3OTQ1Km4rLjAwMDY1OTM5NzAwMTI0NTU3NyphKy4wMDA0MjYxMDU2NTI5Mzg4MzcqaS0uMTc2NDkxNzkyNDYyODc1KStuKigtLjAwMDc3ODI2OTk0MTUxMzY4MypuKy4wMDEzMDg3MjI2MTQwODI3NSphKy4wMDA3NzA0ODI2MzE4MDExMzIqaS0uMTUxMDUxNDkyNzc1NTYyKSthKiguMDAxMjY5MzUzNjgxMTQ4NDMqYS0uMDAyNjUwOTAxODkwMTA4OTgqaSsuMjU4MDI5MTAyMDY4NDUpK2kqKC0uMDAwMzE4OTEzMTE3NTg4MzI4KmktLjIxMzc0MjQwMDMyMzY2NSk7ZVt0KzJdPXIqKC0uMDAwNTcwMTE1MTk2OTczNjc3KnItMjYzNDA5MDUxMDA0NTg5ZS0xOSpuKy4wMDIwNzQxMDg4MTE1MDEyKmEtLjAwMjg4MjYwMjM2ODUzNDQyKmkrLjgxNDI3Mjk2ODM1OTI5NSktMjAuODEwMDEyNTQ2OTQ3K24qKC0xNTM0OTYwNTc0NDA5NzVlLTE5Km4tLjAwMDEzMjY4OTA0Mzk2MTQ0NiphKy4wMDA1NjA4MzM2OTEyNDI4MTIqaS0uMTk1MTUyMDI3NTM0MDQ5KSthKiguMDAxNzQ0MTgxMzI5Mjc1ODIqYS0uMDAyNTUyNDMzMjE0MzkzNDcqaSsuMTE2OTM1MDIwNDY1MTQ1KStpKigtLjAwMDM0MzUzMTk5NjUxMDU1NSppKy4yNDE2NTI2MDIzMjQwNyk7ZVt0KzNdPTI1NX1yZXR1cm4gZX1fY29udmVydFljY2tUb0NteWsoZSl7bGV0IHQsYSxyO2ZvcihsZXQgbj0wLGk9ZS5sZW5ndGg7bjxpO24rPTQpe3Q9ZVtuXTthPWVbbisxXTtyPWVbbisyXTtlW25dPTQzNC40NTYtdC0xLjQwMipyO2VbbisxXT0xMTkuNTQxLXQrLjM0NCphKy43MTQqcjtlW24rMl09NDgxLjgxNi10LTEuNzcyKmF9cmV0dXJuIGV9X2NvbnZlcnRDbXlrVG9SZ2IoZSl7bGV0IHQsYSxyLG4saT0wO2ZvcihsZXQgcz0wLG89ZS5sZW5ndGg7czxvO3MrPTQpe3Q9ZVtzXTthPWVbcysxXTtyPWVbcysyXTtuPWVbcyszXTtlW2krK109MjU1K3QqKC02NzQ3MTQ3MDczNjAyNDQxZS0yMCp0Ky4wMDA4Mzc5MjYyMTIxMDEzNzI3KmErLjAwMDI4OTQ3MTgxODg2NDMyOTQqcisuMDAzMjY0MjMxMDU3NTM3ODA2Km4tMS4xMTg1NjExODY3MjAzOTM3KSthKigyNjM3NDEwNzYxNjA4OTQwNWUtMjEqYS04NjI2OTQ5MTU4NjM4NTcyZS0yMCpyLS4wMDAyNzQ4NzY5MDY3NDk5NDkxKm4tLjAyMTU1Njg4Nzk0OTc4OTY3KStyKigtMzg3ODA5OTIxMjg2OTM2M2UtMjAqci0uMDAwMzI2NzgwODI3OTQ4NTI4NipuKy4wNjg2NzQyMjM4NTk1MzQ1KS1uKiguMDAwMzM2MTk3MTc3NjE4MzkzNypuKy43NDMwNjU5MTUxMzQyMjU0KTtlW2krK109MjU1K3QqKC4wMDAxMzU5NjM3MjgxMzU4ODg0OCp0Ky4wMDA5MjQ1MzcxMzI1NzM1ODUqYSsuMDAwMTA1NjczNTk2MTg2ODM1OTMqcisuMDAwNDc5MTg2NDY4NzQzNjUxMipuLS4zMTA5Njg5NTg3NTE1ODc1KSthKigtLjAwMDIzNTQ1MzQ2MTA4MzcwMzQ0KmErLjAwMDI3MDI4NDUyNTM1MzQ3MTQqcisuMDAyMDIwMDMwODk3NzMwNzE1NipuLS43NDg4MDUyMTY3MDE1NDk0KStyKig2ODM0ODE1OTk4MjM1NjYyZS0yMCpyKy4wMDAxNTE2ODQ1MjM2MzQ2MDk3MypuLS4wOTc1MTkyNzc3NDcyODkzMyktbiooLjAwMDMxODkxMzExNzU4ODMyODEqbisuNzM2NDg4MzgwNzczMzE2OCk7ZVtpKytdPTI1NSt0KigxMzU5ODY1MDQxMTM4NTMwN2UtMjEqdCsuMDAwMTI0MjM5NTYxNzU0OTA4NTEqYSsuMDAwNDc1MTk4NTA5NzU4MzU4OSpyLTM2NzI5MzE3NDc2NjMwNDIyZS0yMipuLS4wNTU2MjE4Njk4MDI2NDAzNCkrYSooLjAwMDE2MTQxMzgwNTk4NzI0Njc2KmErLjAwMDk2OTIyMzkxMzA3MjUxODYqcisuMDAwNzc4MjY5MjQ1MDAzNjI1MypuLS40NDAxNTIzMjM2NzUyNjQ2MykrciooNS4wNjg4ODI5MTQwNjg3NjllLTcqcisuMDAxNzc3ODM2OTAxMTM3NTA3MSpuLS43NTkxNDU0NjQ5NzQ5NjA5KS1uKiguMDAwMzQzNTMxOTk2NTEwNTU1MypuKy43MDYzNzcwMTg2MTYwMTQ0KX1yZXR1cm4gZS5zdWJhcnJheSgwLGkpfV9jb252ZXJ0Q215a1RvUmdiYShlKXtmb3IobGV0IHQ9MCxhPWUubGVuZ3RoO3Q8YTt0Kz00KXtjb25zdCBhPWVbdF0scj1lW3QrMV0sbj1lW3QrMl0saT1lW3QrM107ZVt0XT0yNTUrYSooLTY3NDcxNDcwNzM2MDI0NDFlLTIwKmErLjAwMDgzNzkyNjIxMjEwMTM3MjcqcisuMDAwMjg5NDcxODE4ODY0MzI5NCpuKy4wMDMyNjQyMzEwNTc1Mzc4MDYqaS0xLjExODU2MTE4NjcyMDM5MzcpK3IqKDI2Mzc0MTA3NjE2MDg5NDA1ZS0yMSpyLTg2MjY5NDkxNTg2Mzg1NzJlLTIwKm4tLjAwMDI3NDg3NjkwNjc0OTk0OTEqaS0uMDIxNTU2ODg3OTQ5Nzg5NjcpK24qKC0zODc4MDk5MjEyODY5MzYzZS0yMCpuLS4wMDAzMjY3ODA4Mjc5NDg1Mjg2KmkrLjA2ODY3NDIyMzg1OTUzNDUpLWkqKC4wMDAzMzYxOTcxNzc2MTgzOTM3KmkrLjc0MzA2NTkxNTEzNDIyNTQpO2VbdCsxXT0yNTUrYSooLjAwMDEzNTk2MzcyODEzNTg4ODQ4KmErLjAwMDkyNDUzNzEzMjU3MzU4NSpyKy4wMDAxMDU2NzM1OTYxODY4MzU5MypuKy4wMDA0NzkxODY0Njg3NDM2NTEyKmktLjMxMDk2ODk1ODc1MTU4NzUpK3IqKC0uMDAwMjM1NDUzNDYxMDgzNzAzNDQqcisuMDAwMjcwMjg0NTI1MzUzNDcxNCpuKy4wMDIwMjAwMzA4OTc3MzA3MTU2KmktLjc0ODgwNTIxNjcwMTU0OTQpK24qKDY4MzQ4MTU5OTgyMzU2NjJlLTIwKm4rLjAwMDE1MTY4NDUyMzYzNDYwOTczKmktLjA5NzUxOTI3Nzc0NzI4OTMzKS1pKiguMDAwMzE4OTEzMTE3NTg4MzI4MSppKy43MzY0ODgzODA3NzMzMTY4KTtlW3QrMl09MjU1K2EqKDEzNTk4NjUwNDExMzg1MzA3ZS0yMSphKy4wMDAxMjQyMzk1NjE3NTQ5MDg1MSpyKy4wMDA0NzUxOTg1MDk3NTgzNTg5Km4tMzY3MjkzMTc0NzY2MzA0MjJlLTIyKmktLjA1NTYyMTg2OTgwMjY0MDM0KStyKiguMDAwMTYxNDEzODA1OTg3MjQ2NzYqcisuMDAwOTY5MjIzOTEzMDcyNTE4NipuKy4wMDA3NzgyNjkyNDUwMDM2MjUzKmktLjQ0MDE1MjMyMzY3NTI2NDYzKStuKig1LjA2ODg4MjkxNDA2ODc2OWUtNypuKy4wMDE3Nzc4MzY5MDExMzc1MDcxKmktLjc1OTE0NTQ2NDk3NDk2MDkpLWkqKC4wMDAzNDM1MzE5OTY1MTA1NTUzKmkrLjcwNjM3NzAxODYxNjAxNDQpO2VbdCszXT0yNTV9cmV0dXJuIGV9Z2V0RGF0YSh7d2lkdGg6ZSxoZWlnaHQ6dCxmb3JjZVJHQkE6YT0hMSxmb3JjZVJHQjpyPSExLGlzU291cmNlUERGOmk9ITF9KXtpZih0aGlzLm51bUNvbXBvbmVudHM+NCl0aHJvdyBuZXcgSnBlZ0Vycm9yKCJVbnN1cHBvcnRlZCBjb2xvciBtb2RlIik7Y29uc3Qgcz10aGlzLl9nZXRMaW5lYXJpemVkQmxvY2tEYXRhKGUsdCxpKTtpZigxPT09dGhpcy5udW1Db21wb25lbnRzJiYoYXx8cikpe2NvbnN0IGU9cy5sZW5ndGgqKGE/NDozKSx0PW5ldyBVaW50OENsYW1wZWRBcnJheShlKTtsZXQgcj0wO2lmKGEpKDAsbi5ncmF5VG9SR0JBKShzLG5ldyBVaW50MzJBcnJheSh0LmJ1ZmZlcikpO2Vsc2UgZm9yKGNvbnN0IGUgb2Ygcyl7dFtyKytdPWU7dFtyKytdPWU7dFtyKytdPWV9cmV0dXJuIHR9aWYoMz09PXRoaXMubnVtQ29tcG9uZW50cyYmdGhpcy5faXNDb2xvckNvbnZlcnNpb25OZWVkZWQpe2lmKGEpe2NvbnN0IGU9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHMubGVuZ3RoLzMqNCk7cmV0dXJuIHRoaXMuX2NvbnZlcnRZY2NUb1JnYmEocyxlKX1yZXR1cm4gdGhpcy5fY29udmVydFljY1RvUmdiKHMpfWlmKDQ9PT10aGlzLm51bUNvbXBvbmVudHMpe2lmKHRoaXMuX2lzQ29sb3JDb252ZXJzaW9uTmVlZGVkKXJldHVybiBhP3RoaXMuX2NvbnZlcnRZY2NrVG9SZ2JhKHMpOnI/dGhpcy5fY29udmVydFljY2tUb1JnYihzKTp0aGlzLl9jb252ZXJ0WWNja1RvQ215ayhzKTtpZihhKXJldHVybiB0aGlzLl9jb252ZXJ0Q215a1RvUmdiYShzKTtpZihyKXJldHVybiB0aGlzLl9jb252ZXJ0Q215a1RvUmdiKHMpfXJldHVybiBzfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5jb252ZXJ0QmxhY2tBbmRXaGl0ZVRvUkdCQT1jb252ZXJ0QmxhY2tBbmRXaGl0ZVRvUkdCQTt0LmNvbnZlcnRUb1JHQkE9ZnVuY3Rpb24gY29udmVydFRvUkdCQShlKXtzd2l0Y2goZS5raW5kKXtjYXNlIHIuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQOnJldHVybiBjb252ZXJ0QmxhY2tBbmRXaGl0ZVRvUkdCQShlKTtjYXNlIHIuSW1hZ2VLaW5kLlJHQl8yNEJQUDpyZXR1cm4gZnVuY3Rpb24gY29udmVydFJHQlRvUkdCQSh7c3JjOmUsc3JjUG9zOnQ9MCxkZXN0OmEsZGVzdFBvczpuPTAsd2lkdGg6aSxoZWlnaHQ6c30pe2xldCBvPTA7Y29uc3QgYz1lLmxlbmd0aD4+MixsPW5ldyBVaW50MzJBcnJheShlLmJ1ZmZlcix0LGMpO2lmKHIuRmVhdHVyZVRlc3QuaXNMaXR0bGVFbmRpYW4pe2Zvcig7bzxjLTI7bys9MyxuKz00KXtjb25zdCBlPWxbb10sdD1sW28rMV0scj1sW28rMl07YVtuXT00Mjc4MTkwMDgwfGU7YVtuKzFdPWU+Pj4yNHx0PDw4fDQyNzgxOTAwODA7YVtuKzJdPXQ+Pj4xNnxyPDwxNnw0Mjc4MTkwMDgwO2FbbiszXT1yPj4+OHw0Mjc4MTkwMDgwfWZvcihsZXQgdD00Km8scj1lLmxlbmd0aDt0PHI7dCs9MylhW24rK109ZVt0XXxlW3QrMV08PDh8ZVt0KzJdPDwxNnw0Mjc4MTkwMDgwfWVsc2V7Zm9yKDtvPGMtMjtvKz0zLG4rPTQpe2NvbnN0IGU9bFtvXSx0PWxbbysxXSxyPWxbbysyXTthW25dPTI1NXxlO2FbbisxXT1lPDwyNHx0Pj4+OHwyNTU7YVtuKzJdPXQ8PDE2fHI+Pj4xNnwyNTU7YVtuKzNdPXI8PDh8MjU1fWZvcihsZXQgdD00Km8scj1lLmxlbmd0aDt0PHI7dCs9MylhW24rK109ZVt0XTw8MjR8ZVt0KzFdPDwxNnxlW3QrMl08PDh8MjU1fXJldHVybntzcmNQb3M6dCxkZXN0UG9zOm59fShlKX1yZXR1cm4gbnVsbH07dC5ncmF5VG9SR0JBPWZ1bmN0aW9uIGdyYXlUb1JHQkEoZSx0KXtpZihyLkZlYXR1cmVUZXN0LmlzTGl0dGxlRW5kaWFuKWZvcihsZXQgYT0wLHI9ZS5sZW5ndGg7YTxyO2ErKyl0W2FdPTY1NzkzKmVbYV18NDI3ODE5MDA4MDtlbHNlIGZvcihsZXQgYT0wLHI9ZS5sZW5ndGg7YTxyO2ErKyl0W2FdPTE2ODQzMDA4KmVbYV18MjU1fTt2YXIgcj1hKDIpO2Z1bmN0aW9uIGNvbnZlcnRCbGFja0FuZFdoaXRlVG9SR0JBKHtzcmM6ZSxzcmNQb3M6dD0wLGRlc3Q6YSx3aWR0aDpuLGhlaWdodDppLG5vbkJsYWNrQ29sb3I6cz00Mjk0OTY3Mjk1LGludmVyc2VEZWNvZGU6bz0hMX0pe2NvbnN0IGM9ci5GZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbj80Mjc4MTkwMDgwOjI1NSxbbCxoXT1vP1tzLGNdOltjLHNdLHU9bj4+MyxkPTcmbixmPWUubGVuZ3RoO2E9bmV3IFVpbnQzMkFycmF5KGEuYnVmZmVyKTtsZXQgZz0wO2ZvcihsZXQgcj0wO3I8aTtyKyspe2Zvcihjb25zdCByPXQrdTt0PHI7dCsrKXtjb25zdCByPXQ8Zj9lW3RdOjI1NTthW2crK109MTI4JnI/aDpsO2FbZysrXT02NCZyP2g6bDthW2crK109MzImcj9oOmw7YVtnKytdPTE2JnI/aDpsO2FbZysrXT04JnI/aDpsO2FbZysrXT00JnI/aDpsO2FbZysrXT0yJnI/aDpsO2FbZysrXT0xJnI/aDpsfWlmKDA9PT1kKWNvbnRpbnVlO2NvbnN0IHI9dDxmP2VbdCsrXToyNTU7Zm9yKGxldCBlPTA7ZTxkO2UrKylhW2crK109ciYxPDw3LWU/aDpsfXJldHVybntzcmNQb3M6dCxkZXN0UG9zOmd9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkpweFN0cmVhbT12b2lkIDA7dmFyIHI9YSgxOCksbj1hKDMwKSxpPWEoMik7Y2xhc3MgSnB4U3RyZWFtIGV4dGVuZHMgci5EZWNvZGVTdHJlYW17Y29uc3RydWN0b3IoZSx0LGEpe3N1cGVyKHQpO3RoaXMuc3RyZWFtPWU7dGhpcy5kaWN0PWUuZGljdDt0aGlzLm1heWJlTGVuZ3RoPXQ7dGhpcy5wYXJhbXM9YX1nZXQgYnl0ZXMoKXtyZXR1cm4oMCxpLnNoYWRvdykodGhpcywiYnl0ZXMiLHRoaXMuc3RyZWFtLmdldEJ5dGVzKHRoaXMubWF5YmVMZW5ndGgpKX1lbnN1cmVCdWZmZXIoZSl7fXJlYWRCbG9jaygpe2lmKHRoaXMuZW9mKXJldHVybjtjb25zdCBlPW5ldyBuLkpweEltYWdlO2UucGFyc2UodGhpcy5ieXRlcyk7Y29uc3QgdD1lLndpZHRoLGE9ZS5oZWlnaHQscj1lLmNvbXBvbmVudHNDb3VudCxpPWUudGlsZXMubGVuZ3RoO2lmKDE9PT1pKXRoaXMuYnVmZmVyPWUudGlsZXNbMF0uaXRlbXM7ZWxzZXtjb25zdCBuPW5ldyBVaW50OENsYW1wZWRBcnJheSh0KmEqcik7Zm9yKGxldCBhPTA7YTxpO2ErKyl7Y29uc3QgaT1lLnRpbGVzW2FdLHM9aS53aWR0aCxvPWkuaGVpZ2h0LGM9aS5sZWZ0LGw9aS50b3AsaD1pLml0ZW1zO2xldCB1PTAsZD0odCpsK2MpKnI7Y29uc3QgZj10KnIsZz1zKnI7Zm9yKGxldCBlPTA7ZTxvO2UrKyl7Y29uc3QgZT1oLnN1YmFycmF5KHUsdStnKTtuLnNldChlLGQpO3UrPWc7ZCs9Zn19dGhpcy5idWZmZXI9bn10aGlzLmJ1ZmZlckxlbmd0aD10aGlzLmJ1ZmZlci5sZW5ndGg7dGhpcy5lb2Y9ITB9fXQuSnB4U3RyZWFtPUpweFN0cmVhbX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkpweEltYWdlPXZvaWQgMDt2YXIgcj1hKDIpLG49YSgzKSxpPWEoMjUpO2NsYXNzIEpweEVycm9yIGV4dGVuZHMgci5CYXNlRXhjZXB0aW9ue2NvbnN0cnVjdG9yKGUpe3N1cGVyKGBKUFggZXJyb3I6ICR7ZX1gLCJKcHhFcnJvciIpfX1jb25zdCBzPXtMTDowLExIOjEsSEw6MSxISDoyfTt0LkpweEltYWdlPWNsYXNzIEpweEltYWdle2NvbnN0cnVjdG9yKCl7dGhpcy5mYWlsT25Db3JydXB0ZWRJbWFnZT0hMX1wYXJzZShlKXtpZig2NTM1OT09PSgwLG4ucmVhZFVpbnQxNikoZSwwKSl7dGhpcy5wYXJzZUNvZGVzdHJlYW0oZSwwLGUubGVuZ3RoKTtyZXR1cm59Y29uc3QgdD1lLmxlbmd0aDtsZXQgYT0wO2Zvcig7YTx0Oyl7bGV0IGk9OCxzPSgwLG4ucmVhZFVpbnQzMikoZSxhKTtjb25zdCBvPSgwLG4ucmVhZFVpbnQzMikoZSxhKzQpO2ErPWk7aWYoMT09PXMpe3M9NDI5NDk2NzI5NiooMCxuLnJlYWRVaW50MzIpKGUsYSkrKDAsbi5yZWFkVWludDMyKShlLGErNCk7YSs9ODtpKz04fTA9PT1zJiYocz10LWEraSk7aWYoczxpKXRocm93IG5ldyBKcHhFcnJvcigiSW52YWxpZCBib3ggZmllbGQgc2l6ZSIpO2NvbnN0IGM9cy1pO2xldCBsPSEwO3N3aXRjaChvKXtjYXNlIDE3ODU3Mzc4MzI6bD0hMTticmVhaztjYXNlIDE2NjgyNDY2NDI6Y29uc3QgdD1lW2FdO2lmKDE9PT10KXtjb25zdCB0PSgwLG4ucmVhZFVpbnQzMikoZSxhKzMpO3N3aXRjaCh0KXtjYXNlIDE2OmNhc2UgMTc6Y2FzZSAxODpicmVhaztkZWZhdWx0OigwLHIud2FybikoIlVua25vd24gY29sb3JzcGFjZSAiK3QpfX1lbHNlIDI9PT10JiYoMCxyLmluZm8pKCJJQ0MgcHJvZmlsZSBub3Qgc3VwcG9ydGVkIik7YnJlYWs7Y2FzZSAxNzg1NzM3ODI3OnRoaXMucGFyc2VDb2Rlc3RyZWFtKGUsYSxhK2MpO2JyZWFrO2Nhc2UgMTc4MzYzNmUzOjIxODc5MzczOCE9PSgwLG4ucmVhZFVpbnQzMikoZSxhKSYmKDAsci53YXJuKSgiSW52YWxpZCBKUDIgc2lnbmF0dXJlIik7YnJlYWs7Y2FzZSAxNzgzNjM0NDU4OmNhc2UgMTcxODkwOTI5NjpjYXNlIDE5MjAwOTk2OTc6Y2FzZSAxOTE5MjUxMjMyOmNhc2UgMTc2ODQ0OTEzODpicmVhaztkZWZhdWx0OmNvbnN0IGk9U3RyaW5nLmZyb21DaGFyQ29kZShvPj4yNCYyNTUsbz4+MTYmMjU1LG8+PjgmMjU1LDI1NSZvKTsoMCxyLndhcm4pKGBVbnN1cHBvcnRlZCBoZWFkZXIgdHlwZSAke299ICgke2l9KS5gKX1sJiYoYSs9Yyl9fXBhcnNlSW1hZ2VQcm9wZXJ0aWVzKGUpe2xldCB0PWUuZ2V0Qnl0ZSgpO2Zvcig7dD49MDspe2NvbnN0IGE9dDt0PWUuZ2V0Qnl0ZSgpO2lmKDY1MzYxPT09KGE8PDh8dCkpe2Uuc2tpcCg0KTtjb25zdCB0PWUuZ2V0SW50MzIoKT4+PjAsYT1lLmdldEludDMyKCk+Pj4wLHI9ZS5nZXRJbnQzMigpPj4+MCxuPWUuZ2V0SW50MzIoKT4+PjA7ZS5za2lwKDE2KTtjb25zdCBpPWUuZ2V0VWludDE2KCk7dGhpcy53aWR0aD10LXI7dGhpcy5oZWlnaHQ9YS1uO3RoaXMuY29tcG9uZW50c0NvdW50PWk7dGhpcy5iaXRzUGVyQ29tcG9uZW50PTg7cmV0dXJufX10aHJvdyBuZXcgSnB4RXJyb3IoIk5vIHNpemUgbWFya2VyIGZvdW5kIGluIEpQWCBzdHJlYW0iKX1wYXJzZUNvZGVzdHJlYW0oZSx0LGEpe2NvbnN0IGk9e307bGV0IHM9ITE7dHJ5e2xldCBvPXQ7Zm9yKDtvKzE8YTspe2NvbnN0IHQ9KDAsbi5yZWFkVWludDE2KShlLG8pO28rPTI7bGV0IGEsYyxsLGgsdSxkLGY9MDtzd2l0Y2godCl7Y2FzZSA2NTM1OTppLm1haW5IZWFkZXI9ITA7YnJlYWs7Y2FzZSA2NTQ5NzpicmVhaztjYXNlIDY1MzYxOmY9KDAsbi5yZWFkVWludDE2KShlLG8pO2NvbnN0IGc9e307Zy5Yc2l6PSgwLG4ucmVhZFVpbnQzMikoZSxvKzQpO2cuWXNpej0oMCxuLnJlYWRVaW50MzIpKGUsbys4KTtnLlhPc2l6PSgwLG4ucmVhZFVpbnQzMikoZSxvKzEyKTtnLllPc2l6PSgwLG4ucmVhZFVpbnQzMikoZSxvKzE2KTtnLlhUc2l6PSgwLG4ucmVhZFVpbnQzMikoZSxvKzIwKTtnLllUc2l6PSgwLG4ucmVhZFVpbnQzMikoZSxvKzI0KTtnLlhUT3Npej0oMCxuLnJlYWRVaW50MzIpKGUsbysyOCk7Zy5ZVE9zaXo9KDAsbi5yZWFkVWludDMyKShlLG8rMzIpO2NvbnN0IHA9KDAsbi5yZWFkVWludDE2KShlLG8rMzYpO2cuQ3Npej1wO2NvbnN0IG09W107YT1vKzM4O2ZvcihsZXQgdD0wO3Q8cDt0Kyspe2NvbnN0IHQ9e3ByZWNpc2lvbjoxKygxMjcmZVthXSksaXNTaWduZWQ6ISEoMTI4JmVbYV0pLFhSc2l6OmVbYSsxXSxZUnNpejplW2ErMl19O2ErPTM7Y2FsY3VsYXRlQ29tcG9uZW50RGltZW5zaW9ucyh0LGcpO20ucHVzaCh0KX1pLlNJWj1nO2kuY29tcG9uZW50cz1tO2NhbGN1bGF0ZVRpbGVHcmlkcyhpLG0pO2kuUUNDPVtdO2kuQ09DPVtdO2JyZWFrO2Nhc2UgNjUzNzI6Zj0oMCxuLnJlYWRVaW50MTYpKGUsbyk7Y29uc3QgYj17fTthPW8rMjtjPWVbYSsrXTtzd2l0Y2goMzEmYyl7Y2FzZSAwOmg9ODt1PSEwO2JyZWFrO2Nhc2UgMTpoPTE2O3U9ITE7YnJlYWs7Y2FzZSAyOmg9MTY7dT0hMDticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcigiSW52YWxpZCBTUWNkIHZhbHVlICIrYyl9Yi5ub1F1YW50aXphdGlvbj04PT09aDtiLnNjYWxhckV4cG91bmRlZD11O2IuZ3VhcmRCaXRzPWM+PjU7bD1bXTtmb3IoO2E8ZitvOyl7Y29uc3QgdD17fTtpZig4PT09aCl7dC5lcHNpbG9uPWVbYSsrXT4+Mzt0Lm11PTB9ZWxzZXt0LmVwc2lsb249ZVthXT4+Mzt0Lm11PSg3JmVbYV0pPDw4fGVbYSsxXTthKz0yfWwucHVzaCh0KX1iLlNQcWNkcz1sO2lmKGkubWFpbkhlYWRlcilpLlFDRD1iO2Vsc2V7aS5jdXJyZW50VGlsZS5RQ0Q9YjtpLmN1cnJlbnRUaWxlLlFDQz1bXX1icmVhaztjYXNlIDY1MzczOmY9KDAsbi5yZWFkVWludDE2KShlLG8pO2NvbnN0IHk9e307YT1vKzI7bGV0IHc7aWYoaS5TSVouQ3NpejwyNTcpdz1lW2ErK107ZWxzZXt3PSgwLG4ucmVhZFVpbnQxNikoZSxhKTthKz0yfWM9ZVthKytdO3N3aXRjaCgzMSZjKXtjYXNlIDA6aD04O3U9ITA7YnJlYWs7Y2FzZSAxOmg9MTY7dT0hMTticmVhaztjYXNlIDI6aD0xNjt1PSEwO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJJbnZhbGlkIFNRY2QgdmFsdWUgIitjKX15Lm5vUXVhbnRpemF0aW9uPTg9PT1oO3kuc2NhbGFyRXhwb3VuZGVkPXU7eS5ndWFyZEJpdHM9Yz4+NTtsPVtdO2Zvcig7YTxmK287KXtjb25zdCB0PXt9O2lmKDg9PT1oKXt0LmVwc2lsb249ZVthKytdPj4zO3QubXU9MH1lbHNle3QuZXBzaWxvbj1lW2FdPj4zO3QubXU9KDcmZVthXSk8PDh8ZVthKzFdO2ErPTJ9bC5wdXNoKHQpfXkuU1BxY2RzPWw7aS5tYWluSGVhZGVyP2kuUUNDW3ddPXk6aS5jdXJyZW50VGlsZS5RQ0Nbd109eTticmVhaztjYXNlIDY1MzYyOmY9KDAsbi5yZWFkVWludDE2KShlLG8pO2NvbnN0IFM9e307YT1vKzI7Y29uc3QgeD1lW2ErK107Uy5lbnRyb3B5Q29kZXJXaXRoQ3VzdG9tUHJlY2luY3RzPSEhKDEmeCk7Uy5zb3BNYXJrZXJVc2VkPSEhKDImeCk7Uy5lcGhNYXJrZXJVc2VkPSEhKDQmeCk7Uy5wcm9ncmVzc2lvbk9yZGVyPWVbYSsrXTtTLmxheWVyc0NvdW50PSgwLG4ucmVhZFVpbnQxNikoZSxhKTthKz0yO1MubXVsdGlwbGVDb21wb25lbnRUcmFuc2Zvcm09ZVthKytdO1MuZGVjb21wb3NpdGlvbkxldmVsc0NvdW50PWVbYSsrXTtTLnhjYj0yKygxNSZlW2ErK10pO1MueWNiPTIrKDE1JmVbYSsrXSk7Y29uc3QgQz1lW2ErK107Uy5zZWxlY3RpdmVBcml0aG1ldGljQ29kaW5nQnlwYXNzPSEhKDEmQyk7Uy5yZXNldENvbnRleHRQcm9iYWJpbGl0aWVzPSEhKDImQyk7Uy50ZXJtaW5hdGlvbk9uRWFjaENvZGluZ1Bhc3M9ISEoNCZDKTtTLnZlcnRpY2FsbHlTdHJpcGU9ISEoOCZDKTtTLnByZWRpY3RhYmxlVGVybWluYXRpb249ISEoMTYmQyk7Uy5zZWdtZW50YXRpb25TeW1ib2xVc2VkPSEhKDMyJkMpO1MucmV2ZXJzaWJsZVRyYW5zZm9ybWF0aW9uPWVbYSsrXTtpZihTLmVudHJvcHlDb2RlcldpdGhDdXN0b21QcmVjaW5jdHMpe2NvbnN0IHQ9W107Zm9yKDthPGYrbzspe2NvbnN0IHI9ZVthKytdO3QucHVzaCh7UFB4OjE1JnIsUFB5OnI+PjR9KX1TLnByZWNpbmN0c1NpemVzPXR9Y29uc3Qgaz1bXTtTLnNlbGVjdGl2ZUFyaXRobWV0aWNDb2RpbmdCeXBhc3MmJmsucHVzaCgic2VsZWN0aXZlQXJpdGhtZXRpY0NvZGluZ0J5cGFzcyIpO1MudGVybWluYXRpb25PbkVhY2hDb2RpbmdQYXNzJiZrLnB1c2goInRlcm1pbmF0aW9uT25FYWNoQ29kaW5nUGFzcyIpO1MudmVydGljYWxseVN0cmlwZSYmay5wdXNoKCJ2ZXJ0aWNhbGx5U3RyaXBlIik7Uy5wcmVkaWN0YWJsZVRlcm1pbmF0aW9uJiZrLnB1c2goInByZWRpY3RhYmxlVGVybWluYXRpb24iKTtpZihrLmxlbmd0aD4wKXtzPSEwOygwLHIud2FybikoYEpQWDogVW5zdXBwb3J0ZWQgQ09EIG9wdGlvbnMgKCR7ay5qb2luKCIsICIpfSkuYCl9aWYoaS5tYWluSGVhZGVyKWkuQ09EPVM7ZWxzZXtpLmN1cnJlbnRUaWxlLkNPRD1TO2kuY3VycmVudFRpbGUuQ09DPVtdfWJyZWFrO2Nhc2UgNjU0MjQ6Zj0oMCxuLnJlYWRVaW50MTYpKGUsbyk7ZD17fTtkLmluZGV4PSgwLG4ucmVhZFVpbnQxNikoZSxvKzIpO2QubGVuZ3RoPSgwLG4ucmVhZFVpbnQzMikoZSxvKzQpO2QuZGF0YUVuZD1kLmxlbmd0aCtvLTI7ZC5wYXJ0SW5kZXg9ZVtvKzhdO2QucGFydHNDb3VudD1lW28rOV07aS5tYWluSGVhZGVyPSExO2lmKDA9PT1kLnBhcnRJbmRleCl7ZC5DT0Q9aS5DT0Q7ZC5DT0M9aS5DT0Muc2xpY2UoMCk7ZC5RQ0Q9aS5RQ0Q7ZC5RQ0M9aS5RQ0Muc2xpY2UoMCl9aS5jdXJyZW50VGlsZT1kO2JyZWFrO2Nhc2UgNjU0Mjc6ZD1pLmN1cnJlbnRUaWxlO2lmKDA9PT1kLnBhcnRJbmRleCl7aW5pdGlhbGl6ZVRpbGUoaSxkLmluZGV4KTtidWlsZFBhY2tldHMoaSl9Zj1kLmRhdGFFbmQtbztwYXJzZVRpbGVQYWNrZXRzKGksZSxvLGYpO2JyZWFrO2Nhc2UgNjUzNjM6KDAsci53YXJuKSgiSlBYOiBDb2Rlc3RyZWFtIGNvZGUgMHhGRjUzIChDT0MpIGlzIG5vdCBpbXBsZW1lbnRlZC4iKTtjYXNlIDY1MzY1OmNhc2UgNjUzNjc6Y2FzZSA2NTM2ODpjYXNlIDY1MzgwOmY9KDAsbi5yZWFkVWludDE2KShlLG8pO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJVbmtub3duIGNvZGVzdHJlYW0gY29kZTogIit0LnRvU3RyaW5nKDE2KSl9bys9Zn19Y2F0Y2goZSl7aWYoc3x8dGhpcy5mYWlsT25Db3JydXB0ZWRJbWFnZSl0aHJvdyBuZXcgSnB4RXJyb3IoZS5tZXNzYWdlKTsoMCxyLndhcm4pKGBKUFg6IFRyeWluZyB0byByZWNvdmVyIGZyb206ICIke2UubWVzc2FnZX0iLmApfXRoaXMudGlsZXM9ZnVuY3Rpb24gdHJhbnNmb3JtQ29tcG9uZW50cyhlKXtjb25zdCB0PWUuU0laLGE9ZS5jb21wb25lbnRzLHI9dC5Dc2l6LG49W107Zm9yKGxldCB0PTAsaT1lLnRpbGVzLmxlbmd0aDt0PGk7dCsrKXtjb25zdCBpPWUudGlsZXNbdF0scz1bXTtmb3IobGV0IHQ9MDt0PHI7dCsrKXNbdF09dHJhbnNmb3JtVGlsZShlLGksdCk7Y29uc3Qgbz1zWzBdLGM9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KG8uaXRlbXMubGVuZ3RoKnIpLGw9e2xlZnQ6by5sZWZ0LHRvcDpvLnRvcCx3aWR0aDpvLndpZHRoLGhlaWdodDpvLmhlaWdodCxpdGVtczpjfTtsZXQgaCx1LGQsZixnLHAsbSxiPTA7aWYoaS5jb2RpbmdTdHlsZURlZmF1bHRQYXJhbWV0ZXJzLm11bHRpcGxlQ29tcG9uZW50VHJhbnNmb3JtKXtjb25zdCBlPTQ9PT1yLHQ9c1swXS5pdGVtcyxuPXNbMV0uaXRlbXMsbz1zWzJdLml0ZW1zLGw9ZT9zWzNdLml0ZW1zOm51bGw7aD1hWzBdLnByZWNpc2lvbi04O3U9LjUrKDEyODw8aCk7Y29uc3QgeT1pLmNvbXBvbmVudHNbMF0sdz1yLTM7Zj10Lmxlbmd0aDtpZih5LmNvZGluZ1N0eWxlUGFyYW1ldGVycy5yZXZlcnNpYmxlVHJhbnNmb3JtYXRpb24pZm9yKGQ9MDtkPGY7ZCsrLGIrPXcpe2c9dFtkXSt1O3A9bltkXTttPW9bZF07Y29uc3QgZT1nLShtK3A+PjIpO2NbYisrXT1lK20+Pmg7Y1tiKytdPWU+Pmg7Y1tiKytdPWUrcD4+aH1lbHNlIGZvcihkPTA7ZDxmO2QrKyxiKz13KXtnPXRbZF0rdTtwPW5bZF07bT1vW2RdO2NbYisrXT1nKzEuNDAyKm0+Pmg7Y1tiKytdPWctLjM0NDEzKnAtLjcxNDE0Km0+Pmg7Y1tiKytdPWcrMS43NzIqcD4+aH1pZihlKWZvcihkPTAsYj0zO2Q8ZjtkKyssYis9NCljW2JdPWxbZF0rdT4+aH1lbHNlIGZvcihsZXQgZT0wO2U8cjtlKyspe2NvbnN0IHQ9c1tlXS5pdGVtcztoPWFbZV0ucHJlY2lzaW9uLTg7dT0uNSsoMTI4PDxoKTtmb3IoYj1lLGQ9MCxmPXQubGVuZ3RoO2Q8ZjtkKyspe2NbYl09dFtkXSt1Pj5oO2IrPXJ9fW4ucHVzaChsKX1yZXR1cm4gbn0oaSk7dGhpcy53aWR0aD1pLlNJWi5Yc2l6LWkuU0laLlhPc2l6O3RoaXMuaGVpZ2h0PWkuU0laLllzaXotaS5TSVouWU9zaXo7dGhpcy5jb21wb25lbnRzQ291bnQ9aS5TSVouQ3Npen19O2Z1bmN0aW9uIGNhbGN1bGF0ZUNvbXBvbmVudERpbWVuc2lvbnMoZSx0KXtlLngwPU1hdGguY2VpbCh0LlhPc2l6L2UuWFJzaXopO2UueDE9TWF0aC5jZWlsKHQuWHNpei9lLlhSc2l6KTtlLnkwPU1hdGguY2VpbCh0LllPc2l6L2UuWVJzaXopO2UueTE9TWF0aC5jZWlsKHQuWXNpei9lLllSc2l6KTtlLndpZHRoPWUueDEtZS54MDtlLmhlaWdodD1lLnkxLWUueTB9ZnVuY3Rpb24gY2FsY3VsYXRlVGlsZUdyaWRzKGUsdCl7Y29uc3QgYT1lLlNJWixyPVtdO2xldCBuO2NvbnN0IGk9TWF0aC5jZWlsKChhLlhzaXotYS5YVE9zaXopL2EuWFRzaXopLHM9TWF0aC5jZWlsKChhLllzaXotYS5ZVE9zaXopL2EuWVRzaXopO2ZvcihsZXQgZT0wO2U8cztlKyspZm9yKGxldCB0PTA7dDxpO3QrKyl7bj17fTtuLnR4MD1NYXRoLm1heChhLlhUT3Npeit0KmEuWFRzaXosYS5YT3Npeik7bi50eTA9TWF0aC5tYXgoYS5ZVE9zaXorZSphLllUc2l6LGEuWU9zaXopO24udHgxPU1hdGgubWluKGEuWFRPc2l6Kyh0KzEpKmEuWFRzaXosYS5Yc2l6KTtuLnR5MT1NYXRoLm1pbihhLllUT3NpeisoZSsxKSphLllUc2l6LGEuWXNpeik7bi53aWR0aD1uLnR4MS1uLnR4MDtuLmhlaWdodD1uLnR5MS1uLnR5MDtuLmNvbXBvbmVudHM9W107ci5wdXNoKG4pfWUudGlsZXM9cjtmb3IobGV0IGU9MCxpPWEuQ3NpejtlPGk7ZSsrKXtjb25zdCBhPXRbZV07Zm9yKGxldCB0PTAsaT1yLmxlbmd0aDt0PGk7dCsrKXtjb25zdCBpPXt9O249clt0XTtpLnRjeDA9TWF0aC5jZWlsKG4udHgwL2EuWFJzaXopO2kudGN5MD1NYXRoLmNlaWwobi50eTAvYS5ZUnNpeik7aS50Y3gxPU1hdGguY2VpbChuLnR4MS9hLlhSc2l6KTtpLnRjeTE9TWF0aC5jZWlsKG4udHkxL2EuWVJzaXopO2kud2lkdGg9aS50Y3gxLWkudGN4MDtpLmhlaWdodD1pLnRjeTEtaS50Y3kwO24uY29tcG9uZW50c1tlXT1pfX19ZnVuY3Rpb24gZ2V0QmxvY2tzRGltZW5zaW9ucyhlLHQsYSl7Y29uc3Qgcj10LmNvZGluZ1N0eWxlUGFyYW1ldGVycyxuPXt9O2lmKHIuZW50cm9weUNvZGVyV2l0aEN1c3RvbVByZWNpbmN0cyl7bi5QUHg9ci5wcmVjaW5jdHNTaXplc1thXS5QUHg7bi5QUHk9ci5wcmVjaW5jdHNTaXplc1thXS5QUHl9ZWxzZXtuLlBQeD0xNTtuLlBQeT0xNX1uLnhjYl89YT4wP01hdGgubWluKHIueGNiLG4uUFB4LTEpOk1hdGgubWluKHIueGNiLG4uUFB4KTtuLnljYl89YT4wP01hdGgubWluKHIueWNiLG4uUFB5LTEpOk1hdGgubWluKHIueWNiLG4uUFB5KTtyZXR1cm4gbn1mdW5jdGlvbiBidWlsZFByZWNpbmN0cyhlLHQsYSl7Y29uc3Qgcj0xPDxhLlBQeCxuPTE8PGEuUFB5LGk9MD09PXQucmVzTGV2ZWwscz0xPDxhLlBQeCsoaT8wOi0xKSxvPTE8PGEuUFB5KyhpPzA6LTEpLGM9dC50cngxPnQudHJ4MD9NYXRoLmNlaWwodC50cngxL3IpLU1hdGguZmxvb3IodC50cngwL3IpOjAsbD10LnRyeTE+dC50cnkwP01hdGguY2VpbCh0LnRyeTEvbiktTWF0aC5mbG9vcih0LnRyeTAvbik6MCxoPWMqbDt0LnByZWNpbmN0UGFyYW1ldGVycz17cHJlY2luY3RXaWR0aDpyLHByZWNpbmN0SGVpZ2h0Om4sbnVtcHJlY2luY3Rzd2lkZTpjLG51bXByZWNpbmN0c2hpZ2g6bCxudW1wcmVjaW5jdHM6aCxwcmVjaW5jdFdpZHRoSW5TdWJiYW5kOnMscHJlY2luY3RIZWlnaHRJblN1YmJhbmQ6b319ZnVuY3Rpb24gYnVpbGRDb2RlYmxvY2tzKGUsdCxhKXtjb25zdCByPWEueGNiXyxuPWEueWNiXyxpPTE8PHIscz0xPDxuLG89dC50YngwPj5yLGM9dC50YnkwPj5uLGw9dC50YngxK2ktMT4+cixoPXQudGJ5MStzLTE+Pm4sdT10LnJlc29sdXRpb24ucHJlY2luY3RQYXJhbWV0ZXJzLGQ9W10sZj1bXTtsZXQgZyxwLG0sYjtmb3IocD1jO3A8aDtwKyspZm9yKGc9bztnPGw7ZysrKXttPXtjYng6ZyxjYnk6cCx0YngwOmkqZyx0YnkwOnMqcCx0YngxOmkqKGcrMSksdGJ5MTpzKihwKzEpfTttLnRieDBfPU1hdGgubWF4KHQudGJ4MCxtLnRieDApO20udGJ5MF89TWF0aC5tYXgodC50YnkwLG0udGJ5MCk7bS50YngxXz1NYXRoLm1pbih0LnRieDEsbS50YngxKTttLnRieTFfPU1hdGgubWluKHQudGJ5MSxtLnRieTEpO2I9TWF0aC5mbG9vcigobS50YngwXy10LnRieDApL3UucHJlY2luY3RXaWR0aEluU3ViYmFuZCkrTWF0aC5mbG9vcigobS50YnkwXy10LnRieTApL3UucHJlY2luY3RIZWlnaHRJblN1YmJhbmQpKnUubnVtcHJlY2luY3Rzd2lkZTttLnByZWNpbmN0TnVtYmVyPWI7bS5zdWJiYW5kVHlwZT10LnR5cGU7bS5MYmxvY2s9MztpZihtLnRieDFfPD1tLnRieDBffHxtLnRieTFfPD1tLnRieTBfKWNvbnRpbnVlO2QucHVzaChtKTtsZXQgZT1mW2JdO2lmKHZvaWQgMCE9PWUpe2c8ZS5jYnhNaW4/ZS5jYnhNaW49ZzpnPmUuY2J4TWF4JiYoZS5jYnhNYXg9Zyk7cDxlLmNieU1pbj9lLmNieE1pbj1wOnA+ZS5jYnlNYXgmJihlLmNieU1heD1wKX1lbHNlIGZbYl09ZT17Y2J4TWluOmcsY2J5TWluOnAsY2J4TWF4OmcsY2J5TWF4OnB9O20ucHJlY2luY3Q9ZX10LmNvZGVibG9ja1BhcmFtZXRlcnM9e2NvZGVibG9ja1dpZHRoOnIsY29kZWJsb2NrSGVpZ2h0Om4sbnVtY29kZWJsb2Nrd2lkZTpsLW8rMSxudW1jb2RlYmxvY2toaWdoOmgtYysxfTt0LmNvZGVibG9ja3M9ZDt0LnByZWNpbmN0cz1mfWZ1bmN0aW9uIGNyZWF0ZVBhY2tldChlLHQsYSl7Y29uc3Qgcj1bXSxuPWUuc3ViYmFuZHM7Zm9yKGxldCBlPTAsYT1uLmxlbmd0aDtlPGE7ZSsrKXtjb25zdCBhPW5bZV0uY29kZWJsb2Nrcztmb3IobGV0IGU9MCxuPWEubGVuZ3RoO2U8bjtlKyspe2NvbnN0IG49YVtlXTtuLnByZWNpbmN0TnVtYmVyPT09dCYmci5wdXNoKG4pfX1yZXR1cm57bGF5ZXJOdW1iZXI6YSxjb2RlYmxvY2tzOnJ9fWZ1bmN0aW9uIExheWVyUmVzb2x1dGlvbkNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IoZSl7Y29uc3QgdD1lLlNJWixhPWUuY3VycmVudFRpbGUuaW5kZXgscj1lLnRpbGVzW2FdLG49ci5jb2RpbmdTdHlsZURlZmF1bHRQYXJhbWV0ZXJzLmxheWVyc0NvdW50LGk9dC5Dc2l6O2xldCBzPTA7Zm9yKGxldCBlPTA7ZTxpO2UrKylzPU1hdGgubWF4KHMsci5jb21wb25lbnRzW2VdLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpO2xldCBvPTAsYz0wLGw9MCxoPTA7dGhpcy5uZXh0UGFja2V0PWZ1bmN0aW9uIEpweEltYWdlX25leHRQYWNrZXQoKXtmb3IoO288bjtvKyspe2Zvcig7Yzw9cztjKyspe2Zvcig7bDxpO2wrKyl7Y29uc3QgZT1yLmNvbXBvbmVudHNbbF07aWYoYz5lLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpY29udGludWU7Y29uc3QgdD1lLnJlc29sdXRpb25zW2NdLGE9dC5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3RzO2Zvcig7aDxhOyl7Y29uc3QgZT1jcmVhdGVQYWNrZXQodCxoLG8pO2grKztyZXR1cm4gZX1oPTB9bD0wfWM9MH10aHJvdyBuZXcgSnB4RXJyb3IoIk91dCBvZiBwYWNrZXRzIil9fWZ1bmN0aW9uIFJlc29sdXRpb25MYXllckNvbXBvbmVudFBvc2l0aW9uSXRlcmF0b3IoZSl7Y29uc3QgdD1lLlNJWixhPWUuY3VycmVudFRpbGUuaW5kZXgscj1lLnRpbGVzW2FdLG49ci5jb2RpbmdTdHlsZURlZmF1bHRQYXJhbWV0ZXJzLmxheWVyc0NvdW50LGk9dC5Dc2l6O2xldCBzPTA7Zm9yKGxldCBlPTA7ZTxpO2UrKylzPU1hdGgubWF4KHMsci5jb21wb25lbnRzW2VdLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpO2xldCBvPTAsYz0wLGw9MCxoPTA7dGhpcy5uZXh0UGFja2V0PWZ1bmN0aW9uIEpweEltYWdlX25leHRQYWNrZXQoKXtmb3IoO288PXM7bysrKXtmb3IoO2M8bjtjKyspe2Zvcig7bDxpO2wrKyl7Y29uc3QgZT1yLmNvbXBvbmVudHNbbF07aWYobz5lLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpY29udGludWU7Y29uc3QgdD1lLnJlc29sdXRpb25zW29dLGE9dC5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3RzO2Zvcig7aDxhOyl7Y29uc3QgZT1jcmVhdGVQYWNrZXQodCxoLGMpO2grKztyZXR1cm4gZX1oPTB9bD0wfWM9MH10aHJvdyBuZXcgSnB4RXJyb3IoIk91dCBvZiBwYWNrZXRzIil9fWZ1bmN0aW9uIFJlc29sdXRpb25Qb3NpdGlvbkNvbXBvbmVudExheWVySXRlcmF0b3IoZSl7Y29uc3QgdD1lLlNJWixhPWUuY3VycmVudFRpbGUuaW5kZXgscj1lLnRpbGVzW2FdLG49ci5jb2RpbmdTdHlsZURlZmF1bHRQYXJhbWV0ZXJzLmxheWVyc0NvdW50LGk9dC5Dc2l6O2xldCBzLG8sYyxsLGg9MDtmb3IoYz0wO2M8aTtjKyspe2NvbnN0IGU9ci5jb21wb25lbnRzW2NdO2g9TWF0aC5tYXgoaCxlLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQpfWNvbnN0IHU9bmV3IEludDMyQXJyYXkoaCsxKTtmb3Iobz0wO288PWg7KytvKXtsZXQgZT0wO2ZvcihjPTA7YzxpOysrYyl7Y29uc3QgdD1yLmNvbXBvbmVudHNbY10ucmVzb2x1dGlvbnM7bzx0Lmxlbmd0aCYmKGU9TWF0aC5tYXgoZSx0W29dLnByZWNpbmN0UGFyYW1ldGVycy5udW1wcmVjaW5jdHMpKX11W29dPWV9cz0wO289MDtjPTA7bD0wO3RoaXMubmV4dFBhY2tldD1mdW5jdGlvbiBKcHhJbWFnZV9uZXh0UGFja2V0KCl7Zm9yKDtvPD1oO28rKyl7Zm9yKDtsPHVbb107bCsrKXtmb3IoO2M8aTtjKyspe2NvbnN0IGU9ci5jb21wb25lbnRzW2NdO2lmKG8+ZS5jb2RpbmdTdHlsZVBhcmFtZXRlcnMuZGVjb21wb3NpdGlvbkxldmVsc0NvdW50KWNvbnRpbnVlO2NvbnN0IHQ9ZS5yZXNvbHV0aW9uc1tvXSxhPXQucHJlY2luY3RQYXJhbWV0ZXJzLm51bXByZWNpbmN0cztpZighKGw+PWEpKXtmb3IoO3M8bjspe2NvbnN0IGU9Y3JlYXRlUGFja2V0KHQsbCxzKTtzKys7cmV0dXJuIGV9cz0wfX1jPTB9bD0wfXRocm93IG5ldyBKcHhFcnJvcigiT3V0IG9mIHBhY2tldHMiKX19ZnVuY3Rpb24gUG9zaXRpb25Db21wb25lbnRSZXNvbHV0aW9uTGF5ZXJJdGVyYXRvcihlKXtjb25zdCB0PWUuU0laLGE9ZS5jdXJyZW50VGlsZS5pbmRleCxyPWUudGlsZXNbYV0sbj1yLmNvZGluZ1N0eWxlRGVmYXVsdFBhcmFtZXRlcnMubGF5ZXJzQ291bnQsaT10LkNzaXoscz1nZXRQcmVjaW5jdFNpemVzSW5JbWFnZVNjYWxlKHIpLG89cztsZXQgYz0wLGw9MCxoPTAsdT0wLGQ9MDt0aGlzLm5leHRQYWNrZXQ9ZnVuY3Rpb24gSnB4SW1hZ2VfbmV4dFBhY2tldCgpe2Zvcig7ZDxvLm1heE51bUhpZ2g7ZCsrKXtmb3IoO3U8by5tYXhOdW1XaWRlO3UrKyl7Zm9yKDtoPGk7aCsrKXtjb25zdCBlPXIuY29tcG9uZW50c1toXSx0PWUuY29kaW5nU3R5bGVQYXJhbWV0ZXJzLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudDtmb3IoO2w8PXQ7bCsrKXtjb25zdCB0PWUucmVzb2x1dGlvbnNbbF0sYT1zLmNvbXBvbmVudHNbaF0ucmVzb2x1dGlvbnNbbF0scj1nZXRQcmVjaW5jdEluZGV4SWZFeGlzdCh1LGQsYSxvLHQpO2lmKG51bGwhPT1yKXtmb3IoO2M8bjspe2NvbnN0IGU9Y3JlYXRlUGFja2V0KHQscixjKTtjKys7cmV0dXJuIGV9Yz0wfX1sPTB9aD0wfXU9MH10aHJvdyBuZXcgSnB4RXJyb3IoIk91dCBvZiBwYWNrZXRzIil9fWZ1bmN0aW9uIENvbXBvbmVudFBvc2l0aW9uUmVzb2x1dGlvbkxheWVySXRlcmF0b3IoZSl7Y29uc3QgdD1lLlNJWixhPWUuY3VycmVudFRpbGUuaW5kZXgscj1lLnRpbGVzW2FdLG49ci5jb2RpbmdTdHlsZURlZmF1bHRQYXJhbWV0ZXJzLmxheWVyc0NvdW50LGk9dC5Dc2l6LHM9Z2V0UHJlY2luY3RTaXplc0luSW1hZ2VTY2FsZShyKTtsZXQgbz0wLGM9MCxsPTAsaD0wLHU9MDt0aGlzLm5leHRQYWNrZXQ9ZnVuY3Rpb24gSnB4SW1hZ2VfbmV4dFBhY2tldCgpe2Zvcig7bDxpOysrbCl7Y29uc3QgZT1yLmNvbXBvbmVudHNbbF0sdD1zLmNvbXBvbmVudHNbbF0sYT1lLmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQ7Zm9yKDt1PHQubWF4TnVtSGlnaDt1Kyspe2Zvcig7aDx0Lm1heE51bVdpZGU7aCsrKXtmb3IoO2M8PWE7YysrKXtjb25zdCBhPWUucmVzb2x1dGlvbnNbY10scj10LnJlc29sdXRpb25zW2NdLGk9Z2V0UHJlY2luY3RJbmRleElmRXhpc3QoaCx1LHIsdCxhKTtpZihudWxsIT09aSl7Zm9yKDtvPG47KXtjb25zdCBlPWNyZWF0ZVBhY2tldChhLGksbyk7bysrO3JldHVybiBlfW89MH19Yz0wfWg9MH11PTB9dGhyb3cgbmV3IEpweEVycm9yKCJPdXQgb2YgcGFja2V0cyIpfX1mdW5jdGlvbiBnZXRQcmVjaW5jdEluZGV4SWZFeGlzdChlLHQsYSxyLG4pe2NvbnN0IGk9ZSpyLm1pbldpZHRoLHM9dCpyLm1pbkhlaWdodDtpZihpJWEud2lkdGghPTB8fHMlYS5oZWlnaHQhPTApcmV0dXJuIG51bGw7Y29uc3Qgbz1zL2Eud2lkdGgqbi5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3Rzd2lkZTtyZXR1cm4gaS9hLmhlaWdodCtvfWZ1bmN0aW9uIGdldFByZWNpbmN0U2l6ZXNJbkltYWdlU2NhbGUoZSl7Y29uc3QgdD1lLmNvbXBvbmVudHMubGVuZ3RoO2xldCBhPU51bWJlci5NQVhfVkFMVUUscj1OdW1iZXIuTUFYX1ZBTFVFLG49MCxpPTA7Y29uc3Qgcz1uZXcgQXJyYXkodCk7Zm9yKGxldCBvPTA7bzx0O28rKyl7Y29uc3QgdD1lLmNvbXBvbmVudHNbb10sYz10LmNvZGluZ1N0eWxlUGFyYW1ldGVycy5kZWNvbXBvc2l0aW9uTGV2ZWxzQ291bnQsbD1uZXcgQXJyYXkoYysxKTtsZXQgaD1OdW1iZXIuTUFYX1ZBTFVFLHU9TnVtYmVyLk1BWF9WQUxVRSxkPTAsZj0wLGc9MTtmb3IobGV0IGU9YztlPj0wOy0tZSl7Y29uc3QgYT10LnJlc29sdXRpb25zW2VdLHI9ZyphLnByZWNpbmN0UGFyYW1ldGVycy5wcmVjaW5jdFdpZHRoLG49ZyphLnByZWNpbmN0UGFyYW1ldGVycy5wcmVjaW5jdEhlaWdodDtoPU1hdGgubWluKGgscik7dT1NYXRoLm1pbih1LG4pO2Q9TWF0aC5tYXgoZCxhLnByZWNpbmN0UGFyYW1ldGVycy5udW1wcmVjaW5jdHN3aWRlKTtmPU1hdGgubWF4KGYsYS5wcmVjaW5jdFBhcmFtZXRlcnMubnVtcHJlY2luY3RzaGlnaCk7bFtlXT17d2lkdGg6cixoZWlnaHQ6bn07Zzw8PTF9YT1NYXRoLm1pbihhLGgpO3I9TWF0aC5taW4ocix1KTtuPU1hdGgubWF4KG4sZCk7aT1NYXRoLm1heChpLGYpO3Nbb109e3Jlc29sdXRpb25zOmwsbWluV2lkdGg6aCxtaW5IZWlnaHQ6dSxtYXhOdW1XaWRlOmQsbWF4TnVtSGlnaDpmfX1yZXR1cm57Y29tcG9uZW50czpzLG1pbldpZHRoOmEsbWluSGVpZ2h0OnIsbWF4TnVtV2lkZTpuLG1heE51bUhpZ2g6aX19ZnVuY3Rpb24gYnVpbGRQYWNrZXRzKGUpe2NvbnN0IHQ9ZS5TSVosYT1lLmN1cnJlbnRUaWxlLmluZGV4LHI9ZS50aWxlc1thXSxuPXQuQ3Npejtmb3IobGV0IGU9MDtlPG47ZSsrKXtjb25zdCB0PXIuY29tcG9uZW50c1tlXSxhPXQuY29kaW5nU3R5bGVQYXJhbWV0ZXJzLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudCxuPVtdLGk9W107Zm9yKGxldCBlPTA7ZTw9YTtlKyspe2NvbnN0IHI9Z2V0QmxvY2tzRGltZW5zaW9ucygwLHQsZSkscz17fSxvPTE8PGEtZTtzLnRyeDA9TWF0aC5jZWlsKHQudGN4MC9vKTtzLnRyeTA9TWF0aC5jZWlsKHQudGN5MC9vKTtzLnRyeDE9TWF0aC5jZWlsKHQudGN4MS9vKTtzLnRyeTE9TWF0aC5jZWlsKHQudGN5MS9vKTtzLnJlc0xldmVsPWU7YnVpbGRQcmVjaW5jdHMoMCxzLHIpO24ucHVzaChzKTtsZXQgYztpZigwPT09ZSl7Yz17fTtjLnR5cGU9IkxMIjtjLnRieDA9TWF0aC5jZWlsKHQudGN4MC9vKTtjLnRieTA9TWF0aC5jZWlsKHQudGN5MC9vKTtjLnRieDE9TWF0aC5jZWlsKHQudGN4MS9vKTtjLnRieTE9TWF0aC5jZWlsKHQudGN5MS9vKTtjLnJlc29sdXRpb249cztidWlsZENvZGVibG9ja3MoMCxjLHIpO2kucHVzaChjKTtzLnN1YmJhbmRzPVtjXX1lbHNle2NvbnN0IG49MTw8YS1lKzEsbz1bXTtjPXt9O2MudHlwZT0iSEwiO2MudGJ4MD1NYXRoLmNlaWwodC50Y3gwL24tLjUpO2MudGJ5MD1NYXRoLmNlaWwodC50Y3kwL24pO2MudGJ4MT1NYXRoLmNlaWwodC50Y3gxL24tLjUpO2MudGJ5MT1NYXRoLmNlaWwodC50Y3kxL24pO2MucmVzb2x1dGlvbj1zO2J1aWxkQ29kZWJsb2NrcygwLGMscik7aS5wdXNoKGMpO28ucHVzaChjKTtjPXt9O2MudHlwZT0iTEgiO2MudGJ4MD1NYXRoLmNlaWwodC50Y3gwL24pO2MudGJ5MD1NYXRoLmNlaWwodC50Y3kwL24tLjUpO2MudGJ4MT1NYXRoLmNlaWwodC50Y3gxL24pO2MudGJ5MT1NYXRoLmNlaWwodC50Y3kxL24tLjUpO2MucmVzb2x1dGlvbj1zO2J1aWxkQ29kZWJsb2NrcygwLGMscik7aS5wdXNoKGMpO28ucHVzaChjKTtjPXt9O2MudHlwZT0iSEgiO2MudGJ4MD1NYXRoLmNlaWwodC50Y3gwL24tLjUpO2MudGJ5MD1NYXRoLmNlaWwodC50Y3kwL24tLjUpO2MudGJ4MT1NYXRoLmNlaWwodC50Y3gxL24tLjUpO2MudGJ5MT1NYXRoLmNlaWwodC50Y3kxL24tLjUpO2MucmVzb2x1dGlvbj1zO2J1aWxkQ29kZWJsb2NrcygwLGMscik7aS5wdXNoKGMpO28ucHVzaChjKTtzLnN1YmJhbmRzPW99fXQucmVzb2x1dGlvbnM9bjt0LnN1YmJhbmRzPWl9Y29uc3QgaT1yLmNvZGluZ1N0eWxlRGVmYXVsdFBhcmFtZXRlcnMucHJvZ3Jlc3Npb25PcmRlcjtzd2l0Y2goaSl7Y2FzZSAwOnIucGFja2V0c0l0ZXJhdG9yPW5ldyBMYXllclJlc29sdXRpb25Db21wb25lbnRQb3NpdGlvbkl0ZXJhdG9yKGUpO2JyZWFrO2Nhc2UgMTpyLnBhY2tldHNJdGVyYXRvcj1uZXcgUmVzb2x1dGlvbkxheWVyQ29tcG9uZW50UG9zaXRpb25JdGVyYXRvcihlKTticmVhaztjYXNlIDI6ci5wYWNrZXRzSXRlcmF0b3I9bmV3IFJlc29sdXRpb25Qb3NpdGlvbkNvbXBvbmVudExheWVySXRlcmF0b3IoZSk7YnJlYWs7Y2FzZSAzOnIucGFja2V0c0l0ZXJhdG9yPW5ldyBQb3NpdGlvbkNvbXBvbmVudFJlc29sdXRpb25MYXllckl0ZXJhdG9yKGUpO2JyZWFrO2Nhc2UgNDpyLnBhY2tldHNJdGVyYXRvcj1uZXcgQ29tcG9uZW50UG9zaXRpb25SZXNvbHV0aW9uTGF5ZXJJdGVyYXRvcihlKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBKcHhFcnJvcihgVW5zdXBwb3J0ZWQgcHJvZ3Jlc3Npb24gb3JkZXIgJHtpfWApfX1mdW5jdGlvbiBwYXJzZVRpbGVQYWNrZXRzKGUsdCxhLHIpe2xldCBpLHM9MCxvPTAsYz0hMTtmdW5jdGlvbiByZWFkQml0cyhlKXtmb3IoO288ZTspe2NvbnN0IGU9dFthK3NdO3MrKztpZihjKXtpPWk8PDd8ZTtvKz03O2M9ITF9ZWxzZXtpPWk8PDh8ZTtvKz04fTI1NT09PWUmJihjPSEwKX1vLT1lO3JldHVybiBpPj4+byYoMTw8ZSktMX1mdW5jdGlvbiBza2lwTWFya2VySWZFcXVhbChlKXtpZigyNTU9PT10W2Ercy0xXSYmdFthK3NdPT09ZSl7c2tpcEJ5dGVzKDEpO3JldHVybiEwfWlmKDI1NT09PXRbYStzXSYmdFthK3MrMV09PT1lKXtza2lwQnl0ZXMoMik7cmV0dXJuITB9cmV0dXJuITF9ZnVuY3Rpb24gc2tpcEJ5dGVzKGUpe3MrPWV9ZnVuY3Rpb24gYWxpZ25Ub0J5dGUoKXtvPTA7aWYoYyl7cysrO2M9ITF9fWZ1bmN0aW9uIHJlYWRDb2RpbmdwYXNzZXMoKXtpZigwPT09cmVhZEJpdHMoMSkpcmV0dXJuIDE7aWYoMD09PXJlYWRCaXRzKDEpKXJldHVybiAyO2xldCBlPXJlYWRCaXRzKDIpO2lmKGU8MylyZXR1cm4gZSszO2U9cmVhZEJpdHMoNSk7aWYoZTwzMSlyZXR1cm4gZSs2O2U9cmVhZEJpdHMoNyk7cmV0dXJuIGUrMzd9Y29uc3QgbD1lLmN1cnJlbnRUaWxlLmluZGV4LGg9ZS50aWxlc1tsXSx1PWUuQ09ELnNvcE1hcmtlclVzZWQsZD1lLkNPRC5lcGhNYXJrZXJVc2VkLGY9aC5wYWNrZXRzSXRlcmF0b3I7Zm9yKDtzPHI7KXthbGlnblRvQnl0ZSgpO3UmJnNraXBNYXJrZXJJZkVxdWFsKDE0NSkmJnNraXBCeXRlcyg0KTtjb25zdCBlPWYubmV4dFBhY2tldCgpO2lmKCFyZWFkQml0cygxKSljb250aW51ZTtjb25zdCByPWUubGF5ZXJOdW1iZXIsaT1bXTtsZXQgbztmb3IobGV0IHQ9MCxhPWUuY29kZWJsb2Nrcy5sZW5ndGg7dDxhO3QrKyl7bz1lLmNvZGVibG9ja3NbdF07bGV0IGE9by5wcmVjaW5jdDtjb25zdCBzPW8uY2J4LWEuY2J4TWluLGM9by5jYnktYS5jYnlNaW47bGV0IGwsaCx1PSExLGQ9ITE7aWYodm9pZCAwIT09by5pbmNsdWRlZCl1PSEhcmVhZEJpdHMoMSk7ZWxzZXthPW8ucHJlY2luY3Q7bGV0IGU7aWYodm9pZCAwIT09YS5pbmNsdXNpb25UcmVlKWU9YS5pbmNsdXNpb25UcmVlO2Vsc2V7Y29uc3QgdD1hLmNieE1heC1hLmNieE1pbisxLG49YS5jYnlNYXgtYS5jYnlNaW4rMTtlPW5ldyBJbmNsdXNpb25UcmVlKHQsbixyKTtoPW5ldyBUYWdUcmVlKHQsbik7YS5pbmNsdXNpb25UcmVlPWU7YS56ZXJvQml0UGxhbmVzVHJlZT1oO2ZvcihsZXQgZT0wO2U8cjtlKyspaWYoMCE9PXJlYWRCaXRzKDEpKXRocm93IG5ldyBKcHhFcnJvcigiSW52YWxpZCB0YWcgdHJlZSIpfWlmKGUucmVzZXQocyxjLHIpKWZvcig7Oyl7aWYoIXJlYWRCaXRzKDEpKXtlLmluY3JlbWVudFZhbHVlKHIpO2JyZWFrfWw9IWUubmV4dExldmVsKCk7aWYobCl7by5pbmNsdWRlZD0hMDt1PWQ9ITA7YnJlYWt9fX1pZighdSljb250aW51ZTtpZihkKXtoPWEuemVyb0JpdFBsYW5lc1RyZWU7aC5yZXNldChzLGMpO2Zvcig7OylpZihyZWFkQml0cygxKSl7bD0haC5uZXh0TGV2ZWwoKTtpZihsKWJyZWFrfWVsc2UgaC5pbmNyZW1lbnRWYWx1ZSgpO28uemVyb0JpdFBsYW5lcz1oLnZhbHVlfWNvbnN0IGY9cmVhZENvZGluZ3Bhc3NlcygpO2Zvcig7cmVhZEJpdHMoMSk7KW8uTGJsb2NrKys7Y29uc3QgZz0oMCxuLmxvZzIpKGYpLHA9cmVhZEJpdHMoKGY8MTw8Zz9nLTE6Zykrby5MYmxvY2spO2kucHVzaCh7Y29kZWJsb2NrOm8sY29kaW5ncGFzc2VzOmYsZGF0YUxlbmd0aDpwfSl9YWxpZ25Ub0J5dGUoKTtkJiZza2lwTWFya2VySWZFcXVhbCgxNDYpO2Zvcig7aS5sZW5ndGg+MDspe2NvbnN0IGU9aS5zaGlmdCgpO289ZS5jb2RlYmxvY2s7dm9pZCAwPT09by5kYXRhJiYoby5kYXRhPVtdKTtvLmRhdGEucHVzaCh7ZGF0YTp0LHN0YXJ0OmErcyxlbmQ6YStzK2UuZGF0YUxlbmd0aCxjb2RpbmdwYXNzZXM6ZS5jb2RpbmdwYXNzZXN9KTtzKz1lLmRhdGFMZW5ndGh9fXJldHVybiBzfWZ1bmN0aW9uIGNvcHlDb2VmZmljaWVudHMoZSx0LGEscixuLHMsbyxjLGwpe2NvbnN0IGg9ci50YngwLHU9ci50YnkwLGQ9ci50YngxLXIudGJ4MCxmPXIuY29kZWJsb2NrcyxnPSJIIj09PXIudHlwZS5jaGFyQXQoMCk/MTowLHA9IkgiPT09ci50eXBlLmNoYXJBdCgxKT90OjA7Zm9yKGxldCBhPTAsbT1mLmxlbmd0aDthPG07KythKXtjb25zdCBtPWZbYV0sYj1tLnRieDFfLW0udGJ4MF8seT1tLnRieTFfLW0udGJ5MF87aWYoMD09PWJ8fDA9PT15KWNvbnRpbnVlO2lmKHZvaWQgMD09PW0uZGF0YSljb250aW51ZTtjb25zdCB3PW5ldyBCaXRNb2RlbChiLHksbS5zdWJiYW5kVHlwZSxtLnplcm9CaXRQbGFuZXMscyk7bGV0IFM9Mjtjb25zdCB4PW0uZGF0YTtsZXQgQyxrLHYsRj0wLE89MDtmb3IoQz0wLGs9eC5sZW5ndGg7QzxrO0MrKyl7dj14W0NdO0YrPXYuZW5kLXYuc3RhcnQ7Tys9di5jb2RpbmdwYXNzZXN9Y29uc3QgVD1uZXcgVWludDhBcnJheShGKTtsZXQgTT0wO2ZvcihDPTAsaz14Lmxlbmd0aDtDPGs7QysrKXt2PXhbQ107Y29uc3QgZT12LmRhdGEuc3ViYXJyYXkodi5zdGFydCx2LmVuZCk7VC5zZXQoZSxNKTtNKz1lLmxlbmd0aH1jb25zdCBEPW5ldyBpLkFyaXRobWV0aWNEZWNvZGVyKFQsMCxGKTt3LnNldERlY29kZXIoRCk7Zm9yKEM9MDtDPE87QysrKXtzd2l0Y2goUyl7Y2FzZSAwOncucnVuU2lnbmlmaWNhbmNlUHJvcGFnYXRpb25QYXNzKCk7YnJlYWs7Y2FzZSAxOncucnVuTWFnbml0dWRlUmVmaW5lbWVudFBhc3MoKTticmVhaztjYXNlIDI6dy5ydW5DbGVhbnVwUGFzcygpO2MmJncuY2hlY2tTZWdtZW50YXRpb25TeW1ib2woKX1sJiZ3LnJlc2V0KCk7Uz0oUysxKSUzfWxldCBFPW0udGJ4MF8taCsobS50YnkwXy11KSpkO2NvbnN0IE49dy5jb2VmZmljZW50c1NpZ24sUj13LmNvZWZmaWNlbnRzTWFnbml0dWRlLEw9dy5iaXRzRGVjb2RlZCwkPW8/MDouNTtsZXQgXyxqLFU7TT0wO2NvbnN0IFg9IkxMIiE9PXIudHlwZTtmb3IoQz0wO0M8eTtDKyspe2NvbnN0IGE9MiooRS9kfDApKih0LWQpK2crcDtmb3IoXz0wO188YjtfKyspe2o9UltNXTtpZigwIT09ail7aj0oaiskKSpuOzAhPT1OW01dJiYoaj0taik7VT1MW01dO2VbWD9hKyhFPDwxKTpFXT1vJiZVPj1zP2o6aiooMTw8cy1VKX1FKys7TSsrfUUrPWQtYn19fWZ1bmN0aW9uIHRyYW5zZm9ybVRpbGUoZSx0LGEpe2NvbnN0IHI9dC5jb21wb25lbnRzW2FdLG49ci5jb2RpbmdTdHlsZVBhcmFtZXRlcnMsaT1yLnF1YW50aXphdGlvblBhcmFtZXRlcnMsbz1uLmRlY29tcG9zaXRpb25MZXZlbHNDb3VudCxjPWkuU1BxY2RzLGw9aS5zY2FsYXJFeHBvdW5kZWQsaD1pLmd1YXJkQml0cyx1PW4uc2VnbWVudGF0aW9uU3ltYm9sVXNlZCxkPW4ucmVzZXRDb250ZXh0UHJvYmFiaWxpdGllcyxmPWUuY29tcG9uZW50c1thXS5wcmVjaXNpb24sZz1uLnJldmVyc2libGVUcmFuc2Zvcm1hdGlvbixwPWc/bmV3IFJldmVyc2libGVUcmFuc2Zvcm06bmV3IElycmV2ZXJzaWJsZVRyYW5zZm9ybSxtPVtdO2xldCBiPTA7Zm9yKGxldCBlPTA7ZTw9bztlKyspe2NvbnN0IHQ9ci5yZXNvbHV0aW9uc1tlXSxhPXQudHJ4MS10LnRyeDAsbj10LnRyeTEtdC50cnkwLGk9bmV3IEZsb2F0MzJBcnJheShhKm4pO2ZvcihsZXQgcj0wLG49dC5zdWJiYW5kcy5sZW5ndGg7cjxuO3IrKyl7bGV0IG4sbztpZihsKXtuPWNbYl0ubXU7bz1jW2JdLmVwc2lsb247YisrfWVsc2V7bj1jWzBdLm11O289Y1swXS5lcHNpbG9uKyhlPjA/MS1lOjApfWNvbnN0IHA9dC5zdWJiYW5kc1tyXSxtPXNbcC50eXBlXTtjb3B5Q29lZmZpY2llbnRzKGksYSwwLHAsZz8xOjIqKihmK20tbykqKDErbi8yMDQ4KSxoK28tMSxnLHUsZCl9bS5wdXNoKHt3aWR0aDphLGhlaWdodDpuLGl0ZW1zOml9KX1jb25zdCB5PXAuY2FsY3VsYXRlKG0sci50Y3gwLHIudGN5MCk7cmV0dXJue2xlZnQ6ci50Y3gwLHRvcDpyLnRjeTAsd2lkdGg6eS53aWR0aCxoZWlnaHQ6eS5oZWlnaHQsaXRlbXM6eS5pdGVtc319ZnVuY3Rpb24gaW5pdGlhbGl6ZVRpbGUoZSx0KXtjb25zdCBhPWUuU0laLkNzaXoscj1lLnRpbGVzW3RdO2ZvcihsZXQgdD0wO3Q8YTt0Kyspe2NvbnN0IGE9ci5jb21wb25lbnRzW3RdLG49dm9pZCAwIT09ZS5jdXJyZW50VGlsZS5RQ0NbdF0/ZS5jdXJyZW50VGlsZS5RQ0NbdF06ZS5jdXJyZW50VGlsZS5RQ0Q7YS5xdWFudGl6YXRpb25QYXJhbWV0ZXJzPW47Y29uc3QgaT12b2lkIDAhPT1lLmN1cnJlbnRUaWxlLkNPQ1t0XT9lLmN1cnJlbnRUaWxlLkNPQ1t0XTplLmN1cnJlbnRUaWxlLkNPRDthLmNvZGluZ1N0eWxlUGFyYW1ldGVycz1pfXIuY29kaW5nU3R5bGVEZWZhdWx0UGFyYW1ldGVycz1lLmN1cnJlbnRUaWxlLkNPRH1jbGFzcyBUYWdUcmVle2NvbnN0cnVjdG9yKGUsdCl7Y29uc3QgYT0oMCxuLmxvZzIpKE1hdGgubWF4KGUsdCkpKzE7dGhpcy5sZXZlbHM9W107Zm9yKGxldCByPTA7cjxhO3IrKyl7Y29uc3QgYT17d2lkdGg6ZSxoZWlnaHQ6dCxpdGVtczpbXX07dGhpcy5sZXZlbHMucHVzaChhKTtlPU1hdGguY2VpbChlLzIpO3Q9TWF0aC5jZWlsKHQvMil9fXJlc2V0KGUsdCl7bGV0IGEscj0wLG49MDtmb3IoO3I8dGhpcy5sZXZlbHMubGVuZ3RoOyl7YT10aGlzLmxldmVsc1tyXTtjb25zdCBpPWUrdCphLndpZHRoO2lmKHZvaWQgMCE9PWEuaXRlbXNbaV0pe249YS5pdGVtc1tpXTticmVha31hLmluZGV4PWk7ZT4+PTE7dD4+PTE7cisrfXItLTthPXRoaXMubGV2ZWxzW3JdO2EuaXRlbXNbYS5pbmRleF09bjt0aGlzLmN1cnJlbnRMZXZlbD1yO2RlbGV0ZSB0aGlzLnZhbHVlfWluY3JlbWVudFZhbHVlKCl7Y29uc3QgZT10aGlzLmxldmVsc1t0aGlzLmN1cnJlbnRMZXZlbF07ZS5pdGVtc1tlLmluZGV4XSsrfW5leHRMZXZlbCgpe2xldCBlPXRoaXMuY3VycmVudExldmVsLHQ9dGhpcy5sZXZlbHNbZV07Y29uc3QgYT10Lml0ZW1zW3QuaW5kZXhdO2UtLTtpZihlPDApe3RoaXMudmFsdWU9YTtyZXR1cm4hMX10aGlzLmN1cnJlbnRMZXZlbD1lO3Q9dGhpcy5sZXZlbHNbZV07dC5pdGVtc1t0LmluZGV4XT1hO3JldHVybiEwfX1jbGFzcyBJbmNsdXNpb25UcmVle2NvbnN0cnVjdG9yKGUsdCxhKXtjb25zdCByPSgwLG4ubG9nMikoTWF0aC5tYXgoZSx0KSkrMTt0aGlzLmxldmVscz1bXTtmb3IobGV0IG49MDtuPHI7bisrKXtjb25zdCByPW5ldyBVaW50OEFycmF5KGUqdCk7Zm9yKGxldCBlPTAsdD1yLmxlbmd0aDtlPHQ7ZSsrKXJbZV09YTtjb25zdCBuPXt3aWR0aDplLGhlaWdodDp0LGl0ZW1zOnJ9O3RoaXMubGV2ZWxzLnB1c2gobik7ZT1NYXRoLmNlaWwoZS8yKTt0PU1hdGguY2VpbCh0LzIpfX1yZXNldChlLHQsYSl7bGV0IHI9MDtmb3IoO3I8dGhpcy5sZXZlbHMubGVuZ3RoOyl7Y29uc3Qgbj10aGlzLmxldmVsc1tyXSxpPWUrdCpuLndpZHRoO24uaW5kZXg9aTtjb25zdCBzPW4uaXRlbXNbaV07aWYoMjU1PT09cylicmVhaztpZihzPmEpe3RoaXMuY3VycmVudExldmVsPXI7dGhpcy5wcm9wYWdhdGVWYWx1ZXMoKTtyZXR1cm4hMX1lPj49MTt0Pj49MTtyKyt9dGhpcy5jdXJyZW50TGV2ZWw9ci0xO3JldHVybiEwfWluY3JlbWVudFZhbHVlKGUpe2NvbnN0IHQ9dGhpcy5sZXZlbHNbdGhpcy5jdXJyZW50TGV2ZWxdO3QuaXRlbXNbdC5pbmRleF09ZSsxO3RoaXMucHJvcGFnYXRlVmFsdWVzKCl9cHJvcGFnYXRlVmFsdWVzKCl7bGV0IGU9dGhpcy5jdXJyZW50TGV2ZWwsdD10aGlzLmxldmVsc1tlXTtjb25zdCBhPXQuaXRlbXNbdC5pbmRleF07Zm9yKDstLWU+PTA7KXt0PXRoaXMubGV2ZWxzW2VdO3QuaXRlbXNbdC5pbmRleF09YX19bmV4dExldmVsKCl7bGV0IGU9dGhpcy5jdXJyZW50TGV2ZWwsdD10aGlzLmxldmVsc1tlXTtjb25zdCBhPXQuaXRlbXNbdC5pbmRleF07dC5pdGVtc1t0LmluZGV4XT0yNTU7ZS0tO2lmKGU8MClyZXR1cm4hMTt0aGlzLmN1cnJlbnRMZXZlbD1lO3Q9dGhpcy5sZXZlbHNbZV07dC5pdGVtc1t0LmluZGV4XT1hO3JldHVybiEwfX1jbGFzcyBCaXRNb2RlbHtzdGF0aWMgVU5JRk9STV9DT05URVhUPTE3O3N0YXRpYyBSVU5MRU5HVEhfQ09OVEVYVD0xODtzdGF0aWMgTExBbmRMSENvbnRleHRzTGFiZWw9bmV3IFVpbnQ4QXJyYXkoWzAsNSw4LDAsMyw3LDgsMCw0LDcsOCwwLDAsMCwwLDAsMSw2LDgsMCwzLDcsOCwwLDQsNyw4LDAsMCwwLDAsMCwyLDYsOCwwLDMsNyw4LDAsNCw3LDgsMCwwLDAsMCwwLDIsNiw4LDAsMyw3LDgsMCw0LDcsOCwwLDAsMCwwLDAsMiw2LDgsMCwzLDcsOCwwLDQsNyw4XSk7c3RhdGljIEhMQ29udGV4dExhYmVsPW5ldyBVaW50OEFycmF5KFswLDMsNCwwLDUsNyw3LDAsOCw4LDgsMCwwLDAsMCwwLDEsMyw0LDAsNiw3LDcsMCw4LDgsOCwwLDAsMCwwLDAsMiwzLDQsMCw2LDcsNywwLDgsOCw4LDAsMCwwLDAsMCwyLDMsNCwwLDYsNyw3LDAsOCw4LDgsMCwwLDAsMCwwLDIsMyw0LDAsNiw3LDcsMCw4LDgsOF0pO3N0YXRpYyBISENvbnRleHRMYWJlbD1uZXcgVWludDhBcnJheShbMCwxLDIsMCwxLDIsMiwwLDIsMiwyLDAsMCwwLDAsMCwzLDQsNSwwLDQsNSw1LDAsNSw1LDUsMCwwLDAsMCwwLDYsNyw3LDAsNyw3LDcsMCw3LDcsNywwLDAsMCwwLDAsOCw4LDgsMCw4LDgsOCwwLDgsOCw4LDAsMCwwLDAsMCw4LDgsOCwwLDgsOCw4LDAsOCw4LDhdKTtjb25zdHJ1Y3RvcihlLHQsYSxyLG4pe3RoaXMud2lkdGg9ZTt0aGlzLmhlaWdodD10O2xldCBpO2k9IkhIIj09PWE/Qml0TW9kZWwuSEhDb250ZXh0TGFiZWw6IkhMIj09PWE/Qml0TW9kZWwuSExDb250ZXh0TGFiZWw6Qml0TW9kZWwuTExBbmRMSENvbnRleHRzTGFiZWw7dGhpcy5jb250ZXh0TGFiZWxUYWJsZT1pO2NvbnN0IHM9ZSp0O3RoaXMubmVpZ2hib3JzU2lnbmlmaWNhbmNlPW5ldyBVaW50OEFycmF5KHMpO3RoaXMuY29lZmZpY2VudHNTaWduPW5ldyBVaW50OEFycmF5KHMpO2xldCBvO289bj4xND9uZXcgVWludDMyQXJyYXkocyk6bj42P25ldyBVaW50MTZBcnJheShzKTpuZXcgVWludDhBcnJheShzKTt0aGlzLmNvZWZmaWNlbnRzTWFnbml0dWRlPW87dGhpcy5wcm9jZXNzaW5nRmxhZ3M9bmV3IFVpbnQ4QXJyYXkocyk7Y29uc3QgYz1uZXcgVWludDhBcnJheShzKTtpZigwIT09cilmb3IobGV0IGU9MDtlPHM7ZSsrKWNbZV09cjt0aGlzLmJpdHNEZWNvZGVkPWM7dGhpcy5yZXNldCgpfXNldERlY29kZXIoZSl7dGhpcy5kZWNvZGVyPWV9cmVzZXQoKXt0aGlzLmNvbnRleHRzPW5ldyBJbnQ4QXJyYXkoMTkpO3RoaXMuY29udGV4dHNbMF09ODt0aGlzLmNvbnRleHRzW0JpdE1vZGVsLlVOSUZPUk1fQ09OVEVYVF09OTI7dGhpcy5jb250ZXh0c1tCaXRNb2RlbC5SVU5MRU5HVEhfQ09OVEVYVF09Nn1zZXROZWlnaGJvcnNTaWduaWZpY2FuY2UoZSx0LGEpe2NvbnN0IHI9dGhpcy5uZWlnaGJvcnNTaWduaWZpY2FuY2Usbj10aGlzLndpZHRoLGk9dGhpcy5oZWlnaHQscz10PjAsbz10KzE8bjtsZXQgYztpZihlPjApe2M9YS1uO3MmJihyW2MtMV0rPTE2KTtvJiYocltjKzFdKz0xNik7cltjXSs9NH1pZihlKzE8aSl7Yz1hK247cyYmKHJbYy0xXSs9MTYpO28mJihyW2MrMV0rPTE2KTtyW2NdKz00fXMmJihyW2EtMV0rPTEpO28mJihyW2ErMV0rPTEpO3JbYV18PTEyOH1ydW5TaWduaWZpY2FuY2VQcm9wYWdhdGlvblBhc3MoKXtjb25zdCBlPXRoaXMuZGVjb2Rlcix0PXRoaXMud2lkdGgsYT10aGlzLmhlaWdodCxyPXRoaXMuY29lZmZpY2VudHNNYWduaXR1ZGUsbj10aGlzLmNvZWZmaWNlbnRzU2lnbixpPXRoaXMubmVpZ2hib3JzU2lnbmlmaWNhbmNlLHM9dGhpcy5wcm9jZXNzaW5nRmxhZ3Msbz10aGlzLmNvbnRleHRzLGM9dGhpcy5jb250ZXh0TGFiZWxUYWJsZSxsPXRoaXMuYml0c0RlY29kZWQ7Zm9yKGxldCBoPTA7aDxhO2grPTQpZm9yKGxldCB1PTA7dTx0O3UrKyl7bGV0IGQ9aCp0K3U7Zm9yKGxldCBmPTA7Zjw0O2YrKyxkKz10KXtjb25zdCB0PWgrZjtpZih0Pj1hKWJyZWFrO3NbZF0mPS0yO2lmKHJbZF18fCFpW2RdKWNvbnRpbnVlO2NvbnN0IGc9Y1tpW2RdXTtpZihlLnJlYWRCaXQobyxnKSl7Y29uc3QgZT10aGlzLmRlY29kZVNpZ25CaXQodCx1LGQpO25bZF09ZTtyW2RdPTE7dGhpcy5zZXROZWlnaGJvcnNTaWduaWZpY2FuY2UodCx1LGQpO3NbZF18PTJ9bFtkXSsrO3NbZF18PTF9fX1kZWNvZGVTaWduQml0KGUsdCxhKXtjb25zdCByPXRoaXMud2lkdGgsbj10aGlzLmhlaWdodCxpPXRoaXMuY29lZmZpY2VudHNNYWduaXR1ZGUscz10aGlzLmNvZWZmaWNlbnRzU2lnbjtsZXQgbyxjLGwsaCx1LGQ7aD10PjAmJjAhPT1pW2EtMV07aWYodCsxPHImJjAhPT1pW2ErMV0pe2w9c1thKzFdO2lmKGgpe2M9c1thLTFdO289MS1sLWN9ZWxzZSBvPTEtbC1sfWVsc2UgaWYoaCl7Yz1zW2EtMV07bz0xLWMtY31lbHNlIG89MDtjb25zdCBmPTMqbztoPWU+MCYmMCE9PWlbYS1yXTtpZihlKzE8biYmMCE9PWlbYStyXSl7bD1zW2Ercl07aWYoaCl7Yz1zW2Etcl07bz0xLWwtYytmfWVsc2Ugbz0xLWwtbCtmfWVsc2UgaWYoaCl7Yz1zW2Etcl07bz0xLWMtYytmfWVsc2Ugbz1mO2lmKG8+PTApe3U9OStvO2Q9dGhpcy5kZWNvZGVyLnJlYWRCaXQodGhpcy5jb250ZXh0cyx1KX1lbHNle3U9OS1vO2Q9MV50aGlzLmRlY29kZXIucmVhZEJpdCh0aGlzLmNvbnRleHRzLHUpfXJldHVybiBkfXJ1bk1hZ25pdHVkZVJlZmluZW1lbnRQYXNzKCl7Y29uc3QgZT10aGlzLmRlY29kZXIsdD10aGlzLndpZHRoLGE9dGhpcy5oZWlnaHQscj10aGlzLmNvZWZmaWNlbnRzTWFnbml0dWRlLG49dGhpcy5uZWlnaGJvcnNTaWduaWZpY2FuY2UsaT10aGlzLmNvbnRleHRzLHM9dGhpcy5iaXRzRGVjb2RlZCxvPXRoaXMucHJvY2Vzc2luZ0ZsYWdzLGM9dCphLGw9NCp0O2ZvcihsZXQgYSxoPTA7aDxjO2g9YSl7YT1NYXRoLm1pbihjLGgrbCk7Zm9yKGxldCBjPTA7Yzx0O2MrKylmb3IobGV0IGw9aCtjO2w8YTtsKz10KXtpZighcltsXXx8MCE9KDEmb1tsXSkpY29udGludWU7bGV0IHQ9MTY7aWYoMCE9KDImb1tsXSkpe29bbF1ePTI7dD0wPT09KDEyNyZuW2xdKT8xNToxNH1jb25zdCBhPWUucmVhZEJpdChpLHQpO3JbbF09cltsXTw8MXxhO3NbbF0rKztvW2xdfD0xfX19cnVuQ2xlYW51cFBhc3MoKXtjb25zdCBlPXRoaXMuZGVjb2Rlcix0PXRoaXMud2lkdGgsYT10aGlzLmhlaWdodCxyPXRoaXMubmVpZ2hib3JzU2lnbmlmaWNhbmNlLG49dGhpcy5jb2VmZmljZW50c01hZ25pdHVkZSxpPXRoaXMuY29lZmZpY2VudHNTaWduLHM9dGhpcy5jb250ZXh0cyxvPXRoaXMuY29udGV4dExhYmVsVGFibGUsYz10aGlzLmJpdHNEZWNvZGVkLGw9dGhpcy5wcm9jZXNzaW5nRmxhZ3MsaD10LHU9Mip0LGQ9Myp0O2xldCBmO2ZvcihsZXQgZz0wO2c8YTtnPWYpe2Y9TWF0aC5taW4oZys0LGEpO2NvbnN0IHA9Zyp0LG09ZyszPGE7Zm9yKGxldCBhPTA7YTx0O2ErKyl7Y29uc3QgYj1wK2E7bGV0IHksdz0wLFM9Yix4PWc7aWYobSYmMD09PWxbYl0mJjA9PT1sW2IraF0mJjA9PT1sW2IrdV0mJjA9PT1sW2IrZF0mJjA9PT1yW2JdJiYwPT09cltiK2hdJiYwPT09cltiK3VdJiYwPT09cltiK2RdKXtpZighZS5yZWFkQml0KHMsQml0TW9kZWwuUlVOTEVOR1RIX0NPTlRFWFQpKXtjW2JdKys7Y1tiK2hdKys7Y1tiK3VdKys7Y1tiK2RdKys7Y29udGludWV9dz1lLnJlYWRCaXQocyxCaXRNb2RlbC5VTklGT1JNX0NPTlRFWFQpPDwxfGUucmVhZEJpdChzLEJpdE1vZGVsLlVOSUZPUk1fQ09OVEVYVCk7aWYoMCE9PXcpe3g9Zyt3O1MrPXcqdH15PXRoaXMuZGVjb2RlU2lnbkJpdCh4LGEsUyk7aVtTXT15O25bU109MTt0aGlzLnNldE5laWdoYm9yc1NpZ25pZmljYW5jZSh4LGEsUyk7bFtTXXw9MjtTPWI7Zm9yKGxldCBlPWc7ZTw9eDtlKyssUys9dCljW1NdKys7dysrfWZvcih4PWcrdzt4PGY7eCsrLFMrPXQpe2lmKG5bU118fDAhPSgxJmxbU10pKWNvbnRpbnVlO2NvbnN0IHQ9b1tyW1NdXTtpZigxPT09ZS5yZWFkQml0KHMsdCkpe3k9dGhpcy5kZWNvZGVTaWduQml0KHgsYSxTKTtpW1NdPXk7bltTXT0xO3RoaXMuc2V0TmVpZ2hib3JzU2lnbmlmaWNhbmNlKHgsYSxTKTtsW1NdfD0yfWNbU10rK319fX1jaGVja1NlZ21lbnRhdGlvblN5bWJvbCgpe2NvbnN0IGU9dGhpcy5kZWNvZGVyLHQ9dGhpcy5jb250ZXh0cztpZigxMCE9PShlLnJlYWRCaXQodCxCaXRNb2RlbC5VTklGT1JNX0NPTlRFWFQpPDwzfGUucmVhZEJpdCh0LEJpdE1vZGVsLlVOSUZPUk1fQ09OVEVYVCk8PDJ8ZS5yZWFkQml0KHQsQml0TW9kZWwuVU5JRk9STV9DT05URVhUKTw8MXxlLnJlYWRCaXQodCxCaXRNb2RlbC5VTklGT1JNX0NPTlRFWFQpKSl0aHJvdyBuZXcgSnB4RXJyb3IoIkludmFsaWQgc2VnbWVudGF0aW9uIHN5bWJvbCIpfX1jbGFzcyBUcmFuc2Zvcm17Y29uc3RydWN0b3IoKXt0aGlzLmNvbnN0cnVjdG9yPT09VHJhbnNmb3JtJiYoMCxyLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgVHJhbnNmb3JtLiIpfWNhbGN1bGF0ZShlLHQsYSl7bGV0IHI9ZVswXTtmb3IobGV0IG49MSxpPWUubGVuZ3RoO248aTtuKyspcj10aGlzLml0ZXJhdGUocixlW25dLHQsYSk7cmV0dXJuIHJ9ZXh0ZW5kKGUsdCxhKXtsZXQgcj10LTEsbj10KzEsaT10K2EtMixzPXQrYTtlW3ItLV09ZVtuKytdO2VbcysrXT1lW2ktLV07ZVtyLS1dPWVbbisrXTtlW3MrK109ZVtpLS1dO2Vbci0tXT1lW24rK107ZVtzKytdPWVbaS0tXTtlW3JdPWVbbl07ZVtzXT1lW2ldfWZpbHRlcihlLHQsYSl7KDAsci51bnJlYWNoYWJsZSkoIkFic3RyYWN0IG1ldGhvZCBgZmlsdGVyYCBjYWxsZWQiKX1pdGVyYXRlKGUsdCxhLHIpe2NvbnN0IG49ZS53aWR0aCxpPWUuaGVpZ2h0O2xldCBzPWUuaXRlbXM7Y29uc3Qgbz10LndpZHRoLGM9dC5oZWlnaHQsbD10Lml0ZW1zO2xldCBoLHUsZCxmLGcscDtmb3IoZD0wLGg9MDtoPGk7aCsrKXtmPTIqaCpvO2Zvcih1PTA7dTxuO3UrKyxkKyssZis9MilsW2ZdPXNbZF19cz1lLml0ZW1zPW51bGw7Y29uc3QgbT1uZXcgRmxvYXQzMkFycmF5KG8rOCk7aWYoMT09PW8pe2lmKDAhPSgxJmEpKWZvcihwPTAsZD0wO3A8YztwKyssZCs9bylsW2RdKj0uNX1lbHNlIGZvcihwPTAsZD0wO3A8YztwKyssZCs9byl7bS5zZXQobC5zdWJhcnJheShkLGQrbyksNCk7dGhpcy5leHRlbmQobSw0LG8pO3RoaXMuZmlsdGVyKG0sNCxvKTtsLnNldChtLnN1YmFycmF5KDQsNCtvKSxkKX1sZXQgYj0xNjtjb25zdCB5PVtdO2ZvcihoPTA7aDxiO2grKyl5LnB1c2gobmV3IEZsb2F0MzJBcnJheShjKzgpKTtsZXQgdyxTPTA7ZT00K2M7aWYoMT09PWMpe2lmKDAhPSgxJnIpKWZvcihnPTA7ZzxvO2crKylsW2ddKj0uNX1lbHNlIGZvcihnPTA7ZzxvO2crKyl7aWYoMD09PVMpe2I9TWF0aC5taW4oby1nLGIpO2ZvcihkPWcsZj00O2Y8ZTtkKz1vLGYrKylmb3Iodz0wO3c8Yjt3KyspeVt3XVtmXT1sW2Qrd107Uz1ifVMtLTtjb25zdCB0PXlbU107dGhpcy5leHRlbmQodCw0LGMpO3RoaXMuZmlsdGVyKHQsNCxjKTtpZigwPT09Uyl7ZD1nLWIrMTtmb3IoZj00O2Y8ZTtkKz1vLGYrKylmb3Iodz0wO3c8Yjt3KyspbFtkK3ddPXlbd11bZl19fXJldHVybnt3aWR0aDpvLGhlaWdodDpjLGl0ZW1zOmx9fX1jbGFzcyBJcnJldmVyc2libGVUcmFuc2Zvcm0gZXh0ZW5kcyBUcmFuc2Zvcm17ZmlsdGVyKGUsdCxhKXtjb25zdCByPWE+PjE7bGV0IG4saSxzLG87Y29uc3QgYz0tMS41ODYxMzQzNDIwNTk5MjQsbD0tLjA1Mjk4MDExODU3Mjk2MSxoPS44ODI5MTEwNzU1MzA5MzQsdT0uNDQzNTA2ODUyMDQzOTcxLGQ9MS4yMzAxNzQxMDQ5MTQwMDE7bj0odHw9MCktMztmb3IoaT1yKzQ7aS0tO24rPTIpZVtuXSo9LjgxMjg5MzA2NjExNTk2MDk7bj10LTI7cz11KmVbbi0xXTtmb3IoaT1yKzM7aS0tO24rPTIpe289dSplW24rMV07ZVtuXT1kKmVbbl0tcy1vO2lmKCFpLS0pYnJlYWs7bis9MjtzPXUqZVtuKzFdO2Vbbl09ZCplW25dLXMtb31uPXQtMTtzPWgqZVtuLTFdO2ZvcihpPXIrMjtpLS07bis9Mil7bz1oKmVbbisxXTtlW25dLT1zK287aWYoIWktLSlicmVhaztuKz0yO3M9aCplW24rMV07ZVtuXS09cytvfW49dDtzPWwqZVtuLTFdO2ZvcihpPXIrMTtpLS07bis9Mil7bz1sKmVbbisxXTtlW25dLT1zK287aWYoIWktLSlicmVhaztuKz0yO3M9bCplW24rMV07ZVtuXS09cytvfWlmKDAhPT1yKXtuPXQrMTtzPWMqZVtuLTFdO2ZvcihpPXI7aS0tO24rPTIpe289YyplW24rMV07ZVtuXS09cytvO2lmKCFpLS0pYnJlYWs7bis9MjtzPWMqZVtuKzFdO2Vbbl0tPXMrb319fX1jbGFzcyBSZXZlcnNpYmxlVHJhbnNmb3JtIGV4dGVuZHMgVHJhbnNmb3Jte2ZpbHRlcihlLHQsYSl7Y29uc3Qgcj1hPj4xO2xldCBuLGk7Zm9yKG49dHw9MCxpPXIrMTtpLS07bis9MillW25dLT1lW24tMV0rZVtuKzFdKzI+PjI7Zm9yKG49dCsxLGk9cjtpLS07bis9MillW25dKz1lW24tMV0rZVtuKzFdPj4xfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5MWldTdHJlYW09dm9pZCAwO3ZhciByPWEoMTgpO2NsYXNzIExaV1N0cmVhbSBleHRlbmRzIHIuRGVjb2RlU3RyZWFte2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcih0KTt0aGlzLnN0cj1lO3RoaXMuZGljdD1lLmRpY3Q7dGhpcy5jYWNoZWREYXRhPTA7dGhpcy5iaXRzQ2FjaGVkPTA7Y29uc3Qgcj00MDk2LG49e2Vhcmx5Q2hhbmdlOmEsY29kZUxlbmd0aDo5LG5leHRDb2RlOjI1OCxkaWN0aW9uYXJ5VmFsdWVzOm5ldyBVaW50OEFycmF5KHIpLGRpY3Rpb25hcnlMZW5ndGhzOm5ldyBVaW50MTZBcnJheShyKSxkaWN0aW9uYXJ5UHJldkNvZGVzOm5ldyBVaW50MTZBcnJheShyKSxjdXJyZW50U2VxdWVuY2U6bmV3IFVpbnQ4QXJyYXkociksY3VycmVudFNlcXVlbmNlTGVuZ3RoOjB9O2ZvcihsZXQgZT0wO2U8MjU2OysrZSl7bi5kaWN0aW9uYXJ5VmFsdWVzW2VdPWU7bi5kaWN0aW9uYXJ5TGVuZ3Roc1tlXT0xfXRoaXMubHp3U3RhdGU9bn1yZWFkQml0cyhlKXtsZXQgdD10aGlzLmJpdHNDYWNoZWQsYT10aGlzLmNhY2hlZERhdGE7Zm9yKDt0PGU7KXtjb25zdCBlPXRoaXMuc3RyLmdldEJ5dGUoKTtpZigtMT09PWUpe3RoaXMuZW9mPSEwO3JldHVybiBudWxsfWE9YTw8OHxlO3QrPTh9dGhpcy5iaXRzQ2FjaGVkPXQtPWU7dGhpcy5jYWNoZWREYXRhPWE7dGhpcy5sYXN0Q29kZT1udWxsO3JldHVybiBhPj4+dCYoMTw8ZSktMX1yZWFkQmxvY2soKXtsZXQgZSx0LGEscj0xMDI0O2NvbnN0IG49dGhpcy5sendTdGF0ZTtpZighbilyZXR1cm47Y29uc3QgaT1uLmVhcmx5Q2hhbmdlO2xldCBzPW4ubmV4dENvZGU7Y29uc3Qgbz1uLmRpY3Rpb25hcnlWYWx1ZXMsYz1uLmRpY3Rpb25hcnlMZW5ndGhzLGw9bi5kaWN0aW9uYXJ5UHJldkNvZGVzO2xldCBoPW4uY29kZUxlbmd0aCx1PW4ucHJldkNvZGU7Y29uc3QgZD1uLmN1cnJlbnRTZXF1ZW5jZTtsZXQgZj1uLmN1cnJlbnRTZXF1ZW5jZUxlbmd0aCxnPTAscD10aGlzLmJ1ZmZlckxlbmd0aCxtPXRoaXMuZW5zdXJlQnVmZmVyKHRoaXMuYnVmZmVyTGVuZ3RoK3IpO2ZvcihlPTA7ZTw1MTI7ZSsrKXtjb25zdCBlPXRoaXMucmVhZEJpdHMoaCksbj1mPjA7aWYoZTwyNTYpe2RbMF09ZTtmPTF9ZWxzZXtpZighKGU+PTI1OCkpe2lmKDI1Nj09PWUpe2g9OTtzPTI1ODtmPTA7Y29udGludWV9dGhpcy5lb2Y9ITA7ZGVsZXRlIHRoaXMubHp3U3RhdGU7YnJlYWt9aWYoZTxzKXtmPWNbZV07Zm9yKHQ9Zi0xLGE9ZTt0Pj0wO3QtLSl7ZFt0XT1vW2FdO2E9bFthXX19ZWxzZSBkW2YrK109ZFswXX1pZihuKXtsW3NdPXU7Y1tzXT1jW3VdKzE7b1tzXT1kWzBdO3MrKztoPXMraSZzK2ktMT9oOjB8TWF0aC5taW4oTWF0aC5sb2cocytpKS8uNjkzMTQ3MTgwNTU5OTQ1MysxLDEyKX11PWU7Zys9ZjtpZihyPGcpe2Rve3IrPTUxMn13aGlsZShyPGcpO209dGhpcy5lbnN1cmVCdWZmZXIodGhpcy5idWZmZXJMZW5ndGgrcil9Zm9yKHQ9MDt0PGY7dCsrKW1bcCsrXT1kW3RdfW4ubmV4dENvZGU9cztuLmNvZGVMZW5ndGg9aDtuLnByZXZDb2RlPXU7bi5jdXJyZW50U2VxdWVuY2VMZW5ndGg9Zjt0aGlzLmJ1ZmZlckxlbmd0aD1wfX10LkxaV1N0cmVhbT1MWldTdHJlYW19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5QcmVkaWN0b3JTdHJlYW09dm9pZCAwO3ZhciByPWEoMTgpLG49YSg0KSxpPWEoMik7Y2xhc3MgUHJlZGljdG9yU3RyZWFtIGV4dGVuZHMgci5EZWNvZGVTdHJlYW17Y29uc3RydWN0b3IoZSx0LGEpe3N1cGVyKHQpO2lmKCEoYSBpbnN0YW5jZW9mIG4uRGljdCkpcmV0dXJuIGU7Y29uc3Qgcj10aGlzLnByZWRpY3Rvcj1hLmdldCgiUHJlZGljdG9yIil8fDE7aWYocjw9MSlyZXR1cm4gZTtpZigyIT09ciYmKHI8MTB8fHI+MTUpKXRocm93IG5ldyBpLkZvcm1hdEVycm9yKGBVbnN1cHBvcnRlZCBwcmVkaWN0b3I6ICR7cn1gKTt0aGlzLnJlYWRCbG9jaz0yPT09cj90aGlzLnJlYWRCbG9ja1RpZmY6dGhpcy5yZWFkQmxvY2tQbmc7dGhpcy5zdHI9ZTt0aGlzLmRpY3Q9ZS5kaWN0O2NvbnN0IHM9dGhpcy5jb2xvcnM9YS5nZXQoIkNvbG9ycyIpfHwxLG89dGhpcy5iaXRzPWEuZ2V0KCJCUEMiLCJCaXRzUGVyQ29tcG9uZW50Iil8fDgsYz10aGlzLmNvbHVtbnM9YS5nZXQoIkNvbHVtbnMiKXx8MTt0aGlzLnBpeEJ5dGVzPXMqbys3Pj4zO3RoaXMucm93Qnl0ZXM9YypzKm8rNz4+MztyZXR1cm4gdGhpc31yZWFkQmxvY2tUaWZmKCl7Y29uc3QgZT10aGlzLnJvd0J5dGVzLHQ9dGhpcy5idWZmZXJMZW5ndGgsYT10aGlzLmVuc3VyZUJ1ZmZlcih0K2UpLHI9dGhpcy5iaXRzLG49dGhpcy5jb2xvcnMsaT10aGlzLnN0ci5nZXRCeXRlcyhlKTt0aGlzLmVvZj0haS5sZW5ndGg7aWYodGhpcy5lb2YpcmV0dXJuO2xldCBzLG89MCxjPTAsbD0wLGg9MCx1PXQ7aWYoMT09PXImJjE9PT1uKWZvcihzPTA7czxlOysrcyl7bGV0IGU9aVtzXV5vO2VePWU+PjE7ZV49ZT4+MjtlXj1lPj40O289KDEmZSk8PDc7YVt1KytdPWV9ZWxzZSBpZig4PT09cil7Zm9yKHM9MDtzPG47KytzKWFbdSsrXT1pW3NdO2Zvcig7czxlOysrcyl7YVt1XT1hW3Utbl0raVtzXTt1Kyt9fWVsc2UgaWYoMTY9PT1yKXtjb25zdCB0PTIqbjtmb3Iocz0wO3M8dDsrK3MpYVt1KytdPWlbc107Zm9yKDtzPGU7cys9Mil7Y29uc3QgZT0oKDI1NSZpW3NdKTw8OCkrKDI1NSZpW3MrMV0pKygoMjU1JmFbdS10XSk8PDgpKygyNTUmYVt1LXQrMV0pO2FbdSsrXT1lPj44JjI1NTthW3UrK109MjU1JmV9fWVsc2V7Y29uc3QgZT1uZXcgVWludDhBcnJheShuKzEpLHU9KDE8PHIpLTE7bGV0IGQ9MCxmPXQ7Y29uc3QgZz10aGlzLmNvbHVtbnM7Zm9yKHM9MDtzPGc7KytzKWZvcihsZXQgdD0wO3Q8bjsrK3Qpe2lmKGw8cil7bz1vPDw4fDI1NSZpW2QrK107bCs9OH1lW3RdPWVbdF0rKG8+PmwtcikmdTtsLT1yO2M9Yzw8cnxlW3RdO2grPXI7aWYoaD49OCl7YVtmKytdPWM+PmgtOCYyNTU7aC09OH19aD4wJiYoYVtmKytdPShjPDw4LWgpKyhvJigxPDw4LWgpLTEpKX10aGlzLmJ1ZmZlckxlbmd0aCs9ZX1yZWFkQmxvY2tQbmcoKXtjb25zdCBlPXRoaXMucm93Qnl0ZXMsdD10aGlzLnBpeEJ5dGVzLGE9dGhpcy5zdHIuZ2V0Qnl0ZSgpLHI9dGhpcy5zdHIuZ2V0Qnl0ZXMoZSk7dGhpcy5lb2Y9IXIubGVuZ3RoO2lmKHRoaXMuZW9mKXJldHVybjtjb25zdCBuPXRoaXMuYnVmZmVyTGVuZ3RoLHM9dGhpcy5lbnN1cmVCdWZmZXIobitlKTtsZXQgbz1zLnN1YmFycmF5KG4tZSxuKTswPT09by5sZW5ndGgmJihvPW5ldyBVaW50OEFycmF5KGUpKTtsZXQgYyxsLGgsdT1uO3N3aXRjaChhKXtjYXNlIDA6Zm9yKGM9MDtjPGU7KytjKXNbdSsrXT1yW2NdO2JyZWFrO2Nhc2UgMTpmb3IoYz0wO2M8dDsrK2Mpc1t1KytdPXJbY107Zm9yKDtjPGU7KytjKXtzW3VdPXNbdS10XStyW2NdJjI1NTt1Kyt9YnJlYWs7Y2FzZSAyOmZvcihjPTA7YzxlOysrYylzW3UrK109b1tjXStyW2NdJjI1NTticmVhaztjYXNlIDM6Zm9yKGM9MDtjPHQ7KytjKXNbdSsrXT0ob1tjXT4+MSkrcltjXTtmb3IoO2M8ZTsrK2Mpe3NbdV09KG9bY10rc1t1LXRdPj4xKStyW2NdJjI1NTt1Kyt9YnJlYWs7Y2FzZSA0OmZvcihjPTA7Yzx0OysrYyl7bD1vW2NdO2g9cltjXTtzW3UrK109bCtofWZvcig7YzxlOysrYyl7bD1vW2NdO2NvbnN0IGU9b1tjLXRdLGE9c1t1LXRdLG49YStsLWU7bGV0IGk9bi1hO2k8MCYmKGk9LWkpO2xldCBkPW4tbDtkPDAmJihkPS1kKTtsZXQgZj1uLWU7ZjwwJiYoZj0tZik7aD1yW2NdO3NbdSsrXT1pPD1kJiZpPD1mP2EraDpkPD1mP2wraDplK2h9YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgaS5Gb3JtYXRFcnJvcihgVW5zdXBwb3J0ZWQgcHJlZGljdG9yOiAke2F9YCl9dGhpcy5idWZmZXJMZW5ndGgrPWV9fXQuUHJlZGljdG9yU3RyZWFtPVByZWRpY3RvclN0cmVhbX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlJ1bkxlbmd0aFN0cmVhbT12b2lkIDA7dmFyIHI9YSgxOCk7Y2xhc3MgUnVuTGVuZ3RoU3RyZWFtIGV4dGVuZHMgci5EZWNvZGVTdHJlYW17Y29uc3RydWN0b3IoZSx0KXtzdXBlcih0KTt0aGlzLnN0cj1lO3RoaXMuZGljdD1lLmRpY3R9cmVhZEJsb2NrKCl7Y29uc3QgZT10aGlzLnN0ci5nZXRCeXRlcygyKTtpZighZXx8ZS5sZW5ndGg8Mnx8MTI4PT09ZVswXSl7dGhpcy5lb2Y9ITA7cmV0dXJufWxldCB0LGE9dGhpcy5idWZmZXJMZW5ndGgscj1lWzBdO2lmKHI8MTI4KXt0PXRoaXMuZW5zdXJlQnVmZmVyKGErcisxKTt0W2ErK109ZVsxXTtpZihyPjApe2NvbnN0IGU9dGhpcy5zdHIuZ2V0Qnl0ZXMocik7dC5zZXQoZSxhKTthKz1yfX1lbHNle3I9MjU3LXI7Y29uc3Qgbj1lWzFdO3Q9dGhpcy5lbnN1cmVCdWZmZXIoYStyKzEpO2ZvcihsZXQgZT0wO2U8cjtlKyspdFthKytdPW59dGhpcy5idWZmZXJMZW5ndGg9YX19dC5SdW5MZW5ndGhTdHJlYW09UnVuTGVuZ3RoU3RyZWFtfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuRm9udD10LkVycm9yRm9udD12b2lkIDA7dmFyIHI9YSgyKSxuPWEoMzUpLGk9YSgzOCkscz1hKDQwKSxvPWEoMzkpLGM9YSgzNyksbD1hKDQxKSxoPWEoNDIpLHU9YSg0MyksZD1hKDQ0KSxmPWEoNDUpLGc9YSg0NikscD1hKDE0KSxtPWEoNDcpLGI9YSgzKSx5PWEoOCksdz1hKDQ4KTtjb25zdCBTPVtbNTczNDQsNjM3NDNdLFsxMDQ4NTc2LDExMTQxMDldXSx4PTFlMyxDPVsiYXNjZW50IiwiYmJveCIsImJsYWNrIiwiYm9sZCIsImNoYXJQcm9jT3BlcmF0b3JMaXN0IiwiY29tcG9zaXRlIiwiY3NzRm9udEluZm8iLCJkYXRhIiwiZGVmYXVsdFZNZXRyaWNzIiwiZGVmYXVsdFdpZHRoIiwiZGVzY2VudCIsImZhbGxiYWNrTmFtZSIsImZvbnRNYXRyaXgiLCJpc0ludmFsaWRQREZqc0ZvbnQiLCJpc1R5cGUzRm9udCIsIml0YWxpYyIsImxvYWRlZE5hbWUiLCJtaW1ldHlwZSIsIm1pc3NpbmdGaWxlIiwibmFtZSIsInJlbWVhc3VyZSIsInN1YnR5cGUiLCJzeXN0ZW1Gb250SW5mbyIsInR5cGUiLCJ2ZXJ0aWNhbCJdLGs9WyJjTWFwIiwiZGVmYXVsdEVuY29kaW5nIiwiZGlmZmVyZW5jZXMiLCJpc01vbm9zcGFjZSIsImlzU2VyaWZGb250IiwiaXNTeW1ib2xpY0ZvbnQiLCJzZWFjTWFwIiwidG9Gb250Q2hhciIsInRvVW5pY29kZSIsInZtZXRyaWNzIiwid2lkdGhzIl07ZnVuY3Rpb24gYWRqdXN0V2lkdGhzKGUpe2lmKCFlLmZvbnRNYXRyaXgpcmV0dXJuO2lmKGUuZm9udE1hdHJpeFswXT09PXIuRk9OVF9JREVOVElUWV9NQVRSSVhbMF0pcmV0dXJuO2NvbnN0IHQ9LjAwMS9lLmZvbnRNYXRyaXhbMF0sYT1lLndpZHRocztmb3IoY29uc3QgZSBpbiBhKWFbZV0qPXQ7ZS5kZWZhdWx0V2lkdGgqPXR9ZnVuY3Rpb24gYW1lbmRGYWxsYmFja1RvVW5pY29kZShlKXtpZighZS5mYWxsYmFja1RvVW5pY29kZSlyZXR1cm47aWYoZS50b1VuaWNvZGUgaW5zdGFuY2VvZiBoLklkZW50aXR5VG9Vbmljb2RlTWFwKXJldHVybjtjb25zdCB0PVtdO2Zvcihjb25zdCBhIGluIGUuZmFsbGJhY2tUb1VuaWNvZGUpZS50b1VuaWNvZGUuaGFzKGEpfHwodFthXT1lLmZhbGxiYWNrVG9Vbmljb2RlW2FdKTt0Lmxlbmd0aD4wJiZlLnRvVW5pY29kZS5hbWVuZCh0KX1jbGFzcyBHbHlwaHtjb25zdHJ1Y3RvcihlLHQsYSxyLG4saSxzLG8sYyl7dGhpcy5vcmlnaW5hbENoYXJDb2RlPWU7dGhpcy5mb250Q2hhcj10O3RoaXMudW5pY29kZT1hO3RoaXMuYWNjZW50PXI7dGhpcy53aWR0aD1uO3RoaXMudm1ldHJpYz1pO3RoaXMub3BlcmF0b3JMaXN0SWQ9czt0aGlzLmlzU3BhY2U9bzt0aGlzLmlzSW5Gb250PWN9Z2V0IGNhdGVnb3J5KCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsImNhdGVnb3J5IiwoMCxzLmdldENoYXJVbmljb2RlQ2F0ZWdvcnkpKHRoaXMudW5pY29kZSksITApfX1mdW5jdGlvbiBpbnQxNihlLHQpe3JldHVybihlPDw4KSt0fWZ1bmN0aW9uIHdyaXRlU2lnbmVkSW50MTYoZSx0LGEpe2VbdCsxXT1hO2VbdF09YT4+Pjh9ZnVuY3Rpb24gc2lnbmVkSW50MTYoZSx0KXtjb25zdCBhPShlPDw4KSt0O3JldHVybiAzMjc2OCZhP2EtNjU1MzY6YX1mdW5jdGlvbiBzdHJpbmcxNihlKXtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShlPj44JjI1NSwyNTUmZSl9ZnVuY3Rpb24gc2FmZVN0cmluZzE2KGUpe2U+MzI3Njc/ZT0zMjc2NzplPC0zMjc2OCYmKGU9LTMyNzY4KTtyZXR1cm4gU3RyaW5nLmZyb21DaGFyQ29kZShlPj44JjI1NSwyNTUmZSl9ZnVuY3Rpb24gaXNUcnVlVHlwZUNvbGxlY3Rpb25GaWxlKGUpe2NvbnN0IHQ9ZS5wZWVrQnl0ZXMoNCk7cmV0dXJuInR0Y2YiPT09KDAsci5ieXRlc1RvU3RyaW5nKSh0KX1mdW5jdGlvbiBnZXRGb250RmlsZVR5cGUoZSx7dHlwZTp0LHN1YnR5cGU6YSxjb21wb3NpdGU6bn0pe2xldCBpLHM7aWYoZnVuY3Rpb24gaXNUcnVlVHlwZUZpbGUoZSl7Y29uc3QgdD1lLnBlZWtCeXRlcyg0KTtyZXR1cm4gNjU1MzY9PT0oMCxiLnJlYWRVaW50MzIpKHQsMCl8fCJ0cnVlIj09PSgwLHIuYnl0ZXNUb1N0cmluZykodCl9KGUpfHxpc1RydWVUeXBlQ29sbGVjdGlvbkZpbGUoZSkpaT1uPyJDSURGb250VHlwZTIiOiJUcnVlVHlwZSI7ZWxzZSBpZihmdW5jdGlvbiBpc09wZW5UeXBlRmlsZShlKXtjb25zdCB0PWUucGVla0J5dGVzKDQpO3JldHVybiJPVFRPIj09PSgwLHIuYnl0ZXNUb1N0cmluZykodCl9KGUpKWk9bj8iQ0lERm9udFR5cGUyIjoiT3BlblR5cGUiO2Vsc2UgaWYoZnVuY3Rpb24gaXNUeXBlMUZpbGUoZSl7Y29uc3QgdD1lLnBlZWtCeXRlcygyKTtyZXR1cm4gMzc9PT10WzBdJiYzMz09PXRbMV18fDEyOD09PXRbMF0mJjE9PT10WzFdfShlKSlpPW4/IkNJREZvbnRUeXBlMCI6Ik1NVHlwZTEiPT09dD8iTU1UeXBlMSI6IlR5cGUxIjtlbHNlIGlmKGZ1bmN0aW9uIGlzQ0ZGRmlsZShlKXtjb25zdCB0PWUucGVla0J5dGVzKDQpO3JldHVybiB0WzBdPj0xJiZ0WzNdPj0xJiZ0WzNdPD00fShlKSlpZihuKXtpPSJDSURGb250VHlwZTAiO3M9IkNJREZvbnRUeXBlMEMifWVsc2V7aT0iTU1UeXBlMSI9PT10PyJNTVR5cGUxIjoiVHlwZTEiO3M9IlR5cGUxQyJ9ZWxzZXsoMCxyLndhcm4pKCJnZXRGb250RmlsZVR5cGU6IFVuYWJsZSB0byBkZXRlY3QgY29ycmVjdCBmb250IGZpbGUgVHlwZS9TdWJ0eXBlLiIpO2k9dDtzPWF9cmV0dXJuW2ksc119ZnVuY3Rpb24gYXBwbHlTdGFuZGFyZEZvbnRHbHlwaE1hcChlLHQpe2Zvcihjb25zdCBhIGluIHQpZVsrYV09dFthXX1mdW5jdGlvbiBidWlsZFRvRm9udENoYXIoZSx0LGEpe2NvbnN0IHI9W107bGV0IG47Zm9yKGxldCBhPTAsaT1lLmxlbmd0aDthPGk7YSsrKXtuPSgwLHMuZ2V0VW5pY29kZUZvckdseXBoKShlW2FdLHQpOy0xIT09biYmKHJbYV09bil9Zm9yKGNvbnN0IGUgaW4gYSl7bj0oMCxzLmdldFVuaWNvZGVGb3JHbHlwaCkoYVtlXSx0KTstMSE9PW4mJihyWytlXT1uKX1yZXR1cm4gcn1mdW5jdGlvbiBpc01hY05hbWVSZWNvcmQoZSl7cmV0dXJuIDE9PT1lLnBsYXRmb3JtJiYwPT09ZS5lbmNvZGluZyYmMD09PWUubGFuZ3VhZ2V9ZnVuY3Rpb24gaXNXaW5OYW1lUmVjb3JkKGUpe3JldHVybiAzPT09ZS5wbGF0Zm9ybSYmMT09PWUuZW5jb2RpbmcmJjEwMzM9PT1lLmxhbmd1YWdlfWZ1bmN0aW9uIGNvbnZlcnRDaWRTdHJpbmcoZSx0LGE9ITEpe3N3aXRjaCh0Lmxlbmd0aCl7Y2FzZSAxOnJldHVybiB0LmNoYXJDb2RlQXQoMCk7Y2FzZSAyOnJldHVybiB0LmNoYXJDb2RlQXQoMCk8PDh8dC5jaGFyQ29kZUF0KDEpfWNvbnN0IG49YFVuc3VwcG9ydGVkIENJRCBzdHJpbmcgKGNoYXJDb2RlICR7ZX0pOiAiJHt0fSIuYDtpZihhKXRocm93IG5ldyByLkZvcm1hdEVycm9yKG4pOygwLHIud2Fybikobik7cmV0dXJuIHR9ZnVuY3Rpb24gYWRqdXN0TWFwcGluZyhlLHQsYSxuKXtjb25zdCBpPU9iamVjdC5jcmVhdGUobnVsbCkscz1uZXcgTWFwLG89W10sYz1uZXcgU2V0O2xldCBsPTA7bGV0IGg9U1tsXVswXSx1PVNbbF1bMV07Zm9yKGxldCBmIGluIGUpe2Z8PTA7bGV0IGc9ZVtmXTtpZighdChnKSljb250aW51ZTtpZihoPnUpe2wrKztpZihsPj1TLmxlbmd0aCl7KDAsci53YXJuKSgiUmFuIG91dCBvZiBzcGFjZSBpbiBmb250IHByaXZhdGUgdXNlIGFyZWEuIik7YnJlYWt9aD1TW2xdWzBdO3U9U1tsXVsxXX1jb25zdCBwPWgrKzswPT09ZyYmKGc9YSk7bGV0IG09bi5nZXQoZik7InN0cmluZyI9PXR5cGVvZiBtJiYobT1tLmNvZGVQb2ludEF0KDApKTtpZihtJiYhKGQ9bSxTWzBdWzBdPD1kJiZkPD1TWzBdWzFdfHxTWzFdWzBdPD1kJiZkPD1TWzFdWzFdKSYmIWMuaGFzKGcpKXtzLnNldChtLGcpO2MuYWRkKGcpfWlbcF09ZztvW2ZdPXB9dmFyIGQ7cmV0dXJue3RvRm9udENoYXI6byxjaGFyQ29kZVRvR2x5cGhJZDppLHRvVW5pY29kZUV4dHJhTWFwOnMsbmV4dEF2YWlsYWJsZUZvbnRDaGFyQ29kZTpofX1mdW5jdGlvbiBjcmVhdGVDbWFwVGFibGUoZSx0LGEpe2NvbnN0IG49ZnVuY3Rpb24gZ2V0UmFuZ2VzKGUsdCxhKXtjb25zdCByPVtdO2Zvcihjb25zdCB0IGluIGUpZVt0XT49YXx8ci5wdXNoKHtmb250Q2hhckNvZGU6MHx0LGdseXBoSWQ6ZVt0XX0pO2lmKHQpZm9yKGNvbnN0W2Usbl1vZiB0KW4+PWF8fHIucHVzaCh7Zm9udENoYXJDb2RlOmUsZ2x5cGhJZDpufSk7MD09PXIubGVuZ3RoJiZyLnB1c2goe2ZvbnRDaGFyQ29kZTowLGdseXBoSWQ6MH0pO3Iuc29ydCgoZnVuY3Rpb24gZm9udEdldFJhbmdlc1NvcnQoZSx0KXtyZXR1cm4gZS5mb250Q2hhckNvZGUtdC5mb250Q2hhckNvZGV9KSk7Y29uc3Qgbj1bXSxpPXIubGVuZ3RoO2ZvcihsZXQgZT0wO2U8aTspe2NvbnN0IHQ9cltlXS5mb250Q2hhckNvZGUsYT1bcltlXS5nbHlwaElkXTsrK2U7bGV0IHM9dDtmb3IoO2U8aSYmcysxPT09cltlXS5mb250Q2hhckNvZGU7KXthLnB1c2gocltlXS5nbHlwaElkKTsrK3M7KytlO2lmKDY1NTM1PT09cylicmVha31uLnB1c2goW3QscyxhXSl9cmV0dXJuIG59KGUsdCxhKSxpPW4uYXQoLTEpWzFdPjY1NTM1PzI6MTtsZXQgcyxvLGMsbCxoPSJcMFwwIitzdHJpbmcxNihpKSsiXDADXDABIisoMCxyLnN0cmluZzMyKSg0KzgqaSk7Zm9yKHM9bi5sZW5ndGgtMTtzPj0wJiYhKG5bc11bMF08PTY1NTM1KTstLXMpO2NvbnN0IHU9cysxO25bc11bMF08NjU1MzUmJjY1NTM1PT09bltzXVsxXSYmKG5bc11bMV09NjU1MzQpO2NvbnN0IGQ9bltzXVsxXTw2NTUzNT8xOjAsZj11K2QsZz1tLk9wZW5UeXBlRmlsZUJ1aWxkZXIuZ2V0U2VhcmNoUGFyYW1zKGYsMik7bGV0IHAsYix5LHcsUz0iIix4PSIiLEM9IiIsaz0iIix2PSIiLEY9MDtmb3Iocz0wLG89dTtzPG87cysrKXtwPW5bc107Yj1wWzBdO3k9cFsxXTtTKz1zdHJpbmcxNihiKTt4Kz1zdHJpbmcxNih5KTt3PXBbMl07bGV0IGU9ITA7Zm9yKGM9MSxsPXcubGVuZ3RoO2M8bDsrK2MpaWYod1tjXSE9PXdbYy0xXSsxKXtlPSExO2JyZWFrfWlmKGUpe0MrPXN0cmluZzE2KHdbMF0tYiY2NTUzNSk7ays9c3RyaW5nMTYoMCl9ZWxzZXtjb25zdCBlPTIqKGYtcykrMipGO0YrPXktYisxO0MrPXN0cmluZzE2KDApO2srPXN0cmluZzE2KGUpO2ZvcihjPTAsbD13Lmxlbmd0aDtjPGw7KytjKXYrPXN0cmluZzE2KHdbY10pfX1pZihkPjApe3grPSLDv8O/IjtTKz0iw7/DvyI7Qys9IlwwASI7ays9IlwwXDAifWNvbnN0IE89IlwwXDAiK3N0cmluZzE2KDIqZikrc3RyaW5nMTYoZy5yYW5nZSkrc3RyaW5nMTYoZy5lbnRyeSkrc3RyaW5nMTYoZy5yYW5nZVNoaWZ0KSt4KyJcMFwwIitTK0Mrayt2O2xldCBUPSIiLE09IiI7aWYoaT4xKXtoKz0iXDADXDBcbiIrKDAsci5zdHJpbmczMikoNCs4KmkrNCtPLmxlbmd0aCk7VD0iIjtmb3Iocz0wLG89bi5sZW5ndGg7czxvO3MrKyl7cD1uW3NdO2I9cFswXTt3PXBbMl07bGV0IGU9d1swXTtmb3IoYz0xLGw9dy5sZW5ndGg7YzxsOysrYylpZih3W2NdIT09d1tjLTFdKzEpe3k9cFswXStjLTE7VCs9KDAsci5zdHJpbmczMikoYikrKDAsci5zdHJpbmczMikoeSkrKDAsci5zdHJpbmczMikoZSk7Yj15KzE7ZT13W2NdfVQrPSgwLHIuc3RyaW5nMzIpKGIpKygwLHIuc3RyaW5nMzIpKHBbMV0pKygwLHIuc3RyaW5nMzIpKGUpfU09IlwwXGZcMFwwIisoMCxyLnN0cmluZzMyKShULmxlbmd0aCsxNikrIlwwXDBcMFwwIisoMCxyLnN0cmluZzMyKShULmxlbmd0aC8xMil9cmV0dXJuIGgrIlwwBCIrc3RyaW5nMTYoTy5sZW5ndGgrNCkrTytNK1R9ZnVuY3Rpb24gY3JlYXRlT1MyVGFibGUoZSx0LGEpe2F8fD17dW5pdHNQZXJFbTowLHlNYXg6MCx5TWluOjAsYXNjZW50OjAsZGVzY2VudDowfTtsZXQgbj0wLGk9MCxvPTAsYz0wLGw9bnVsbCxoPTAsdT0tMTtpZih0KXtmb3IobGV0IGUgaW4gdCl7ZXw9MDsobD5lfHwhbCkmJihsPWUpO2g8ZSYmKGg9ZSk7dT0oMCxzLmdldFVuaWNvZGVSYW5nZUZvcikoZSx1KTtpZih1PDMyKW58PTE8PHU7ZWxzZSBpZih1PDY0KWl8PTE8PHUtMzI7ZWxzZSBpZih1PDk2KW98PTE8PHUtNjQ7ZWxzZXtpZighKHU8MTIzKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiVW5pY29kZSByYW5nZXMgQml0cyA+IDEyMyBhcmUgcmVzZXJ2ZWQgZm9yIGludGVybmFsIHVzYWdlIik7Y3w9MTw8dS05Nn19aD42NTUzNSYmKGg9NjU1MzUpfWVsc2V7bD0wO2g9MjU1fWNvbnN0IGQ9ZS5iYm94fHxbMCwwLDAsMF0sZj1hLnVuaXRzUGVyRW18fDEvKGUuZm9udE1hdHJpeHx8ci5GT05UX0lERU5USVRZX01BVFJJWClbMF0sZz1lLmFzY2VudFNjYWxlZD8xOmYveCxwPWEuYXNjZW50fHxNYXRoLnJvdW5kKGcqKGUuYXNjZW50fHxkWzNdKSk7bGV0IG09YS5kZXNjZW50fHxNYXRoLnJvdW5kKGcqKGUuZGVzY2VudHx8ZFsxXSkpO20+MCYmZS5kZXNjZW50PjAmJmRbMV08MCYmKG09LW0pO2NvbnN0IGI9YS55TWF4fHxwLHk9LWEueU1pbnx8LW07cmV0dXJuIlwwAwIkAcO0XDAFXDBcMALCigLCu1wwXDBcMMKMAsKKAsK7XDBcMAHDn1x4MDAxAQJcMFwwXDBcMAYiK1N0cmluZy5mcm9tQ2hhckNvZGUoZS5maXhlZFBpdGNoPzk6MCkrIlwwXDBcMFwwXDBcMCIrKDAsci5zdHJpbmczMikobikrKDAsci5zdHJpbmczMikoaSkrKDAsci5zdHJpbmczMikobykrKDAsci5zdHJpbmczMikoYykrIioyMSoiK3N0cmluZzE2KGUuaXRhbGljQW5nbGU/MTowKStzdHJpbmcxNihsfHxlLmZpcnN0Q2hhcikrc3RyaW5nMTYoaHx8ZS5sYXN0Q2hhcikrc3RyaW5nMTYocCkrc3RyaW5nMTYobSkrIlwwZCIrc3RyaW5nMTYoYikrc3RyaW5nMTYoeSkrIlwwXDBcMFwwXDBcMFwwXDAiK3N0cmluZzE2KGUueEhlaWdodCkrc3RyaW5nMTYoZS5jYXBIZWlnaHQpK3N0cmluZzE2KDApK3N0cmluZzE2KGx8fGUuZmlyc3RDaGFyKSsiXDADIn1mdW5jdGlvbiBjcmVhdGVQb3N0VGFibGUoZSl7Y29uc3QgdD1NYXRoLmZsb29yKDY1NTM2KmUuaXRhbGljQW5nbGUpO3JldHVybiJcMANcMFwwIisoMCxyLnN0cmluZzMyKSh0KSsiXDBcMFwwXDAiKygwLHIuc3RyaW5nMzIpKGUuZml4ZWRQaXRjaD8xOjApKyJcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwXDBcMCJ9ZnVuY3Rpb24gY3JlYXRlUG9zdHNjcmlwdE5hbWUoZSl7cmV0dXJuIGUucmVwbGFjZUFsbCgvW15ceDIxLVx4N0VdfFtbXF0oKXt9PD4vJV0vZywiIikuc2xpY2UoMCw2Myl9ZnVuY3Rpb24gY3JlYXRlTmFtZVRhYmxlKGUsdCl7dHx8KHQ9W1tdLFtdXSk7Y29uc3QgYT1bdFswXVswXXx8Ik9yaWdpbmFsIGxpY2VuY2UiLHRbMF1bMV18fGUsdFswXVsyXXx8IlVua25vd24iLHRbMF1bM118fCJ1bmlxdWVJRCIsdFswXVs0XXx8ZSx0WzBdWzVdfHwiVmVyc2lvbiAwLjExIix0WzBdWzZdfHxjcmVhdGVQb3N0c2NyaXB0TmFtZShlKSx0WzBdWzddfHwiVW5rbm93biIsdFswXVs4XXx8IlVua25vd24iLHRbMF1bOV18fCJVbmtub3duIl0scj1bXTtsZXQgbixpLHMsbyxjO2ZvcihuPTAsaT1hLmxlbmd0aDtuPGk7bisrKXtjPXRbMV1bbl18fGFbbl07Y29uc3QgZT1bXTtmb3Iocz0wLG89Yy5sZW5ndGg7czxvO3MrKyllLnB1c2goc3RyaW5nMTYoYy5jaGFyQ29kZUF0KHMpKSk7ci5wdXNoKGUuam9pbigiIikpfWNvbnN0IGw9W2Escl0saD1bIlwwASIsIlwwAyJdLHU9WyJcMFwwIiwiXDABIl0sZD1bIlwwXDAiLCIEXHQiXSxmPWEubGVuZ3RoKmgubGVuZ3RoO2xldCBnPSJcMFwwIitzdHJpbmcxNihmKStzdHJpbmcxNigxMipmKzYpLHA9MDtmb3Iobj0wLGk9aC5sZW5ndGg7bjxpO24rKyl7Y29uc3QgZT1sW25dO2ZvcihzPTAsbz1lLmxlbmd0aDtzPG87cysrKXtjPWVbc107Zys9aFtuXSt1W25dK2Rbbl0rc3RyaW5nMTYocykrc3RyaW5nMTYoYy5sZW5ndGgpK3N0cmluZzE2KHApO3ArPWMubGVuZ3RofX1nKz1hLmpvaW4oIiIpK3Iuam9pbigiIik7cmV0dXJuIGd9dC5Gb250PWNsYXNzIEZvbnR7Y29uc3RydWN0b3IoZSx0LGEpe3RoaXMubmFtZT1lO3RoaXMucHNOYW1lPW51bGw7dGhpcy5taW1ldHlwZT1udWxsO3RoaXMuZGlzYWJsZUZvbnRGYWNlPSExO3RoaXMubG9hZGVkTmFtZT1hLmxvYWRlZE5hbWU7dGhpcy5pc1R5cGUzRm9udD1hLmlzVHlwZTNGb250O3RoaXMubWlzc2luZ0ZpbGU9ITE7dGhpcy5jc3NGb250SW5mbz1hLmNzc0ZvbnRJbmZvO3RoaXMuX2NoYXJzQ2FjaGU9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLl9nbHlwaENhY2hlPU9iamVjdC5jcmVhdGUobnVsbCk7bGV0IG49ISEoYS5mbGFncyZpLkZvbnRGbGFncy5TZXJpZik7aWYoIW4mJiFhLmlzU2ltdWxhdGVkRmxhZ3Mpe2NvbnN0IHQ9ZS5yZXBsYWNlQWxsKC9bLF9dL2csIi0iKS5zcGxpdCgiLSIpWzBdLGE9KDAsbC5nZXRTZXJpZkZvbnRzKSgpO2Zvcihjb25zdCBlIG9mIHQuc3BsaXQoIisiKSlpZihhW2VdKXtuPSEwO2JyZWFrfX10aGlzLmlzU2VyaWZGb250PW47dGhpcy5pc1N5bWJvbGljRm9udD0hIShhLmZsYWdzJmkuRm9udEZsYWdzLlN5bWJvbGljKTt0aGlzLmlzTW9ub3NwYWNlPSEhKGEuZmxhZ3MmaS5Gb250RmxhZ3MuRml4ZWRQaXRjaCk7bGV0e3R5cGU6cyxzdWJ0eXBlOm99PWE7dGhpcy50eXBlPXM7dGhpcy5zdWJ0eXBlPW87dGhpcy5zeXN0ZW1Gb250SW5mbz1hLnN5c3RlbUZvbnRJbmZvO2NvbnN0IGM9ZS5tYXRjaCgvXkludmFsaWRQREZqc0ZvbnRfKC4qKV9cZCskLyk7dGhpcy5pc0ludmFsaWRQREZqc0ZvbnQ9ISFjO3RoaXMuaXNJbnZhbGlkUERGanNGb250P3RoaXMuZmFsbGJhY2tOYW1lPWNbMV06dGhpcy5pc01vbm9zcGFjZT90aGlzLmZhbGxiYWNrTmFtZT0ibW9ub3NwYWNlIjp0aGlzLmlzU2VyaWZGb250P3RoaXMuZmFsbGJhY2tOYW1lPSJzZXJpZiI6dGhpcy5mYWxsYmFja05hbWU9InNhbnMtc2VyaWYiO2lmKHRoaXMuc3lzdGVtRm9udEluZm8/Lmd1ZXNzRmFsbGJhY2spe3RoaXMuc3lzdGVtRm9udEluZm8uZ3Vlc3NGYWxsYmFjaz0hMTt0aGlzLnN5c3RlbUZvbnRJbmZvLmNzcys9YCwke3RoaXMuZmFsbGJhY2tOYW1lfWB9dGhpcy5kaWZmZXJlbmNlcz1hLmRpZmZlcmVuY2VzO3RoaXMud2lkdGhzPWEud2lkdGhzO3RoaXMuZGVmYXVsdFdpZHRoPWEuZGVmYXVsdFdpZHRoO3RoaXMuY29tcG9zaXRlPWEuY29tcG9zaXRlO3RoaXMuY01hcD1hLmNNYXA7dGhpcy5jYXBIZWlnaHQ9YS5jYXBIZWlnaHQveDt0aGlzLmFzY2VudD1hLmFzY2VudC94O3RoaXMuZGVzY2VudD1hLmRlc2NlbnQveDt0aGlzLmxpbmVIZWlnaHQ9dGhpcy5hc2NlbnQtdGhpcy5kZXNjZW50O3RoaXMuZm9udE1hdHJpeD1hLmZvbnRNYXRyaXg7dGhpcy5iYm94PWEuYmJveDt0aGlzLmRlZmF1bHRFbmNvZGluZz1hLmRlZmF1bHRFbmNvZGluZzt0aGlzLnRvVW5pY29kZT1hLnRvVW5pY29kZTt0aGlzLnRvRm9udENoYXI9W107aWYoIlR5cGUzIj09PWEudHlwZSl7Zm9yKGxldCBlPTA7ZTwyNTY7ZSsrKXRoaXMudG9Gb250Q2hhcltlXT10aGlzLmRpZmZlcmVuY2VzW2VdfHxhLmRlZmF1bHRFbmNvZGluZ1tlXTtyZXR1cm59dGhpcy5jaWRFbmNvZGluZz1hLmNpZEVuY29kaW5nfHwiIjt0aGlzLnZlcnRpY2FsPSEhYS52ZXJ0aWNhbDtpZih0aGlzLnZlcnRpY2FsKXt0aGlzLnZtZXRyaWNzPWEudm1ldHJpY3M7dGhpcy5kZWZhdWx0Vk1ldHJpY3M9YS5kZWZhdWx0Vk1ldHJpY3N9aWYoIXR8fHQuaXNFbXB0eSl7dCYmKDAsci53YXJuKSgnRm9udCBmaWxlIGlzIGVtcHR5IGluICInK2UrJyIgKCcrdGhpcy5sb2FkZWROYW1lKyIpIik7dGhpcy5mYWxsYmFja1RvU3lzdGVtRm9udChhKTtyZXR1cm59W3Msb109Z2V0Rm9udEZpbGVUeXBlKHQsYSk7cz09PXRoaXMudHlwZSYmbz09PXRoaXMuc3VidHlwZXx8KDAsci5pbmZvKShgSW5jb25zaXN0ZW50IGZvbnQgZmlsZSBUeXBlL1N1YlR5cGUsIGV4cGVjdGVkOiAke3RoaXMudHlwZX0vJHt0aGlzLnN1YnR5cGV9IGJ1dCBmb3VuZDogJHtzfS8ke299LmApO2xldCBoO3RyeXtzd2l0Y2gocyl7Y2FzZSJNTVR5cGUxIjooMCxyLmluZm8pKCJNTVR5cGUxIGZvbnQgKCIrZSsiKSwgZmFsbGluZyBiYWNrIHRvIFR5cGUxLiIpO2Nhc2UiVHlwZTEiOmNhc2UiQ0lERm9udFR5cGUwIjp0aGlzLm1pbWV0eXBlPSJmb250L29wZW50eXBlIjtjb25zdCBuPSJUeXBlMUMiPT09b3x8IkNJREZvbnRUeXBlMEMiPT09bz9uZXcgdS5DRkZGb250KHQsYSk6bmV3IHcuVHlwZTFGb250KGUsdCxhKTthZGp1c3RXaWR0aHMoYSk7aD10aGlzLmNvbnZlcnQoZSxuLGEpO2JyZWFrO2Nhc2UiT3BlblR5cGUiOmNhc2UiVHJ1ZVR5cGUiOmNhc2UiQ0lERm9udFR5cGUyIjp0aGlzLm1pbWV0eXBlPSJmb250L29wZW50eXBlIjtoPXRoaXMuY2hlY2tBbmRSZXBhaXIoZSx0LGEpO2lmKHRoaXMuaXNPcGVuVHlwZSl7YWRqdXN0V2lkdGhzKGEpO3M9Ik9wZW5UeXBlIn1icmVhaztkZWZhdWx0OnRocm93IG5ldyByLkZvcm1hdEVycm9yKGBGb250ICR7c30gaXMgbm90IHN1cHBvcnRlZGApfX1jYXRjaChlKXsoMCxyLndhcm4pKGUpO3RoaXMuZmFsbGJhY2tUb1N5c3RlbUZvbnQoYSk7cmV0dXJufWFtZW5kRmFsbGJhY2tUb1VuaWNvZGUoYSk7dGhpcy5kYXRhPWg7dGhpcy50eXBlPXM7dGhpcy5zdWJ0eXBlPW87dGhpcy5mb250TWF0cml4PWEuZm9udE1hdHJpeDt0aGlzLndpZHRocz1hLndpZHRoczt0aGlzLmRlZmF1bHRXaWR0aD1hLmRlZmF1bHRXaWR0aDt0aGlzLnRvVW5pY29kZT1hLnRvVW5pY29kZTt0aGlzLnNlYWNNYXA9YS5zZWFjTWFwfWdldCByZW5kZXJlcigpe2NvbnN0IGU9ZC5Gb250UmVuZGVyZXJGYWN0b3J5LmNyZWF0ZSh0aGlzLGkuU0VBQ19BTkFMWVNJU19FTkFCTEVEKTtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywicmVuZGVyZXIiLGUpfWV4cG9ydERhdGEoZT0hMSl7Y29uc3QgdD1lP1suLi5DLC4uLmtdOkMsYT1PYmplY3QuY3JlYXRlKG51bGwpO2xldCByLG47Zm9yKHIgb2YgdCl7bj10aGlzW3JdO3ZvaWQgMCE9PW4mJihhW3JdPW4pfXJldHVybiBhfWZhbGxiYWNrVG9TeXN0ZW1Gb250KGUpe3RoaXMubWlzc2luZ0ZpbGU9ITA7Y29uc3R7bmFtZTp0LHR5cGU6YX09dGhpcztsZXQgcj0oMCxpLm5vcm1hbGl6ZUZvbnROYW1lKSh0KTtjb25zdCBuPSgwLGwuZ2V0U3RkRm9udE1hcCkoKSx1PSgwLGwuZ2V0Tm9uU3RkRm9udE1hcCkoKSxkPSEhbltyXSxnPSEoIXVbcl18fCFuW3Vbcl1dKTtyPW5bcl18fHVbcl18fHI7Y29uc3QgcD0oMCxmLmdldEZvbnRCYXNpY01ldHJpY3MpKClbcl07aWYocCl7aXNOYU4odGhpcy5hc2NlbnQpJiYodGhpcy5hc2NlbnQ9cC5hc2NlbnQveCk7aXNOYU4odGhpcy5kZXNjZW50KSYmKHRoaXMuZGVzY2VudD1wLmRlc2NlbnQveCk7aXNOYU4odGhpcy5jYXBIZWlnaHQpJiYodGhpcy5jYXBIZWlnaHQ9cC5jYXBIZWlnaHQveCl9dGhpcy5ib2xkPS9ib2xkL2dpLnRlc3Qocik7dGhpcy5pdGFsaWM9L29ibGlxdWV8aXRhbGljL2dpLnRlc3Qocik7dGhpcy5ibGFjaz0vQmxhY2svZy50ZXN0KHQpO2NvbnN0IG09L05hcnJvdy9nLnRlc3QodCk7dGhpcy5yZW1lYXN1cmU9KCFkfHxtKSYmT2JqZWN0LmtleXModGhpcy53aWR0aHMpLmxlbmd0aD4wO2lmKChkfHxnKSYmIkNJREZvbnRUeXBlMiI9PT1hJiZ0aGlzLmNpZEVuY29kaW5nLnN0YXJ0c1dpdGgoIklkZW50aXR5LSIpKXtjb25zdCBhPWUuY2lkVG9HaWRNYXAscj1bXTthcHBseVN0YW5kYXJkRm9udEdseXBoTWFwKHIsKDAsbC5nZXRHbHlwaE1hcEZvclN0YW5kYXJkRm9udHMpKCkpOy9BcmlhbC0/QmxhY2svaS50ZXN0KHQpP2FwcGx5U3RhbmRhcmRGb250R2x5cGhNYXAociwoMCxsLmdldFN1cHBsZW1lbnRhbEdseXBoTWFwRm9yQXJpYWxCbGFjaykoKSk6L0NhbGlicmkvaS50ZXN0KHQpJiZhcHBseVN0YW5kYXJkRm9udEdseXBoTWFwKHIsKDAsbC5nZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckNhbGlicmkpKCkpO2lmKGEpe2Zvcihjb25zdCBlIGluIHIpe2NvbnN0IHQ9cltlXTt2b2lkIDAhPT1hW3RdJiYoclsrZV09YVt0XSl9YS5sZW5ndGghPT10aGlzLnRvVW5pY29kZS5sZW5ndGgmJmUuaGFzSW5jbHVkZWRUb1VuaWNvZGVNYXAmJnRoaXMudG9Vbmljb2RlIGluc3RhbmNlb2YgaC5JZGVudGl0eVRvVW5pY29kZU1hcCYmdGhpcy50b1VuaWNvZGUuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtjb25zdCBuPXJbZV07dm9pZCAwPT09YVtuXSYmKHJbK2VdPXQpfSkpfXRoaXMudG9Vbmljb2RlIGluc3RhbmNlb2YgaC5JZGVudGl0eVRvVW5pY29kZU1hcHx8dGhpcy50b1VuaWNvZGUuZm9yRWFjaCgoZnVuY3Rpb24oZSx0KXtyWytlXT10fSkpO3RoaXMudG9Gb250Q2hhcj1yO3RoaXMudG9Vbmljb2RlPW5ldyBoLlRvVW5pY29kZU1hcChyKX1lbHNlIGlmKC9TeW1ib2wvaS50ZXN0KHIpKXRoaXMudG9Gb250Q2hhcj1idWlsZFRvRm9udENoYXIoYy5TeW1ib2xTZXRFbmNvZGluZywoMCxvLmdldEdseXBoc1VuaWNvZGUpKCksdGhpcy5kaWZmZXJlbmNlcyk7ZWxzZSBpZigvRGluZ2JhdHMvaS50ZXN0KHIpKXRoaXMudG9Gb250Q2hhcj1idWlsZFRvRm9udENoYXIoYy5aYXBmRGluZ2JhdHNFbmNvZGluZywoMCxvLmdldERpbmdiYXRzR2x5cGhzVW5pY29kZSkoKSx0aGlzLmRpZmZlcmVuY2VzKTtlbHNlIGlmKGQpe2NvbnN0IGU9YnVpbGRUb0ZvbnRDaGFyKHRoaXMuZGVmYXVsdEVuY29kaW5nLCgwLG8uZ2V0R2x5cGhzVW5pY29kZSkoKSx0aGlzLmRpZmZlcmVuY2VzKTsiQ0lERm9udFR5cGUyIiE9PWF8fHRoaXMuY2lkRW5jb2Rpbmcuc3RhcnRzV2l0aCgiSWRlbnRpdHktIil8fHRoaXMudG9Vbmljb2RlIGluc3RhbmNlb2YgaC5JZGVudGl0eVRvVW5pY29kZU1hcHx8dGhpcy50b1VuaWNvZGUuZm9yRWFjaCgoZnVuY3Rpb24odCxhKXtlWyt0XT1hfSkpO3RoaXMudG9Gb250Q2hhcj1lfWVsc2V7Y29uc3QgZT0oMCxvLmdldEdseXBoc1VuaWNvZGUpKCksYT1bXTt0aGlzLnRvVW5pY29kZS5mb3JFYWNoKCgodCxyKT0+e2lmKCF0aGlzLmNvbXBvc2l0ZSl7Y29uc3QgYT10aGlzLmRpZmZlcmVuY2VzW3RdfHx0aGlzLmRlZmF1bHRFbmNvZGluZ1t0XSxuPSgwLHMuZ2V0VW5pY29kZUZvckdseXBoKShhLGUpOy0xIT09biYmKHI9bil9YVsrdF09cn0pKTt0aGlzLmNvbXBvc2l0ZSYmdGhpcy50b1VuaWNvZGUgaW5zdGFuY2VvZiBoLklkZW50aXR5VG9Vbmljb2RlTWFwJiYvVGFob21hfFZlcmRhbmEvaS50ZXN0KHQpJiZhcHBseVN0YW5kYXJkRm9udEdseXBoTWFwKGEsKDAsbC5nZXRHbHlwaE1hcEZvclN0YW5kYXJkRm9udHMpKCkpO3RoaXMudG9Gb250Q2hhcj1hfWFtZW5kRmFsbGJhY2tUb1VuaWNvZGUoZSk7dGhpcy5sb2FkZWROYW1lPXIuc3BsaXQoIi0iKVswXX1jaGVja0FuZFJlcGFpcihlLHQsYSl7Y29uc3Qgcz1bIk9TLzIiLCJjbWFwIiwiaGVhZCIsImhoZWEiLCJobXR4IiwibWF4cCIsIm5hbWUiLCJwb3N0IiwibG9jYSIsImdseWYiLCJmcGdtIiwicHJlcCIsImN2dCAiLCJDRkYgIl07ZnVuY3Rpb24gcmVhZFRhYmxlcyhlLHQpe2NvbnN0IGE9T2JqZWN0LmNyZWF0ZShudWxsKTthWyJPUy8yIl09bnVsbDthLmNtYXA9bnVsbDthLmhlYWQ9bnVsbDthLmhoZWE9bnVsbDthLmhtdHg9bnVsbDthLm1heHA9bnVsbDthLm5hbWU9bnVsbDthLnBvc3Q9bnVsbDtmb3IobGV0IHI9MDtyPHQ7cisrKXtjb25zdCB0PXJlYWRUYWJsZUVudHJ5KGUpO3MuaW5jbHVkZXModC50YWcpJiYoMCE9PXQubGVuZ3RoJiYoYVt0LnRhZ109dCkpfXJldHVybiBhfWZ1bmN0aW9uIHJlYWRUYWJsZUVudHJ5KGUpe2NvbnN0IHQ9ZS5nZXRTdHJpbmcoNCksYT1lLmdldEludDMyKCk+Pj4wLHI9ZS5nZXRJbnQzMigpPj4+MCxuPWUuZ2V0SW50MzIoKT4+PjAsaT1lLnBvcztlLnBvcz1lLnN0YXJ0fHwwO2Uuc2tpcChyKTtjb25zdCBzPWUuZ2V0Qnl0ZXMobik7ZS5wb3M9aTtpZigiaGVhZCI9PT10KXtzWzhdPXNbOV09c1sxMF09c1sxMV09MDtzWzE3XXw9MzJ9cmV0dXJue3RhZzp0LGNoZWNrc3VtOmEsbGVuZ3RoOm4sb2Zmc2V0OnIsZGF0YTpzfX1mdW5jdGlvbiByZWFkT3BlblR5cGVIZWFkZXIoZSl7cmV0dXJue3ZlcnNpb246ZS5nZXRTdHJpbmcoNCksbnVtVGFibGVzOmUuZ2V0VWludDE2KCksc2VhcmNoUmFuZ2U6ZS5nZXRVaW50MTYoKSxlbnRyeVNlbGVjdG9yOmUuZ2V0VWludDE2KCkscmFuZ2VTaGlmdDplLmdldFVpbnQxNigpfX1mdW5jdGlvbiBzYW5pdGl6ZUdseXBoKGUsdCxhLHIsbixpKXtjb25zdCBzPXtsZW5ndGg6MCxzaXplT2ZJbnN0cnVjdGlvbnM6MH07aWYodDwwfHx0Pj1lLmxlbmd0aHx8YT5lLmxlbmd0aHx8YS10PD0xMilyZXR1cm4gcztjb25zdCBvPWUuc3ViYXJyYXkodCxhKSxjPXNpZ25lZEludDE2KG9bMl0sb1szXSksbD1zaWduZWRJbnQxNihvWzRdLG9bNV0pLGg9c2lnbmVkSW50MTYob1s2XSxvWzddKSx1PXNpZ25lZEludDE2KG9bOF0sb1s5XSk7aWYoYz5oKXt3cml0ZVNpZ25lZEludDE2KG8sMixoKTt3cml0ZVNpZ25lZEludDE2KG8sNixjKX1pZihsPnUpe3dyaXRlU2lnbmVkSW50MTYobyw0LHUpO3dyaXRlU2lnbmVkSW50MTYobyw4LGwpfWNvbnN0IGQ9c2lnbmVkSW50MTYob1swXSxvWzFdKTtpZihkPDApe2lmKGQ8LTEpcmV0dXJuIHM7ci5zZXQobyxuKTtzLmxlbmd0aD1vLmxlbmd0aDtyZXR1cm4gc31sZXQgZixnPTEwLHA9MDtmb3IoZj0wO2Y8ZDtmKyspe3A9KG9bZ108PDh8b1tnKzFdKSsxO2crPTJ9Y29uc3QgbT1nLGI9b1tnXTw8OHxvW2crMV07cy5zaXplT2ZJbnN0cnVjdGlvbnM9YjtnKz0yK2I7Y29uc3QgeT1nO2xldCB3PTA7Zm9yKGY9MDtmPHA7ZisrKXtjb25zdCBlPW9bZysrXTsxOTImZSYmKG9bZy0xXT02MyZlKTtsZXQgdD0yOzImZT90PTE6MTYmZSYmKHQ9MCk7bGV0IGE9Mjs0JmU/YT0xOjMyJmUmJihhPTApO2NvbnN0IHI9dCthO3crPXI7aWYoOCZlKXtjb25zdCBlPW9bZysrXTswPT09ZSYmKG9bZy0xXV49OCk7Zis9ZTt3Kz1lKnJ9fWlmKDA9PT13KXJldHVybiBzO2xldCBTPWcrdztpZihTPm8ubGVuZ3RoKXJldHVybiBzO2lmKCFpJiZiPjApe3Iuc2V0KG8uc3ViYXJyYXkoMCxtKSxuKTtyLnNldChbMCwwXSxuK20pO3Iuc2V0KG8uc3ViYXJyYXkoeSxTKSxuK20rMik7Uy09YjtvLmxlbmd0aC1TPjMmJihTPVMrMyYtNCk7cy5sZW5ndGg9UztyZXR1cm4gc31pZihvLmxlbmd0aC1TPjMpe1M9UyszJi00O3Iuc2V0KG8uc3ViYXJyYXkoMCxTKSxuKTtzLmxlbmd0aD1TO3JldHVybiBzfXIuc2V0KG8sbik7cy5sZW5ndGg9by5sZW5ndGg7cmV0dXJuIHN9ZnVuY3Rpb24gcmVhZE5hbWVUYWJsZShlKXtjb25zdCBhPSh0LnN0YXJ0fHwwKStlLm9mZnNldDt0LnBvcz1hO2NvbnN0IHI9W1tdLFtdXSxuPVtdLGk9ZS5sZW5ndGgscz1hK2k7aWYoMCE9PXQuZ2V0VWludDE2KCl8fGk8NilyZXR1cm5bcixuXTtjb25zdCBvPXQuZ2V0VWludDE2KCksYz10LmdldFVpbnQxNigpO2xldCBsLGg7Zm9yKGw9MDtsPG8mJnQucG9zKzEyPD1zO2wrKyl7Y29uc3QgZT17cGxhdGZvcm06dC5nZXRVaW50MTYoKSxlbmNvZGluZzp0LmdldFVpbnQxNigpLGxhbmd1YWdlOnQuZ2V0VWludDE2KCksbmFtZTp0LmdldFVpbnQxNigpLGxlbmd0aDp0LmdldFVpbnQxNigpLG9mZnNldDp0LmdldFVpbnQxNigpfTsoaXNNYWNOYW1lUmVjb3JkKGUpfHxpc1dpbk5hbWVSZWNvcmQoZSkpJiZuLnB1c2goZSl9Zm9yKGw9MCxoPW4ubGVuZ3RoO2w8aDtsKyspe2NvbnN0IGU9bltsXTtpZihlLmxlbmd0aDw9MCljb250aW51ZTtjb25zdCBpPWErYytlLm9mZnNldDtpZihpK2UubGVuZ3RoPnMpY29udGludWU7dC5wb3M9aTtjb25zdCBvPWUubmFtZTtpZihlLmVuY29kaW5nKXtsZXQgYT0iIjtmb3IobGV0IHI9MCxuPWUubGVuZ3RoO3I8bjtyKz0yKWErPVN0cmluZy5mcm9tQ2hhckNvZGUodC5nZXRVaW50MTYoKSk7clsxXVtvXT1hfWVsc2UgclswXVtvXT10LmdldFN0cmluZyhlLmxlbmd0aCl9cmV0dXJuW3Isbl19Y29uc3QgbD1bMCwwLDAsMCwwLDAsMCwwLC0yLC0yLC0yLC0yLDAsMCwtMiwtNSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwwLDAsLTEsMCwtMSwtMSwtMSwtMSwxLC0xLC05OTksMCwxLDAsLTEsLTIsMCwtMSwtMiwtMSwtMSwwLC0xLC0xLDAsMCwtOTk5LC05OTksLTEsLTEsLTEsLTEsLTIsLTk5OSwtMiwtMiwtOTk5LDAsLTIsLTIsMCwwLC0yLDAsLTIsMCwwLDAsLTIsLTEsLTEsMSwxLDAsMCwtMSwtMSwtMSwtMSwtMSwtMSwtMSwwLDAsLTEsMCwtMSwtMSwwLC05OTksLTEsLTEsLTEsLTEsLTEsLTEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsLTIsLTk5OSwtOTk5LC05OTksLTk5OSwtOTk5LC0xLC0xLC0yLC0yLDAsMCwwLDAsLTEsLTEsLTk5OSwtMiwtMiwwLDAsLTEsLTIsLTIsMCwwLDAsLTEsLTEsLTEsLTJdO2Z1bmN0aW9uIHNhbml0aXplVFRQcm9ncmFtKGUsdCl7bGV0IGEsbixpLHMsbyxjPWUuZGF0YSxoPTAsdT0wLGQ9MDtjb25zdCBmPVtdLGc9W10scD1bXTtsZXQgbT10LnRvb0NvbXBsZXhUb0ZvbGxvd0Z1bmN0aW9ucyxiPSExLHk9MCx3PTA7Zm9yKGxldCBlPWMubGVuZ3RoO2g8ZTspe2NvbnN0IGU9Y1toKytdO2lmKDY0PT09ZSl7bj1jW2grK107aWYoYnx8dyloKz1uO2Vsc2UgZm9yKGE9MDthPG47YSsrKWYucHVzaChjW2grK10pfWVsc2UgaWYoNjU9PT1lKXtuPWNbaCsrXTtpZihifHx3KWgrPTIqbjtlbHNlIGZvcihhPTA7YTxuO2ErKyl7aT1jW2grK107Zi5wdXNoKGk8PDh8Y1toKytdKX19ZWxzZSBpZigxNzY9PSgyNDgmZSkpe249ZS0xNzYrMTtpZihifHx3KWgrPW47ZWxzZSBmb3IoYT0wO2E8bjthKyspZi5wdXNoKGNbaCsrXSl9ZWxzZSBpZigxODQ9PSgyNDgmZSkpe249ZS0xODQrMTtpZihifHx3KWgrPTIqbjtlbHNlIGZvcihhPTA7YTxuO2ErKyl7aT1jW2grK107Zi5wdXNoKGk8PDh8Y1toKytdKX19ZWxzZSBpZig0MyE9PWV8fG0paWYoNDQhPT1lfHxtKXtpZig0NT09PWUpaWYoYil7Yj0hMTt1PWh9ZWxzZXtvPWcucG9wKCk7aWYoIW8peygwLHIud2FybikoIlRUOiBFTkRGIGJhZCBzdGFjayIpO3QuaGludHNWYWxpZD0hMTtyZXR1cm59cz1wLnBvcCgpO2M9by5kYXRhO2g9by5pO3QuZnVuY3Rpb25zU3RhY2tEZWx0YXNbc109Zi5sZW5ndGgtby5zdGFja1RvcH1lbHNlIGlmKDEzNz09PWUpe2lmKGJ8fHcpeygwLHIud2FybikoIlRUOiBuZXN0ZWQgSURFRnMgbm90IGFsbG93ZWQiKTttPSEwfWI9ITA7ZD1ofWVsc2UgaWYoODg9PT1lKSsreTtlbHNlIGlmKDI3PT09ZSl3PXk7ZWxzZSBpZig4OT09PWUpe3c9PT15JiYodz0wKTstLXl9ZWxzZSBpZigyOD09PWUmJiFiJiYhdyl7Y29uc3QgZT1mLmF0KC0xKTtlPjAmJihoKz1lLTEpfX1lbHNle2lmKGJ8fHcpeygwLHIud2FybikoIlRUOiBuZXN0ZWQgRkRFRnMgbm90IGFsbG93ZWQiKTttPSEwfWI9ITA7ZD1oO3M9Zi5wb3AoKTt0LmZ1bmN0aW9uc0RlZmluZWRbc109e2RhdGE6YyxpOmh9fWVsc2UgaWYoIWImJiF3KXtzPWYuYXQoLTEpO2lmKGlzTmFOKHMpKSgwLHIuaW5mbykoIlRUOiBDQUxMIGVtcHR5IHN0YWNrIChvciBpbnZhbGlkIGVudHJ5KS4iKTtlbHNle3QuZnVuY3Rpb25zVXNlZFtzXT0hMDtpZihzIGluIHQuZnVuY3Rpb25zU3RhY2tEZWx0YXMpe2NvbnN0IGU9Zi5sZW5ndGgrdC5mdW5jdGlvbnNTdGFja0RlbHRhc1tzXTtpZihlPDApeygwLHIud2FybikoIlRUOiBDQUxMIGludmFsaWQgZnVuY3Rpb25zIHN0YWNrIGRlbHRhLiIpO3QuaGludHNWYWxpZD0hMTtyZXR1cm59Zi5sZW5ndGg9ZX1lbHNlIGlmKHMgaW4gdC5mdW5jdGlvbnNEZWZpbmVkJiYhcC5pbmNsdWRlcyhzKSl7Zy5wdXNoKHtkYXRhOmMsaTpoLHN0YWNrVG9wOmYubGVuZ3RoLTF9KTtwLnB1c2gocyk7bz10LmZ1bmN0aW9uc0RlZmluZWRbc107aWYoIW8peygwLHIud2FybikoIlRUOiBDQUxMIG5vbi1leGlzdGVudCBmdW5jdGlvbiIpO3QuaGludHNWYWxpZD0hMTtyZXR1cm59Yz1vLmRhdGE7aD1vLml9fX1pZighYiYmIXcpe2xldCB0PTA7ZTw9MTQyP3Q9bFtlXTplPj0xOTImJmU8PTIyMz90PS0xOmU+PTIyNCYmKHQ9LTIpO2lmKGU+PTExMyYmZTw9MTE3KXtuPWYucG9wKCk7aXNOYU4obil8fCh0PTIqLW4pfWZvcig7dDwwJiZmLmxlbmd0aD4wOyl7Zi5wb3AoKTt0Kyt9Zm9yKDt0PjA7KXtmLnB1c2goTmFOKTt0LS19fX10LnRvb0NvbXBsZXhUb0ZvbGxvd0Z1bmN0aW9ucz1tO2NvbnN0IFM9W2NdO2g+Yy5sZW5ndGgmJlMucHVzaChuZXcgVWludDhBcnJheShoLWMubGVuZ3RoKSk7aWYoZD51KXsoMCxyLndhcm4pKCJUVDogY29tcGxlbWVudGluZyBhIG1pc3NpbmcgZnVuY3Rpb24gdGFpbCIpO1MucHVzaChuZXcgVWludDhBcnJheShbMzQsNDVdKSl9IWZ1bmN0aW9uIGZvbGRUVFRhYmxlKGUsdCl7aWYodC5sZW5ndGg+MSl7bGV0IGEscixuPTA7Zm9yKGE9MCxyPXQubGVuZ3RoO2E8cjthKyspbis9dFthXS5sZW5ndGg7bj1uKzMmLTQ7Y29uc3QgaT1uZXcgVWludDhBcnJheShuKTtsZXQgcz0wO2ZvcihhPTAscj10Lmxlbmd0aDthPHI7YSsrKXtpLnNldCh0W2FdLHMpO3MrPXRbYV0ubGVuZ3RofWUuZGF0YT1pO2UubGVuZ3RoPW59fShlLFMpfWxldCBkLGYsYix3O2lmKGlzVHJ1ZVR5cGVDb2xsZWN0aW9uRmlsZSh0PW5ldyB5LlN0cmVhbShuZXcgVWludDhBcnJheSh0LmdldEJ5dGVzKCkpKSkpe2NvbnN0IGU9ZnVuY3Rpb24gcmVhZFRydWVUeXBlQ29sbGVjdGlvbkRhdGEoZSx0KXtjb25zdHtudW1Gb250czphLG9mZnNldFRhYmxlOm59PWZ1bmN0aW9uIHJlYWRUcnVlVHlwZUNvbGxlY3Rpb25IZWFkZXIoZSl7Y29uc3QgdD1lLmdldFN0cmluZyg0KTsoMCxyLmFzc2VydCkoInR0Y2YiPT09dCwiTXVzdCBiZSBhIFRydWVUeXBlIENvbGxlY3Rpb24gZm9udC4iKTtjb25zdCBhPWUuZ2V0VWludDE2KCksbj1lLmdldFVpbnQxNigpLGk9ZS5nZXRJbnQzMigpPj4+MCxzPVtdO2ZvcihsZXQgdD0wO3Q8aTt0Kyspcy5wdXNoKGUuZ2V0SW50MzIoKT4+PjApO2NvbnN0IG89e3R0Y1RhZzp0LG1ham9yVmVyc2lvbjphLG1pbm9yVmVyc2lvbjpuLG51bUZvbnRzOmksb2Zmc2V0VGFibGU6c307c3dpdGNoKGEpe2Nhc2UgMTpyZXR1cm4gbztjYXNlIDI6by5kc2lnVGFnPWUuZ2V0SW50MzIoKT4+PjA7by5kc2lnTGVuZ3RoPWUuZ2V0SW50MzIoKT4+PjA7by5kc2lnT2Zmc2V0PWUuZ2V0SW50MzIoKT4+PjA7cmV0dXJuIG99dGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYEludmFsaWQgVHJ1ZVR5cGUgQ29sbGVjdGlvbiBtYWpvclZlcnNpb246ICR7YX0uYCl9KGUpLGk9dC5zcGxpdCgiKyIpO2xldCBzO2ZvcihsZXQgbz0wO288YTtvKyspe2UucG9zPShlLnN0YXJ0fHwwKStuW29dO2NvbnN0IGE9cmVhZE9wZW5UeXBlSGVhZGVyKGUpLGM9cmVhZFRhYmxlcyhlLGEubnVtVGFibGVzKTtpZighYy5uYW1lKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCdUcnVlVHlwZSBDb2xsZWN0aW9uIGZvbnQgbXVzdCBjb250YWluIGEgIm5hbWUiIHRhYmxlLicpO2NvbnN0W2xdPXJlYWROYW1lVGFibGUoYy5uYW1lKTtmb3IobGV0IGU9MCxyPWwubGVuZ3RoO2U8cjtlKyspZm9yKGxldCByPTAsbj1sW2VdLmxlbmd0aDtyPG47cisrKXtjb25zdCBuPWxbZV1bcl0/LnJlcGxhY2VBbGwoL1xzL2csIiIpO2lmKG4pe2lmKG49PT10KXJldHVybntoZWFkZXI6YSx0YWJsZXM6Y307aWYoIShpLmxlbmd0aDwyKSlmb3IoY29uc3QgZSBvZiBpKW49PT1lJiYocz17bmFtZTplLGhlYWRlcjphLHRhYmxlczpjfSl9fX1pZihzKXsoMCxyLndhcm4pKGBUcnVlVHlwZSBDb2xsZWN0aW9uIGRvZXMgbm90IGNvbnRhaW4gIiR7dH0iIGZvbnQsIGZhbGxpbmcgYmFjayB0byAiJHtzLm5hbWV9IiBmb250IGluc3RlYWQuYCk7cmV0dXJue2hlYWRlcjpzLmhlYWRlcix0YWJsZXM6cy50YWJsZXN9fXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBUcnVlVHlwZSBDb2xsZWN0aW9uIGRvZXMgbm90IGNvbnRhaW4gIiR7dH0iIGZvbnQuYCl9KHQsdGhpcy5uYW1lKTtkPWUuaGVhZGVyO2Y9ZS50YWJsZXN9ZWxzZXtkPXJlYWRPcGVuVHlwZUhlYWRlcih0KTtmPXJlYWRUYWJsZXModCxkLm51bVRhYmxlcyl9Y29uc3QgUz0hZlsiQ0ZGICJdO2lmKFMpe2lmKCFmLmxvY2EpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoJ1JlcXVpcmVkICJsb2NhIiB0YWJsZSBpcyBub3QgZm91bmQnKTtpZighZi5nbHlmKXsoMCxyLndhcm4pKCdSZXF1aXJlZCAiZ2x5ZiIgdGFibGUgaXMgbm90IGZvdW5kIC0tIHRyeWluZyB0byByZWNvdmVyLicpO2YuZ2x5Zj17dGFnOiJnbHlmIixkYXRhOm5ldyBVaW50OEFycmF5KDApfX10aGlzLmlzT3BlblR5cGU9ITF9ZWxzZXtjb25zdCB0PWEuY29tcG9zaXRlJiYoYS5jaWRUb0dpZE1hcD8ubGVuZ3RoPjB8fCEoYS5jTWFwIGluc3RhbmNlb2YgcC5JZGVudGl0eUNNYXApKTtpZigiT1RUTyI9PT1kLnZlcnNpb24mJiF0fHwhZi5oZWFkfHwhZi5oaGVhfHwhZi5tYXhwfHwhZi5wb3N0KXt3PW5ldyB5LlN0cmVhbShmWyJDRkYgIl0uZGF0YSk7Yj1uZXcgdS5DRkZGb250KHcsYSk7YWRqdXN0V2lkdGhzKGEpO3JldHVybiB0aGlzLmNvbnZlcnQoZSxiLGEpfWRlbGV0ZSBmLmdseWY7ZGVsZXRlIGYubG9jYTtkZWxldGUgZi5mcGdtO2RlbGV0ZSBmLnByZXA7ZGVsZXRlIGZbImN2dCAiXTt0aGlzLmlzT3BlblR5cGU9ITB9aWYoIWYubWF4cCl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcignUmVxdWlyZWQgIm1heHAiIHRhYmxlIGlzIG5vdCBmb3VuZCcpO3QucG9zPSh0LnN0YXJ0fHwwKStmLm1heHAub2Zmc2V0O2NvbnN0IHg9dC5nZXRJbnQzMigpLEM9dC5nZXRVaW50MTYoKTtpZihhLnNjYWxlRmFjdG9ycz8ubGVuZ3RoPT09QyYmUyl7Y29uc3R7c2NhbGVGYWN0b3JzOmV9PWEsdD1pbnQxNihmLmhlYWQuZGF0YVs1MF0sZi5oZWFkLmRhdGFbNTFdKSxyPW5ldyBnLkdseWZUYWJsZSh7Z2x5ZlRhYmxlOmYuZ2x5Zi5kYXRhLGlzR2x5cGhMb2NhdGlvbnNMb25nOnQsbG9jYVRhYmxlOmYubG9jYS5kYXRhLG51bUdseXBoczpDfSk7ci5zY2FsZShlKTtjb25zdHtnbHlmOm4sbG9jYTppLGlzTG9jYXRpb25Mb25nOnN9PXIud3JpdGUoKTtmLmdseWYuZGF0YT1uO2YubG9jYS5kYXRhPWk7aWYocyE9PSEhdCl7Zi5oZWFkLmRhdGFbNTBdPTA7Zi5oZWFkLmRhdGFbNTFdPXM/MTowfWNvbnN0IG89Zi5obXR4LmRhdGE7Zm9yKGxldCB0PTA7dDxDO3QrKyl7Y29uc3QgYT00KnQscj1NYXRoLnJvdW5kKGVbdF0qaW50MTYob1thXSxvW2ErMV0pKTtvW2FdPXI+PjgmMjU1O29bYSsxXT0yNTUmcjt3cml0ZVNpZ25lZEludDE2KG8sYSsyLE1hdGgucm91bmQoZVt0XSpzaWduZWRJbnQxNihvW2ErMl0sb1thKzNdKSkpfX1sZXQgaz1DKzEsdj0hMDtpZihrPjY1NTM1KXt2PSExO2s9QzsoMCxyLndhcm4pKCJOb3QgZW5vdWdoIHNwYWNlIGluIGdseWZzIHRvIGR1cGxpY2F0ZSBmaXJzdCBnbHlwaC4iKX1sZXQgRj0wLE89MDtpZih4Pj02NTUzNiYmZi5tYXhwLmxlbmd0aD49MjIpe3QucG9zKz04O2lmKHQuZ2V0VWludDE2KCk+Mil7Zi5tYXhwLmRhdGFbMTRdPTA7Zi5tYXhwLmRhdGFbMTVdPTJ9dC5wb3MrPTQ7Rj10LmdldFVpbnQxNigpO3QucG9zKz00O089dC5nZXRVaW50MTYoKX1mLm1heHAuZGF0YVs0XT1rPj44O2YubWF4cC5kYXRhWzVdPTI1NSZrO2NvbnN0IFQ9ZnVuY3Rpb24gc2FuaXRpemVUVFByb2dyYW1zKGUsdCxhLG4pe2NvbnN0IGk9e2Z1bmN0aW9uc0RlZmluZWQ6W10sZnVuY3Rpb25zVXNlZDpbXSxmdW5jdGlvbnNTdGFja0RlbHRhczpbXSx0b29Db21wbGV4VG9Gb2xsb3dGdW5jdGlvbnM6ITEsaGludHNWYWxpZDohMH07ZSYmc2FuaXRpemVUVFByb2dyYW0oZSxpKTt0JiZzYW5pdGl6ZVRUUHJvZ3JhbSh0LGkpO2UmJmZ1bmN0aW9uIGNoZWNrSW52YWxpZEZ1bmN0aW9ucyhlLHQpe2lmKCFlLnRvb0NvbXBsZXhUb0ZvbGxvd0Z1bmN0aW9ucylpZihlLmZ1bmN0aW9uc0RlZmluZWQubGVuZ3RoPnQpeygwLHIud2FybikoIlRUOiBtb3JlIGZ1bmN0aW9ucyBkZWZpbmVkIHRoYW4gZXhwZWN0ZWQiKTtlLmhpbnRzVmFsaWQ9ITF9ZWxzZSBmb3IobGV0IGE9MCxuPWUuZnVuY3Rpb25zVXNlZC5sZW5ndGg7YTxuO2ErKyl7aWYoYT50KXsoMCxyLndhcm4pKCJUVDogaW52YWxpZCBmdW5jdGlvbiBpZDogIithKTtlLmhpbnRzVmFsaWQ9ITE7cmV0dXJufWlmKGUuZnVuY3Rpb25zVXNlZFthXSYmIWUuZnVuY3Rpb25zRGVmaW5lZFthXSl7KDAsci53YXJuKSgiVFQ6IHVuZGVmaW5lZCBmdW5jdGlvbjogIithKTtlLmhpbnRzVmFsaWQ9ITE7cmV0dXJufX19KGksbik7aWYoYSYmMSZhLmxlbmd0aCl7Y29uc3QgZT1uZXcgVWludDhBcnJheShhLmxlbmd0aCsxKTtlLnNldChhLmRhdGEpO2EuZGF0YT1lfXJldHVybiBpLmhpbnRzVmFsaWR9KGYuZnBnbSxmLnByZXAsZlsiY3Z0ICJdLEYpO2lmKCFUKXtkZWxldGUgZi5mcGdtO2RlbGV0ZSBmLnByZXA7ZGVsZXRlIGZbImN2dCAiXX0hZnVuY3Rpb24gc2FuaXRpemVNZXRyaWNzKGUsdCxhLG4saSxzKXtpZighdCl7YSYmKGEuZGF0YT1udWxsKTtyZXR1cm59ZS5wb3M9KGUuc3RhcnR8fDApK3Qub2Zmc2V0O2UucG9zKz00O2UucG9zKz0yO2UucG9zKz0yO2UucG9zKz0yO2UucG9zKz0yO2UucG9zKz0yO2UucG9zKz0yO2UucG9zKz0yO2UucG9zKz0yO2UucG9zKz0yO2NvbnN0IG89ZS5nZXRVaW50MTYoKTtlLnBvcys9ODtlLnBvcys9MjtsZXQgYz1lLmdldFVpbnQxNigpO2lmKDAhPT1vKXtpZighKDImaW50MTYobi5kYXRhWzQ0XSxuLmRhdGFbNDVdKSkpe3QuZGF0YVsyMl09MDt0LmRhdGFbMjNdPTB9fWlmKGM+aSl7KDAsci5pbmZvKShgVGhlIG51bU9mTWV0cmljcyAoJHtjfSkgc2hvdWxkIG5vdCBiZSBncmVhdGVyIHRoYW4gdGhlIG51bUdseXBocyAoJHtpfSkuYCk7Yz1pO3QuZGF0YVszNF09KDY1MjgwJmMpPj44O3QuZGF0YVszNV09MjU1JmN9Y29uc3QgbD1pLWMtKGEubGVuZ3RoLTQqYz4+MSk7aWYobD4wKXtjb25zdCBlPW5ldyBVaW50OEFycmF5KGEubGVuZ3RoKzIqbCk7ZS5zZXQoYS5kYXRhKTtpZihzKXtlW2EubGVuZ3RoXT1hLmRhdGFbMl07ZVthLmxlbmd0aCsxXT1hLmRhdGFbM119YS5kYXRhPWV9fSh0LGYuaGhlYSxmLmhtdHgsZi5oZWFkLGssdik7aWYoIWYuaGVhZCl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcignUmVxdWlyZWQgImhlYWQiIHRhYmxlIGlzIG5vdCBmb3VuZCcpOyFmdW5jdGlvbiBzYW5pdGl6ZUhlYWQoZSx0LGEpe2NvbnN0IG49ZS5kYXRhLGk9ZnVuY3Rpb24gaW50MzIoZSx0LGEscil7cmV0dXJuKGU8PDI0KSsodDw8MTYpKyhhPDw4KStyfShuWzBdLG5bMV0sblsyXSxuWzNdKTtpZihpPj4xNiE9MSl7KDAsci5pbmZvKSgiQXR0ZW1wdGluZyB0byBmaXggaW52YWxpZCB2ZXJzaW9uIGluIGhlYWQgdGFibGU6ICIraSk7blswXT0wO25bMV09MTtuWzJdPTA7blszXT0wfWNvbnN0IHM9aW50MTYobls1MF0sbls1MV0pO2lmKHM8MHx8cz4xKXsoMCxyLmluZm8pKCJBdHRlbXB0aW5nIHRvIGZpeCBpbnZhbGlkIGluZGV4VG9Mb2NGb3JtYXQgaW4gaGVhZCB0YWJsZTogIitzKTtjb25zdCBlPXQrMTtpZihhPT09ZTw8MSl7bls1MF09MDtuWzUxXT0wfWVsc2V7aWYoYSE9PWU8PDIpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkNvdWxkIG5vdCBmaXggaW5kZXhUb0xvY0Zvcm1hdDogIitzKTtuWzUwXT0wO25bNTFdPTF9fX0oZi5oZWFkLEMsUz9mLmxvY2EubGVuZ3RoOjApO2xldCBNPU9iamVjdC5jcmVhdGUobnVsbCk7aWYoUyl7Y29uc3QgZT1pbnQxNihmLmhlYWQuZGF0YVs1MF0sZi5oZWFkLmRhdGFbNTFdKSx0PWZ1bmN0aW9uIHNhbml0aXplR2x5cGhMb2NhdGlvbnMoZSx0LGEscixuLGkscyl7bGV0IG8sYyxsO2lmKHIpe289NDtjPWZ1bmN0aW9uIGZvbnRJdGVtRGVjb2RlTG9uZyhlLHQpe3JldHVybiBlW3RdPDwyNHxlW3QrMV08PDE2fGVbdCsyXTw8OHxlW3QrM119O2w9ZnVuY3Rpb24gZm9udEl0ZW1FbmNvZGVMb25nKGUsdCxhKXtlW3RdPWE+Pj4yNCYyNTU7ZVt0KzFdPWE+PjE2JjI1NTtlW3QrMl09YT4+OCYyNTU7ZVt0KzNdPTI1NSZhfX1lbHNle289MjtjPWZ1bmN0aW9uIGZvbnRJdGVtRGVjb2RlKGUsdCl7cmV0dXJuIGVbdF08PDl8ZVt0KzFdPDwxfTtsPWZ1bmN0aW9uIGZvbnRJdGVtRW5jb2RlKGUsdCxhKXtlW3RdPWE+PjkmMjU1O2VbdCsxXT1hPj4xJjI1NX19Y29uc3QgaD1pP2ErMTphLHU9byooMStoKSxkPW5ldyBVaW50OEFycmF5KHUpO2Quc2V0KGUuZGF0YS5zdWJhcnJheSgwLHUpKTtlLmRhdGE9ZDtjb25zdCBmPXQuZGF0YSxnPWYubGVuZ3RoLHA9bmV3IFVpbnQ4QXJyYXkoZyk7bGV0IG0sYjtjb25zdCB5PVtdO2ZvcihtPTAsYj0wO208YSsxO20rKyxiKz1vKXtsZXQgZT1jKGQsYik7ZT5nJiYoZT1nKTt5LnB1c2goe2luZGV4Om0sb2Zmc2V0OmUsZW5kT2Zmc2V0OjB9KX15LnNvcnQoKChlLHQpPT5lLm9mZnNldC10Lm9mZnNldCkpO2ZvcihtPTA7bTxhO20rKyl5W21dLmVuZE9mZnNldD15W20rMV0ub2Zmc2V0O3kuc29ydCgoKGUsdCk9PmUuaW5kZXgtdC5pbmRleCkpO2ZvcihtPTA7bTxhO20rKyl7Y29uc3R7b2Zmc2V0OmUsZW5kT2Zmc2V0OnR9PXlbbV07aWYoMCE9PWV8fDAhPT10KWJyZWFrO2NvbnN0IGE9eVttKzFdLm9mZnNldDtpZigwIT09YSl7eVttXS5lbmRPZmZzZXQ9YTticmVha319Y29uc3Qgdz1PYmplY3QuY3JlYXRlKG51bGwpO2xldCBTPTA7bChkLDAsUyk7Zm9yKG09MCxiPW87bTxhO20rKyxiKz1vKXtjb25zdCBlPXNhbml0aXplR2x5cGgoZix5W21dLm9mZnNldCx5W21dLmVuZE9mZnNldCxwLFMsbiksdD1lLmxlbmd0aDswPT09dCYmKHdbbV09ITApO2Uuc2l6ZU9mSW5zdHJ1Y3Rpb25zPnMmJihzPWUuc2l6ZU9mSW5zdHJ1Y3Rpb25zKTtTKz10O2woZCxiLFMpfWlmKDA9PT1TKXtjb25zdCBlPW5ldyBVaW50OEFycmF5KFswLDEsMCwwLDAsMCwwLDAsMCwwLDAsMCwwLDAsNDksMF0pO2ZvcihtPTAsYj1vO208aDttKyssYis9bylsKGQsYixlLmxlbmd0aCk7dC5kYXRhPWV9ZWxzZSBpZihpKXtjb25zdCBhPWMoZCxvKTtpZihwLmxlbmd0aD5hK1MpdC5kYXRhPXAuc3ViYXJyYXkoMCxhK1MpO2Vsc2V7dC5kYXRhPW5ldyBVaW50OEFycmF5KGErUyk7dC5kYXRhLnNldChwLnN1YmFycmF5KDAsUykpfXQuZGF0YS5zZXQocC5zdWJhcnJheSgwLGEpLFMpO2woZS5kYXRhLGQubGVuZ3RoLW8sUythKX1lbHNlIHQuZGF0YT1wLnN1YmFycmF5KDAsUyk7cmV0dXJue21pc3NpbmdHbHlwaHM6dyxtYXhTaXplT2ZJbnN0cnVjdGlvbnM6c319KGYubG9jYSxmLmdseWYsQyxlLFQsdixPKTtNPXQubWlzc2luZ0dseXBocztpZih4Pj02NTUzNiYmZi5tYXhwLmxlbmd0aD49MjIpe2YubWF4cC5kYXRhWzI2XT10Lm1heFNpemVPZkluc3RydWN0aW9ucz4+ODtmLm1heHAuZGF0YVsyN109MjU1JnQubWF4U2l6ZU9mSW5zdHJ1Y3Rpb25zfX1pZighZi5oaGVhKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCdSZXF1aXJlZCAiaGhlYSIgdGFibGUgaXMgbm90IGZvdW5kJyk7aWYoMD09PWYuaGhlYS5kYXRhWzEwXSYmMD09PWYuaGhlYS5kYXRhWzExXSl7Zi5oaGVhLmRhdGFbMTBdPTI1NTtmLmhoZWEuZGF0YVsxMV09MjU1fWNvbnN0IEQ9e3VuaXRzUGVyRW06aW50MTYoZi5oZWFkLmRhdGFbMThdLGYuaGVhZC5kYXRhWzE5XSkseU1heDpzaWduZWRJbnQxNihmLmhlYWQuZGF0YVs0Ml0sZi5oZWFkLmRhdGFbNDNdKSx5TWluOnNpZ25lZEludDE2KGYuaGVhZC5kYXRhWzM4XSxmLmhlYWQuZGF0YVszOV0pLGFzY2VudDpzaWduZWRJbnQxNihmLmhoZWEuZGF0YVs0XSxmLmhoZWEuZGF0YVs1XSksZGVzY2VudDpzaWduZWRJbnQxNihmLmhoZWEuZGF0YVs2XSxmLmhoZWEuZGF0YVs3XSksbGluZUdhcDpzaWduZWRJbnQxNihmLmhoZWEuZGF0YVs4XSxmLmhoZWEuZGF0YVs5XSl9O3RoaXMuYXNjZW50PUQuYXNjZW50L0QudW5pdHNQZXJFbTt0aGlzLmRlc2NlbnQ9RC5kZXNjZW50L0QudW5pdHNQZXJFbTt0aGlzLmxpbmVHYXA9RC5saW5lR2FwL0QudW5pdHNQZXJFbTtpZih0aGlzLmNzc0ZvbnRJbmZvPy5saW5lSGVpZ2h0KXt0aGlzLmxpbmVIZWlnaHQ9dGhpcy5jc3NGb250SW5mby5tZXRyaWNzLmxpbmVIZWlnaHQ7dGhpcy5saW5lR2FwPXRoaXMuY3NzRm9udEluZm8ubWV0cmljcy5saW5lR2FwfWVsc2UgdGhpcy5saW5lSGVpZ2h0PXRoaXMuYXNjZW50LXRoaXMuZGVzY2VudCt0aGlzLmxpbmVHYXA7Zi5wb3N0JiZmdW5jdGlvbiByZWFkUG9zdFNjcmlwdFRhYmxlKGUsYSxuKXtjb25zdCBzPSh0LnN0YXJ0fHwwKStlLm9mZnNldDt0LnBvcz1zO2NvbnN0IG89cytlLmxlbmd0aCxjPXQuZ2V0SW50MzIoKTt0LnNraXAoMjgpO2xldCBsLGgsdT0hMDtzd2l0Y2goYyl7Y2FzZSA2NTUzNjpsPWkuTWFjU3RhbmRhcmRHbHlwaE9yZGVyaW5nO2JyZWFrO2Nhc2UgMTMxMDcyOmNvbnN0IGU9dC5nZXRVaW50MTYoKTtpZihlIT09bil7dT0hMTticmVha31jb25zdCBzPVtdO2ZvcihoPTA7aDxlOysraCl7Y29uc3QgZT10LmdldFVpbnQxNigpO2lmKGU+PTMyNzY4KXt1PSExO2JyZWFrfXMucHVzaChlKX1pZighdSlicmVhaztjb25zdCBkPVtdLGY9W107Zm9yKDt0LnBvczxvOyl7Y29uc3QgZT10LmdldEJ5dGUoKTtmLmxlbmd0aD1lO2ZvcihoPTA7aDxlOysraClmW2hdPVN0cmluZy5mcm9tQ2hhckNvZGUodC5nZXRCeXRlKCkpO2QucHVzaChmLmpvaW4oIiIpKX1sPVtdO2ZvcihoPTA7aDxlOysraCl7Y29uc3QgZT1zW2hdO2U8MjU4P2wucHVzaChpLk1hY1N0YW5kYXJkR2x5cGhPcmRlcmluZ1tlXSk6bC5wdXNoKGRbZS0yNThdKX1icmVhaztjYXNlIDE5NjYwODpicmVhaztkZWZhdWx0OigwLHIud2FybikoIlVua25vd24vdW5zdXBwb3J0ZWQgcG9zdCB0YWJsZSB2ZXJzaW9uICIrYyk7dT0hMTthLmRlZmF1bHRFbmNvZGluZyYmKGw9YS5kZWZhdWx0RW5jb2RpbmcpfWEuZ2x5cGhOYW1lcz1sO3JldHVybiB1fShmLnBvc3QsYSxDKTtmLnBvc3Q9e3RhZzoicG9zdCIsZGF0YTpjcmVhdGVQb3N0VGFibGUoYSl9O2NvbnN0IEU9W107ZnVuY3Rpb24gaGFzR2x5cGgoZSl7cmV0dXJuIU1bZV19aWYoYS5jb21wb3NpdGUpe2NvbnN0IGU9YS5jaWRUb0dpZE1hcHx8W10sdD0wPT09ZS5sZW5ndGg7YS5jTWFwLmZvckVhY2goKGZ1bmN0aW9uKGEsbil7InN0cmluZyI9PXR5cGVvZiBuJiYobj1jb252ZXJ0Q2lkU3RyaW5nKGEsbiwhMCkpO2lmKG4+NjU1MzUpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIk1heCBzaXplIG9mIENJRCBpcyA2NSw1MzUiKTtsZXQgaT0tMTt0P2k9bjp2b2lkIDAhPT1lW25dJiYoaT1lW25dKTtpPj0wJiZpPEMmJmhhc0dseXBoKGkpJiYoRVthXT1pKX0pKX1lbHNle2NvbnN0IGU9ZnVuY3Rpb24gcmVhZENtYXBUYWJsZShlLHQsYSxuKXtpZighZSl7KDAsci53YXJuKSgiTm8gY21hcCB0YWJsZSBhdmFpbGFibGUuIik7cmV0dXJue3BsYXRmb3JtSWQ6LTEsZW5jb2RpbmdJZDotMSxtYXBwaW5nczpbXSxoYXNTaG9ydENtYXA6ITF9fWxldCBpLHM9KHQuc3RhcnR8fDApK2Uub2Zmc2V0O3QucG9zPXM7dC5za2lwKDIpO2NvbnN0IG89dC5nZXRVaW50MTYoKTtsZXQgYyxsPSExO2ZvcihsZXQgZT0wO2U8bztlKyspe2NvbnN0IHI9dC5nZXRVaW50MTYoKSxpPXQuZ2V0VWludDE2KCkscz10LmdldEludDMyKCk+Pj4wO2xldCBoPSExO2lmKGM/LnBsYXRmb3JtSWQhPT1yfHxjPy5lbmNvZGluZ0lkIT09aSl7aWYoMCE9PXJ8fDAhPT1pJiYxIT09aSYmMyE9PWkpaWYoMT09PXImJjA9PT1pKWg9ITA7ZWxzZSBpZigzIT09cnx8MSE9PWl8fCFuJiZjKXtpZihhJiYzPT09ciYmMD09PWkpe2g9ITA7bGV0IGE9ITA7aWYoZTxvLTEpe2NvbnN0IGU9dC5wZWVrQnl0ZXMoMik7aW50MTYoZVswXSxlWzFdKTxyJiYoYT0hMSl9YSYmKGw9ITApfX1lbHNle2g9ITA7YXx8KGw9ITApfWVsc2UgaD0hMDtoJiYoYz17cGxhdGZvcm1JZDpyLGVuY29kaW5nSWQ6aSxvZmZzZXQ6c30pO2lmKGwpYnJlYWt9fWMmJih0LnBvcz1zK2Mub2Zmc2V0KTtpZighY3x8LTE9PT10LnBlZWtCeXRlKCkpeygwLHIud2FybikoIkNvdWxkIG5vdCBmaW5kIGEgcHJlZmVycmVkIGNtYXAgdGFibGUuIik7cmV0dXJue3BsYXRmb3JtSWQ6LTEsZW5jb2RpbmdJZDotMSxtYXBwaW5nczpbXSxoYXNTaG9ydENtYXA6ITF9fWNvbnN0IGg9dC5nZXRVaW50MTYoKTtsZXQgdT0hMTtjb25zdCBkPVtdO2xldCBmLGc7aWYoMD09PWgpe3Quc2tpcCg0KTtmb3IoZj0wO2Y8MjU2O2YrKyl7Y29uc3QgZT10LmdldEJ5dGUoKTtlJiZkLnB1c2goe2NoYXJDb2RlOmYsZ2x5cGhJZDplfSl9dT0hMH1lbHNlIGlmKDI9PT1oKXt0LnNraXAoNCk7Y29uc3QgZT1bXTtsZXQgYT0wO2ZvcihsZXQgcj0wO3I8MjU2O3IrKyl7Y29uc3Qgcj10LmdldFVpbnQxNigpPj4zO2UucHVzaChyKTthPU1hdGgubWF4KHIsYSl9Y29uc3Qgcj1bXTtmb3IobGV0IGU9MDtlPD1hO2UrKylyLnB1c2goe2ZpcnN0Q29kZTp0LmdldFVpbnQxNigpLGVudHJ5Q291bnQ6dC5nZXRVaW50MTYoKSxpZERlbHRhOnNpZ25lZEludDE2KHQuZ2V0Qnl0ZSgpLHQuZ2V0Qnl0ZSgpKSxpZFJhbmdlUG9zOnQucG9zK3QuZ2V0VWludDE2KCl9KTtmb3IobGV0IGE9MDthPDI1NjthKyspaWYoMD09PWVbYV0pe3QucG9zPXJbMF0uaWRSYW5nZVBvcysyKmE7Zz10LmdldFVpbnQxNigpO2QucHVzaCh7Y2hhckNvZGU6YSxnbHlwaElkOmd9KX1lbHNle2NvbnN0IG49cltlW2FdXTtmb3IoZj0wO2Y8bi5lbnRyeUNvdW50O2YrKyl7Y29uc3QgZT0oYTw8OCkrZituLmZpcnN0Q29kZTt0LnBvcz1uLmlkUmFuZ2VQb3MrMipmO2c9dC5nZXRVaW50MTYoKTswIT09ZyYmKGc9KGcrbi5pZERlbHRhKSU2NTUzNik7ZC5wdXNoKHtjaGFyQ29kZTplLGdseXBoSWQ6Z30pfX19ZWxzZSBpZig0PT09aCl7dC5za2lwKDQpO2NvbnN0IGU9dC5nZXRVaW50MTYoKT4+MTt0LnNraXAoNik7Y29uc3QgYT1bXTtsZXQgcjtmb3Iocj0wO3I8ZTtyKyspYS5wdXNoKHtlbmQ6dC5nZXRVaW50MTYoKX0pO3Quc2tpcCgyKTtmb3Iocj0wO3I8ZTtyKyspYVtyXS5zdGFydD10LmdldFVpbnQxNigpO2ZvcihyPTA7cjxlO3IrKylhW3JdLmRlbHRhPXQuZ2V0VWludDE2KCk7bGV0IG4sbz0wO2ZvcihyPTA7cjxlO3IrKyl7aT1hW3JdO2NvbnN0IHM9dC5nZXRVaW50MTYoKTtpZihzKXtuPShzPj4xKS0oZS1yKTtpLm9mZnNldEluZGV4PW47bz1NYXRoLm1heChvLG4raS5lbmQtaS5zdGFydCsxKX1lbHNlIGkub2Zmc2V0SW5kZXg9LTF9Y29uc3QgYz1bXTtmb3IoZj0wO2Y8bztmKyspYy5wdXNoKHQuZ2V0VWludDE2KCkpO2ZvcihyPTA7cjxlO3IrKyl7aT1hW3JdO3M9aS5zdGFydDtjb25zdCBlPWkuZW5kLHQ9aS5kZWx0YTtuPWkub2Zmc2V0SW5kZXg7Zm9yKGY9cztmPD1lO2YrKylpZig2NTUzNSE9PWYpe2c9bjwwP2Y6Y1tuK2Ytc107Zz1nK3QmNjU1MzU7ZC5wdXNoKHtjaGFyQ29kZTpmLGdseXBoSWQ6Z30pfX19ZWxzZSBpZig2PT09aCl7dC5za2lwKDQpO2NvbnN0IGU9dC5nZXRVaW50MTYoKSxhPXQuZ2V0VWludDE2KCk7Zm9yKGY9MDtmPGE7ZisrKXtnPXQuZ2V0VWludDE2KCk7Y29uc3QgYT1lK2Y7ZC5wdXNoKHtjaGFyQ29kZTphLGdseXBoSWQ6Z30pfX1lbHNle2lmKDEyIT09aCl7KDAsci53YXJuKSgiY21hcCB0YWJsZSBoYXMgdW5zdXBwb3J0ZWQgZm9ybWF0OiAiK2gpO3JldHVybntwbGF0Zm9ybUlkOi0xLGVuY29kaW5nSWQ6LTEsbWFwcGluZ3M6W10saGFzU2hvcnRDbWFwOiExfX17dC5za2lwKDEwKTtjb25zdCBlPXQuZ2V0SW50MzIoKT4+PjA7Zm9yKGY9MDtmPGU7ZisrKXtjb25zdCBlPXQuZ2V0SW50MzIoKT4+PjAsYT10LmdldEludDMyKCk+Pj4wO2xldCByPXQuZ2V0SW50MzIoKT4+PjA7Zm9yKGxldCB0PWU7dDw9YTt0KyspZC5wdXNoKHtjaGFyQ29kZTp0LGdseXBoSWQ6cisrfSl9fX1kLnNvcnQoKGZ1bmN0aW9uKGUsdCl7cmV0dXJuIGUuY2hhckNvZGUtdC5jaGFyQ29kZX0pKTtmb3IobGV0IGU9MTtlPGQubGVuZ3RoO2UrKylpZihkW2UtMV0uY2hhckNvZGU9PT1kW2VdLmNoYXJDb2RlKXtkLnNwbGljZShlLDEpO2UtLX1yZXR1cm57cGxhdGZvcm1JZDpjLnBsYXRmb3JtSWQsZW5jb2RpbmdJZDpjLmVuY29kaW5nSWQsbWFwcGluZ3M6ZCxoYXNTaG9ydENtYXA6dX19KGYuY21hcCx0LHRoaXMuaXNTeW1ib2xpY0ZvbnQsYS5oYXNFbmNvZGluZyksbj1lLnBsYXRmb3JtSWQscz1lLmVuY29kaW5nSWQsbD1lLm1hcHBpbmdzO2xldCB1PVtdLGQ9ITE7IWEuaGFzRW5jb2Rpbmd8fCJNYWNSb21hbkVuY29kaW5nIiE9PWEuYmFzZUVuY29kaW5nTmFtZSYmIldpbkFuc2lFbmNvZGluZyIhPT1hLmJhc2VFbmNvZGluZ05hbWV8fCh1PSgwLGMuZ2V0RW5jb2RpbmcpKGEuYmFzZUVuY29kaW5nTmFtZSkpO2lmKGEuaGFzRW5jb2RpbmcmJiF0aGlzLmlzU3ltYm9saWNGb250JiYoMz09PW4mJjE9PT1zfHwxPT09biYmMD09PXMpKXtjb25zdCBlPSgwLG8uZ2V0R2x5cGhzVW5pY29kZSkoKTtmb3IobGV0IHQ9MDt0PDI1Njt0Kyspe2xldCByO3I9dm9pZCAwIT09dGhpcy5kaWZmZXJlbmNlc1t0XT90aGlzLmRpZmZlcmVuY2VzW3RdOnUubGVuZ3RoJiYiIiE9PXVbdF0/dVt0XTpjLlN0YW5kYXJkRW5jb2RpbmdbdF07aWYoIXIpY29udGludWU7Y29uc3Qgbz0oMCxpLnJlY292ZXJHbHlwaE5hbWUpKHIsZSk7bGV0IGQ7Mz09PW4mJjE9PT1zP2Q9ZVtvXToxPT09biYmMD09PXMmJihkPWMuTWFjUm9tYW5FbmNvZGluZy5pbmRleE9mKG8pKTtpZih2b2lkIDA9PT1kKXtpZighYS5nbHlwaE5hbWVzJiZhLmhhc0luY2x1ZGVkVG9Vbmljb2RlTWFwJiYhKHRoaXMudG9Vbmljb2RlIGluc3RhbmNlb2YgaC5JZGVudGl0eVRvVW5pY29kZU1hcCkpe2NvbnN0IGU9dGhpcy50b1VuaWNvZGUuZ2V0KHQpO2UmJihkPWUuY29kZVBvaW50QXQoMCkpfWlmKHZvaWQgMD09PWQpY29udGludWV9Zm9yKGNvbnN0IGUgb2YgbClpZihlLmNoYXJDb2RlPT09ZCl7RVt0XT1lLmdseXBoSWQ7YnJlYWt9fX1lbHNlIGlmKDA9PT1uKXtmb3IoY29uc3QgZSBvZiBsKUVbZS5jaGFyQ29kZV09ZS5nbHlwaElkO2Q9ITB9ZWxzZSBmb3IoY29uc3QgZSBvZiBsKXtsZXQgdD1lLmNoYXJDb2RlOzM9PT1uJiZ0Pj02MTQ0MCYmdDw9NjE2OTUmJih0Jj0yNTUpO0VbdF09ZS5nbHlwaElkfWlmKGEuZ2x5cGhOYW1lcyYmKHUubGVuZ3RofHx0aGlzLmRpZmZlcmVuY2VzLmxlbmd0aCkpZm9yKGxldCBlPTA7ZTwyNTY7KytlKXtpZighZCYmdm9pZCAwIT09RVtlXSljb250aW51ZTtjb25zdCB0PXRoaXMuZGlmZmVyZW5jZXNbZV18fHVbZV07aWYoIXQpY29udGludWU7Y29uc3Qgcj1hLmdseXBoTmFtZXMuaW5kZXhPZih0KTtyPjAmJmhhc0dseXBoKHIpJiYoRVtlXT1yKX19MD09PUUubGVuZ3RoJiYoRVswXT0wKTtsZXQgTj1rLTE7dnx8KE49MCk7aWYoIWEuY3NzRm9udEluZm8pe2NvbnN0IGU9YWRqdXN0TWFwcGluZyhFLGhhc0dseXBoLE4sdGhpcy50b1VuaWNvZGUpO3RoaXMudG9Gb250Q2hhcj1lLnRvRm9udENoYXI7Zi5jbWFwPXt0YWc6ImNtYXAiLGRhdGE6Y3JlYXRlQ21hcFRhYmxlKGUuY2hhckNvZGVUb0dseXBoSWQsZS50b1VuaWNvZGVFeHRyYU1hcCxrKX07ZlsiT1MvMiJdJiZmdW5jdGlvbiB2YWxpZGF0ZU9TMlRhYmxlKGUsdCl7dC5wb3M9KHQuc3RhcnR8fDApK2Uub2Zmc2V0O2NvbnN0IGE9dC5nZXRVaW50MTYoKTt0LnNraXAoNjApO2NvbnN0IHI9dC5nZXRVaW50MTYoKTtpZihhPDQmJjc2OCZyKXJldHVybiExO2lmKHQuZ2V0VWludDE2KCk+dC5nZXRVaW50MTYoKSlyZXR1cm4hMTt0LnNraXAoNik7aWYoMD09PXQuZ2V0VWludDE2KCkpcmV0dXJuITE7ZS5kYXRhWzhdPWUuZGF0YVs5XT0wO3JldHVybiEwfShmWyJPUy8yIl0sdCl8fChmWyJPUy8yIl09e3RhZzoiT1MvMiIsZGF0YTpjcmVhdGVPUzJUYWJsZShhLGUuY2hhckNvZGVUb0dseXBoSWQsRCl9KX1pZighUyl0cnl7dz1uZXcgeS5TdHJlYW0oZlsiQ0ZGICJdLmRhdGEpO2I9bmV3IG4uQ0ZGUGFyc2VyKHcsYSxpLlNFQUNfQU5BTFlTSVNfRU5BQkxFRCkucGFyc2UoKTtiLmR1cGxpY2F0ZUZpcnN0R2x5cGgoKTtjb25zdCBlPW5ldyBuLkNGRkNvbXBpbGVyKGIpO2ZbIkNGRiAiXS5kYXRhPWUuY29tcGlsZSgpfWNhdGNoeygwLHIud2FybikoIkZhaWxlZCB0byBjb21waWxlIGZvbnQgIithLmxvYWRlZE5hbWUpfWlmKGYubmFtZSl7Y29uc3RbdCxyXT1yZWFkTmFtZVRhYmxlKGYubmFtZSk7Zi5uYW1lLmRhdGE9Y3JlYXRlTmFtZVRhYmxlKGUsdCk7dGhpcy5wc05hbWU9dFswXVs2XXx8bnVsbDthLmNvbXBvc2l0ZXx8ZnVuY3Rpb24gYWRqdXN0VHJ1ZVR5cGVUb1VuaWNvZGUoZSx0LGEpe2lmKGUuaXNJbnRlcm5hbEZvbnQpcmV0dXJuO2lmKGUuaGFzSW5jbHVkZWRUb1VuaWNvZGVNYXApcmV0dXJuO2lmKGUuaGFzRW5jb2RpbmcpcmV0dXJuO2lmKGUudG9Vbmljb2RlIGluc3RhbmNlb2YgaC5JZGVudGl0eVRvVW5pY29kZU1hcClyZXR1cm47aWYoIXQpcmV0dXJuO2lmKDA9PT1hLmxlbmd0aClyZXR1cm47aWYoZS5kZWZhdWx0RW5jb2Rpbmc9PT1jLldpbkFuc2lFbmNvZGluZylyZXR1cm47Zm9yKGNvbnN0IGUgb2YgYSlpZighaXNXaW5OYW1lUmVjb3JkKGUpKXJldHVybjtjb25zdCByPWMuV2luQW5zaUVuY29kaW5nLG49W10saT0oMCxvLmdldEdseXBoc1VuaWNvZGUpKCk7Zm9yKGNvbnN0IGUgaW4gcil7Y29uc3QgdD1yW2VdO2lmKCIiPT09dCljb250aW51ZTtjb25zdCBhPWlbdF07dm9pZCAwIT09YSYmKG5bZV09U3RyaW5nLmZyb21DaGFyQ29kZShhKSl9bi5sZW5ndGg+MCYmZS50b1VuaWNvZGUuYW1lbmQobil9KGEsdGhpcy5pc1N5bWJvbGljRm9udCxyKX1lbHNlIGYubmFtZT17dGFnOiJuYW1lIixkYXRhOmNyZWF0ZU5hbWVUYWJsZSh0aGlzLm5hbWUpfTtjb25zdCBSPW5ldyBtLk9wZW5UeXBlRmlsZUJ1aWxkZXIoZC52ZXJzaW9uKTtmb3IoY29uc3QgZSBpbiBmKVIuYWRkVGFibGUoZSxmW2VdLmRhdGEpO3JldHVybiBSLnRvQXJyYXkoKX1jb252ZXJ0KGUsdCxhKXthLmZpeGVkUGl0Y2g9ITE7YS5idWlsdEluRW5jb2RpbmcmJmZ1bmN0aW9uIGFkanVzdFR5cGUxVG9Vbmljb2RlKGUsdCl7aWYoZS5pc0ludGVybmFsRm9udClyZXR1cm47aWYoZS5oYXNJbmNsdWRlZFRvVW5pY29kZU1hcClyZXR1cm47aWYodD09PWUuZGVmYXVsdEVuY29kaW5nKXJldHVybjtpZihlLnRvVW5pY29kZSBpbnN0YW5jZW9mIGguSWRlbnRpdHlUb1VuaWNvZGVNYXApcmV0dXJuO2NvbnN0IGE9W10scj0oMCxvLmdldEdseXBoc1VuaWNvZGUpKCk7Zm9yKGNvbnN0IG4gaW4gdCl7aWYoZS5oYXNFbmNvZGluZyYmKGUuYmFzZUVuY29kaW5nTmFtZXx8dm9pZCAwIT09ZS5kaWZmZXJlbmNlc1tuXSkpY29udGludWU7Y29uc3QgaT10W25dLG89KDAscy5nZXRVbmljb2RlRm9yR2x5cGgpKGkscik7LTEhPT1vJiYoYVtuXT1TdHJpbmcuZnJvbUNoYXJDb2RlKG8pKX1hLmxlbmd0aD4wJiZlLnRvVW5pY29kZS5hbWVuZChhKX0oYSxhLmJ1aWx0SW5FbmNvZGluZyk7bGV0IG49MTt0IGluc3RhbmNlb2YgdS5DRkZGb250JiYobj10Lm51bUdseXBocy0xKTtjb25zdCBsPXQuZ2V0R2x5cGhNYXBwaW5nKGEpO2xldCBkPW51bGwsZj1sLGc9bnVsbDtpZighYS5jc3NGb250SW5mbyl7ZD1hZGp1c3RNYXBwaW5nKGwsdC5oYXNHbHlwaElkLmJpbmQodCksbix0aGlzLnRvVW5pY29kZSk7dGhpcy50b0ZvbnRDaGFyPWQudG9Gb250Q2hhcjtmPWQuY2hhckNvZGVUb0dseXBoSWQ7Zz1kLnRvVW5pY29kZUV4dHJhTWFwfWNvbnN0IHA9dC5udW1HbHlwaHM7ZnVuY3Rpb24gZ2V0Q2hhckNvZGVzKGUsdCl7bGV0IGE9bnVsbDtmb3IoY29uc3QgciBpbiBlKXQ9PT1lW3JdJiYoYXx8PVtdKS5wdXNoKDB8cik7cmV0dXJuIGF9ZnVuY3Rpb24gY3JlYXRlQ2hhckNvZGUoZSx0KXtmb3IoY29uc3QgYSBpbiBlKWlmKHQ9PT1lW2FdKXJldHVybiAwfGE7ZC5jaGFyQ29kZVRvR2x5cGhJZFtkLm5leHRBdmFpbGFibGVGb250Q2hhckNvZGVdPXQ7cmV0dXJuIGQubmV4dEF2YWlsYWJsZUZvbnRDaGFyQ29kZSsrfWNvbnN0IGI9dC5zZWFjcztpZihkJiZpLlNFQUNfQU5BTFlTSVNfRU5BQkxFRCYmYj8ubGVuZ3RoKXtjb25zdCBlPWEuZm9udE1hdHJpeHx8ci5GT05UX0lERU5USVRZX01BVFJJWCxuPXQuZ2V0Q2hhcnNldCgpLGk9T2JqZWN0LmNyZWF0ZShudWxsKTtmb3IobGV0IHQgaW4gYil7dHw9MDtjb25zdCBhPWJbdF0scj1jLlN0YW5kYXJkRW5jb2RpbmdbYVsyXV0scz1jLlN0YW5kYXJkRW5jb2RpbmdbYVszXV0sbz1uLmluZGV4T2YociksaD1uLmluZGV4T2Yocyk7aWYobzwwfHxoPDApY29udGludWU7Y29uc3QgdT17eDphWzBdKmVbMF0rYVsxXSplWzJdK2VbNF0seTphWzBdKmVbMV0rYVsxXSplWzNdK2VbNV19LGY9Z2V0Q2hhckNvZGVzKGwsdCk7aWYoZilmb3IoY29uc3QgZSBvZiBmKXtjb25zdCB0PWQuY2hhckNvZGVUb0dseXBoSWQsYT1jcmVhdGVDaGFyQ29kZSh0LG8pLHI9Y3JlYXRlQ2hhckNvZGUodCxoKTtpW2VdPXtiYXNlRm9udENoYXJDb2RlOmEsYWNjZW50Rm9udENoYXJDb2RlOnIsYWNjZW50T2Zmc2V0OnV9fX1hLnNlYWNNYXA9aX1jb25zdCB5PTEvKGEuZm9udE1hdHJpeHx8ci5GT05UX0lERU5USVRZX01BVFJJWClbMF0sdz1uZXcgbS5PcGVuVHlwZUZpbGVCdWlsZGVyKCJPVFRPIik7dy5hZGRUYWJsZSgiQ0ZGICIsdC5kYXRhKTt3LmFkZFRhYmxlKCJPUy8yIixjcmVhdGVPUzJUYWJsZShhLGYpKTt3LmFkZFRhYmxlKCJjbWFwIixjcmVhdGVDbWFwVGFibGUoZixnLHApKTt3LmFkZFRhYmxlKCJoZWFkIiwiXDABXDBcMFwwXDAQXDBcMFwwXDBcMF8PPMO1XDBcMCIrc2FmZVN0cmluZzE2KHkpKyJcMFwwXDBcMMKeXHZ+J1wwXDBcMFwwwp5cdn4nXDBcMCIrc2FmZVN0cmluZzE2KGEuZGVzY2VudCkrIg/DvyIrc2FmZVN0cmluZzE2KGEuYXNjZW50KStzdHJpbmcxNihhLml0YWxpY0FuZ2xlPzI6MCkrIlwwEVwwXDBcMFwwXDBcMCIpO3cuYWRkVGFibGUoImhoZWEiLCJcMAFcMFwwIitzYWZlU3RyaW5nMTYoYS5hc2NlbnQpK3NhZmVTdHJpbmcxNihhLmRlc2NlbnQpKyJcMFwww7/Dv1wwXDBcMFwwXDBcMCIrc2FmZVN0cmluZzE2KGEuY2FwSGVpZ2h0KStzYWZlU3RyaW5nMTYoTWF0aC50YW4oYS5pdGFsaWNBbmdsZSkqYS54SGVpZ2h0KSsiXDBcMFwwXDBcMFwwXDBcMFwwXDBcMFwwIitzdHJpbmcxNihwKSk7dy5hZGRUYWJsZSgiaG10eCIsZnVuY3Rpb24gZm9udEZpZWxkc0htdHgoKXtjb25zdCBlPXQuY2hhcnN0cmluZ3MsYT10LmNmZj90LmNmZi53aWR0aHM6bnVsbDtsZXQgcj0iXDBcMFwwXDAiO2ZvcihsZXQgdD0xLG49cDt0PG47dCsrKXtsZXQgbj0wO2lmKGUpe2NvbnN0IGE9ZVt0LTFdO249IndpZHRoImluIGE/YS53aWR0aDowfWVsc2UgYSYmKG49TWF0aC5jZWlsKGFbdF18fDApKTtyKz1zdHJpbmcxNihuKStzdHJpbmcxNigwKX1yZXR1cm4gcn0oKSk7dy5hZGRUYWJsZSgibWF4cCIsIlwwXDBQXDAiK3N0cmluZzE2KHApKTt3LmFkZFRhYmxlKCJuYW1lIixjcmVhdGVOYW1lVGFibGUoZSkpO3cuYWRkVGFibGUoInBvc3QiLGNyZWF0ZVBvc3RUYWJsZShhKSk7cmV0dXJuIHcudG9BcnJheSgpfWdldCBzcGFjZVdpZHRoKCl7Y29uc3QgZT1bInNwYWNlIiwibWludXMiLCJvbmUiLCJpIiwiSSJdO2xldCB0O2Zvcihjb25zdCBhIG9mIGUpe2lmKGEgaW4gdGhpcy53aWR0aHMpe3Q9dGhpcy53aWR0aHNbYV07YnJlYWt9Y29uc3QgZT0oMCxvLmdldEdseXBoc1VuaWNvZGUpKClbYV07bGV0IHI9MDtpZih0aGlzLmNvbXBvc2l0ZSYmdGhpcy5jTWFwLmNvbnRhaW5zKGUpKXtyPXRoaXMuY01hcC5sb29rdXAoZSk7InN0cmluZyI9PXR5cGVvZiByJiYocj1jb252ZXJ0Q2lkU3RyaW5nKGUscikpfSFyJiZ0aGlzLnRvVW5pY29kZSYmKHI9dGhpcy50b1VuaWNvZGUuY2hhckNvZGVPZihlKSk7cjw9MCYmKHI9ZSk7dD10aGlzLndpZHRoc1tyXTtpZih0KWJyZWFrfXJldHVybigwLHIuc2hhZG93KSh0aGlzLCJzcGFjZVdpZHRoIix0fHx0aGlzLmRlZmF1bHRXaWR0aCl9X2NoYXJUb0dseXBoKGUsdD0hMSl7bGV0IGEsbixpLG89dGhpcy5fZ2x5cGhDYWNoZVtlXTtpZihvPy5pc1NwYWNlPT09dClyZXR1cm4gbztsZXQgYz1lO2lmKHRoaXMuY01hcD8uY29udGFpbnMoZSkpe2M9dGhpcy5jTWFwLmxvb2t1cChlKTsic3RyaW5nIj09dHlwZW9mIGMmJihjPWNvbnZlcnRDaWRTdHJpbmcoZSxjKSl9bj10aGlzLndpZHRoc1tjXTsibnVtYmVyIiE9dHlwZW9mIG4mJihuPXRoaXMuZGVmYXVsdFdpZHRoKTtjb25zdCBsPXRoaXMudm1ldHJpY3M/LltjXTtsZXQgaD10aGlzLnRvVW5pY29kZS5nZXQoZSl8fGU7Im51bWJlciI9PXR5cGVvZiBoJiYoaD1TdHJpbmcuZnJvbUNoYXJDb2RlKGgpKTtsZXQgdT12b2lkIDAhPT10aGlzLnRvRm9udENoYXJbZV07YT10aGlzLnRvRm9udENoYXJbZV18fGU7aWYodGhpcy5taXNzaW5nRmlsZSl7Y29uc3QgdD10aGlzLmRpZmZlcmVuY2VzW2VdfHx0aGlzLmRlZmF1bHRFbmNvZGluZ1tlXTsiLm5vdGRlZiIhPT10JiYiIiE9PXR8fCJUeXBlMSIhPT10aGlzLnR5cGV8fChhPTMyKTthPSgwLHMubWFwU3BlY2lhbFVuaWNvZGVWYWx1ZXMpKGEpfXRoaXMuaXNUeXBlM0ZvbnQmJihpPWEpO2xldCBkPW51bGw7aWYodGhpcy5zZWFjTWFwPy5bZV0pe3U9ITA7Y29uc3QgdD10aGlzLnNlYWNNYXBbZV07YT10LmJhc2VGb250Q2hhckNvZGU7ZD17Zm9udENoYXI6U3RyaW5nLmZyb21Db2RlUG9pbnQodC5hY2NlbnRGb250Q2hhckNvZGUpLG9mZnNldDp0LmFjY2VudE9mZnNldH19bGV0IGY9IiI7Im51bWJlciI9PXR5cGVvZiBhJiYoYTw9MTExNDExMT9mPVN0cmluZy5mcm9tQ29kZVBvaW50KGEpOigwLHIud2FybikoYGNoYXJUb0dseXBoIC0gaW52YWxpZCBmb250Q2hhckNvZGU6ICR7YX1gKSk7bz1uZXcgR2x5cGgoZSxmLGgsZCxuLGwsaSx0LHUpO3JldHVybiB0aGlzLl9nbHlwaENhY2hlW2VdPW99Y2hhcnNUb0dseXBocyhlKXtsZXQgdD10aGlzLl9jaGFyc0NhY2hlW2VdO2lmKHQpcmV0dXJuIHQ7dD1bXTtpZih0aGlzLmNNYXApe2NvbnN0IGE9T2JqZWN0LmNyZWF0ZShudWxsKSxyPWUubGVuZ3RoO2xldCBuPTA7Zm9yKDtuPHI7KXt0aGlzLmNNYXAucmVhZENoYXJDb2RlKGUsbixhKTtjb25zdHtjaGFyY29kZTpyLGxlbmd0aDppfT1hO24rPWk7Y29uc3Qgcz10aGlzLl9jaGFyVG9HbHlwaChyLDE9PT1pJiYzMj09PWUuY2hhckNvZGVBdChuLTEpKTt0LnB1c2gocyl9fWVsc2UgZm9yKGxldCBhPTAscj1lLmxlbmd0aDthPHI7KythKXtjb25zdCByPWUuY2hhckNvZGVBdChhKSxuPXRoaXMuX2NoYXJUb0dseXBoKHIsMzI9PT1yKTt0LnB1c2gobil9cmV0dXJuIHRoaXMuX2NoYXJzQ2FjaGVbZV09dH1nZXRDaGFyUG9zaXRpb25zKGUpe2NvbnN0IHQ9W107aWYodGhpcy5jTWFwKXtjb25zdCBhPU9iamVjdC5jcmVhdGUobnVsbCk7bGV0IHI9MDtmb3IoO3I8ZS5sZW5ndGg7KXt0aGlzLmNNYXAucmVhZENoYXJDb2RlKGUscixhKTtjb25zdCBuPWEubGVuZ3RoO3QucHVzaChbcixyK25dKTtyKz1ufX1lbHNlIGZvcihsZXQgYT0wLHI9ZS5sZW5ndGg7YTxyOysrYSl0LnB1c2goW2EsYSsxXSk7cmV0dXJuIHR9Z2V0IGdseXBoQ2FjaGVWYWx1ZXMoKXtyZXR1cm4gT2JqZWN0LnZhbHVlcyh0aGlzLl9nbHlwaENhY2hlKX1lbmNvZGVTdHJpbmcoZSl7Y29uc3QgdD1bXSxhPVtdLGhhc0N1cnJlbnRCdWZFcnJvcnM9KCk9PnQubGVuZ3RoJTI9PTEscj10aGlzLnRvVW5pY29kZSBpbnN0YW5jZW9mIGguSWRlbnRpdHlUb1VuaWNvZGVNYXA/ZT0+dGhpcy50b1VuaWNvZGUuY2hhckNvZGVPZihlKTplPT50aGlzLnRvVW5pY29kZS5jaGFyQ29kZU9mKFN0cmluZy5mcm9tQ29kZVBvaW50KGUpKTtmb3IobGV0IG49MCxpPWUubGVuZ3RoO248aTtuKyspe2NvbnN0IGk9ZS5jb2RlUG9pbnRBdChuKTtpPjU1Mjk1JiYoaTw1NzM0NHx8aT42NTUzMykmJm4rKztpZih0aGlzLnRvVW5pY29kZSl7Y29uc3QgZT1yKGkpO2lmKC0xIT09ZSl7aWYoaGFzQ3VycmVudEJ1ZkVycm9ycygpKXt0LnB1c2goYS5qb2luKCIiKSk7YS5sZW5ndGg9MH1mb3IobGV0IHQ9KHRoaXMuY01hcD90aGlzLmNNYXAuZ2V0Q2hhckNvZGVMZW5ndGgoZSk6MSktMTt0Pj0wO3QtLSlhLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShlPj44KnQmMjU1KSk7Y29udGludWV9fWlmKCFoYXNDdXJyZW50QnVmRXJyb3JzKCkpe3QucHVzaChhLmpvaW4oIiIpKTthLmxlbmd0aD0wfWEucHVzaChTdHJpbmcuZnJvbUNvZGVQb2ludChpKSl9dC5wdXNoKGEuam9pbigiIikpO3JldHVybiB0fX07dC5FcnJvckZvbnQ9Y2xhc3MgRXJyb3JGb250e2NvbnN0cnVjdG9yKGUpe3RoaXMuZXJyb3I9ZTt0aGlzLmxvYWRlZE5hbWU9ImdfZm9udF9lcnJvciI7dGhpcy5taXNzaW5nRmlsZT0hMH1jaGFyc1RvR2x5cGhzKCl7cmV0dXJuW119ZW5jb2RlU3RyaW5nKGUpe3JldHVybltlXX1leHBvcnREYXRhKGU9ITEpe3JldHVybntlcnJvcjp0aGlzLmVycm9yfX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuQ0ZGVG9wRGljdD10LkNGRlN0cmluZ3M9dC5DRkZTdGFuZGFyZFN0cmluZ3M9dC5DRkZQcml2YXRlRGljdD10LkNGRlBhcnNlcj10LkNGRkluZGV4PXQuQ0ZGSGVhZGVyPXQuQ0ZGRkRTZWxlY3Q9dC5DRkZDb21waWxlcj10LkNGRkNoYXJzZXQ9dC5DRkY9dm9pZCAwO3ZhciByPWEoMiksbj1hKDM2KSxpPWEoMzcpO2NvbnN0IHM9WyIubm90ZGVmIiwic3BhY2UiLCJleGNsYW0iLCJxdW90ZWRibCIsIm51bWJlcnNpZ24iLCJkb2xsYXIiLCJwZXJjZW50IiwiYW1wZXJzYW5kIiwicXVvdGVyaWdodCIsInBhcmVubGVmdCIsInBhcmVucmlnaHQiLCJhc3RlcmlzayIsInBsdXMiLCJjb21tYSIsImh5cGhlbiIsInBlcmlvZCIsInNsYXNoIiwiemVybyIsIm9uZSIsInR3byIsInRocmVlIiwiZm91ciIsImZpdmUiLCJzaXgiLCJzZXZlbiIsImVpZ2h0IiwibmluZSIsImNvbG9uIiwic2VtaWNvbG9uIiwibGVzcyIsImVxdWFsIiwiZ3JlYXRlciIsInF1ZXN0aW9uIiwiYXQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJHIiwiSCIsIkkiLCJKIiwiSyIsIkwiLCJNIiwiTiIsIk8iLCJQIiwiUSIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiVyIsIlgiLCJZIiwiWiIsImJyYWNrZXRsZWZ0IiwiYmFja3NsYXNoIiwiYnJhY2tldHJpZ2h0IiwiYXNjaWljaXJjdW0iLCJ1bmRlcnNjb3JlIiwicXVvdGVsZWZ0IiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiZyIsImgiLCJpIiwiaiIsImsiLCJsIiwibSIsIm4iLCJvIiwicCIsInEiLCJyIiwicyIsInQiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJicmFjZWxlZnQiLCJiYXIiLCJicmFjZXJpZ2h0IiwiYXNjaWl0aWxkZSIsImV4Y2xhbWRvd24iLCJjZW50Iiwic3RlcmxpbmciLCJmcmFjdGlvbiIsInllbiIsImZsb3JpbiIsInNlY3Rpb24iLCJjdXJyZW5jeSIsInF1b3Rlc2luZ2xlIiwicXVvdGVkYmxsZWZ0IiwiZ3VpbGxlbW90bGVmdCIsImd1aWxzaW5nbGxlZnQiLCJndWlsc2luZ2xyaWdodCIsImZpIiwiZmwiLCJlbmRhc2giLCJkYWdnZXIiLCJkYWdnZXJkYmwiLCJwZXJpb2RjZW50ZXJlZCIsInBhcmFncmFwaCIsImJ1bGxldCIsInF1b3Rlc2luZ2xiYXNlIiwicXVvdGVkYmxiYXNlIiwicXVvdGVkYmxyaWdodCIsImd1aWxsZW1vdHJpZ2h0IiwiZWxsaXBzaXMiLCJwZXJ0aG91c2FuZCIsInF1ZXN0aW9uZG93biIsImdyYXZlIiwiYWN1dGUiLCJjaXJjdW1mbGV4IiwidGlsZGUiLCJtYWNyb24iLCJicmV2ZSIsImRvdGFjY2VudCIsImRpZXJlc2lzIiwicmluZyIsImNlZGlsbGEiLCJodW5nYXJ1bWxhdXQiLCJvZ29uZWsiLCJjYXJvbiIsImVtZGFzaCIsIkFFIiwib3JkZmVtaW5pbmUiLCJMc2xhc2giLCJPc2xhc2giLCJPRSIsIm9yZG1hc2N1bGluZSIsImFlIiwiZG90bGVzc2kiLCJsc2xhc2giLCJvc2xhc2giLCJvZSIsImdlcm1hbmRibHMiLCJvbmVzdXBlcmlvciIsImxvZ2ljYWxub3QiLCJtdSIsInRyYWRlbWFyayIsIkV0aCIsIm9uZWhhbGYiLCJwbHVzbWludXMiLCJUaG9ybiIsIm9uZXF1YXJ0ZXIiLCJkaXZpZGUiLCJicm9rZW5iYXIiLCJkZWdyZWUiLCJ0aG9ybiIsInRocmVlcXVhcnRlcnMiLCJ0d29zdXBlcmlvciIsInJlZ2lzdGVyZWQiLCJtaW51cyIsImV0aCIsIm11bHRpcGx5IiwidGhyZWVzdXBlcmlvciIsImNvcHlyaWdodCIsIkFhY3V0ZSIsIkFjaXJjdW1mbGV4IiwiQWRpZXJlc2lzIiwiQWdyYXZlIiwiQXJpbmciLCJBdGlsZGUiLCJDY2VkaWxsYSIsIkVhY3V0ZSIsIkVjaXJjdW1mbGV4IiwiRWRpZXJlc2lzIiwiRWdyYXZlIiwiSWFjdXRlIiwiSWNpcmN1bWZsZXgiLCJJZGllcmVzaXMiLCJJZ3JhdmUiLCJOdGlsZGUiLCJPYWN1dGUiLCJPY2lyY3VtZmxleCIsIk9kaWVyZXNpcyIsIk9ncmF2ZSIsIk90aWxkZSIsIlNjYXJvbiIsIlVhY3V0ZSIsIlVjaXJjdW1mbGV4IiwiVWRpZXJlc2lzIiwiVWdyYXZlIiwiWWFjdXRlIiwiWWRpZXJlc2lzIiwiWmNhcm9uIiwiYWFjdXRlIiwiYWNpcmN1bWZsZXgiLCJhZGllcmVzaXMiLCJhZ3JhdmUiLCJhcmluZyIsImF0aWxkZSIsImNjZWRpbGxhIiwiZWFjdXRlIiwiZWNpcmN1bWZsZXgiLCJlZGllcmVzaXMiLCJlZ3JhdmUiLCJpYWN1dGUiLCJpY2lyY3VtZmxleCIsImlkaWVyZXNpcyIsImlncmF2ZSIsIm50aWxkZSIsIm9hY3V0ZSIsIm9jaXJjdW1mbGV4Iiwib2RpZXJlc2lzIiwib2dyYXZlIiwib3RpbGRlIiwic2Nhcm9uIiwidWFjdXRlIiwidWNpcmN1bWZsZXgiLCJ1ZGllcmVzaXMiLCJ1Z3JhdmUiLCJ5YWN1dGUiLCJ5ZGllcmVzaXMiLCJ6Y2Fyb24iLCJleGNsYW1zbWFsbCIsIkh1bmdhcnVtbGF1dHNtYWxsIiwiZG9sbGFyb2xkc3R5bGUiLCJkb2xsYXJzdXBlcmlvciIsImFtcGVyc2FuZHNtYWxsIiwiQWN1dGVzbWFsbCIsInBhcmVubGVmdHN1cGVyaW9yIiwicGFyZW5yaWdodHN1cGVyaW9yIiwidHdvZG90ZW5sZWFkZXIiLCJvbmVkb3RlbmxlYWRlciIsInplcm9vbGRzdHlsZSIsIm9uZW9sZHN0eWxlIiwidHdvb2xkc3R5bGUiLCJ0aHJlZW9sZHN0eWxlIiwiZm91cm9sZHN0eWxlIiwiZml2ZW9sZHN0eWxlIiwic2l4b2xkc3R5bGUiLCJzZXZlbm9sZHN0eWxlIiwiZWlnaHRvbGRzdHlsZSIsIm5pbmVvbGRzdHlsZSIsImNvbW1hc3VwZXJpb3IiLCJ0aHJlZXF1YXJ0ZXJzZW1kYXNoIiwicGVyaW9kc3VwZXJpb3IiLCJxdWVzdGlvbnNtYWxsIiwiYXN1cGVyaW9yIiwiYnN1cGVyaW9yIiwiY2VudHN1cGVyaW9yIiwiZHN1cGVyaW9yIiwiZXN1cGVyaW9yIiwiaXN1cGVyaW9yIiwibHN1cGVyaW9yIiwibXN1cGVyaW9yIiwibnN1cGVyaW9yIiwib3N1cGVyaW9yIiwicnN1cGVyaW9yIiwic3N1cGVyaW9yIiwidHN1cGVyaW9yIiwiZmYiLCJmZmkiLCJmZmwiLCJwYXJlbmxlZnRpbmZlcmlvciIsInBhcmVucmlnaHRpbmZlcmlvciIsIkNpcmN1bWZsZXhzbWFsbCIsImh5cGhlbnN1cGVyaW9yIiwiR3JhdmVzbWFsbCIsIkFzbWFsbCIsIkJzbWFsbCIsIkNzbWFsbCIsIkRzbWFsbCIsIkVzbWFsbCIsIkZzbWFsbCIsIkdzbWFsbCIsIkhzbWFsbCIsIklzbWFsbCIsIkpzbWFsbCIsIktzbWFsbCIsIkxzbWFsbCIsIk1zbWFsbCIsIk5zbWFsbCIsIk9zbWFsbCIsIlBzbWFsbCIsIlFzbWFsbCIsIlJzbWFsbCIsIlNzbWFsbCIsIlRzbWFsbCIsIlVzbWFsbCIsIlZzbWFsbCIsIldzbWFsbCIsIlhzbWFsbCIsIllzbWFsbCIsIlpzbWFsbCIsImNvbG9ubW9uZXRhcnkiLCJvbmVmaXR0ZWQiLCJydXBpYWgiLCJUaWxkZXNtYWxsIiwiZXhjbGFtZG93bnNtYWxsIiwiY2VudG9sZHN0eWxlIiwiTHNsYXNoc21hbGwiLCJTY2Fyb25zbWFsbCIsIlpjYXJvbnNtYWxsIiwiRGllcmVzaXNzbWFsbCIsIkJyZXZlc21hbGwiLCJDYXJvbnNtYWxsIiwiRG90YWNjZW50c21hbGwiLCJNYWNyb25zbWFsbCIsImZpZ3VyZWRhc2giLCJoeXBoZW5pbmZlcmlvciIsIk9nb25la3NtYWxsIiwiUmluZ3NtYWxsIiwiQ2VkaWxsYXNtYWxsIiwicXVlc3Rpb25kb3duc21hbGwiLCJvbmVlaWdodGgiLCJ0aHJlZWVpZ2h0aHMiLCJmaXZlZWlnaHRocyIsInNldmVuZWlnaHRocyIsIm9uZXRoaXJkIiwidHdvdGhpcmRzIiwiemVyb3N1cGVyaW9yIiwiZm91cnN1cGVyaW9yIiwiZml2ZXN1cGVyaW9yIiwic2l4c3VwZXJpb3IiLCJzZXZlbnN1cGVyaW9yIiwiZWlnaHRzdXBlcmlvciIsIm5pbmVzdXBlcmlvciIsInplcm9pbmZlcmlvciIsIm9uZWluZmVyaW9yIiwidHdvaW5mZXJpb3IiLCJ0aHJlZWluZmVyaW9yIiwiZm91cmluZmVyaW9yIiwiZml2ZWluZmVyaW9yIiwic2l4aW5mZXJpb3IiLCJzZXZlbmluZmVyaW9yIiwiZWlnaHRpbmZlcmlvciIsIm5pbmVpbmZlcmlvciIsImNlbnRpbmZlcmlvciIsImRvbGxhcmluZmVyaW9yIiwicGVyaW9kaW5mZXJpb3IiLCJjb21tYWluZmVyaW9yIiwiQWdyYXZlc21hbGwiLCJBYWN1dGVzbWFsbCIsIkFjaXJjdW1mbGV4c21hbGwiLCJBdGlsZGVzbWFsbCIsIkFkaWVyZXNpc3NtYWxsIiwiQXJpbmdzbWFsbCIsIkFFc21hbGwiLCJDY2VkaWxsYXNtYWxsIiwiRWdyYXZlc21hbGwiLCJFYWN1dGVzbWFsbCIsIkVjaXJjdW1mbGV4c21hbGwiLCJFZGllcmVzaXNzbWFsbCIsIklncmF2ZXNtYWxsIiwiSWFjdXRlc21hbGwiLCJJY2lyY3VtZmxleHNtYWxsIiwiSWRpZXJlc2lzc21hbGwiLCJFdGhzbWFsbCIsIk50aWxkZXNtYWxsIiwiT2dyYXZlc21hbGwiLCJPYWN1dGVzbWFsbCIsIk9jaXJjdW1mbGV4c21hbGwiLCJPdGlsZGVzbWFsbCIsIk9kaWVyZXNpc3NtYWxsIiwiT0VzbWFsbCIsIk9zbGFzaHNtYWxsIiwiVWdyYXZlc21hbGwiLCJVYWN1dGVzbWFsbCIsIlVjaXJjdW1mbGV4c21hbGwiLCJVZGllcmVzaXNzbWFsbCIsIllhY3V0ZXNtYWxsIiwiVGhvcm5zbWFsbCIsIllkaWVyZXNpc3NtYWxsIiwiMDAxLjAwMCIsIjAwMS4wMDEiLCIwMDEuMDAyIiwiMDAxLjAwMyIsIkJsYWNrIiwiQm9sZCIsIkJvb2siLCJMaWdodCIsIk1lZGl1bSIsIlJlZ3VsYXIiLCJSb21hbiIsIlNlbWlib2xkIl07dC5DRkZTdGFuZGFyZFN0cmluZ3M9cztjb25zdCBvPTM5MSxjPVtudWxsLHtpZDoiaHN0ZW0iLG1pbjoyLHN0YWNrQ2xlYXJpbmc6ITAsc3RlbTohMH0sbnVsbCx7aWQ6InZzdGVtIixtaW46MixzdGFja0NsZWFyaW5nOiEwLHN0ZW06ITB9LHtpZDoidm1vdmV0byIsbWluOjEsc3RhY2tDbGVhcmluZzohMH0se2lkOiJybGluZXRvIixtaW46MixyZXNldFN0YWNrOiEwfSx7aWQ6ImhsaW5ldG8iLG1pbjoxLHJlc2V0U3RhY2s6ITB9LHtpZDoidmxpbmV0byIsbWluOjEscmVzZXRTdGFjazohMH0se2lkOiJycmN1cnZldG8iLG1pbjo2LHJlc2V0U3RhY2s6ITB9LG51bGwse2lkOiJjYWxsc3ViciIsbWluOjEsdW5kZWZTdGFjazohMH0se2lkOiJyZXR1cm4iLG1pbjowLHVuZGVmU3RhY2s6ITB9LG51bGwsbnVsbCx7aWQ6ImVuZGNoYXIiLG1pbjowLHN0YWNrQ2xlYXJpbmc6ITB9LG51bGwsbnVsbCxudWxsLHtpZDoiaHN0ZW1obSIsbWluOjIsc3RhY2tDbGVhcmluZzohMCxzdGVtOiEwfSx7aWQ6ImhpbnRtYXNrIixtaW46MCxzdGFja0NsZWFyaW5nOiEwfSx7aWQ6ImNudHJtYXNrIixtaW46MCxzdGFja0NsZWFyaW5nOiEwfSx7aWQ6InJtb3ZldG8iLG1pbjoyLHN0YWNrQ2xlYXJpbmc6ITB9LHtpZDoiaG1vdmV0byIsbWluOjEsc3RhY2tDbGVhcmluZzohMH0se2lkOiJ2c3RlbWhtIixtaW46MixzdGFja0NsZWFyaW5nOiEwLHN0ZW06ITB9LHtpZDoicmN1cnZlbGluZSIsbWluOjgscmVzZXRTdGFjazohMH0se2lkOiJybGluZWN1cnZlIixtaW46OCxyZXNldFN0YWNrOiEwfSx7aWQ6InZ2Y3VydmV0byIsbWluOjQscmVzZXRTdGFjazohMH0se2lkOiJoaGN1cnZldG8iLG1pbjo0LHJlc2V0U3RhY2s6ITB9LG51bGwse2lkOiJjYWxsZ3N1YnIiLG1pbjoxLHVuZGVmU3RhY2s6ITB9LHtpZDoidmhjdXJ2ZXRvIixtaW46NCxyZXNldFN0YWNrOiEwfSx7aWQ6Imh2Y3VydmV0byIsbWluOjQscmVzZXRTdGFjazohMH1dLGw9W251bGwsbnVsbCxudWxsLHtpZDoiYW5kIixtaW46MixzdGFja0RlbHRhOi0xfSx7aWQ6Im9yIixtaW46MixzdGFja0RlbHRhOi0xfSx7aWQ6Im5vdCIsbWluOjEsc3RhY2tEZWx0YTowfSxudWxsLG51bGwsbnVsbCx7aWQ6ImFicyIsbWluOjEsc3RhY2tEZWx0YTowfSx7aWQ6ImFkZCIsbWluOjIsc3RhY2tEZWx0YTotMSxzdGFja0ZuKGUsdCl7ZVt0LTJdPWVbdC0yXStlW3QtMV19fSx7aWQ6InN1YiIsbWluOjIsc3RhY2tEZWx0YTotMSxzdGFja0ZuKGUsdCl7ZVt0LTJdPWVbdC0yXS1lW3QtMV19fSx7aWQ6ImRpdiIsbWluOjIsc3RhY2tEZWx0YTotMSxzdGFja0ZuKGUsdCl7ZVt0LTJdPWVbdC0yXS9lW3QtMV19fSxudWxsLHtpZDoibmVnIixtaW46MSxzdGFja0RlbHRhOjAsc3RhY2tGbihlLHQpe2VbdC0xXT0tZVt0LTFdfX0se2lkOiJlcSIsbWluOjIsc3RhY2tEZWx0YTotMX0sbnVsbCxudWxsLHtpZDoiZHJvcCIsbWluOjEsc3RhY2tEZWx0YTotMX0sbnVsbCx7aWQ6InB1dCIsbWluOjIsc3RhY2tEZWx0YTotMn0se2lkOiJnZXQiLG1pbjoxLHN0YWNrRGVsdGE6MH0se2lkOiJpZmVsc2UiLG1pbjo0LHN0YWNrRGVsdGE6LTN9LHtpZDoicmFuZG9tIixtaW46MCxzdGFja0RlbHRhOjF9LHtpZDoibXVsIixtaW46MixzdGFja0RlbHRhOi0xLHN0YWNrRm4oZSx0KXtlW3QtMl09ZVt0LTJdKmVbdC0xXX19LG51bGwse2lkOiJzcXJ0IixtaW46MSxzdGFja0RlbHRhOjB9LHtpZDoiZHVwIixtaW46MSxzdGFja0RlbHRhOjF9LHtpZDoiZXhjaCIsbWluOjIsc3RhY2tEZWx0YTowfSx7aWQ6ImluZGV4IixtaW46MixzdGFja0RlbHRhOjB9LHtpZDoicm9sbCIsbWluOjMsc3RhY2tEZWx0YTotMn0sbnVsbCxudWxsLG51bGwse2lkOiJoZmxleCIsbWluOjcscmVzZXRTdGFjazohMH0se2lkOiJmbGV4IixtaW46MTMscmVzZXRTdGFjazohMH0se2lkOiJoZmxleDEiLG1pbjo5LHJlc2V0U3RhY2s6ITB9LHtpZDoiZmxleDEiLG1pbjoxMSxyZXNldFN0YWNrOiEwfV07dC5DRkZQYXJzZXI9Y2xhc3MgQ0ZGUGFyc2Vye2NvbnN0cnVjdG9yKGUsdCxhKXt0aGlzLmJ5dGVzPWUuZ2V0Qnl0ZXMoKTt0aGlzLnByb3BlcnRpZXM9dDt0aGlzLnNlYWNBbmFseXNpc0VuYWJsZWQ9ISFhfXBhcnNlKCl7Y29uc3QgZT10aGlzLnByb3BlcnRpZXMsdD1uZXcgQ0ZGO3RoaXMuY2ZmPXQ7Y29uc3QgYT10aGlzLnBhcnNlSGVhZGVyKCkscj10aGlzLnBhcnNlSW5kZXgoYS5lbmRQb3MpLG49dGhpcy5wYXJzZUluZGV4KHIuZW5kUG9zKSxpPXRoaXMucGFyc2VJbmRleChuLmVuZFBvcykscz10aGlzLnBhcnNlSW5kZXgoaS5lbmRQb3MpLG89dGhpcy5wYXJzZURpY3Qobi5vYmouZ2V0KDApKSxjPXRoaXMuY3JlYXRlRGljdChDRkZUb3BEaWN0LG8sdC5zdHJpbmdzKTt0LmhlYWRlcj1hLm9iajt0Lm5hbWVzPXRoaXMucGFyc2VOYW1lSW5kZXgoci5vYmopO3Quc3RyaW5ncz10aGlzLnBhcnNlU3RyaW5nSW5kZXgoaS5vYmopO3QudG9wRGljdD1jO3QuZ2xvYmFsU3VickluZGV4PXMub2JqO3RoaXMucGFyc2VQcml2YXRlRGljdCh0LnRvcERpY3QpO3QuaXNDSURGb250PWMuaGFzTmFtZSgiUk9TIik7Y29uc3QgbD1jLmdldEJ5TmFtZSgiQ2hhclN0cmluZ3MiKSxoPXRoaXMucGFyc2VJbmRleChsKS5vYmosdT1jLmdldEJ5TmFtZSgiRm9udE1hdHJpeCIpO3UmJihlLmZvbnRNYXRyaXg9dSk7Y29uc3QgZD1jLmdldEJ5TmFtZSgiRm9udEJCb3giKTtpZihkKXtlLmFzY2VudD1NYXRoLm1heChkWzNdLGRbMV0pO2UuZGVzY2VudD1NYXRoLm1pbihkWzFdLGRbM10pO2UuYXNjZW50U2NhbGVkPSEwfWxldCBmLGc7aWYodC5pc0NJREZvbnQpe2NvbnN0IGU9dGhpcy5wYXJzZUluZGV4KGMuZ2V0QnlOYW1lKCJGREFycmF5IikpLm9iajtmb3IobGV0IGE9MCxyPWUuY291bnQ7YTxyOysrYSl7Y29uc3Qgcj1lLmdldChhKSxuPXRoaXMuY3JlYXRlRGljdChDRkZUb3BEaWN0LHRoaXMucGFyc2VEaWN0KHIpLHQuc3RyaW5ncyk7dGhpcy5wYXJzZVByaXZhdGVEaWN0KG4pO3QuZmRBcnJheS5wdXNoKG4pfWc9bnVsbDtmPXRoaXMucGFyc2VDaGFyc2V0cyhjLmdldEJ5TmFtZSgiY2hhcnNldCIpLGguY291bnQsdC5zdHJpbmdzLCEwKTt0LmZkU2VsZWN0PXRoaXMucGFyc2VGRFNlbGVjdChjLmdldEJ5TmFtZSgiRkRTZWxlY3QiKSxoLmNvdW50KX1lbHNle2Y9dGhpcy5wYXJzZUNoYXJzZXRzKGMuZ2V0QnlOYW1lKCJjaGFyc2V0IiksaC5jb3VudCx0LnN0cmluZ3MsITEpO2c9dGhpcy5wYXJzZUVuY29kaW5nKGMuZ2V0QnlOYW1lKCJFbmNvZGluZyIpLGUsdC5zdHJpbmdzLGYuY2hhcnNldCl9dC5jaGFyc2V0PWY7dC5lbmNvZGluZz1nO2NvbnN0IHA9dGhpcy5wYXJzZUNoYXJTdHJpbmdzKHtjaGFyU3RyaW5nczpoLGxvY2FsU3VickluZGV4OmMucHJpdmF0ZURpY3Quc3VicnNJbmRleCxnbG9iYWxTdWJySW5kZXg6cy5vYmosZmRTZWxlY3Q6dC5mZFNlbGVjdCxmZEFycmF5OnQuZmRBcnJheSxwcml2YXRlRGljdDpjLnByaXZhdGVEaWN0fSk7dC5jaGFyU3RyaW5ncz1wLmNoYXJTdHJpbmdzO3Quc2VhY3M9cC5zZWFjczt0LndpZHRocz1wLndpZHRocztyZXR1cm4gdH1wYXJzZUhlYWRlcigpe2xldCBlPXRoaXMuYnl0ZXM7Y29uc3QgdD1lLmxlbmd0aDtsZXQgYT0wO2Zvcig7YTx0JiYxIT09ZVthXTspKythO2lmKGE+PXQpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgQ0ZGIGhlYWRlciIpO2lmKDAhPT1hKXsoMCxyLmluZm8pKCJjZmYgZGF0YSBpcyBzaGlmdGVkIik7ZT1lLnN1YmFycmF5KGEpO3RoaXMuYnl0ZXM9ZX1jb25zdCBuPWVbMF0saT1lWzFdLHM9ZVsyXSxvPWVbM107cmV0dXJue29iajpuZXcgQ0ZGSGVhZGVyKG4saSxzLG8pLGVuZFBvczpzfX1wYXJzZURpY3QoZSl7bGV0IHQ9MDtmdW5jdGlvbiBwYXJzZU9wZXJhbmQoKXtsZXQgYT1lW3QrK107aWYoMzA9PT1hKXJldHVybiBmdW5jdGlvbiBwYXJzZUZsb2F0T3BlcmFuZCgpe2xldCBhPSIiO2NvbnN0IHI9MTUsbj1bIjAiLCIxIiwiMiIsIjMiLCI0IiwiNSIsIjYiLCI3IiwiOCIsIjkiLCIuIiwiRSIsIkUtIixudWxsLCItIl0saT1lLmxlbmd0aDtmb3IoO3Q8aTspe2NvbnN0IGk9ZVt0KytdLHM9aT4+NCxvPTE1Jmk7aWYocz09PXIpYnJlYWs7YSs9bltzXTtpZihvPT09cilicmVhazthKz1uW29dfXJldHVybiBwYXJzZUZsb2F0KGEpfSgpO2lmKDI4PT09YSl7YT1lW3QrK107YT0oYTw8MjR8ZVt0KytdPDwxNik+PjE2O3JldHVybiBhfWlmKDI5PT09YSl7YT1lW3QrK107YT1hPDw4fGVbdCsrXTthPWE8PDh8ZVt0KytdO2E9YTw8OHxlW3QrK107cmV0dXJuIGF9aWYoYT49MzImJmE8PTI0NilyZXR1cm4gYS0xMzk7aWYoYT49MjQ3JiZhPD0yNTApcmV0dXJuIDI1NiooYS0yNDcpK2VbdCsrXSsxMDg7aWYoYT49MjUxJiZhPD0yNTQpcmV0dXJuLTI1NiooYS0yNTEpLWVbdCsrXS0xMDg7KDAsci53YXJuKSgnQ0ZGUGFyc2VyX3BhcnNlRGljdDogIicrYSsnIiBpcyBhIHJlc2VydmVkIGNvbW1hbmQuJyk7cmV0dXJuIE5hTn1sZXQgYT1bXTtjb25zdCBuPVtdO3Q9MDtjb25zdCBpPWUubGVuZ3RoO2Zvcig7dDxpOyl7bGV0IHI9ZVt0XTtpZihyPD0yMSl7MTI9PT1yJiYocj1yPDw4fGVbKyt0XSk7bi5wdXNoKFtyLGFdKTthPVtdOysrdH1lbHNlIGEucHVzaChwYXJzZU9wZXJhbmQoKSl9cmV0dXJuIG59cGFyc2VJbmRleChlKXtjb25zdCB0PW5ldyBDRkZJbmRleCxhPXRoaXMuYnl0ZXMscj1hW2UrK108PDh8YVtlKytdLG49W107bGV0IGkscyxvPWU7aWYoMCE9PXIpe2NvbnN0IHQ9YVtlKytdLGM9ZSsocisxKSp0LTE7Zm9yKGk9MCxzPXIrMTtpPHM7KytpKXtsZXQgcj0wO2ZvcihsZXQgbj0wO248dDsrK24pe3I8PD04O3IrPWFbZSsrXX1uLnB1c2goYytyKX1vPW5bcl19Zm9yKGk9MCxzPW4ubGVuZ3RoLTE7aTxzOysraSl7Y29uc3QgZT1uW2ldLHI9bltpKzFdO3QuYWRkKGEuc3ViYXJyYXkoZSxyKSl9cmV0dXJue29iajp0LGVuZFBvczpvfX1wYXJzZU5hbWVJbmRleChlKXtjb25zdCB0PVtdO2ZvcihsZXQgYT0wLG49ZS5jb3VudDthPG47KythKXtjb25zdCBuPWUuZ2V0KGEpO3QucHVzaCgoMCxyLmJ5dGVzVG9TdHJpbmcpKG4pKX1yZXR1cm4gdH1wYXJzZVN0cmluZ0luZGV4KGUpe2NvbnN0IHQ9bmV3IENGRlN0cmluZ3M7Zm9yKGxldCBhPTAsbj1lLmNvdW50O2E8bjsrK2Epe2NvbnN0IG49ZS5nZXQoYSk7dC5hZGQoKDAsci5ieXRlc1RvU3RyaW5nKShuKSl9cmV0dXJuIHR9Y3JlYXRlRGljdChlLHQsYSl7Y29uc3Qgcj1uZXcgZShhKTtmb3IoY29uc3RbZSxhXW9mIHQpci5zZXRCeUtleShlLGEpO3JldHVybiByfXBhcnNlQ2hhclN0cmluZyhlLHQsYSxuKXtpZighdHx8ZS5jYWxsRGVwdGg+MTApcmV0dXJuITE7bGV0IGk9ZS5zdGFja1NpemU7Y29uc3Qgcz1lLnN0YWNrO2xldCBvPXQubGVuZ3RoO2ZvcihsZXQgaD0wO2g8bzspe2NvbnN0IHU9dFtoKytdO2xldCBkPW51bGw7aWYoMTI9PT11KXtjb25zdCBlPXRbaCsrXTtpZigwPT09ZSl7dFtoLTJdPTEzOTt0W2gtMV09MjI7aT0wfWVsc2UgZD1sW2VdfWVsc2UgaWYoMjg9PT11KXtzW2ldPSh0W2hdPDwyNHx0W2grMV08PDE2KT4+MTY7aCs9MjtpKyt9ZWxzZSBpZigxND09PXUpe2lmKGk+PTQpe2ktPTQ7aWYodGhpcy5zZWFjQW5hbHlzaXNFbmFibGVkKXtlLnNlYWM9cy5zbGljZShpLGkrNCk7cmV0dXJuITF9fWQ9Y1t1XX1lbHNlIGlmKHU+PTMyJiZ1PD0yNDYpe3NbaV09dS0xMzk7aSsrfWVsc2UgaWYodT49MjQ3JiZ1PD0yNTQpe3NbaV09dTwyNTE/KHUtMjQ3PDw4KSt0W2hdKzEwODotKHUtMjUxPDw4KS10W2hdLTEwODtoKys7aSsrfWVsc2UgaWYoMjU1PT09dSl7c1tpXT0odFtoXTw8MjR8dFtoKzFdPDwxNnx0W2grMl08PDh8dFtoKzNdKS82NTUzNjtoKz00O2krK31lbHNlIGlmKDE5PT09dXx8MjA9PT11KXtlLmhpbnRzKz1pPj4xO2lmKDA9PT1lLmhpbnRzKXt0LmNvcHlXaXRoaW4oaC0xLGgsLTEpO2gtPTE7by09MTtjb250aW51ZX1oKz1lLmhpbnRzKzc+PjM7aSU9MjtkPWNbdV19ZWxzZXtpZigxMD09PXV8fDI5PT09dSl7Y29uc3QgdD0xMD09PXU/YTpuO2lmKCF0KXtkPWNbdV07KDAsci53YXJuKSgiTWlzc2luZyBzdWJyc0luZGV4IGZvciAiK2QuaWQpO3JldHVybiExfWxldCBvPTMyNzY4O3QuY291bnQ8MTI0MD9vPTEwNzp0LmNvdW50PDMzOTAwJiYobz0xMTMxKTtjb25zdCBsPXNbLS1pXStvO2lmKGw8MHx8bD49dC5jb3VudHx8aXNOYU4obCkpe2Q9Y1t1XTsoMCxyLndhcm4pKCJPdXQgb2YgYm91bmRzIHN1YnJJbmRleCBmb3IgIitkLmlkKTtyZXR1cm4hMX1lLnN0YWNrU2l6ZT1pO2UuY2FsbERlcHRoKys7aWYoIXRoaXMucGFyc2VDaGFyU3RyaW5nKGUsdC5nZXQobCksYSxuKSlyZXR1cm4hMTtlLmNhbGxEZXB0aC0tO2k9ZS5zdGFja1NpemU7Y29udGludWV9aWYoMTE9PT11KXtlLnN0YWNrU2l6ZT1pO3JldHVybiEwfWlmKDA9PT11JiZoPT09dC5sZW5ndGgpe3RbaC0xXT0xNDtkPWNbMTRdfWVsc2V7aWYoOT09PXUpe3QuY29weVdpdGhpbihoLTEsaCwtMSk7aC09MTtvLT0xO2NvbnRpbnVlfWQ9Y1t1XX19aWYoZCl7aWYoZC5zdGVtKXtlLmhpbnRzKz1pPj4xO2lmKDM9PT11fHwyMz09PXUpZS5oYXNWU3RlbXM9ITA7ZWxzZSBpZihlLmhhc1ZTdGVtcyYmKDE9PT11fHwxOD09PXUpKXsoMCxyLndhcm4pKCJDRkYgc3RlbSBoaW50cyBhcmUgaW4gd3Jvbmcgb3JkZXIiKTt0W2gtMV09MT09PXU/MzoyM319aWYoIm1pbiJpbiBkJiYhZS51bmRlZlN0YWNrJiZpPGQubWluKXsoMCxyLndhcm4pKCJOb3QgZW5vdWdoIHBhcmFtZXRlcnMgZm9yICIrZC5pZCsiOyBhY3R1YWw6ICIraSsiLCBleHBlY3RlZDogIitkLm1pbik7aWYoMD09PWkpe3RbaC0xXT0xNDtyZXR1cm4hMH1yZXR1cm4hMX1pZihlLmZpcnN0U3RhY2tDbGVhcmluZyYmZC5zdGFja0NsZWFyaW5nKXtlLmZpcnN0U3RhY2tDbGVhcmluZz0hMTtpLT1kLm1pbjtpPj0yJiZkLnN0ZW0/aSU9MjppPjEmJigwLHIud2FybikoIkZvdW5kIHRvbyBtYW55IHBhcmFtZXRlcnMgZm9yIHN0YWNrLWNsZWFyaW5nIGNvbW1hbmQiKTtpPjAmJihlLndpZHRoPXNbaS0xXSl9aWYoInN0YWNrRGVsdGEiaW4gZCl7InN0YWNrRm4iaW4gZCYmZC5zdGFja0ZuKHMsaSk7aSs9ZC5zdGFja0RlbHRhfWVsc2UgaWYoZC5zdGFja0NsZWFyaW5nKWk9MDtlbHNlIGlmKGQucmVzZXRTdGFjayl7aT0wO2UudW5kZWZTdGFjaz0hMX1lbHNlIGlmKGQudW5kZWZTdGFjayl7aT0wO2UudW5kZWZTdGFjaz0hMDtlLmZpcnN0U3RhY2tDbGVhcmluZz0hMX19fW88dC5sZW5ndGgmJnQuZmlsbCgxNCxvKTtlLnN0YWNrU2l6ZT1pO3JldHVybiEwfXBhcnNlQ2hhclN0cmluZ3Moe2NoYXJTdHJpbmdzOmUsbG9jYWxTdWJySW5kZXg6dCxnbG9iYWxTdWJySW5kZXg6YSxmZFNlbGVjdDpuLGZkQXJyYXk6aSxwcml2YXRlRGljdDpzfSl7Y29uc3Qgbz1bXSxjPVtdLGw9ZS5jb3VudDtmb3IobGV0IGg9MDtoPGw7aCsrKXtjb25zdCBsPWUuZ2V0KGgpLHU9e2NhbGxEZXB0aDowLHN0YWNrU2l6ZTowLHN0YWNrOltdLHVuZGVmU3RhY2s6ITAsaGludHM6MCxmaXJzdFN0YWNrQ2xlYXJpbmc6ITAsc2VhYzpudWxsLHdpZHRoOm51bGwsaGFzVlN0ZW1zOiExfTtsZXQgZD0hMCxmPW51bGwsZz1zO2lmKG4mJmkubGVuZ3RoKXtjb25zdCBlPW4uZ2V0RkRJbmRleChoKTtpZigtMT09PWUpeygwLHIud2FybikoIkdseXBoIGluZGV4IGlzIG5vdCBpbiBmZCBzZWxlY3QuIik7ZD0hMX1pZihlPj1pLmxlbmd0aCl7KDAsci53YXJuKSgiSW52YWxpZCBmZCBpbmRleCBmb3IgZ2x5cGggaW5kZXguIik7ZD0hMX1pZihkKXtnPWlbZV0ucHJpdmF0ZURpY3Q7Zj1nLnN1YnJzSW5kZXh9fWVsc2UgdCYmKGY9dCk7ZCYmKGQ9dGhpcy5wYXJzZUNoYXJTdHJpbmcodSxsLGYsYSkpO2lmKG51bGwhPT11LndpZHRoKXtjb25zdCBlPWcuZ2V0QnlOYW1lKCJub21pbmFsV2lkdGhYIik7Y1toXT1lK3Uud2lkdGh9ZWxzZXtjb25zdCBlPWcuZ2V0QnlOYW1lKCJkZWZhdWx0V2lkdGhYIik7Y1toXT1lfW51bGwhPT11LnNlYWMmJihvW2hdPXUuc2VhYyk7ZHx8ZS5zZXQoaCxuZXcgVWludDhBcnJheShbMTRdKSl9cmV0dXJue2NoYXJTdHJpbmdzOmUsc2VhY3M6byx3aWR0aHM6Y319ZW1wdHlQcml2YXRlRGljdGlvbmFyeShlKXtjb25zdCB0PXRoaXMuY3JlYXRlRGljdChDRkZQcml2YXRlRGljdCxbXSxlLnN0cmluZ3MpO2Uuc2V0QnlLZXkoMTgsWzAsMF0pO2UucHJpdmF0ZURpY3Q9dH1wYXJzZVByaXZhdGVEaWN0KGUpe2lmKCFlLmhhc05hbWUoIlByaXZhdGUiKSl7dGhpcy5lbXB0eVByaXZhdGVEaWN0aW9uYXJ5KGUpO3JldHVybn1jb25zdCB0PWUuZ2V0QnlOYW1lKCJQcml2YXRlIik7aWYoIUFycmF5LmlzQXJyYXkodCl8fDIhPT10Lmxlbmd0aCl7ZS5yZW1vdmVCeU5hbWUoIlByaXZhdGUiKTtyZXR1cm59Y29uc3QgYT10WzBdLHI9dFsxXTtpZigwPT09YXx8cj49dGhpcy5ieXRlcy5sZW5ndGgpe3RoaXMuZW1wdHlQcml2YXRlRGljdGlvbmFyeShlKTtyZXR1cm59Y29uc3Qgbj1yK2EsaT10aGlzLmJ5dGVzLnN1YmFycmF5KHIsbikscz10aGlzLnBhcnNlRGljdChpKSxvPXRoaXMuY3JlYXRlRGljdChDRkZQcml2YXRlRGljdCxzLGUuc3RyaW5ncyk7ZS5wcml2YXRlRGljdD1vOzA9PT1vLmdldEJ5TmFtZSgiRXhwYW5zaW9uRmFjdG9yIikmJm8uc2V0QnlOYW1lKCJFeHBhbnNpb25GYWN0b3IiLC4wNik7aWYoIW8uZ2V0QnlOYW1lKCJTdWJycyIpKXJldHVybjtjb25zdCBjPW8uZ2V0QnlOYW1lKCJTdWJycyIpLGw9citjO2lmKDA9PT1jfHxsPj10aGlzLmJ5dGVzLmxlbmd0aCl7dGhpcy5lbXB0eVByaXZhdGVEaWN0aW9uYXJ5KGUpO3JldHVybn1jb25zdCBoPXRoaXMucGFyc2VJbmRleChsKTtvLnN1YnJzSW5kZXg9aC5vYmp9cGFyc2VDaGFyc2V0cyhlLHQsYSxpKXtpZigwPT09ZSlyZXR1cm4gbmV3IENGRkNoYXJzZXQoITAsZC5JU09fQURPQkUsbi5JU09BZG9iZUNoYXJzZXQpO2lmKDE9PT1lKXJldHVybiBuZXcgQ0ZGQ2hhcnNldCghMCxkLkVYUEVSVCxuLkV4cGVydENoYXJzZXQpO2lmKDI9PT1lKXJldHVybiBuZXcgQ0ZGQ2hhcnNldCghMCxkLkVYUEVSVF9TVUJTRVQsbi5FeHBlcnRTdWJzZXRDaGFyc2V0KTtjb25zdCBzPXRoaXMuYnl0ZXMsbz1lLGM9c1tlKytdLGw9W2k/MDoiLm5vdGRlZiJdO2xldCBoLHUsZjt0LT0xO3N3aXRjaChjKXtjYXNlIDA6Zm9yKGY9MDtmPHQ7ZisrKXtoPXNbZSsrXTw8OHxzW2UrK107bC5wdXNoKGk/aDphLmdldChoKSl9YnJlYWs7Y2FzZSAxOmZvcig7bC5sZW5ndGg8PXQ7KXtoPXNbZSsrXTw8OHxzW2UrK107dT1zW2UrK107Zm9yKGY9MDtmPD11O2YrKylsLnB1c2goaT9oKys6YS5nZXQoaCsrKSl9YnJlYWs7Y2FzZSAyOmZvcig7bC5sZW5ndGg8PXQ7KXtoPXNbZSsrXTw8OHxzW2UrK107dT1zW2UrK108PDh8c1tlKytdO2ZvcihmPTA7Zjw9dTtmKyspbC5wdXNoKGk/aCsrOmEuZ2V0KGgrKykpfWJyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlVua25vd24gY2hhcnNldCBmb3JtYXQiKX1jb25zdCBnPWUscD1zLnN1YmFycmF5KG8sZyk7cmV0dXJuIG5ldyBDRkZDaGFyc2V0KCExLGMsbCxwKX1wYXJzZUVuY29kaW5nKGUsdCxhLG4pe2NvbnN0IHM9T2JqZWN0LmNyZWF0ZShudWxsKSxvPXRoaXMuYnl0ZXM7bGV0IGMsbCxoLHU9ITEsZD1udWxsO2lmKDA9PT1lfHwxPT09ZSl7dT0hMDtjPWU7Y29uc3QgdD1lP2kuRXhwZXJ0RW5jb2Rpbmc6aS5TdGFuZGFyZEVuY29kaW5nO2ZvcihsPTAsaD1uLmxlbmd0aDtsPGg7bCsrKXtjb25zdCBlPXQuaW5kZXhPZihuW2xdKTstMSE9PWUmJihzW2VdPWwpfX1lbHNle2NvbnN0IHQ9ZTtjPW9bZSsrXTtzd2l0Y2goMTI3JmMpe2Nhc2UgMDpjb25zdCB0PW9bZSsrXTtmb3IobD0xO2w8PXQ7bCsrKXNbb1tlKytdXT1sO2JyZWFrO2Nhc2UgMTpjb25zdCBhPW9bZSsrXTtsZXQgbj0xO2ZvcihsPTA7bDxhO2wrKyl7Y29uc3QgdD1vW2UrK10sYT1vW2UrK107Zm9yKGxldCBlPXQ7ZTw9dCthO2UrKylzW2VdPW4rK31icmVhaztkZWZhdWx0OnRocm93IG5ldyByLkZvcm1hdEVycm9yKGBVbmtub3duIGVuY29kaW5nIGZvcm1hdDogJHtjfSBpbiBDRkZgKX1jb25zdCBpPWU7aWYoMTI4JmMpe29bdF0mPTEyNzshZnVuY3Rpb24gcmVhZFN1cHBsZW1lbnQoKXtjb25zdCB0PW9bZSsrXTtmb3IobD0wO2w8dDtsKyspe2NvbnN0IHQ9b1tlKytdLHI9KG9bZSsrXTw8OCkrKDI1NSZvW2UrK10pO3NbdF09bi5pbmRleE9mKGEuZ2V0KHIpKX19KCl9ZD1vLnN1YmFycmF5KHQsaSl9YyY9MTI3O3JldHVybiBuZXcgQ0ZGRW5jb2RpbmcodSxjLHMsZCl9cGFyc2VGRFNlbGVjdChlLHQpe2NvbnN0IGE9dGhpcy5ieXRlcyxuPWFbZSsrXSxpPVtdO2xldCBzO3N3aXRjaChuKXtjYXNlIDA6Zm9yKHM9MDtzPHQ7KytzKXtjb25zdCB0PWFbZSsrXTtpLnB1c2godCl9YnJlYWs7Y2FzZSAzOmNvbnN0IG89YVtlKytdPDw4fGFbZSsrXTtmb3Iocz0wO3M8bzsrK3Mpe2xldCB0PWFbZSsrXTw8OHxhW2UrK107aWYoMD09PXMmJjAhPT10KXsoMCxyLndhcm4pKCJwYXJzZUZEU2VsZWN0OiBUaGUgZmlyc3QgcmFuZ2UgbXVzdCBoYXZlIGEgZmlyc3QgR0lEIG9mIDAgLS0gdHJ5aW5nIHRvIHJlY292ZXIuIik7dD0wfWNvbnN0IG49YVtlKytdLG89YVtlXTw8OHxhW2UrMV07Zm9yKGxldCBlPXQ7ZTxvOysrZSlpLnB1c2gobil9ZSs9MjticmVhaztkZWZhdWx0OnRocm93IG5ldyByLkZvcm1hdEVycm9yKGBwYXJzZUZEU2VsZWN0OiBVbmtub3duIGZvcm1hdCAiJHtufSIuYCl9aWYoaS5sZW5ndGghPT10KXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJwYXJzZUZEU2VsZWN0OiBJbnZhbGlkIGZvbnQgZGF0YS4iKTtyZXR1cm4gbmV3IENGRkZEU2VsZWN0KG4saSl9fTtjbGFzcyBDRkZ7Y29uc3RydWN0b3IoKXt0aGlzLmhlYWRlcj1udWxsO3RoaXMubmFtZXM9W107dGhpcy50b3BEaWN0PW51bGw7dGhpcy5zdHJpbmdzPW5ldyBDRkZTdHJpbmdzO3RoaXMuZ2xvYmFsU3VickluZGV4PW51bGw7dGhpcy5lbmNvZGluZz1udWxsO3RoaXMuY2hhcnNldD1udWxsO3RoaXMuY2hhclN0cmluZ3M9bnVsbDt0aGlzLmZkQXJyYXk9W107dGhpcy5mZFNlbGVjdD1udWxsO3RoaXMuaXNDSURGb250PSExfWR1cGxpY2F0ZUZpcnN0R2x5cGgoKXtpZih0aGlzLmNoYXJTdHJpbmdzLmNvdW50Pj02NTUzNSl7KDAsci53YXJuKSgiTm90IGVub3VnaCBzcGFjZSBpbiBjaGFyc3RyaW5ncyB0byBkdXBsaWNhdGUgZmlyc3QgZ2x5cGguIik7cmV0dXJufWNvbnN0IGU9dGhpcy5jaGFyU3RyaW5ncy5nZXQoMCk7dGhpcy5jaGFyU3RyaW5ncy5hZGQoZSk7dGhpcy5pc0NJREZvbnQmJnRoaXMuZmRTZWxlY3QuZmRTZWxlY3QucHVzaCh0aGlzLmZkU2VsZWN0LmZkU2VsZWN0WzBdKX1oYXNHbHlwaElkKGUpe2lmKGU8MHx8ZT49dGhpcy5jaGFyU3RyaW5ncy5jb3VudClyZXR1cm4hMTtyZXR1cm4gdGhpcy5jaGFyU3RyaW5ncy5nZXQoZSkubGVuZ3RoPjB9fXQuQ0ZGPUNGRjtjbGFzcyBDRkZIZWFkZXJ7Y29uc3RydWN0b3IoZSx0LGEscil7dGhpcy5tYWpvcj1lO3RoaXMubWlub3I9dDt0aGlzLmhkclNpemU9YTt0aGlzLm9mZlNpemU9cn19dC5DRkZIZWFkZXI9Q0ZGSGVhZGVyO2NsYXNzIENGRlN0cmluZ3N7Y29uc3RydWN0b3IoKXt0aGlzLnN0cmluZ3M9W119Z2V0KGUpe3JldHVybiBlPj0wJiZlPD0zOTA/c1tlXTplLW88PXRoaXMuc3RyaW5ncy5sZW5ndGg/dGhpcy5zdHJpbmdzW2Utb106c1swXX1nZXRTSUQoZSl7bGV0IHQ9cy5pbmRleE9mKGUpO2lmKC0xIT09dClyZXR1cm4gdDt0PXRoaXMuc3RyaW5ncy5pbmRleE9mKGUpO3JldHVybi0xIT09dD90K286LTF9YWRkKGUpe3RoaXMuc3RyaW5ncy5wdXNoKGUpfWdldCBjb3VudCgpe3JldHVybiB0aGlzLnN0cmluZ3MubGVuZ3RofX10LkNGRlN0cmluZ3M9Q0ZGU3RyaW5ncztjbGFzcyBDRkZJbmRleHtjb25zdHJ1Y3Rvcigpe3RoaXMub2JqZWN0cz1bXTt0aGlzLmxlbmd0aD0wfWFkZChlKXt0aGlzLmxlbmd0aCs9ZS5sZW5ndGg7dGhpcy5vYmplY3RzLnB1c2goZSl9c2V0KGUsdCl7dGhpcy5sZW5ndGgrPXQubGVuZ3RoLXRoaXMub2JqZWN0c1tlXS5sZW5ndGg7dGhpcy5vYmplY3RzW2VdPXR9Z2V0KGUpe3JldHVybiB0aGlzLm9iamVjdHNbZV19Z2V0IGNvdW50KCl7cmV0dXJuIHRoaXMub2JqZWN0cy5sZW5ndGh9fXQuQ0ZGSW5kZXg9Q0ZGSW5kZXg7Y2xhc3MgQ0ZGRGljdHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMua2V5VG9OYW1lTWFwPWUua2V5VG9OYW1lTWFwO3RoaXMubmFtZVRvS2V5TWFwPWUubmFtZVRvS2V5TWFwO3RoaXMuZGVmYXVsdHM9ZS5kZWZhdWx0czt0aGlzLnR5cGVzPWUudHlwZXM7dGhpcy5vcGNvZGVzPWUub3Bjb2Rlczt0aGlzLm9yZGVyPWUub3JkZXI7dGhpcy5zdHJpbmdzPXQ7dGhpcy52YWx1ZXM9T2JqZWN0LmNyZWF0ZShudWxsKX1zZXRCeUtleShlLHQpe2lmKCEoZSBpbiB0aGlzLmtleVRvTmFtZU1hcCkpcmV0dXJuITE7aWYoMD09PXQubGVuZ3RoKXJldHVybiEwO2Zvcihjb25zdCBhIG9mIHQpaWYoaXNOYU4oYSkpeygwLHIud2FybikoYEludmFsaWQgQ0ZGRGljdCB2YWx1ZTogIiR7dH0iIGZvciBrZXkgIiR7ZX0iLmApO3JldHVybiEwfWNvbnN0IGE9dGhpcy50eXBlc1tlXTsibnVtIiE9PWEmJiJzaWQiIT09YSYmIm9mZnNldCIhPT1hfHwodD10WzBdKTt0aGlzLnZhbHVlc1tlXT10O3JldHVybiEwfXNldEJ5TmFtZShlLHQpe2lmKCEoZSBpbiB0aGlzLm5hbWVUb0tleU1hcCkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYEludmFsaWQgZGljdGlvbmFyeSBuYW1lICIke2V9ImApO3RoaXMudmFsdWVzW3RoaXMubmFtZVRvS2V5TWFwW2VdXT10fWhhc05hbWUoZSl7cmV0dXJuIHRoaXMubmFtZVRvS2V5TWFwW2VdaW4gdGhpcy52YWx1ZXN9Z2V0QnlOYW1lKGUpe2lmKCEoZSBpbiB0aGlzLm5hbWVUb0tleU1hcCkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYEludmFsaWQgZGljdGlvbmFyeSBuYW1lICR7ZX0iYCk7Y29uc3QgdD10aGlzLm5hbWVUb0tleU1hcFtlXTtyZXR1cm4gdCBpbiB0aGlzLnZhbHVlcz90aGlzLnZhbHVlc1t0XTp0aGlzLmRlZmF1bHRzW3RdfXJlbW92ZUJ5TmFtZShlKXtkZWxldGUgdGhpcy52YWx1ZXNbdGhpcy5uYW1lVG9LZXlNYXBbZV1dfXN0YXRpYyBjcmVhdGVUYWJsZXMoZSl7Y29uc3QgdD17a2V5VG9OYW1lTWFwOnt9LG5hbWVUb0tleU1hcDp7fSxkZWZhdWx0czp7fSx0eXBlczp7fSxvcGNvZGVzOnt9LG9yZGVyOltdfTtmb3IoY29uc3QgYSBvZiBlKXtjb25zdCBlPUFycmF5LmlzQXJyYXkoYVswXSk/KGFbMF1bMF08PDgpK2FbMF1bMV06YVswXTt0LmtleVRvTmFtZU1hcFtlXT1hWzFdO3QubmFtZVRvS2V5TWFwW2FbMV1dPWU7dC50eXBlc1tlXT1hWzJdO3QuZGVmYXVsdHNbZV09YVszXTt0Lm9wY29kZXNbZV09QXJyYXkuaXNBcnJheShhWzBdKT9hWzBdOlthWzBdXTt0Lm9yZGVyLnB1c2goZSl9cmV0dXJuIHR9fWNvbnN0IGg9W1tbMTIsMzBdLCJST1MiLFsic2lkIiwic2lkIiwibnVtIl0sbnVsbF0sW1sxMiwyMF0sIlN5bnRoZXRpY0Jhc2UiLCJudW0iLG51bGxdLFswLCJ2ZXJzaW9uIiwic2lkIixudWxsXSxbMSwiTm90aWNlIiwic2lkIixudWxsXSxbWzEyLDBdLCJDb3B5cmlnaHQiLCJzaWQiLG51bGxdLFsyLCJGdWxsTmFtZSIsInNpZCIsbnVsbF0sWzMsIkZhbWlseU5hbWUiLCJzaWQiLG51bGxdLFs0LCJXZWlnaHQiLCJzaWQiLG51bGxdLFtbMTIsMV0sImlzRml4ZWRQaXRjaCIsIm51bSIsMF0sW1sxMiwyXSwiSXRhbGljQW5nbGUiLCJudW0iLDBdLFtbMTIsM10sIlVuZGVybGluZVBvc2l0aW9uIiwibnVtIiwtMTAwXSxbWzEyLDRdLCJVbmRlcmxpbmVUaGlja25lc3MiLCJudW0iLDUwXSxbWzEyLDVdLCJQYWludFR5cGUiLCJudW0iLDBdLFtbMTIsNl0sIkNoYXJzdHJpbmdUeXBlIiwibnVtIiwyXSxbWzEyLDddLCJGb250TWF0cml4IixbIm51bSIsIm51bSIsIm51bSIsIm51bSIsIm51bSIsIm51bSJdLFsuMDAxLDAsMCwuMDAxLDAsMF1dLFsxMywiVW5pcXVlSUQiLCJudW0iLG51bGxdLFs1LCJGb250QkJveCIsWyJudW0iLCJudW0iLCJudW0iLCJudW0iXSxbMCwwLDAsMF1dLFtbMTIsOF0sIlN0cm9rZVdpZHRoIiwibnVtIiwwXSxbMTQsIlhVSUQiLCJhcnJheSIsbnVsbF0sWzE1LCJjaGFyc2V0Iiwib2Zmc2V0IiwwXSxbMTYsIkVuY29kaW5nIiwib2Zmc2V0IiwwXSxbMTcsIkNoYXJTdHJpbmdzIiwib2Zmc2V0IiwwXSxbMTgsIlByaXZhdGUiLFsib2Zmc2V0Iiwib2Zmc2V0Il0sbnVsbF0sW1sxMiwyMV0sIlBvc3RTY3JpcHQiLCJzaWQiLG51bGxdLFtbMTIsMjJdLCJCYXNlRm9udE5hbWUiLCJzaWQiLG51bGxdLFtbMTIsMjNdLCJCYXNlRm9udEJsZW5kIiwiZGVsdGEiLG51bGxdLFtbMTIsMzFdLCJDSURGb250VmVyc2lvbiIsIm51bSIsMF0sW1sxMiwzMl0sIkNJREZvbnRSZXZpc2lvbiIsIm51bSIsMF0sW1sxMiwzM10sIkNJREZvbnRUeXBlIiwibnVtIiwwXSxbWzEyLDM0XSwiQ0lEQ291bnQiLCJudW0iLDg3MjBdLFtbMTIsMzVdLCJVSURCYXNlIiwibnVtIixudWxsXSxbWzEyLDM3XSwiRkRTZWxlY3QiLCJvZmZzZXQiLG51bGxdLFtbMTIsMzZdLCJGREFycmF5Iiwib2Zmc2V0IixudWxsXSxbWzEyLDM4XSwiRm9udE5hbWUiLCJzaWQiLG51bGxdXTtjbGFzcyBDRkZUb3BEaWN0IGV4dGVuZHMgQ0ZGRGljdHtzdGF0aWMgZ2V0IHRhYmxlcygpe3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJ0YWJsZXMiLHRoaXMuY3JlYXRlVGFibGVzKGgpKX1jb25zdHJ1Y3RvcihlKXtzdXBlcihDRkZUb3BEaWN0LnRhYmxlcyxlKTt0aGlzLnByaXZhdGVEaWN0PW51bGx9fXQuQ0ZGVG9wRGljdD1DRkZUb3BEaWN0O2NvbnN0IHU9W1s2LCJCbHVlVmFsdWVzIiwiZGVsdGEiLG51bGxdLFs3LCJPdGhlckJsdWVzIiwiZGVsdGEiLG51bGxdLFs4LCJGYW1pbHlCbHVlcyIsImRlbHRhIixudWxsXSxbOSwiRmFtaWx5T3RoZXJCbHVlcyIsImRlbHRhIixudWxsXSxbWzEyLDldLCJCbHVlU2NhbGUiLCJudW0iLC4wMzk2MjVdLFtbMTIsMTBdLCJCbHVlU2hpZnQiLCJudW0iLDddLFtbMTIsMTFdLCJCbHVlRnV6eiIsIm51bSIsMV0sWzEwLCJTdGRIVyIsIm51bSIsbnVsbF0sWzExLCJTdGRWVyIsIm51bSIsbnVsbF0sW1sxMiwxMl0sIlN0ZW1TbmFwSCIsImRlbHRhIixudWxsXSxbWzEyLDEzXSwiU3RlbVNuYXBWIiwiZGVsdGEiLG51bGxdLFtbMTIsMTRdLCJGb3JjZUJvbGQiLCJudW0iLDBdLFtbMTIsMTddLCJMYW5ndWFnZUdyb3VwIiwibnVtIiwwXSxbWzEyLDE4XSwiRXhwYW5zaW9uRmFjdG9yIiwibnVtIiwuMDZdLFtbMTIsMTldLCJpbml0aWFsUmFuZG9tU2VlZCIsIm51bSIsMF0sWzIwLCJkZWZhdWx0V2lkdGhYIiwibnVtIiwwXSxbMjEsIm5vbWluYWxXaWR0aFgiLCJudW0iLDBdLFsxOSwiU3VicnMiLCJvZmZzZXQiLG51bGxdXTtjbGFzcyBDRkZQcml2YXRlRGljdCBleHRlbmRzIENGRkRpY3R7c3RhdGljIGdldCB0YWJsZXMoKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywidGFibGVzIix0aGlzLmNyZWF0ZVRhYmxlcyh1KSl9Y29uc3RydWN0b3IoZSl7c3VwZXIoQ0ZGUHJpdmF0ZURpY3QudGFibGVzLGUpO3RoaXMuc3VicnNJbmRleD1udWxsfX10LkNGRlByaXZhdGVEaWN0PUNGRlByaXZhdGVEaWN0O2NvbnN0IGQ9e0lTT19BRE9CRTowLEVYUEVSVDoxLEVYUEVSVF9TVUJTRVQ6Mn07Y2xhc3MgQ0ZGQ2hhcnNldHtjb25zdHJ1Y3RvcihlLHQsYSxyKXt0aGlzLnByZWRlZmluZWQ9ZTt0aGlzLmZvcm1hdD10O3RoaXMuY2hhcnNldD1hO3RoaXMucmF3PXJ9fXQuQ0ZGQ2hhcnNldD1DRkZDaGFyc2V0O2NsYXNzIENGRkVuY29kaW5ne2NvbnN0cnVjdG9yKGUsdCxhLHIpe3RoaXMucHJlZGVmaW5lZD1lO3RoaXMuZm9ybWF0PXQ7dGhpcy5lbmNvZGluZz1hO3RoaXMucmF3PXJ9fWNsYXNzIENGRkZEU2VsZWN0e2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5mb3JtYXQ9ZTt0aGlzLmZkU2VsZWN0PXR9Z2V0RkRJbmRleChlKXtyZXR1cm4gZTwwfHxlPj10aGlzLmZkU2VsZWN0Lmxlbmd0aD8tMTp0aGlzLmZkU2VsZWN0W2VdfX10LkNGRkZEU2VsZWN0PUNGRkZEU2VsZWN0O2NsYXNzIENGRk9mZnNldFRyYWNrZXJ7Y29uc3RydWN0b3IoKXt0aGlzLm9mZnNldHM9T2JqZWN0LmNyZWF0ZShudWxsKX1pc1RyYWNraW5nKGUpe3JldHVybiBlIGluIHRoaXMub2Zmc2V0c310cmFjayhlLHQpe2lmKGUgaW4gdGhpcy5vZmZzZXRzKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBBbHJlYWR5IHRyYWNraW5nIGxvY2F0aW9uIG9mICR7ZX1gKTt0aGlzLm9mZnNldHNbZV09dH1vZmZzZXQoZSl7Zm9yKGNvbnN0IHQgaW4gdGhpcy5vZmZzZXRzKXRoaXMub2Zmc2V0c1t0XSs9ZX1zZXRFbnRyeUxvY2F0aW9uKGUsdCxhKXtpZighKGUgaW4gdGhpcy5vZmZzZXRzKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgTm90IHRyYWNraW5nIGxvY2F0aW9uIG9mICR7ZX1gKTtjb25zdCBuPWEuZGF0YSxpPXRoaXMub2Zmc2V0c1tlXTtmb3IobGV0IGU9MCxhPXQubGVuZ3RoO2U8YTsrK2Upe2NvbnN0IGE9NSplK2kscz1hKzEsbz1hKzIsYz1hKzMsbD1hKzQ7aWYoMjkhPT1uW2FdfHwwIT09bltzXXx8MCE9PW5bb118fDAhPT1uW2NdfHwwIT09bltsXSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigid3JpdGluZyB0byBhbiBvZmZzZXQgdGhhdCBpcyBub3QgZW1wdHkiKTtjb25zdCBoPXRbZV07blthXT0yOTtuW3NdPWg+PjI0JjI1NTtuW29dPWg+PjE2JjI1NTtuW2NdPWg+PjgmMjU1O25bbF09MjU1Jmh9fX1jbGFzcyBDRkZDb21waWxlcntjb25zdHJ1Y3RvcihlKXt0aGlzLmNmZj1lfWNvbXBpbGUoKXtjb25zdCBlPXRoaXMuY2ZmLHQ9e2RhdGE6W10sbGVuZ3RoOjAsYWRkKGUpe3RyeXt0aGlzLmRhdGEucHVzaCguLi5lKX1jYXRjaHt0aGlzLmRhdGE9dGhpcy5kYXRhLmNvbmNhdChlKX10aGlzLmxlbmd0aD10aGlzLmRhdGEubGVuZ3RofX0sYT10aGlzLmNvbXBpbGVIZWFkZXIoZS5oZWFkZXIpO3QuYWRkKGEpO2NvbnN0IG49dGhpcy5jb21waWxlTmFtZUluZGV4KGUubmFtZXMpO3QuYWRkKG4pO2lmKGUuaXNDSURGb250JiZlLnRvcERpY3QuaGFzTmFtZSgiRm9udE1hdHJpeCIpKXtjb25zdCB0PWUudG9wRGljdC5nZXRCeU5hbWUoIkZvbnRNYXRyaXgiKTtlLnRvcERpY3QucmVtb3ZlQnlOYW1lKCJGb250TWF0cml4Iik7Zm9yKGNvbnN0IGEgb2YgZS5mZEFycmF5KXtsZXQgZT10LnNsaWNlKDApO2EuaGFzTmFtZSgiRm9udE1hdHJpeCIpJiYoZT1yLlV0aWwudHJhbnNmb3JtKGUsYS5nZXRCeU5hbWUoIkZvbnRNYXRyaXgiKSkpO2Euc2V0QnlOYW1lKCJGb250TWF0cml4IixlKX19Y29uc3QgaT1lLnRvcERpY3QuZ2V0QnlOYW1lKCJYVUlEIik7aT8ubGVuZ3RoPjE2JiZlLnRvcERpY3QucmVtb3ZlQnlOYW1lKCJYVUlEIik7ZS50b3BEaWN0LnNldEJ5TmFtZSgiY2hhcnNldCIsMCk7bGV0IHM9dGhpcy5jb21waWxlVG9wRGljdHMoW2UudG9wRGljdF0sdC5sZW5ndGgsZS5pc0NJREZvbnQpO3QuYWRkKHMub3V0cHV0KTtjb25zdCBvPXMudHJhY2tlcnNbMF0sYz10aGlzLmNvbXBpbGVTdHJpbmdJbmRleChlLnN0cmluZ3Muc3RyaW5ncyk7dC5hZGQoYyk7Y29uc3QgbD10aGlzLmNvbXBpbGVJbmRleChlLmdsb2JhbFN1YnJJbmRleCk7dC5hZGQobCk7aWYoZS5lbmNvZGluZyYmZS50b3BEaWN0Lmhhc05hbWUoIkVuY29kaW5nIikpaWYoZS5lbmNvZGluZy5wcmVkZWZpbmVkKW8uc2V0RW50cnlMb2NhdGlvbigiRW5jb2RpbmciLFtlLmVuY29kaW5nLmZvcm1hdF0sdCk7ZWxzZXtjb25zdCBhPXRoaXMuY29tcGlsZUVuY29kaW5nKGUuZW5jb2RpbmcpO28uc2V0RW50cnlMb2NhdGlvbigiRW5jb2RpbmciLFt0Lmxlbmd0aF0sdCk7dC5hZGQoYSl9Y29uc3QgaD10aGlzLmNvbXBpbGVDaGFyc2V0KGUuY2hhcnNldCxlLmNoYXJTdHJpbmdzLmNvdW50LGUuc3RyaW5ncyxlLmlzQ0lERm9udCk7by5zZXRFbnRyeUxvY2F0aW9uKCJjaGFyc2V0IixbdC5sZW5ndGhdLHQpO3QuYWRkKGgpO2NvbnN0IHU9dGhpcy5jb21waWxlQ2hhclN0cmluZ3MoZS5jaGFyU3RyaW5ncyk7by5zZXRFbnRyeUxvY2F0aW9uKCJDaGFyU3RyaW5ncyIsW3QubGVuZ3RoXSx0KTt0LmFkZCh1KTtpZihlLmlzQ0lERm9udCl7by5zZXRFbnRyeUxvY2F0aW9uKCJGRFNlbGVjdCIsW3QubGVuZ3RoXSx0KTtjb25zdCBhPXRoaXMuY29tcGlsZUZEU2VsZWN0KGUuZmRTZWxlY3QpO3QuYWRkKGEpO3M9dGhpcy5jb21waWxlVG9wRGljdHMoZS5mZEFycmF5LHQubGVuZ3RoLCEwKTtvLnNldEVudHJ5TG9jYXRpb24oIkZEQXJyYXkiLFt0Lmxlbmd0aF0sdCk7dC5hZGQocy5vdXRwdXQpO2NvbnN0IHI9cy50cmFja2Vyczt0aGlzLmNvbXBpbGVQcml2YXRlRGljdHMoZS5mZEFycmF5LHIsdCl9dGhpcy5jb21waWxlUHJpdmF0ZURpY3RzKFtlLnRvcERpY3RdLFtvXSx0KTt0LmFkZChbMF0pO3JldHVybiB0LmRhdGF9ZW5jb2RlTnVtYmVyKGUpe3JldHVybiBOdW1iZXIuaXNJbnRlZ2VyKGUpP3RoaXMuZW5jb2RlSW50ZWdlcihlKTp0aGlzLmVuY29kZUZsb2F0KGUpfXN0YXRpYyBnZXQgRW5jb2RlRmxvYXRSZWdFeHAoKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiRW5jb2RlRmxvYXRSZWdFeHAiLC9cLihcZCo/KSg/Ojl7NSwyMH18MHs1LDIwfSlcZHswLDJ9KD86ZSguKyl8JCkvKX1lbmNvZGVGbG9hdChlKXtsZXQgdD1lLnRvU3RyaW5nKCk7Y29uc3QgYT1DRkZDb21waWxlci5FbmNvZGVGbG9hdFJlZ0V4cC5leGVjKHQpO2lmKGEpe2NvbnN0IHI9cGFyc2VGbG9hdCgiMWUiKygoYVsyXT8rYVsyXTowKSthWzFdLmxlbmd0aCkpO3Q9KE1hdGgucm91bmQoZSpyKS9yKS50b1N0cmluZygpfWxldCByLG4saT0iIjtmb3Iocj0wLG49dC5sZW5ndGg7cjxuOysrcil7Y29uc3QgZT10W3JdO2krPSJlIj09PWU/Ii0iPT09dFsrK3JdPyJjIjoiYiI6Ii4iPT09ZT8iYSI6Ii0iPT09ZT8iZSI6ZX1pKz0xJmkubGVuZ3RoPyJmIjoiZmYiO2NvbnN0IHM9WzMwXTtmb3Iocj0wLG49aS5sZW5ndGg7cjxuO3IrPTIpcy5wdXNoKHBhcnNlSW50KGkuc3Vic3RyaW5nKHIscisyKSwxNikpO3JldHVybiBzfWVuY29kZUludGVnZXIoZSl7bGV0IHQ7dD1lPj0tMTA3JiZlPD0xMDc/W2UrMTM5XTplPj0xMDgmJmU8PTExMzE/WzI0NysoKGUtPTEwOCk+PjgpLDI1NSZlXTplPj0tMTEzMSYmZTw9LTEwOD9bMjUxKygoZT0tZS0xMDgpPj44KSwyNTUmZV06ZT49LTMyNzY4JiZlPD0zMjc2Nz9bMjgsZT4+OCYyNTUsMjU1JmVdOlsyOSxlPj4yNCYyNTUsZT4+MTYmMjU1LGU+PjgmMjU1LDI1NSZlXTtyZXR1cm4gdH1jb21waWxlSGVhZGVyKGUpe3JldHVybltlLm1ham9yLGUubWlub3IsNCxlLm9mZlNpemVdfWNvbXBpbGVOYW1lSW5kZXgoZSl7Y29uc3QgdD1uZXcgQ0ZGSW5kZXg7Zm9yKGNvbnN0IGEgb2YgZSl7Y29uc3QgZT1NYXRoLm1pbihhLmxlbmd0aCwxMjcpO2xldCBuPW5ldyBBcnJheShlKTtmb3IobGV0IHQ9MDt0PGU7dCsrKXtsZXQgZT1hW3RdOyhlPCIhInx8ZT4ifiJ8fCJbIj09PWV8fCJdIj09PWV8fCIoIj09PWV8fCIpIj09PWV8fCJ7Ij09PWV8fCJ9Ij09PWV8fCI8Ij09PWV8fCI+Ij09PWV8fCIvIj09PWV8fCIlIj09PWUpJiYoZT0iXyIpO25bdF09ZX1uPW4uam9pbigiIik7IiI9PT1uJiYobj0iQmFkX0ZvbnRfTmFtZSIpO3QuYWRkKCgwLHIuc3RyaW5nVG9CeXRlcykobikpfXJldHVybiB0aGlzLmNvbXBpbGVJbmRleCh0KX1jb21waWxlVG9wRGljdHMoZSx0LGEpe2NvbnN0IHI9W107bGV0IG49bmV3IENGRkluZGV4O2Zvcihjb25zdCBpIG9mIGUpe2lmKGEpe2kucmVtb3ZlQnlOYW1lKCJDSURGb250VmVyc2lvbiIpO2kucmVtb3ZlQnlOYW1lKCJDSURGb250UmV2aXNpb24iKTtpLnJlbW92ZUJ5TmFtZSgiQ0lERm9udFR5cGUiKTtpLnJlbW92ZUJ5TmFtZSgiQ0lEQ291bnQiKTtpLnJlbW92ZUJ5TmFtZSgiVUlEQmFzZSIpfWNvbnN0IGU9bmV3IENGRk9mZnNldFRyYWNrZXIscz10aGlzLmNvbXBpbGVEaWN0KGksZSk7ci5wdXNoKGUpO24uYWRkKHMpO2Uub2Zmc2V0KHQpfW49dGhpcy5jb21waWxlSW5kZXgobixyKTtyZXR1cm57dHJhY2tlcnM6cixvdXRwdXQ6bn19Y29tcGlsZVByaXZhdGVEaWN0cyhlLHQsYSl7Zm9yKGxldCBuPTAsaT1lLmxlbmd0aDtuPGk7KytuKXtjb25zdCBpPWVbbl0scz1pLnByaXZhdGVEaWN0O2lmKCFzfHwhaS5oYXNOYW1lKCJQcml2YXRlIikpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlRoZXJlIG11c3QgYmUgYSBwcml2YXRlIGRpY3Rpb25hcnkuIik7Y29uc3Qgbz1uZXcgQ0ZGT2Zmc2V0VHJhY2tlcixjPXRoaXMuY29tcGlsZURpY3QocyxvKTtsZXQgbD1hLmxlbmd0aDtvLm9mZnNldChsKTtjLmxlbmd0aHx8KGw9MCk7dFtuXS5zZXRFbnRyeUxvY2F0aW9uKCJQcml2YXRlIixbYy5sZW5ndGgsbF0sYSk7YS5hZGQoYyk7aWYocy5zdWJyc0luZGV4JiZzLmhhc05hbWUoIlN1YnJzIikpe2NvbnN0IGU9dGhpcy5jb21waWxlSW5kZXgocy5zdWJyc0luZGV4KTtvLnNldEVudHJ5TG9jYXRpb24oIlN1YnJzIixbYy5sZW5ndGhdLGEpO2EuYWRkKGUpfX19Y29tcGlsZURpY3QoZSx0KXtjb25zdCBhPVtdO2Zvcihjb25zdCBuIG9mIGUub3JkZXIpe2lmKCEobiBpbiBlLnZhbHVlcykpY29udGludWU7bGV0IGk9ZS52YWx1ZXNbbl0scz1lLnR5cGVzW25dO0FycmF5LmlzQXJyYXkocyl8fChzPVtzXSk7QXJyYXkuaXNBcnJheShpKXx8KGk9W2ldKTtpZigwIT09aS5sZW5ndGgpe2ZvcihsZXQgbz0wLGM9cy5sZW5ndGg7bzxjOysrbyl7Y29uc3QgYz1zW29dLGw9aVtvXTtzd2l0Y2goYyl7Y2FzZSJudW0iOmNhc2Uic2lkIjphLnB1c2goLi4udGhpcy5lbmNvZGVOdW1iZXIobCkpO2JyZWFrO2Nhc2Uib2Zmc2V0Ijpjb25zdCBzPWUua2V5VG9OYW1lTWFwW25dO3QuaXNUcmFja2luZyhzKXx8dC50cmFjayhzLGEubGVuZ3RoKTthLnB1c2goMjksMCwwLDAsMCk7YnJlYWs7Y2FzZSJhcnJheSI6Y2FzZSJkZWx0YSI6YS5wdXNoKC4uLnRoaXMuZW5jb2RlTnVtYmVyKGwpKTtmb3IobGV0IGU9MSx0PWkubGVuZ3RoO2U8dDsrK2UpYS5wdXNoKC4uLnRoaXMuZW5jb2RlTnVtYmVyKGlbZV0pKTticmVhaztkZWZhdWx0OnRocm93IG5ldyByLkZvcm1hdEVycm9yKGBVbmtub3duIGRhdGEgdHlwZSBvZiAke2N9YCl9fWEucHVzaCguLi5lLm9wY29kZXNbbl0pfX1yZXR1cm4gYX1jb21waWxlU3RyaW5nSW5kZXgoZSl7Y29uc3QgdD1uZXcgQ0ZGSW5kZXg7Zm9yKGNvbnN0IGEgb2YgZSl0LmFkZCgoMCxyLnN0cmluZ1RvQnl0ZXMpKGEpKTtyZXR1cm4gdGhpcy5jb21waWxlSW5kZXgodCl9Y29tcGlsZUNoYXJTdHJpbmdzKGUpe2NvbnN0IHQ9bmV3IENGRkluZGV4O2ZvcihsZXQgYT0wO2E8ZS5jb3VudDthKyspe2NvbnN0IHI9ZS5nZXQoYSk7MCE9PXIubGVuZ3RoP3QuYWRkKHIpOnQuYWRkKG5ldyBVaW50OEFycmF5KFsxMzksMTRdKSl9cmV0dXJuIHRoaXMuY29tcGlsZUluZGV4KHQpfWNvbXBpbGVDaGFyc2V0KGUsdCxhLG4pe2xldCBpO2NvbnN0IHM9dC0xO2lmKG4paT1uZXcgVWludDhBcnJheShbMiwwLDAscz4+OCYyNTUsMjU1JnNdKTtlbHNle2k9bmV3IFVpbnQ4QXJyYXkoMSsyKnMpO2lbMF09MDtsZXQgdD0wO2NvbnN0IG49ZS5jaGFyc2V0Lmxlbmd0aDtsZXQgbz0hMTtmb3IobGV0IHM9MTtzPGkubGVuZ3RoO3MrPTIpe2xldCBjPTA7aWYodDxuKXtjb25zdCBuPWUuY2hhcnNldFt0KytdO2M9YS5nZXRTSUQobik7aWYoLTE9PT1jKXtjPTA7aWYoIW8pe289ITA7KDAsci53YXJuKShgQ291bGRuJ3QgZmluZCAke259IGluIENGRiBzdHJpbmdzYCl9fX1pW3NdPWM+PjgmMjU1O2lbcysxXT0yNTUmY319cmV0dXJuIHRoaXMuY29tcGlsZVR5cGVkQXJyYXkoaSl9Y29tcGlsZUVuY29kaW5nKGUpe3JldHVybiB0aGlzLmNvbXBpbGVUeXBlZEFycmF5KGUucmF3KX1jb21waWxlRkRTZWxlY3QoZSl7Y29uc3QgdD1lLmZvcm1hdDtsZXQgYSxyO3N3aXRjaCh0KXtjYXNlIDA6YT1uZXcgVWludDhBcnJheSgxK2UuZmRTZWxlY3QubGVuZ3RoKTthWzBdPXQ7Zm9yKHI9MDtyPGUuZmRTZWxlY3QubGVuZ3RoO3IrKylhW3IrMV09ZS5mZFNlbGVjdFtyXTticmVhaztjYXNlIDM6Y29uc3Qgbj0wO2xldCBpPWUuZmRTZWxlY3RbMF07Y29uc3Qgcz1bdCwwLDAsbj4+OCYyNTUsMjU1Jm4saV07Zm9yKHI9MTtyPGUuZmRTZWxlY3QubGVuZ3RoO3IrKyl7Y29uc3QgdD1lLmZkU2VsZWN0W3JdO2lmKHQhPT1pKXtzLnB1c2gocj4+OCYyNTUsMjU1JnIsdCk7aT10fX1jb25zdCBvPShzLmxlbmd0aC0zKS8zO3NbMV09bz4+OCYyNTU7c1syXT0yNTUmbztzLnB1c2gocj4+OCYyNTUsMjU1JnIpO2E9bmV3IFVpbnQ4QXJyYXkocyl9cmV0dXJuIHRoaXMuY29tcGlsZVR5cGVkQXJyYXkoYSl9Y29tcGlsZVR5cGVkQXJyYXkoZSl7cmV0dXJuIEFycmF5LmZyb20oZSl9Y29tcGlsZUluZGV4KGUsdD1bXSl7Y29uc3QgYT1lLm9iamVjdHMscj1hLmxlbmd0aDtpZigwPT09cilyZXR1cm5bMCwwXTtjb25zdCBuPVtyPj44JjI1NSwyNTUmcl07bGV0IGkscyxvPTE7Zm9yKGk9MDtpPHI7KytpKW8rPWFbaV0ubGVuZ3RoO3M9bzwyNTY/MTpvPDY1NTM2PzI6bzwxNjc3NzIxNj8zOjQ7bi5wdXNoKHMpO2xldCBjPTE7Zm9yKGk9MDtpPHIrMTtpKyspezE9PT1zP24ucHVzaCgyNTUmYyk6Mj09PXM/bi5wdXNoKGM+PjgmMjU1LDI1NSZjKTozPT09cz9uLnB1c2goYz4+MTYmMjU1LGM+PjgmMjU1LDI1NSZjKTpuLnB1c2goYz4+PjI0JjI1NSxjPj4xNiYyNTUsYz4+OCYyNTUsMjU1JmMpO2FbaV0mJihjKz1hW2ldLmxlbmd0aCl9Zm9yKGk9MDtpPHI7aSsrKXt0W2ldJiZ0W2ldLm9mZnNldChuLmxlbmd0aCk7bi5wdXNoKC4uLmFbaV0pfXJldHVybiBufX10LkNGRkNvbXBpbGVyPUNGRkNvbXBpbGVyfSwoZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LklTT0Fkb2JlQ2hhcnNldD10LkV4cGVydFN1YnNldENoYXJzZXQ9dC5FeHBlcnRDaGFyc2V0PXZvaWQgMDt0LklTT0Fkb2JlQ2hhcnNldD1bIi5ub3RkZWYiLCJzcGFjZSIsImV4Y2xhbSIsInF1b3RlZGJsIiwibnVtYmVyc2lnbiIsImRvbGxhciIsInBlcmNlbnQiLCJhbXBlcnNhbmQiLCJxdW90ZXJpZ2h0IiwicGFyZW5sZWZ0IiwicGFyZW5yaWdodCIsImFzdGVyaXNrIiwicGx1cyIsImNvbW1hIiwiaHlwaGVuIiwicGVyaW9kIiwic2xhc2giLCJ6ZXJvIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwiZml2ZSIsInNpeCIsInNldmVuIiwiZWlnaHQiLCJuaW5lIiwiY29sb24iLCJzZW1pY29sb24iLCJsZXNzIiwiZXF1YWwiLCJncmVhdGVyIiwicXVlc3Rpb24iLCJhdCIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJOIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiYnJhY2tldGxlZnQiLCJiYWNrc2xhc2giLCJicmFja2V0cmlnaHQiLCJhc2NpaWNpcmN1bSIsInVuZGVyc2NvcmUiLCJxdW90ZWxlZnQiLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJnIiwiaCIsImkiLCJqIiwiayIsImwiLCJtIiwibiIsIm8iLCJwIiwicSIsInIiLCJzIiwidCIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsImJyYWNlbGVmdCIsImJhciIsImJyYWNlcmlnaHQiLCJhc2NpaXRpbGRlIiwiZXhjbGFtZG93biIsImNlbnQiLCJzdGVybGluZyIsImZyYWN0aW9uIiwieWVuIiwiZmxvcmluIiwic2VjdGlvbiIsImN1cnJlbmN5IiwicXVvdGVzaW5nbGUiLCJxdW90ZWRibGxlZnQiLCJndWlsbGVtb3RsZWZ0IiwiZ3VpbHNpbmdsbGVmdCIsImd1aWxzaW5nbHJpZ2h0IiwiZmkiLCJmbCIsImVuZGFzaCIsImRhZ2dlciIsImRhZ2dlcmRibCIsInBlcmlvZGNlbnRlcmVkIiwicGFyYWdyYXBoIiwiYnVsbGV0IiwicXVvdGVzaW5nbGJhc2UiLCJxdW90ZWRibGJhc2UiLCJxdW90ZWRibHJpZ2h0IiwiZ3VpbGxlbW90cmlnaHQiLCJlbGxpcHNpcyIsInBlcnRob3VzYW5kIiwicXVlc3Rpb25kb3duIiwiZ3JhdmUiLCJhY3V0ZSIsImNpcmN1bWZsZXgiLCJ0aWxkZSIsIm1hY3JvbiIsImJyZXZlIiwiZG90YWNjZW50IiwiZGllcmVzaXMiLCJyaW5nIiwiY2VkaWxsYSIsImh1bmdhcnVtbGF1dCIsIm9nb25layIsImNhcm9uIiwiZW1kYXNoIiwiQUUiLCJvcmRmZW1pbmluZSIsIkxzbGFzaCIsIk9zbGFzaCIsIk9FIiwib3JkbWFzY3VsaW5lIiwiYWUiLCJkb3RsZXNzaSIsImxzbGFzaCIsIm9zbGFzaCIsIm9lIiwiZ2VybWFuZGJscyIsIm9uZXN1cGVyaW9yIiwibG9naWNhbG5vdCIsIm11IiwidHJhZGVtYXJrIiwiRXRoIiwib25laGFsZiIsInBsdXNtaW51cyIsIlRob3JuIiwib25lcXVhcnRlciIsImRpdmlkZSIsImJyb2tlbmJhciIsImRlZ3JlZSIsInRob3JuIiwidGhyZWVxdWFydGVycyIsInR3b3N1cGVyaW9yIiwicmVnaXN0ZXJlZCIsIm1pbnVzIiwiZXRoIiwibXVsdGlwbHkiLCJ0aHJlZXN1cGVyaW9yIiwiY29weXJpZ2h0IiwiQWFjdXRlIiwiQWNpcmN1bWZsZXgiLCJBZGllcmVzaXMiLCJBZ3JhdmUiLCJBcmluZyIsIkF0aWxkZSIsIkNjZWRpbGxhIiwiRWFjdXRlIiwiRWNpcmN1bWZsZXgiLCJFZGllcmVzaXMiLCJFZ3JhdmUiLCJJYWN1dGUiLCJJY2lyY3VtZmxleCIsIklkaWVyZXNpcyIsIklncmF2ZSIsIk50aWxkZSIsIk9hY3V0ZSIsIk9jaXJjdW1mbGV4IiwiT2RpZXJlc2lzIiwiT2dyYXZlIiwiT3RpbGRlIiwiU2Nhcm9uIiwiVWFjdXRlIiwiVWNpcmN1bWZsZXgiLCJVZGllcmVzaXMiLCJVZ3JhdmUiLCJZYWN1dGUiLCJZZGllcmVzaXMiLCJaY2Fyb24iLCJhYWN1dGUiLCJhY2lyY3VtZmxleCIsImFkaWVyZXNpcyIsImFncmF2ZSIsImFyaW5nIiwiYXRpbGRlIiwiY2NlZGlsbGEiLCJlYWN1dGUiLCJlY2lyY3VtZmxleCIsImVkaWVyZXNpcyIsImVncmF2ZSIsImlhY3V0ZSIsImljaXJjdW1mbGV4IiwiaWRpZXJlc2lzIiwiaWdyYXZlIiwibnRpbGRlIiwib2FjdXRlIiwib2NpcmN1bWZsZXgiLCJvZGllcmVzaXMiLCJvZ3JhdmUiLCJvdGlsZGUiLCJzY2Fyb24iLCJ1YWN1dGUiLCJ1Y2lyY3VtZmxleCIsInVkaWVyZXNpcyIsInVncmF2ZSIsInlhY3V0ZSIsInlkaWVyZXNpcyIsInpjYXJvbiJdO3QuRXhwZXJ0Q2hhcnNldD1bIi5ub3RkZWYiLCJzcGFjZSIsImV4Y2xhbXNtYWxsIiwiSHVuZ2FydW1sYXV0c21hbGwiLCJkb2xsYXJvbGRzdHlsZSIsImRvbGxhcnN1cGVyaW9yIiwiYW1wZXJzYW5kc21hbGwiLCJBY3V0ZXNtYWxsIiwicGFyZW5sZWZ0c3VwZXJpb3IiLCJwYXJlbnJpZ2h0c3VwZXJpb3IiLCJ0d29kb3RlbmxlYWRlciIsIm9uZWRvdGVubGVhZGVyIiwiY29tbWEiLCJoeXBoZW4iLCJwZXJpb2QiLCJmcmFjdGlvbiIsInplcm9vbGRzdHlsZSIsIm9uZW9sZHN0eWxlIiwidHdvb2xkc3R5bGUiLCJ0aHJlZW9sZHN0eWxlIiwiZm91cm9sZHN0eWxlIiwiZml2ZW9sZHN0eWxlIiwic2l4b2xkc3R5bGUiLCJzZXZlbm9sZHN0eWxlIiwiZWlnaHRvbGRzdHlsZSIsIm5pbmVvbGRzdHlsZSIsImNvbG9uIiwic2VtaWNvbG9uIiwiY29tbWFzdXBlcmlvciIsInRocmVlcXVhcnRlcnNlbWRhc2giLCJwZXJpb2RzdXBlcmlvciIsInF1ZXN0aW9uc21hbGwiLCJhc3VwZXJpb3IiLCJic3VwZXJpb3IiLCJjZW50c3VwZXJpb3IiLCJkc3VwZXJpb3IiLCJlc3VwZXJpb3IiLCJpc3VwZXJpb3IiLCJsc3VwZXJpb3IiLCJtc3VwZXJpb3IiLCJuc3VwZXJpb3IiLCJvc3VwZXJpb3IiLCJyc3VwZXJpb3IiLCJzc3VwZXJpb3IiLCJ0c3VwZXJpb3IiLCJmZiIsImZpIiwiZmwiLCJmZmkiLCJmZmwiLCJwYXJlbmxlZnRpbmZlcmlvciIsInBhcmVucmlnaHRpbmZlcmlvciIsIkNpcmN1bWZsZXhzbWFsbCIsImh5cGhlbnN1cGVyaW9yIiwiR3JhdmVzbWFsbCIsIkFzbWFsbCIsIkJzbWFsbCIsIkNzbWFsbCIsIkRzbWFsbCIsIkVzbWFsbCIsIkZzbWFsbCIsIkdzbWFsbCIsIkhzbWFsbCIsIklzbWFsbCIsIkpzbWFsbCIsIktzbWFsbCIsIkxzbWFsbCIsIk1zbWFsbCIsIk5zbWFsbCIsIk9zbWFsbCIsIlBzbWFsbCIsIlFzbWFsbCIsIlJzbWFsbCIsIlNzbWFsbCIsIlRzbWFsbCIsIlVzbWFsbCIsIlZzbWFsbCIsIldzbWFsbCIsIlhzbWFsbCIsIllzbWFsbCIsIlpzbWFsbCIsImNvbG9ubW9uZXRhcnkiLCJvbmVmaXR0ZWQiLCJydXBpYWgiLCJUaWxkZXNtYWxsIiwiZXhjbGFtZG93bnNtYWxsIiwiY2VudG9sZHN0eWxlIiwiTHNsYXNoc21hbGwiLCJTY2Fyb25zbWFsbCIsIlpjYXJvbnNtYWxsIiwiRGllcmVzaXNzbWFsbCIsIkJyZXZlc21hbGwiLCJDYXJvbnNtYWxsIiwiRG90YWNjZW50c21hbGwiLCJNYWNyb25zbWFsbCIsImZpZ3VyZWRhc2giLCJoeXBoZW5pbmZlcmlvciIsIk9nb25la3NtYWxsIiwiUmluZ3NtYWxsIiwiQ2VkaWxsYXNtYWxsIiwib25lcXVhcnRlciIsIm9uZWhhbGYiLCJ0aHJlZXF1YXJ0ZXJzIiwicXVlc3Rpb25kb3duc21hbGwiLCJvbmVlaWdodGgiLCJ0aHJlZWVpZ2h0aHMiLCJmaXZlZWlnaHRocyIsInNldmVuZWlnaHRocyIsIm9uZXRoaXJkIiwidHdvdGhpcmRzIiwiemVyb3N1cGVyaW9yIiwib25lc3VwZXJpb3IiLCJ0d29zdXBlcmlvciIsInRocmVlc3VwZXJpb3IiLCJmb3Vyc3VwZXJpb3IiLCJmaXZlc3VwZXJpb3IiLCJzaXhzdXBlcmlvciIsInNldmVuc3VwZXJpb3IiLCJlaWdodHN1cGVyaW9yIiwibmluZXN1cGVyaW9yIiwiemVyb2luZmVyaW9yIiwib25laW5mZXJpb3IiLCJ0d29pbmZlcmlvciIsInRocmVlaW5mZXJpb3IiLCJmb3VyaW5mZXJpb3IiLCJmaXZlaW5mZXJpb3IiLCJzaXhpbmZlcmlvciIsInNldmVuaW5mZXJpb3IiLCJlaWdodGluZmVyaW9yIiwibmluZWluZmVyaW9yIiwiY2VudGluZmVyaW9yIiwiZG9sbGFyaW5mZXJpb3IiLCJwZXJpb2RpbmZlcmlvciIsImNvbW1haW5mZXJpb3IiLCJBZ3JhdmVzbWFsbCIsIkFhY3V0ZXNtYWxsIiwiQWNpcmN1bWZsZXhzbWFsbCIsIkF0aWxkZXNtYWxsIiwiQWRpZXJlc2lzc21hbGwiLCJBcmluZ3NtYWxsIiwiQUVzbWFsbCIsIkNjZWRpbGxhc21hbGwiLCJFZ3JhdmVzbWFsbCIsIkVhY3V0ZXNtYWxsIiwiRWNpcmN1bWZsZXhzbWFsbCIsIkVkaWVyZXNpc3NtYWxsIiwiSWdyYXZlc21hbGwiLCJJYWN1dGVzbWFsbCIsIkljaXJjdW1mbGV4c21hbGwiLCJJZGllcmVzaXNzbWFsbCIsIkV0aHNtYWxsIiwiTnRpbGRlc21hbGwiLCJPZ3JhdmVzbWFsbCIsIk9hY3V0ZXNtYWxsIiwiT2NpcmN1bWZsZXhzbWFsbCIsIk90aWxkZXNtYWxsIiwiT2RpZXJlc2lzc21hbGwiLCJPRXNtYWxsIiwiT3NsYXNoc21hbGwiLCJVZ3JhdmVzbWFsbCIsIlVhY3V0ZXNtYWxsIiwiVWNpcmN1bWZsZXhzbWFsbCIsIlVkaWVyZXNpc3NtYWxsIiwiWWFjdXRlc21hbGwiLCJUaG9ybnNtYWxsIiwiWWRpZXJlc2lzc21hbGwiXTt0LkV4cGVydFN1YnNldENoYXJzZXQ9WyIubm90ZGVmIiwic3BhY2UiLCJkb2xsYXJvbGRzdHlsZSIsImRvbGxhcnN1cGVyaW9yIiwicGFyZW5sZWZ0c3VwZXJpb3IiLCJwYXJlbnJpZ2h0c3VwZXJpb3IiLCJ0d29kb3RlbmxlYWRlciIsIm9uZWRvdGVubGVhZGVyIiwiY29tbWEiLCJoeXBoZW4iLCJwZXJpb2QiLCJmcmFjdGlvbiIsInplcm9vbGRzdHlsZSIsIm9uZW9sZHN0eWxlIiwidHdvb2xkc3R5bGUiLCJ0aHJlZW9sZHN0eWxlIiwiZm91cm9sZHN0eWxlIiwiZml2ZW9sZHN0eWxlIiwic2l4b2xkc3R5bGUiLCJzZXZlbm9sZHN0eWxlIiwiZWlnaHRvbGRzdHlsZSIsIm5pbmVvbGRzdHlsZSIsImNvbG9uIiwic2VtaWNvbG9uIiwiY29tbWFzdXBlcmlvciIsInRocmVlcXVhcnRlcnNlbWRhc2giLCJwZXJpb2RzdXBlcmlvciIsImFzdXBlcmlvciIsImJzdXBlcmlvciIsImNlbnRzdXBlcmlvciIsImRzdXBlcmlvciIsImVzdXBlcmlvciIsImlzdXBlcmlvciIsImxzdXBlcmlvciIsIm1zdXBlcmlvciIsIm5zdXBlcmlvciIsIm9zdXBlcmlvciIsInJzdXBlcmlvciIsInNzdXBlcmlvciIsInRzdXBlcmlvciIsImZmIiwiZmkiLCJmbCIsImZmaSIsImZmbCIsInBhcmVubGVmdGluZmVyaW9yIiwicGFyZW5yaWdodGluZmVyaW9yIiwiaHlwaGVuc3VwZXJpb3IiLCJjb2xvbm1vbmV0YXJ5Iiwib25lZml0dGVkIiwicnVwaWFoIiwiY2VudG9sZHN0eWxlIiwiZmlndXJlZGFzaCIsImh5cGhlbmluZmVyaW9yIiwib25lcXVhcnRlciIsIm9uZWhhbGYiLCJ0aHJlZXF1YXJ0ZXJzIiwib25lZWlnaHRoIiwidGhyZWVlaWdodGhzIiwiZml2ZWVpZ2h0aHMiLCJzZXZlbmVpZ2h0aHMiLCJvbmV0aGlyZCIsInR3b3RoaXJkcyIsInplcm9zdXBlcmlvciIsIm9uZXN1cGVyaW9yIiwidHdvc3VwZXJpb3IiLCJ0aHJlZXN1cGVyaW9yIiwiZm91cnN1cGVyaW9yIiwiZml2ZXN1cGVyaW9yIiwic2l4c3VwZXJpb3IiLCJzZXZlbnN1cGVyaW9yIiwiZWlnaHRzdXBlcmlvciIsIm5pbmVzdXBlcmlvciIsInplcm9pbmZlcmlvciIsIm9uZWluZmVyaW9yIiwidHdvaW5mZXJpb3IiLCJ0aHJlZWluZmVyaW9yIiwiZm91cmluZmVyaW9yIiwiZml2ZWluZmVyaW9yIiwic2l4aW5mZXJpb3IiLCJzZXZlbmluZmVyaW9yIiwiZWlnaHRpbmZlcmlvciIsIm5pbmVpbmZlcmlvciIsImNlbnRpbmZlcmlvciIsImRvbGxhcmluZmVyaW9yIiwicGVyaW9kaW5mZXJpb3IiLCJjb21tYWluZmVyaW9yIl19LChlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuWmFwZkRpbmdiYXRzRW5jb2Rpbmc9dC5XaW5BbnNpRW5jb2Rpbmc9dC5TeW1ib2xTZXRFbmNvZGluZz10LlN0YW5kYXJkRW5jb2Rpbmc9dC5NYWNSb21hbkVuY29kaW5nPXQuRXhwZXJ0RW5jb2Rpbmc9dm9pZCAwO3QuZ2V0RW5jb2Rpbmc9ZnVuY3Rpb24gZ2V0RW5jb2RpbmcoZSl7c3dpdGNoKGUpe2Nhc2UiV2luQW5zaUVuY29kaW5nIjpyZXR1cm4gcztjYXNlIlN0YW5kYXJkRW5jb2RpbmciOnJldHVybiBpO2Nhc2UiTWFjUm9tYW5FbmNvZGluZyI6cmV0dXJuIG47Y2FzZSJTeW1ib2xTZXRFbmNvZGluZyI6cmV0dXJuIG87Y2FzZSJaYXBmRGluZ2JhdHNFbmNvZGluZyI6cmV0dXJuIGM7Y2FzZSJFeHBlcnRFbmNvZGluZyI6cmV0dXJuIGE7Y2FzZSJNYWNFeHBlcnRFbmNvZGluZyI6cmV0dXJuIHI7ZGVmYXVsdDpyZXR1cm4gbnVsbH19O2NvbnN0IGE9WyIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCJzcGFjZSIsImV4Y2xhbXNtYWxsIiwiSHVuZ2FydW1sYXV0c21hbGwiLCIiLCJkb2xsYXJvbGRzdHlsZSIsImRvbGxhcnN1cGVyaW9yIiwiYW1wZXJzYW5kc21hbGwiLCJBY3V0ZXNtYWxsIiwicGFyZW5sZWZ0c3VwZXJpb3IiLCJwYXJlbnJpZ2h0c3VwZXJpb3IiLCJ0d29kb3RlbmxlYWRlciIsIm9uZWRvdGVubGVhZGVyIiwiY29tbWEiLCJoeXBoZW4iLCJwZXJpb2QiLCJmcmFjdGlvbiIsInplcm9vbGRzdHlsZSIsIm9uZW9sZHN0eWxlIiwidHdvb2xkc3R5bGUiLCJ0aHJlZW9sZHN0eWxlIiwiZm91cm9sZHN0eWxlIiwiZml2ZW9sZHN0eWxlIiwic2l4b2xkc3R5bGUiLCJzZXZlbm9sZHN0eWxlIiwiZWlnaHRvbGRzdHlsZSIsIm5pbmVvbGRzdHlsZSIsImNvbG9uIiwic2VtaWNvbG9uIiwiY29tbWFzdXBlcmlvciIsInRocmVlcXVhcnRlcnNlbWRhc2giLCJwZXJpb2RzdXBlcmlvciIsInF1ZXN0aW9uc21hbGwiLCIiLCJhc3VwZXJpb3IiLCJic3VwZXJpb3IiLCJjZW50c3VwZXJpb3IiLCJkc3VwZXJpb3IiLCJlc3VwZXJpb3IiLCIiLCIiLCIiLCJpc3VwZXJpb3IiLCIiLCIiLCJsc3VwZXJpb3IiLCJtc3VwZXJpb3IiLCJuc3VwZXJpb3IiLCJvc3VwZXJpb3IiLCIiLCIiLCJyc3VwZXJpb3IiLCJzc3VwZXJpb3IiLCJ0c3VwZXJpb3IiLCIiLCJmZiIsImZpIiwiZmwiLCJmZmkiLCJmZmwiLCJwYXJlbmxlZnRpbmZlcmlvciIsIiIsInBhcmVucmlnaHRpbmZlcmlvciIsIkNpcmN1bWZsZXhzbWFsbCIsImh5cGhlbnN1cGVyaW9yIiwiR3JhdmVzbWFsbCIsIkFzbWFsbCIsIkJzbWFsbCIsIkNzbWFsbCIsIkRzbWFsbCIsIkVzbWFsbCIsIkZzbWFsbCIsIkdzbWFsbCIsIkhzbWFsbCIsIklzbWFsbCIsIkpzbWFsbCIsIktzbWFsbCIsIkxzbWFsbCIsIk1zbWFsbCIsIk5zbWFsbCIsIk9zbWFsbCIsIlBzbWFsbCIsIlFzbWFsbCIsIlJzbWFsbCIsIlNzbWFsbCIsIlRzbWFsbCIsIlVzbWFsbCIsIlZzbWFsbCIsIldzbWFsbCIsIlhzbWFsbCIsIllzbWFsbCIsIlpzbWFsbCIsImNvbG9ubW9uZXRhcnkiLCJvbmVmaXR0ZWQiLCJydXBpYWgiLCJUaWxkZXNtYWxsIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiZXhjbGFtZG93bnNtYWxsIiwiY2VudG9sZHN0eWxlIiwiTHNsYXNoc21hbGwiLCIiLCIiLCJTY2Fyb25zbWFsbCIsIlpjYXJvbnNtYWxsIiwiRGllcmVzaXNzbWFsbCIsIkJyZXZlc21hbGwiLCJDYXJvbnNtYWxsIiwiIiwiRG90YWNjZW50c21hbGwiLCIiLCIiLCJNYWNyb25zbWFsbCIsIiIsIiIsImZpZ3VyZWRhc2giLCJoeXBoZW5pbmZlcmlvciIsIiIsIiIsIk9nb25la3NtYWxsIiwiUmluZ3NtYWxsIiwiQ2VkaWxsYXNtYWxsIiwiIiwiIiwiIiwib25lcXVhcnRlciIsIm9uZWhhbGYiLCJ0aHJlZXF1YXJ0ZXJzIiwicXVlc3Rpb25kb3duc21hbGwiLCJvbmVlaWdodGgiLCJ0aHJlZWVpZ2h0aHMiLCJmaXZlZWlnaHRocyIsInNldmVuZWlnaHRocyIsIm9uZXRoaXJkIiwidHdvdGhpcmRzIiwiIiwiIiwiemVyb3N1cGVyaW9yIiwib25lc3VwZXJpb3IiLCJ0d29zdXBlcmlvciIsInRocmVlc3VwZXJpb3IiLCJmb3Vyc3VwZXJpb3IiLCJmaXZlc3VwZXJpb3IiLCJzaXhzdXBlcmlvciIsInNldmVuc3VwZXJpb3IiLCJlaWdodHN1cGVyaW9yIiwibmluZXN1cGVyaW9yIiwiemVyb2luZmVyaW9yIiwib25laW5mZXJpb3IiLCJ0d29pbmZlcmlvciIsInRocmVlaW5mZXJpb3IiLCJmb3VyaW5mZXJpb3IiLCJmaXZlaW5mZXJpb3IiLCJzaXhpbmZlcmlvciIsInNldmVuaW5mZXJpb3IiLCJlaWdodGluZmVyaW9yIiwibmluZWluZmVyaW9yIiwiY2VudGluZmVyaW9yIiwiZG9sbGFyaW5mZXJpb3IiLCJwZXJpb2RpbmZlcmlvciIsImNvbW1haW5mZXJpb3IiLCJBZ3JhdmVzbWFsbCIsIkFhY3V0ZXNtYWxsIiwiQWNpcmN1bWZsZXhzbWFsbCIsIkF0aWxkZXNtYWxsIiwiQWRpZXJlc2lzc21hbGwiLCJBcmluZ3NtYWxsIiwiQUVzbWFsbCIsIkNjZWRpbGxhc21hbGwiLCJFZ3JhdmVzbWFsbCIsIkVhY3V0ZXNtYWxsIiwiRWNpcmN1bWZsZXhzbWFsbCIsIkVkaWVyZXNpc3NtYWxsIiwiSWdyYXZlc21hbGwiLCJJYWN1dGVzbWFsbCIsIkljaXJjdW1mbGV4c21hbGwiLCJJZGllcmVzaXNzbWFsbCIsIkV0aHNtYWxsIiwiTnRpbGRlc21hbGwiLCJPZ3JhdmVzbWFsbCIsIk9hY3V0ZXNtYWxsIiwiT2NpcmN1bWZsZXhzbWFsbCIsIk90aWxkZXNtYWxsIiwiT2RpZXJlc2lzc21hbGwiLCJPRXNtYWxsIiwiT3NsYXNoc21hbGwiLCJVZ3JhdmVzbWFsbCIsIlVhY3V0ZXNtYWxsIiwiVWNpcmN1bWZsZXhzbWFsbCIsIlVkaWVyZXNpc3NtYWxsIiwiWWFjdXRlc21hbGwiLCJUaG9ybnNtYWxsIiwiWWRpZXJlc2lzc21hbGwiXTt0LkV4cGVydEVuY29kaW5nPWE7Y29uc3Qgcj1bIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsInNwYWNlIiwiZXhjbGFtc21hbGwiLCJIdW5nYXJ1bWxhdXRzbWFsbCIsImNlbnRvbGRzdHlsZSIsImRvbGxhcm9sZHN0eWxlIiwiZG9sbGFyc3VwZXJpb3IiLCJhbXBlcnNhbmRzbWFsbCIsIkFjdXRlc21hbGwiLCJwYXJlbmxlZnRzdXBlcmlvciIsInBhcmVucmlnaHRzdXBlcmlvciIsInR3b2RvdGVubGVhZGVyIiwib25lZG90ZW5sZWFkZXIiLCJjb21tYSIsImh5cGhlbiIsInBlcmlvZCIsImZyYWN0aW9uIiwiemVyb29sZHN0eWxlIiwib25lb2xkc3R5bGUiLCJ0d29vbGRzdHlsZSIsInRocmVlb2xkc3R5bGUiLCJmb3Vyb2xkc3R5bGUiLCJmaXZlb2xkc3R5bGUiLCJzaXhvbGRzdHlsZSIsInNldmVub2xkc3R5bGUiLCJlaWdodG9sZHN0eWxlIiwibmluZW9sZHN0eWxlIiwiY29sb24iLCJzZW1pY29sb24iLCIiLCJ0aHJlZXF1YXJ0ZXJzZW1kYXNoIiwiIiwicXVlc3Rpb25zbWFsbCIsIiIsIiIsIiIsIiIsIkV0aHNtYWxsIiwiIiwiIiwib25lcXVhcnRlciIsIm9uZWhhbGYiLCJ0aHJlZXF1YXJ0ZXJzIiwib25lZWlnaHRoIiwidGhyZWVlaWdodGhzIiwiZml2ZWVpZ2h0aHMiLCJzZXZlbmVpZ2h0aHMiLCJvbmV0aGlyZCIsInR3b3RoaXJkcyIsIiIsIiIsIiIsIiIsIiIsIiIsImZmIiwiZmkiLCJmbCIsImZmaSIsImZmbCIsInBhcmVubGVmdGluZmVyaW9yIiwiIiwicGFyZW5yaWdodGluZmVyaW9yIiwiQ2lyY3VtZmxleHNtYWxsIiwiaHlwaGVuaW5mZXJpb3IiLCJHcmF2ZXNtYWxsIiwiQXNtYWxsIiwiQnNtYWxsIiwiQ3NtYWxsIiwiRHNtYWxsIiwiRXNtYWxsIiwiRnNtYWxsIiwiR3NtYWxsIiwiSHNtYWxsIiwiSXNtYWxsIiwiSnNtYWxsIiwiS3NtYWxsIiwiTHNtYWxsIiwiTXNtYWxsIiwiTnNtYWxsIiwiT3NtYWxsIiwiUHNtYWxsIiwiUXNtYWxsIiwiUnNtYWxsIiwiU3NtYWxsIiwiVHNtYWxsIiwiVXNtYWxsIiwiVnNtYWxsIiwiV3NtYWxsIiwiWHNtYWxsIiwiWXNtYWxsIiwiWnNtYWxsIiwiY29sb25tb25ldGFyeSIsIm9uZWZpdHRlZCIsInJ1cGlhaCIsIlRpbGRlc21hbGwiLCIiLCIiLCJhc3VwZXJpb3IiLCJjZW50c3VwZXJpb3IiLCIiLCIiLCIiLCIiLCJBYWN1dGVzbWFsbCIsIkFncmF2ZXNtYWxsIiwiQWNpcmN1bWZsZXhzbWFsbCIsIkFkaWVyZXNpc3NtYWxsIiwiQXRpbGRlc21hbGwiLCJBcmluZ3NtYWxsIiwiQ2NlZGlsbGFzbWFsbCIsIkVhY3V0ZXNtYWxsIiwiRWdyYXZlc21hbGwiLCJFY2lyY3VtZmxleHNtYWxsIiwiRWRpZXJlc2lzc21hbGwiLCJJYWN1dGVzbWFsbCIsIklncmF2ZXNtYWxsIiwiSWNpcmN1bWZsZXhzbWFsbCIsIklkaWVyZXNpc3NtYWxsIiwiTnRpbGRlc21hbGwiLCJPYWN1dGVzbWFsbCIsIk9ncmF2ZXNtYWxsIiwiT2NpcmN1bWZsZXhzbWFsbCIsIk9kaWVyZXNpc3NtYWxsIiwiT3RpbGRlc21hbGwiLCJVYWN1dGVzbWFsbCIsIlVncmF2ZXNtYWxsIiwiVWNpcmN1bWZsZXhzbWFsbCIsIlVkaWVyZXNpc3NtYWxsIiwiIiwiZWlnaHRzdXBlcmlvciIsImZvdXJpbmZlcmlvciIsInRocmVlaW5mZXJpb3IiLCJzaXhpbmZlcmlvciIsImVpZ2h0aW5mZXJpb3IiLCJzZXZlbmluZmVyaW9yIiwiU2Nhcm9uc21hbGwiLCIiLCJjZW50aW5mZXJpb3IiLCJ0d29pbmZlcmlvciIsIiIsIkRpZXJlc2lzc21hbGwiLCIiLCJDYXJvbnNtYWxsIiwib3N1cGVyaW9yIiwiZml2ZWluZmVyaW9yIiwiIiwiY29tbWFpbmZlcmlvciIsInBlcmlvZGluZmVyaW9yIiwiWWFjdXRlc21hbGwiLCIiLCJkb2xsYXJpbmZlcmlvciIsIiIsIiIsIlRob3Juc21hbGwiLCIiLCJuaW5laW5mZXJpb3IiLCJ6ZXJvaW5mZXJpb3IiLCJaY2Fyb25zbWFsbCIsIkFFc21hbGwiLCJPc2xhc2hzbWFsbCIsInF1ZXN0aW9uZG93bnNtYWxsIiwib25laW5mZXJpb3IiLCJMc2xhc2hzbWFsbCIsIiIsIiIsIiIsIiIsIiIsIiIsIkNlZGlsbGFzbWFsbCIsIiIsIiIsIiIsIiIsIiIsIk9Fc21hbGwiLCJmaWd1cmVkYXNoIiwiaHlwaGVuc3VwZXJpb3IiLCIiLCIiLCIiLCIiLCJleGNsYW1kb3duc21hbGwiLCIiLCJZZGllcmVzaXNzbWFsbCIsIiIsIm9uZXN1cGVyaW9yIiwidHdvc3VwZXJpb3IiLCJ0aHJlZXN1cGVyaW9yIiwiZm91cnN1cGVyaW9yIiwiZml2ZXN1cGVyaW9yIiwic2l4c3VwZXJpb3IiLCJzZXZlbnN1cGVyaW9yIiwibmluZXN1cGVyaW9yIiwiemVyb3N1cGVyaW9yIiwiIiwiZXN1cGVyaW9yIiwicnN1cGVyaW9yIiwidHN1cGVyaW9yIiwiIiwiIiwiaXN1cGVyaW9yIiwic3N1cGVyaW9yIiwiZHN1cGVyaW9yIiwiIiwiIiwiIiwiIiwiIiwibHN1cGVyaW9yIiwiT2dvbmVrc21hbGwiLCJCcmV2ZXNtYWxsIiwiTWFjcm9uc21hbGwiLCJic3VwZXJpb3IiLCJuc3VwZXJpb3IiLCJtc3VwZXJpb3IiLCJjb21tYXN1cGVyaW9yIiwicGVyaW9kc3VwZXJpb3IiLCJEb3RhY2NlbnRzbWFsbCIsIlJpbmdzbWFsbCIsIiIsIiIsIiIsIiJdLG49WyIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCJzcGFjZSIsImV4Y2xhbSIsInF1b3RlZGJsIiwibnVtYmVyc2lnbiIsImRvbGxhciIsInBlcmNlbnQiLCJhbXBlcnNhbmQiLCJxdW90ZXNpbmdsZSIsInBhcmVubGVmdCIsInBhcmVucmlnaHQiLCJhc3RlcmlzayIsInBsdXMiLCJjb21tYSIsImh5cGhlbiIsInBlcmlvZCIsInNsYXNoIiwiemVybyIsIm9uZSIsInR3byIsInRocmVlIiwiZm91ciIsImZpdmUiLCJzaXgiLCJzZXZlbiIsImVpZ2h0IiwibmluZSIsImNvbG9uIiwic2VtaWNvbG9uIiwibGVzcyIsImVxdWFsIiwiZ3JlYXRlciIsInF1ZXN0aW9uIiwiYXQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJHIiwiSCIsIkkiLCJKIiwiSyIsIkwiLCJNIiwiTiIsIk8iLCJQIiwiUSIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiVyIsIlgiLCJZIiwiWiIsImJyYWNrZXRsZWZ0IiwiYmFja3NsYXNoIiwiYnJhY2tldHJpZ2h0IiwiYXNjaWljaXJjdW0iLCJ1bmRlcnNjb3JlIiwiZ3JhdmUiLCJhIiwiYiIsImMiLCJkIiwiZSIsImYiLCJnIiwiaCIsImkiLCJqIiwiayIsImwiLCJtIiwibiIsIm8iLCJwIiwicSIsInIiLCJzIiwidCIsInUiLCJ2IiwidyIsIngiLCJ5IiwieiIsImJyYWNlbGVmdCIsImJhciIsImJyYWNlcmlnaHQiLCJhc2NpaXRpbGRlIiwiIiwiQWRpZXJlc2lzIiwiQXJpbmciLCJDY2VkaWxsYSIsIkVhY3V0ZSIsIk50aWxkZSIsIk9kaWVyZXNpcyIsIlVkaWVyZXNpcyIsImFhY3V0ZSIsImFncmF2ZSIsImFjaXJjdW1mbGV4IiwiYWRpZXJlc2lzIiwiYXRpbGRlIiwiYXJpbmciLCJjY2VkaWxsYSIsImVhY3V0ZSIsImVncmF2ZSIsImVjaXJjdW1mbGV4IiwiZWRpZXJlc2lzIiwiaWFjdXRlIiwiaWdyYXZlIiwiaWNpcmN1bWZsZXgiLCJpZGllcmVzaXMiLCJudGlsZGUiLCJvYWN1dGUiLCJvZ3JhdmUiLCJvY2lyY3VtZmxleCIsIm9kaWVyZXNpcyIsIm90aWxkZSIsInVhY3V0ZSIsInVncmF2ZSIsInVjaXJjdW1mbGV4IiwidWRpZXJlc2lzIiwiZGFnZ2VyIiwiZGVncmVlIiwiY2VudCIsInN0ZXJsaW5nIiwic2VjdGlvbiIsImJ1bGxldCIsInBhcmFncmFwaCIsImdlcm1hbmRibHMiLCJyZWdpc3RlcmVkIiwiY29weXJpZ2h0IiwidHJhZGVtYXJrIiwiYWN1dGUiLCJkaWVyZXNpcyIsIm5vdGVxdWFsIiwiQUUiLCJPc2xhc2giLCJpbmZpbml0eSIsInBsdXNtaW51cyIsImxlc3NlcXVhbCIsImdyZWF0ZXJlcXVhbCIsInllbiIsIm11IiwicGFydGlhbGRpZmYiLCJzdW1tYXRpb24iLCJwcm9kdWN0IiwicGkiLCJpbnRlZ3JhbCIsIm9yZGZlbWluaW5lIiwib3JkbWFzY3VsaW5lIiwiT21lZ2EiLCJhZSIsIm9zbGFzaCIsInF1ZXN0aW9uZG93biIsImV4Y2xhbWRvd24iLCJsb2dpY2Fsbm90IiwicmFkaWNhbCIsImZsb3JpbiIsImFwcHJveGVxdWFsIiwiRGVsdGEiLCJndWlsbGVtb3RsZWZ0IiwiZ3VpbGxlbW90cmlnaHQiLCJlbGxpcHNpcyIsInNwYWNlIiwiQWdyYXZlIiwiQXRpbGRlIiwiT3RpbGRlIiwiT0UiLCJvZSIsImVuZGFzaCIsImVtZGFzaCIsInF1b3RlZGJsbGVmdCIsInF1b3RlZGJscmlnaHQiLCJxdW90ZWxlZnQiLCJxdW90ZXJpZ2h0IiwiZGl2aWRlIiwibG96ZW5nZSIsInlkaWVyZXNpcyIsIllkaWVyZXNpcyIsImZyYWN0aW9uIiwiY3VycmVuY3kiLCJndWlsc2luZ2xsZWZ0IiwiZ3VpbHNpbmdscmlnaHQiLCJmaSIsImZsIiwiZGFnZ2VyZGJsIiwicGVyaW9kY2VudGVyZWQiLCJxdW90ZXNpbmdsYmFzZSIsInF1b3RlZGJsYmFzZSIsInBlcnRob3VzYW5kIiwiQWNpcmN1bWZsZXgiLCJFY2lyY3VtZmxleCIsIkFhY3V0ZSIsIkVkaWVyZXNpcyIsIkVncmF2ZSIsIklhY3V0ZSIsIkljaXJjdW1mbGV4IiwiSWRpZXJlc2lzIiwiSWdyYXZlIiwiT2FjdXRlIiwiT2NpcmN1bWZsZXgiLCJhcHBsZSIsIk9ncmF2ZSIsIlVhY3V0ZSIsIlVjaXJjdW1mbGV4IiwiVWdyYXZlIiwiZG90bGVzc2kiLCJjaXJjdW1mbGV4IiwidGlsZGUiLCJtYWNyb24iLCJicmV2ZSIsImRvdGFjY2VudCIsInJpbmciLCJjZWRpbGxhIiwiaHVuZ2FydW1sYXV0Iiwib2dvbmVrIiwiY2Fyb24iXTt0Lk1hY1JvbWFuRW5jb2Rpbmc9bjtjb25zdCBpPVsiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwic3BhY2UiLCJleGNsYW0iLCJxdW90ZWRibCIsIm51bWJlcnNpZ24iLCJkb2xsYXIiLCJwZXJjZW50IiwiYW1wZXJzYW5kIiwicXVvdGVyaWdodCIsInBhcmVubGVmdCIsInBhcmVucmlnaHQiLCJhc3RlcmlzayIsInBsdXMiLCJjb21tYSIsImh5cGhlbiIsInBlcmlvZCIsInNsYXNoIiwiemVybyIsIm9uZSIsInR3byIsInRocmVlIiwiZm91ciIsImZpdmUiLCJzaXgiLCJzZXZlbiIsImVpZ2h0IiwibmluZSIsImNvbG9uIiwic2VtaWNvbG9uIiwibGVzcyIsImVxdWFsIiwiZ3JlYXRlciIsInF1ZXN0aW9uIiwiYXQiLCJBIiwiQiIsIkMiLCJEIiwiRSIsIkYiLCJHIiwiSCIsIkkiLCJKIiwiSyIsIkwiLCJNIiwiTiIsIk8iLCJQIiwiUSIsIlIiLCJTIiwiVCIsIlUiLCJWIiwiVyIsIlgiLCJZIiwiWiIsImJyYWNrZXRsZWZ0IiwiYmFja3NsYXNoIiwiYnJhY2tldHJpZ2h0IiwiYXNjaWljaXJjdW0iLCJ1bmRlcnNjb3JlIiwicXVvdGVsZWZ0IiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiZyIsImgiLCJpIiwiaiIsImsiLCJsIiwibSIsIm4iLCJvIiwicCIsInEiLCJyIiwicyIsInQiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJicmFjZWxlZnQiLCJiYXIiLCJicmFjZXJpZ2h0IiwiYXNjaWl0aWxkZSIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsImV4Y2xhbWRvd24iLCJjZW50Iiwic3RlcmxpbmciLCJmcmFjdGlvbiIsInllbiIsImZsb3JpbiIsInNlY3Rpb24iLCJjdXJyZW5jeSIsInF1b3Rlc2luZ2xlIiwicXVvdGVkYmxsZWZ0IiwiZ3VpbGxlbW90bGVmdCIsImd1aWxzaW5nbGxlZnQiLCJndWlsc2luZ2xyaWdodCIsImZpIiwiZmwiLCIiLCJlbmRhc2giLCJkYWdnZXIiLCJkYWdnZXJkYmwiLCJwZXJpb2RjZW50ZXJlZCIsIiIsInBhcmFncmFwaCIsImJ1bGxldCIsInF1b3Rlc2luZ2xiYXNlIiwicXVvdGVkYmxiYXNlIiwicXVvdGVkYmxyaWdodCIsImd1aWxsZW1vdHJpZ2h0IiwiZWxsaXBzaXMiLCJwZXJ0aG91c2FuZCIsIiIsInF1ZXN0aW9uZG93biIsIiIsImdyYXZlIiwiYWN1dGUiLCJjaXJjdW1mbGV4IiwidGlsZGUiLCJtYWNyb24iLCJicmV2ZSIsImRvdGFjY2VudCIsImRpZXJlc2lzIiwiIiwicmluZyIsImNlZGlsbGEiLCIiLCJodW5nYXJ1bWxhdXQiLCJvZ29uZWsiLCJjYXJvbiIsImVtZGFzaCIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIkFFIiwiIiwib3JkZmVtaW5pbmUiLCIiLCIiLCIiLCIiLCJMc2xhc2giLCJPc2xhc2giLCJPRSIsIm9yZG1hc2N1bGluZSIsIiIsIiIsIiIsIiIsIiIsImFlIiwiIiwiIiwiIiwiZG90bGVzc2kiLCIiLCIiLCJsc2xhc2giLCJvc2xhc2giLCJvZSIsImdlcm1hbmRibHMiLCIiLCIiLCIiLCIiXTt0LlN0YW5kYXJkRW5jb2Rpbmc9aTtjb25zdCBzPVsiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwic3BhY2UiLCJleGNsYW0iLCJxdW90ZWRibCIsIm51bWJlcnNpZ24iLCJkb2xsYXIiLCJwZXJjZW50IiwiYW1wZXJzYW5kIiwicXVvdGVzaW5nbGUiLCJwYXJlbmxlZnQiLCJwYXJlbnJpZ2h0IiwiYXN0ZXJpc2siLCJwbHVzIiwiY29tbWEiLCJoeXBoZW4iLCJwZXJpb2QiLCJzbGFzaCIsInplcm8iLCJvbmUiLCJ0d28iLCJ0aHJlZSIsImZvdXIiLCJmaXZlIiwic2l4Iiwic2V2ZW4iLCJlaWdodCIsIm5pbmUiLCJjb2xvbiIsInNlbWljb2xvbiIsImxlc3MiLCJlcXVhbCIsImdyZWF0ZXIiLCJxdWVzdGlvbiIsImF0IiwiQSIsIkIiLCJDIiwiRCIsIkUiLCJGIiwiRyIsIkgiLCJJIiwiSiIsIksiLCJMIiwiTSIsIk4iLCJPIiwiUCIsIlEiLCJSIiwiUyIsIlQiLCJVIiwiViIsIlciLCJYIiwiWSIsIloiLCJicmFja2V0bGVmdCIsImJhY2tzbGFzaCIsImJyYWNrZXRyaWdodCIsImFzY2lpY2lyY3VtIiwidW5kZXJzY29yZSIsImdyYXZlIiwiYSIsImIiLCJjIiwiZCIsImUiLCJmIiwiZyIsImgiLCJpIiwiaiIsImsiLCJsIiwibSIsIm4iLCJvIiwicCIsInEiLCJyIiwicyIsInQiLCJ1IiwidiIsInciLCJ4IiwieSIsInoiLCJicmFjZWxlZnQiLCJiYXIiLCJicmFjZXJpZ2h0IiwiYXNjaWl0aWxkZSIsImJ1bGxldCIsIkV1cm8iLCJidWxsZXQiLCJxdW90ZXNpbmdsYmFzZSIsImZsb3JpbiIsInF1b3RlZGJsYmFzZSIsImVsbGlwc2lzIiwiZGFnZ2VyIiwiZGFnZ2VyZGJsIiwiY2lyY3VtZmxleCIsInBlcnRob3VzYW5kIiwiU2Nhcm9uIiwiZ3VpbHNpbmdsbGVmdCIsIk9FIiwiYnVsbGV0IiwiWmNhcm9uIiwiYnVsbGV0IiwiYnVsbGV0IiwicXVvdGVsZWZ0IiwicXVvdGVyaWdodCIsInF1b3RlZGJsbGVmdCIsInF1b3RlZGJscmlnaHQiLCJidWxsZXQiLCJlbmRhc2giLCJlbWRhc2giLCJ0aWxkZSIsInRyYWRlbWFyayIsInNjYXJvbiIsImd1aWxzaW5nbHJpZ2h0Iiwib2UiLCJidWxsZXQiLCJ6Y2Fyb24iLCJZZGllcmVzaXMiLCJzcGFjZSIsImV4Y2xhbWRvd24iLCJjZW50Iiwic3RlcmxpbmciLCJjdXJyZW5jeSIsInllbiIsImJyb2tlbmJhciIsInNlY3Rpb24iLCJkaWVyZXNpcyIsImNvcHlyaWdodCIsIm9yZGZlbWluaW5lIiwiZ3VpbGxlbW90bGVmdCIsImxvZ2ljYWxub3QiLCJoeXBoZW4iLCJyZWdpc3RlcmVkIiwibWFjcm9uIiwiZGVncmVlIiwicGx1c21pbnVzIiwidHdvc3VwZXJpb3IiLCJ0aHJlZXN1cGVyaW9yIiwiYWN1dGUiLCJtdSIsInBhcmFncmFwaCIsInBlcmlvZGNlbnRlcmVkIiwiY2VkaWxsYSIsIm9uZXN1cGVyaW9yIiwib3JkbWFzY3VsaW5lIiwiZ3VpbGxlbW90cmlnaHQiLCJvbmVxdWFydGVyIiwib25laGFsZiIsInRocmVlcXVhcnRlcnMiLCJxdWVzdGlvbmRvd24iLCJBZ3JhdmUiLCJBYWN1dGUiLCJBY2lyY3VtZmxleCIsIkF0aWxkZSIsIkFkaWVyZXNpcyIsIkFyaW5nIiwiQUUiLCJDY2VkaWxsYSIsIkVncmF2ZSIsIkVhY3V0ZSIsIkVjaXJjdW1mbGV4IiwiRWRpZXJlc2lzIiwiSWdyYXZlIiwiSWFjdXRlIiwiSWNpcmN1bWZsZXgiLCJJZGllcmVzaXMiLCJFdGgiLCJOdGlsZGUiLCJPZ3JhdmUiLCJPYWN1dGUiLCJPY2lyY3VtZmxleCIsIk90aWxkZSIsIk9kaWVyZXNpcyIsIm11bHRpcGx5IiwiT3NsYXNoIiwiVWdyYXZlIiwiVWFjdXRlIiwiVWNpcmN1bWZsZXgiLCJVZGllcmVzaXMiLCJZYWN1dGUiLCJUaG9ybiIsImdlcm1hbmRibHMiLCJhZ3JhdmUiLCJhYWN1dGUiLCJhY2lyY3VtZmxleCIsImF0aWxkZSIsImFkaWVyZXNpcyIsImFyaW5nIiwiYWUiLCJjY2VkaWxsYSIsImVncmF2ZSIsImVhY3V0ZSIsImVjaXJjdW1mbGV4IiwiZWRpZXJlc2lzIiwiaWdyYXZlIiwiaWFjdXRlIiwiaWNpcmN1bWZsZXgiLCJpZGllcmVzaXMiLCJldGgiLCJudGlsZGUiLCJvZ3JhdmUiLCJvYWN1dGUiLCJvY2lyY3VtZmxleCIsIm90aWxkZSIsIm9kaWVyZXNpcyIsImRpdmlkZSIsIm9zbGFzaCIsInVncmF2ZSIsInVhY3V0ZSIsInVjaXJjdW1mbGV4IiwidWRpZXJlc2lzIiwieWFjdXRlIiwidGhvcm4iLCJ5ZGllcmVzaXMiXTt0LldpbkFuc2lFbmNvZGluZz1zO2NvbnN0IG89WyIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCIiLCJzcGFjZSIsImV4Y2xhbSIsInVuaXZlcnNhbCIsIm51bWJlcnNpZ24iLCJleGlzdGVudGlhbCIsInBlcmNlbnQiLCJhbXBlcnNhbmQiLCJzdWNodGhhdCIsInBhcmVubGVmdCIsInBhcmVucmlnaHQiLCJhc3Rlcmlza21hdGgiLCJwbHVzIiwiY29tbWEiLCJtaW51cyIsInBlcmlvZCIsInNsYXNoIiwiemVybyIsIm9uZSIsInR3byIsInRocmVlIiwiZm91ciIsImZpdmUiLCJzaXgiLCJzZXZlbiIsImVpZ2h0IiwibmluZSIsImNvbG9uIiwic2VtaWNvbG9uIiwibGVzcyIsImVxdWFsIiwiZ3JlYXRlciIsInF1ZXN0aW9uIiwiY29uZ3J1ZW50IiwiQWxwaGEiLCJCZXRhIiwiQ2hpIiwiRGVsdGEiLCJFcHNpbG9uIiwiUGhpIiwiR2FtbWEiLCJFdGEiLCJJb3RhIiwidGhldGExIiwiS2FwcGEiLCJMYW1iZGEiLCJNdSIsIk51IiwiT21pY3JvbiIsIlBpIiwiVGhldGEiLCJSaG8iLCJTaWdtYSIsIlRhdSIsIlVwc2lsb24iLCJzaWdtYTEiLCJPbWVnYSIsIlhpIiwiUHNpIiwiWmV0YSIsImJyYWNrZXRsZWZ0IiwidGhlcmVmb3JlIiwiYnJhY2tldHJpZ2h0IiwicGVycGVuZGljdWxhciIsInVuZGVyc2NvcmUiLCJyYWRpY2FsZXgiLCJhbHBoYSIsImJldGEiLCJjaGkiLCJkZWx0YSIsImVwc2lsb24iLCJwaGkiLCJnYW1tYSIsImV0YSIsImlvdGEiLCJwaGkxIiwia2FwcGEiLCJsYW1iZGEiLCJtdSIsIm51Iiwib21pY3JvbiIsInBpIiwidGhldGEiLCJyaG8iLCJzaWdtYSIsInRhdSIsInVwc2lsb24iLCJvbWVnYTEiLCJvbWVnYSIsInhpIiwicHNpIiwiemV0YSIsImJyYWNlbGVmdCIsImJhciIsImJyYWNlcmlnaHQiLCJzaW1pbGFyIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiIiwiRXVybyIsIlVwc2lsb24xIiwibWludXRlIiwibGVzc2VxdWFsIiwiZnJhY3Rpb24iLCJpbmZpbml0eSIsImZsb3JpbiIsImNsdWIiLCJkaWFtb25kIiwiaGVhcnQiLCJzcGFkZSIsImFycm93Ym90aCIsImFycm93bGVmdCIsImFycm93dXAiLCJhcnJvd3JpZ2h0IiwiYXJyb3dkb3duIiwiZGVncmVlIiwicGx1c21pbnVzIiwic2Vjb25kIiwiZ3JlYXRlcmVxdWFsIiwibXVsdGlwbHkiLCJwcm9wb3J0aW9uYWwiLCJwYXJ0aWFsZGlmZiIsImJ1bGxldCIsImRpdmlkZSIsIm5vdGVxdWFsIiwiZXF1aXZhbGVuY2UiLCJhcHByb3hlcXVhbCIsImVsbGlwc2lzIiwiYXJyb3d2ZXJ0ZXgiLCJhcnJvd2hvcml6ZXgiLCJjYXJyaWFnZXJldHVybiIsImFsZXBoIiwiSWZyYWt0dXIiLCJSZnJha3R1ciIsIndlaWVyc3RyYXNzIiwiY2lyY2xlbXVsdGlwbHkiLCJjaXJjbGVwbHVzIiwiZW1wdHlzZXQiLCJpbnRlcnNlY3Rpb24iLCJ1bmlvbiIsInByb3BlcnN1cGVyc2V0IiwicmVmbGV4c3VwZXJzZXQiLCJub3RzdWJzZXQiLCJwcm9wZXJzdWJzZXQiLCJyZWZsZXhzdWJzZXQiLCJlbGVtZW50Iiwibm90ZWxlbWVudCIsImFuZ2xlIiwiZ3JhZGllbnQiLCJyZWdpc3RlcnNlcmlmIiwiY29weXJpZ2h0c2VyaWYiLCJ0cmFkZW1hcmtzZXJpZiIsInByb2R1Y3QiLCJyYWRpY2FsIiwiZG90bWF0aCIsImxvZ2ljYWxub3QiLCJsb2dpY2FsYW5kIiwibG9naWNhbG9yIiwiYXJyb3dkYmxib3RoIiwiYXJyb3dkYmxsZWZ0IiwiYXJyb3dkYmx1cCIsImFycm93ZGJscmlnaHQiLCJhcnJvd2RibGRvd24iLCJsb3plbmdlIiwiYW5nbGVsZWZ0IiwicmVnaXN0ZXJzYW5zIiwiY29weXJpZ2h0c2FucyIsInRyYWRlbWFya3NhbnMiLCJzdW1tYXRpb24iLCJwYXJlbmxlZnR0cCIsInBhcmVubGVmdGV4IiwicGFyZW5sZWZ0YnQiLCJicmFja2V0bGVmdHRwIiwiYnJhY2tldGxlZnRleCIsImJyYWNrZXRsZWZ0YnQiLCJicmFjZWxlZnR0cCIsImJyYWNlbGVmdG1pZCIsImJyYWNlbGVmdGJ0IiwiYnJhY2VleCIsIiIsImFuZ2xlcmlnaHQiLCJpbnRlZ3JhbCIsImludGVncmFsdHAiLCJpbnRlZ3JhbGV4IiwiaW50ZWdyYWxidCIsInBhcmVucmlnaHR0cCIsInBhcmVucmlnaHRleCIsInBhcmVucmlnaHRidCIsImJyYWNrZXRyaWdodHRwIiwiYnJhY2tldHJpZ2h0ZXgiLCJicmFja2V0cmlnaHRidCIsImJyYWNlcmlnaHR0cCIsImJyYWNlcmlnaHRtaWQiLCJicmFjZXJpZ2h0YnQiLCIiXTt0LlN5bWJvbFNldEVuY29kaW5nPW87Y29uc3QgYz1bIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsInNwYWNlIiwiYTEiLCJhMiIsImEyMDIiLCJhMyIsImE0IiwiYTUiLCJhMTE5IiwiYTExOCIsImExMTciLCJhMTEiLCJhMTIiLCJhMTMiLCJhMTQiLCJhMTUiLCJhMTYiLCJhMTA1IiwiYTE3IiwiYTE4IiwiYTE5IiwiYTIwIiwiYTIxIiwiYTIyIiwiYTIzIiwiYTI0IiwiYTI1IiwiYTI2IiwiYTI3IiwiYTI4IiwiYTYiLCJhNyIsImE4IiwiYTkiLCJhMTAiLCJhMjkiLCJhMzAiLCJhMzEiLCJhMzIiLCJhMzMiLCJhMzQiLCJhMzUiLCJhMzYiLCJhMzciLCJhMzgiLCJhMzkiLCJhNDAiLCJhNDEiLCJhNDIiLCJhNDMiLCJhNDQiLCJhNDUiLCJhNDYiLCJhNDciLCJhNDgiLCJhNDkiLCJhNTAiLCJhNTEiLCJhNTIiLCJhNTMiLCJhNTQiLCJhNTUiLCJhNTYiLCJhNTciLCJhNTgiLCJhNTkiLCJhNjAiLCJhNjEiLCJhNjIiLCJhNjMiLCJhNjQiLCJhNjUiLCJhNjYiLCJhNjciLCJhNjgiLCJhNjkiLCJhNzAiLCJhNzEiLCJhNzIiLCJhNzMiLCJhNzQiLCJhMjAzIiwiYTc1IiwiYTIwNCIsImE3NiIsImE3NyIsImE3OCIsImE3OSIsImE4MSIsImE4MiIsImE4MyIsImE4NCIsImE5NyIsImE5OCIsImE5OSIsImExMDAiLCIiLCJhODkiLCJhOTAiLCJhOTMiLCJhOTQiLCJhOTEiLCJhOTIiLCJhMjA1IiwiYTg1IiwiYTIwNiIsImE4NiIsImE4NyIsImE4OCIsImE5NSIsImE5NiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsIiIsImExMDEiLCJhMTAyIiwiYTEwMyIsImExMDQiLCJhMTA2IiwiYTEwNyIsImExMDgiLCJhMTEyIiwiYTExMSIsImExMTAiLCJhMTA5IiwiYTEyMCIsImExMjEiLCJhMTIyIiwiYTEyMyIsImExMjQiLCJhMTI1IiwiYTEyNiIsImExMjciLCJhMTI4IiwiYTEyOSIsImExMzAiLCJhMTMxIiwiYTEzMiIsImExMzMiLCJhMTM0IiwiYTEzNSIsImExMzYiLCJhMTM3IiwiYTEzOCIsImExMzkiLCJhMTQwIiwiYTE0MSIsImExNDIiLCJhMTQzIiwiYTE0NCIsImExNDUiLCJhMTQ2IiwiYTE0NyIsImExNDgiLCJhMTQ5IiwiYTE1MCIsImExNTEiLCJhMTUyIiwiYTE1MyIsImExNTQiLCJhMTU1IiwiYTE1NiIsImExNTciLCJhMTU4IiwiYTE1OSIsImExNjAiLCJhMTYxIiwiYTE2MyIsImExNjQiLCJhMTk2IiwiYTE2NSIsImExOTIiLCJhMTY2IiwiYTE2NyIsImExNjgiLCJhMTY5IiwiYTE3MCIsImExNzEiLCJhMTcyIiwiYTE3MyIsImExNjIiLCJhMTc0IiwiYTE3NSIsImExNzYiLCJhMTc3IiwiYTE3OCIsImExNzkiLCJhMTkzIiwiYTE4MCIsImExOTkiLCJhMTgxIiwiYTIwMCIsImExODIiLCIiLCJhMjAxIiwiYTE4MyIsImExODQiLCJhMTk3IiwiYTE4NSIsImExOTQiLCJhMTk4IiwiYTE4NiIsImExOTUiLCJhMTg3IiwiYTE4OCIsImExODkiLCJhMTkwIiwiYTE5MSIsIiJdO3QuWmFwZkRpbmdiYXRzRW5jb2Rpbmc9Y30sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlNFQUNfQU5BTFlTSVNfRU5BQkxFRD10Lk1hY1N0YW5kYXJkR2x5cGhPcmRlcmluZz10LkZvbnRGbGFncz12b2lkIDA7dC5ub3JtYWxpemVGb250TmFtZT1mdW5jdGlvbiBub3JtYWxpemVGb250TmFtZShlKXtyZXR1cm4gZS5yZXBsYWNlQWxsKC9bLF9dL2csIi0iKS5yZXBsYWNlQWxsKC9ccy9nLCIiKX07dC5yZWNvdmVyR2x5cGhOYW1lPXJlY292ZXJHbHlwaE5hbWU7dC50eXBlMUZvbnRHbHlwaE1hcHBpbmc9ZnVuY3Rpb24gdHlwZTFGb250R2x5cGhNYXBwaW5nKGUsdCxhKXtjb25zdCBpPU9iamVjdC5jcmVhdGUobnVsbCk7bGV0IHMsYyxsO2NvbnN0IGg9ISEoZS5mbGFncyZvLlN5bWJvbGljKTtpZihlLmlzSW50ZXJuYWxGb250KXtsPXQ7Zm9yKGM9MDtjPGwubGVuZ3RoO2MrKyl7cz1hLmluZGV4T2YobFtjXSk7aVtjXT1zPj0wP3M6MH19ZWxzZSBpZihlLmJhc2VFbmNvZGluZ05hbWUpe2w9KDAsci5nZXRFbmNvZGluZykoZS5iYXNlRW5jb2RpbmdOYW1lKTtmb3IoYz0wO2M8bC5sZW5ndGg7YysrKXtzPWEuaW5kZXhPZihsW2NdKTtpW2NdPXM+PTA/czowfX1lbHNlIGlmKGgpZm9yKGMgaW4gdClpW2NdPXRbY107ZWxzZXtsPXIuU3RhbmRhcmRFbmNvZGluZztmb3IoYz0wO2M8bC5sZW5ndGg7YysrKXtzPWEuaW5kZXhPZihsW2NdKTtpW2NdPXM+PTA/czowfX1jb25zdCB1PWUuZGlmZmVyZW5jZXM7bGV0IGQ7aWYodSlmb3IoYyBpbiB1KXtjb25zdCBlPXVbY107cz1hLmluZGV4T2YoZSk7aWYoLTE9PT1zKXtkfHwoZD0oMCxuLmdldEdseXBoc1VuaWNvZGUpKCkpO2NvbnN0IHQ9cmVjb3ZlckdseXBoTmFtZShlLGQpO3QhPT1lJiYocz1hLmluZGV4T2YodCkpfWlbY109cz49MD9zOjB9cmV0dXJuIGl9O3ZhciByPWEoMzcpLG49YSgzOSksaT1hKDQwKSxzPWEoMik7dC5TRUFDX0FOQUxZU0lTX0VOQUJMRUQ9ITA7Y29uc3Qgbz17Rml4ZWRQaXRjaDoxLFNlcmlmOjIsU3ltYm9saWM6NCxTY3JpcHQ6OCxOb25zeW1ib2xpYzozMixJdGFsaWM6NjQsQWxsQ2FwOjY1NTM2LFNtYWxsQ2FwOjEzMTA3MixGb3JjZUJvbGQ6MjYyMTQ0fTt0LkZvbnRGbGFncz1vO3QuTWFjU3RhbmRhcmRHbHlwaE9yZGVyaW5nPVsiLm5vdGRlZiIsIi5udWxsIiwibm9ubWFya2luZ3JldHVybiIsInNwYWNlIiwiZXhjbGFtIiwicXVvdGVkYmwiLCJudW1iZXJzaWduIiwiZG9sbGFyIiwicGVyY2VudCIsImFtcGVyc2FuZCIsInF1b3Rlc2luZ2xlIiwicGFyZW5sZWZ0IiwicGFyZW5yaWdodCIsImFzdGVyaXNrIiwicGx1cyIsImNvbW1hIiwiaHlwaGVuIiwicGVyaW9kIiwic2xhc2giLCJ6ZXJvIiwib25lIiwidHdvIiwidGhyZWUiLCJmb3VyIiwiZml2ZSIsInNpeCIsInNldmVuIiwiZWlnaHQiLCJuaW5lIiwiY29sb24iLCJzZW1pY29sb24iLCJsZXNzIiwiZXF1YWwiLCJncmVhdGVyIiwicXVlc3Rpb24iLCJhdCIsIkEiLCJCIiwiQyIsIkQiLCJFIiwiRiIsIkciLCJIIiwiSSIsIkoiLCJLIiwiTCIsIk0iLCJOIiwiTyIsIlAiLCJRIiwiUiIsIlMiLCJUIiwiVSIsIlYiLCJXIiwiWCIsIlkiLCJaIiwiYnJhY2tldGxlZnQiLCJiYWNrc2xhc2giLCJicmFja2V0cmlnaHQiLCJhc2NpaWNpcmN1bSIsInVuZGVyc2NvcmUiLCJncmF2ZSIsImEiLCJiIiwiYyIsImQiLCJlIiwiZiIsImciLCJoIiwiaSIsImoiLCJrIiwibCIsIm0iLCJuIiwibyIsInAiLCJxIiwiciIsInMiLCJ0IiwidSIsInYiLCJ3IiwieCIsInkiLCJ6IiwiYnJhY2VsZWZ0IiwiYmFyIiwiYnJhY2VyaWdodCIsImFzY2lpdGlsZGUiLCJBZGllcmVzaXMiLCJBcmluZyIsIkNjZWRpbGxhIiwiRWFjdXRlIiwiTnRpbGRlIiwiT2RpZXJlc2lzIiwiVWRpZXJlc2lzIiwiYWFjdXRlIiwiYWdyYXZlIiwiYWNpcmN1bWZsZXgiLCJhZGllcmVzaXMiLCJhdGlsZGUiLCJhcmluZyIsImNjZWRpbGxhIiwiZWFjdXRlIiwiZWdyYXZlIiwiZWNpcmN1bWZsZXgiLCJlZGllcmVzaXMiLCJpYWN1dGUiLCJpZ3JhdmUiLCJpY2lyY3VtZmxleCIsImlkaWVyZXNpcyIsIm50aWxkZSIsIm9hY3V0ZSIsIm9ncmF2ZSIsIm9jaXJjdW1mbGV4Iiwib2RpZXJlc2lzIiwib3RpbGRlIiwidWFjdXRlIiwidWdyYXZlIiwidWNpcmN1bWZsZXgiLCJ1ZGllcmVzaXMiLCJkYWdnZXIiLCJkZWdyZWUiLCJjZW50Iiwic3RlcmxpbmciLCJzZWN0aW9uIiwiYnVsbGV0IiwicGFyYWdyYXBoIiwiZ2VybWFuZGJscyIsInJlZ2lzdGVyZWQiLCJjb3B5cmlnaHQiLCJ0cmFkZW1hcmsiLCJhY3V0ZSIsImRpZXJlc2lzIiwibm90ZXF1YWwiLCJBRSIsIk9zbGFzaCIsImluZmluaXR5IiwicGx1c21pbnVzIiwibGVzc2VxdWFsIiwiZ3JlYXRlcmVxdWFsIiwieWVuIiwibXUiLCJwYXJ0aWFsZGlmZiIsInN1bW1hdGlvbiIsInByb2R1Y3QiLCJwaSIsImludGVncmFsIiwib3JkZmVtaW5pbmUiLCJvcmRtYXNjdWxpbmUiLCJPbWVnYSIsImFlIiwib3NsYXNoIiwicXVlc3Rpb25kb3duIiwiZXhjbGFtZG93biIsImxvZ2ljYWxub3QiLCJyYWRpY2FsIiwiZmxvcmluIiwiYXBwcm94ZXF1YWwiLCJEZWx0YSIsImd1aWxsZW1vdGxlZnQiLCJndWlsbGVtb3RyaWdodCIsImVsbGlwc2lzIiwibm9uYnJlYWtpbmdzcGFjZSIsIkFncmF2ZSIsIkF0aWxkZSIsIk90aWxkZSIsIk9FIiwib2UiLCJlbmRhc2giLCJlbWRhc2giLCJxdW90ZWRibGxlZnQiLCJxdW90ZWRibHJpZ2h0IiwicXVvdGVsZWZ0IiwicXVvdGVyaWdodCIsImRpdmlkZSIsImxvemVuZ2UiLCJ5ZGllcmVzaXMiLCJZZGllcmVzaXMiLCJmcmFjdGlvbiIsImN1cnJlbmN5IiwiZ3VpbHNpbmdsbGVmdCIsImd1aWxzaW5nbHJpZ2h0IiwiZmkiLCJmbCIsImRhZ2dlcmRibCIsInBlcmlvZGNlbnRlcmVkIiwicXVvdGVzaW5nbGJhc2UiLCJxdW90ZWRibGJhc2UiLCJwZXJ0aG91c2FuZCIsIkFjaXJjdW1mbGV4IiwiRWNpcmN1bWZsZXgiLCJBYWN1dGUiLCJFZGllcmVzaXMiLCJFZ3JhdmUiLCJJYWN1dGUiLCJJY2lyY3VtZmxleCIsIklkaWVyZXNpcyIsIklncmF2ZSIsIk9hY3V0ZSIsIk9jaXJjdW1mbGV4IiwiYXBwbGUiLCJPZ3JhdmUiLCJVYWN1dGUiLCJVY2lyY3VtZmxleCIsIlVncmF2ZSIsImRvdGxlc3NpIiwiY2lyY3VtZmxleCIsInRpbGRlIiwibWFjcm9uIiwiYnJldmUiLCJkb3RhY2NlbnQiLCJyaW5nIiwiY2VkaWxsYSIsImh1bmdhcnVtbGF1dCIsIm9nb25layIsImNhcm9uIiwiTHNsYXNoIiwibHNsYXNoIiwiU2Nhcm9uIiwic2Nhcm9uIiwiWmNhcm9uIiwiemNhcm9uIiwiYnJva2VuYmFyIiwiRXRoIiwiZXRoIiwiWWFjdXRlIiwieWFjdXRlIiwiVGhvcm4iLCJ0aG9ybiIsIm1pbnVzIiwibXVsdGlwbHkiLCJvbmVzdXBlcmlvciIsInR3b3N1cGVyaW9yIiwidGhyZWVzdXBlcmlvciIsIm9uZWhhbGYiLCJvbmVxdWFydGVyIiwidGhyZWVxdWFydGVycyIsImZyYW5jIiwiR2JyZXZlIiwiZ2JyZXZlIiwiSWRvdGFjY2VudCIsIlNjZWRpbGxhIiwic2NlZGlsbGEiLCJDYWN1dGUiLCJjYWN1dGUiLCJDY2Fyb24iLCJjY2Fyb24iLCJkY3JvYXQiXTtmdW5jdGlvbiByZWNvdmVyR2x5cGhOYW1lKGUsdCl7aWYodm9pZCAwIT09dFtlXSlyZXR1cm4gZTtjb25zdCBhPSgwLGkuZ2V0VW5pY29kZUZvckdseXBoKShlLHQpO2lmKC0xIT09YSlmb3IoY29uc3QgZSBpbiB0KWlmKHRbZV09PT1hKXJldHVybiBlOygwLHMuaW5mbykoIlVuYWJsZSB0byByZWNvdmVyIGEgc3RhbmRhcmQgZ2x5cGggbmFtZSBmb3I6ICIrZSk7cmV0dXJuIGV9fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuZ2V0R2x5cGhzVW5pY29kZT10LmdldERpbmdiYXRzR2x5cGhzVW5pY29kZT12b2lkIDA7dmFyIHI9YSgzKTtjb25zdCBuPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZS5BPTY1O2UuQUU9MTk4O2UuQUVhY3V0ZT01MDg7ZS5BRW1hY3Jvbj00ODI7ZS5BRXNtYWxsPTYzNDYyO2UuQWFjdXRlPTE5MztlLkFhY3V0ZXNtYWxsPTYzNDU3O2UuQWJyZXZlPTI1ODtlLkFicmV2ZWFjdXRlPTc4NTQ7ZS5BYnJldmVjeXJpbGxpYz0xMjMyO2UuQWJyZXZlZG90YmVsb3c9Nzg2MjtlLkFicmV2ZWdyYXZlPTc4NTY7ZS5BYnJldmVob29rYWJvdmU9Nzg1ODtlLkFicmV2ZXRpbGRlPTc4NjA7ZS5BY2Fyb249NDYxO2UuQWNpcmNsZT05Mzk4O2UuQWNpcmN1bWZsZXg9MTk0O2UuQWNpcmN1bWZsZXhhY3V0ZT03ODQ0O2UuQWNpcmN1bWZsZXhkb3RiZWxvdz03ODUyO2UuQWNpcmN1bWZsZXhncmF2ZT03ODQ2O2UuQWNpcmN1bWZsZXhob29rYWJvdmU9Nzg0ODtlLkFjaXJjdW1mbGV4c21hbGw9NjM0NTg7ZS5BY2lyY3VtZmxleHRpbGRlPTc4NTA7ZS5BY3V0ZT02MzE3NztlLkFjdXRlc21hbGw9NjM0MTI7ZS5BY3lyaWxsaWM9MTA0MDtlLkFkYmxncmF2ZT01MTI7ZS5BZGllcmVzaXM9MTk2O2UuQWRpZXJlc2lzY3lyaWxsaWM9MTIzNDtlLkFkaWVyZXNpc21hY3Jvbj00Nzg7ZS5BZGllcmVzaXNzbWFsbD02MzQ2MDtlLkFkb3RiZWxvdz03ODQwO2UuQWRvdG1hY3Jvbj00ODA7ZS5BZ3JhdmU9MTkyO2UuQWdyYXZlc21hbGw9NjM0NTY7ZS5BaG9va2Fib3ZlPTc4NDI7ZS5BaWVjeXJpbGxpYz0xMjM2O2UuQWludmVydGVkYnJldmU9NTE0O2UuQWxwaGE9OTEzO2UuQWxwaGF0b25vcz05MDI7ZS5BbWFjcm9uPTI1NjtlLkFtb25vc3BhY2U9NjUzMTM7ZS5Bb2dvbmVrPTI2MDtlLkFyaW5nPTE5NztlLkFyaW5nYWN1dGU9NTA2O2UuQXJpbmdiZWxvdz03NjgwO2UuQXJpbmdzbWFsbD02MzQ2MTtlLkFzbWFsbD02MzMyOTtlLkF0aWxkZT0xOTU7ZS5BdGlsZGVzbWFsbD02MzQ1OTtlLkF5YmFybWVuaWFuPTEzMjk7ZS5CPTY2O2UuQmNpcmNsZT05Mzk5O2UuQmRvdGFjY2VudD03NjgyO2UuQmRvdGJlbG93PTc2ODQ7ZS5CZWN5cmlsbGljPTEwNDE7ZS5CZW5hcm1lbmlhbj0xMzMwO2UuQmV0YT05MTQ7ZS5CaG9vaz0zODU7ZS5CbGluZWJlbG93PTc2ODY7ZS5CbW9ub3NwYWNlPTY1MzE0O2UuQnJldmVzbWFsbD02MzIyMDtlLkJzbWFsbD02MzMzMDtlLkJ0b3BiYXI9Mzg2O2UuQz02NztlLkNhYXJtZW5pYW49MTM0MjtlLkNhY3V0ZT0yNjI7ZS5DYXJvbj02MzE3ODtlLkNhcm9uc21hbGw9NjMyMjE7ZS5DY2Fyb249MjY4O2UuQ2NlZGlsbGE9MTk5O2UuQ2NlZGlsbGFhY3V0ZT03Njg4O2UuQ2NlZGlsbGFzbWFsbD02MzQ2MztlLkNjaXJjbGU9OTQwMDtlLkNjaXJjdW1mbGV4PTI2NDtlLkNkb3Q9MjY2O2UuQ2RvdGFjY2VudD0yNjY7ZS5DZWRpbGxhc21hbGw9NjM0MTY7ZS5DaGFhcm1lbmlhbj0xMzUzO2UuQ2hlYWJraGFzaWFuY3lyaWxsaWM9MTIxMjtlLkNoZWN5cmlsbGljPTEwNjM7ZS5DaGVkZXNjZW5kZXJhYmtoYXNpYW5jeXJpbGxpYz0xMjE0O2UuQ2hlZGVzY2VuZGVyY3lyaWxsaWM9MTIwNjtlLkNoZWRpZXJlc2lzY3lyaWxsaWM9MTI2ODtlLkNoZWhhcm1lbmlhbj0xMzQ3O2UuQ2hla2hha2Fzc2lhbmN5cmlsbGljPTEyMjc7ZS5DaGV2ZXJ0aWNhbHN0cm9rZWN5cmlsbGljPTEyMDg7ZS5DaGk9OTM1O2UuQ2hvb2s9MzkxO2UuQ2lyY3VtZmxleHNtYWxsPTYzMjIyO2UuQ21vbm9zcGFjZT02NTMxNTtlLkNvYXJtZW5pYW49MTM2MTtlLkNzbWFsbD02MzMzMTtlLkQ9Njg7ZS5EWj00OTc7ZS5EWmNhcm9uPTQ1MjtlLkRhYXJtZW5pYW49MTMzMjtlLkRhZnJpY2FuPTM5MztlLkRjYXJvbj0yNzA7ZS5EY2VkaWxsYT03Njk2O2UuRGNpcmNsZT05NDAxO2UuRGNpcmN1bWZsZXhiZWxvdz03Njk4O2UuRGNyb2F0PTI3MjtlLkRkb3RhY2NlbnQ9NzY5MDtlLkRkb3RiZWxvdz03NjkyO2UuRGVjeXJpbGxpYz0xMDQ0O2UuRGVpY29wdGljPTEwMDY7ZS5EZWx0YT04NzEwO2UuRGVsdGFncmVlaz05MTY7ZS5EaG9vaz0zOTQ7ZS5EaWVyZXNpcz02MzE3OTtlLkRpZXJlc2lzQWN1dGU9NjMxODA7ZS5EaWVyZXNpc0dyYXZlPTYzMTgxO2UuRGllcmVzaXNzbWFsbD02MzQwMDtlLkRpZ2FtbWFncmVlaz05ODg7ZS5EamVjeXJpbGxpYz0xMDI2O2UuRGxpbmViZWxvdz03Njk0O2UuRG1vbm9zcGFjZT02NTMxNjtlLkRvdGFjY2VudHNtYWxsPTYzMjIzO2UuRHNsYXNoPTI3MjtlLkRzbWFsbD02MzMzMjtlLkR0b3BiYXI9Mzk1O2UuRHo9NDk4O2UuRHpjYXJvbj00NTM7ZS5EemVhYmtoYXNpYW5jeXJpbGxpYz0xMjQ4O2UuRHplY3lyaWxsaWM9MTAyOTtlLkR6aGVjeXJpbGxpYz0xMDM5O2UuRT02OTtlLkVhY3V0ZT0yMDE7ZS5FYWN1dGVzbWFsbD02MzQ2NTtlLkVicmV2ZT0yNzY7ZS5FY2Fyb249MjgyO2UuRWNlZGlsbGFicmV2ZT03NzA4O2UuRWNoYXJtZW5pYW49MTMzMztlLkVjaXJjbGU9OTQwMjtlLkVjaXJjdW1mbGV4PTIwMjtlLkVjaXJjdW1mbGV4YWN1dGU9Nzg3MDtlLkVjaXJjdW1mbGV4YmVsb3c9NzcwNDtlLkVjaXJjdW1mbGV4ZG90YmVsb3c9Nzg3ODtlLkVjaXJjdW1mbGV4Z3JhdmU9Nzg3MjtlLkVjaXJjdW1mbGV4aG9va2Fib3ZlPTc4NzQ7ZS5FY2lyY3VtZmxleHNtYWxsPTYzNDY2O2UuRWNpcmN1bWZsZXh0aWxkZT03ODc2O2UuRWN5cmlsbGljPTEwMjg7ZS5FZGJsZ3JhdmU9NTE2O2UuRWRpZXJlc2lzPTIwMztlLkVkaWVyZXNpc3NtYWxsPTYzNDY3O2UuRWRvdD0yNzg7ZS5FZG90YWNjZW50PTI3ODtlLkVkb3RiZWxvdz03ODY0O2UuRWZjeXJpbGxpYz0xMDYwO2UuRWdyYXZlPTIwMDtlLkVncmF2ZXNtYWxsPTYzNDY0O2UuRWhhcm1lbmlhbj0xMzM1O2UuRWhvb2thYm92ZT03ODY2O2UuRWlnaHRyb21hbj04NTUxO2UuRWludmVydGVkYnJldmU9NTE4O2UuRWlvdGlmaWVkY3lyaWxsaWM9MTEyNDtlLkVsY3lyaWxsaWM9MTA1MTtlLkVsZXZlbnJvbWFuPTg1NTQ7ZS5FbWFjcm9uPTI3NDtlLkVtYWNyb25hY3V0ZT03NzAyO2UuRW1hY3JvbmdyYXZlPTc3MDA7ZS5FbWN5cmlsbGljPTEwNTI7ZS5FbW9ub3NwYWNlPTY1MzE3O2UuRW5jeXJpbGxpYz0xMDUzO2UuRW5kZXNjZW5kZXJjeXJpbGxpYz0xMTg2O2UuRW5nPTMzMDtlLkVuZ2hlY3lyaWxsaWM9MTE4ODtlLkVuaG9va2N5cmlsbGljPTEyMjM7ZS5Fb2dvbmVrPTI4MDtlLkVvcGVuPTQwMDtlLkVwc2lsb249OTE3O2UuRXBzaWxvbnRvbm9zPTkwNDtlLkVyY3lyaWxsaWM9MTA1NjtlLkVyZXZlcnNlZD0zOTg7ZS5FcmV2ZXJzZWRjeXJpbGxpYz0xMDY5O2UuRXNjeXJpbGxpYz0xMDU3O2UuRXNkZXNjZW5kZXJjeXJpbGxpYz0xMTk0O2UuRXNoPTQyNTtlLkVzbWFsbD02MzMzMztlLkV0YT05MTk7ZS5FdGFybWVuaWFuPTEzMzY7ZS5FdGF0b25vcz05MDU7ZS5FdGg9MjA4O2UuRXRoc21hbGw9NjM0NzI7ZS5FdGlsZGU9Nzg2ODtlLkV0aWxkZWJlbG93PTc3MDY7ZS5FdXJvPTgzNjQ7ZS5Femg9NDM5O2UuRXpoY2Fyb249NDk0O2UuRXpocmV2ZXJzZWQ9NDQwO2UuRj03MDtlLkZjaXJjbGU9OTQwMztlLkZkb3RhY2NlbnQ9NzcxMDtlLkZlaGFybWVuaWFuPTEzNjY7ZS5GZWljb3B0aWM9OTk2O2UuRmhvb2s9NDAxO2UuRml0YWN5cmlsbGljPTExMzg7ZS5GaXZlcm9tYW49ODU0ODtlLkZtb25vc3BhY2U9NjUzMTg7ZS5Gb3Vycm9tYW49ODU0NztlLkZzbWFsbD02MzMzNDtlLkc9NzE7ZS5HQnNxdWFyZT0xMzE5MTtlLkdhY3V0ZT01MDA7ZS5HYW1tYT05MTU7ZS5HYW1tYWFmcmljYW49NDA0O2UuR2FuZ2lhY29wdGljPTEwMDI7ZS5HYnJldmU9Mjg2O2UuR2Nhcm9uPTQ4NjtlLkdjZWRpbGxhPTI5MDtlLkdjaXJjbGU9OTQwNDtlLkdjaXJjdW1mbGV4PTI4NDtlLkdjb21tYWFjY2VudD0yOTA7ZS5HZG90PTI4ODtlLkdkb3RhY2NlbnQ9Mjg4O2UuR2VjeXJpbGxpYz0xMDQzO2UuR2hhZGFybWVuaWFuPTEzNDY7ZS5HaGVtaWRkbGVob29rY3lyaWxsaWM9MTE3MjtlLkdoZXN0cm9rZWN5cmlsbGljPTExNzA7ZS5HaGV1cHR1cm5jeXJpbGxpYz0xMTY4O2UuR2hvb2s9NDAzO2UuR2ltYXJtZW5pYW49MTMzMTtlLkdqZWN5cmlsbGljPTEwMjc7ZS5HbWFjcm9uPTc3MTI7ZS5HbW9ub3NwYWNlPTY1MzE5O2UuR3JhdmU9NjMxODI7ZS5HcmF2ZXNtYWxsPTYzMzI4O2UuR3NtYWxsPTYzMzM1O2UuR3NtYWxsaG9vaz02Njc7ZS5Hc3Ryb2tlPTQ4NDtlLkg9NzI7ZS5IMTg1MzM9OTY3OTtlLkgxODU0Mz05NjQyO2UuSDE4NTUxPTk2NDM7ZS5IMjIwNzM9OTYzMztlLkhQc3F1YXJlPTEzMjU5O2UuSGFhYmtoYXNpYW5jeXJpbGxpYz0xMTkyO2UuSGFkZXNjZW5kZXJjeXJpbGxpYz0xMjAyO2UuSGFyZHNpZ25jeXJpbGxpYz0xMDY2O2UuSGJhcj0yOTQ7ZS5IYnJldmViZWxvdz03NzIyO2UuSGNlZGlsbGE9NzcyMDtlLkhjaXJjbGU9OTQwNTtlLkhjaXJjdW1mbGV4PTI5MjtlLkhkaWVyZXNpcz03NzE4O2UuSGRvdGFjY2VudD03NzE0O2UuSGRvdGJlbG93PTc3MTY7ZS5IbW9ub3NwYWNlPTY1MzIwO2UuSG9hcm1lbmlhbj0xMzQ0O2UuSG9yaWNvcHRpYz0xZTM7ZS5Ic21hbGw9NjMzMzY7ZS5IdW5nYXJ1bWxhdXQ9NjMxODM7ZS5IdW5nYXJ1bWxhdXRzbWFsbD02MzIyNDtlLkh6c3F1YXJlPTEzMjAwO2UuST03MztlLklBY3lyaWxsaWM9MTA3MTtlLklKPTMwNjtlLklVY3lyaWxsaWM9MTA3MDtlLklhY3V0ZT0yMDU7ZS5JYWN1dGVzbWFsbD02MzQ2OTtlLklicmV2ZT0zMDA7ZS5JY2Fyb249NDYzO2UuSWNpcmNsZT05NDA2O2UuSWNpcmN1bWZsZXg9MjA2O2UuSWNpcmN1bWZsZXhzbWFsbD02MzQ3MDtlLkljeXJpbGxpYz0xMDMwO2UuSWRibGdyYXZlPTUyMDtlLklkaWVyZXNpcz0yMDc7ZS5JZGllcmVzaXNhY3V0ZT03NzI2O2UuSWRpZXJlc2lzY3lyaWxsaWM9MTI1MjtlLklkaWVyZXNpc3NtYWxsPTYzNDcxO2UuSWRvdD0zMDQ7ZS5JZG90YWNjZW50PTMwNDtlLklkb3RiZWxvdz03ODgyO2UuSWVicmV2ZWN5cmlsbGljPTEyMzg7ZS5JZWN5cmlsbGljPTEwNDU7ZS5JZnJha3R1cj04NDY1O2UuSWdyYXZlPTIwNDtlLklncmF2ZXNtYWxsPTYzNDY4O2UuSWhvb2thYm92ZT03ODgwO2UuSWljeXJpbGxpYz0xMDQ4O2UuSWludmVydGVkYnJldmU9NTIyO2UuSWlzaG9ydGN5cmlsbGljPTEwNDk7ZS5JbWFjcm9uPTI5ODtlLkltYWNyb25jeXJpbGxpYz0xMjUwO2UuSW1vbm9zcGFjZT02NTMyMTtlLkluaWFybWVuaWFuPTEzMzk7ZS5Jb2N5cmlsbGljPTEwMjU7ZS5Jb2dvbmVrPTMwMjtlLklvdGE9OTIxO2UuSW90YWFmcmljYW49NDA2O2UuSW90YWRpZXJlc2lzPTkzODtlLklvdGF0b25vcz05MDY7ZS5Jc21hbGw9NjMzMzc7ZS5Jc3Ryb2tlPTQwNztlLkl0aWxkZT0yOTY7ZS5JdGlsZGViZWxvdz03NzI0O2UuSXpoaXRzYWN5cmlsbGljPTExNDA7ZS5JemhpdHNhZGJsZ3JhdmVjeXJpbGxpYz0xMTQyO2UuSj03NDtlLkphYXJtZW5pYW49MTM0NTtlLkpjaXJjbGU9OTQwNztlLkpjaXJjdW1mbGV4PTMwODtlLkplY3lyaWxsaWM9MTAzMjtlLkpoZWhhcm1lbmlhbj0xMzU1O2UuSm1vbm9zcGFjZT02NTMyMjtlLkpzbWFsbD02MzMzODtlLks9NzU7ZS5LQnNxdWFyZT0xMzE4OTtlLktLc3F1YXJlPTEzMjYxO2UuS2FiYXNoa2lyY3lyaWxsaWM9MTE4NDtlLkthY3V0ZT03NzI4O2UuS2FjeXJpbGxpYz0xMDUwO2UuS2FkZXNjZW5kZXJjeXJpbGxpYz0xMTc4O2UuS2Fob29rY3lyaWxsaWM9MTIxOTtlLkthcHBhPTkyMjtlLkthc3Ryb2tlY3lyaWxsaWM9MTE4MjtlLkthdmVydGljYWxzdHJva2VjeXJpbGxpYz0xMTgwO2UuS2Nhcm9uPTQ4ODtlLktjZWRpbGxhPTMxMDtlLktjaXJjbGU9OTQwODtlLktjb21tYWFjY2VudD0zMTA7ZS5LZG90YmVsb3c9NzczMDtlLktlaGFybWVuaWFuPTEzNjQ7ZS5LZW5hcm1lbmlhbj0xMzQzO2UuS2hhY3lyaWxsaWM9MTA2MTtlLktoZWljb3B0aWM9OTk4O2UuS2hvb2s9NDA4O2UuS2plY3lyaWxsaWM9MTAzNjtlLktsaW5lYmVsb3c9NzczMjtlLkttb25vc3BhY2U9NjUzMjM7ZS5Lb3BwYWN5cmlsbGljPTExNTI7ZS5Lb3BwYWdyZWVrPTk5MDtlLktzaWN5cmlsbGljPTExMzQ7ZS5Lc21hbGw9NjMzMzk7ZS5MPTc2O2UuTEo9NDU1O2UuTEw9NjMxNjc7ZS5MYWN1dGU9MzEzO2UuTGFtYmRhPTkyMztlLkxjYXJvbj0zMTc7ZS5MY2VkaWxsYT0zMTU7ZS5MY2lyY2xlPTk0MDk7ZS5MY2lyY3VtZmxleGJlbG93PTc3NDA7ZS5MY29tbWFhY2NlbnQ9MzE1O2UuTGRvdD0zMTk7ZS5MZG90YWNjZW50PTMxOTtlLkxkb3RiZWxvdz03NzM0O2UuTGRvdGJlbG93bWFjcm9uPTc3MzY7ZS5MaXduYXJtZW5pYW49MTM0MDtlLkxqPTQ1NjtlLkxqZWN5cmlsbGljPTEwMzM7ZS5MbGluZWJlbG93PTc3Mzg7ZS5MbW9ub3NwYWNlPTY1MzI0O2UuTHNsYXNoPTMyMTtlLkxzbGFzaHNtYWxsPTYzMjI1O2UuTHNtYWxsPTYzMzQwO2UuTT03NztlLk1Cc3F1YXJlPTEzMTkwO2UuTWFjcm9uPTYzMTg0O2UuTWFjcm9uc21hbGw9NjM0MDc7ZS5NYWN1dGU9Nzc0MjtlLk1jaXJjbGU9OTQxMDtlLk1kb3RhY2NlbnQ9Nzc0NDtlLk1kb3RiZWxvdz03NzQ2O2UuTWVuYXJtZW5pYW49MTM0ODtlLk1tb25vc3BhY2U9NjUzMjU7ZS5Nc21hbGw9NjMzNDE7ZS5NdHVybmVkPTQxMjtlLk11PTkyNDtlLk49Nzg7ZS5OSj00NTg7ZS5OYWN1dGU9MzIzO2UuTmNhcm9uPTMyNztlLk5jZWRpbGxhPTMyNTtlLk5jaXJjbGU9OTQxMTtlLk5jaXJjdW1mbGV4YmVsb3c9Nzc1NDtlLk5jb21tYWFjY2VudD0zMjU7ZS5OZG90YWNjZW50PTc3NDg7ZS5OZG90YmVsb3c9Nzc1MDtlLk5ob29rbGVmdD00MTM7ZS5OaW5lcm9tYW49ODU1MjtlLk5qPTQ1OTtlLk5qZWN5cmlsbGljPTEwMzQ7ZS5ObGluZWJlbG93PTc3NTI7ZS5ObW9ub3NwYWNlPTY1MzI2O2UuTm93YXJtZW5pYW49MTM1MDtlLk5zbWFsbD02MzM0MjtlLk50aWxkZT0yMDk7ZS5OdGlsZGVzbWFsbD02MzQ3MztlLk51PTkyNTtlLk89Nzk7ZS5PRT0zMzg7ZS5PRXNtYWxsPTYzMjI2O2UuT2FjdXRlPTIxMTtlLk9hY3V0ZXNtYWxsPTYzNDc1O2UuT2JhcnJlZGN5cmlsbGljPTEyNTY7ZS5PYmFycmVkZGllcmVzaXNjeXJpbGxpYz0xMjU4O2UuT2JyZXZlPTMzNDtlLk9jYXJvbj00NjU7ZS5PY2VudGVyZWR0aWxkZT00MTU7ZS5PY2lyY2xlPTk0MTI7ZS5PY2lyY3VtZmxleD0yMTI7ZS5PY2lyY3VtZmxleGFjdXRlPTc4ODg7ZS5PY2lyY3VtZmxleGRvdGJlbG93PTc4OTY7ZS5PY2lyY3VtZmxleGdyYXZlPTc4OTA7ZS5PY2lyY3VtZmxleGhvb2thYm92ZT03ODkyO2UuT2NpcmN1bWZsZXhzbWFsbD02MzQ3NjtlLk9jaXJjdW1mbGV4dGlsZGU9Nzg5NDtlLk9jeXJpbGxpYz0xMDU0O2UuT2RibGFjdXRlPTMzNjtlLk9kYmxncmF2ZT01MjQ7ZS5PZGllcmVzaXM9MjE0O2UuT2RpZXJlc2lzY3lyaWxsaWM9MTI1NDtlLk9kaWVyZXNpc3NtYWxsPTYzNDc4O2UuT2RvdGJlbG93PTc4ODQ7ZS5PZ29uZWtzbWFsbD02MzIyNztlLk9ncmF2ZT0yMTA7ZS5PZ3JhdmVzbWFsbD02MzQ3NDtlLk9oYXJtZW5pYW49MTM2NTtlLk9obT04NDg2O2UuT2hvb2thYm92ZT03ODg2O2UuT2hvcm49NDE2O2UuT2hvcm5hY3V0ZT03ODk4O2UuT2hvcm5kb3RiZWxvdz03OTA2O2UuT2hvcm5ncmF2ZT03OTAwO2UuT2hvcm5ob29rYWJvdmU9NzkwMjtlLk9ob3JudGlsZGU9NzkwNDtlLk9odW5nYXJ1bWxhdXQ9MzM2O2UuT2k9NDE4O2UuT2ludmVydGVkYnJldmU9NTI2O2UuT21hY3Jvbj0zMzI7ZS5PbWFjcm9uYWN1dGU9Nzc2MjtlLk9tYWNyb25ncmF2ZT03NzYwO2UuT21lZ2E9ODQ4NjtlLk9tZWdhY3lyaWxsaWM9MTEyMDtlLk9tZWdhZ3JlZWs9OTM3O2UuT21lZ2Fyb3VuZGN5cmlsbGljPTExNDY7ZS5PbWVnYXRpdGxvY3lyaWxsaWM9MTE0ODtlLk9tZWdhdG9ub3M9OTExO2UuT21pY3Jvbj05Mjc7ZS5PbWljcm9udG9ub3M9OTA4O2UuT21vbm9zcGFjZT02NTMyNztlLk9uZXJvbWFuPTg1NDQ7ZS5Pb2dvbmVrPTQ5MDtlLk9vZ29uZWttYWNyb249NDkyO2UuT29wZW49MzkwO2UuT3NsYXNoPTIxNjtlLk9zbGFzaGFjdXRlPTUxMDtlLk9zbGFzaHNtYWxsPTYzNDgwO2UuT3NtYWxsPTYzMzQzO2UuT3N0cm9rZWFjdXRlPTUxMDtlLk90Y3lyaWxsaWM9MTE1MDtlLk90aWxkZT0yMTM7ZS5PdGlsZGVhY3V0ZT03NzU2O2UuT3RpbGRlZGllcmVzaXM9Nzc1ODtlLk90aWxkZXNtYWxsPTYzNDc3O2UuUD04MDtlLlBhY3V0ZT03NzY0O2UuUGNpcmNsZT05NDEzO2UuUGRvdGFjY2VudD03NzY2O2UuUGVjeXJpbGxpYz0xMDU1O2UuUGVoYXJtZW5pYW49MTM1NDtlLlBlbWlkZGxlaG9va2N5cmlsbGljPTExOTA7ZS5QaGk9OTM0O2UuUGhvb2s9NDIwO2UuUGk9OTI4O2UuUGl3cmFybWVuaWFuPTEzNjM7ZS5QbW9ub3NwYWNlPTY1MzI4O2UuUHNpPTkzNjtlLlBzaWN5cmlsbGljPTExMzY7ZS5Qc21hbGw9NjMzNDQ7ZS5RPTgxO2UuUWNpcmNsZT05NDE0O2UuUW1vbm9zcGFjZT02NTMyOTtlLlFzbWFsbD02MzM0NTtlLlI9ODI7ZS5SYWFybWVuaWFuPTEzNTY7ZS5SYWN1dGU9MzQwO2UuUmNhcm9uPTM0NDtlLlJjZWRpbGxhPTM0MjtlLlJjaXJjbGU9OTQxNTtlLlJjb21tYWFjY2VudD0zNDI7ZS5SZGJsZ3JhdmU9NTI4O2UuUmRvdGFjY2VudD03NzY4O2UuUmRvdGJlbG93PTc3NzA7ZS5SZG90YmVsb3dtYWNyb249Nzc3MjtlLlJlaGFybWVuaWFuPTEzNjA7ZS5SZnJha3R1cj04NDc2O2UuUmhvPTkyOTtlLlJpbmdzbWFsbD02MzIyODtlLlJpbnZlcnRlZGJyZXZlPTUzMDtlLlJsaW5lYmVsb3c9Nzc3NDtlLlJtb25vc3BhY2U9NjUzMzA7ZS5Sc21hbGw9NjMzNDY7ZS5Sc21hbGxpbnZlcnRlZD02NDE7ZS5Sc21hbGxpbnZlcnRlZHN1cGVyaW9yPTY5NDtlLlM9ODM7ZS5TRjAxMDAwMD05NDg0O2UuU0YwMjAwMDA9OTQ5MjtlLlNGMDMwMDAwPTk0ODg7ZS5TRjA0MDAwMD05NDk2O2UuU0YwNTAwMDA9OTUzMjtlLlNGMDYwMDAwPTk1MTY7ZS5TRjA3MDAwMD05NTI0O2UuU0YwODAwMDA9OTUwMDtlLlNGMDkwMDAwPTk1MDg7ZS5TRjEwMDAwMD05NDcyO2UuU0YxMTAwMDA9OTQ3NDtlLlNGMTkwMDAwPTk1Njk7ZS5TRjIwMDAwMD05NTcwO2UuU0YyMTAwMDA9OTU1ODtlLlNGMjIwMDAwPTk1NTc7ZS5TRjIzMDAwMD05NTcxO2UuU0YyNDAwMDA9OTU1MztlLlNGMjUwMDAwPTk1NTk7ZS5TRjI2MDAwMD05NTY1O2UuU0YyNzAwMDA9OTU2NDtlLlNGMjgwMDAwPTk1NjM7ZS5TRjM2MDAwMD05NTY2O2UuU0YzNzAwMDA9OTU2NztlLlNGMzgwMDAwPTk1NjI7ZS5TRjM5MDAwMD05NTU2O2UuU0Y0MDAwMDA9OTU3NztlLlNGNDEwMDAwPTk1NzQ7ZS5TRjQyMDAwMD05NTY4O2UuU0Y0MzAwMDA9OTU1MjtlLlNGNDQwMDAwPTk1ODA7ZS5TRjQ1MDAwMD05NTc1O2UuU0Y0NjAwMDA9OTU3NjtlLlNGNDcwMDAwPTk1NzI7ZS5TRjQ4MDAwMD05NTczO2UuU0Y0OTAwMDA9OTU2MTtlLlNGNTAwMDAwPTk1NjA7ZS5TRjUxMDAwMD05NTU0O2UuU0Y1MjAwMDA9OTU1NTtlLlNGNTMwMDAwPTk1Nzk7ZS5TRjU0MDAwMD05NTc4O2UuU2FjdXRlPTM0NjtlLlNhY3V0ZWRvdGFjY2VudD03NzgwO2UuU2FtcGlncmVlaz05OTI7ZS5TY2Fyb249MzUyO2UuU2Nhcm9uZG90YWNjZW50PTc3ODI7ZS5TY2Fyb25zbWFsbD02MzIyOTtlLlNjZWRpbGxhPTM1MDtlLlNjaHdhPTM5OTtlLlNjaHdhY3lyaWxsaWM9MTI0MDtlLlNjaHdhZGllcmVzaXNjeXJpbGxpYz0xMjQyO2UuU2NpcmNsZT05NDE2O2UuU2NpcmN1bWZsZXg9MzQ4O2UuU2NvbW1hYWNjZW50PTUzNjtlLlNkb3RhY2NlbnQ9Nzc3NjtlLlNkb3RiZWxvdz03Nzc4O2UuU2RvdGJlbG93ZG90YWNjZW50PTc3ODQ7ZS5TZWhhcm1lbmlhbj0xMzU3O2UuU2V2ZW5yb21hbj04NTUwO2UuU2hhYXJtZW5pYW49MTM1MTtlLlNoYWN5cmlsbGljPTEwNjQ7ZS5TaGNoYWN5cmlsbGljPTEwNjU7ZS5TaGVpY29wdGljPTk5NDtlLlNoaGFjeXJpbGxpYz0xMjEwO2UuU2hpbWFjb3B0aWM9MTAwNDtlLlNpZ21hPTkzMTtlLlNpeHJvbWFuPTg1NDk7ZS5TbW9ub3NwYWNlPTY1MzMxO2UuU29mdHNpZ25jeXJpbGxpYz0xMDY4O2UuU3NtYWxsPTYzMzQ3O2UuU3RpZ21hZ3JlZWs9OTg2O2UuVD04NDtlLlRhdT05MzI7ZS5UYmFyPTM1ODtlLlRjYXJvbj0zNTY7ZS5UY2VkaWxsYT0zNTQ7ZS5UY2lyY2xlPTk0MTc7ZS5UY2lyY3VtZmxleGJlbG93PTc3OTI7ZS5UY29tbWFhY2NlbnQ9MzU0O2UuVGRvdGFjY2VudD03Nzg2O2UuVGRvdGJlbG93PTc3ODg7ZS5UZWN5cmlsbGljPTEwNTg7ZS5UZWRlc2NlbmRlcmN5cmlsbGljPTExOTY7ZS5UZW5yb21hbj04NTUzO2UuVGV0c2VjeXJpbGxpYz0xMjA0O2UuVGhldGE9OTIwO2UuVGhvb2s9NDI4O2UuVGhvcm49MjIyO2UuVGhvcm5zbWFsbD02MzQ4NjtlLlRocmVlcm9tYW49ODU0NjtlLlRpbGRlc21hbGw9NjMyMzA7ZS5UaXduYXJtZW5pYW49MTM1OTtlLlRsaW5lYmVsb3c9Nzc5MDtlLlRtb25vc3BhY2U9NjUzMzI7ZS5Ub2FybWVuaWFuPTEzMzc7ZS5Ub25lZml2ZT00NDQ7ZS5Ub25lc2l4PTM4ODtlLlRvbmV0d289NDIzO2UuVHJldHJvZmxleGhvb2s9NDMwO2UuVHNlY3lyaWxsaWM9MTA2MjtlLlRzaGVjeXJpbGxpYz0xMDM1O2UuVHNtYWxsPTYzMzQ4O2UuVHdlbHZlcm9tYW49ODU1NTtlLlR3b3JvbWFuPTg1NDU7ZS5VPTg1O2UuVWFjdXRlPTIxODtlLlVhY3V0ZXNtYWxsPTYzNDgyO2UuVWJyZXZlPTM2NDtlLlVjYXJvbj00Njc7ZS5VY2lyY2xlPTk0MTg7ZS5VY2lyY3VtZmxleD0yMTk7ZS5VY2lyY3VtZmxleGJlbG93PTc3OTg7ZS5VY2lyY3VtZmxleHNtYWxsPTYzNDgzO2UuVWN5cmlsbGljPTEwNTk7ZS5VZGJsYWN1dGU9MzY4O2UuVWRibGdyYXZlPTUzMjtlLlVkaWVyZXNpcz0yMjA7ZS5VZGllcmVzaXNhY3V0ZT00NzE7ZS5VZGllcmVzaXNiZWxvdz03Nzk0O2UuVWRpZXJlc2lzY2Fyb249NDczO2UuVWRpZXJlc2lzY3lyaWxsaWM9MTI2NDtlLlVkaWVyZXNpc2dyYXZlPTQ3NTtlLlVkaWVyZXNpc21hY3Jvbj00Njk7ZS5VZGllcmVzaXNzbWFsbD02MzQ4NDtlLlVkb3RiZWxvdz03OTA4O2UuVWdyYXZlPTIxNztlLlVncmF2ZXNtYWxsPTYzNDgxO2UuVWhvb2thYm92ZT03OTEwO2UuVWhvcm49NDMxO2UuVWhvcm5hY3V0ZT03OTEyO2UuVWhvcm5kb3RiZWxvdz03OTIwO2UuVWhvcm5ncmF2ZT03OTE0O2UuVWhvcm5ob29rYWJvdmU9NzkxNjtlLlVob3JudGlsZGU9NzkxODtlLlVodW5nYXJ1bWxhdXQ9MzY4O2UuVWh1bmdhcnVtbGF1dGN5cmlsbGljPTEyNjY7ZS5VaW52ZXJ0ZWRicmV2ZT01MzQ7ZS5Va2N5cmlsbGljPTExNDQ7ZS5VbWFjcm9uPTM2MjtlLlVtYWNyb25jeXJpbGxpYz0xMjYyO2UuVW1hY3JvbmRpZXJlc2lzPTc4MDI7ZS5VbW9ub3NwYWNlPTY1MzMzO2UuVW9nb25laz0zNzA7ZS5VcHNpbG9uPTkzMztlLlVwc2lsb24xPTk3ODtlLlVwc2lsb25hY3V0ZWhvb2tzeW1ib2xncmVlaz05Nzk7ZS5VcHNpbG9uYWZyaWNhbj00MzM7ZS5VcHNpbG9uZGllcmVzaXM9OTM5O2UuVXBzaWxvbmRpZXJlc2lzaG9va3N5bWJvbGdyZWVrPTk4MDtlLlVwc2lsb25ob29rc3ltYm9sPTk3ODtlLlVwc2lsb250b25vcz05MTA7ZS5VcmluZz0zNjY7ZS5Vc2hvcnRjeXJpbGxpYz0xMDM4O2UuVXNtYWxsPTYzMzQ5O2UuVXN0cmFpZ2h0Y3lyaWxsaWM9MTE5ODtlLlVzdHJhaWdodHN0cm9rZWN5cmlsbGljPTEyMDA7ZS5VdGlsZGU9MzYwO2UuVXRpbGRlYWN1dGU9NzgwMDtlLlV0aWxkZWJlbG93PTc3OTY7ZS5WPTg2O2UuVmNpcmNsZT05NDE5O2UuVmRvdGJlbG93PTc4MDY7ZS5WZWN5cmlsbGljPTEwNDI7ZS5WZXdhcm1lbmlhbj0xMzU4O2UuVmhvb2s9NDM0O2UuVm1vbm9zcGFjZT02NTMzNDtlLlZvYXJtZW5pYW49MTM1MjtlLlZzbWFsbD02MzM1MDtlLlZ0aWxkZT03ODA0O2UuVz04NztlLldhY3V0ZT03ODEwO2UuV2NpcmNsZT05NDIwO2UuV2NpcmN1bWZsZXg9MzcyO2UuV2RpZXJlc2lzPTc4MTI7ZS5XZG90YWNjZW50PTc4MTQ7ZS5XZG90YmVsb3c9NzgxNjtlLldncmF2ZT03ODA4O2UuV21vbm9zcGFjZT02NTMzNTtlLldzbWFsbD02MzM1MTtlLlg9ODg7ZS5YY2lyY2xlPTk0MjE7ZS5YZGllcmVzaXM9NzgyMDtlLlhkb3RhY2NlbnQ9NzgxODtlLlhlaGFybWVuaWFuPTEzNDE7ZS5YaT05MjY7ZS5YbW9ub3NwYWNlPTY1MzM2O2UuWHNtYWxsPTYzMzUyO2UuWT04OTtlLllhY3V0ZT0yMjE7ZS5ZYWN1dGVzbWFsbD02MzQ4NTtlLllhdGN5cmlsbGljPTExMjI7ZS5ZY2lyY2xlPTk0MjI7ZS5ZY2lyY3VtZmxleD0zNzQ7ZS5ZZGllcmVzaXM9Mzc2O2UuWWRpZXJlc2lzc21hbGw9NjM0ODc7ZS5ZZG90YWNjZW50PTc4MjI7ZS5ZZG90YmVsb3c9NzkyNDtlLlllcmljeXJpbGxpYz0xMDY3O2UuWWVydWRpZXJlc2lzY3lyaWxsaWM9MTI3MjtlLllncmF2ZT03OTIyO2UuWWhvb2s9NDM1O2UuWWhvb2thYm92ZT03OTI2O2UuWWlhcm1lbmlhbj0xMzQ5O2UuWWljeXJpbGxpYz0xMDMxO2UuWWl3bmFybWVuaWFuPTEzNjI7ZS5ZbW9ub3NwYWNlPTY1MzM3O2UuWXNtYWxsPTYzMzUzO2UuWXRpbGRlPTc5Mjg7ZS5ZdXNiaWdjeXJpbGxpYz0xMTMwO2UuWXVzYmlnaW90aWZpZWRjeXJpbGxpYz0xMTMyO2UuWXVzbGl0dGxlY3lyaWxsaWM9MTEyNjtlLll1c2xpdHRsZWlvdGlmaWVkY3lyaWxsaWM9MTEyODtlLlo9OTA7ZS5aYWFybWVuaWFuPTEzMzQ7ZS5aYWN1dGU9Mzc3O2UuWmNhcm9uPTM4MTtlLlpjYXJvbnNtYWxsPTYzMjMxO2UuWmNpcmNsZT05NDIzO2UuWmNpcmN1bWZsZXg9NzgyNDtlLlpkb3Q9Mzc5O2UuWmRvdGFjY2VudD0zNzk7ZS5aZG90YmVsb3c9NzgyNjtlLlplY3lyaWxsaWM9MTA0NztlLlplZGVzY2VuZGVyY3lyaWxsaWM9MTE3NjtlLlplZGllcmVzaXNjeXJpbGxpYz0xMjQ2O2UuWmV0YT05MTg7ZS5aaGVhcm1lbmlhbj0xMzM4O2UuWmhlYnJldmVjeXJpbGxpYz0xMjE3O2UuWmhlY3lyaWxsaWM9MTA0NjtlLlpoZWRlc2NlbmRlcmN5cmlsbGljPTExNzQ7ZS5aaGVkaWVyZXNpc2N5cmlsbGljPTEyNDQ7ZS5abGluZWJlbG93PTc4Mjg7ZS5abW9ub3NwYWNlPTY1MzM4O2UuWnNtYWxsPTYzMzU0O2UuWnN0cm9rZT00Mzc7ZS5hPTk3O2UuYWFiZW5nYWxpPTI0Mzg7ZS5hYWN1dGU9MjI1O2UuYWFkZXZhPTIzMTA7ZS5hYWd1amFyYXRpPTI2OTQ7ZS5hYWd1cm11a2hpPTI1NjY7ZS5hYW1hdHJhZ3VybXVraGk9MjYyMjtlLmFhcnVzcXVhcmU9MTMwNTk7ZS5hYXZvd2Vsc2lnbmJlbmdhbGk9MjQ5NDtlLmFhdm93ZWxzaWduZGV2YT0yMzY2O2UuYWF2b3dlbHNpZ25ndWphcmF0aT0yNzUwO2UuYWJicmV2aWF0aW9ubWFya2FybWVuaWFuPTEzNzU7ZS5hYmJyZXZpYXRpb25zaWduZGV2YT0yNDE2O2UuYWJlbmdhbGk9MjQzNztlLmFib3BvbW9mbz0xMjU3MDtlLmFicmV2ZT0yNTk7ZS5hYnJldmVhY3V0ZT03ODU1O2UuYWJyZXZlY3lyaWxsaWM9MTIzMztlLmFicmV2ZWRvdGJlbG93PTc4NjM7ZS5hYnJldmVncmF2ZT03ODU3O2UuYWJyZXZlaG9va2Fib3ZlPTc4NTk7ZS5hYnJldmV0aWxkZT03ODYxO2UuYWNhcm9uPTQ2MjtlLmFjaXJjbGU9OTQyNDtlLmFjaXJjdW1mbGV4PTIyNjtlLmFjaXJjdW1mbGV4YWN1dGU9Nzg0NTtlLmFjaXJjdW1mbGV4ZG90YmVsb3c9Nzg1MztlLmFjaXJjdW1mbGV4Z3JhdmU9Nzg0NztlLmFjaXJjdW1mbGV4aG9va2Fib3ZlPTc4NDk7ZS5hY2lyY3VtZmxleHRpbGRlPTc4NTE7ZS5hY3V0ZT0xODA7ZS5hY3V0ZWJlbG93Y21iPTc5MTtlLmFjdXRlY21iPTc2OTtlLmFjdXRlY29tYj03Njk7ZS5hY3V0ZWRldmE9MjM4ODtlLmFjdXRlbG93bW9kPTcxOTtlLmFjdXRldG9uZWNtYj04MzM7ZS5hY3lyaWxsaWM9MTA3MjtlLmFkYmxncmF2ZT01MTM7ZS5hZGRha2d1cm11a2hpPTI2NzM7ZS5hZGV2YT0yMzA5O2UuYWRpZXJlc2lzPTIyODtlLmFkaWVyZXNpc2N5cmlsbGljPTEyMzU7ZS5hZGllcmVzaXNtYWNyb249NDc5O2UuYWRvdGJlbG93PTc4NDE7ZS5hZG90bWFjcm9uPTQ4MTtlLmFlPTIzMDtlLmFlYWN1dGU9NTA5O2UuYWVrb3JlYW49MTI2MjQ7ZS5hZW1hY3Jvbj00ODM7ZS5hZmlpMDAyMDg9ODIxMztlLmFmaWkwODk0MT04MzU2O2UuYWZpaTEwMDE3PTEwNDA7ZS5hZmlpMTAwMTg9MTA0MTtlLmFmaWkxMDAxOT0xMDQyO2UuYWZpaTEwMDIwPTEwNDM7ZS5hZmlpMTAwMjE9MTA0NDtlLmFmaWkxMDAyMj0xMDQ1O2UuYWZpaTEwMDIzPTEwMjU7ZS5hZmlpMTAwMjQ9MTA0NjtlLmFmaWkxMDAyNT0xMDQ3O2UuYWZpaTEwMDI2PTEwNDg7ZS5hZmlpMTAwMjc9MTA0OTtlLmFmaWkxMDAyOD0xMDUwO2UuYWZpaTEwMDI5PTEwNTE7ZS5hZmlpMTAwMzA9MTA1MjtlLmFmaWkxMDAzMT0xMDUzO2UuYWZpaTEwMDMyPTEwNTQ7ZS5hZmlpMTAwMzM9MTA1NTtlLmFmaWkxMDAzND0xMDU2O2UuYWZpaTEwMDM1PTEwNTc7ZS5hZmlpMTAwMzY9MTA1ODtlLmFmaWkxMDAzNz0xMDU5O2UuYWZpaTEwMDM4PTEwNjA7ZS5hZmlpMTAwMzk9MTA2MTtlLmFmaWkxMDA0MD0xMDYyO2UuYWZpaTEwMDQxPTEwNjM7ZS5hZmlpMTAwNDI9MTA2NDtlLmFmaWkxMDA0Mz0xMDY1O2UuYWZpaTEwMDQ0PTEwNjY7ZS5hZmlpMTAwNDU9MTA2NztlLmFmaWkxMDA0Nj0xMDY4O2UuYWZpaTEwMDQ3PTEwNjk7ZS5hZmlpMTAwNDg9MTA3MDtlLmFmaWkxMDA0OT0xMDcxO2UuYWZpaTEwMDUwPTExNjg7ZS5hZmlpMTAwNTE9MTAyNjtlLmFmaWkxMDA1Mj0xMDI3O2UuYWZpaTEwMDUzPTEwMjg7ZS5hZmlpMTAwNTQ9MTAyOTtlLmFmaWkxMDA1NT0xMDMwO2UuYWZpaTEwMDU2PTEwMzE7ZS5hZmlpMTAwNTc9MTAzMjtlLmFmaWkxMDA1OD0xMDMzO2UuYWZpaTEwMDU5PTEwMzQ7ZS5hZmlpMTAwNjA9MTAzNTtlLmFmaWkxMDA2MT0xMDM2O2UuYWZpaTEwMDYyPTEwMzg7ZS5hZmlpMTAwNjM9NjMxNzI7ZS5hZmlpMTAwNjQ9NjMxNzM7ZS5hZmlpMTAwNjU9MTA3MjtlLmFmaWkxMDA2Nj0xMDczO2UuYWZpaTEwMDY3PTEwNzQ7ZS5hZmlpMTAwNjg9MTA3NTtlLmFmaWkxMDA2OT0xMDc2O2UuYWZpaTEwMDcwPTEwNzc7ZS5hZmlpMTAwNzE9MTEwNTtlLmFmaWkxMDA3Mj0xMDc4O2UuYWZpaTEwMDczPTEwNzk7ZS5hZmlpMTAwNzQ9MTA4MDtlLmFmaWkxMDA3NT0xMDgxO2UuYWZpaTEwMDc2PTEwODI7ZS5hZmlpMTAwNzc9MTA4MztlLmFmaWkxMDA3OD0xMDg0O2UuYWZpaTEwMDc5PTEwODU7ZS5hZmlpMTAwODA9MTA4NjtlLmFmaWkxMDA4MT0xMDg3O2UuYWZpaTEwMDgyPTEwODg7ZS5hZmlpMTAwODM9MTA4OTtlLmFmaWkxMDA4ND0xMDkwO2UuYWZpaTEwMDg1PTEwOTE7ZS5hZmlpMTAwODY9MTA5MjtlLmFmaWkxMDA4Nz0xMDkzO2UuYWZpaTEwMDg4PTEwOTQ7ZS5hZmlpMTAwODk9MTA5NTtlLmFmaWkxMDA5MD0xMDk2O2UuYWZpaTEwMDkxPTEwOTc7ZS5hZmlpMTAwOTI9MTA5ODtlLmFmaWkxMDA5Mz0xMDk5O2UuYWZpaTEwMDk0PTExMDA7ZS5hZmlpMTAwOTU9MTEwMTtlLmFmaWkxMDA5Nj0xMTAyO2UuYWZpaTEwMDk3PTExMDM7ZS5hZmlpMTAwOTg9MTE2OTtlLmFmaWkxMDA5OT0xMTA2O2UuYWZpaTEwMTAwPTExMDc7ZS5hZmlpMTAxMDE9MTEwODtlLmFmaWkxMDEwMj0xMTA5O2UuYWZpaTEwMTAzPTExMTA7ZS5hZmlpMTAxMDQ9MTExMTtlLmFmaWkxMDEwNT0xMTEyO2UuYWZpaTEwMTA2PTExMTM7ZS5hZmlpMTAxMDc9MTExNDtlLmFmaWkxMDEwOD0xMTE1O2UuYWZpaTEwMTA5PTExMTY7ZS5hZmlpMTAxMTA9MTExODtlLmFmaWkxMDE0NT0xMDM5O2UuYWZpaTEwMTQ2PTExMjI7ZS5hZmlpMTAxNDc9MTEzODtlLmFmaWkxMDE0OD0xMTQwO2UuYWZpaTEwMTkyPTYzMTc0O2UuYWZpaTEwMTkzPTExMTk7ZS5hZmlpMTAxOTQ9MTEyMztlLmFmaWkxMDE5NT0xMTM5O2UuYWZpaTEwMTk2PTExNDE7ZS5hZmlpMTA4MzE9NjMxNzU7ZS5hZmlpMTA4MzI9NjMxNzY7ZS5hZmlpMTA4NDY9MTI0MTtlLmFmaWkyOTk9ODIwNjtlLmFmaWkzMDA9ODIwNztlLmFmaWkzMDE9ODIwNTtlLmFmaWk1NzM4MT0xNjQyO2UuYWZpaTU3Mzg4PTE1NDg7ZS5hZmlpNTczOTI9MTYzMjtlLmFmaWk1NzM5Mz0xNjMzO2UuYWZpaTU3Mzk0PTE2MzQ7ZS5hZmlpNTczOTU9MTYzNTtlLmFmaWk1NzM5Nj0xNjM2O2UuYWZpaTU3Mzk3PTE2Mzc7ZS5hZmlpNTczOTg9MTYzODtlLmFmaWk1NzM5OT0xNjM5O2UuYWZpaTU3NDAwPTE2NDA7ZS5hZmlpNTc0MDE9MTY0MTtlLmFmaWk1NzQwMz0xNTYzO2UuYWZpaTU3NDA3PTE1Njc7ZS5hZmlpNTc0MDk9MTU2OTtlLmFmaWk1NzQxMD0xNTcwO2UuYWZpaTU3NDExPTE1NzE7ZS5hZmlpNTc0MTI9MTU3MjtlLmFmaWk1NzQxMz0xNTczO2UuYWZpaTU3NDE0PTE1NzQ7ZS5hZmlpNTc0MTU9MTU3NTtlLmFmaWk1NzQxNj0xNTc2O2UuYWZpaTU3NDE3PTE1Nzc7ZS5hZmlpNTc0MTg9MTU3ODtlLmFmaWk1NzQxOT0xNTc5O2UuYWZpaTU3NDIwPTE1ODA7ZS5hZmlpNTc0MjE9MTU4MTtlLmFmaWk1NzQyMj0xNTgyO2UuYWZpaTU3NDIzPTE1ODM7ZS5hZmlpNTc0MjQ9MTU4NDtlLmFmaWk1NzQyNT0xNTg1O2UuYWZpaTU3NDI2PTE1ODY7ZS5hZmlpNTc0Mjc9MTU4NztlLmFmaWk1NzQyOD0xNTg4O2UuYWZpaTU3NDI5PTE1ODk7ZS5hZmlpNTc0MzA9MTU5MDtlLmFmaWk1NzQzMT0xNTkxO2UuYWZpaTU3NDMyPTE1OTI7ZS5hZmlpNTc0MzM9MTU5MztlLmFmaWk1NzQzND0xNTk0O2UuYWZpaTU3NDQwPTE2MDA7ZS5hZmlpNTc0NDE9MTYwMTtlLmFmaWk1NzQ0Mj0xNjAyO2UuYWZpaTU3NDQzPTE2MDM7ZS5hZmlpNTc0NDQ9MTYwNDtlLmFmaWk1NzQ0NT0xNjA1O2UuYWZpaTU3NDQ2PTE2MDY7ZS5hZmlpNTc0NDg9MTYwODtlLmFmaWk1NzQ0OT0xNjA5O2UuYWZpaTU3NDUwPTE2MTA7ZS5hZmlpNTc0NTE9MTYxMTtlLmFmaWk1NzQ1Mj0xNjEyO2UuYWZpaTU3NDUzPTE2MTM7ZS5hZmlpNTc0NTQ9MTYxNDtlLmFmaWk1NzQ1NT0xNjE1O2UuYWZpaTU3NDU2PTE2MTY7ZS5hZmlpNTc0NTc9MTYxNztlLmFmaWk1NzQ1OD0xNjE4O2UuYWZpaTU3NDcwPTE2MDc7ZS5hZmlpNTc1MDU9MTcwMDtlLmFmaWk1NzUwNj0xNjYyO2UuYWZpaTU3NTA3PTE2NzA7ZS5hZmlpNTc1MDg9MTY4ODtlLmFmaWk1NzUwOT0xNzExO2UuYWZpaTU3NTExPTE2NTc7ZS5hZmlpNTc1MTI9MTY3MjtlLmFmaWk1NzUxMz0xNjgxO2UuYWZpaTU3NTE0PTE3MjI7ZS5hZmlpNTc1MTk9MTc0NjtlLmFmaWk1NzUzND0xNzQ5O2UuYWZpaTU3NjM2PTgzNjI7ZS5hZmlpNTc2NDU9MTQ3MDtlLmFmaWk1NzY1OD0xNDc1O2UuYWZpaTU3NjY0PTE0ODg7ZS5hZmlpNTc2NjU9MTQ4OTtlLmFmaWk1NzY2Nj0xNDkwO2UuYWZpaTU3NjY3PTE0OTE7ZS5hZmlpNTc2Njg9MTQ5MjtlLmFmaWk1NzY2OT0xNDkzO2UuYWZpaTU3NjcwPTE0OTQ7ZS5hZmlpNTc2NzE9MTQ5NTtlLmFmaWk1NzY3Mj0xNDk2O2UuYWZpaTU3NjczPTE0OTc7ZS5hZmlpNTc2NzQ9MTQ5ODtlLmFmaWk1NzY3NT0xNDk5O2UuYWZpaTU3Njc2PTE1MDA7ZS5hZmlpNTc2Nzc9MTUwMTtlLmFmaWk1NzY3OD0xNTAyO2UuYWZpaTU3Njc5PTE1MDM7ZS5hZmlpNTc2ODA9MTUwNDtlLmFmaWk1NzY4MT0xNTA1O2UuYWZpaTU3NjgyPTE1MDY7ZS5hZmlpNTc2ODM9MTUwNztlLmFmaWk1NzY4ND0xNTA4O2UuYWZpaTU3Njg1PTE1MDk7ZS5hZmlpNTc2ODY9MTUxMDtlLmFmaWk1NzY4Nz0xNTExO2UuYWZpaTU3Njg4PTE1MTI7ZS5hZmlpNTc2ODk9MTUxMztlLmFmaWk1NzY5MD0xNTE0O2UuYWZpaTU3Njk0PTY0Mjk4O2UuYWZpaTU3Njk1PTY0Mjk5O2UuYWZpaTU3NzAwPTY0MzMxO2UuYWZpaTU3NzA1PTY0Mjg3O2UuYWZpaTU3NzE2PTE1MjA7ZS5hZmlpNTc3MTc9MTUyMTtlLmFmaWk1NzcxOD0xNTIyO2UuYWZpaTU3NzIzPTY0MzA5O2UuYWZpaTU3NzkzPTE0NjA7ZS5hZmlpNTc3OTQ9MTQ2MTtlLmFmaWk1Nzc5NT0xNDYyO2UuYWZpaTU3Nzk2PTE0Njc7ZS5hZmlpNTc3OTc9MTQ2NDtlLmFmaWk1Nzc5OD0xNDYzO2UuYWZpaTU3Nzk5PTE0NTY7ZS5hZmlpNTc4MDA9MTQ1ODtlLmFmaWk1NzgwMT0xNDU3O2UuYWZpaTU3ODAyPTE0NTk7ZS5hZmlpNTc4MDM9MTQ3NDtlLmFmaWk1NzgwND0xNDczO2UuYWZpaTU3ODA2PTE0NjU7ZS5hZmlpNTc4MDc9MTQ2ODtlLmFmaWk1NzgzOT0xNDY5O2UuYWZpaTU3ODQxPTE0NzE7ZS5hZmlpNTc4NDI9MTQ3MjtlLmFmaWk1NzkyOT03MDA7ZS5hZmlpNjEyNDg9ODQ1MztlLmFmaWk2MTI4OT04NDY3O2UuYWZpaTYxMzUyPTg0NzA7ZS5hZmlpNjE1NzM9ODIzNjtlLmFmaWk2MTU3ND04MjM3O2UuYWZpaTYxNTc1PTgyMzg7ZS5hZmlpNjE2NjQ9ODIwNDtlLmFmaWk2MzE2Nz0xNjQ1O2UuYWZpaTY0OTM3PTcwMTtlLmFncmF2ZT0yMjQ7ZS5hZ3VqYXJhdGk9MjY5MztlLmFndXJtdWtoaT0yNTY1O2UuYWhpcmFnYW5hPTEyMzU0O2UuYWhvb2thYm92ZT03ODQzO2UuYWliZW5nYWxpPTI0NDg7ZS5haWJvcG9tb2ZvPTEyNTc0O2UuYWlkZXZhPTIzMjA7ZS5haWVjeXJpbGxpYz0xMjM3O2UuYWlndWphcmF0aT0yNzA0O2UuYWlndXJtdWtoaT0yNTc2O2UuYWltYXRyYWd1cm11a2hpPTI2MzI7ZS5haW5hcmFiaWM9MTU5MztlLmFpbmZpbmFsYXJhYmljPTY1MjI2O2UuYWluaW5pdGlhbGFyYWJpYz02NTIyNztlLmFpbm1lZGlhbGFyYWJpYz02NTIyODtlLmFpbnZlcnRlZGJyZXZlPTUxNTtlLmFpdm93ZWxzaWduYmVuZ2FsaT0yNTA0O2UuYWl2b3dlbHNpZ25kZXZhPTIzNzY7ZS5haXZvd2Vsc2lnbmd1amFyYXRpPTI3NjA7ZS5ha2F0YWthbmE9MTI0NTA7ZS5ha2F0YWthbmFoYWxmd2lkdGg9NjUzOTM7ZS5ha29yZWFuPTEyNjIzO2UuYWxlZj0xNDg4O2UuYWxlZmFyYWJpYz0xNTc1O2UuYWxlZmRhZ2VzaGhlYnJldz02NDMwNDtlLmFsZWZmaW5hbGFyYWJpYz02NTE2NjtlLmFsZWZoYW16YWFib3ZlYXJhYmljPTE1NzE7ZS5hbGVmaGFtemFhYm92ZWZpbmFsYXJhYmljPTY1MTU2O2UuYWxlZmhhbXphYmVsb3dhcmFiaWM9MTU3MztlLmFsZWZoYW16YWJlbG93ZmluYWxhcmFiaWM9NjUxNjA7ZS5hbGVmaGVicmV3PTE0ODg7ZS5hbGVmbGFtZWRoZWJyZXc9NjQzMzU7ZS5hbGVmbWFkZGFhYm92ZWFyYWJpYz0xNTcwO2UuYWxlZm1hZGRhYWJvdmVmaW5hbGFyYWJpYz02NTE1NDtlLmFsZWZtYWtzdXJhYXJhYmljPTE2MDk7ZS5hbGVmbWFrc3VyYWZpbmFsYXJhYmljPTY1MjY0O2UuYWxlZm1ha3N1cmFpbml0aWFsYXJhYmljPTY1MjY3O2UuYWxlZm1ha3N1cmFtZWRpYWxhcmFiaWM9NjUyNjg7ZS5hbGVmcGF0YWhoZWJyZXc9NjQzMDI7ZS5hbGVmcWFtYXRzaGVicmV3PTY0MzAzO2UuYWxlcGg9ODUwMTtlLmFsbGVxdWFsPTg3ODA7ZS5hbHBoYT05NDU7ZS5hbHBoYXRvbm9zPTk0MDtlLmFtYWNyb249MjU3O2UuYW1vbm9zcGFjZT02NTM0NTtlLmFtcGVyc2FuZD0zODtlLmFtcGVyc2FuZG1vbm9zcGFjZT02NTI4NjtlLmFtcGVyc2FuZHNtYWxsPTYzMjcwO2UuYW1zcXVhcmU9MTMyNTA7ZS5hbmJvcG9tb2ZvPTEyNTc4O2UuYW5nYm9wb21vZm89MTI1ODA7ZS5hbmdicmFja2V0bGVmdD0xMjI5NjtlLmFuZ2JyYWNrZXRyaWdodD0xMjI5NztlLmFuZ2toYW5raHV0aGFpPTM2NzQ7ZS5hbmdsZT04NzM2O2UuYW5nbGVicmFja2V0bGVmdD0xMjI5NjtlLmFuZ2xlYnJhY2tldGxlZnR2ZXJ0aWNhbD02NTA4NztlLmFuZ2xlYnJhY2tldHJpZ2h0PTEyMjk3O2UuYW5nbGVicmFja2V0cmlnaHR2ZXJ0aWNhbD02NTA4ODtlLmFuZ2xlbGVmdD05MDAxO2UuYW5nbGVyaWdodD05MDAyO2UuYW5nc3Ryb209ODQ5MTtlLmFub3RlbGVpYT05MDM7ZS5hbnVkYXR0YWRldmE9MjM4NjtlLmFudXN2YXJhYmVuZ2FsaT0yNDM0O2UuYW51c3ZhcmFkZXZhPTIzMDY7ZS5hbnVzdmFyYWd1amFyYXRpPTI2OTA7ZS5hb2dvbmVrPTI2MTtlLmFwYWF0b3NxdWFyZT0xMzA1NjtlLmFwYXJlbj05MzcyO2UuYXBvc3Ryb3BoZWFybWVuaWFuPTEzNzA7ZS5hcG9zdHJvcGhlbW9kPTcwMDtlLmFwcGxlPTYzNzQzO2UuYXBwcm9hY2hlcz04Nzg0O2UuYXBwcm94ZXF1YWw9ODc3NjtlLmFwcHJveGVxdWFsb3JpbWFnZT04Nzg2O2UuYXBwcm94aW1hdGVseWVxdWFsPTg3NzM7ZS5hcmFlYWVrb3JlYW49MTI2ODY7ZS5hcmFlYWtvcmVhbj0xMjY4NTtlLmFyYz04OTc4O2UuYXJpZ2h0aGFsZnJpbmc9NzgzNDtlLmFyaW5nPTIyOTtlLmFyaW5nYWN1dGU9NTA3O2UuYXJpbmdiZWxvdz03NjgxO2UuYXJyb3dib3RoPTg1OTY7ZS5hcnJvd2Rhc2hkb3duPTg2NzU7ZS5hcnJvd2Rhc2hsZWZ0PTg2NzI7ZS5hcnJvd2Rhc2hyaWdodD04Njc0O2UuYXJyb3dkYXNodXA9ODY3MztlLmFycm93ZGJsYm90aD04NjYwO2UuYXJyb3dkYmxkb3duPTg2NTk7ZS5hcnJvd2RibGxlZnQ9ODY1NjtlLmFycm93ZGJscmlnaHQ9ODY1ODtlLmFycm93ZGJsdXA9ODY1NztlLmFycm93ZG93bj04NTk1O2UuYXJyb3dkb3dubGVmdD04NjAxO2UuYXJyb3dkb3ducmlnaHQ9ODYwMDtlLmFycm93ZG93bndoaXRlPTg2ODE7ZS5hcnJvd2hlYWRkb3dubW9kPTcwOTtlLmFycm93aGVhZGxlZnRtb2Q9NzA2O2UuYXJyb3doZWFkcmlnaHRtb2Q9NzA3O2UuYXJyb3doZWFkdXBtb2Q9NzA4O2UuYXJyb3dob3JpemV4PTYzNzE5O2UuYXJyb3dsZWZ0PTg1OTI7ZS5hcnJvd2xlZnRkYmw9ODY1NjtlLmFycm93bGVmdGRibHN0cm9rZT04NjUzO2UuYXJyb3dsZWZ0b3ZlcnJpZ2h0PTg2NDY7ZS5hcnJvd2xlZnR3aGl0ZT04Njc4O2UuYXJyb3dyaWdodD04NTk0O2UuYXJyb3dyaWdodGRibHN0cm9rZT04NjU1O2UuYXJyb3dyaWdodGhlYXZ5PTEwMTQyO2UuYXJyb3dyaWdodG92ZXJsZWZ0PTg2NDQ7ZS5hcnJvd3JpZ2h0d2hpdGU9ODY4MDtlLmFycm93dGFibGVmdD04Njc2O2UuYXJyb3d0YWJyaWdodD04Njc3O2UuYXJyb3d1cD04NTkzO2UuYXJyb3d1cGRuPTg1OTc7ZS5hcnJvd3VwZG5ic2U9ODYxNjtlLmFycm93dXBkb3duYmFzZT04NjE2O2UuYXJyb3d1cGxlZnQ9ODU5ODtlLmFycm93dXBsZWZ0b2Zkb3duPTg2NDU7ZS5hcnJvd3VwcmlnaHQ9ODU5OTtlLmFycm93dXB3aGl0ZT04Njc5O2UuYXJyb3d2ZXJ0ZXg9NjM3MTg7ZS5hc2NpaWNpcmN1bT05NDtlLmFzY2lpY2lyY3VtbW9ub3NwYWNlPTY1MzQyO2UuYXNjaWl0aWxkZT0xMjY7ZS5hc2NpaXRpbGRlbW9ub3NwYWNlPTY1Mzc0O2UuYXNjcmlwdD01OTM7ZS5hc2NyaXB0dHVybmVkPTU5NDtlLmFzbWFsbGhpcmFnYW5hPTEyMzUzO2UuYXNtYWxsa2F0YWthbmE9MTI0NDk7ZS5hc21hbGxrYXRha2FuYWhhbGZ3aWR0aD02NTM4MztlLmFzdGVyaXNrPTQyO2UuYXN0ZXJpc2thbHRvbmVhcmFiaWM9MTY0NTtlLmFzdGVyaXNrYXJhYmljPTE2NDU7ZS5hc3Rlcmlza21hdGg9ODcyNztlLmFzdGVyaXNrbW9ub3NwYWNlPTY1MjkwO2UuYXN0ZXJpc2tzbWFsbD02NTEyMTtlLmFzdGVyaXNtPTgyNTg7ZS5hc3VwZXJpb3I9NjMyMDk7ZS5hc3ltcHRvdGljYWxseWVxdWFsPTg3NzE7ZS5hdD02NDtlLmF0aWxkZT0yMjc7ZS5hdG1vbm9zcGFjZT02NTMxMjtlLmF0c21hbGw9NjUxMzE7ZS5hdHVybmVkPTU5MjtlLmF1YmVuZ2FsaT0yNDUyO2UuYXVib3BvbW9mbz0xMjU3NjtlLmF1ZGV2YT0yMzI0O2UuYXVndWphcmF0aT0yNzA4O2UuYXVndXJtdWtoaT0yNTgwO2UuYXVsZW5ndGhtYXJrYmVuZ2FsaT0yNTE5O2UuYXVtYXRyYWd1cm11a2hpPTI2MzY7ZS5hdXZvd2Vsc2lnbmJlbmdhbGk9MjUwODtlLmF1dm93ZWxzaWduZGV2YT0yMzgwO2UuYXV2b3dlbHNpZ25ndWphcmF0aT0yNzY0O2UuYXZhZ3JhaGFkZXZhPTIzNjU7ZS5heWJhcm1lbmlhbj0xMzc3O2UuYXlpbj0xNTA2O2UuYXlpbmFsdG9uZWhlYnJldz02NDI4ODtlLmF5aW5oZWJyZXc9MTUwNjtlLmI9OTg7ZS5iYWJlbmdhbGk9MjQ3NjtlLmJhY2tzbGFzaD05MjtlLmJhY2tzbGFzaG1vbm9zcGFjZT02NTM0MDtlLmJhZGV2YT0yMzQ4O2UuYmFndWphcmF0aT0yNzMyO2UuYmFndXJtdWtoaT0yNjA0O2UuYmFoaXJhZ2FuYT0xMjQwMDtlLmJhaHR0aGFpPTM2NDc7ZS5iYWthdGFrYW5hPTEyNDk2O2UuYmFyPTEyNDtlLmJhcm1vbm9zcGFjZT02NTM3MjtlLmJib3BvbW9mbz0xMjU0OTtlLmJjaXJjbGU9OTQyNTtlLmJkb3RhY2NlbnQ9NzY4MztlLmJkb3RiZWxvdz03Njg1O2UuYmVhbWVkc2l4dGVlbnRobm90ZXM9OTgzNjtlLmJlY2F1c2U9ODc1NztlLmJlY3lyaWxsaWM9MTA3MztlLmJlaGFyYWJpYz0xNTc2O2UuYmVoZmluYWxhcmFiaWM9NjUxNjg7ZS5iZWhpbml0aWFsYXJhYmljPTY1MTY5O2UuYmVoaXJhZ2FuYT0xMjQwOTtlLmJlaG1lZGlhbGFyYWJpYz02NTE3MDtlLmJlaG1lZW1pbml0aWFsYXJhYmljPTY0NjcxO2UuYmVobWVlbWlzb2xhdGVkYXJhYmljPTY0NTIwO2UuYmVobm9vbmZpbmFsYXJhYmljPTY0NjIxO2UuYmVrYXRha2FuYT0xMjUwNTtlLmJlbmFybWVuaWFuPTEzNzg7ZS5iZXQ9MTQ4OTtlLmJldGE9OTQ2O2UuYmV0YXN5bWJvbGdyZWVrPTk3NjtlLmJldGRhZ2VzaD02NDMwNTtlLmJldGRhZ2VzaGhlYnJldz02NDMwNTtlLmJldGhlYnJldz0xNDg5O2UuYmV0cmFmZWhlYnJldz02NDMzMjtlLmJoYWJlbmdhbGk9MjQ3NztlLmJoYWRldmE9MjM0OTtlLmJoYWd1amFyYXRpPTI3MzM7ZS5iaGFndXJtdWtoaT0yNjA1O2UuYmhvb2s9NTk1O2UuYmloaXJhZ2FuYT0xMjQwMztlLmJpa2F0YWthbmE9MTI0OTk7ZS5iaWxhYmlhbGNsaWNrPTY2NDtlLmJpbmRpZ3VybXVraGk9MjU2MjtlLmJpcnVzcXVhcmU9MTMxMDU7ZS5ibGFja2NpcmNsZT05Njc5O2UuYmxhY2tkaWFtb25kPTk2NzA7ZS5ibGFja2Rvd25wb2ludGluZ3RyaWFuZ2xlPTk2NjA7ZS5ibGFja2xlZnRwb2ludGluZ3BvaW50ZXI9OTY2ODtlLmJsYWNrbGVmdHBvaW50aW5ndHJpYW5nbGU9OTY2NDtlLmJsYWNrbGVudGljdWxhcmJyYWNrZXRsZWZ0PTEyMzA0O2UuYmxhY2tsZW50aWN1bGFyYnJhY2tldGxlZnR2ZXJ0aWNhbD02NTA4MztlLmJsYWNrbGVudGljdWxhcmJyYWNrZXRyaWdodD0xMjMwNTtlLmJsYWNrbGVudGljdWxhcmJyYWNrZXRyaWdodHZlcnRpY2FsPTY1MDg0O2UuYmxhY2tsb3dlcmxlZnR0cmlhbmdsZT05Njk5O2UuYmxhY2tsb3dlcnJpZ2h0dHJpYW5nbGU9OTY5ODtlLmJsYWNrcmVjdGFuZ2xlPTk2NDQ7ZS5ibGFja3JpZ2h0cG9pbnRpbmdwb2ludGVyPTk2NTg7ZS5ibGFja3JpZ2h0cG9pbnRpbmd0cmlhbmdsZT05NjU0O2UuYmxhY2tzbWFsbHNxdWFyZT05NjQyO2UuYmxhY2tzbWlsaW5nZmFjZT05Nzg3O2UuYmxhY2tzcXVhcmU9OTYzMjtlLmJsYWNrc3Rhcj05NzMzO2UuYmxhY2t1cHBlcmxlZnR0cmlhbmdsZT05NzAwO2UuYmxhY2t1cHBlcnJpZ2h0dHJpYW5nbGU9OTcwMTtlLmJsYWNrdXBwb2ludGluZ3NtYWxsdHJpYW5nbGU9OTY1MjtlLmJsYWNrdXBwb2ludGluZ3RyaWFuZ2xlPTk2NTA7ZS5ibGFuaz05MjUxO2UuYmxpbmViZWxvdz03Njg3O2UuYmxvY2s9OTYwODtlLmJtb25vc3BhY2U9NjUzNDY7ZS5ib2JhaW1haXRoYWk9MzYxMDtlLmJvaGlyYWdhbmE9MTI0MTI7ZS5ib2thdGFrYW5hPTEyNTA4O2UuYnBhcmVuPTkzNzM7ZS5icXNxdWFyZT0xMzI1MTtlLmJyYWNlZXg9NjM3MzI7ZS5icmFjZWxlZnQ9MTIzO2UuYnJhY2VsZWZ0YnQ9NjM3MzE7ZS5icmFjZWxlZnRtaWQ9NjM3MzA7ZS5icmFjZWxlZnRtb25vc3BhY2U9NjUzNzE7ZS5icmFjZWxlZnRzbWFsbD02NTExNTtlLmJyYWNlbGVmdHRwPTYzNzI5O2UuYnJhY2VsZWZ0dmVydGljYWw9NjUwNzk7ZS5icmFjZXJpZ2h0PTEyNTtlLmJyYWNlcmlnaHRidD02Mzc0MjtlLmJyYWNlcmlnaHRtaWQ9NjM3NDE7ZS5icmFjZXJpZ2h0bW9ub3NwYWNlPTY1MzczO2UuYnJhY2VyaWdodHNtYWxsPTY1MTE2O2UuYnJhY2VyaWdodHRwPTYzNzQwO2UuYnJhY2VyaWdodHZlcnRpY2FsPTY1MDgwO2UuYnJhY2tldGxlZnQ9OTE7ZS5icmFja2V0bGVmdGJ0PTYzNzI4O2UuYnJhY2tldGxlZnRleD02MzcyNztlLmJyYWNrZXRsZWZ0bW9ub3NwYWNlPTY1MzM5O2UuYnJhY2tldGxlZnR0cD02MzcyNjtlLmJyYWNrZXRyaWdodD05MztlLmJyYWNrZXRyaWdodGJ0PTYzNzM5O2UuYnJhY2tldHJpZ2h0ZXg9NjM3Mzg7ZS5icmFja2V0cmlnaHRtb25vc3BhY2U9NjUzNDE7ZS5icmFja2V0cmlnaHR0cD02MzczNztlLmJyZXZlPTcyODtlLmJyZXZlYmVsb3djbWI9ODE0O2UuYnJldmVjbWI9Nzc0O2UuYnJldmVpbnZlcnRlZGJlbG93Y21iPTgxNTtlLmJyZXZlaW52ZXJ0ZWRjbWI9Nzg1O2UuYnJldmVpbnZlcnRlZGRvdWJsZWNtYj04NjU7ZS5icmlkZ2ViZWxvd2NtYj04MTA7ZS5icmlkZ2VpbnZlcnRlZGJlbG93Y21iPTgyNjtlLmJyb2tlbmJhcj0xNjY7ZS5ic3Ryb2tlPTM4NDtlLmJzdXBlcmlvcj02MzIxMDtlLmJ0b3BiYXI9Mzg3O2UuYnVoaXJhZ2FuYT0xMjQwNjtlLmJ1a2F0YWthbmE9MTI1MDI7ZS5idWxsZXQ9ODIyNjtlLmJ1bGxldGludmVyc2U9OTY4ODtlLmJ1bGxldG9wZXJhdG9yPTg3Mjk7ZS5idWxsc2V5ZT05Njc4O2UuYz05OTtlLmNhYXJtZW5pYW49MTM5MDtlLmNhYmVuZ2FsaT0yNDU4O2UuY2FjdXRlPTI2MztlLmNhZGV2YT0yMzMwO2UuY2FndWphcmF0aT0yNzE0O2UuY2FndXJtdWtoaT0yNTg2O2UuY2Fsc3F1YXJlPTEzMTkyO2UuY2FuZHJhYmluZHViZW5nYWxpPTI0MzM7ZS5jYW5kcmFiaW5kdWNtYj03ODQ7ZS5jYW5kcmFiaW5kdWRldmE9MjMwNTtlLmNhbmRyYWJpbmR1Z3VqYXJhdGk9MjY4OTtlLmNhcHNsb2NrPTg2ODI7ZS5jYXJlb2Y9ODQ1MztlLmNhcm9uPTcxMTtlLmNhcm9uYmVsb3djbWI9ODEyO2UuY2Fyb25jbWI9NzgwO2UuY2FycmlhZ2VyZXR1cm49ODYyOTtlLmNib3BvbW9mbz0xMjU2ODtlLmNjYXJvbj0yNjk7ZS5jY2VkaWxsYT0yMzE7ZS5jY2VkaWxsYWFjdXRlPTc2ODk7ZS5jY2lyY2xlPTk0MjY7ZS5jY2lyY3VtZmxleD0yNjU7ZS5jY3VybD01OTc7ZS5jZG90PTI2NztlLmNkb3RhY2NlbnQ9MjY3O2UuY2RzcXVhcmU9MTMyNTM7ZS5jZWRpbGxhPTE4NDtlLmNlZGlsbGFjbWI9ODA3O2UuY2VudD0xNjI7ZS5jZW50aWdyYWRlPTg0NTE7ZS5jZW50aW5mZXJpb3I9NjMxOTk7ZS5jZW50bW9ub3NwYWNlPTY1NTA0O2UuY2VudG9sZHN0eWxlPTYzMzk0O2UuY2VudHN1cGVyaW9yPTYzMjAwO2UuY2hhYXJtZW5pYW49MTQwMTtlLmNoYWJlbmdhbGk9MjQ1OTtlLmNoYWRldmE9MjMzMTtlLmNoYWd1amFyYXRpPTI3MTU7ZS5jaGFndXJtdWtoaT0yNTg3O2UuY2hib3BvbW9mbz0xMjU2NDtlLmNoZWFia2hhc2lhbmN5cmlsbGljPTEyMTM7ZS5jaGVja21hcms9MTAwMDM7ZS5jaGVjeXJpbGxpYz0xMDk1O2UuY2hlZGVzY2VuZGVyYWJraGFzaWFuY3lyaWxsaWM9MTIxNTtlLmNoZWRlc2NlbmRlcmN5cmlsbGljPTEyMDc7ZS5jaGVkaWVyZXNpc2N5cmlsbGljPTEyNjk7ZS5jaGVoYXJtZW5pYW49MTM5NTtlLmNoZWtoYWthc3NpYW5jeXJpbGxpYz0xMjI4O2UuY2hldmVydGljYWxzdHJva2VjeXJpbGxpYz0xMjA5O2UuY2hpPTk2NztlLmNoaWV1Y2hhY2lyY2xla29yZWFuPTEyOTE5O2UuY2hpZXVjaGFwYXJlbmtvcmVhbj0xMjgyMztlLmNoaWV1Y2hjaXJjbGVrb3JlYW49MTI5MDU7ZS5jaGlldWNoa29yZWFuPTEyNjE4O2UuY2hpZXVjaHBhcmVua29yZWFuPTEyODA5O2UuY2hvY2hhbmd0aGFpPTM1OTQ7ZS5jaG9jaGFudGhhaT0zNTkyO2UuY2hvY2hpbmd0aGFpPTM1OTM7ZS5jaG9jaG9ldGhhaT0zNTk2O2UuY2hvb2s9MzkyO2UuY2lldWNhY2lyY2xla29yZWFuPTEyOTE4O2UuY2lldWNhcGFyZW5rb3JlYW49MTI4MjI7ZS5jaWV1Y2NpcmNsZWtvcmVhbj0xMjkwNDtlLmNpZXVja29yZWFuPTEyNjE2O2UuY2lldWNwYXJlbmtvcmVhbj0xMjgwODtlLmNpZXVjdXBhcmVua29yZWFuPTEyODI4O2UuY2lyY2xlPTk2NzU7ZS5jaXJjbGVjb3B5cnQ9MTY5O2UuY2lyY2xlbXVsdGlwbHk9ODg1NTtlLmNpcmNsZW90PTg4NTc7ZS5jaXJjbGVwbHVzPTg4NTM7ZS5jaXJjbGVwb3N0YWxtYXJrPTEyMzQyO2UuY2lyY2xld2l0aGxlZnRoYWxmYmxhY2s9OTY4MDtlLmNpcmNsZXdpdGhyaWdodGhhbGZibGFjaz05NjgxO2UuY2lyY3VtZmxleD03MTA7ZS5jaXJjdW1mbGV4YmVsb3djbWI9ODEzO2UuY2lyY3VtZmxleGNtYj03NzA7ZS5jbGVhcj04OTk5O2UuY2xpY2thbHZlb2xhcj00NTA7ZS5jbGlja2RlbnRhbD00NDg7ZS5jbGlja2xhdGVyYWw9NDQ5O2UuY2xpY2tyZXRyb2ZsZXg9NDUxO2UuY2x1Yj05ODI3O2UuY2x1YnN1aXRibGFjaz05ODI3O2UuY2x1YnN1aXR3aGl0ZT05ODMxO2UuY21jdWJlZHNxdWFyZT0xMzIyMDtlLmNtb25vc3BhY2U9NjUzNDc7ZS5jbXNxdWFyZWRzcXVhcmU9MTMyMTY7ZS5jb2FybWVuaWFuPTE0MDk7ZS5jb2xvbj01ODtlLmNvbG9ubW9uZXRhcnk9ODM1MztlLmNvbG9ubW9ub3NwYWNlPTY1MzA2O2UuY29sb25zaWduPTgzNTM7ZS5jb2xvbnNtYWxsPTY1MTA5O2UuY29sb250cmlhbmd1bGFyaGFsZm1vZD03MjE7ZS5jb2xvbnRyaWFuZ3VsYXJtb2Q9NzIwO2UuY29tbWE9NDQ7ZS5jb21tYWFib3ZlY21iPTc4NztlLmNvbW1hYWJvdmVyaWdodGNtYj03ODk7ZS5jb21tYWFjY2VudD02MzE3MTtlLmNvbW1hYXJhYmljPTE1NDg7ZS5jb21tYWFybWVuaWFuPTEzNzM7ZS5jb21tYWluZmVyaW9yPTYzMjAxO2UuY29tbWFtb25vc3BhY2U9NjUyOTI7ZS5jb21tYXJldmVyc2VkYWJvdmVjbWI9Nzg4O2UuY29tbWFyZXZlcnNlZG1vZD03MDE7ZS5jb21tYXNtYWxsPTY1MTA0O2UuY29tbWFzdXBlcmlvcj02MzIwMjtlLmNvbW1hdHVybmVkYWJvdmVjbWI9Nzg2O2UuY29tbWF0dXJuZWRtb2Q9Njk5O2UuY29tcGFzcz05Nzg4O2UuY29uZ3J1ZW50PTg3NzM7ZS5jb250b3VyaW50ZWdyYWw9ODc1MDtlLmNvbnRyb2w9ODk2MztlLmNvbnRyb2xBQ0s9NjtlLmNvbnRyb2xCRUw9NztlLmNvbnRyb2xCUz04O2UuY29udHJvbENBTj0yNDtlLmNvbnRyb2xDUj0xMztlLmNvbnRyb2xEQzE9MTc7ZS5jb250cm9sREMyPTE4O2UuY29udHJvbERDMz0xOTtlLmNvbnRyb2xEQzQ9MjA7ZS5jb250cm9sREVMPTEyNztlLmNvbnRyb2xETEU9MTY7ZS5jb250cm9sRU09MjU7ZS5jb250cm9sRU5RPTU7ZS5jb250cm9sRU9UPTQ7ZS5jb250cm9sRVNDPTI3O2UuY29udHJvbEVUQj0yMztlLmNvbnRyb2xFVFg9MztlLmNvbnRyb2xGRj0xMjtlLmNvbnRyb2xGUz0yODtlLmNvbnRyb2xHUz0yOTtlLmNvbnRyb2xIVD05O2UuY29udHJvbExGPTEwO2UuY29udHJvbE5BSz0yMTtlLmNvbnRyb2xOVUxMPTA7ZS5jb250cm9sUlM9MzA7ZS5jb250cm9sU0k9MTU7ZS5jb250cm9sU089MTQ7ZS5jb250cm9sU09UPTI7ZS5jb250cm9sU1RYPTE7ZS5jb250cm9sU1VCPTI2O2UuY29udHJvbFNZTj0yMjtlLmNvbnRyb2xVUz0zMTtlLmNvbnRyb2xWVD0xMTtlLmNvcHlyaWdodD0xNjk7ZS5jb3B5cmlnaHRzYW5zPTYzNzIxO2UuY29weXJpZ2h0c2VyaWY9NjMxOTM7ZS5jb3JuZXJicmFja2V0bGVmdD0xMjMwMDtlLmNvcm5lcmJyYWNrZXRsZWZ0aGFsZndpZHRoPTY1Mzc4O2UuY29ybmVyYnJhY2tldGxlZnR2ZXJ0aWNhbD02NTA4OTtlLmNvcm5lcmJyYWNrZXRyaWdodD0xMjMwMTtlLmNvcm5lcmJyYWNrZXRyaWdodGhhbGZ3aWR0aD02NTM3OTtlLmNvcm5lcmJyYWNrZXRyaWdodHZlcnRpY2FsPTY1MDkwO2UuY29ycG9yYXRpb25zcXVhcmU9MTMxODM7ZS5jb3NxdWFyZT0xMzI1NTtlLmNvdmVya2dzcXVhcmU9MTMyNTQ7ZS5jcGFyZW49OTM3NDtlLmNydXplaXJvPTgzNTQ7ZS5jc3RyZXRjaGVkPTY2MztlLmN1cmx5YW5kPTg5MTE7ZS5jdXJseW9yPTg5MTA7ZS5jdXJyZW5jeT0xNjQ7ZS5jeXJCcmV2ZT02MzE4NTtlLmN5ckZsZXg9NjMxODY7ZS5jeXJicmV2ZT02MzE4ODtlLmN5cmZsZXg9NjMxODk7ZS5kPTEwMDtlLmRhYXJtZW5pYW49MTM4MDtlLmRhYmVuZ2FsaT0yNDcwO2UuZGFkYXJhYmljPTE1OTA7ZS5kYWRldmE9MjM0MjtlLmRhZGZpbmFsYXJhYmljPTY1MjE0O2UuZGFkaW5pdGlhbGFyYWJpYz02NTIxNTtlLmRhZG1lZGlhbGFyYWJpYz02NTIxNjtlLmRhZ2VzaD0xNDY4O2UuZGFnZXNoaGVicmV3PTE0Njg7ZS5kYWdnZXI9ODIyNDtlLmRhZ2dlcmRibD04MjI1O2UuZGFndWphcmF0aT0yNzI2O2UuZGFndXJtdWtoaT0yNTk4O2UuZGFoaXJhZ2FuYT0xMjM4NDtlLmRha2F0YWthbmE9MTI0ODA7ZS5kYWxhcmFiaWM9MTU4MztlLmRhbGV0PTE0OTE7ZS5kYWxldGRhZ2VzaD02NDMwNztlLmRhbGV0ZGFnZXNoaGVicmV3PTY0MzA3O2UuZGFsZXRoZWJyZXc9MTQ5MTtlLmRhbGZpbmFsYXJhYmljPTY1MTk0O2UuZGFtbWFhcmFiaWM9MTYxNTtlLmRhbW1hbG93YXJhYmljPTE2MTU7ZS5kYW1tYXRhbmFsdG9uZWFyYWJpYz0xNjEyO2UuZGFtbWF0YW5hcmFiaWM9MTYxMjtlLmRhbmRhPTI0MDQ7ZS5kYXJnYWhlYnJldz0xNDQ3O2UuZGFyZ2FsZWZ0aGVicmV3PTE0NDc7ZS5kYXNpYXBuZXVtYXRhY3lyaWxsaWNjbWI9MTE1NztlLmRibEdyYXZlPTYzMTg3O2UuZGJsYW5nbGVicmFja2V0bGVmdD0xMjI5ODtlLmRibGFuZ2xlYnJhY2tldGxlZnR2ZXJ0aWNhbD02NTA4NTtlLmRibGFuZ2xlYnJhY2tldHJpZ2h0PTEyMjk5O2UuZGJsYW5nbGVicmFja2V0cmlnaHR2ZXJ0aWNhbD02NTA4NjtlLmRibGFyY2hpbnZlcnRlZGJlbG93Y21iPTgxMTtlLmRibGFycm93bGVmdD04NjYwO2UuZGJsYXJyb3dyaWdodD04NjU4O2UuZGJsZGFuZGE9MjQwNTtlLmRibGdyYXZlPTYzMTkwO2UuZGJsZ3JhdmVjbWI9NzgzO2UuZGJsaW50ZWdyYWw9ODc0ODtlLmRibGxvd2xpbmU9ODIxNTtlLmRibGxvd2xpbmVjbWI9ODE5O2UuZGJsb3ZlcmxpbmVjbWI9ODMxO2UuZGJscHJpbWVtb2Q9Njk4O2UuZGJsdmVydGljYWxiYXI9ODIxNDtlLmRibHZlcnRpY2FsbGluZWFib3ZlY21iPTc4MjtlLmRib3BvbW9mbz0xMjU1MztlLmRic3F1YXJlPTEzMjU2O2UuZGNhcm9uPTI3MTtlLmRjZWRpbGxhPTc2OTc7ZS5kY2lyY2xlPTk0Mjc7ZS5kY2lyY3VtZmxleGJlbG93PTc2OTk7ZS5kY3JvYXQ9MjczO2UuZGRhYmVuZ2FsaT0yNDY1O2UuZGRhZGV2YT0yMzM3O2UuZGRhZ3VqYXJhdGk9MjcyMTtlLmRkYWd1cm11a2hpPTI1OTM7ZS5kZGFsYXJhYmljPTE2NzI7ZS5kZGFsZmluYWxhcmFiaWM9NjQzOTM7ZS5kZGRoYWRldmE9MjM5NjtlLmRkaGFiZW5nYWxpPTI0NjY7ZS5kZGhhZGV2YT0yMzM4O2UuZGRoYWd1amFyYXRpPTI3MjI7ZS5kZGhhZ3VybXVraGk9MjU5NDtlLmRkb3RhY2NlbnQ9NzY5MTtlLmRkb3RiZWxvdz03NjkzO2UuZGVjaW1hbHNlcGFyYXRvcmFyYWJpYz0xNjQzO2UuZGVjaW1hbHNlcGFyYXRvcnBlcnNpYW49MTY0MztlLmRlY3lyaWxsaWM9MTA3NjtlLmRlZ3JlZT0xNzY7ZS5kZWhpaGVicmV3PTE0NTM7ZS5kZWhpcmFnYW5hPTEyMzkxO2UuZGVpY29wdGljPTEwMDc7ZS5kZWthdGFrYW5hPTEyNDg3O2UuZGVsZXRlbGVmdD05MDAzO2UuZGVsZXRlcmlnaHQ9ODk5ODtlLmRlbHRhPTk0ODtlLmRlbHRhdHVybmVkPTM5NztlLmRlbm9taW5hdG9ybWludXNvbmVudW1lcmF0b3JiZW5nYWxpPTI1NTI7ZS5kZXpoPTY3NjtlLmRoYWJlbmdhbGk9MjQ3MTtlLmRoYWRldmE9MjM0MztlLmRoYWd1amFyYXRpPTI3Mjc7ZS5kaGFndXJtdWtoaT0yNTk5O2UuZGhvb2s9NTk5O2UuZGlhbHl0aWthdG9ub3M9OTAxO2UuZGlhbHl0aWthdG9ub3NjbWI9ODM2O2UuZGlhbW9uZD05ODMwO2UuZGlhbW9uZHN1aXR3aGl0ZT05ODI2O2UuZGllcmVzaXM9MTY4O2UuZGllcmVzaXNhY3V0ZT02MzE5MTtlLmRpZXJlc2lzYmVsb3djbWI9ODA0O2UuZGllcmVzaXNjbWI9Nzc2O2UuZGllcmVzaXNncmF2ZT02MzE5MjtlLmRpZXJlc2lzdG9ub3M9OTAxO2UuZGloaXJhZ2FuYT0xMjM4NjtlLmRpa2F0YWthbmE9MTI0ODI7ZS5kaXR0b21hcms9MTIyOTE7ZS5kaXZpZGU9MjQ3O2UuZGl2aWRlcz04NzM5O2UuZGl2aXNpb25zbGFzaD04NzI1O2UuZGplY3lyaWxsaWM9MTEwNjtlLmRrc2hhZGU9OTYxOTtlLmRsaW5lYmVsb3c9NzY5NTtlLmRsc3F1YXJlPTEzMjA3O2UuZG1hY3Jvbj0yNzM7ZS5kbW9ub3NwYWNlPTY1MzQ4O2UuZG5ibG9jaz05NjA0O2UuZG9jaGFkYXRoYWk9MzU5ODtlLmRvZGVrdGhhaT0zNjA0O2UuZG9oaXJhZ2FuYT0xMjM5MztlLmRva2F0YWthbmE9MTI0ODk7ZS5kb2xsYXI9MzY7ZS5kb2xsYXJpbmZlcmlvcj02MzIwMztlLmRvbGxhcm1vbm9zcGFjZT02NTI4NDtlLmRvbGxhcm9sZHN0eWxlPTYzMjY4O2UuZG9sbGFyc21hbGw9NjUxMjk7ZS5kb2xsYXJzdXBlcmlvcj02MzIwNDtlLmRvbmc9ODM2MztlLmRvcnVzcXVhcmU9MTMwOTQ7ZS5kb3RhY2NlbnQ9NzI5O2UuZG90YWNjZW50Y21iPTc3NTtlLmRvdGJlbG93Y21iPTgwMztlLmRvdGJlbG93Y29tYj04MDM7ZS5kb3RrYXRha2FuYT0xMjUzOTtlLmRvdGxlc3NpPTMwNTtlLmRvdGxlc3NqPTYzMTY2O2UuZG90bGVzc2pzdHJva2Vob29rPTY0NDtlLmRvdG1hdGg9ODkwMTtlLmRvdHRlZGNpcmNsZT05Njc2O2UuZG91YmxleW9kcGF0YWg9NjQyODc7ZS5kb3VibGV5b2RwYXRhaGhlYnJldz02NDI4NztlLmRvd250YWNrYmVsb3djbWI9Nzk4O2UuZG93bnRhY2ttb2Q9NzI1O2UuZHBhcmVuPTkzNzU7ZS5kc3VwZXJpb3I9NjMyMTE7ZS5kdGFpbD01OTg7ZS5kdG9wYmFyPTM5NjtlLmR1aGlyYWdhbmE9MTIzODk7ZS5kdWthdGFrYW5hPTEyNDg1O2UuZHo9NDk5O2UuZHphbHRvbmU9Njc1O2UuZHpjYXJvbj00NTQ7ZS5kemN1cmw9Njc3O2UuZHplYWJraGFzaWFuY3lyaWxsaWM9MTI0OTtlLmR6ZWN5cmlsbGljPTExMDk7ZS5kemhlY3lyaWxsaWM9MTExOTtlLmU9MTAxO2UuZWFjdXRlPTIzMztlLmVhcnRoPTk3OTM7ZS5lYmVuZ2FsaT0yNDQ3O2UuZWJvcG9tb2ZvPTEyNTcyO2UuZWJyZXZlPTI3NztlLmVjYW5kcmFkZXZhPTIzMTc7ZS5lY2FuZHJhZ3VqYXJhdGk9MjcwMTtlLmVjYW5kcmF2b3dlbHNpZ25kZXZhPTIzNzM7ZS5lY2FuZHJhdm93ZWxzaWduZ3VqYXJhdGk9Mjc1NztlLmVjYXJvbj0yODM7ZS5lY2VkaWxsYWJyZXZlPTc3MDk7ZS5lY2hhcm1lbmlhbj0xMzgxO2UuZWNoeWl3bmFybWVuaWFuPTE0MTU7ZS5lY2lyY2xlPTk0Mjg7ZS5lY2lyY3VtZmxleD0yMzQ7ZS5lY2lyY3VtZmxleGFjdXRlPTc4NzE7ZS5lY2lyY3VtZmxleGJlbG93PTc3MDU7ZS5lY2lyY3VtZmxleGRvdGJlbG93PTc4Nzk7ZS5lY2lyY3VtZmxleGdyYXZlPTc4NzM7ZS5lY2lyY3VtZmxleGhvb2thYm92ZT03ODc1O2UuZWNpcmN1bWZsZXh0aWxkZT03ODc3O2UuZWN5cmlsbGljPTExMDg7ZS5lZGJsZ3JhdmU9NTE3O2UuZWRldmE9MjMxOTtlLmVkaWVyZXNpcz0yMzU7ZS5lZG90PTI3OTtlLmVkb3RhY2NlbnQ9Mjc5O2UuZWRvdGJlbG93PTc4NjU7ZS5lZWd1cm11a2hpPTI1NzU7ZS5lZW1hdHJhZ3VybXVraGk9MjYzMTtlLmVmY3lyaWxsaWM9MTA5MjtlLmVncmF2ZT0yMzI7ZS5lZ3VqYXJhdGk9MjcwMztlLmVoYXJtZW5pYW49MTM4MztlLmVoYm9wb21vZm89MTI1NzM7ZS5laGlyYWdhbmE9MTIzNjA7ZS5laG9va2Fib3ZlPTc4Njc7ZS5laWJvcG9tb2ZvPTEyNTc1O2UuZWlnaHQ9NTY7ZS5laWdodGFyYWJpYz0xNjQwO2UuZWlnaHRiZW5nYWxpPTI1NDI7ZS5laWdodGNpcmNsZT05MzE5O2UuZWlnaHRjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmPTEwMTI5O2UuZWlnaHRkZXZhPTI0MTQ7ZS5laWdodGVlbmNpcmNsZT05MzI5O2UuZWlnaHRlZW5wYXJlbj05MzQ5O2UuZWlnaHRlZW5wZXJpb2Q9OTM2OTtlLmVpZ2h0Z3VqYXJhdGk9Mjc5ODtlLmVpZ2h0Z3VybXVraGk9MjY3MDtlLmVpZ2h0aGFja2FyYWJpYz0xNjQwO2UuZWlnaHRoYW5nemhvdT0xMjMyODtlLmVpZ2h0aG5vdGViZWFtZWQ9OTgzNTtlLmVpZ2h0aWRlb2dyYXBoaWNwYXJlbj0xMjgzOTtlLmVpZ2h0aW5mZXJpb3I9ODMyODtlLmVpZ2h0bW9ub3NwYWNlPTY1MzA0O2UuZWlnaHRvbGRzdHlsZT02MzI4ODtlLmVpZ2h0cGFyZW49OTMzOTtlLmVpZ2h0cGVyaW9kPTkzNTk7ZS5laWdodHBlcnNpYW49MTc4NDtlLmVpZ2h0cm9tYW49ODU2NztlLmVpZ2h0c3VwZXJpb3I9ODMxMjtlLmVpZ2h0dGhhaT0zNjcyO2UuZWludmVydGVkYnJldmU9NTE5O2UuZWlvdGlmaWVkY3lyaWxsaWM9MTEyNTtlLmVrYXRha2FuYT0xMjQ1NjtlLmVrYXRha2FuYWhhbGZ3aWR0aD02NTM5NjtlLmVrb25rYXJndXJtdWtoaT0yNjc2O2UuZWtvcmVhbj0xMjYyODtlLmVsY3lyaWxsaWM9MTA4MztlLmVsZW1lbnQ9ODcxMjtlLmVsZXZlbmNpcmNsZT05MzIyO2UuZWxldmVucGFyZW49OTM0MjtlLmVsZXZlbnBlcmlvZD05MzYyO2UuZWxldmVucm9tYW49ODU3MDtlLmVsbGlwc2lzPTgyMzA7ZS5lbGxpcHNpc3ZlcnRpY2FsPTg5NDI7ZS5lbWFjcm9uPTI3NTtlLmVtYWNyb25hY3V0ZT03NzAzO2UuZW1hY3JvbmdyYXZlPTc3MDE7ZS5lbWN5cmlsbGljPTEwODQ7ZS5lbWRhc2g9ODIxMjtlLmVtZGFzaHZlcnRpY2FsPTY1MDczO2UuZW1vbm9zcGFjZT02NTM0OTtlLmVtcGhhc2lzbWFya2FybWVuaWFuPTEzNzE7ZS5lbXB0eXNldD04NzA5O2UuZW5ib3BvbW9mbz0xMjU3OTtlLmVuY3lyaWxsaWM9MTA4NTtlLmVuZGFzaD04MjExO2UuZW5kYXNodmVydGljYWw9NjUwNzQ7ZS5lbmRlc2NlbmRlcmN5cmlsbGljPTExODc7ZS5lbmc9MzMxO2UuZW5nYm9wb21vZm89MTI1ODE7ZS5lbmdoZWN5cmlsbGljPTExODk7ZS5lbmhvb2tjeXJpbGxpYz0xMjI0O2UuZW5zcGFjZT04MTk0O2UuZW9nb25laz0yODE7ZS5lb2tvcmVhbj0xMjYyNztlLmVvcGVuPTYwMztlLmVvcGVuY2xvc2VkPTY2NjtlLmVvcGVucmV2ZXJzZWQ9NjA0O2UuZW9wZW5yZXZlcnNlZGNsb3NlZD02MDY7ZS5lb3BlbnJldmVyc2VkaG9vaz02MDU7ZS5lcGFyZW49OTM3NjtlLmVwc2lsb249OTQ5O2UuZXBzaWxvbnRvbm9zPTk0MTtlLmVxdWFsPTYxO2UuZXF1YWxtb25vc3BhY2U9NjUzMDk7ZS5lcXVhbHNtYWxsPTY1MTI2O2UuZXF1YWxzdXBlcmlvcj04MzE2O2UuZXF1aXZhbGVuY2U9ODgwMTtlLmVyYm9wb21vZm89MTI1ODI7ZS5lcmN5cmlsbGljPTEwODg7ZS5lcmV2ZXJzZWQ9NjAwO2UuZXJldmVyc2VkY3lyaWxsaWM9MTEwMTtlLmVzY3lyaWxsaWM9MTA4OTtlLmVzZGVzY2VuZGVyY3lyaWxsaWM9MTE5NTtlLmVzaD02NDM7ZS5lc2hjdXJsPTY0NjtlLmVzaG9ydGRldmE9MjMxODtlLmVzaG9ydHZvd2Vsc2lnbmRldmE9MjM3NDtlLmVzaHJldmVyc2VkbG9vcD00MjY7ZS5lc2hzcXVhdHJldmVyc2VkPTY0NTtlLmVzbWFsbGhpcmFnYW5hPTEyMzU5O2UuZXNtYWxsa2F0YWthbmE9MTI0NTU7ZS5lc21hbGxrYXRha2FuYWhhbGZ3aWR0aD02NTM4NjtlLmVzdGltYXRlZD04NDk0O2UuZXN1cGVyaW9yPTYzMjEyO2UuZXRhPTk1MTtlLmV0YXJtZW5pYW49MTM4NDtlLmV0YXRvbm9zPTk0MjtlLmV0aD0yNDA7ZS5ldGlsZGU9Nzg2OTtlLmV0aWxkZWJlbG93PTc3MDc7ZS5ldG5haHRhZm91a2hoZWJyZXc9MTQyNTtlLmV0bmFodGFmb3VraGxlZnRoZWJyZXc9MTQyNTtlLmV0bmFodGFoZWJyZXc9MTQyNTtlLmV0bmFodGFsZWZ0aGVicmV3PTE0MjU7ZS5ldHVybmVkPTQ3NztlLmV1a29yZWFuPTEyNjQxO2UuZXVybz04MzY0O2UuZXZvd2Vsc2lnbmJlbmdhbGk9MjUwMztlLmV2b3dlbHNpZ25kZXZhPTIzNzU7ZS5ldm93ZWxzaWduZ3VqYXJhdGk9Mjc1OTtlLmV4Y2xhbT0zMztlLmV4Y2xhbWFybWVuaWFuPTEzNzI7ZS5leGNsYW1kYmw9ODI1MjtlLmV4Y2xhbWRvd249MTYxO2UuZXhjbGFtZG93bnNtYWxsPTYzMzkzO2UuZXhjbGFtbW9ub3NwYWNlPTY1MjgxO2UuZXhjbGFtc21hbGw9NjMyNjU7ZS5leGlzdGVudGlhbD04NzA3O2UuZXpoPTY1ODtlLmV6aGNhcm9uPTQ5NTtlLmV6aGN1cmw9NjU5O2UuZXpocmV2ZXJzZWQ9NDQxO2UuZXpodGFpbD00NDI7ZS5mPTEwMjtlLmZhZGV2YT0yMzk4O2UuZmFndXJtdWtoaT0yNjU0O2UuZmFocmVuaGVpdD04NDU3O2UuZmF0aGFhcmFiaWM9MTYxNDtlLmZhdGhhbG93YXJhYmljPTE2MTQ7ZS5mYXRoYXRhbmFyYWJpYz0xNjExO2UuZmJvcG9tb2ZvPTEyNTUyO2UuZmNpcmNsZT05NDI5O2UuZmRvdGFjY2VudD03NzExO2UuZmVoYXJhYmljPTE2MDE7ZS5mZWhhcm1lbmlhbj0xNDE0O2UuZmVoZmluYWxhcmFiaWM9NjUyMzQ7ZS5mZWhpbml0aWFsYXJhYmljPTY1MjM1O2UuZmVobWVkaWFsYXJhYmljPTY1MjM2O2UuZmVpY29wdGljPTk5NztlLmZlbWFsZT05NzkyO2UuZmY9NjQyNTY7ZS5mX2Y9NjQyNTY7ZS5mZmk9NjQyNTk7ZS5mX2ZfaT02NDI1OTtlLmZmbD02NDI2MDtlLmZfZl9sPTY0MjYwO2UuZmk9NjQyNTc7ZS5mX2k9NjQyNTc7ZS5maWZ0ZWVuY2lyY2xlPTkzMjY7ZS5maWZ0ZWVucGFyZW49OTM0NjtlLmZpZnRlZW5wZXJpb2Q9OTM2NjtlLmZpZ3VyZWRhc2g9ODIxMDtlLmZpbGxlZGJveD05NjMyO2UuZmlsbGVkcmVjdD05NjQ0O2UuZmluYWxrYWY9MTQ5ODtlLmZpbmFsa2FmZGFnZXNoPTY0MzE0O2UuZmluYWxrYWZkYWdlc2hoZWJyZXc9NjQzMTQ7ZS5maW5hbGthZmhlYnJldz0xNDk4O2UuZmluYWxtZW09MTUwMTtlLmZpbmFsbWVtaGVicmV3PTE1MDE7ZS5maW5hbG51bj0xNTAzO2UuZmluYWxudW5oZWJyZXc9MTUwMztlLmZpbmFscGU9MTUwNztlLmZpbmFscGVoZWJyZXc9MTUwNztlLmZpbmFsdHNhZGk9MTUwOTtlLmZpbmFsdHNhZGloZWJyZXc9MTUwOTtlLmZpcnN0dG9uZWNoaW5lc2U9NzEzO2UuZmlzaGV5ZT05NjczO2UuZml0YWN5cmlsbGljPTExMzk7ZS5maXZlPTUzO2UuZml2ZWFyYWJpYz0xNjM3O2UuZml2ZWJlbmdhbGk9MjUzOTtlLmZpdmVjaXJjbGU9OTMxNjtlLmZpdmVjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmPTEwMTI2O2UuZml2ZWRldmE9MjQxMTtlLmZpdmVlaWdodGhzPTg1NDE7ZS5maXZlZ3VqYXJhdGk9Mjc5NTtlLmZpdmVndXJtdWtoaT0yNjY3O2UuZml2ZWhhY2thcmFiaWM9MTYzNztlLmZpdmVoYW5nemhvdT0xMjMyNTtlLmZpdmVpZGVvZ3JhcGhpY3BhcmVuPTEyODM2O2UuZml2ZWluZmVyaW9yPTgzMjU7ZS5maXZlbW9ub3NwYWNlPTY1MzAxO2UuZml2ZW9sZHN0eWxlPTYzMjg1O2UuZml2ZXBhcmVuPTkzMzY7ZS5maXZlcGVyaW9kPTkzNTY7ZS5maXZlcGVyc2lhbj0xNzgxO2UuZml2ZXJvbWFuPTg1NjQ7ZS5maXZlc3VwZXJpb3I9ODMwOTtlLmZpdmV0aGFpPTM2Njk7ZS5mbD02NDI1ODtlLmZfbD02NDI1ODtlLmZsb3Jpbj00MDI7ZS5mbW9ub3NwYWNlPTY1MzUwO2UuZm1zcXVhcmU9MTMyMDk7ZS5mb2ZhbnRoYWk9MzYxNTtlLmZvZmF0aGFpPTM2MTM7ZS5mb25nbWFudGhhaT0zNjYzO2UuZm9yYWxsPTg3MDQ7ZS5mb3VyPTUyO2UuZm91cmFyYWJpYz0xNjM2O2UuZm91cmJlbmdhbGk9MjUzODtlLmZvdXJjaXJjbGU9OTMxNTtlLmZvdXJjaXJjbGVpbnZlcnNlc2Fuc3NlcmlmPTEwMTI1O2UuZm91cmRldmE9MjQxMDtlLmZvdXJndWphcmF0aT0yNzk0O2UuZm91cmd1cm11a2hpPTI2NjY7ZS5mb3VyaGFja2FyYWJpYz0xNjM2O2UuZm91cmhhbmd6aG91PTEyMzI0O2UuZm91cmlkZW9ncmFwaGljcGFyZW49MTI4MzU7ZS5mb3VyaW5mZXJpb3I9ODMyNDtlLmZvdXJtb25vc3BhY2U9NjUzMDA7ZS5mb3VybnVtZXJhdG9yYmVuZ2FsaT0yNTUxO2UuZm91cm9sZHN0eWxlPTYzMjg0O2UuZm91cnBhcmVuPTkzMzU7ZS5mb3VycGVyaW9kPTkzNTU7ZS5mb3VycGVyc2lhbj0xNzgwO2UuZm91cnJvbWFuPTg1NjM7ZS5mb3Vyc3VwZXJpb3I9ODMwODtlLmZvdXJ0ZWVuY2lyY2xlPTkzMjU7ZS5mb3VydGVlbnBhcmVuPTkzNDU7ZS5mb3VydGVlbnBlcmlvZD05MzY1O2UuZm91cnRoYWk9MzY2ODtlLmZvdXJ0aHRvbmVjaGluZXNlPTcxNTtlLmZwYXJlbj05Mzc3O2UuZnJhY3Rpb249ODI2MDtlLmZyYW5jPTgzNTU7ZS5nPTEwMztlLmdhYmVuZ2FsaT0yNDU1O2UuZ2FjdXRlPTUwMTtlLmdhZGV2YT0yMzI3O2UuZ2FmYXJhYmljPTE3MTE7ZS5nYWZmaW5hbGFyYWJpYz02NDQwMztlLmdhZmluaXRpYWxhcmFiaWM9NjQ0MDQ7ZS5nYWZtZWRpYWxhcmFiaWM9NjQ0MDU7ZS5nYWd1amFyYXRpPTI3MTE7ZS5nYWd1cm11a2hpPTI1ODM7ZS5nYWhpcmFnYW5hPTEyMzY0O2UuZ2FrYXRha2FuYT0xMjQ2MDtlLmdhbW1hPTk0NztlLmdhbW1hbGF0aW5zbWFsbD02MTE7ZS5nYW1tYXN1cGVyaW9yPTczNjtlLmdhbmdpYWNvcHRpYz0xMDAzO2UuZ2JvcG9tb2ZvPTEyNTU3O2UuZ2JyZXZlPTI4NztlLmdjYXJvbj00ODc7ZS5nY2VkaWxsYT0yOTE7ZS5nY2lyY2xlPTk0MzA7ZS5nY2lyY3VtZmxleD0yODU7ZS5nY29tbWFhY2NlbnQ9MjkxO2UuZ2RvdD0yODk7ZS5nZG90YWNjZW50PTI4OTtlLmdlY3lyaWxsaWM9MTA3NTtlLmdlaGlyYWdhbmE9MTIzNzA7ZS5nZWthdGFrYW5hPTEyNDY2O2UuZ2VvbWV0cmljYWxseWVxdWFsPTg3ODU7ZS5nZXJlc2hhY2NlbnRoZWJyZXc9MTQzNjtlLmdlcmVzaGhlYnJldz0xNTIzO2UuZ2VyZXNobXVxZGFtaGVicmV3PTE0Mzc7ZS5nZXJtYW5kYmxzPTIyMztlLmdlcnNoYXlpbWFjY2VudGhlYnJldz0xNDM4O2UuZ2Vyc2hheWltaGVicmV3PTE1MjQ7ZS5nZXRhbWFyaz0xMjMwNztlLmdoYWJlbmdhbGk9MjQ1NjtlLmdoYWRhcm1lbmlhbj0xMzk0O2UuZ2hhZGV2YT0yMzI4O2UuZ2hhZ3VqYXJhdGk9MjcxMjtlLmdoYWd1cm11a2hpPTI1ODQ7ZS5naGFpbmFyYWJpYz0xNTk0O2UuZ2hhaW5maW5hbGFyYWJpYz02NTIzMDtlLmdoYWluaW5pdGlhbGFyYWJpYz02NTIzMTtlLmdoYWlubWVkaWFsYXJhYmljPTY1MjMyO2UuZ2hlbWlkZGxlaG9va2N5cmlsbGljPTExNzM7ZS5naGVzdHJva2VjeXJpbGxpYz0xMTcxO2UuZ2hldXB0dXJuY3lyaWxsaWM9MTE2OTtlLmdoaGFkZXZhPTIzOTQ7ZS5naGhhZ3VybXVraGk9MjY1MDtlLmdob29rPTYwODtlLmdoenNxdWFyZT0xMzIwMztlLmdpaGlyYWdhbmE9MTIzNjY7ZS5naWthdGFrYW5hPTEyNDYyO2UuZ2ltYXJtZW5pYW49MTM3OTtlLmdpbWVsPTE0OTA7ZS5naW1lbGRhZ2VzaD02NDMwNjtlLmdpbWVsZGFnZXNoaGVicmV3PTY0MzA2O2UuZ2ltZWxoZWJyZXc9MTQ5MDtlLmdqZWN5cmlsbGljPTExMDc7ZS5nbG90dGFsaW52ZXJ0ZWRzdHJva2U9NDQ2O2UuZ2xvdHRhbHN0b3A9NjYwO2UuZ2xvdHRhbHN0b3BpbnZlcnRlZD02NjI7ZS5nbG90dGFsc3RvcG1vZD03MDQ7ZS5nbG90dGFsc3RvcHJldmVyc2VkPTY2MTtlLmdsb3R0YWxzdG9wcmV2ZXJzZWRtb2Q9NzA1O2UuZ2xvdHRhbHN0b3ByZXZlcnNlZHN1cGVyaW9yPTc0MDtlLmdsb3R0YWxzdG9wc3Ryb2tlPTY3MztlLmdsb3R0YWxzdG9wc3Ryb2tlcmV2ZXJzZWQ9Njc0O2UuZ21hY3Jvbj03NzEzO2UuZ21vbm9zcGFjZT02NTM1MTtlLmdvaGlyYWdhbmE9MTIzNzI7ZS5nb2thdGFrYW5hPTEyNDY4O2UuZ3BhcmVuPTkzNzg7ZS5ncGFzcXVhcmU9MTMyMjg7ZS5ncmFkaWVudD04NzExO2UuZ3JhdmU9OTY7ZS5ncmF2ZWJlbG93Y21iPTc5MDtlLmdyYXZlY21iPTc2ODtlLmdyYXZlY29tYj03Njg7ZS5ncmF2ZWRldmE9MjM4NztlLmdyYXZlbG93bW9kPTcxODtlLmdyYXZlbW9ub3NwYWNlPTY1MzQ0O2UuZ3JhdmV0b25lY21iPTgzMjtlLmdyZWF0ZXI9NjI7ZS5ncmVhdGVyZXF1YWw9ODgwNTtlLmdyZWF0ZXJlcXVhbG9ybGVzcz04OTIzO2UuZ3JlYXRlcm1vbm9zcGFjZT02NTMxMDtlLmdyZWF0ZXJvcmVxdWl2YWxlbnQ9ODgxOTtlLmdyZWF0ZXJvcmxlc3M9ODgyMztlLmdyZWF0ZXJvdmVyZXF1YWw9ODgwNztlLmdyZWF0ZXJzbWFsbD02NTEyNTtlLmdzY3JpcHQ9NjA5O2UuZ3N0cm9rZT00ODU7ZS5ndWhpcmFnYW5hPTEyMzY4O2UuZ3VpbGxlbW90bGVmdD0xNzE7ZS5ndWlsbGVtb3RyaWdodD0xODc7ZS5ndWlsc2luZ2xsZWZ0PTgyNDk7ZS5ndWlsc2luZ2xyaWdodD04MjUwO2UuZ3VrYXRha2FuYT0xMjQ2NDtlLmd1cmFtdXNxdWFyZT0xMzA4MDtlLmd5c3F1YXJlPTEzMjU3O2UuaD0xMDQ7ZS5oYWFia2hhc2lhbmN5cmlsbGljPTExOTM7ZS5oYWFsdG9uZWFyYWJpYz0xNzI5O2UuaGFiZW5nYWxpPTI0ODk7ZS5oYWRlc2NlbmRlcmN5cmlsbGljPTEyMDM7ZS5oYWRldmE9MjM2MTtlLmhhZ3VqYXJhdGk9Mjc0NTtlLmhhZ3VybXVraGk9MjYxNztlLmhhaGFyYWJpYz0xNTgxO2UuaGFoZmluYWxhcmFiaWM9NjUxODY7ZS5oYWhpbml0aWFsYXJhYmljPTY1MTg3O2UuaGFoaXJhZ2FuYT0xMjM5OTtlLmhhaG1lZGlhbGFyYWJpYz02NTE4ODtlLmhhaXR1c3F1YXJlPTEzMDk4O2UuaGFrYXRha2FuYT0xMjQ5NTtlLmhha2F0YWthbmFoYWxmd2lkdGg9NjU0MTg7ZS5oYWxhbnRndXJtdWtoaT0yNjM3O2UuaGFtemFhcmFiaWM9MTU2OTtlLmhhbXphbG93YXJhYmljPTE1Njk7ZS5oYW5ndWxmaWxsZXI9MTI2NDQ7ZS5oYXJkc2lnbmN5cmlsbGljPTEwOTg7ZS5oYXJwb29ubGVmdGJhcmJ1cD04NjM2O2UuaGFycG9vbnJpZ2h0YmFyYnVwPTg2NDA7ZS5oYXNxdWFyZT0xMzI1ODtlLmhhdGFmcGF0YWg9MTQ1ODtlLmhhdGFmcGF0YWgxNj0xNDU4O2UuaGF0YWZwYXRhaDIzPTE0NTg7ZS5oYXRhZnBhdGFoMmY9MTQ1ODtlLmhhdGFmcGF0YWhoZWJyZXc9MTQ1ODtlLmhhdGFmcGF0YWhuYXJyb3doZWJyZXc9MTQ1ODtlLmhhdGFmcGF0YWhxdWFydGVyaGVicmV3PTE0NTg7ZS5oYXRhZnBhdGFod2lkZWhlYnJldz0xNDU4O2UuaGF0YWZxYW1hdHM9MTQ1OTtlLmhhdGFmcWFtYXRzMWI9MTQ1OTtlLmhhdGFmcWFtYXRzMjg9MTQ1OTtlLmhhdGFmcWFtYXRzMzQ9MTQ1OTtlLmhhdGFmcWFtYXRzaGVicmV3PTE0NTk7ZS5oYXRhZnFhbWF0c25hcnJvd2hlYnJldz0xNDU5O2UuaGF0YWZxYW1hdHNxdWFydGVyaGVicmV3PTE0NTk7ZS5oYXRhZnFhbWF0c3dpZGVoZWJyZXc9MTQ1OTtlLmhhdGFmc2Vnb2w9MTQ1NztlLmhhdGFmc2Vnb2wxNz0xNDU3O2UuaGF0YWZzZWdvbDI0PTE0NTc7ZS5oYXRhZnNlZ29sMzA9MTQ1NztlLmhhdGFmc2Vnb2xoZWJyZXc9MTQ1NztlLmhhdGFmc2Vnb2xuYXJyb3doZWJyZXc9MTQ1NztlLmhhdGFmc2Vnb2xxdWFydGVyaGVicmV3PTE0NTc7ZS5oYXRhZnNlZ29sd2lkZWhlYnJldz0xNDU3O2UuaGJhcj0yOTU7ZS5oYm9wb21vZm89MTI1NTk7ZS5oYnJldmViZWxvdz03NzIzO2UuaGNlZGlsbGE9NzcyMTtlLmhjaXJjbGU9OTQzMTtlLmhjaXJjdW1mbGV4PTI5MztlLmhkaWVyZXNpcz03NzE5O2UuaGRvdGFjY2VudD03NzE1O2UuaGRvdGJlbG93PTc3MTc7ZS5oZT0xNDkyO2UuaGVhcnQ9OTgyOTtlLmhlYXJ0c3VpdGJsYWNrPTk4Mjk7ZS5oZWFydHN1aXR3aGl0ZT05ODI1O2UuaGVkYWdlc2g9NjQzMDg7ZS5oZWRhZ2VzaGhlYnJldz02NDMwODtlLmhlaGFsdG9uZWFyYWJpYz0xNzI5O2UuaGVoYXJhYmljPTE2MDc7ZS5oZWhlYnJldz0xNDkyO2UuaGVoZmluYWxhbHRvbmVhcmFiaWM9NjQ0MjM7ZS5oZWhmaW5hbGFsdHR3b2FyYWJpYz02NTI1ODtlLmhlaGZpbmFsYXJhYmljPTY1MjU4O2UuaGVoaGFtemFhYm92ZWZpbmFsYXJhYmljPTY0NDIxO2UuaGVoaGFtemFhYm92ZWlzb2xhdGVkYXJhYmljPTY0NDIwO2UuaGVoaW5pdGlhbGFsdG9uZWFyYWJpYz02NDQyNDtlLmhlaGluaXRpYWxhcmFiaWM9NjUyNTk7ZS5oZWhpcmFnYW5hPTEyNDA4O2UuaGVobWVkaWFsYWx0b25lYXJhYmljPTY0NDI1O2UuaGVobWVkaWFsYXJhYmljPTY1MjYwO2UuaGVpc2VpZXJhc3F1YXJlPTEzMTc5O2UuaGVrYXRha2FuYT0xMjUwNDtlLmhla2F0YWthbmFoYWxmd2lkdGg9NjU0MjE7ZS5oZWt1dGFhcnVzcXVhcmU9MTMxMTA7ZS5oZW5naG9vaz02MTU7ZS5oZXJ1dHVzcXVhcmU9MTMxMTM7ZS5oZXQ9MTQ5NTtlLmhldGhlYnJldz0xNDk1O2UuaGhvb2s9NjE0O2UuaGhvb2tzdXBlcmlvcj02ODk7ZS5oaWV1aGFjaXJjbGVrb3JlYW49MTI5MjM7ZS5oaWV1aGFwYXJlbmtvcmVhbj0xMjgyNztlLmhpZXVoY2lyY2xla29yZWFuPTEyOTA5O2UuaGlldWhrb3JlYW49MTI2MjI7ZS5oaWV1aHBhcmVua29yZWFuPTEyODEzO2UuaGloaXJhZ2FuYT0xMjQwMjtlLmhpa2F0YWthbmE9MTI0OTg7ZS5oaWthdGFrYW5haGFsZndpZHRoPTY1NDE5O2UuaGlyaXE9MTQ2MDtlLmhpcmlxMTQ9MTQ2MDtlLmhpcmlxMjE9MTQ2MDtlLmhpcmlxMmQ9MTQ2MDtlLmhpcmlxaGVicmV3PTE0NjA7ZS5oaXJpcW5hcnJvd2hlYnJldz0xNDYwO2UuaGlyaXFxdWFydGVyaGVicmV3PTE0NjA7ZS5oaXJpcXdpZGVoZWJyZXc9MTQ2MDtlLmhsaW5lYmVsb3c9NzgzMDtlLmhtb25vc3BhY2U9NjUzNTI7ZS5ob2FybWVuaWFuPTEzOTI7ZS5ob2hpcHRoYWk9MzYyNztlLmhvaGlyYWdhbmE9MTI0MTE7ZS5ob2thdGFrYW5hPTEyNTA3O2UuaG9rYXRha2FuYWhhbGZ3aWR0aD02NTQyMjtlLmhvbGFtPTE0NjU7ZS5ob2xhbTE5PTE0NjU7ZS5ob2xhbTI2PTE0NjU7ZS5ob2xhbTMyPTE0NjU7ZS5ob2xhbWhlYnJldz0xNDY1O2UuaG9sYW1uYXJyb3doZWJyZXc9MTQ2NTtlLmhvbGFtcXVhcnRlcmhlYnJldz0xNDY1O2UuaG9sYW13aWRlaGVicmV3PTE0NjU7ZS5ob25va2h1a3RoYWk9MzYzMDtlLmhvb2thYm92ZWNvbWI9Nzc3O2UuaG9va2NtYj03Nzc7ZS5ob29rcGFsYXRhbGl6ZWRiZWxvd2NtYj04MDE7ZS5ob29rcmV0cm9mbGV4YmVsb3djbWI9ODAyO2UuaG9vbnNxdWFyZT0xMzEyMjtlLmhvcmljb3B0aWM9MTAwMTtlLmhvcml6b250YWxiYXI9ODIxMztlLmhvcm5jbWI9Nzk1O2UuaG90c3ByaW5ncz05ODMyO2UuaG91c2U9ODk2MjtlLmhwYXJlbj05Mzc5O2UuaHN1cGVyaW9yPTY4ODtlLmh0dXJuZWQ9NjEzO2UuaHVoaXJhZ2FuYT0xMjQwNTtlLmh1aWl0b3NxdWFyZT0xMzEwNztlLmh1a2F0YWthbmE9MTI1MDE7ZS5odWthdGFrYW5haGFsZndpZHRoPTY1NDIwO2UuaHVuZ2FydW1sYXV0PTczMztlLmh1bmdhcnVtbGF1dGNtYj03Nzk7ZS5odj00MDU7ZS5oeXBoZW49NDU7ZS5oeXBoZW5pbmZlcmlvcj02MzIwNTtlLmh5cGhlbm1vbm9zcGFjZT02NTI5MztlLmh5cGhlbnNtYWxsPTY1MTIzO2UuaHlwaGVuc3VwZXJpb3I9NjMyMDY7ZS5oeXBoZW50d289ODIwODtlLmk9MTA1O2UuaWFjdXRlPTIzNztlLmlhY3lyaWxsaWM9MTEwMztlLmliZW5nYWxpPTI0Mzk7ZS5pYm9wb21vZm89MTI1ODM7ZS5pYnJldmU9MzAxO2UuaWNhcm9uPTQ2NDtlLmljaXJjbGU9OTQzMjtlLmljaXJjdW1mbGV4PTIzODtlLmljeXJpbGxpYz0xMTEwO2UuaWRibGdyYXZlPTUyMTtlLmlkZW9ncmFwaGVhcnRoY2lyY2xlPTEyOTQzO2UuaWRlb2dyYXBoZmlyZWNpcmNsZT0xMjkzOTtlLmlkZW9ncmFwaGljYWxsaWFuY2VwYXJlbj0xMjg2MztlLmlkZW9ncmFwaGljY2FsbHBhcmVuPTEyODU4O2UuaWRlb2dyYXBoaWNjZW50cmVjaXJjbGU9MTI5NjU7ZS5pZGVvZ3JhcGhpY2Nsb3NlPTEyMjk0O2UuaWRlb2dyYXBoaWNjb21tYT0xMjI4OTtlLmlkZW9ncmFwaGljY29tbWFsZWZ0PTY1MzgwO2UuaWRlb2dyYXBoaWNjb25ncmF0dWxhdGlvbnBhcmVuPTEyODU1O2UuaWRlb2dyYXBoaWNjb3JyZWN0Y2lyY2xlPTEyOTYzO2UuaWRlb2dyYXBoaWNlYXJ0aHBhcmVuPTEyODQ3O2UuaWRlb2dyYXBoaWNlbnRlcnByaXNlcGFyZW49MTI4NjE7ZS5pZGVvZ3JhcGhpY2V4Y2VsbGVudGNpcmNsZT0xMjk1NztlLmlkZW9ncmFwaGljZmVzdGl2YWxwYXJlbj0xMjg2NDtlLmlkZW9ncmFwaGljZmluYW5jaWFsY2lyY2xlPTEyOTUwO2UuaWRlb2dyYXBoaWNmaW5hbmNpYWxwYXJlbj0xMjg1NDtlLmlkZW9ncmFwaGljZmlyZXBhcmVuPTEyODQzO2UuaWRlb2dyYXBoaWNoYXZlcGFyZW49MTI4NTA7ZS5pZGVvZ3JhcGhpY2hpZ2hjaXJjbGU9MTI5NjQ7ZS5pZGVvZ3JhcGhpY2l0ZXJhdGlvbm1hcms9MTIyOTM7ZS5pZGVvZ3JhcGhpY2xhYm9yY2lyY2xlPTEyOTUyO2UuaWRlb2dyYXBoaWNsYWJvcnBhcmVuPTEyODU2O2UuaWRlb2dyYXBoaWNsZWZ0Y2lyY2xlPTEyOTY3O2UuaWRlb2dyYXBoaWNsb3djaXJjbGU9MTI5NjY7ZS5pZGVvZ3JhcGhpY21lZGljaW5lY2lyY2xlPTEyOTY5O2UuaWRlb2dyYXBoaWNtZXRhbHBhcmVuPTEyODQ2O2UuaWRlb2dyYXBoaWNtb29ucGFyZW49MTI4NDI7ZS5pZGVvZ3JhcGhpY25hbWVwYXJlbj0xMjg1MjtlLmlkZW9ncmFwaGljcGVyaW9kPTEyMjkwO2UuaWRlb2dyYXBoaWNwcmludGNpcmNsZT0xMjk1ODtlLmlkZW9ncmFwaGljcmVhY2hwYXJlbj0xMjg2NztlLmlkZW9ncmFwaGljcmVwcmVzZW50cGFyZW49MTI4NTc7ZS5pZGVvZ3JhcGhpY3Jlc291cmNlcGFyZW49MTI4NjI7ZS5pZGVvZ3JhcGhpY3JpZ2h0Y2lyY2xlPTEyOTY4O2UuaWRlb2dyYXBoaWNzZWNyZXRjaXJjbGU9MTI5NTM7ZS5pZGVvZ3JhcGhpY3NlbGZwYXJlbj0xMjg2NjtlLmlkZW9ncmFwaGljc29jaWV0eXBhcmVuPTEyODUxO2UuaWRlb2dyYXBoaWNzcGFjZT0xMjI4ODtlLmlkZW9ncmFwaGljc3BlY2lhbHBhcmVuPTEyODUzO2UuaWRlb2dyYXBoaWNzdG9ja3BhcmVuPTEyODQ5O2UuaWRlb2dyYXBoaWNzdHVkeXBhcmVuPTEyODU5O2UuaWRlb2dyYXBoaWNzdW5wYXJlbj0xMjg0ODtlLmlkZW9ncmFwaGljc3VwZXJ2aXNlcGFyZW49MTI4NjA7ZS5pZGVvZ3JhcGhpY3dhdGVycGFyZW49MTI4NDQ7ZS5pZGVvZ3JhcGhpY3dvb2RwYXJlbj0xMjg0NTtlLmlkZW9ncmFwaGljemVybz0xMjI5NTtlLmlkZW9ncmFwaG1ldGFsY2lyY2xlPTEyOTQyO2UuaWRlb2dyYXBobW9vbmNpcmNsZT0xMjkzODtlLmlkZW9ncmFwaG5hbWVjaXJjbGU9MTI5NDg7ZS5pZGVvZ3JhcGhzdW5jaXJjbGU9MTI5NDQ7ZS5pZGVvZ3JhcGh3YXRlcmNpcmNsZT0xMjk0MDtlLmlkZW9ncmFwaHdvb2RjaXJjbGU9MTI5NDE7ZS5pZGV2YT0yMzExO2UuaWRpZXJlc2lzPTIzOTtlLmlkaWVyZXNpc2FjdXRlPTc3Mjc7ZS5pZGllcmVzaXNjeXJpbGxpYz0xMjUzO2UuaWRvdGJlbG93PTc4ODM7ZS5pZWJyZXZlY3lyaWxsaWM9MTIzOTtlLmllY3lyaWxsaWM9MTA3NztlLmlldW5nYWNpcmNsZWtvcmVhbj0xMjkxNztlLmlldW5nYXBhcmVua29yZWFuPTEyODIxO2UuaWV1bmdjaXJjbGVrb3JlYW49MTI5MDM7ZS5pZXVuZ2tvcmVhbj0xMjYxNTtlLmlldW5ncGFyZW5rb3JlYW49MTI4MDc7ZS5pZ3JhdmU9MjM2O2UuaWd1amFyYXRpPTI2OTU7ZS5pZ3VybXVraGk9MjU2NztlLmloaXJhZ2FuYT0xMjM1NjtlLmlob29rYWJvdmU9Nzg4MTtlLmlpYmVuZ2FsaT0yNDQwO2UuaWljeXJpbGxpYz0xMDgwO2UuaWlkZXZhPTIzMTI7ZS5paWd1amFyYXRpPTI2OTY7ZS5paWd1cm11a2hpPTI1Njg7ZS5paW1hdHJhZ3VybXVraGk9MjYyNDtlLmlpbnZlcnRlZGJyZXZlPTUyMztlLmlpc2hvcnRjeXJpbGxpYz0xMDgxO2UuaWl2b3dlbHNpZ25iZW5nYWxpPTI0OTY7ZS5paXZvd2Vsc2lnbmRldmE9MjM2ODtlLmlpdm93ZWxzaWduZ3VqYXJhdGk9Mjc1MjtlLmlqPTMwNztlLmlrYXRha2FuYT0xMjQ1MjtlLmlrYXRha2FuYWhhbGZ3aWR0aD02NTM5NDtlLmlrb3JlYW49MTI2NDM7ZS5pbGRlPTczMjtlLmlsdXloZWJyZXc9MTQ1MjtlLmltYWNyb249Mjk5O2UuaW1hY3JvbmN5cmlsbGljPTEyNTE7ZS5pbWFnZW9yYXBwcm94aW1hdGVseWVxdWFsPTg3ODc7ZS5pbWF0cmFndXJtdWtoaT0yNjIzO2UuaW1vbm9zcGFjZT02NTM1MztlLmluY3JlbWVudD04NzEwO2UuaW5maW5pdHk9ODczNDtlLmluaWFybWVuaWFuPTEzODc7ZS5pbnRlZ3JhbD04NzQ3O2UuaW50ZWdyYWxib3R0b209ODk5MztlLmludGVncmFsYnQ9ODk5MztlLmludGVncmFsZXg9NjM3MzM7ZS5pbnRlZ3JhbHRvcD04OTkyO2UuaW50ZWdyYWx0cD04OTkyO2UuaW50ZXJzZWN0aW9uPTg3NDU7ZS5pbnRpc3F1YXJlPTEzMDYxO2UuaW52YnVsbGV0PTk2ODg7ZS5pbnZjaXJjbGU9OTY4OTtlLmludnNtaWxlZmFjZT05Nzg3O2UuaW9jeXJpbGxpYz0xMTA1O2UuaW9nb25laz0zMDM7ZS5pb3RhPTk1MztlLmlvdGFkaWVyZXNpcz05NzA7ZS5pb3RhZGllcmVzaXN0b25vcz05MTI7ZS5pb3RhbGF0aW49NjE3O2UuaW90YXRvbm9zPTk0MztlLmlwYXJlbj05MzgwO2UuaXJpZ3VybXVraGk9MjY3NDtlLmlzbWFsbGhpcmFnYW5hPTEyMzU1O2UuaXNtYWxsa2F0YWthbmE9MTI0NTE7ZS5pc21hbGxrYXRha2FuYWhhbGZ3aWR0aD02NTM4NDtlLmlzc2hhcmJlbmdhbGk9MjU1NDtlLmlzdHJva2U9NjE2O2UuaXN1cGVyaW9yPTYzMjEzO2UuaXRlcmF0aW9uaGlyYWdhbmE9MTI0NDU7ZS5pdGVyYXRpb25rYXRha2FuYT0xMjU0MTtlLml0aWxkZT0yOTc7ZS5pdGlsZGViZWxvdz03NzI1O2UuaXVib3BvbW9mbz0xMjU4NTtlLml1Y3lyaWxsaWM9MTEwMjtlLml2b3dlbHNpZ25iZW5nYWxpPTI0OTU7ZS5pdm93ZWxzaWduZGV2YT0yMzY3O2UuaXZvd2Vsc2lnbmd1amFyYXRpPTI3NTE7ZS5pemhpdHNhY3lyaWxsaWM9MTE0MTtlLml6aGl0c2FkYmxncmF2ZWN5cmlsbGljPTExNDM7ZS5qPTEwNjtlLmphYXJtZW5pYW49MTM5MztlLmphYmVuZ2FsaT0yNDYwO2UuamFkZXZhPTIzMzI7ZS5qYWd1amFyYXRpPTI3MTY7ZS5qYWd1cm11a2hpPTI1ODg7ZS5qYm9wb21vZm89MTI1NjA7ZS5qY2Fyb249NDk2O2UuamNpcmNsZT05NDMzO2UuamNpcmN1bWZsZXg9MzA5O2UuamNyb3NzZWR0YWlsPTY2OTtlLmpkb3RsZXNzc3Ryb2tlPTYwNztlLmplY3lyaWxsaWM9MTExMjtlLmplZW1hcmFiaWM9MTU4MDtlLmplZW1maW5hbGFyYWJpYz02NTE4MjtlLmplZW1pbml0aWFsYXJhYmljPTY1MTgzO2UuamVlbW1lZGlhbGFyYWJpYz02NTE4NDtlLmplaGFyYWJpYz0xNjg4O2UuamVoZmluYWxhcmFiaWM9NjQzOTU7ZS5qaGFiZW5nYWxpPTI0NjE7ZS5qaGFkZXZhPTIzMzM7ZS5qaGFndWphcmF0aT0yNzE3O2UuamhhZ3VybXVraGk9MjU4OTtlLmpoZWhhcm1lbmlhbj0xNDAzO2UuamlzPTEyMjkyO2Uuam1vbm9zcGFjZT02NTM1NDtlLmpwYXJlbj05MzgxO2UuanN1cGVyaW9yPTY5MDtlLms9MTA3O2Uua2FiYXNoa2lyY3lyaWxsaWM9MTE4NTtlLmthYmVuZ2FsaT0yNDUzO2Uua2FjdXRlPTc3Mjk7ZS5rYWN5cmlsbGljPTEwODI7ZS5rYWRlc2NlbmRlcmN5cmlsbGljPTExNzk7ZS5rYWRldmE9MjMyNTtlLmthZj0xNDk5O2Uua2FmYXJhYmljPTE2MDM7ZS5rYWZkYWdlc2g9NjQzMTU7ZS5rYWZkYWdlc2hoZWJyZXc9NjQzMTU7ZS5rYWZmaW5hbGFyYWJpYz02NTI0MjtlLmthZmhlYnJldz0xNDk5O2Uua2FmaW5pdGlhbGFyYWJpYz02NTI0MztlLmthZm1lZGlhbGFyYWJpYz02NTI0NDtlLmthZnJhZmVoZWJyZXc9NjQzMzM7ZS5rYWd1amFyYXRpPTI3MDk7ZS5rYWd1cm11a2hpPTI1ODE7ZS5rYWhpcmFnYW5hPTEyMzYzO2Uua2Fob29rY3lyaWxsaWM9MTIyMDtlLmtha2F0YWthbmE9MTI0NTk7ZS5rYWthdGFrYW5haGFsZndpZHRoPTY1Mzk4O2Uua2FwcGE9OTU0O2Uua2FwcGFzeW1ib2xncmVlaz0xMDA4O2Uua2FweWVvdW5taWV1bWtvcmVhbj0xMjY1NztlLmthcHllb3VucGhpZXVwaGtvcmVhbj0xMjY3NjtlLmthcHllb3VucGlldXBrb3JlYW49MTI2NjQ7ZS5rYXB5ZW91bnNzYW5ncGlldXBrb3JlYW49MTI2NjU7ZS5rYXJvcmlpc3F1YXJlPTEzMDY5O2Uua2FzaGlkYWF1dG9hcmFiaWM9MTYwMDtlLmthc2hpZGFhdXRvbm9zaWRlYmVhcmluZ2FyYWJpYz0xNjAwO2Uua2FzbWFsbGthdGFrYW5hPTEyNTMzO2Uua2FzcXVhcmU9MTMxODg7ZS5rYXNyYWFyYWJpYz0xNjE2O2Uua2FzcmF0YW5hcmFiaWM9MTYxMztlLmthc3Ryb2tlY3lyaWxsaWM9MTE4MztlLmthdGFoaXJhcHJvbG9uZ21hcmtoYWxmd2lkdGg9NjUzOTI7ZS5rYXZlcnRpY2Fsc3Ryb2tlY3lyaWxsaWM9MTE4MTtlLmtib3BvbW9mbz0xMjU1ODtlLmtjYWxzcXVhcmU9MTMxOTM7ZS5rY2Fyb249NDg5O2Uua2NlZGlsbGE9MzExO2Uua2NpcmNsZT05NDM0O2Uua2NvbW1hYWNjZW50PTMxMTtlLmtkb3RiZWxvdz03NzMxO2Uua2VoYXJtZW5pYW49MTQxMjtlLmtlaGlyYWdhbmE9MTIzNjk7ZS5rZWthdGFrYW5hPTEyNDY1O2Uua2VrYXRha2FuYWhhbGZ3aWR0aD02NTQwMTtlLmtlbmFybWVuaWFuPTEzOTE7ZS5rZXNtYWxsa2F0YWthbmE9MTI1MzQ7ZS5rZ3JlZW5sYW5kaWM9MzEyO2Uua2hhYmVuZ2FsaT0yNDU0O2Uua2hhY3lyaWxsaWM9MTA5MztlLmtoYWRldmE9MjMyNjtlLmtoYWd1amFyYXRpPTI3MTA7ZS5raGFndXJtdWtoaT0yNTgyO2Uua2hhaGFyYWJpYz0xNTgyO2Uua2hhaGZpbmFsYXJhYmljPTY1MTkwO2Uua2hhaGluaXRpYWxhcmFiaWM9NjUxOTE7ZS5raGFobWVkaWFsYXJhYmljPTY1MTkyO2Uua2hlaWNvcHRpYz05OTk7ZS5raGhhZGV2YT0yMzkzO2Uua2hoYWd1cm11a2hpPTI2NDk7ZS5raGlldWtoYWNpcmNsZWtvcmVhbj0xMjkyMDtlLmtoaWV1a2hhcGFyZW5rb3JlYW49MTI4MjQ7ZS5raGlldWtoY2lyY2xla29yZWFuPTEyOTA2O2Uua2hpZXVraGtvcmVhbj0xMjYxOTtlLmtoaWV1a2hwYXJlbmtvcmVhbj0xMjgxMDtlLmtob2toYWl0aGFpPTM1ODY7ZS5raG9raG9udGhhaT0zNTg5O2Uua2hva2h1YXR0aGFpPTM1ODc7ZS5raG9raHdhaXRoYWk9MzU4ODtlLmtob211dHRoYWk9MzY3NTtlLmtob29rPTQwOTtlLmtob3Jha2hhbmd0aGFpPTM1OTA7ZS5raHpzcXVhcmU9MTMyMDE7ZS5raWhpcmFnYW5hPTEyMzY1O2Uua2lrYXRha2FuYT0xMjQ2MTtlLmtpa2F0YWthbmFoYWxmd2lkdGg9NjUzOTk7ZS5raXJvZ3VyYW11c3F1YXJlPTEzMDc3O2Uua2lyb21lZXRvcnVzcXVhcmU9MTMwNzg7ZS5raXJvc3F1YXJlPTEzMDc2O2Uua2l5ZW9rYWNpcmNsZWtvcmVhbj0xMjkxMDtlLmtpeWVva2FwYXJlbmtvcmVhbj0xMjgxNDtlLmtpeWVva2NpcmNsZWtvcmVhbj0xMjg5NjtlLmtpeWVva2tvcmVhbj0xMjU5MztlLmtpeWVva3BhcmVua29yZWFuPTEyODAwO2Uua2l5ZW9rc2lvc2tvcmVhbj0xMjU5NTtlLmtqZWN5cmlsbGljPTExMTY7ZS5rbGluZWJlbG93PTc3MzM7ZS5rbHNxdWFyZT0xMzIwODtlLmttY3ViZWRzcXVhcmU9MTMyMjI7ZS5rbW9ub3NwYWNlPTY1MzU1O2Uua21zcXVhcmVkc3F1YXJlPTEzMjE4O2Uua29oaXJhZ2FuYT0xMjM3MTtlLmtvaG1zcXVhcmU9MTMyNDg7ZS5rb2thaXRoYWk9MzU4NTtlLmtva2F0YWthbmE9MTI0Njc7ZS5rb2thdGFrYW5haGFsZndpZHRoPTY1NDAyO2Uua29vcG9zcXVhcmU9MTMwODY7ZS5rb3BwYWN5cmlsbGljPTExNTM7ZS5rb3JlYW5zdGFuZGFyZHN5bWJvbD0xMjkyNztlLmtvcm9uaXNjbWI9ODM1O2Uua3BhcmVuPTkzODI7ZS5rcGFzcXVhcmU9MTMyMjY7ZS5rc2ljeXJpbGxpYz0xMTM1O2Uua3RzcXVhcmU9MTMyNjM7ZS5rdHVybmVkPTY3MDtlLmt1aGlyYWdhbmE9MTIzNjc7ZS5rdWthdGFrYW5hPTEyNDYzO2Uua3VrYXRha2FuYWhhbGZ3aWR0aD02NTQwMDtlLmt2c3F1YXJlPTEzMjQwO2Uua3dzcXVhcmU9MTMyNDY7ZS5sPTEwODtlLmxhYmVuZ2FsaT0yNDgyO2UubGFjdXRlPTMxNDtlLmxhZGV2YT0yMzU0O2UubGFndWphcmF0aT0yNzM4O2UubGFndXJtdWtoaT0yNjEwO2UubGFra2hhbmd5YW90aGFpPTM2NTM7ZS5sYW1hbGVmZmluYWxhcmFiaWM9NjUyNzY7ZS5sYW1hbGVmaGFtemFhYm92ZWZpbmFsYXJhYmljPTY1MjcyO2UubGFtYWxlZmhhbXphYWJvdmVpc29sYXRlZGFyYWJpYz02NTI3MTtlLmxhbWFsZWZoYW16YWJlbG93ZmluYWxhcmFiaWM9NjUyNzQ7ZS5sYW1hbGVmaGFtemFiZWxvd2lzb2xhdGVkYXJhYmljPTY1MjczO2UubGFtYWxlZmlzb2xhdGVkYXJhYmljPTY1Mjc1O2UubGFtYWxlZm1hZGRhYWJvdmVmaW5hbGFyYWJpYz02NTI3MDtlLmxhbWFsZWZtYWRkYWFib3ZlaXNvbGF0ZWRhcmFiaWM9NjUyNjk7ZS5sYW1hcmFiaWM9MTYwNDtlLmxhbWJkYT05NTU7ZS5sYW1iZGFzdHJva2U9NDExO2UubGFtZWQ9MTUwMDtlLmxhbWVkZGFnZXNoPTY0MzE2O2UubGFtZWRkYWdlc2hoZWJyZXc9NjQzMTY7ZS5sYW1lZGhlYnJldz0xNTAwO2UubGFtZmluYWxhcmFiaWM9NjUyNDY7ZS5sYW1oYWhpbml0aWFsYXJhYmljPTY0NzE0O2UubGFtaW5pdGlhbGFyYWJpYz02NTI0NztlLmxhbWplZW1pbml0aWFsYXJhYmljPTY0NzEzO2UubGFta2hhaGluaXRpYWxhcmFiaWM9NjQ3MTU7ZS5sYW1sYW1oZWhpc29sYXRlZGFyYWJpYz02NTAxMDtlLmxhbW1lZGlhbGFyYWJpYz02NTI0ODtlLmxhbW1lZW1oYWhpbml0aWFsYXJhYmljPTY0OTA0O2UubGFtbWVlbWluaXRpYWxhcmFiaWM9NjQ3MTY7ZS5sYXJnZWNpcmNsZT05NzExO2UubGJhcj00MTA7ZS5sYmVsdD02MjA7ZS5sYm9wb21vZm89MTI1NTY7ZS5sY2Fyb249MzE4O2UubGNlZGlsbGE9MzE2O2UubGNpcmNsZT05NDM1O2UubGNpcmN1bWZsZXhiZWxvdz03NzQxO2UubGNvbW1hYWNjZW50PTMxNjtlLmxkb3Q9MzIwO2UubGRvdGFjY2VudD0zMjA7ZS5sZG90YmVsb3c9NzczNTtlLmxkb3RiZWxvd21hY3Jvbj03NzM3O2UubGVmdGFuZ2xlYWJvdmVjbWI9Nzk0O2UubGVmdHRhY2tiZWxvd2NtYj03OTI7ZS5sZXNzPTYwO2UubGVzc2VxdWFsPTg4MDQ7ZS5sZXNzZXF1YWxvcmdyZWF0ZXI9ODkyMjtlLmxlc3Ntb25vc3BhY2U9NjUzMDg7ZS5sZXNzb3JlcXVpdmFsZW50PTg4MTg7ZS5sZXNzb3JncmVhdGVyPTg4MjI7ZS5sZXNzb3ZlcmVxdWFsPTg4MDY7ZS5sZXNzc21hbGw9NjUxMjQ7ZS5sZXpoPTYyMjtlLmxmYmxvY2s9OTYxMjtlLmxob29rcmV0cm9mbGV4PTYyMTtlLmxpcmE9ODM1NjtlLmxpd25hcm1lbmlhbj0xMzg4O2UubGo9NDU3O2UubGplY3lyaWxsaWM9MTExMztlLmxsPTYzMTY4O2UubGxhZGV2YT0yMzU1O2UubGxhZ3VqYXJhdGk9MjczOTtlLmxsaW5lYmVsb3c9NzczOTtlLmxsbGFkZXZhPTIzNTY7ZS5sbHZvY2FsaWNiZW5nYWxpPTI1Mjk7ZS5sbHZvY2FsaWNkZXZhPTI0MDE7ZS5sbHZvY2FsaWN2b3dlbHNpZ25iZW5nYWxpPTI1MzE7ZS5sbHZvY2FsaWN2b3dlbHNpZ25kZXZhPTI0MDM7ZS5sbWlkZGxldGlsZGU9NjE5O2UubG1vbm9zcGFjZT02NTM1NjtlLmxtc3F1YXJlPTEzMjY0O2UubG9jaHVsYXRoYWk9MzYyODtlLmxvZ2ljYWxhbmQ9ODc0MztlLmxvZ2ljYWxub3Q9MTcyO2UubG9naWNhbG5vdHJldmVyc2VkPTg5NzY7ZS5sb2dpY2Fsb3I9ODc0NDtlLmxvbGluZ3RoYWk9MzYyMTtlLmxvbmdzPTM4MztlLmxvd2xpbmVjZW50ZXJsaW5lPTY1MTAyO2UubG93bGluZWNtYj04MTg7ZS5sb3dsaW5lZGFzaGVkPTY1MTAxO2UubG96ZW5nZT05Njc0O2UubHBhcmVuPTkzODM7ZS5sc2xhc2g9MzIyO2UubHNxdWFyZT04NDY3O2UubHN1cGVyaW9yPTYzMjE0O2UubHRzaGFkZT05NjE3O2UubHV0aGFpPTM2MjI7ZS5sdm9jYWxpY2JlbmdhbGk9MjQ0NDtlLmx2b2NhbGljZGV2YT0yMzE2O2UubHZvY2FsaWN2b3dlbHNpZ25iZW5nYWxpPTI1MzA7ZS5sdm9jYWxpY3Zvd2Vsc2lnbmRldmE9MjQwMjtlLmx4c3F1YXJlPTEzMjY3O2UubT0xMDk7ZS5tYWJlbmdhbGk9MjQ3ODtlLm1hY3Jvbj0xNzU7ZS5tYWNyb25iZWxvd2NtYj04MTc7ZS5tYWNyb25jbWI9NzcyO2UubWFjcm9ubG93bW9kPTcxNztlLm1hY3Jvbm1vbm9zcGFjZT02NTUwNztlLm1hY3V0ZT03NzQzO2UubWFkZXZhPTIzNTA7ZS5tYWd1amFyYXRpPTI3MzQ7ZS5tYWd1cm11a2hpPTI2MDY7ZS5tYWhhcGFraGhlYnJldz0xNDQ0O2UubWFoYXBha2hsZWZ0aGVicmV3PTE0NDQ7ZS5tYWhpcmFnYW5hPTEyNDE0O2UubWFpY2hhdHRhd2Fsb3dsZWZ0dGhhaT02MzYzNztlLm1haWNoYXR0YXdhbG93cmlnaHR0aGFpPTYzNjM2O2UubWFpY2hhdHRhd2F0aGFpPTM2NTk7ZS5tYWljaGF0dGF3YXVwcGVybGVmdHRoYWk9NjM2MzU7ZS5tYWlla2xvd2xlZnR0aGFpPTYzNjI4O2UubWFpZWtsb3dyaWdodHRoYWk9NjM2Mjc7ZS5tYWlla3RoYWk9MzY1NjtlLm1haWVrdXBwZXJsZWZ0dGhhaT02MzYyNjtlLm1haWhhbmFrYXRsZWZ0dGhhaT02MzYyMDtlLm1haWhhbmFrYXR0aGFpPTM2MzM7ZS5tYWl0YWlraHVsZWZ0dGhhaT02MzYyNTtlLm1haXRhaWtodXRoYWk9MzY1NTtlLm1haXRob2xvd2xlZnR0aGFpPTYzNjMxO2UubWFpdGhvbG93cmlnaHR0aGFpPTYzNjMwO2UubWFpdGhvdGhhaT0zNjU3O2UubWFpdGhvdXBwZXJsZWZ0dGhhaT02MzYyOTtlLm1haXRyaWxvd2xlZnR0aGFpPTYzNjM0O2UubWFpdHJpbG93cmlnaHR0aGFpPTYzNjMzO2UubWFpdHJpdGhhaT0zNjU4O2UubWFpdHJpdXBwZXJsZWZ0dGhhaT02MzYzMjtlLm1haXlhbW9rdGhhaT0zNjU0O2UubWFrYXRha2FuYT0xMjUxMDtlLm1ha2F0YWthbmFoYWxmd2lkdGg9NjU0MjM7ZS5tYWxlPTk3OTQ7ZS5tYW5zeW9uc3F1YXJlPTEzMTI3O2UubWFxYWZoZWJyZXc9MTQ3MDtlLm1hcnM9OTc5NDtlLm1hc29yYWNpcmNsZWhlYnJldz0xNDU1O2UubWFzcXVhcmU9MTMxODc7ZS5tYm9wb21vZm89MTI1NTE7ZS5tYnNxdWFyZT0xMzI2ODtlLm1jaXJjbGU9OTQzNjtlLm1jdWJlZHNxdWFyZT0xMzIyMTtlLm1kb3RhY2NlbnQ9Nzc0NTtlLm1kb3RiZWxvdz03NzQ3O2UubWVlbWFyYWJpYz0xNjA1O2UubWVlbWZpbmFsYXJhYmljPTY1MjUwO2UubWVlbWluaXRpYWxhcmFiaWM9NjUyNTE7ZS5tZWVtbWVkaWFsYXJhYmljPTY1MjUyO2UubWVlbW1lZW1pbml0aWFsYXJhYmljPTY0NzIxO2UubWVlbW1lZW1pc29sYXRlZGFyYWJpYz02NDU4NDtlLm1lZXRvcnVzcXVhcmU9MTMxMzM7ZS5tZWhpcmFnYW5hPTEyNDE3O2UubWVpemllcmFzcXVhcmU9MTMxODI7ZS5tZWthdGFrYW5hPTEyNTEzO2UubWVrYXRha2FuYWhhbGZ3aWR0aD02NTQyNjtlLm1lbT0xNTAyO2UubWVtZGFnZXNoPTY0MzE4O2UubWVtZGFnZXNoaGVicmV3PTY0MzE4O2UubWVtaGVicmV3PTE1MDI7ZS5tZW5hcm1lbmlhbj0xMzk2O2UubWVya2hhaGVicmV3PTE0NDU7ZS5tZXJraGFrZWZ1bGFoZWJyZXc9MTQ0NjtlLm1lcmtoYWtlZnVsYWxlZnRoZWJyZXc9MTQ0NjtlLm1lcmtoYWxlZnRoZWJyZXc9MTQ0NTtlLm1ob29rPTYyNTtlLm1oenNxdWFyZT0xMzIwMjtlLm1pZGRsZWRvdGthdGFrYW5haGFsZndpZHRoPTY1MzgxO2UubWlkZG90PTE4MztlLm1pZXVtYWNpcmNsZWtvcmVhbj0xMjkxNDtlLm1pZXVtYXBhcmVua29yZWFuPTEyODE4O2UubWlldW1jaXJjbGVrb3JlYW49MTI5MDA7ZS5taWV1bWtvcmVhbj0xMjYwOTtlLm1pZXVtcGFuc2lvc2tvcmVhbj0xMjY1NjtlLm1pZXVtcGFyZW5rb3JlYW49MTI4MDQ7ZS5taWV1bXBpZXVwa29yZWFuPTEyNjU0O2UubWlldW1zaW9za29yZWFuPTEyNjU1O2UubWloaXJhZ2FuYT0xMjQxNTtlLm1pa2F0YWthbmE9MTI1MTE7ZS5taWthdGFrYW5haGFsZndpZHRoPTY1NDI0O2UubWludXM9ODcyMjtlLm1pbnVzYmVsb3djbWI9ODAwO2UubWludXNjaXJjbGU9ODg1NDtlLm1pbnVzbW9kPTcyNztlLm1pbnVzcGx1cz04NzIzO2UubWludXRlPTgyNDI7ZS5taXJpYmFhcnVzcXVhcmU9MTMxMzA7ZS5taXJpc3F1YXJlPTEzMTI5O2UubWxvbmdsZWd0dXJuZWQ9NjI0O2UubWxzcXVhcmU9MTMyMDY7ZS5tbWN1YmVkc3F1YXJlPTEzMjE5O2UubW1vbm9zcGFjZT02NTM1NztlLm1tc3F1YXJlZHNxdWFyZT0xMzIxNTtlLm1vaGlyYWdhbmE9MTI0MTg7ZS5tb2htc3F1YXJlPTEzMjQ5O2UubW9rYXRha2FuYT0xMjUxNDtlLm1va2F0YWthbmFoYWxmd2lkdGg9NjU0Mjc7ZS5tb2xzcXVhcmU9MTMyNzA7ZS5tb21hdGhhaT0zNjE3O2UubW92ZXJzc3F1YXJlPTEzMjIzO2UubW92ZXJzc3F1YXJlZHNxdWFyZT0xMzIyNDtlLm1wYXJlbj05Mzg0O2UubXBhc3F1YXJlPTEzMjI3O2UubXNzcXVhcmU9MTMyMzU7ZS5tc3VwZXJpb3I9NjMyMTU7ZS5tdHVybmVkPTYyMztlLm11PTE4MTtlLm11MT0xODE7ZS5tdWFzcXVhcmU9MTMxODY7ZS5tdWNoZ3JlYXRlcj04ODExO2UubXVjaGxlc3M9ODgxMDtlLm11ZnNxdWFyZT0xMzE5NjtlLm11Z3JlZWs9OTU2O2UubXVnc3F1YXJlPTEzMTk3O2UubXVoaXJhZ2FuYT0xMjQxNjtlLm11a2F0YWthbmE9MTI1MTI7ZS5tdWthdGFrYW5haGFsZndpZHRoPTY1NDI1O2UubXVsc3F1YXJlPTEzMjA1O2UubXVsdGlwbHk9MjE1O2UubXVtc3F1YXJlPTEzMjExO2UubXVuYWhoZWJyZXc9MTQ0MztlLm11bmFobGVmdGhlYnJldz0xNDQzO2UubXVzaWNhbG5vdGU9OTgzNDtlLm11c2ljYWxub3RlZGJsPTk4MzU7ZS5tdXNpY2ZsYXRzaWduPTk4Mzc7ZS5tdXNpY3NoYXJwc2lnbj05ODM5O2UubXVzc3F1YXJlPTEzMjM0O2UubXV2c3F1YXJlPTEzMjM4O2UubXV3c3F1YXJlPTEzMjQ0O2UubXZtZWdhc3F1YXJlPTEzMjQxO2UubXZzcXVhcmU9MTMyMzk7ZS5td21lZ2FzcXVhcmU9MTMyNDc7ZS5td3NxdWFyZT0xMzI0NTtlLm49MTEwO2UubmFiZW5nYWxpPTI0NzI7ZS5uYWJsYT04NzExO2UubmFjdXRlPTMyNDtlLm5hZGV2YT0yMzQ0O2UubmFndWphcmF0aT0yNzI4O2UubmFndXJtdWtoaT0yNjAwO2UubmFoaXJhZ2FuYT0xMjM5NDtlLm5ha2F0YWthbmE9MTI0OTA7ZS5uYWthdGFrYW5haGFsZndpZHRoPTY1NDEzO2UubmFwb3N0cm9waGU9MzI5O2UubmFzcXVhcmU9MTMxODU7ZS5uYm9wb21vZm89MTI1NTU7ZS5uYnNwYWNlPTE2MDtlLm5jYXJvbj0zMjg7ZS5uY2VkaWxsYT0zMjY7ZS5uY2lyY2xlPTk0Mzc7ZS5uY2lyY3VtZmxleGJlbG93PTc3NTU7ZS5uY29tbWFhY2NlbnQ9MzI2O2UubmRvdGFjY2VudD03NzQ5O2UubmRvdGJlbG93PTc3NTE7ZS5uZWhpcmFnYW5hPTEyMzk3O2UubmVrYXRha2FuYT0xMjQ5MztlLm5la2F0YWthbmFoYWxmd2lkdGg9NjU0MTY7ZS5uZXdzaGVxZWxzaWduPTgzNjI7ZS5uZnNxdWFyZT0xMzE5NTtlLm5nYWJlbmdhbGk9MjQ1NztlLm5nYWRldmE9MjMyOTtlLm5nYWd1amFyYXRpPTI3MTM7ZS5uZ2FndXJtdWtoaT0yNTg1O2Uubmdvbmd1dGhhaT0zNTkxO2UubmhpcmFnYW5hPTEyNDM1O2Uubmhvb2tsZWZ0PTYyNjtlLm5ob29rcmV0cm9mbGV4PTYyNztlLm5pZXVuYWNpcmNsZWtvcmVhbj0xMjkxMTtlLm5pZXVuYXBhcmVua29yZWFuPTEyODE1O2UubmlldW5jaWV1Y2tvcmVhbj0xMjU5NztlLm5pZXVuY2lyY2xla29yZWFuPTEyODk3O2UubmlldW5oaWV1aGtvcmVhbj0xMjU5ODtlLm5pZXVua29yZWFuPTEyNTk2O2UubmlldW5wYW5zaW9za29yZWFuPTEyNjQ4O2UubmlldW5wYXJlbmtvcmVhbj0xMjgwMTtlLm5pZXVuc2lvc2tvcmVhbj0xMjY0NztlLm5pZXVudGlrZXV0a29yZWFuPTEyNjQ2O2UubmloaXJhZ2FuYT0xMjM5NTtlLm5pa2F0YWthbmE9MTI0OTE7ZS5uaWthdGFrYW5haGFsZndpZHRoPTY1NDE0O2UubmlraGFoaXRsZWZ0dGhhaT02MzY0MTtlLm5pa2hhaGl0dGhhaT0zNjYxO2UubmluZT01NztlLm5pbmVhcmFiaWM9MTY0MTtlLm5pbmViZW5nYWxpPTI1NDM7ZS5uaW5lY2lyY2xlPTkzMjA7ZS5uaW5lY2lyY2xlaW52ZXJzZXNhbnNzZXJpZj0xMDEzMDtlLm5pbmVkZXZhPTI0MTU7ZS5uaW5lZ3VqYXJhdGk9Mjc5OTtlLm5pbmVndXJtdWtoaT0yNjcxO2UubmluZWhhY2thcmFiaWM9MTY0MTtlLm5pbmVoYW5nemhvdT0xMjMyOTtlLm5pbmVpZGVvZ3JhcGhpY3BhcmVuPTEyODQwO2UubmluZWluZmVyaW9yPTgzMjk7ZS5uaW5lbW9ub3NwYWNlPTY1MzA1O2UubmluZW9sZHN0eWxlPTYzMjg5O2UubmluZXBhcmVuPTkzNDA7ZS5uaW5lcGVyaW9kPTkzNjA7ZS5uaW5lcGVyc2lhbj0xNzg1O2UubmluZXJvbWFuPTg1Njg7ZS5uaW5lc3VwZXJpb3I9ODMxMztlLm5pbmV0ZWVuY2lyY2xlPTkzMzA7ZS5uaW5ldGVlbnBhcmVuPTkzNTA7ZS5uaW5ldGVlbnBlcmlvZD05MzcwO2UubmluZXRoYWk9MzY3MztlLm5qPTQ2MDtlLm5qZWN5cmlsbGljPTExMTQ7ZS5ua2F0YWthbmE9MTI1MzE7ZS5ua2F0YWthbmFoYWxmd2lkdGg9NjU0Mzc7ZS5ubGVncmlnaHRsb25nPTQxNDtlLm5saW5lYmVsb3c9Nzc1MztlLm5tb25vc3BhY2U9NjUzNTg7ZS5ubXNxdWFyZT0xMzIxMDtlLm5uYWJlbmdhbGk9MjQ2NztlLm5uYWRldmE9MjMzOTtlLm5uYWd1amFyYXRpPTI3MjM7ZS5ubmFndXJtdWtoaT0yNTk1O2Uubm5uYWRldmE9MjM0NTtlLm5vaGlyYWdhbmE9MTIzOTg7ZS5ub2thdGFrYW5hPTEyNDk0O2Uubm9rYXRha2FuYWhhbGZ3aWR0aD02NTQxNztlLm5vbmJyZWFraW5nc3BhY2U9MTYwO2Uubm9uZW50aGFpPTM2MDM7ZS5ub251dGhhaT0zNjA5O2Uubm9vbmFyYWJpYz0xNjA2O2Uubm9vbmZpbmFsYXJhYmljPTY1MjU0O2Uubm9vbmdodW5uYWFyYWJpYz0xNzIyO2Uubm9vbmdodW5uYWZpbmFsYXJhYmljPTY0NDE1O2Uubm9vbmluaXRpYWxhcmFiaWM9NjUyNTU7ZS5ub29uamVlbWluaXRpYWxhcmFiaWM9NjQ3MjI7ZS5ub29uamVlbWlzb2xhdGVkYXJhYmljPTY0NTg3O2Uubm9vbm1lZGlhbGFyYWJpYz02NTI1NjtlLm5vb25tZWVtaW5pdGlhbGFyYWJpYz02NDcyNTtlLm5vb25tZWVtaXNvbGF0ZWRhcmFiaWM9NjQ1OTA7ZS5ub29ubm9vbmZpbmFsYXJhYmljPTY0NjUzO2Uubm90Y29udGFpbnM9ODcxNjtlLm5vdGVsZW1lbnQ9ODcxMztlLm5vdGVsZW1lbnRvZj04NzEzO2Uubm90ZXF1YWw9ODgwMDtlLm5vdGdyZWF0ZXI9ODgxNTtlLm5vdGdyZWF0ZXJub3JlcXVhbD04ODE3O2Uubm90Z3JlYXRlcm5vcmxlc3M9ODgyNTtlLm5vdGlkZW50aWNhbD04ODAyO2Uubm90bGVzcz04ODE0O2Uubm90bGVzc25vcmVxdWFsPTg4MTY7ZS5ub3RwYXJhbGxlbD04NzQyO2Uubm90cHJlY2VkZXM9ODgzMjtlLm5vdHN1YnNldD04ODM2O2Uubm90c3VjY2VlZHM9ODgzMztlLm5vdHN1cGVyc2V0PTg4Mzc7ZS5ub3dhcm1lbmlhbj0xMzk4O2UubnBhcmVuPTkzODU7ZS5uc3NxdWFyZT0xMzIzMztlLm5zdXBlcmlvcj04MzE5O2UubnRpbGRlPTI0MTtlLm51PTk1NztlLm51aGlyYWdhbmE9MTIzOTY7ZS5udWthdGFrYW5hPTEyNDkyO2UubnVrYXRha2FuYWhhbGZ3aWR0aD02NTQxNTtlLm51a3RhYmVuZ2FsaT0yNDkyO2UubnVrdGFkZXZhPTIzNjQ7ZS5udWt0YWd1amFyYXRpPTI3NDg7ZS5udWt0YWd1cm11a2hpPTI2MjA7ZS5udW1iZXJzaWduPTM1O2UubnVtYmVyc2lnbm1vbm9zcGFjZT02NTI4MztlLm51bWJlcnNpZ25zbWFsbD02NTExOTtlLm51bWVyYWxzaWduZ3JlZWs9ODg0O2UubnVtZXJhbHNpZ25sb3dlcmdyZWVrPTg4NTtlLm51bWVybz04NDcwO2UubnVuPTE1MDQ7ZS5udW5kYWdlc2g9NjQzMjA7ZS5udW5kYWdlc2hoZWJyZXc9NjQzMjA7ZS5udW5oZWJyZXc9MTUwNDtlLm52c3F1YXJlPTEzMjM3O2UubndzcXVhcmU9MTMyNDM7ZS5ueWFiZW5nYWxpPTI0NjI7ZS5ueWFkZXZhPTIzMzQ7ZS5ueWFndWphcmF0aT0yNzE4O2UubnlhZ3VybXVraGk9MjU5MDtlLm89MTExO2Uub2FjdXRlPTI0MztlLm9hbmd0aGFpPTM2Mjk7ZS5vYmFycmVkPTYyOTtlLm9iYXJyZWRjeXJpbGxpYz0xMjU3O2Uub2JhcnJlZGRpZXJlc2lzY3lyaWxsaWM9MTI1OTtlLm9iZW5nYWxpPTI0NTE7ZS5vYm9wb21vZm89MTI1NzE7ZS5vYnJldmU9MzM1O2Uub2NhbmRyYWRldmE9MjMyMTtlLm9jYW5kcmFndWphcmF0aT0yNzA1O2Uub2NhbmRyYXZvd2Vsc2lnbmRldmE9MjM3NztlLm9jYW5kcmF2b3dlbHNpZ25ndWphcmF0aT0yNzYxO2Uub2Nhcm9uPTQ2NjtlLm9jaXJjbGU9OTQzODtlLm9jaXJjdW1mbGV4PTI0NDtlLm9jaXJjdW1mbGV4YWN1dGU9Nzg4OTtlLm9jaXJjdW1mbGV4ZG90YmVsb3c9Nzg5NztlLm9jaXJjdW1mbGV4Z3JhdmU9Nzg5MTtlLm9jaXJjdW1mbGV4aG9va2Fib3ZlPTc4OTM7ZS5vY2lyY3VtZmxleHRpbGRlPTc4OTU7ZS5vY3lyaWxsaWM9MTA4NjtlLm9kYmxhY3V0ZT0zMzc7ZS5vZGJsZ3JhdmU9NTI1O2Uub2RldmE9MjMyMztlLm9kaWVyZXNpcz0yNDY7ZS5vZGllcmVzaXNjeXJpbGxpYz0xMjU1O2Uub2RvdGJlbG93PTc4ODU7ZS5vZT0zMzk7ZS5vZWtvcmVhbj0xMjYzNDtlLm9nb25laz03MzE7ZS5vZ29uZWtjbWI9ODA4O2Uub2dyYXZlPTI0MjtlLm9ndWphcmF0aT0yNzA3O2Uub2hhcm1lbmlhbj0xNDEzO2Uub2hpcmFnYW5hPTEyMzYyO2Uub2hvb2thYm92ZT03ODg3O2Uub2hvcm49NDE3O2Uub2hvcm5hY3V0ZT03ODk5O2Uub2hvcm5kb3RiZWxvdz03OTA3O2Uub2hvcm5ncmF2ZT03OTAxO2Uub2hvcm5ob29rYWJvdmU9NzkwMztlLm9ob3JudGlsZGU9NzkwNTtlLm9odW5nYXJ1bWxhdXQ9MzM3O2Uub2k9NDE5O2Uub2ludmVydGVkYnJldmU9NTI3O2Uub2thdGFrYW5hPTEyNDU4O2Uub2thdGFrYW5haGFsZndpZHRoPTY1Mzk3O2Uub2tvcmVhbj0xMjYzMTtlLm9sZWhlYnJldz0xNDUxO2Uub21hY3Jvbj0zMzM7ZS5vbWFjcm9uYWN1dGU9Nzc2MztlLm9tYWNyb25ncmF2ZT03NzYxO2Uub21kZXZhPTIzODQ7ZS5vbWVnYT05Njk7ZS5vbWVnYTE9OTgyO2Uub21lZ2FjeXJpbGxpYz0xMTIxO2Uub21lZ2FsYXRpbmNsb3NlZD02MzE7ZS5vbWVnYXJvdW5kY3lyaWxsaWM9MTE0NztlLm9tZWdhdGl0bG9jeXJpbGxpYz0xMTQ5O2Uub21lZ2F0b25vcz05NzQ7ZS5vbWd1amFyYXRpPTI3Njg7ZS5vbWljcm9uPTk1OTtlLm9taWNyb250b25vcz05NzI7ZS5vbW9ub3NwYWNlPTY1MzU5O2Uub25lPTQ5O2Uub25lYXJhYmljPTE2MzM7ZS5vbmViZW5nYWxpPTI1MzU7ZS5vbmVjaXJjbGU9OTMxMjtlLm9uZWNpcmNsZWludmVyc2VzYW5zc2VyaWY9MTAxMjI7ZS5vbmVkZXZhPTI0MDc7ZS5vbmVkb3RlbmxlYWRlcj04MjI4O2Uub25lZWlnaHRoPTg1Mzk7ZS5vbmVmaXR0ZWQ9NjMxOTY7ZS5vbmVndWphcmF0aT0yNzkxO2Uub25lZ3VybXVraGk9MjY2MztlLm9uZWhhY2thcmFiaWM9MTYzMztlLm9uZWhhbGY9MTg5O2Uub25laGFuZ3pob3U9MTIzMjE7ZS5vbmVpZGVvZ3JhcGhpY3BhcmVuPTEyODMyO2Uub25laW5mZXJpb3I9ODMyMTtlLm9uZW1vbm9zcGFjZT02NTI5NztlLm9uZW51bWVyYXRvcmJlbmdhbGk9MjU0ODtlLm9uZW9sZHN0eWxlPTYzMjgxO2Uub25lcGFyZW49OTMzMjtlLm9uZXBlcmlvZD05MzUyO2Uub25lcGVyc2lhbj0xNzc3O2Uub25lcXVhcnRlcj0xODg7ZS5vbmVyb21hbj04NTYwO2Uub25lc3VwZXJpb3I9MTg1O2Uub25ldGhhaT0zNjY1O2Uub25ldGhpcmQ9ODUzMTtlLm9vZ29uZWs9NDkxO2Uub29nb25la21hY3Jvbj00OTM7ZS5vb2d1cm11a2hpPTI1Nzk7ZS5vb21hdHJhZ3VybXVraGk9MjYzNTtlLm9vcGVuPTU5NjtlLm9wYXJlbj05Mzg2O2Uub3BlbmJ1bGxldD05NzAyO2Uub3B0aW9uPTg5OTc7ZS5vcmRmZW1pbmluZT0xNzA7ZS5vcmRtYXNjdWxpbmU9MTg2O2Uub3J0aG9nb25hbD04NzM1O2Uub3Nob3J0ZGV2YT0yMzIyO2Uub3Nob3J0dm93ZWxzaWduZGV2YT0yMzc4O2Uub3NsYXNoPTI0ODtlLm9zbGFzaGFjdXRlPTUxMTtlLm9zbWFsbGhpcmFnYW5hPTEyMzYxO2Uub3NtYWxsa2F0YWthbmE9MTI0NTc7ZS5vc21hbGxrYXRha2FuYWhhbGZ3aWR0aD02NTM4NztlLm9zdHJva2VhY3V0ZT01MTE7ZS5vc3VwZXJpb3I9NjMyMTY7ZS5vdGN5cmlsbGljPTExNTE7ZS5vdGlsZGU9MjQ1O2Uub3RpbGRlYWN1dGU9Nzc1NztlLm90aWxkZWRpZXJlc2lzPTc3NTk7ZS5vdWJvcG9tb2ZvPTEyNTc3O2Uub3ZlcmxpbmU9ODI1NDtlLm92ZXJsaW5lY2VudGVybGluZT02NTA5ODtlLm92ZXJsaW5lY21iPTc3MztlLm92ZXJsaW5lZGFzaGVkPTY1MDk3O2Uub3ZlcmxpbmVkYmx3YXZ5PTY1MTAwO2Uub3ZlcmxpbmV3YXZ5PTY1MDk5O2Uub3ZlcnNjb3JlPTE3NTtlLm92b3dlbHNpZ25iZW5nYWxpPTI1MDc7ZS5vdm93ZWxzaWduZGV2YT0yMzc5O2Uub3Zvd2Vsc2lnbmd1amFyYXRpPTI3NjM7ZS5wPTExMjtlLnBhYW1wc3NxdWFyZT0xMzE4NDtlLnBhYXNlbnRvc3F1YXJlPTEzMDk5O2UucGFiZW5nYWxpPTI0NzQ7ZS5wYWN1dGU9Nzc2NTtlLnBhZGV2YT0yMzQ2O2UucGFnZWRvd249ODY3MTtlLnBhZ2V1cD04NjcwO2UucGFndWphcmF0aT0yNzMwO2UucGFndXJtdWtoaT0yNjAyO2UucGFoaXJhZ2FuYT0xMjQwMTtlLnBhaXlhbm5vaXRoYWk9MzYzMTtlLnBha2F0YWthbmE9MTI0OTc7ZS5wYWxhdGFsaXphdGlvbmN5cmlsbGljY21iPTExNTY7ZS5wYWxvY2hrYWN5cmlsbGljPTEyMTY7ZS5wYW5zaW9za29yZWFuPTEyNjcxO2UucGFyYWdyYXBoPTE4MjtlLnBhcmFsbGVsPTg3NDE7ZS5wYXJlbmxlZnQ9NDA7ZS5wYXJlbmxlZnRhbHRvbmVhcmFiaWM9NjQ4MzA7ZS5wYXJlbmxlZnRidD02MzcyNTtlLnBhcmVubGVmdGV4PTYzNzI0O2UucGFyZW5sZWZ0aW5mZXJpb3I9ODMzMztlLnBhcmVubGVmdG1vbm9zcGFjZT02NTI4ODtlLnBhcmVubGVmdHNtYWxsPTY1MTEzO2UucGFyZW5sZWZ0c3VwZXJpb3I9ODMxNztlLnBhcmVubGVmdHRwPTYzNzIzO2UucGFyZW5sZWZ0dmVydGljYWw9NjUwNzc7ZS5wYXJlbnJpZ2h0PTQxO2UucGFyZW5yaWdodGFsdG9uZWFyYWJpYz02NDgzMTtlLnBhcmVucmlnaHRidD02MzczNjtlLnBhcmVucmlnaHRleD02MzczNTtlLnBhcmVucmlnaHRpbmZlcmlvcj04MzM0O2UucGFyZW5yaWdodG1vbm9zcGFjZT02NTI4OTtlLnBhcmVucmlnaHRzbWFsbD02NTExNDtlLnBhcmVucmlnaHRzdXBlcmlvcj04MzE4O2UucGFyZW5yaWdodHRwPTYzNzM0O2UucGFyZW5yaWdodHZlcnRpY2FsPTY1MDc4O2UucGFydGlhbGRpZmY9ODcwNjtlLnBhc2VxaGVicmV3PTE0NzI7ZS5wYXNodGFoZWJyZXc9MTQzMztlLnBhc3F1YXJlPTEzMjI1O2UucGF0YWg9MTQ2MztlLnBhdGFoMTE9MTQ2MztlLnBhdGFoMWQ9MTQ2MztlLnBhdGFoMmE9MTQ2MztlLnBhdGFoaGVicmV3PTE0NjM7ZS5wYXRhaG5hcnJvd2hlYnJldz0xNDYzO2UucGF0YWhxdWFydGVyaGVicmV3PTE0NjM7ZS5wYXRhaHdpZGVoZWJyZXc9MTQ2MztlLnBhemVyaGVicmV3PTE0NDE7ZS5wYm9wb21vZm89MTI1NTA7ZS5wY2lyY2xlPTk0Mzk7ZS5wZG90YWNjZW50PTc3Njc7ZS5wZT0xNTA4O2UucGVjeXJpbGxpYz0xMDg3O2UucGVkYWdlc2g9NjQzMjQ7ZS5wZWRhZ2VzaGhlYnJldz02NDMyNDtlLnBlZXppc3F1YXJlPTEzMTE1O2UucGVmaW5hbGRhZ2VzaGhlYnJldz02NDMyMztlLnBlaGFyYWJpYz0xNjYyO2UucGVoYXJtZW5pYW49MTQwMjtlLnBlaGVicmV3PTE1MDg7ZS5wZWhmaW5hbGFyYWJpYz02NDM0MztlLnBlaGluaXRpYWxhcmFiaWM9NjQzNDQ7ZS5wZWhpcmFnYW5hPTEyNDEwO2UucGVobWVkaWFsYXJhYmljPTY0MzQ1O2UucGVrYXRha2FuYT0xMjUwNjtlLnBlbWlkZGxlaG9va2N5cmlsbGljPTExOTE7ZS5wZXJhZmVoZWJyZXc9NjQzMzQ7ZS5wZXJjZW50PTM3O2UucGVyY2VudGFyYWJpYz0xNjQyO2UucGVyY2VudG1vbm9zcGFjZT02NTI4NTtlLnBlcmNlbnRzbWFsbD02NTEzMDtlLnBlcmlvZD00NjtlLnBlcmlvZGFybWVuaWFuPTE0MTc7ZS5wZXJpb2RjZW50ZXJlZD0xODM7ZS5wZXJpb2RoYWxmd2lkdGg9NjUzNzc7ZS5wZXJpb2RpbmZlcmlvcj02MzIwNztlLnBlcmlvZG1vbm9zcGFjZT02NTI5NDtlLnBlcmlvZHNtYWxsPTY1MTA2O2UucGVyaW9kc3VwZXJpb3I9NjMyMDg7ZS5wZXJpc3BvbWVuaWdyZWVrY21iPTgzNDtlLnBlcnBlbmRpY3VsYXI9ODg2OTtlLnBlcnRob3VzYW5kPTgyNDA7ZS5wZXNldGE9ODM1OTtlLnBmc3F1YXJlPTEzMTk0O2UucGhhYmVuZ2FsaT0yNDc1O2UucGhhZGV2YT0yMzQ3O2UucGhhZ3VqYXJhdGk9MjczMTtlLnBoYWd1cm11a2hpPTI2MDM7ZS5waGk9OTY2O2UucGhpMT05ODE7ZS5waGlldXBoYWNpcmNsZWtvcmVhbj0xMjkyMjtlLnBoaWV1cGhhcGFyZW5rb3JlYW49MTI4MjY7ZS5waGlldXBoY2lyY2xla29yZWFuPTEyOTA4O2UucGhpZXVwaGtvcmVhbj0xMjYyMTtlLnBoaWV1cGhwYXJlbmtvcmVhbj0xMjgxMjtlLnBoaWxhdGluPTYzMjtlLnBoaW50aHV0aGFpPTM2NDI7ZS5waGlzeW1ib2xncmVlaz05ODE7ZS5waG9vaz00MjE7ZS5waG9waGFudGhhaT0zNjE0O2UucGhvcGh1bmd0aGFpPTM2MTI7ZS5waG9zYW1waGFvdGhhaT0zNjE2O2UucGk9OTYwO2UucGlldXBhY2lyY2xla29yZWFuPTEyOTE1O2UucGlldXBhcGFyZW5rb3JlYW49MTI4MTk7ZS5waWV1cGNpZXVja29yZWFuPTEyNjYyO2UucGlldXBjaXJjbGVrb3JlYW49MTI5MDE7ZS5waWV1cGtpeWVva2tvcmVhbj0xMjY1ODtlLnBpZXVwa29yZWFuPTEyNjEwO2UucGlldXBwYXJlbmtvcmVhbj0xMjgwNTtlLnBpZXVwc2lvc2tpeWVva2tvcmVhbj0xMjY2MDtlLnBpZXVwc2lvc2tvcmVhbj0xMjYxMjtlLnBpZXVwc2lvc3Rpa2V1dGtvcmVhbj0xMjY2MTtlLnBpZXVwdGhpZXV0aGtvcmVhbj0xMjY2MztlLnBpZXVwdGlrZXV0a29yZWFuPTEyNjU5O2UucGloaXJhZ2FuYT0xMjQwNDtlLnBpa2F0YWthbmE9MTI1MDA7ZS5waXN5bWJvbGdyZWVrPTk4MjtlLnBpd3Jhcm1lbmlhbj0xNDExO2UucGxhbmNrb3ZlcjJwaT04NDYzO2UucGxhbmNrb3ZlcjJwaTE9ODQ2MztlLnBsdXM9NDM7ZS5wbHVzYmVsb3djbWI9Nzk5O2UucGx1c2NpcmNsZT04ODUzO2UucGx1c21pbnVzPTE3NztlLnBsdXNtb2Q9NzI2O2UucGx1c21vbm9zcGFjZT02NTI5MTtlLnBsdXNzbWFsbD02NTEyMjtlLnBsdXNzdXBlcmlvcj04MzE0O2UucG1vbm9zcGFjZT02NTM2MDtlLnBtc3F1YXJlPTEzMjcyO2UucG9oaXJhZ2FuYT0xMjQxMztlLnBvaW50aW5naW5kZXhkb3dud2hpdGU9OTc1OTtlLnBvaW50aW5naW5kZXhsZWZ0d2hpdGU9OTc1NjtlLnBvaW50aW5naW5kZXhyaWdodHdoaXRlPTk3NTg7ZS5wb2ludGluZ2luZGV4dXB3aGl0ZT05NzU3O2UucG9rYXRha2FuYT0xMjUwOTtlLnBvcGxhdGhhaT0zNjExO2UucG9zdGFsbWFyaz0xMjMwNjtlLnBvc3RhbG1hcmtmYWNlPTEyMzIwO2UucHBhcmVuPTkzODc7ZS5wcmVjZWRlcz04ODI2O2UucHJlc2NyaXB0aW9uPTg0Nzg7ZS5wcmltZW1vZD02OTc7ZS5wcmltZXJldmVyc2VkPTgyNDU7ZS5wcm9kdWN0PTg3MTk7ZS5wcm9qZWN0aXZlPTg5NjU7ZS5wcm9sb25nZWRrYW5hPTEyNTQwO2UucHJvcGVsbG9yPTg5ODQ7ZS5wcm9wZXJzdWJzZXQ9ODgzNDtlLnByb3BlcnN1cGVyc2V0PTg4MzU7ZS5wcm9wb3J0aW9uPTg3NTk7ZS5wcm9wb3J0aW9uYWw9ODczMztlLnBzaT05Njg7ZS5wc2ljeXJpbGxpYz0xMTM3O2UucHNpbGlwbmV1bWF0YWN5cmlsbGljY21iPTExNTg7ZS5wc3NxdWFyZT0xMzIzMjtlLnB1aGlyYWdhbmE9MTI0MDc7ZS5wdWthdGFrYW5hPTEyNTAzO2UucHZzcXVhcmU9MTMyMzY7ZS5wd3NxdWFyZT0xMzI0MjtlLnE9MTEzO2UucWFkZXZhPTIzOTI7ZS5xYWRtYWhlYnJldz0xNDQ4O2UucWFmYXJhYmljPTE2MDI7ZS5xYWZmaW5hbGFyYWJpYz02NTIzODtlLnFhZmluaXRpYWxhcmFiaWM9NjUyMzk7ZS5xYWZtZWRpYWxhcmFiaWM9NjUyNDA7ZS5xYW1hdHM9MTQ2NDtlLnFhbWF0czEwPTE0NjQ7ZS5xYW1hdHMxYT0xNDY0O2UucWFtYXRzMWM9MTQ2NDtlLnFhbWF0czI3PTE0NjQ7ZS5xYW1hdHMyOT0xNDY0O2UucWFtYXRzMzM9MTQ2NDtlLnFhbWF0c2RlPTE0NjQ7ZS5xYW1hdHNoZWJyZXc9MTQ2NDtlLnFhbWF0c25hcnJvd2hlYnJldz0xNDY0O2UucWFtYXRzcWF0YW5oZWJyZXc9MTQ2NDtlLnFhbWF0c3FhdGFubmFycm93aGVicmV3PTE0NjQ7ZS5xYW1hdHNxYXRhbnF1YXJ0ZXJoZWJyZXc9MTQ2NDtlLnFhbWF0c3FhdGFud2lkZWhlYnJldz0xNDY0O2UucWFtYXRzcXVhcnRlcmhlYnJldz0xNDY0O2UucWFtYXRzd2lkZWhlYnJldz0xNDY0O2UucWFybmV5cGFyYWhlYnJldz0xNDM5O2UucWJvcG9tb2ZvPTEyNTYxO2UucWNpcmNsZT05NDQwO2UucWhvb2s9NjcyO2UucW1vbm9zcGFjZT02NTM2MTtlLnFvZj0xNTExO2UucW9mZGFnZXNoPTY0MzI3O2UucW9mZGFnZXNoaGVicmV3PTY0MzI3O2UucW9maGVicmV3PTE1MTE7ZS5xcGFyZW49OTM4ODtlLnF1YXJ0ZXJub3RlPTk4MzM7ZS5xdWJ1dHM9MTQ2NztlLnF1YnV0czE4PTE0Njc7ZS5xdWJ1dHMyNT0xNDY3O2UucXVidXRzMzE9MTQ2NztlLnF1YnV0c2hlYnJldz0xNDY3O2UucXVidXRzbmFycm93aGVicmV3PTE0Njc7ZS5xdWJ1dHNxdWFydGVyaGVicmV3PTE0Njc7ZS5xdWJ1dHN3aWRlaGVicmV3PTE0Njc7ZS5xdWVzdGlvbj02MztlLnF1ZXN0aW9uYXJhYmljPTE1Njc7ZS5xdWVzdGlvbmFybWVuaWFuPTEzNzQ7ZS5xdWVzdGlvbmRvd249MTkxO2UucXVlc3Rpb25kb3duc21hbGw9NjM0MjM7ZS5xdWVzdGlvbmdyZWVrPTg5NDtlLnF1ZXN0aW9ubW9ub3NwYWNlPTY1MzExO2UucXVlc3Rpb25zbWFsbD02MzI5NTtlLnF1b3RlZGJsPTM0O2UucXVvdGVkYmxiYXNlPTgyMjI7ZS5xdW90ZWRibGxlZnQ9ODIyMDtlLnF1b3RlZGJsbW9ub3NwYWNlPTY1MjgyO2UucXVvdGVkYmxwcmltZT0xMjMxODtlLnF1b3RlZGJscHJpbWVyZXZlcnNlZD0xMjMxNztlLnF1b3RlZGJscmlnaHQ9ODIyMTtlLnF1b3RlbGVmdD04MjE2O2UucXVvdGVsZWZ0cmV2ZXJzZWQ9ODIxOTtlLnF1b3RlcmV2ZXJzZWQ9ODIxOTtlLnF1b3RlcmlnaHQ9ODIxNztlLnF1b3RlcmlnaHRuPTMyOTtlLnF1b3Rlc2luZ2xiYXNlPTgyMTg7ZS5xdW90ZXNpbmdsZT0zOTtlLnF1b3Rlc2luZ2xlbW9ub3NwYWNlPTY1Mjg3O2Uucj0xMTQ7ZS5yYWFybWVuaWFuPTE0MDQ7ZS5yYWJlbmdhbGk9MjQ4MDtlLnJhY3V0ZT0zNDE7ZS5yYWRldmE9MjM1MjtlLnJhZGljYWw9ODczMDtlLnJhZGljYWxleD02MzcxNztlLnJhZG92ZXJzc3F1YXJlPTEzMjMwO2UucmFkb3ZlcnNzcXVhcmVkc3F1YXJlPTEzMjMxO2UucmFkc3F1YXJlPTEzMjI5O2UucmFmZT0xNDcxO2UucmFmZWhlYnJldz0xNDcxO2UucmFndWphcmF0aT0yNzM2O2UucmFndXJtdWtoaT0yNjA4O2UucmFoaXJhZ2FuYT0xMjQyNTtlLnJha2F0YWthbmE9MTI1MjE7ZS5yYWthdGFrYW5haGFsZndpZHRoPTY1NDMxO2UucmFsb3dlcmRpYWdvbmFsYmVuZ2FsaT0yNTQ1O2UucmFtaWRkbGVkaWFnb25hbGJlbmdhbGk9MjU0NDtlLnJhbXNob3JuPTYxMjtlLnJhdGlvPTg3NTg7ZS5yYm9wb21vZm89MTI1NjY7ZS5yY2Fyb249MzQ1O2UucmNlZGlsbGE9MzQzO2UucmNpcmNsZT05NDQxO2UucmNvbW1hYWNjZW50PTM0MztlLnJkYmxncmF2ZT01Mjk7ZS5yZG90YWNjZW50PTc3Njk7ZS5yZG90YmVsb3c9Nzc3MTtlLnJkb3RiZWxvd21hY3Jvbj03NzczO2UucmVmZXJlbmNlbWFyaz04MjUxO2UucmVmbGV4c3Vic2V0PTg4Mzg7ZS5yZWZsZXhzdXBlcnNldD04ODM5O2UucmVnaXN0ZXJlZD0xNzQ7ZS5yZWdpc3RlcnNhbnM9NjM3MjA7ZS5yZWdpc3RlcnNlcmlmPTYzMTk0O2UucmVoYXJhYmljPTE1ODU7ZS5yZWhhcm1lbmlhbj0xNDA4O2UucmVoZmluYWxhcmFiaWM9NjUxOTg7ZS5yZWhpcmFnYW5hPTEyNDI4O2UucmVrYXRha2FuYT0xMjUyNDtlLnJla2F0YWthbmFoYWxmd2lkdGg9NjU0MzQ7ZS5yZXNoPTE1MTI7ZS5yZXNoZGFnZXNoaGVicmV3PTY0MzI4O2UucmVzaGhlYnJldz0xNTEyO2UucmV2ZXJzZWR0aWxkZT04NzY1O2UucmV2aWFoZWJyZXc9MTQzMTtlLnJldmlhbXVncmFzaGhlYnJldz0xNDMxO2UucmV2bG9naWNhbG5vdD04OTc2O2UucmZpc2hob29rPTYzODtlLnJmaXNoaG9va3JldmVyc2VkPTYzOTtlLnJoYWJlbmdhbGk9MjUyNTtlLnJoYWRldmE9MjM5NztlLnJobz05NjE7ZS5yaG9vaz02Mzc7ZS5yaG9va3R1cm5lZD02MzU7ZS5yaG9va3R1cm5lZHN1cGVyaW9yPTY5MztlLnJob3N5bWJvbGdyZWVrPTEwMDk7ZS5yaG90aWNob29rbW9kPTczNDtlLnJpZXVsYWNpcmNsZWtvcmVhbj0xMjkxMztlLnJpZXVsYXBhcmVua29yZWFuPTEyODE3O2UucmlldWxjaXJjbGVrb3JlYW49MTI4OTk7ZS5yaWV1bGhpZXVoa29yZWFuPTEyNjA4O2UucmlldWxraXllb2trb3JlYW49MTI2MDI7ZS5yaWV1bGtpeWVva3Npb3Nrb3JlYW49MTI2NDk7ZS5yaWV1bGtvcmVhbj0xMjYwMTtlLnJpZXVsbWlldW1rb3JlYW49MTI2MDM7ZS5yaWV1bHBhbnNpb3Nrb3JlYW49MTI2NTI7ZS5yaWV1bHBhcmVua29yZWFuPTEyODAzO2UucmlldWxwaGlldXBoa29yZWFuPTEyNjA3O2UucmlldWxwaWV1cGtvcmVhbj0xMjYwNDtlLnJpZXVscGlldXBzaW9za29yZWFuPTEyNjUxO2UucmlldWxzaW9za29yZWFuPTEyNjA1O2UucmlldWx0aGlldXRoa29yZWFuPTEyNjA2O2UucmlldWx0aWtldXRrb3JlYW49MTI2NTA7ZS5yaWV1bHllb3JpbmhpZXVoa29yZWFuPTEyNjUzO2UucmlnaHRhbmdsZT04NzM1O2UucmlnaHR0YWNrYmVsb3djbWI9NzkzO2UucmlnaHR0cmlhbmdsZT04ODk1O2UucmloaXJhZ2FuYT0xMjQyNjtlLnJpa2F0YWthbmE9MTI1MjI7ZS5yaWthdGFrYW5haGFsZndpZHRoPTY1NDMyO2UucmluZz03MzA7ZS5yaW5nYmVsb3djbWI9ODA1O2UucmluZ2NtYj03Nzg7ZS5yaW5naGFsZmxlZnQ9NzAzO2UucmluZ2hhbGZsZWZ0YXJtZW5pYW49MTM2OTtlLnJpbmdoYWxmbGVmdGJlbG93Y21iPTc5NjtlLnJpbmdoYWxmbGVmdGNlbnRlcmVkPTcyMztlLnJpbmdoYWxmcmlnaHQ9NzAyO2UucmluZ2hhbGZyaWdodGJlbG93Y21iPTgyNTtlLnJpbmdoYWxmcmlnaHRjZW50ZXJlZD03MjI7ZS5yaW52ZXJ0ZWRicmV2ZT01MzE7ZS5yaXR0b3J1c3F1YXJlPTEzMTM3O2UucmxpbmViZWxvdz03Nzc1O2UucmxvbmdsZWc9NjM2O2UucmxvbmdsZWd0dXJuZWQ9NjM0O2Uucm1vbm9zcGFjZT02NTM2MjtlLnJvaGlyYWdhbmE9MTI0Mjk7ZS5yb2thdGFrYW5hPTEyNTI1O2Uucm9rYXRha2FuYWhhbGZ3aWR0aD02NTQzNTtlLnJvcnVhdGhhaT0zNjE5O2UucnBhcmVuPTkzODk7ZS5ycmFiZW5nYWxpPTI1MjQ7ZS5ycmFkZXZhPTIzNTM7ZS5ycmFndXJtdWtoaT0yNjUyO2UucnJlaGFyYWJpYz0xNjgxO2UucnJlaGZpbmFsYXJhYmljPTY0Mzk3O2UucnJ2b2NhbGljYmVuZ2FsaT0yNTI4O2UucnJ2b2NhbGljZGV2YT0yNDAwO2UucnJ2b2NhbGljZ3VqYXJhdGk9Mjc4NDtlLnJydm9jYWxpY3Zvd2Vsc2lnbmJlbmdhbGk9MjUwMDtlLnJydm9jYWxpY3Zvd2Vsc2lnbmRldmE9MjM3MjtlLnJydm9jYWxpY3Zvd2Vsc2lnbmd1amFyYXRpPTI3NTY7ZS5yc3VwZXJpb3I9NjMyMTc7ZS5ydGJsb2NrPTk2MTY7ZS5ydHVybmVkPTYzMztlLnJ0dXJuZWRzdXBlcmlvcj02OTI7ZS5ydWhpcmFnYW5hPTEyNDI3O2UucnVrYXRha2FuYT0xMjUyMztlLnJ1a2F0YWthbmFoYWxmd2lkdGg9NjU0MzM7ZS5ydXBlZW1hcmtiZW5nYWxpPTI1NDY7ZS5ydXBlZXNpZ25iZW5nYWxpPTI1NDc7ZS5ydXBpYWg9NjMxOTc7ZS5ydXRoYWk9MzYyMDtlLnJ2b2NhbGljYmVuZ2FsaT0yNDQzO2UucnZvY2FsaWNkZXZhPTIzMTU7ZS5ydm9jYWxpY2d1amFyYXRpPTI2OTk7ZS5ydm9jYWxpY3Zvd2Vsc2lnbmJlbmdhbGk9MjQ5OTtlLnJ2b2NhbGljdm93ZWxzaWduZGV2YT0yMzcxO2UucnZvY2FsaWN2b3dlbHNpZ25ndWphcmF0aT0yNzU1O2Uucz0xMTU7ZS5zYWJlbmdhbGk9MjQ4ODtlLnNhY3V0ZT0zNDc7ZS5zYWN1dGVkb3RhY2NlbnQ9Nzc4MTtlLnNhZGFyYWJpYz0xNTg5O2Uuc2FkZXZhPTIzNjA7ZS5zYWRmaW5hbGFyYWJpYz02NTIxMDtlLnNhZGluaXRpYWxhcmFiaWM9NjUyMTE7ZS5zYWRtZWRpYWxhcmFiaWM9NjUyMTI7ZS5zYWd1amFyYXRpPTI3NDQ7ZS5zYWd1cm11a2hpPTI2MTY7ZS5zYWhpcmFnYW5hPTEyMzczO2Uuc2FrYXRha2FuYT0xMjQ2OTtlLnNha2F0YWthbmFoYWxmd2lkdGg9NjU0MDM7ZS5zYWxsYWxsYWhvdWFsYXloZXdhc2FsbGFtYXJhYmljPTY1MDE4O2Uuc2FtZWtoPTE1MDU7ZS5zYW1la2hkYWdlc2g9NjQzMjE7ZS5zYW1la2hkYWdlc2hoZWJyZXc9NjQzMjE7ZS5zYW1la2hoZWJyZXc9MTUwNTtlLnNhcmFhYXRoYWk9MzYzNDtlLnNhcmFhZXRoYWk9MzY0OTtlLnNhcmFhaW1haW1hbGFpdGhhaT0zNjUyO2Uuc2FyYWFpbWFpbXVhbnRoYWk9MzY1MTtlLnNhcmFhbXRoYWk9MzYzNTtlLnNhcmFhdGhhaT0zNjMyO2Uuc2FyYWV0aGFpPTM2NDg7ZS5zYXJhaWlsZWZ0dGhhaT02MzYyMjtlLnNhcmFpaXRoYWk9MzYzNztlLnNhcmFpbGVmdHRoYWk9NjM2MjE7ZS5zYXJhaXRoYWk9MzYzNjtlLnNhcmFvdGhhaT0zNjUwO2Uuc2FyYXVlZWxlZnR0aGFpPTYzNjI0O2Uuc2FyYXVlZXRoYWk9MzYzOTtlLnNhcmF1ZWxlZnR0aGFpPTYzNjIzO2Uuc2FyYXVldGhhaT0zNjM4O2Uuc2FyYXV0aGFpPTM2NDA7ZS5zYXJhdXV0aGFpPTM2NDE7ZS5zYm9wb21vZm89MTI1Njk7ZS5zY2Fyb249MzUzO2Uuc2Nhcm9uZG90YWNjZW50PTc3ODM7ZS5zY2VkaWxsYT0zNTE7ZS5zY2h3YT02MDE7ZS5zY2h3YWN5cmlsbGljPTEyNDE7ZS5zY2h3YWRpZXJlc2lzY3lyaWxsaWM9MTI0MztlLnNjaHdhaG9vaz02MDI7ZS5zY2lyY2xlPTk0NDI7ZS5zY2lyY3VtZmxleD0zNDk7ZS5zY29tbWFhY2NlbnQ9NTM3O2Uuc2RvdGFjY2VudD03Nzc3O2Uuc2RvdGJlbG93PTc3Nzk7ZS5zZG90YmVsb3dkb3RhY2NlbnQ9Nzc4NTtlLnNlYWd1bGxiZWxvd2NtYj04Mjg7ZS5zZWNvbmQ9ODI0MztlLnNlY29uZHRvbmVjaGluZXNlPTcxNDtlLnNlY3Rpb249MTY3O2Uuc2VlbmFyYWJpYz0xNTg3O2Uuc2VlbmZpbmFsYXJhYmljPTY1MjAyO2Uuc2VlbmluaXRpYWxhcmFiaWM9NjUyMDM7ZS5zZWVubWVkaWFsYXJhYmljPTY1MjA0O2Uuc2Vnb2w9MTQ2MjtlLnNlZ29sMTM9MTQ2MjtlLnNlZ29sMWY9MTQ2MjtlLnNlZ29sMmM9MTQ2MjtlLnNlZ29saGVicmV3PTE0NjI7ZS5zZWdvbG5hcnJvd2hlYnJldz0xNDYyO2Uuc2Vnb2xxdWFydGVyaGVicmV3PTE0NjI7ZS5zZWdvbHRhaGVicmV3PTE0MjY7ZS5zZWdvbHdpZGVoZWJyZXc9MTQ2MjtlLnNlaGFybWVuaWFuPTE0MDU7ZS5zZWhpcmFnYW5hPTEyMzc5O2Uuc2VrYXRha2FuYT0xMjQ3NTtlLnNla2F0YWthbmFoYWxmd2lkdGg9NjU0MDY7ZS5zZW1pY29sb249NTk7ZS5zZW1pY29sb25hcmFiaWM9MTU2MztlLnNlbWljb2xvbm1vbm9zcGFjZT02NTMwNztlLnNlbWljb2xvbnNtYWxsPTY1MTA4O2Uuc2VtaXZvaWNlZG1hcmtrYW5hPTEyNDQ0O2Uuc2VtaXZvaWNlZG1hcmtrYW5haGFsZndpZHRoPTY1NDM5O2Uuc2VudGlzcXVhcmU9MTMwOTA7ZS5zZW50b3NxdWFyZT0xMzA5MTtlLnNldmVuPTU1O2Uuc2V2ZW5hcmFiaWM9MTYzOTtlLnNldmVuYmVuZ2FsaT0yNTQxO2Uuc2V2ZW5jaXJjbGU9OTMxODtlLnNldmVuY2lyY2xlaW52ZXJzZXNhbnNzZXJpZj0xMDEyODtlLnNldmVuZGV2YT0yNDEzO2Uuc2V2ZW5laWdodGhzPTg1NDI7ZS5zZXZlbmd1amFyYXRpPTI3OTc7ZS5zZXZlbmd1cm11a2hpPTI2Njk7ZS5zZXZlbmhhY2thcmFiaWM9MTYzOTtlLnNldmVuaGFuZ3pob3U9MTIzMjc7ZS5zZXZlbmlkZW9ncmFwaGljcGFyZW49MTI4Mzg7ZS5zZXZlbmluZmVyaW9yPTgzMjc7ZS5zZXZlbm1vbm9zcGFjZT02NTMwMztlLnNldmVub2xkc3R5bGU9NjMyODc7ZS5zZXZlbnBhcmVuPTkzMzg7ZS5zZXZlbnBlcmlvZD05MzU4O2Uuc2V2ZW5wZXJzaWFuPTE3ODM7ZS5zZXZlbnJvbWFuPTg1NjY7ZS5zZXZlbnN1cGVyaW9yPTgzMTE7ZS5zZXZlbnRlZW5jaXJjbGU9OTMyODtlLnNldmVudGVlbnBhcmVuPTkzNDg7ZS5zZXZlbnRlZW5wZXJpb2Q9OTM2ODtlLnNldmVudGhhaT0zNjcxO2Uuc2Z0aHlwaGVuPTE3MztlLnNoYWFybWVuaWFuPTEzOTk7ZS5zaGFiZW5nYWxpPTI0ODY7ZS5zaGFjeXJpbGxpYz0xMDk2O2Uuc2hhZGRhYXJhYmljPTE2MTc7ZS5zaGFkZGFkYW1tYWFyYWJpYz02NDYwOTtlLnNoYWRkYWRhbW1hdGFuYXJhYmljPTY0NjA2O2Uuc2hhZGRhZmF0aGFhcmFiaWM9NjQ2MDg7ZS5zaGFkZGFrYXNyYWFyYWJpYz02NDYxMDtlLnNoYWRkYWthc3JhdGFuYXJhYmljPTY0NjA3O2Uuc2hhZGU9OTYxODtlLnNoYWRlZGFyaz05NjE5O2Uuc2hhZGVsaWdodD05NjE3O2Uuc2hhZGVtZWRpdW09OTYxODtlLnNoYWRldmE9MjM1ODtlLnNoYWd1amFyYXRpPTI3NDI7ZS5zaGFndXJtdWtoaT0yNjE0O2Uuc2hhbHNoZWxldGhlYnJldz0xNDI3O2Uuc2hib3BvbW9mbz0xMjU2NTtlLnNoY2hhY3lyaWxsaWM9MTA5NztlLnNoZWVuYXJhYmljPTE1ODg7ZS5zaGVlbmZpbmFsYXJhYmljPTY1MjA2O2Uuc2hlZW5pbml0aWFsYXJhYmljPTY1MjA3O2Uuc2hlZW5tZWRpYWxhcmFiaWM9NjUyMDg7ZS5zaGVpY29wdGljPTk5NTtlLnNoZXFlbD04MzYyO2Uuc2hlcWVsaGVicmV3PTgzNjI7ZS5zaGV2YT0xNDU2O2Uuc2hldmExMTU9MTQ1NjtlLnNoZXZhMTU9MTQ1NjtlLnNoZXZhMjI9MTQ1NjtlLnNoZXZhMmU9MTQ1NjtlLnNoZXZhaGVicmV3PTE0NTY7ZS5zaGV2YW5hcnJvd2hlYnJldz0xNDU2O2Uuc2hldmFxdWFydGVyaGVicmV3PTE0NTY7ZS5zaGV2YXdpZGVoZWJyZXc9MTQ1NjtlLnNoaGFjeXJpbGxpYz0xMjExO2Uuc2hpbWFjb3B0aWM9MTAwNTtlLnNoaW49MTUxMztlLnNoaW5kYWdlc2g9NjQzMjk7ZS5zaGluZGFnZXNoaGVicmV3PTY0MzI5O2Uuc2hpbmRhZ2VzaHNoaW5kb3Q9NjQzMDA7ZS5zaGluZGFnZXNoc2hpbmRvdGhlYnJldz02NDMwMDtlLnNoaW5kYWdlc2hzaW5kb3Q9NjQzMDE7ZS5zaGluZGFnZXNoc2luZG90aGVicmV3PTY0MzAxO2Uuc2hpbmRvdGhlYnJldz0xNDczO2Uuc2hpbmhlYnJldz0xNTEzO2Uuc2hpbnNoaW5kb3Q9NjQyOTg7ZS5zaGluc2hpbmRvdGhlYnJldz02NDI5ODtlLnNoaW5zaW5kb3Q9NjQyOTk7ZS5zaGluc2luZG90aGVicmV3PTY0Mjk5O2Uuc2hvb2s9NjQyO2Uuc2lnbWE9OTYzO2Uuc2lnbWExPTk2MjtlLnNpZ21hZmluYWw9OTYyO2Uuc2lnbWFsdW5hdGVzeW1ib2xncmVlaz0xMDEwO2Uuc2loaXJhZ2FuYT0xMjM3NTtlLnNpa2F0YWthbmE9MTI0NzE7ZS5zaWthdGFrYW5haGFsZndpZHRoPTY1NDA0O2Uuc2lsdXFoZWJyZXc9MTQ2OTtlLnNpbHVxbGVmdGhlYnJldz0xNDY5O2Uuc2ltaWxhcj04NzY0O2Uuc2luZG90aGVicmV3PTE0NzQ7ZS5zaW9zYWNpcmNsZWtvcmVhbj0xMjkxNjtlLnNpb3NhcGFyZW5rb3JlYW49MTI4MjA7ZS5zaW9zY2lldWNrb3JlYW49MTI2NzA7ZS5zaW9zY2lyY2xla29yZWFuPTEyOTAyO2Uuc2lvc2tpeWVva2tvcmVhbj0xMjY2NjtlLnNpb3Nrb3JlYW49MTI2MTM7ZS5zaW9zbmlldW5rb3JlYW49MTI2Njc7ZS5zaW9zcGFyZW5rb3JlYW49MTI4MDY7ZS5zaW9zcGlldXBrb3JlYW49MTI2Njk7ZS5zaW9zdGlrZXV0a29yZWFuPTEyNjY4O2Uuc2l4PTU0O2Uuc2l4YXJhYmljPTE2Mzg7ZS5zaXhiZW5nYWxpPTI1NDA7ZS5zaXhjaXJjbGU9OTMxNztlLnNpeGNpcmNsZWludmVyc2VzYW5zc2VyaWY9MTAxMjc7ZS5zaXhkZXZhPTI0MTI7ZS5zaXhndWphcmF0aT0yNzk2O2Uuc2l4Z3VybXVraGk9MjY2ODtlLnNpeGhhY2thcmFiaWM9MTYzODtlLnNpeGhhbmd6aG91PTEyMzI2O2Uuc2l4aWRlb2dyYXBoaWNwYXJlbj0xMjgzNztlLnNpeGluZmVyaW9yPTgzMjY7ZS5zaXhtb25vc3BhY2U9NjUzMDI7ZS5zaXhvbGRzdHlsZT02MzI4NjtlLnNpeHBhcmVuPTkzMzc7ZS5zaXhwZXJpb2Q9OTM1NztlLnNpeHBlcnNpYW49MTc4MjtlLnNpeHJvbWFuPTg1NjU7ZS5zaXhzdXBlcmlvcj04MzEwO2Uuc2l4dGVlbmNpcmNsZT05MzI3O2Uuc2l4dGVlbmN1cnJlbmN5ZGVub21pbmF0b3JiZW5nYWxpPTI1NTM7ZS5zaXh0ZWVucGFyZW49OTM0NztlLnNpeHRlZW5wZXJpb2Q9OTM2NztlLnNpeHRoYWk9MzY3MDtlLnNsYXNoPTQ3O2Uuc2xhc2htb25vc3BhY2U9NjUyOTU7ZS5zbG9uZz0zODM7ZS5zbG9uZ2RvdGFjY2VudD03ODM1O2Uuc21pbGVmYWNlPTk3ODY7ZS5zbW9ub3NwYWNlPTY1MzYzO2Uuc29mcGFzdXFoZWJyZXc9MTQ3NTtlLnNvZnRoeXBoZW49MTczO2Uuc29mdHNpZ25jeXJpbGxpYz0xMTAwO2Uuc29oaXJhZ2FuYT0xMjM4MTtlLnNva2F0YWthbmE9MTI0Nzc7ZS5zb2thdGFrYW5haGFsZndpZHRoPTY1NDA3O2Uuc29saWR1c2xvbmdvdmVybGF5Y21iPTgyNDtlLnNvbGlkdXNzaG9ydG92ZXJsYXljbWI9ODIzO2Uuc29ydXNpdGhhaT0zNjI1O2Uuc29zYWxhdGhhaT0zNjI0O2Uuc29zb3RoYWk9MzU5NTtlLnNvc3VhdGhhaT0zNjI2O2Uuc3BhY2U9MzI7ZS5zcGFjZWhhY2thcmFiaWM9MzI7ZS5zcGFkZT05ODI0O2Uuc3BhZGVzdWl0YmxhY2s9OTgyNDtlLnNwYWRlc3VpdHdoaXRlPTk4Mjg7ZS5zcGFyZW49OTM5MDtlLnNxdWFyZWJlbG93Y21iPTgyNztlLnNxdWFyZWNjPTEzMjUyO2Uuc3F1YXJlY209MTMyMTM7ZS5zcXVhcmVkaWFnb25hbGNyb3NzaGF0Y2hmaWxsPTk2NDE7ZS5zcXVhcmVob3Jpem9udGFsZmlsbD05NjM2O2Uuc3F1YXJla2c9MTMxOTk7ZS5zcXVhcmVrbT0xMzIxNDtlLnNxdWFyZWttY2FwaXRhbD0xMzI2MjtlLnNxdWFyZWxuPTEzMjY1O2Uuc3F1YXJlbG9nPTEzMjY2O2Uuc3F1YXJlbWc9MTMxOTg7ZS5zcXVhcmVtaWw9MTMyNjk7ZS5zcXVhcmVtbT0xMzIxMjtlLnNxdWFyZW1zcXVhcmVkPTEzMjE3O2Uuc3F1YXJlb3J0aG9nb25hbGNyb3NzaGF0Y2hmaWxsPTk2Mzg7ZS5zcXVhcmV1cHBlcmxlZnR0b2xvd2VycmlnaHRmaWxsPTk2Mzk7ZS5zcXVhcmV1cHBlcnJpZ2h0dG9sb3dlcmxlZnRmaWxsPTk2NDA7ZS5zcXVhcmV2ZXJ0aWNhbGZpbGw9OTYzNztlLnNxdWFyZXdoaXRld2l0aHNtYWxsYmxhY2s9OTYzNTtlLnNyc3F1YXJlPTEzMjc1O2Uuc3NhYmVuZ2FsaT0yNDg3O2Uuc3NhZGV2YT0yMzU5O2Uuc3NhZ3VqYXJhdGk9Mjc0MztlLnNzYW5nY2lldWNrb3JlYW49MTI2MTc7ZS5zc2FuZ2hpZXVoa29yZWFuPTEyNjc3O2Uuc3NhbmdpZXVuZ2tvcmVhbj0xMjY3MjtlLnNzYW5na2l5ZW9ra29yZWFuPTEyNTk0O2Uuc3NhbmduaWV1bmtvcmVhbj0xMjY0NTtlLnNzYW5ncGlldXBrb3JlYW49MTI2MTE7ZS5zc2FuZ3Npb3Nrb3JlYW49MTI2MTQ7ZS5zc2FuZ3Rpa2V1dGtvcmVhbj0xMjYwMDtlLnNzdXBlcmlvcj02MzIxODtlLnN0ZXJsaW5nPTE2MztlLnN0ZXJsaW5nbW9ub3NwYWNlPTY1NTA1O2Uuc3Ryb2tlbG9uZ292ZXJsYXljbWI9ODIyO2Uuc3Ryb2tlc2hvcnRvdmVybGF5Y21iPTgyMTtlLnN1YnNldD04ODM0O2Uuc3Vic2V0bm90ZXF1YWw9ODg0MjtlLnN1YnNldG9yZXF1YWw9ODgzODtlLnN1Y2NlZWRzPTg4Mjc7ZS5zdWNodGhhdD04NzE1O2Uuc3VoaXJhZ2FuYT0xMjM3NztlLnN1a2F0YWthbmE9MTI0NzM7ZS5zdWthdGFrYW5haGFsZndpZHRoPTY1NDA1O2Uuc3VrdW5hcmFiaWM9MTYxODtlLnN1bW1hdGlvbj04NzIxO2Uuc3VuPTk3ODg7ZS5zdXBlcnNldD04ODM1O2Uuc3VwZXJzZXRub3RlcXVhbD04ODQzO2Uuc3VwZXJzZXRvcmVxdWFsPTg4Mzk7ZS5zdnNxdWFyZT0xMzI3NjtlLnN5b3V3YWVyYXNxdWFyZT0xMzE4MDtlLnQ9MTE2O2UudGFiZW5nYWxpPTI0Njg7ZS50YWNrZG93bj04ODY4O2UudGFja2xlZnQ9ODg2NztlLnRhZGV2YT0yMzQwO2UudGFndWphcmF0aT0yNzI0O2UudGFndXJtdWtoaT0yNTk2O2UudGFoYXJhYmljPTE1OTE7ZS50YWhmaW5hbGFyYWJpYz02NTIxODtlLnRhaGluaXRpYWxhcmFiaWM9NjUyMTk7ZS50YWhpcmFnYW5hPTEyMzgzO2UudGFobWVkaWFsYXJhYmljPTY1MjIwO2UudGFpc3lvdWVyYXNxdWFyZT0xMzE4MTtlLnRha2F0YWthbmE9MTI0Nzk7ZS50YWthdGFrYW5haGFsZndpZHRoPTY1NDA4O2UudGF0d2VlbGFyYWJpYz0xNjAwO2UudGF1PTk2NDtlLnRhdj0xNTE0O2UudGF2ZGFnZXM9NjQzMzA7ZS50YXZkYWdlc2g9NjQzMzA7ZS50YXZkYWdlc2hoZWJyZXc9NjQzMzA7ZS50YXZoZWJyZXc9MTUxNDtlLnRiYXI9MzU5O2UudGJvcG9tb2ZvPTEyNTU0O2UudGNhcm9uPTM1NztlLnRjY3VybD02ODA7ZS50Y2VkaWxsYT0zNTU7ZS50Y2hlaGFyYWJpYz0xNjcwO2UudGNoZWhmaW5hbGFyYWJpYz02NDM3OTtlLnRjaGVoaW5pdGlhbGFyYWJpYz02NDM4MDtlLnRjaGVobWVkaWFsYXJhYmljPTY0MzgxO2UudGNpcmNsZT05NDQzO2UudGNpcmN1bWZsZXhiZWxvdz03NzkzO2UudGNvbW1hYWNjZW50PTM1NTtlLnRkaWVyZXNpcz03ODMxO2UudGRvdGFjY2VudD03Nzg3O2UudGRvdGJlbG93PTc3ODk7ZS50ZWN5cmlsbGljPTEwOTA7ZS50ZWRlc2NlbmRlcmN5cmlsbGljPTExOTc7ZS50ZWhhcmFiaWM9MTU3ODtlLnRlaGZpbmFsYXJhYmljPTY1MTc0O2UudGVoaGFoaW5pdGlhbGFyYWJpYz02NDY3NDtlLnRlaGhhaGlzb2xhdGVkYXJhYmljPTY0NTI0O2UudGVoaW5pdGlhbGFyYWJpYz02NTE3NTtlLnRlaGlyYWdhbmE9MTIzOTA7ZS50ZWhqZWVtaW5pdGlhbGFyYWJpYz02NDY3MztlLnRlaGplZW1pc29sYXRlZGFyYWJpYz02NDUyMztlLnRlaG1hcmJ1dGFhcmFiaWM9MTU3NztlLnRlaG1hcmJ1dGFmaW5hbGFyYWJpYz02NTE3MjtlLnRlaG1lZGlhbGFyYWJpYz02NTE3NjtlLnRlaG1lZW1pbml0aWFsYXJhYmljPTY0Njc2O2UudGVobWVlbWlzb2xhdGVkYXJhYmljPTY0NTI2O2UudGVobm9vbmZpbmFsYXJhYmljPTY0NjI3O2UudGVrYXRha2FuYT0xMjQ4NjtlLnRla2F0YWthbmFoYWxmd2lkdGg9NjU0MTE7ZS50ZWxlcGhvbmU9ODQ4MTtlLnRlbGVwaG9uZWJsYWNrPTk3NDI7ZS50ZWxpc2hhZ2Vkb2xhaGVicmV3PTE0NDA7ZS50ZWxpc2hhcWV0YW5haGVicmV3PTE0NDk7ZS50ZW5jaXJjbGU9OTMyMTtlLnRlbmlkZW9ncmFwaGljcGFyZW49MTI4NDE7ZS50ZW5wYXJlbj05MzQxO2UudGVucGVyaW9kPTkzNjE7ZS50ZW5yb21hbj04NTY5O2UudGVzaD02Nzk7ZS50ZXQ9MTQ5NjtlLnRldGRhZ2VzaD02NDMxMjtlLnRldGRhZ2VzaGhlYnJldz02NDMxMjtlLnRldGhlYnJldz0xNDk2O2UudGV0c2VjeXJpbGxpYz0xMjA1O2UudGV2aXJoZWJyZXc9MTQzNTtlLnRldmlybGVmdGhlYnJldz0xNDM1O2UudGhhYmVuZ2FsaT0yNDY5O2UudGhhZGV2YT0yMzQxO2UudGhhZ3VqYXJhdGk9MjcyNTtlLnRoYWd1cm11a2hpPTI1OTc7ZS50aGFsYXJhYmljPTE1ODQ7ZS50aGFsZmluYWxhcmFiaWM9NjUxOTY7ZS50aGFudGhha2hhdGxvd2xlZnR0aGFpPTYzNjQwO2UudGhhbnRoYWtoYXRsb3dyaWdodHRoYWk9NjM2Mzk7ZS50aGFudGhha2hhdHRoYWk9MzY2MDtlLnRoYW50aGFraGF0dXBwZXJsZWZ0dGhhaT02MzYzODtlLnRoZWhhcmFiaWM9MTU3OTtlLnRoZWhmaW5hbGFyYWJpYz02NTE3ODtlLnRoZWhpbml0aWFsYXJhYmljPTY1MTc5O2UudGhlaG1lZGlhbGFyYWJpYz02NTE4MDtlLnRoZXJlZXhpc3RzPTg3MDc7ZS50aGVyZWZvcmU9ODc1NjtlLnRoZXRhPTk1MjtlLnRoZXRhMT05Nzc7ZS50aGV0YXN5bWJvbGdyZWVrPTk3NztlLnRoaWV1dGhhY2lyY2xla29yZWFuPTEyOTIxO2UudGhpZXV0aGFwYXJlbmtvcmVhbj0xMjgyNTtlLnRoaWV1dGhjaXJjbGVrb3JlYW49MTI5MDc7ZS50aGlldXRoa29yZWFuPTEyNjIwO2UudGhpZXV0aHBhcmVua29yZWFuPTEyODExO2UudGhpcnRlZW5jaXJjbGU9OTMyNDtlLnRoaXJ0ZWVucGFyZW49OTM0NDtlLnRoaXJ0ZWVucGVyaW9kPTkzNjQ7ZS50aG9uYW5nbW9udGhvdGhhaT0zNjAxO2UudGhvb2s9NDI5O2UudGhvcGh1dGhhb3RoYWk9MzYwMjtlLnRob3JuPTI1NDtlLnRob3RoYWhhbnRoYWk9MzYwNztlLnRob3RoYW50aGFpPTM2MDA7ZS50aG90aG9uZ3RoYWk9MzYwODtlLnRob3RodW5ndGhhaT0zNjA2O2UudGhvdXNhbmRjeXJpbGxpYz0xMTU0O2UudGhvdXNhbmRzc2VwYXJhdG9yYXJhYmljPTE2NDQ7ZS50aG91c2FuZHNzZXBhcmF0b3JwZXJzaWFuPTE2NDQ7ZS50aHJlZT01MTtlLnRocmVlYXJhYmljPTE2MzU7ZS50aHJlZWJlbmdhbGk9MjUzNztlLnRocmVlY2lyY2xlPTkzMTQ7ZS50aHJlZWNpcmNsZWludmVyc2VzYW5zc2VyaWY9MTAxMjQ7ZS50aHJlZWRldmE9MjQwOTtlLnRocmVlZWlnaHRocz04NTQwO2UudGhyZWVndWphcmF0aT0yNzkzO2UudGhyZWVndXJtdWtoaT0yNjY1O2UudGhyZWVoYWNrYXJhYmljPTE2MzU7ZS50aHJlZWhhbmd6aG91PTEyMzIzO2UudGhyZWVpZGVvZ3JhcGhpY3BhcmVuPTEyODM0O2UudGhyZWVpbmZlcmlvcj04MzIzO2UudGhyZWVtb25vc3BhY2U9NjUyOTk7ZS50aHJlZW51bWVyYXRvcmJlbmdhbGk9MjU1MDtlLnRocmVlb2xkc3R5bGU9NjMyODM7ZS50aHJlZXBhcmVuPTkzMzQ7ZS50aHJlZXBlcmlvZD05MzU0O2UudGhyZWVwZXJzaWFuPTE3Nzk7ZS50aHJlZXF1YXJ0ZXJzPTE5MDtlLnRocmVlcXVhcnRlcnNlbWRhc2g9NjMxOTg7ZS50aHJlZXJvbWFuPTg1NjI7ZS50aHJlZXN1cGVyaW9yPTE3OTtlLnRocmVldGhhaT0zNjY3O2UudGh6c3F1YXJlPTEzMjA0O2UudGloaXJhZ2FuYT0xMjM4NTtlLnRpa2F0YWthbmE9MTI0ODE7ZS50aWthdGFrYW5haGFsZndpZHRoPTY1NDA5O2UudGlrZXV0YWNpcmNsZWtvcmVhbj0xMjkxMjtlLnRpa2V1dGFwYXJlbmtvcmVhbj0xMjgxNjtlLnRpa2V1dGNpcmNsZWtvcmVhbj0xMjg5ODtlLnRpa2V1dGtvcmVhbj0xMjU5OTtlLnRpa2V1dHBhcmVua29yZWFuPTEyODAyO2UudGlsZGU9NzMyO2UudGlsZGViZWxvd2NtYj04MTY7ZS50aWxkZWNtYj03NzE7ZS50aWxkZWNvbWI9NzcxO2UudGlsZGVkb3VibGVjbWI9ODY0O2UudGlsZGVvcGVyYXRvcj04NzY0O2UudGlsZGVvdmVybGF5Y21iPTgyMDtlLnRpbGRldmVydGljYWxjbWI9ODMwO2UudGltZXNjaXJjbGU9ODg1NTtlLnRpcGVoYWhlYnJldz0xNDMwO2UudGlwZWhhbGVmdGhlYnJldz0xNDMwO2UudGlwcGlndXJtdWtoaT0yNjcyO2UudGl0bG9jeXJpbGxpY2NtYj0xMTU1O2UudGl3bmFybWVuaWFuPTE0MDc7ZS50bGluZWJlbG93PTc3OTE7ZS50bW9ub3NwYWNlPTY1MzY0O2UudG9hcm1lbmlhbj0xMzg1O2UudG9oaXJhZ2FuYT0xMjM5MjtlLnRva2F0YWthbmE9MTI0ODg7ZS50b2thdGFrYW5haGFsZndpZHRoPTY1NDEyO2UudG9uZWJhcmV4dHJhaGlnaG1vZD03NDE7ZS50b25lYmFyZXh0cmFsb3dtb2Q9NzQ1O2UudG9uZWJhcmhpZ2htb2Q9NzQyO2UudG9uZWJhcmxvd21vZD03NDQ7ZS50b25lYmFybWlkbW9kPTc0MztlLnRvbmVmaXZlPTQ0NTtlLnRvbmVzaXg9Mzg5O2UudG9uZXR3bz00MjQ7ZS50b25vcz05MDA7ZS50b25zcXVhcmU9MTMwOTU7ZS50b3BhdGFrdGhhaT0zNTk5O2UudG9ydG9pc2VzaGVsbGJyYWNrZXRsZWZ0PTEyMzA4O2UudG9ydG9pc2VzaGVsbGJyYWNrZXRsZWZ0c21hbGw9NjUxMTc7ZS50b3J0b2lzZXNoZWxsYnJhY2tldGxlZnR2ZXJ0aWNhbD02NTA4MTtlLnRvcnRvaXNlc2hlbGxicmFja2V0cmlnaHQ9MTIzMDk7ZS50b3J0b2lzZXNoZWxsYnJhY2tldHJpZ2h0c21hbGw9NjUxMTg7ZS50b3J0b2lzZXNoZWxsYnJhY2tldHJpZ2h0dmVydGljYWw9NjUwODI7ZS50b3Rhb3RoYWk9MzYwNTtlLnRwYWxhdGFsaG9vaz00Mjc7ZS50cGFyZW49OTM5MTtlLnRyYWRlbWFyaz04NDgyO2UudHJhZGVtYXJrc2Fucz02MzcyMjtlLnRyYWRlbWFya3NlcmlmPTYzMTk1O2UudHJldHJvZmxleGhvb2s9NjQ4O2UudHJpYWdkbj05NjYwO2UudHJpYWdsZj05NjY4O2UudHJpYWdydD05NjU4O2UudHJpYWd1cD05NjUwO2UudHM9Njc4O2UudHNhZGk9MTUxMDtlLnRzYWRpZGFnZXNoPTY0MzI2O2UudHNhZGlkYWdlc2hoZWJyZXc9NjQzMjY7ZS50c2FkaWhlYnJldz0xNTEwO2UudHNlY3lyaWxsaWM9MTA5NDtlLnRzZXJlPTE0NjE7ZS50c2VyZTEyPTE0NjE7ZS50c2VyZTFlPTE0NjE7ZS50c2VyZTJiPTE0NjE7ZS50c2VyZWhlYnJldz0xNDYxO2UudHNlcmVuYXJyb3doZWJyZXc9MTQ2MTtlLnRzZXJlcXVhcnRlcmhlYnJldz0xNDYxO2UudHNlcmV3aWRlaGVicmV3PTE0NjE7ZS50c2hlY3lyaWxsaWM9MTExNTtlLnRzdXBlcmlvcj02MzIxOTtlLnR0YWJlbmdhbGk9MjQ2MztlLnR0YWRldmE9MjMzNTtlLnR0YWd1amFyYXRpPTI3MTk7ZS50dGFndXJtdWtoaT0yNTkxO2UudHRlaGFyYWJpYz0xNjU3O2UudHRlaGZpbmFsYXJhYmljPTY0MzU5O2UudHRlaGluaXRpYWxhcmFiaWM9NjQzNjA7ZS50dGVobWVkaWFsYXJhYmljPTY0MzYxO2UudHRoYWJlbmdhbGk9MjQ2NDtlLnR0aGFkZXZhPTIzMzY7ZS50dGhhZ3VqYXJhdGk9MjcyMDtlLnR0aGFndXJtdWtoaT0yNTkyO2UudHR1cm5lZD02NDc7ZS50dWhpcmFnYW5hPTEyMzg4O2UudHVrYXRha2FuYT0xMjQ4NDtlLnR1a2F0YWthbmFoYWxmd2lkdGg9NjU0MTA7ZS50dXNtYWxsaGlyYWdhbmE9MTIzODc7ZS50dXNtYWxsa2F0YWthbmE9MTI0ODM7ZS50dXNtYWxsa2F0YWthbmFoYWxmd2lkdGg9NjUzOTE7ZS50d2VsdmVjaXJjbGU9OTMyMztlLnR3ZWx2ZXBhcmVuPTkzNDM7ZS50d2VsdmVwZXJpb2Q9OTM2MztlLnR3ZWx2ZXJvbWFuPTg1NzE7ZS50d2VudHljaXJjbGU9OTMzMTtlLnR3ZW50eWhhbmd6aG91PTIxMzE2O2UudHdlbnR5cGFyZW49OTM1MTtlLnR3ZW50eXBlcmlvZD05MzcxO2UudHdvPTUwO2UudHdvYXJhYmljPTE2MzQ7ZS50d29iZW5nYWxpPTI1MzY7ZS50d29jaXJjbGU9OTMxMztlLnR3b2NpcmNsZWludmVyc2VzYW5zc2VyaWY9MTAxMjM7ZS50d29kZXZhPTI0MDg7ZS50d29kb3RlbmxlYWRlcj04MjI5O2UudHdvZG90bGVhZGVyPTgyMjk7ZS50d29kb3RsZWFkZXJ2ZXJ0aWNhbD02NTA3MjtlLnR3b2d1amFyYXRpPTI3OTI7ZS50d29ndXJtdWtoaT0yNjY0O2UudHdvaGFja2FyYWJpYz0xNjM0O2UudHdvaGFuZ3pob3U9MTIzMjI7ZS50d29pZGVvZ3JhcGhpY3BhcmVuPTEyODMzO2UudHdvaW5mZXJpb3I9ODMyMjtlLnR3b21vbm9zcGFjZT02NTI5ODtlLnR3b251bWVyYXRvcmJlbmdhbGk9MjU0OTtlLnR3b29sZHN0eWxlPTYzMjgyO2UudHdvcGFyZW49OTMzMztlLnR3b3BlcmlvZD05MzUzO2UudHdvcGVyc2lhbj0xNzc4O2UudHdvcm9tYW49ODU2MTtlLnR3b3N0cm9rZT00NDM7ZS50d29zdXBlcmlvcj0xNzg7ZS50d290aGFpPTM2NjY7ZS50d290aGlyZHM9ODUzMjtlLnU9MTE3O2UudWFjdXRlPTI1MDtlLnViYXI9NjQ5O2UudWJlbmdhbGk9MjQ0MTtlLnVib3BvbW9mbz0xMjU4NDtlLnVicmV2ZT0zNjU7ZS51Y2Fyb249NDY4O2UudWNpcmNsZT05NDQ0O2UudWNpcmN1bWZsZXg9MjUxO2UudWNpcmN1bWZsZXhiZWxvdz03Nzk5O2UudWN5cmlsbGljPTEwOTE7ZS51ZGF0dGFkZXZhPTIzODU7ZS51ZGJsYWN1dGU9MzY5O2UudWRibGdyYXZlPTUzMztlLnVkZXZhPTIzMTM7ZS51ZGllcmVzaXM9MjUyO2UudWRpZXJlc2lzYWN1dGU9NDcyO2UudWRpZXJlc2lzYmVsb3c9Nzc5NTtlLnVkaWVyZXNpc2Nhcm9uPTQ3NDtlLnVkaWVyZXNpc2N5cmlsbGljPTEyNjU7ZS51ZGllcmVzaXNncmF2ZT00NzY7ZS51ZGllcmVzaXNtYWNyb249NDcwO2UudWRvdGJlbG93PTc5MDk7ZS51Z3JhdmU9MjQ5O2UudWd1amFyYXRpPTI2OTc7ZS51Z3VybXVraGk9MjU2OTtlLnVoaXJhZ2FuYT0xMjM1ODtlLnVob29rYWJvdmU9NzkxMTtlLnVob3JuPTQzMjtlLnVob3JuYWN1dGU9NzkxMztlLnVob3JuZG90YmVsb3c9NzkyMTtlLnVob3JuZ3JhdmU9NzkxNTtlLnVob3JuaG9va2Fib3ZlPTc5MTc7ZS51aG9ybnRpbGRlPTc5MTk7ZS51aHVuZ2FydW1sYXV0PTM2OTtlLnVodW5nYXJ1bWxhdXRjeXJpbGxpYz0xMjY3O2UudWludmVydGVkYnJldmU9NTM1O2UudWthdGFrYW5hPTEyNDU0O2UudWthdGFrYW5haGFsZndpZHRoPTY1Mzk1O2UudWtjeXJpbGxpYz0xMTQ1O2UudWtvcmVhbj0xMjYzNjtlLnVtYWNyb249MzYzO2UudW1hY3JvbmN5cmlsbGljPTEyNjM7ZS51bWFjcm9uZGllcmVzaXM9NzgwMztlLnVtYXRyYWd1cm11a2hpPTI2MjU7ZS51bW9ub3NwYWNlPTY1MzY1O2UudW5kZXJzY29yZT05NTtlLnVuZGVyc2NvcmVkYmw9ODIxNTtlLnVuZGVyc2NvcmVtb25vc3BhY2U9NjUzNDM7ZS51bmRlcnNjb3JldmVydGljYWw9NjUwNzU7ZS51bmRlcnNjb3Jld2F2eT02NTEwMztlLnVuaW9uPTg3NDY7ZS51bml2ZXJzYWw9ODcwNDtlLnVvZ29uZWs9MzcxO2UudXBhcmVuPTkzOTI7ZS51cGJsb2NrPTk2MDA7ZS51cHBlcmRvdGhlYnJldz0xNDc2O2UudXBzaWxvbj05NjU7ZS51cHNpbG9uZGllcmVzaXM9OTcxO2UudXBzaWxvbmRpZXJlc2lzdG9ub3M9OTQ0O2UudXBzaWxvbmxhdGluPTY1MDtlLnVwc2lsb250b25vcz05NzM7ZS51cHRhY2tiZWxvd2NtYj03OTc7ZS51cHRhY2ttb2Q9NzI0O2UudXJhZ3VybXVraGk9MjY3NTtlLnVyaW5nPTM2NztlLnVzaG9ydGN5cmlsbGljPTExMTg7ZS51c21hbGxoaXJhZ2FuYT0xMjM1NztlLnVzbWFsbGthdGFrYW5hPTEyNDUzO2UudXNtYWxsa2F0YWthbmFoYWxmd2lkdGg9NjUzODU7ZS51c3RyYWlnaHRjeXJpbGxpYz0xMTk5O2UudXN0cmFpZ2h0c3Ryb2tlY3lyaWxsaWM9MTIwMTtlLnV0aWxkZT0zNjE7ZS51dGlsZGVhY3V0ZT03ODAxO2UudXRpbGRlYmVsb3c9Nzc5NztlLnV1YmVuZ2FsaT0yNDQyO2UudXVkZXZhPTIzMTQ7ZS51dWd1amFyYXRpPTI2OTg7ZS51dWd1cm11a2hpPTI1NzA7ZS51dW1hdHJhZ3VybXVraGk9MjYyNjtlLnV1dm93ZWxzaWduYmVuZ2FsaT0yNDk4O2UudXV2b3dlbHNpZ25kZXZhPTIzNzA7ZS51dXZvd2Vsc2lnbmd1amFyYXRpPTI3NTQ7ZS51dm93ZWxzaWduYmVuZ2FsaT0yNDk3O2UudXZvd2Vsc2lnbmRldmE9MjM2OTtlLnV2b3dlbHNpZ25ndWphcmF0aT0yNzUzO2Uudj0xMTg7ZS52YWRldmE9MjM1NztlLnZhZ3VqYXJhdGk9Mjc0MTtlLnZhZ3VybXVraGk9MjYxMztlLnZha2F0YWthbmE9MTI1MzU7ZS52YXY9MTQ5MztlLnZhdmRhZ2VzaD02NDMwOTtlLnZhdmRhZ2VzaDY1PTY0MzA5O2UudmF2ZGFnZXNoaGVicmV3PTY0MzA5O2UudmF2aGVicmV3PTE0OTM7ZS52YXZob2xhbT02NDMzMTtlLnZhdmhvbGFtaGVicmV3PTY0MzMxO2UudmF2dmF2aGVicmV3PTE1MjA7ZS52YXZ5b2RoZWJyZXc9MTUyMTtlLnZjaXJjbGU9OTQ0NTtlLnZkb3RiZWxvdz03ODA3O2UudmVjeXJpbGxpYz0xMDc0O2UudmVoYXJhYmljPTE3MDA7ZS52ZWhmaW5hbGFyYWJpYz02NDM2MztlLnZlaGluaXRpYWxhcmFiaWM9NjQzNjQ7ZS52ZWhtZWRpYWxhcmFiaWM9NjQzNjU7ZS52ZWthdGFrYW5hPTEyNTM3O2UudmVudXM9OTc5MjtlLnZlcnRpY2FsYmFyPTEyNDtlLnZlcnRpY2FsbGluZWFib3ZlY21iPTc4MTtlLnZlcnRpY2FsbGluZWJlbG93Y21iPTgwOTtlLnZlcnRpY2FsbGluZWxvd21vZD03MTY7ZS52ZXJ0aWNhbGxpbmVtb2Q9NzEyO2UudmV3YXJtZW5pYW49MTQwNjtlLnZob29rPTY1MTtlLnZpa2F0YWthbmE9MTI1MzY7ZS52aXJhbWFiZW5nYWxpPTI1MDk7ZS52aXJhbWFkZXZhPTIzODE7ZS52aXJhbWFndWphcmF0aT0yNzY1O2UudmlzYXJnYWJlbmdhbGk9MjQzNTtlLnZpc2FyZ2FkZXZhPTIzMDc7ZS52aXNhcmdhZ3VqYXJhdGk9MjY5MTtlLnZtb25vc3BhY2U9NjUzNjY7ZS52b2FybWVuaWFuPTE0MDA7ZS52b2ljZWRpdGVyYXRpb25oaXJhZ2FuYT0xMjQ0NjtlLnZvaWNlZGl0ZXJhdGlvbmthdGFrYW5hPTEyNTQyO2Uudm9pY2VkbWFya2thbmE9MTI0NDM7ZS52b2ljZWRtYXJra2FuYWhhbGZ3aWR0aD02NTQzODtlLnZva2F0YWthbmE9MTI1Mzg7ZS52cGFyZW49OTM5MztlLnZ0aWxkZT03ODA1O2UudnR1cm5lZD02NTI7ZS52dWhpcmFnYW5hPTEyNDM2O2UudnVrYXRha2FuYT0xMjUzMjtlLnc9MTE5O2Uud2FjdXRlPTc4MTE7ZS53YWVrb3JlYW49MTI2MzM7ZS53YWhpcmFnYW5hPTEyNDMxO2Uud2FrYXRha2FuYT0xMjUyNztlLndha2F0YWthbmFoYWxmd2lkdGg9NjU0MzY7ZS53YWtvcmVhbj0xMjYzMjtlLndhc21hbGxoaXJhZ2FuYT0xMjQzMDtlLndhc21hbGxrYXRha2FuYT0xMjUyNjtlLndhdHRvc3F1YXJlPTEzMTQzO2Uud2F2ZWRhc2g9MTIzMTY7ZS53YXZ5dW5kZXJzY29yZXZlcnRpY2FsPTY1MDc2O2Uud2F3YXJhYmljPTE2MDg7ZS53YXdmaW5hbGFyYWJpYz02NTI2MjtlLndhd2hhbXphYWJvdmVhcmFiaWM9MTU3MjtlLndhd2hhbXphYWJvdmVmaW5hbGFyYWJpYz02NTE1ODtlLndic3F1YXJlPTEzMjc3O2Uud2NpcmNsZT05NDQ2O2Uud2NpcmN1bWZsZXg9MzczO2Uud2RpZXJlc2lzPTc4MTM7ZS53ZG90YWNjZW50PTc4MTU7ZS53ZG90YmVsb3c9NzgxNztlLndlaGlyYWdhbmE9MTI0MzM7ZS53ZWllcnN0cmFzcz04NDcyO2Uud2VrYXRha2FuYT0xMjUyOTtlLndla29yZWFuPTEyNjM4O2Uud2Vva29yZWFuPTEyNjM3O2Uud2dyYXZlPTc4MDk7ZS53aGl0ZWJ1bGxldD05NzAyO2Uud2hpdGVjaXJjbGU9OTY3NTtlLndoaXRlY2lyY2xlaW52ZXJzZT05Njg5O2Uud2hpdGVjb3JuZXJicmFja2V0bGVmdD0xMjMwMjtlLndoaXRlY29ybmVyYnJhY2tldGxlZnR2ZXJ0aWNhbD02NTA5MTtlLndoaXRlY29ybmVyYnJhY2tldHJpZ2h0PTEyMzAzO2Uud2hpdGVjb3JuZXJicmFja2V0cmlnaHR2ZXJ0aWNhbD02NTA5MjtlLndoaXRlZGlhbW9uZD05NjcxO2Uud2hpdGVkaWFtb25kY29udGFpbmluZ2JsYWNrc21hbGxkaWFtb25kPTk2NzI7ZS53aGl0ZWRvd25wb2ludGluZ3NtYWxsdHJpYW5nbGU9OTY2MztlLndoaXRlZG93bnBvaW50aW5ndHJpYW5nbGU9OTY2MTtlLndoaXRlbGVmdHBvaW50aW5nc21hbGx0cmlhbmdsZT05NjY3O2Uud2hpdGVsZWZ0cG9pbnRpbmd0cmlhbmdsZT05NjY1O2Uud2hpdGVsZW50aWN1bGFyYnJhY2tldGxlZnQ9MTIzMTA7ZS53aGl0ZWxlbnRpY3VsYXJicmFja2V0cmlnaHQ9MTIzMTE7ZS53aGl0ZXJpZ2h0cG9pbnRpbmdzbWFsbHRyaWFuZ2xlPTk2NTc7ZS53aGl0ZXJpZ2h0cG9pbnRpbmd0cmlhbmdsZT05NjU1O2Uud2hpdGVzbWFsbHNxdWFyZT05NjQzO2Uud2hpdGVzbWlsaW5nZmFjZT05Nzg2O2Uud2hpdGVzcXVhcmU9OTYzMztlLndoaXRlc3Rhcj05NzM0O2Uud2hpdGV0ZWxlcGhvbmU9OTc0MztlLndoaXRldG9ydG9pc2VzaGVsbGJyYWNrZXRsZWZ0PTEyMzEyO2Uud2hpdGV0b3J0b2lzZXNoZWxsYnJhY2tldHJpZ2h0PTEyMzEzO2Uud2hpdGV1cHBvaW50aW5nc21hbGx0cmlhbmdsZT05NjUzO2Uud2hpdGV1cHBvaW50aW5ndHJpYW5nbGU9OTY1MTtlLndpaGlyYWdhbmE9MTI0MzI7ZS53aWthdGFrYW5hPTEyNTI4O2Uud2lrb3JlYW49MTI2Mzk7ZS53bW9ub3NwYWNlPTY1MzY3O2Uud29oaXJhZ2FuYT0xMjQzNDtlLndva2F0YWthbmE9MTI1MzA7ZS53b2thdGFrYW5haGFsZndpZHRoPTY1MzgyO2Uud29uPTgzNjE7ZS53b25tb25vc3BhY2U9NjU1MTA7ZS53b3dhZW50aGFpPTM2MjM7ZS53cGFyZW49OTM5NDtlLndyaW5nPTc4MzI7ZS53c3VwZXJpb3I9Njk1O2Uud3R1cm5lZD02NTM7ZS53eW5uPTQ0NztlLng9MTIwO2UueGFib3ZlY21iPTgyOTtlLnhib3BvbW9mbz0xMjU2MjtlLnhjaXJjbGU9OTQ0NztlLnhkaWVyZXNpcz03ODIxO2UueGRvdGFjY2VudD03ODE5O2UueGVoYXJtZW5pYW49MTM4OTtlLnhpPTk1ODtlLnhtb25vc3BhY2U9NjUzNjg7ZS54cGFyZW49OTM5NTtlLnhzdXBlcmlvcj03Mzk7ZS55PTEyMTtlLnlhYWRvc3F1YXJlPTEzMTM0O2UueWFiZW5nYWxpPTI0Nzk7ZS55YWN1dGU9MjUzO2UueWFkZXZhPTIzNTE7ZS55YWVrb3JlYW49MTI2MjY7ZS55YWd1amFyYXRpPTI3MzU7ZS55YWd1cm11a2hpPTI2MDc7ZS55YWhpcmFnYW5hPTEyNDIwO2UueWFrYXRha2FuYT0xMjUxNjtlLnlha2F0YWthbmFoYWxmd2lkdGg9NjU0Mjg7ZS55YWtvcmVhbj0xMjYyNTtlLnlhbWFra2FudGhhaT0zNjYyO2UueWFzbWFsbGhpcmFnYW5hPTEyNDE5O2UueWFzbWFsbGthdGFrYW5hPTEyNTE1O2UueWFzbWFsbGthdGFrYW5haGFsZndpZHRoPTY1Mzg4O2UueWF0Y3lyaWxsaWM9MTEyMztlLnljaXJjbGU9OTQ0ODtlLnljaXJjdW1mbGV4PTM3NTtlLnlkaWVyZXNpcz0yNTU7ZS55ZG90YWNjZW50PTc4MjM7ZS55ZG90YmVsb3c9NzkyNTtlLnllaGFyYWJpYz0xNjEwO2UueWVoYmFycmVlYXJhYmljPTE3NDY7ZS55ZWhiYXJyZWVmaW5hbGFyYWJpYz02NDQzMTtlLnllaGZpbmFsYXJhYmljPTY1MjY2O2UueWVoaGFtemFhYm92ZWFyYWJpYz0xNTc0O2UueWVoaGFtemFhYm92ZWZpbmFsYXJhYmljPTY1MTYyO2UueWVoaGFtemFhYm92ZWluaXRpYWxhcmFiaWM9NjUxNjM7ZS55ZWhoYW16YWFib3ZlbWVkaWFsYXJhYmljPTY1MTY0O2UueWVoaW5pdGlhbGFyYWJpYz02NTI2NztlLnllaG1lZGlhbGFyYWJpYz02NTI2ODtlLnllaG1lZW1pbml0aWFsYXJhYmljPTY0NzMzO2UueWVobWVlbWlzb2xhdGVkYXJhYmljPTY0NjAwO2UueWVobm9vbmZpbmFsYXJhYmljPTY0NjYwO2UueWVodGhyZWVkb3RzYmVsb3dhcmFiaWM9MTc0NTtlLnlla29yZWFuPTEyNjMwO2UueWVuPTE2NTtlLnllbm1vbm9zcGFjZT02NTUwOTtlLnllb2tvcmVhbj0xMjYyOTtlLnllb3JpbmhpZXVoa29yZWFuPTEyNjc4O2UueWVyYWhiZW55b21vaGVicmV3PTE0NTA7ZS55ZXJhaGJlbnlvbW9sZWZ0aGVicmV3PTE0NTA7ZS55ZXJpY3lyaWxsaWM9MTA5OTtlLnllcnVkaWVyZXNpc2N5cmlsbGljPTEyNzM7ZS55ZXNpZXVuZ2tvcmVhbj0xMjY3MztlLnllc2lldW5ncGFuc2lvc2tvcmVhbj0xMjY3NTtlLnllc2lldW5nc2lvc2tvcmVhbj0xMjY3NDtlLnlldGl2aGVicmV3PTE0MzQ7ZS55Z3JhdmU9NzkyMztlLnlob29rPTQzNjtlLnlob29rYWJvdmU9NzkyNztlLnlpYXJtZW5pYW49MTM5NztlLnlpY3lyaWxsaWM9MTExMTtlLnlpa29yZWFuPTEyNjQyO2UueWlueWFuZz05Nzc1O2UueWl3bmFybWVuaWFuPTE0MTA7ZS55bW9ub3NwYWNlPTY1MzY5O2UueW9kPTE0OTc7ZS55b2RkYWdlc2g9NjQzMTM7ZS55b2RkYWdlc2hoZWJyZXc9NjQzMTM7ZS55b2RoZWJyZXc9MTQ5NztlLnlvZHlvZGhlYnJldz0xNTIyO2UueW9keW9kcGF0YWhoZWJyZXc9NjQyODc7ZS55b2hpcmFnYW5hPTEyNDI0O2UueW9pa29yZWFuPTEyNjgxO2UueW9rYXRha2FuYT0xMjUyMDtlLnlva2F0YWthbmFoYWxmd2lkdGg9NjU0MzA7ZS55b2tvcmVhbj0xMjYzNTtlLnlvc21hbGxoaXJhZ2FuYT0xMjQyMztlLnlvc21hbGxrYXRha2FuYT0xMjUxOTtlLnlvc21hbGxrYXRha2FuYWhhbGZ3aWR0aD02NTM5MDtlLnlvdGdyZWVrPTEwMTE7ZS55b3lhZWtvcmVhbj0xMjY4MDtlLnlveWFrb3JlYW49MTI2Nzk7ZS55b3lha3RoYWk9MzYxODtlLnlveWluZ3RoYWk9MzU5NztlLnlwYXJlbj05Mzk2O2UueXBvZ2VncmFtbWVuaT04OTA7ZS55cG9nZWdyYW1tZW5pZ3JlZWtjbWI9ODM3O2UueXI9NDIyO2UueXJpbmc9NzgzMztlLnlzdXBlcmlvcj02OTY7ZS55dGlsZGU9NzkyOTtlLnl0dXJuZWQ9NjU0O2UueXVoaXJhZ2FuYT0xMjQyMjtlLnl1aWtvcmVhbj0xMjY4NDtlLnl1a2F0YWthbmE9MTI1MTg7ZS55dWthdGFrYW5haGFsZndpZHRoPTY1NDI5O2UueXVrb3JlYW49MTI2NDA7ZS55dXNiaWdjeXJpbGxpYz0xMTMxO2UueXVzYmlnaW90aWZpZWRjeXJpbGxpYz0xMTMzO2UueXVzbGl0dGxlY3lyaWxsaWM9MTEyNztlLnl1c2xpdHRsZWlvdGlmaWVkY3lyaWxsaWM9MTEyOTtlLnl1c21hbGxoaXJhZ2FuYT0xMjQyMTtlLnl1c21hbGxrYXRha2FuYT0xMjUxNztlLnl1c21hbGxrYXRha2FuYWhhbGZ3aWR0aD02NTM4OTtlLnl1eWVrb3JlYW49MTI2ODM7ZS55dXllb2tvcmVhbj0xMjY4MjtlLnl5YWJlbmdhbGk9MjUyNztlLnl5YWRldmE9MjM5OTtlLno9MTIyO2UuemFhcm1lbmlhbj0xMzgyO2UuemFjdXRlPTM3ODtlLnphZGV2YT0yMzk1O2UuemFndXJtdWtoaT0yNjUxO2UuemFoYXJhYmljPTE1OTI7ZS56YWhmaW5hbGFyYWJpYz02NTIyMjtlLnphaGluaXRpYWxhcmFiaWM9NjUyMjM7ZS56YWhpcmFnYW5hPTEyMzc0O2UuemFobWVkaWFsYXJhYmljPTY1MjI0O2UuemFpbmFyYWJpYz0xNTg2O2UuemFpbmZpbmFsYXJhYmljPTY1MjAwO2UuemFrYXRha2FuYT0xMjQ3MDtlLnphcWVmZ2Fkb2xoZWJyZXc9MTQyOTtlLnphcWVmcWF0YW5oZWJyZXc9MTQyODtlLnphcnFhaGVicmV3PTE0MzI7ZS56YXlpbj0xNDk0O2UuemF5aW5kYWdlc2g9NjQzMTA7ZS56YXlpbmRhZ2VzaGhlYnJldz02NDMxMDtlLnpheWluaGVicmV3PTE0OTQ7ZS56Ym9wb21vZm89MTI1Njc7ZS56Y2Fyb249MzgyO2UuemNpcmNsZT05NDQ5O2UuemNpcmN1bWZsZXg9NzgyNTtlLnpjdXJsPTY1NztlLnpkb3Q9MzgwO2UuemRvdGFjY2VudD0zODA7ZS56ZG90YmVsb3c9NzgyNztlLnplY3lyaWxsaWM9MTA3OTtlLnplZGVzY2VuZGVyY3lyaWxsaWM9MTE3NztlLnplZGllcmVzaXNjeXJpbGxpYz0xMjQ3O2UuemVoaXJhZ2FuYT0xMjM4MDtlLnpla2F0YWthbmE9MTI0NzY7ZS56ZXJvPTQ4O2UuemVyb2FyYWJpYz0xNjMyO2UuemVyb2JlbmdhbGk9MjUzNDtlLnplcm9kZXZhPTI0MDY7ZS56ZXJvZ3VqYXJhdGk9Mjc5MDtlLnplcm9ndXJtdWtoaT0yNjYyO2UuemVyb2hhY2thcmFiaWM9MTYzMjtlLnplcm9pbmZlcmlvcj04MzIwO2UuemVyb21vbm9zcGFjZT02NTI5NjtlLnplcm9vbGRzdHlsZT02MzI4MDtlLnplcm9wZXJzaWFuPTE3NzY7ZS56ZXJvc3VwZXJpb3I9ODMwNDtlLnplcm90aGFpPTM2NjQ7ZS56ZXJvd2lkdGhqb2luZXI9NjUyNzk7ZS56ZXJvd2lkdGhub25qb2luZXI9ODIwNDtlLnplcm93aWR0aHNwYWNlPTgyMDM7ZS56ZXRhPTk1MDtlLnpoYm9wb21vZm89MTI1NjM7ZS56aGVhcm1lbmlhbj0xMzg2O2UuemhlYnJldmVjeXJpbGxpYz0xMjE4O2UuemhlY3lyaWxsaWM9MTA3ODtlLnpoZWRlc2NlbmRlcmN5cmlsbGljPTExNzU7ZS56aGVkaWVyZXNpc2N5cmlsbGljPTEyNDU7ZS56aWhpcmFnYW5hPTEyMzc2O2UuemlrYXRha2FuYT0xMjQ3MjtlLnppbm9yaGVicmV3PTE0NTQ7ZS56bGluZWJlbG93PTc4Mjk7ZS56bW9ub3NwYWNlPTY1MzcwO2Uuem9oaXJhZ2FuYT0xMjM4MjtlLnpva2F0YWthbmE9MTI0Nzg7ZS56cGFyZW49OTM5NztlLnpyZXRyb2ZsZXhob29rPTY1NjtlLnpzdHJva2U9NDM4O2UuenVoaXJhZ2FuYT0xMjM3ODtlLnp1a2F0YWthbmE9MTI0NzQ7ZVsiLm5vdGRlZiJdPTA7ZS5hbmdicmFja2V0bGVmdGJpZz05MDAxO2UuYW5nYnJhY2tldGxlZnRCaWc9OTAwMTtlLmFuZ2JyYWNrZXRsZWZ0YmlnZz05MDAxO2UuYW5nYnJhY2tldGxlZnRCaWdnPTkwMDE7ZS5hbmdicmFja2V0cmlnaHRCaWc9OTAwMjtlLmFuZ2JyYWNrZXRyaWdodGJpZz05MDAyO2UuYW5nYnJhY2tldHJpZ2h0QmlnZz05MDAyO2UuYW5nYnJhY2tldHJpZ2h0YmlnZz05MDAyO2UuYXJyb3dob29rbGVmdD04NjE4O2UuYXJyb3dob29rcmlnaHQ9ODYxNztlLmFycm93bGVmdHRvcGhhbGY9ODYzNjtlLmFycm93bGVmdGJvdGhhbGY9ODYzNztlLmFycm93bm9ydGhlYXN0PTg1OTk7ZS5hcnJvd25vcnRod2VzdD04NTk4O2UuYXJyb3dyaWdodHRvcGhhbGY9ODY0MDtlLmFycm93cmlnaHRib3RoYWxmPTg2NDE7ZS5hcnJvd3NvdXRoZWFzdD04NjAwO2UuYXJyb3dzb3V0aHdlc3Q9ODYwMTtlLmJhY2tzbGFzaGJpZz04NzI2O2UuYmFja3NsYXNoQmlnPTg3MjY7ZS5iYWNrc2xhc2hCaWdnPTg3MjY7ZS5iYWNrc2xhc2hiaWdnPTg3MjY7ZS5iYXJkYmw9ODIxNDtlLmJyYWNlaHRpcGRvd25sZWZ0PTY1MDc5O2UuYnJhY2VodGlwZG93bnJpZ2h0PTY1MDc5O2UuYnJhY2VodGlwdXBsZWZ0PTY1MDgwO2UuYnJhY2VodGlwdXByaWdodD02NTA4MDtlLmJyYWNlbGVmdEJpZz0xMjM7ZS5icmFjZWxlZnRiaWc9MTIzO2UuYnJhY2VsZWZ0YmlnZz0xMjM7ZS5icmFjZWxlZnRCaWdnPTEyMztlLmJyYWNlcmlnaHRCaWc9MTI1O2UuYnJhY2VyaWdodGJpZz0xMjU7ZS5icmFjZXJpZ2h0YmlnZz0xMjU7ZS5icmFjZXJpZ2h0QmlnZz0xMjU7ZS5icmFja2V0bGVmdGJpZz05MTtlLmJyYWNrZXRsZWZ0QmlnPTkxO2UuYnJhY2tldGxlZnRiaWdnPTkxO2UuYnJhY2tldGxlZnRCaWdnPTkxO2UuYnJhY2tldHJpZ2h0QmlnPTkzO2UuYnJhY2tldHJpZ2h0YmlnPTkzO2UuYnJhY2tldHJpZ2h0YmlnZz05MztlLmJyYWNrZXRyaWdodEJpZ2c9OTM7ZS5jZWlsaW5nbGVmdGJpZz04OTY4O2UuY2VpbGluZ2xlZnRCaWc9ODk2ODtlLmNlaWxpbmdsZWZ0QmlnZz04OTY4O2UuY2VpbGluZ2xlZnRiaWdnPTg5Njg7ZS5jZWlsaW5ncmlnaHRiaWc9ODk2OTtlLmNlaWxpbmdyaWdodEJpZz04OTY5O2UuY2VpbGluZ3JpZ2h0YmlnZz04OTY5O2UuY2VpbGluZ3JpZ2h0QmlnZz04OTY5O2UuY2lyY2xlZG90ZGlzcGxheT04ODU3O2UuY2lyY2xlZG90dGV4dD04ODU3O2UuY2lyY2xlbXVsdGlwbHlkaXNwbGF5PTg4NTU7ZS5jaXJjbGVtdWx0aXBseXRleHQ9ODg1NTtlLmNpcmNsZXBsdXNkaXNwbGF5PTg4NTM7ZS5jaXJjbGVwbHVzdGV4dD04ODUzO2UuY29udGludGVncmFsZGlzcGxheT04NzUwO2UuY29udGludGVncmFsdGV4dD04NzUwO2UuY29wcm9kdWN0ZGlzcGxheT04NzIwO2UuY29wcm9kdWN0dGV4dD04NzIwO2UuZmxvb3JsZWZ0QmlnPTg5NzA7ZS5mbG9vcmxlZnRiaWc9ODk3MDtlLmZsb29ybGVmdGJpZ2c9ODk3MDtlLmZsb29ybGVmdEJpZ2c9ODk3MDtlLmZsb29ycmlnaHRiaWc9ODk3MTtlLmZsb29ycmlnaHRCaWc9ODk3MTtlLmZsb29ycmlnaHRCaWdnPTg5NzE7ZS5mbG9vcnJpZ2h0YmlnZz04OTcxO2UuaGF0d2lkZT03NzA7ZS5oYXR3aWRlcj03NzA7ZS5oYXR3aWRlc3Q9NzcwO2UuaW50ZXJjYWw9NzQ4ODtlLmludGVncmFsZGlzcGxheT04NzQ3O2UuaW50ZWdyYWx0ZXh0PTg3NDc7ZS5pbnRlcnNlY3Rpb25kaXNwbGF5PTg4OTg7ZS5pbnRlcnNlY3Rpb250ZXh0PTg4OTg7ZS5sb2dpY2FsYW5kZGlzcGxheT04NzQzO2UubG9naWNhbGFuZHRleHQ9ODc0MztlLmxvZ2ljYWxvcmRpc3BsYXk9ODc0NDtlLmxvZ2ljYWxvcnRleHQ9ODc0NDtlLnBhcmVubGVmdEJpZz00MDtlLnBhcmVubGVmdGJpZz00MDtlLnBhcmVubGVmdEJpZ2c9NDA7ZS5wYXJlbmxlZnRiaWdnPTQwO2UucGFyZW5yaWdodEJpZz00MTtlLnBhcmVucmlnaHRiaWc9NDE7ZS5wYXJlbnJpZ2h0QmlnZz00MTtlLnBhcmVucmlnaHRiaWdnPTQxO2UucHJpbWU9ODI0MjtlLnByb2R1Y3RkaXNwbGF5PTg3MTk7ZS5wcm9kdWN0dGV4dD04NzE5O2UucmFkaWNhbGJpZz04NzMwO2UucmFkaWNhbEJpZz04NzMwO2UucmFkaWNhbEJpZ2c9ODczMDtlLnJhZGljYWxiaWdnPTg3MzA7ZS5yYWRpY2FsYnQ9ODczMDtlLnJhZGljYWx0cD04NzMwO2UucmFkaWNhbHZlcnRleD04NzMwO2Uuc2xhc2hiaWc9NDc7ZS5zbGFzaEJpZz00NztlLnNsYXNoQmlnZz00NztlLnNsYXNoYmlnZz00NztlLnN1bW1hdGlvbmRpc3BsYXk9ODcyMTtlLnN1bW1hdGlvbnRleHQ9ODcyMTtlLnRpbGRld2lkZT03MzI7ZS50aWxkZXdpZGVyPTczMjtlLnRpbGRld2lkZXN0PTczMjtlLnVuaW9uZGlzcGxheT04ODk5O2UudW5pb25tdWx0aWRpc3BsYXk9ODg0NjtlLnVuaW9ubXVsdGl0ZXh0PTg4NDY7ZS51bmlvbnNxZGlzcGxheT04ODUyO2UudW5pb25zcXRleHQ9ODg1MjtlLnVuaW9udGV4dD04ODk5O2UudmV4dGVuZGRvdWJsZT04NzQxO2UudmV4dGVuZHNpbmdsZT04NzM5fSkpO3QuZ2V0R2x5cGhzVW5pY29kZT1uO2NvbnN0IGk9KDAsci5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKChmdW5jdGlvbihlKXtlLnNwYWNlPTMyO2UuYTE9OTk4NTtlLmEyPTk5ODY7ZS5hMjAyPTk5ODc7ZS5hMz05OTg4O2UuYTQ9OTc0MjtlLmE1PTk5OTA7ZS5hMTE5PTk5OTE7ZS5hMTE4PTk5OTI7ZS5hMTE3PTk5OTM7ZS5hMTE9OTc1NTtlLmExMj05NzU4O2UuYTEzPTk5OTY7ZS5hMTQ9OTk5NztlLmExNT05OTk4O2UuYTE2PTk5OTk7ZS5hMTA1PTFlNDtlLmExNz0xMDAwMTtlLmExOD0xMDAwMjtlLmExOT0xMDAwMztlLmEyMD0xMDAwNDtlLmEyMT0xMDAwNTtlLmEyMj0xMDAwNjtlLmEyMz0xMDAwNztlLmEyND0xMDAwODtlLmEyNT0xMDAwOTtlLmEyNj0xMDAxMDtlLmEyNz0xMDAxMTtlLmEyOD0xMDAxMjtlLmE2PTEwMDEzO2UuYTc9MTAwMTQ7ZS5hOD0xMDAxNTtlLmE5PTEwMDE2O2UuYTEwPTEwMDE3O2UuYTI5PTEwMDE4O2UuYTMwPTEwMDE5O2UuYTMxPTEwMDIwO2UuYTMyPTEwMDIxO2UuYTMzPTEwMDIyO2UuYTM0PTEwMDIzO2UuYTM1PTk3MzM7ZS5hMzY9MTAwMjU7ZS5hMzc9MTAwMjY7ZS5hMzg9MTAwMjc7ZS5hMzk9MTAwMjg7ZS5hNDA9MTAwMjk7ZS5hNDE9MTAwMzA7ZS5hNDI9MTAwMzE7ZS5hNDM9MTAwMzI7ZS5hNDQ9MTAwMzM7ZS5hNDU9MTAwMzQ7ZS5hNDY9MTAwMzU7ZS5hNDc9MTAwMzY7ZS5hNDg9MTAwMzc7ZS5hNDk9MTAwMzg7ZS5hNTA9MTAwMzk7ZS5hNTE9MTAwNDA7ZS5hNTI9MTAwNDE7ZS5hNTM9MTAwNDI7ZS5hNTQ9MTAwNDM7ZS5hNTU9MTAwNDQ7ZS5hNTY9MTAwNDU7ZS5hNTc9MTAwNDY7ZS5hNTg9MTAwNDc7ZS5hNTk9MTAwNDg7ZS5hNjA9MTAwNDk7ZS5hNjE9MTAwNTA7ZS5hNjI9MTAwNTE7ZS5hNjM9MTAwNTI7ZS5hNjQ9MTAwNTM7ZS5hNjU9MTAwNTQ7ZS5hNjY9MTAwNTU7ZS5hNjc9MTAwNTY7ZS5hNjg9MTAwNTc7ZS5hNjk9MTAwNTg7ZS5hNzA9MTAwNTk7ZS5hNzE9OTY3OTtlLmE3Mj0xMDA2MTtlLmE3Mz05NjMyO2UuYTc0PTEwMDYzO2UuYTIwMz0xMDA2NDtlLmE3NT0xMDA2NTtlLmEyMDQ9MTAwNjY7ZS5hNzY9OTY1MDtlLmE3Nz05NjYwO2UuYTc4PTk2NzA7ZS5hNzk9MTAwNzA7ZS5hODE9OTY4NztlLmE4Mj0xMDA3MjtlLmE4Mz0xMDA3MztlLmE4ND0xMDA3NDtlLmE5Nz0xMDA3NTtlLmE5OD0xMDA3NjtlLmE5OT0xMDA3NztlLmExMDA9MTAwNzg7ZS5hMTAxPTEwMDgxO2UuYTEwMj0xMDA4MjtlLmExMDM9MTAwODM7ZS5hMTA0PTEwMDg0O2UuYTEwNj0xMDA4NTtlLmExMDc9MTAwODY7ZS5hMTA4PTEwMDg3O2UuYTExMj05ODI3O2UuYTExMT05ODMwO2UuYTExMD05ODI5O2UuYTEwOT05ODI0O2UuYTEyMD05MzEyO2UuYTEyMT05MzEzO2UuYTEyMj05MzE0O2UuYTEyMz05MzE1O2UuYTEyND05MzE2O2UuYTEyNT05MzE3O2UuYTEyNj05MzE4O2UuYTEyNz05MzE5O2UuYTEyOD05MzIwO2UuYTEyOT05MzIxO2UuYTEzMD0xMDEwMjtlLmExMzE9MTAxMDM7ZS5hMTMyPTEwMTA0O2UuYTEzMz0xMDEwNTtlLmExMzQ9MTAxMDY7ZS5hMTM1PTEwMTA3O2UuYTEzNj0xMDEwODtlLmExMzc9MTAxMDk7ZS5hMTM4PTEwMTEwO2UuYTEzOT0xMDExMTtlLmExNDA9MTAxMTI7ZS5hMTQxPTEwMTEzO2UuYTE0Mj0xMDExNDtlLmExNDM9MTAxMTU7ZS5hMTQ0PTEwMTE2O2UuYTE0NT0xMDExNztlLmExNDY9MTAxMTg7ZS5hMTQ3PTEwMTE5O2UuYTE0OD0xMDEyMDtlLmExNDk9MTAxMjE7ZS5hMTUwPTEwMTIyO2UuYTE1MT0xMDEyMztlLmExNTI9MTAxMjQ7ZS5hMTUzPTEwMTI1O2UuYTE1ND0xMDEyNjtlLmExNTU9MTAxMjc7ZS5hMTU2PTEwMTI4O2UuYTE1Nz0xMDEyOTtlLmExNTg9MTAxMzA7ZS5hMTU5PTEwMTMxO2UuYTE2MD0xMDEzMjtlLmExNjE9ODU5NDtlLmExNjM9ODU5NjtlLmExNjQ9ODU5NztlLmExOTY9MTAxMzY7ZS5hMTY1PTEwMTM3O2UuYTE5Mj0xMDEzODtlLmExNjY9MTAxMzk7ZS5hMTY3PTEwMTQwO2UuYTE2OD0xMDE0MTtlLmExNjk9MTAxNDI7ZS5hMTcwPTEwMTQzO2UuYTE3MT0xMDE0NDtlLmExNzI9MTAxNDU7ZS5hMTczPTEwMTQ2O2UuYTE2Mj0xMDE0NztlLmExNzQ9MTAxNDg7ZS5hMTc1PTEwMTQ5O2UuYTE3Nj0xMDE1MDtlLmExNzc9MTAxNTE7ZS5hMTc4PTEwMTUyO2UuYTE3OT0xMDE1MztlLmExOTM9MTAxNTQ7ZS5hMTgwPTEwMTU1O2UuYTE5OT0xMDE1NjtlLmExODE9MTAxNTc7ZS5hMjAwPTEwMTU4O2UuYTE4Mj0xMDE1OTtlLmEyMDE9MTAxNjE7ZS5hMTgzPTEwMTYyO2UuYTE4ND0xMDE2MztlLmExOTc9MTAxNjQ7ZS5hMTg1PTEwMTY1O2UuYTE5ND0xMDE2NjtlLmExOTg9MTAxNjc7ZS5hMTg2PTEwMTY4O2UuYTE5NT0xMDE2OTtlLmExODc9MTAxNzA7ZS5hMTg4PTEwMTcxO2UuYTE4OT0xMDE3MjtlLmExOTA9MTAxNzM7ZS5hMTkxPTEwMTc0O2UuYTg5PTEwMDg4O2UuYTkwPTEwMDg5O2UuYTkzPTEwMDkwO2UuYTk0PTEwMDkxO2UuYTkxPTEwMDkyO2UuYTkyPTEwMDkzO2UuYTIwNT0xMDA5NDtlLmE4NT0xMDA5NTtlLmEyMDY9MTAwOTY7ZS5hODY9MTAwOTc7ZS5hODc9MTAwOTg7ZS5hODg9MTAwOTk7ZS5hOTU9MTAxMDA7ZS5hOTY9MTAxMDE7ZVsiLm5vdGRlZiJdPTB9KSk7dC5nZXREaW5nYmF0c0dseXBoc1VuaWNvZGU9aX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LmNsZWFyVW5pY29kZUNhY2hlcz1mdW5jdGlvbiBjbGVhclVuaWNvZGVDYWNoZXMoKXtzLmNsZWFyKCl9O3QuZ2V0Q2hhclVuaWNvZGVDYXRlZ29yeT1mdW5jdGlvbiBnZXRDaGFyVW5pY29kZUNhdGVnb3J5KGUpe2NvbnN0IHQ9cy5nZXQoZSk7aWYodClyZXR1cm4gdDtjb25zdCBhPWUubWF0Y2goaSkscj17aXNXaGl0ZXNwYWNlOiEhYT8uWzFdLGlzWmVyb1dpZHRoRGlhY3JpdGljOiEhYT8uWzJdLGlzSW52aXNpYmxlRm9ybWF0TWFyazohIWE/LlszXX07cy5zZXQoZSxyKTtyZXR1cm4gcn07dC5nZXRVbmljb2RlRm9yR2x5cGg9ZnVuY3Rpb24gZ2V0VW5pY29kZUZvckdseXBoKGUsdCl7bGV0IGE9dFtlXTtpZih2b2lkIDAhPT1hKXJldHVybiBhO2lmKCFlKXJldHVybi0xO2lmKCJ1Ij09PWVbMF0pe2NvbnN0IHQ9ZS5sZW5ndGg7bGV0IHI7aWYoNz09PXQmJiJuIj09PWVbMV0mJiJpIj09PWVbMl0pcj1lLnN1YnN0cmluZygzKTtlbHNle2lmKCEodD49NSYmdDw9NykpcmV0dXJuLTE7cj1lLnN1YnN0cmluZygxKX1pZihyPT09ci50b1VwcGVyQ2FzZSgpKXthPXBhcnNlSW50KHIsMTYpO2lmKGE+PTApcmV0dXJuIGF9fXJldHVybi0xfTt0LmdldFVuaWNvZGVSYW5nZUZvcj1mdW5jdGlvbiBnZXRVbmljb2RlUmFuZ2VGb3IoZSx0PS0xKXtpZigtMSE9PXQpe2NvbnN0IGE9blt0XTtmb3IobGV0IHI9MCxuPWEubGVuZ3RoO3I8bjtyKz0yKWlmKGU+PWFbcl0mJmU8PWFbcisxXSlyZXR1cm4gdH1mb3IobGV0IHQ9MCxhPW4ubGVuZ3RoO3Q8YTt0Kyspe2NvbnN0IGE9blt0XTtmb3IobGV0IHI9MCxuPWEubGVuZ3RoO3I8bjtyKz0yKWlmKGU+PWFbcl0mJmU8PWFbcisxXSlyZXR1cm4gdH1yZXR1cm4tMX07dC5tYXBTcGVjaWFsVW5pY29kZVZhbHVlcz1mdW5jdGlvbiBtYXBTcGVjaWFsVW5pY29kZVZhbHVlcyhlKXtpZihlPj02NTUyMCYmZTw9NjU1MzUpcmV0dXJuIDA7aWYoZT49NjI5NzYmJmU8PTYzNzQzKXJldHVybiByKClbZV18fGU7aWYoMTczPT09ZSlyZXR1cm4gNDU7cmV0dXJuIGV9O2NvbnN0IHI9KDAsYSgzKS5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKChmdW5jdGlvbihlKXtlWzYzNzIxXT0xNjk7ZVs2MzE5M109MTY5O2VbNjM3MjBdPTE3NDtlWzYzMTk0XT0xNzQ7ZVs2MzcyMl09ODQ4MjtlWzYzMTk1XT04NDgyO2VbNjM3MjldPTkxMjc7ZVs2MzczMF09OTEyODtlWzYzNzMxXT05MTI5O2VbNjM3NDBdPTkxMzE7ZVs2Mzc0MV09OTEzMjtlWzYzNzQyXT05MTMzO2VbNjM3MjZdPTkxMjE7ZVs2MzcyN109OTEyMjtlWzYzNzI4XT05MTIzO2VbNjM3MzddPTkxMjQ7ZVs2MzczOF09OTEyNTtlWzYzNzM5XT05MTI2O2VbNjM3MjNdPTkxMTU7ZVs2MzcyNF09OTExNjtlWzYzNzI1XT05MTE3O2VbNjM3MzRdPTkxMTg7ZVs2MzczNV09OTExOTtlWzYzNzM2XT05MTIwfSkpO2NvbnN0IG49W1swLDEyN10sWzEyOCwyNTVdLFsyNTYsMzgzXSxbMzg0LDU5MV0sWzU5Miw2ODcsNzQyNCw3NTUxLDc1NTIsNzYxNV0sWzY4OCw3NjcsNDI3NTIsNDI3ODNdLFs3NjgsODc5LDc2MTYsNzY3OV0sWzg4MCwxMDIzXSxbMTEzOTIsMTE1MTldLFsxMDI0LDEyNzksMTI4MCwxMzI3LDExNzQ0LDExNzc1LDQyNTYwLDQyNjU1XSxbMTMyOCwxNDIzXSxbMTQyNCwxNTM1XSxbNDIyNDAsNDI1NTldLFsxNTM2LDE3OTEsMTg3MiwxOTE5XSxbMTk4NCwyMDQ3XSxbMjMwNCwyNDMxXSxbMjQzMiwyNTU5XSxbMjU2MCwyNjg3XSxbMjY4OCwyODE1XSxbMjgxNiwyOTQzXSxbMjk0NCwzMDcxXSxbMzA3MiwzMTk5XSxbMzIwMCwzMzI3XSxbMzMyOCwzNDU1XSxbMzU4NCwzNzExXSxbMzcxMiwzODM5XSxbNDI1Niw0MzUxLDExNTIwLDExNTY3XSxbNjkxMiw3MDM5XSxbNDM1Miw0NjA3XSxbNzY4MCw3OTM1LDExMzYwLDExMzkxLDQyNzg0LDQzMDA3XSxbNzkzNiw4MTkxXSxbODE5Miw4MzAzLDExNzc2LDExOTAzXSxbODMwNCw4MzUxXSxbODM1Miw4Mzk5XSxbODQwMCw4NDQ3XSxbODQ0OCw4NTI3XSxbODUyOCw4NTkxXSxbODU5Miw4NzAzLDEwMjI0LDEwMjM5LDEwNDk2LDEwNjIzLDExMDA4LDExMjYzXSxbODcwNCw4OTU5LDEwNzUyLDExMDA3LDEwMTc2LDEwMjIzLDEwNjI0LDEwNzUxXSxbODk2MCw5MjE1XSxbOTIxNiw5Mjc5XSxbOTI4MCw5MzExXSxbOTMxMiw5NDcxXSxbOTQ3Miw5NTk5XSxbOTYwMCw5NjMxXSxbOTYzMiw5NzI3XSxbOTcyOCw5OTgzXSxbOTk4NCwxMDE3NV0sWzEyMjg4LDEyMzUxXSxbMTIzNTIsMTI0NDddLFsxMjQ0OCwxMjU0MywxMjc4NCwxMjc5OV0sWzEyNTQ0LDEyNTkxLDEyNzA0LDEyNzM1XSxbMTI1OTIsMTI2ODddLFs0MzA3Miw0MzEzNV0sWzEyODAwLDEzMDU1XSxbMTMwNTYsMTMzMTFdLFs0NDAzMiw1NTIxNV0sWzU1Mjk2LDU3MzQzXSxbNjc4NDAsNjc4NzFdLFsxOTk2OCw0MDk1OSwxMTkwNCwxMjAzMSwxMjAzMiwxMjI1NSwxMjI3MiwxMjI4NywxMzMxMiwxOTkwMywxMzEwNzIsMTczNzkxLDEyNjg4LDEyNzAzXSxbNTczNDQsNjM3NDNdLFsxMjczNiwxMjc4Myw2Mzc0NCw2NDI1NSwxOTQ1NjAsMTk1MTAzXSxbNjQyNTYsNjQzMzVdLFs2NDMzNiw2NTAyM10sWzY1MDU2LDY1MDcxXSxbNjUwNDAsNjUwNTVdLFs2NTEwNCw2NTEzNV0sWzY1MTM2LDY1Mjc5XSxbNjUyODAsNjU1MTldLFs2NTUyMCw2NTUzNV0sWzM4NDAsNDA5NV0sWzE3OTIsMTg3MV0sWzE5MjAsMTk4M10sWzM0NTYsMzU4M10sWzQwOTYsNDI1NV0sWzQ2MDgsNDk5MSw0OTkyLDUwMjMsMTE2NDgsMTE3NDNdLFs1MDI0LDUxMTldLFs1MTIwLDU3NTldLFs1NzYwLDU3OTFdLFs1NzkyLDU4ODddLFs2MDE2LDYxNDNdLFs2MTQ0LDYzMTldLFsxMDI0MCwxMDQ5NV0sWzQwOTYwLDQyMTI3XSxbNTg4OCw1OTE5LDU5MjAsNTk1MSw1OTUyLDU5ODMsNTk4NCw2MDE1XSxbNjYzMDQsNjYzNTFdLFs2NjM1Miw2NjM4M10sWzY2NTYwLDY2NjM5XSxbMTE4Nzg0LDExOTAzOSwxMTkwNDAsMTE5Mjk1LDExOTI5NiwxMTkzNzVdLFsxMTk4MDgsMTIwODMxXSxbMTA0NDQ4MCwxMDQ4NTczXSxbNjUwMjQsNjUwMzksOTE3NzYwLDkxNzk5OV0sWzkxNzUwNCw5MTc2MzFdLFs2NDAwLDY0NzldLFs2NDgwLDY1MjddLFs2NTI4LDY2MjNdLFs2NjU2LDY2ODddLFsxMTI2NCwxMTM1OV0sWzExNTY4LDExNjQ3XSxbMTk5MDQsMTk5NjddLFs0MzAwOCw0MzA1NV0sWzY1NTM2LDY1NjYzLDY1NjY0LDY1NzkxLDY1NzkyLDY1ODU1XSxbNjU4NTYsNjU5MzVdLFs2NjQzMiw2NjQ2M10sWzY2NDY0LDY2NTI3XSxbNjY2NDAsNjY2ODddLFs2NjY4OCw2NjczNV0sWzY3NTg0LDY3NjQ3XSxbNjgwOTYsNjgxOTFdLFsxMTk1NTIsMTE5NjQ3XSxbNzM3MjgsNzQ3NTEsNzQ3NTIsNzQ4NzldLFsxMTk2NDgsMTE5Njc5XSxbNzA0MCw3MTAzXSxbNzE2OCw3MjQ3XSxbNzI0OCw3Mjk1XSxbNDMxMzYsNDMyMzFdLFs0MzI2NCw0MzMxMV0sWzQzMzEyLDQzMzU5XSxbNDM1MjAsNDM2MTVdLFs2NTkzNiw2NTk5OV0sWzY2ZTMsNjYwNDddLFs2NjIwOCw2NjI3MSw2NjE3Niw2NjIwNyw2Nzg3Miw2NzkwM10sWzEyNzAyNCwxMjcxMzUsMTI2OTc2LDEyNzAyM11dO2NvbnN0IGk9bmV3IFJlZ0V4cCgiXihcXHMpfChcXHB7TW59KXwoXFxwe0NmfSkkIiwidSIpLHM9bmV3IE1hcH0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LmdldFNlcmlmRm9udHM9dC5nZXROb25TdGRGb250TWFwPXQuZ2V0R2x5cGhNYXBGb3JTdGFuZGFyZEZvbnRzPXQuZ2V0Rm9udE5hbWVUb0ZpbGVNYXA9dm9pZCAwO3QuZ2V0U3RhbmRhcmRGb250TmFtZT1mdW5jdGlvbiBnZXRTdGFuZGFyZEZvbnROYW1lKGUpe2NvbnN0IHQ9KDAsbi5ub3JtYWxpemVGb250TmFtZSkoZSk7cmV0dXJuIGkoKVt0XX07dC5nZXRTeW1ib2xzRm9udHM9dC5nZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckNhbGlicmk9dC5nZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckFyaWFsQmxhY2s9dC5nZXRTdGRGb250TWFwPXZvaWQgMDt0LmlzS25vd25Gb250TmFtZT1mdW5jdGlvbiBpc0tub3duRm9udE5hbWUoZSl7Y29uc3QgdD0oMCxuLm5vcm1hbGl6ZUZvbnROYW1lKShlKTtyZXR1cm4hIShpKClbdF18fG8oKVt0XXx8YygpW3RdfHxsKClbdF0pfTt2YXIgcj1hKDMpLG49YSgzOCk7Y29uc3QgaT0oMCxyLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoKGZ1bmN0aW9uKGUpe2VbIlRpbWVzLVJvbWFuIl09IlRpbWVzLVJvbWFuIjtlLkhlbHZldGljYT0iSGVsdmV0aWNhIjtlLkNvdXJpZXI9IkNvdXJpZXIiO2UuU3ltYm9sPSJTeW1ib2wiO2VbIlRpbWVzLUJvbGQiXT0iVGltZXMtQm9sZCI7ZVsiSGVsdmV0aWNhLUJvbGQiXT0iSGVsdmV0aWNhLUJvbGQiO2VbIkNvdXJpZXItQm9sZCJdPSJDb3VyaWVyLUJvbGQiO2UuWmFwZkRpbmdiYXRzPSJaYXBmRGluZ2JhdHMiO2VbIlRpbWVzLUl0YWxpYyJdPSJUaW1lcy1JdGFsaWMiO2VbIkhlbHZldGljYS1PYmxpcXVlIl09IkhlbHZldGljYS1PYmxpcXVlIjtlWyJDb3VyaWVyLU9ibGlxdWUiXT0iQ291cmllci1PYmxpcXVlIjtlWyJUaW1lcy1Cb2xkSXRhbGljIl09IlRpbWVzLUJvbGRJdGFsaWMiO2VbIkhlbHZldGljYS1Cb2xkT2JsaXF1ZSJdPSJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiO2VbIkNvdXJpZXItQm9sZE9ibGlxdWUiXT0iQ291cmllci1Cb2xkT2JsaXF1ZSI7ZS5BcmlhbE5hcnJvdz0iSGVsdmV0aWNhIjtlWyJBcmlhbE5hcnJvdy1Cb2xkIl09IkhlbHZldGljYS1Cb2xkIjtlWyJBcmlhbE5hcnJvdy1Cb2xkSXRhbGljIl09IkhlbHZldGljYS1Cb2xkT2JsaXF1ZSI7ZVsiQXJpYWxOYXJyb3ctSXRhbGljIl09IkhlbHZldGljYS1PYmxpcXVlIjtlLkFyaWFsQmxhY2s9IkhlbHZldGljYSI7ZVsiQXJpYWxCbGFjay1Cb2xkIl09IkhlbHZldGljYS1Cb2xkIjtlWyJBcmlhbEJsYWNrLUJvbGRJdGFsaWMiXT0iSGVsdmV0aWNhLUJvbGRPYmxpcXVlIjtlWyJBcmlhbEJsYWNrLUl0YWxpYyJdPSJIZWx2ZXRpY2EtT2JsaXF1ZSI7ZVsiQXJpYWwtQmxhY2siXT0iSGVsdmV0aWNhIjtlWyJBcmlhbC1CbGFjay1Cb2xkIl09IkhlbHZldGljYS1Cb2xkIjtlWyJBcmlhbC1CbGFjay1Cb2xkSXRhbGljIl09IkhlbHZldGljYS1Cb2xkT2JsaXF1ZSI7ZVsiQXJpYWwtQmxhY2stSXRhbGljIl09IkhlbHZldGljYS1PYmxpcXVlIjtlLkFyaWFsPSJIZWx2ZXRpY2EiO2VbIkFyaWFsLUJvbGQiXT0iSGVsdmV0aWNhLUJvbGQiO2VbIkFyaWFsLUJvbGRJdGFsaWMiXT0iSGVsdmV0aWNhLUJvbGRPYmxpcXVlIjtlWyJBcmlhbC1JdGFsaWMiXT0iSGVsdmV0aWNhLU9ibGlxdWUiO2UuQXJpYWxNVD0iSGVsdmV0aWNhIjtlWyJBcmlhbC1Cb2xkSXRhbGljTVQiXT0iSGVsdmV0aWNhLUJvbGRPYmxpcXVlIjtlWyJBcmlhbC1Cb2xkTVQiXT0iSGVsdmV0aWNhLUJvbGQiO2VbIkFyaWFsLUl0YWxpY01UIl09IkhlbHZldGljYS1PYmxpcXVlIjtlWyJBcmlhbC1Cb2xkSXRhbGljTVQtQm9sZEl0YWxpYyJdPSJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiO2VbIkFyaWFsLUJvbGRNVC1Cb2xkIl09IkhlbHZldGljYS1Cb2xkIjtlWyJBcmlhbC1JdGFsaWNNVC1JdGFsaWMiXT0iSGVsdmV0aWNhLU9ibGlxdWUiO2UuQXJpYWxVbmljb2RlTVM9IkhlbHZldGljYSI7ZVsiQXJpYWxVbmljb2RlTVMtQm9sZCJdPSJIZWx2ZXRpY2EtQm9sZCI7ZVsiQXJpYWxVbmljb2RlTVMtQm9sZEl0YWxpYyJdPSJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiO2VbIkFyaWFsVW5pY29kZU1TLUl0YWxpYyJdPSJIZWx2ZXRpY2EtT2JsaXF1ZSI7ZVsiQ291cmllci1Cb2xkSXRhbGljIl09IkNvdXJpZXItQm9sZE9ibGlxdWUiO2VbIkNvdXJpZXItSXRhbGljIl09IkNvdXJpZXItT2JsaXF1ZSI7ZS5Db3VyaWVyTmV3PSJDb3VyaWVyIjtlWyJDb3VyaWVyTmV3LUJvbGQiXT0iQ291cmllci1Cb2xkIjtlWyJDb3VyaWVyTmV3LUJvbGRJdGFsaWMiXT0iQ291cmllci1Cb2xkT2JsaXF1ZSI7ZVsiQ291cmllck5ldy1JdGFsaWMiXT0iQ291cmllci1PYmxpcXVlIjtlWyJDb3VyaWVyTmV3UFMtQm9sZEl0YWxpY01UIl09IkNvdXJpZXItQm9sZE9ibGlxdWUiO2VbIkNvdXJpZXJOZXdQUy1Cb2xkTVQiXT0iQ291cmllci1Cb2xkIjtlWyJDb3VyaWVyTmV3UFMtSXRhbGljTVQiXT0iQ291cmllci1PYmxpcXVlIjtlLkNvdXJpZXJOZXdQU01UPSJDb3VyaWVyIjtlWyJIZWx2ZXRpY2EtQm9sZEl0YWxpYyJdPSJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiO2VbIkhlbHZldGljYS1JdGFsaWMiXT0iSGVsdmV0aWNhLU9ibGlxdWUiO2VbIlN5bWJvbC1Cb2xkIl09IlN5bWJvbCI7ZVsiU3ltYm9sLUJvbGRJdGFsaWMiXT0iU3ltYm9sIjtlWyJTeW1ib2wtSXRhbGljIl09IlN5bWJvbCI7ZS5UaW1lc05ld1JvbWFuPSJUaW1lcy1Sb21hbiI7ZVsiVGltZXNOZXdSb21hbi1Cb2xkIl09IlRpbWVzLUJvbGQiO2VbIlRpbWVzTmV3Um9tYW4tQm9sZEl0YWxpYyJdPSJUaW1lcy1Cb2xkSXRhbGljIjtlWyJUaW1lc05ld1JvbWFuLUl0YWxpYyJdPSJUaW1lcy1JdGFsaWMiO2UuVGltZXNOZXdSb21hblBTPSJUaW1lcy1Sb21hbiI7ZVsiVGltZXNOZXdSb21hblBTLUJvbGQiXT0iVGltZXMtQm9sZCI7ZVsiVGltZXNOZXdSb21hblBTLUJvbGRJdGFsaWMiXT0iVGltZXMtQm9sZEl0YWxpYyI7ZVsiVGltZXNOZXdSb21hblBTLUJvbGRJdGFsaWNNVCJdPSJUaW1lcy1Cb2xkSXRhbGljIjtlWyJUaW1lc05ld1JvbWFuUFMtQm9sZE1UIl09IlRpbWVzLUJvbGQiO2VbIlRpbWVzTmV3Um9tYW5QUy1JdGFsaWMiXT0iVGltZXMtSXRhbGljIjtlWyJUaW1lc05ld1JvbWFuUFMtSXRhbGljTVQiXT0iVGltZXMtSXRhbGljIjtlLlRpbWVzTmV3Um9tYW5QU01UPSJUaW1lcy1Sb21hbiI7ZVsiVGltZXNOZXdSb21hblBTTVQtQm9sZCJdPSJUaW1lcy1Cb2xkIjtlWyJUaW1lc05ld1JvbWFuUFNNVC1Cb2xkSXRhbGljIl09IlRpbWVzLUJvbGRJdGFsaWMiO2VbIlRpbWVzTmV3Um9tYW5QU01ULUl0YWxpYyJdPSJUaW1lcy1JdGFsaWMifSkpO3QuZ2V0U3RkRm9udE1hcD1pO2NvbnN0IHM9KDAsci5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKChmdW5jdGlvbihlKXtlLkNvdXJpZXI9IkZveGl0Rml4ZWQucGZiIjtlWyJDb3VyaWVyLUJvbGQiXT0iRm94aXRGaXhlZEJvbGQucGZiIjtlWyJDb3VyaWVyLUJvbGRPYmxpcXVlIl09IkZveGl0Rml4ZWRCb2xkSXRhbGljLnBmYiI7ZVsiQ291cmllci1PYmxpcXVlIl09IkZveGl0Rml4ZWRJdGFsaWMucGZiIjtlLkhlbHZldGljYT0iTGliZXJhdGlvblNhbnMtUmVndWxhci50dGYiO2VbIkhlbHZldGljYS1Cb2xkIl09IkxpYmVyYXRpb25TYW5zLUJvbGQudHRmIjtlWyJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiXT0iTGliZXJhdGlvblNhbnMtQm9sZEl0YWxpYy50dGYiO2VbIkhlbHZldGljYS1PYmxpcXVlIl09IkxpYmVyYXRpb25TYW5zLUl0YWxpYy50dGYiO2VbIlRpbWVzLVJvbWFuIl09IkZveGl0U2VyaWYucGZiIjtlWyJUaW1lcy1Cb2xkIl09IkZveGl0U2VyaWZCb2xkLnBmYiI7ZVsiVGltZXMtQm9sZEl0YWxpYyJdPSJGb3hpdFNlcmlmQm9sZEl0YWxpYy5wZmIiO2VbIlRpbWVzLUl0YWxpYyJdPSJGb3hpdFNlcmlmSXRhbGljLnBmYiI7ZS5TeW1ib2w9IkZveGl0U3ltYm9sLnBmYiI7ZS5aYXBmRGluZ2JhdHM9IkZveGl0RGluZ2JhdHMucGZiIjtlWyJMaWJlcmF0aW9uU2Fucy1SZWd1bGFyIl09IkxpYmVyYXRpb25TYW5zLVJlZ3VsYXIudHRmIjtlWyJMaWJlcmF0aW9uU2Fucy1Cb2xkIl09IkxpYmVyYXRpb25TYW5zLUJvbGQudHRmIjtlWyJMaWJlcmF0aW9uU2Fucy1JdGFsaWMiXT0iTGliZXJhdGlvblNhbnMtSXRhbGljLnR0ZiI7ZVsiTGliZXJhdGlvblNhbnMtQm9sZEl0YWxpYyJdPSJMaWJlcmF0aW9uU2Fucy1Cb2xkSXRhbGljLnR0ZiJ9KSk7dC5nZXRGb250TmFtZVRvRmlsZU1hcD1zO2NvbnN0IG89KDAsci5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKChmdW5jdGlvbihlKXtlLkNhbGlicmk9IkhlbHZldGljYSI7ZVsiQ2FsaWJyaS1Cb2xkIl09IkhlbHZldGljYS1Cb2xkIjtlWyJDYWxpYnJpLUJvbGRJdGFsaWMiXT0iSGVsdmV0aWNhLUJvbGRPYmxpcXVlIjtlWyJDYWxpYnJpLUl0YWxpYyJdPSJIZWx2ZXRpY2EtT2JsaXF1ZSI7ZS5DZW50dXJ5R290aGljPSJIZWx2ZXRpY2EiO2VbIkNlbnR1cnlHb3RoaWMtQm9sZCJdPSJIZWx2ZXRpY2EtQm9sZCI7ZVsiQ2VudHVyeUdvdGhpYy1Cb2xkSXRhbGljIl09IkhlbHZldGljYS1Cb2xkT2JsaXF1ZSI7ZVsiQ2VudHVyeUdvdGhpYy1JdGFsaWMiXT0iSGVsdmV0aWNhLU9ibGlxdWUiO2UuQ29taWNTYW5zTVM9IkNvbWljIFNhbnMgTVMiO2VbIkNvbWljU2Fuc01TLUJvbGQiXT0iQ29taWMgU2FucyBNUy1Cb2xkIjtlWyJDb21pY1NhbnNNUy1Cb2xkSXRhbGljIl09IkNvbWljIFNhbnMgTVMtQm9sZEl0YWxpYyI7ZVsiQ29taWNTYW5zTVMtSXRhbGljIl09IkNvbWljIFNhbnMgTVMtSXRhbGljIjtlLkltcGFjdD0iSGVsdmV0aWNhIjtlWyJJdGNTeW1ib2wtQm9sZCJdPSJIZWx2ZXRpY2EtQm9sZCI7ZVsiSXRjU3ltYm9sLUJvbGRJdGFsaWMiXT0iSGVsdmV0aWNhLUJvbGRPYmxpcXVlIjtlWyJJdGNTeW1ib2wtQm9vayJdPSJIZWx2ZXRpY2EiO2VbIkl0Y1N5bWJvbC1Cb29rSXRhbGljIl09IkhlbHZldGljYS1PYmxpcXVlIjtlWyJJdGNTeW1ib2wtTWVkaXVtIl09IkhlbHZldGljYSI7ZVsiSXRjU3ltYm9sLU1lZGl1bUl0YWxpYyJdPSJIZWx2ZXRpY2EtT2JsaXF1ZSI7ZS5MdWNpZGFDb25zb2xlPSJDb3VyaWVyIjtlWyJMdWNpZGFDb25zb2xlLUJvbGQiXT0iQ291cmllci1Cb2xkIjtlWyJMdWNpZGFDb25zb2xlLUJvbGRJdGFsaWMiXT0iQ291cmllci1Cb2xkT2JsaXF1ZSI7ZVsiTHVjaWRhQ29uc29sZS1JdGFsaWMiXT0iQ291cmllci1PYmxpcXVlIjtlWyJMdWNpZGFTYW5zLURlbWkiXT0iSGVsdmV0aWNhLUJvbGQiO2VbIk1TLUdvdGhpYyJdPSJNUyBHb3RoaWMiO2VbIk1TLUdvdGhpYy1Cb2xkIl09Ik1TIEdvdGhpYy1Cb2xkIjtlWyJNUy1Hb3RoaWMtQm9sZEl0YWxpYyJdPSJNUyBHb3RoaWMtQm9sZEl0YWxpYyI7ZVsiTVMtR290aGljLUl0YWxpYyJdPSJNUyBHb3RoaWMtSXRhbGljIjtlWyJNUy1NaW5jaG8iXT0iTVMgTWluY2hvIjtlWyJNUy1NaW5jaG8tQm9sZCJdPSJNUyBNaW5jaG8tQm9sZCI7ZVsiTVMtTWluY2hvLUJvbGRJdGFsaWMiXT0iTVMgTWluY2hvLUJvbGRJdGFsaWMiO2VbIk1TLU1pbmNoby1JdGFsaWMiXT0iTVMgTWluY2hvLUl0YWxpYyI7ZVsiTVMtUEdvdGhpYyJdPSJNUyBQR290aGljIjtlWyJNUy1QR290aGljLUJvbGQiXT0iTVMgUEdvdGhpYy1Cb2xkIjtlWyJNUy1QR290aGljLUJvbGRJdGFsaWMiXT0iTVMgUEdvdGhpYy1Cb2xkSXRhbGljIjtlWyJNUy1QR290aGljLUl0YWxpYyJdPSJNUyBQR290aGljLUl0YWxpYyI7ZVsiTVMtUE1pbmNobyJdPSJNUyBQTWluY2hvIjtlWyJNUy1QTWluY2hvLUJvbGQiXT0iTVMgUE1pbmNoby1Cb2xkIjtlWyJNUy1QTWluY2hvLUJvbGRJdGFsaWMiXT0iTVMgUE1pbmNoby1Cb2xkSXRhbGljIjtlWyJNUy1QTWluY2hvLUl0YWxpYyJdPSJNUyBQTWluY2hvLUl0YWxpYyI7ZS5OdXB0aWFsU2NyaXB0PSJUaW1lcy1JdGFsaWMiO2UuU2Vnb2VVSVN5bWJvbD0iSGVsdmV0aWNhIn0pKTt0LmdldE5vblN0ZEZvbnRNYXA9bztjb25zdCBjPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZVsiQWRvYmUgSmVuc29uIl09ITA7ZVsiQWRvYmUgVGV4dCJdPSEwO2UuQWxiZXJ0dXM9ITA7ZS5BbGR1cz0hMDtlLkFsZXhhbmRyaWE9ITA7ZS5BbGdlcmlhbj0hMDtlWyJBbWVyaWNhbiBUeXBld3JpdGVyIl09ITA7ZS5BbnRpcXVhPSEwO2UuQXBleD0hMDtlLkFybm89ITA7ZS5Bc3Rlcj0hMDtlLkF1cm9yYT0hMDtlLkJhc2tlcnZpbGxlPSEwO2UuQmVsbD0hMDtlLkJlbWJvPSEwO2VbIkJlbWJvIFNjaG9vbGJvb2siXT0hMDtlLkJlbmd1aWF0PSEwO2VbIkJlcmtlbGV5IE9sZCBTdHlsZSJdPSEwO2VbIkJlcm5oYXJkIE1vZGVybiJdPSEwO2VbIkJlcnRob2xkIENpdHkiXT0hMDtlLkJvZG9uaT0hMDtlWyJCYXVlciBCb2RvbmkiXT0hMDtlWyJCb29rIEFudGlxdWEiXT0hMDtlLkJvb2ttYW49ITA7ZVsiQm9yZGVhdXggUm9tYW4iXT0hMDtlWyJDYWxpZm9ybmlhbiBGQiJdPSEwO2UuQ2FsaXN0bz0hMDtlLkNhbHZlcnQ9ITA7ZS5DYXBpdGFscz0hMDtlLkNhbWJyaWE9ITA7ZS5DYXJ0aWVyPSEwO2UuQ2FzbG9uPSEwO2UuQ2F0dWxsPSEwO2UuQ2VudGF1cj0hMDtlWyJDZW50dXJ5IE9sZCBTdHlsZSJdPSEwO2VbIkNlbnR1cnkgU2Nob29sYm9vayJdPSEwO2UuQ2hhcGFycmFsPSEwO2VbIkNoYXJpcyBTSUwiXT0hMDtlLkNoZWx0ZW5oYW09ITA7ZVsiQ2hvbGxhIFNsYWIiXT0hMDtlLkNsYXJlbmRvbj0hMDtlLkNsZWFyZmFjZT0hMDtlLkNvY2hpbj0hMDtlLkNvbG9ubmE9ITA7ZVsiQ29tcHV0ZXIgTW9kZXJuIl09ITA7ZVsiQ29uY3JldGUgUm9tYW4iXT0hMDtlLkNvbnN0YW50aWE9ITA7ZVsiQ29vcGVyIEJsYWNrIl09ITA7ZS5Db3JvbmE9ITA7ZS5FY290eXBlPSEwO2UuRWd5cHRpZW5uZT0hMDtlLkVsZXBoYW50PSEwO2UuRXhjZWxzaW9yPSEwO2UuRmFpcmZpZWxkPSEwO2VbIkZGIFNjYWxhIl09ITA7ZS5Gb2xrYXJkPSEwO2UuRm9vdGxpZ2h0PSEwO2UuRnJlZVNlcmlmPSEwO2VbIkZyaXogUXVhZHJhdGEiXT0hMDtlLkdhcmFtb25kPSEwO2UuR2VudGl1bT0hMDtlLkdlb3JnaWE9ITA7ZS5HbG91Y2VzdGVyPSEwO2VbIkdvdWR5IE9sZCBTdHlsZSJdPSEwO2VbIkdvdWR5IFNjaG9vbGJvb2siXT0hMDtlWyJHb3VkeSBQcm8gRm9udCJdPSEwO2UuR3Jhbmpvbj0hMDtlWyJHdWFyZGlhbiBFZ3lwdGlhbiJdPSEwO2UuSGVhdGhlcj0hMDtlLkhlcmN1bGVzPSEwO2VbIkhpZ2ggVG93ZXIgVGV4dCJdPSEwO2UuSGlyb3NoaWdlPSEwO2VbIkhvZWZsZXIgVGV4dCJdPSEwO2VbIkh1bWFuYSBTZXJpZiJdPSEwO2UuSW1wcmludD0hMDtlWyJJb25pYyBOby4gNSJdPSEwO2UuSmFuc29uPSEwO2UuSm9hbm5hPSEwO2UuS29yaW5uYT0hMDtlLkxleGljb249ITA7ZS5MaWJlcmF0aW9uU2VyaWY9ITA7ZVsiTGliZXJhdGlvbiBTZXJpZiJdPSEwO2VbIkxpbnV4IExpYmVydGluZSJdPSEwO2UuTGl0ZXJhdHVybmF5YT0hMDtlLkx1Y2lkYT0hMDtlWyJMdWNpZGEgQnJpZ2h0Il09ITA7ZS5NZWxpb3I9ITA7ZS5NZW1waGlzPSEwO2UuTWlsbGVyPSEwO2UuTWluaW9uPSEwO2UuTW9kZXJuPSEwO2VbIk1vbmEgTGlzYSJdPSEwO2VbIk1ycyBFYXZlcyJdPSEwO2VbIk1TIFNlcmlmIl09ITA7ZVsiTXVzZW8gU2xhYiJdPSEwO2VbIk5ldyBZb3JrIl09ITA7ZVsiTmltYnVzIFJvbWFuIl09ITA7ZVsiTlBTIFJhd2xpbnNvbiBSb2Fkd2F5Il09ITA7ZS5OdXB0aWFsU2NyaXB0PSEwO2UuUGFsYXRpbm89ITA7ZS5QZXJwZXR1YT0hMDtlLlBsYW50aW49ITA7ZVsiUGxhbnRpbiBTY2hvb2xib29rIl09ITA7ZS5QbGF5YmlsbD0hMDtlWyJQb29yIFJpY2hhcmQiXT0hMDtlWyJSYXdsaW5zb24gUm9hZHdheSJdPSEwO2UuUmVuYXVsdD0hMDtlLlJlcXVpZW09ITA7ZS5Sb2Nrd2VsbD0hMDtlLlJvbWFuPSEwO2VbIlJvdGlzIFNlcmlmIl09ITA7ZS5TYWJvbj0hMDtlLlNjYWxhPSEwO2UuU2VhZ3VsbD0hMDtlLlNpc3RpbmE9ITA7ZS5Tb3V2ZW5pcj0hMDtlLlNUSVg9ITA7ZVsiU3RvbmUgSW5mb3JtYWwiXT0hMDtlWyJTdG9uZSBTZXJpZiJdPSEwO2UuU3lsZmFlbj0hMDtlLlRpbWVzPSEwO2UuVHJhamFuPSEwO2VbIlRyaW5pdMOpIl09ITA7ZVsiVHJ1bXAgTWVkaWFldmFsIl09ITA7ZS5VdG9waWE9ITA7ZVsiVmFsZSBUeXBlIl09ITA7ZVsiQml0c3RyZWFtIFZlcmEiXT0hMDtlWyJWZXJhIFNlcmlmIl09ITA7ZS5WZXJzYWlsbGVzPSEwO2UuV2FudGVkPSEwO2UuV2Vpc3M9ITA7ZVsiV2lkZSBMYXRpbiJdPSEwO2UuV2luZHNvcj0hMDtlLlhJVFM9ITB9KSk7dC5nZXRTZXJpZkZvbnRzPWM7Y29uc3QgbD0oMCxyLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoKGZ1bmN0aW9uKGUpe2UuRGluZ2JhdHM9ITA7ZS5TeW1ib2w9ITA7ZS5aYXBmRGluZ2JhdHM9ITA7ZS5XaW5nZGluZ3M9ITA7ZVsiV2luZ2RpbmdzLUJvbGQiXT0hMDtlWyJXaW5nZGluZ3MtUmVndWxhciJdPSEwfSkpO3QuZ2V0U3ltYm9sc0ZvbnRzPWw7Y29uc3QgaD0oMCxyLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoKGZ1bmN0aW9uKGUpe2VbMl09MTA7ZVszXT0zMjtlWzRdPTMzO2VbNV09MzQ7ZVs2XT0zNTtlWzddPTM2O2VbOF09Mzc7ZVs5XT0zODtlWzEwXT0zOTtlWzExXT00MDtlWzEyXT00MTtlWzEzXT00MjtlWzE0XT00MztlWzE1XT00NDtlWzE2XT00NTtlWzE3XT00NjtlWzE4XT00NztlWzE5XT00ODtlWzIwXT00OTtlWzIxXT01MDtlWzIyXT01MTtlWzIzXT01MjtlWzI0XT01MztlWzI1XT01NDtlWzI2XT01NTtlWzI3XT01NjtlWzI4XT01NztlWzI5XT01ODtlWzMwXT04OTQ7ZVszMV09NjA7ZVszMl09NjE7ZVszM109NjI7ZVszNF09NjM7ZVszNV09NjQ7ZVszNl09NjU7ZVszN109NjY7ZVszOF09Njc7ZVszOV09Njg7ZVs0MF09Njk7ZVs0MV09NzA7ZVs0Ml09NzE7ZVs0M109NzI7ZVs0NF09NzM7ZVs0NV09NzQ7ZVs0Nl09NzU7ZVs0N109NzY7ZVs0OF09Nzc7ZVs0OV09Nzg7ZVs1MF09Nzk7ZVs1MV09ODA7ZVs1Ml09ODE7ZVs1M109ODI7ZVs1NF09ODM7ZVs1NV09ODQ7ZVs1Nl09ODU7ZVs1N109ODY7ZVs1OF09ODc7ZVs1OV09ODg7ZVs2MF09ODk7ZVs2MV09OTA7ZVs2Ml09OTE7ZVs2M109OTI7ZVs2NF09OTM7ZVs2NV09OTQ7ZVs2Nl09OTU7ZVs2N109OTY7ZVs2OF09OTc7ZVs2OV09OTg7ZVs3MF09OTk7ZVs3MV09MTAwO2VbNzJdPTEwMTtlWzczXT0xMDI7ZVs3NF09MTAzO2VbNzVdPTEwNDtlWzc2XT0xMDU7ZVs3N109MTA2O2VbNzhdPTEwNztlWzc5XT0xMDg7ZVs4MF09MTA5O2VbODFdPTExMDtlWzgyXT0xMTE7ZVs4M109MTEyO2VbODRdPTExMztlWzg1XT0xMTQ7ZVs4Nl09MTE1O2VbODddPTExNjtlWzg4XT0xMTc7ZVs4OV09MTE4O2VbOTBdPTExOTtlWzkxXT0xMjA7ZVs5Ml09MTIxO2VbOTNdPTEyMjtlWzk0XT0xMjM7ZVs5NV09MTI0O2VbOTZdPTEyNTtlWzk3XT0xMjY7ZVs5OF09MTk2O2VbOTldPTE5NztlWzEwMF09MTk5O2VbMTAxXT0yMDE7ZVsxMDJdPTIwOTtlWzEwM109MjE0O2VbMTA0XT0yMjA7ZVsxMDVdPTIyNTtlWzEwNl09MjI0O2VbMTA3XT0yMjY7ZVsxMDhdPTIyODtlWzEwOV09MjI3O2VbMTEwXT0yMjk7ZVsxMTFdPTIzMTtlWzExMl09MjMzO2VbMTEzXT0yMzI7ZVsxMTRdPTIzNDtlWzExNV09MjM1O2VbMTE2XT0yMzc7ZVsxMTddPTIzNjtlWzExOF09MjM4O2VbMTE5XT0yMzk7ZVsxMjBdPTI0MTtlWzEyMV09MjQzO2VbMTIyXT0yNDI7ZVsxMjNdPTI0NDtlWzEyNF09MjQ2O2VbMTI1XT0yNDU7ZVsxMjZdPTI1MDtlWzEyN109MjQ5O2VbMTI4XT0yNTE7ZVsxMjldPTI1MjtlWzEzMF09ODIyNDtlWzEzMV09MTc2O2VbMTMyXT0xNjI7ZVsxMzNdPTE2MztlWzEzNF09MTY3O2VbMTM1XT04MjI2O2VbMTM2XT0xODI7ZVsxMzddPTIyMztlWzEzOF09MTc0O2VbMTM5XT0xNjk7ZVsxNDBdPTg0ODI7ZVsxNDFdPTE4MDtlWzE0Ml09MTY4O2VbMTQzXT04ODAwO2VbMTQ0XT0xOTg7ZVsxNDVdPTIxNjtlWzE0Nl09ODczNDtlWzE0N109MTc3O2VbMTQ4XT04ODA0O2VbMTQ5XT04ODA1O2VbMTUwXT0xNjU7ZVsxNTFdPTE4MTtlWzE1Ml09ODcwNjtlWzE1M109ODcyMTtlWzE1NF09ODcxOTtlWzE1Nl09ODc0NztlWzE1N109MTcwO2VbMTU4XT0xODY7ZVsxNTldPTg0ODY7ZVsxNjBdPTIzMDtlWzE2MV09MjQ4O2VbMTYyXT0xOTE7ZVsxNjNdPTE2MTtlWzE2NF09MTcyO2VbMTY1XT04NzMwO2VbMTY2XT00MDI7ZVsxNjddPTg3NzY7ZVsxNjhdPTg3MTA7ZVsxNjldPTE3MTtlWzE3MF09MTg3O2VbMTcxXT04MjMwO2VbMTc5XT04MjIwO2VbMTgwXT04MjIxO2VbMTgxXT04MjE2O2VbMTgyXT04MjE3O2VbMjAwXT0xOTM7ZVsyMDNdPTIwNTtlWzIwN109MjExO2VbMjEwXT0yMTg7ZVsyMjNdPTcxMTtlWzIyNF09MzIxO2VbMjI1XT0zMjI7ZVsyMjZdPTM1MjtlWzIyN109MzUzO2VbMjI4XT0zODE7ZVsyMjldPTM4MjtlWzIzM109MjIxO2VbMjM0XT0yNTM7ZVsyNTJdPTI2MztlWzI1M109MjY4O2VbMjU0XT0yNjk7ZVsyNThdPTI1ODtlWzI2MF09MjYwO2VbMjYxXT0yNjE7ZVsyNjVdPTI4MDtlWzI2Nl09MjgxO2VbMjY3XT0yODI7ZVsyNjhdPTI4MztlWzI2OV09MzEzO2VbMjc1XT0zMjM7ZVsyNzZdPTMyNDtlWzI3OF09MzI4O2VbMjgzXT0zNDQ7ZVsyODRdPTM0NTtlWzI4NV09MzQ2O2VbMjg2XT0zNDc7ZVsyOTJdPTM2NztlWzI5NV09Mzc3O2VbMjk2XT0zNzg7ZVsyOThdPTM4MDtlWzMwNV09OTYzO2VbMzA2XT05NjQ7ZVszMDddPTk2NjtlWzMwOF09ODIxNTtlWzMwOV09ODI1MjtlWzMxMF09ODMxOTtlWzMxMV09ODM1OTtlWzMxMl09ODU5MjtlWzMxM109ODU5MztlWzMzN109OTU1MjtlWzQ5M109MTAzOTtlWzQ5NF09MTA0MDtlWzY3Ml09MTQ4ODtlWzY3M109MTQ4OTtlWzY3NF09MTQ5MDtlWzY3NV09MTQ5MTtlWzY3Nl09MTQ5MjtlWzY3N109MTQ5MztlWzY3OF09MTQ5NDtlWzY3OV09MTQ5NTtlWzY4MF09MTQ5NjtlWzY4MV09MTQ5NztlWzY4Ml09MTQ5ODtlWzY4M109MTQ5OTtlWzY4NF09MTUwMDtlWzY4NV09MTUwMTtlWzY4Nl09MTUwMjtlWzY4N109MTUwMztlWzY4OF09MTUwNDtlWzY4OV09MTUwNTtlWzY5MF09MTUwNjtlWzY5MV09MTUwNztlWzY5Ml09MTUwODtlWzY5M109MTUwOTtlWzY5NF09MTUxMDtlWzY5NV09MTUxMTtlWzY5Nl09MTUxMjtlWzY5N109MTUxMztlWzY5OF09MTUxNDtlWzcwNV09MTUyNDtlWzcwNl09ODM2MjtlWzcxMF09NjQyODg7ZVs3MTFdPTY0Mjk4O2VbNzU5XT0xNjE3O2VbNzYxXT0xNzc2O2VbNzYzXT0xNzc4O2VbNzc1XT0xNjUyO2VbNzc3XT0xNzY0O2VbNzc4XT0xNzgwO2VbNzc5XT0xNzgxO2VbNzgwXT0xNzgyO2VbNzgyXT03NzE7ZVs3ODNdPTY0NzI2O2VbNzg2XT04MzYzO2VbNzg4XT04NTMyO2VbNzkwXT03Njg7ZVs3OTFdPTc2OTtlWzc5Ml09NzY4O2VbNzk1XT04MDM7ZVs3OTddPTY0MzM2O2VbNzk4XT02NDMzNztlWzc5OV09NjQzNDI7ZVs4MDBdPTY0MzQzO2VbODAxXT02NDM0NDtlWzgwMl09NjQzNDU7ZVs4MDNdPTY0MzYyO2VbODA0XT02NDM2MztlWzgwNV09NjQzNjQ7ZVsyNDI0XT03ODIxO2VbMjQyNV09NzgyMjtlWzI0MjZdPTc4MjM7ZVsyNDI3XT03ODI0O2VbMjQyOF09NzgyNTtlWzI0MjldPTc4MjY7ZVsyNDMwXT03ODI3O2VbMjQzM109NzY4MjtlWzI2NzhdPTgwNDU7ZVsyNjc5XT04MDQ2O2VbMjgzMF09MTU1MjtlWzI4MzhdPTY4NjtlWzI4NDBdPTc1MTtlWzI4NDJdPTc1MztlWzI4NDNdPTc1NDtlWzI4NDRdPTc1NTtlWzI4NDZdPTc1NztlWzI4NTZdPTc2NztlWzI4NTddPTg0ODtlWzI4NThdPTg0OTtlWzI4NjJdPTg1MztlWzI4NjNdPTg1NDtlWzI4NjRdPTg1NTtlWzI4NjVdPTg2MTtlWzI4NjZdPTg2MjtlWzI5MDZdPTc0NjA7ZVsyOTA4XT03NDYyO2VbMjkwOV09NzQ2MztlWzI5MTBdPTc0NjQ7ZVsyOTEyXT03NDY2O2VbMjkxM109NzQ2NztlWzI5MTRdPTc0Njg7ZVsyOTE2XT03NDcwO2VbMjkxN109NzQ3MTtlWzI5MThdPTc0NzI7ZVsyOTIwXT03NDc0O2VbMjkyMV09NzQ3NTtlWzI5MjJdPTc0NzY7ZVsyOTI0XT03NDc4O2VbMjkyNV09NzQ3OTtlWzI5MjZdPTc0ODA7ZVsyOTI4XT03NDgyO2VbMjkyOV09NzQ4MztlWzI5MzBdPTc0ODQ7ZVsyOTMyXT03NDg2O2VbMjkzM109NzQ4NztlWzI5MzRdPTc0ODg7ZVsyOTM2XT03NDkwO2VbMjkzN109NzQ5MTtlWzI5MzhdPTc0OTI7ZVsyOTQwXT03NDk0O2VbMjk0MV09NzQ5NTtlWzI5NDJdPTc0OTY7ZVsyOTQ0XT03NDk4O2VbMjk0Nl09NzUwMDtlWzI5NDhdPTc1MDI7ZVsyOTUwXT03NTA0O2VbMjk1MV09NzUwNTtlWzI5NTJdPTc1MDY7ZVsyOTU0XT03NTA4O2VbMjk1NV09NzUwOTtlWzI5NTZdPTc1MTA7ZVsyOTU4XT03NTEyO2VbMjk1OV09NzUxMztlWzI5NjBdPTc1MTQ7ZVsyOTYyXT03NTE2O2VbMjk2M109NzUxNztlWzI5NjRdPTc1MTg7ZVsyOTY2XT03NTIwO2VbMjk2N109NzUyMTtlWzI5NjhdPTc1MjI7ZVsyOTcwXT03NTI0O2VbMjk3MV09NzUyNTtlWzI5NzJdPTc1MjY7ZVsyOTc0XT03NTI4O2VbMjk3NV09NzUyOTtlWzI5NzZdPTc1MzA7ZVsyOTc4XT0xNTM3O2VbMjk3OV09MTUzODtlWzI5ODBdPTE1Mzk7ZVsyOTgyXT0xNTQ5O2VbMjk4M109MTU1MTtlWzI5ODRdPTE1NTI7ZVsyOTg2XT0xNTU0O2VbMjk4N109MTU1NTtlWzI5ODhdPTE1NTY7ZVsyOTkwXT0xNjIzO2VbMjk5MV09MTYyNDtlWzI5OTVdPTE3NzU7ZVsyOTk5XT0xNzkxO2VbMzAwMl09NjQyOTA7ZVszMDAzXT02NDI5MTtlWzMwMDRdPTY0MjkyO2VbMzAwNl09NjQyOTQ7ZVszMDA3XT02NDI5NTtlWzMwMDhdPTY0Mjk2O2VbMzAxMV09MTkwMDtlWzMwMTRdPTgyMjM7ZVszMDE1XT04MjQ0O2VbMzAxN109NzUzMjtlWzMwMThdPTc1MzM7ZVszMDE5XT03NTM0O2VbMzA3NV09NzU5MDtlWzMwNzZdPTc1OTE7ZVszMDc5XT03NTk0O2VbMzA4MF09NzU5NTtlWzMwODNdPTc1OTg7ZVszMDg0XT03NTk5O2VbMzA4N109NzYwMjtlWzMwODhdPTc2MDM7ZVszMDkxXT03NjA2O2VbMzA5Ml09NzYwNztlWzMwOTVdPTc2MTA7ZVszMDk2XT03NjExO2VbMzA5OV09NzYxNDtlWzMxMDBdPTc2MTU7ZVszMTAzXT03NjE4O2VbMzEwNF09NzYxOTtlWzMxMDddPTgzMzc7ZVszMTA4XT04MzM4O2VbMzExNl09MTg4NDtlWzMxMTldPTE4ODU7ZVszMTIwXT0xODg1O2VbMzEyM109MTg4NjtlWzMxMjRdPTE4ODY7ZVszMTI3XT0xODg3O2VbMzEyOF09MTg4NztlWzMxMzFdPTE4ODg7ZVszMTMyXT0xODg4O2VbMzEzNV09MTg4OTtlWzMxMzZdPTE4ODk7ZVszMTM5XT0xODkwO2VbMzE0MF09MTg5MDtlWzMxNDNdPTE4OTE7ZVszMTQ0XT0xODkxO2VbMzE0N109MTg5MjtlWzMxNDhdPTE4OTI7ZVszMTUzXT01ODA7ZVszMTU0XT01ODE7ZVszMTU3XT01ODQ7ZVszMTU4XT01ODU7ZVszMTYxXT01ODg7ZVszMTYyXT01ODk7ZVszMTY1XT04OTE7ZVszMTY2XT04OTI7ZVszMTY5XT0xMjc0O2VbMzE3MF09MTI3NTtlWzMxNzNdPTEyNzg7ZVszMTc0XT0xMjc5O2VbMzE4MV09NzYyMjtlWzMxODJdPTc2MjM7ZVszMjgyXT0xMTc5OTtlWzMzMTZdPTU3ODtlWzMzNzldPTQyNzg1O2VbMzM5M109MTE1OTtlWzM0MTZdPTgzNzd9KSk7dC5nZXRHbHlwaE1hcEZvclN0YW5kYXJkRm9udHM9aDtjb25zdCB1PSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZVsyMjddPTMyMjtlWzI2NF09MjYxO2VbMjkxXT0zNDZ9KSk7dC5nZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckFyaWFsQmxhY2s9dTtjb25zdCBkPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZVsxXT0zMjtlWzRdPTY1O2VbNV09MTkyO2VbNl09MTkzO2VbOV09MTk2O2VbMTddPTY2O2VbMThdPTY3O2VbMjFdPTI2ODtlWzI0XT02ODtlWzI4XT02OTtlWzI5XT0yMDA7ZVszMF09MjAxO2VbMzJdPTI4MjtlWzM4XT03MDtlWzM5XT03MTtlWzQ0XT03MjtlWzQ3XT03MztlWzQ4XT0yMDQ7ZVs0OV09MjA1O2VbNThdPTc0O2VbNjBdPTc1O2VbNjJdPTc2O2VbNjhdPTc3O2VbNjldPTc4O2VbNzVdPTc5O2VbNzZdPTIxMDtlWzgwXT0yMTQ7ZVs4N109ODA7ZVs4OV09ODE7ZVs5MF09ODI7ZVs5Ml09MzQ0O2VbOTRdPTgzO2VbOTddPTM1MjtlWzEwMF09ODQ7ZVsxMDRdPTg1O2VbMTA5XT0yMjA7ZVsxMTVdPTg2O2VbMTE2XT04NztlWzEyMV09ODg7ZVsxMjJdPTg5O2VbMTI0XT0yMjE7ZVsxMjddPTkwO2VbMTI5XT0zODE7ZVsyNThdPTk3O2VbMjU5XT0yMjQ7ZVsyNjBdPTIyNTtlWzI2M109MjI4O2VbMjY4XT0yNjE7ZVsyNzFdPTk4O2VbMjcyXT05OTtlWzI3M109MjYzO2VbMjc1XT0yNjk7ZVsyODJdPTEwMDtlWzI4Nl09MTAxO2VbMjg3XT0yMzI7ZVsyODhdPTIzMztlWzI5MF09MjgzO2VbMjk1XT0yODE7ZVsyOTZdPTEwMjtlWzMzNl09MTAzO2VbMzQ2XT0xMDQ7ZVszNDldPTEwNTtlWzM1MF09MjM2O2VbMzUxXT0yMzc7ZVszNjFdPTEwNjtlWzM2NF09MTA3O2VbMzY3XT0xMDg7ZVszNzFdPTMyMjtlWzM3M109MTA5O2VbMzc0XT0xMTA7ZVszODFdPTExMTtlWzM4Ml09MjQyO2VbMzgzXT0yNDM7ZVszODZdPTI0NjtlWzM5M109MTEyO2VbMzk1XT0xMTM7ZVszOTZdPTExNDtlWzM5OF09MzQ1O2VbNDAwXT0xMTU7ZVs0MDFdPTM0NztlWzQwM109MzUzO2VbNDEwXT0xMTY7ZVs0MzddPTExNztlWzQ0Ml09MjUyO2VbNDQ4XT0xMTg7ZVs0NDldPTExOTtlWzQ1NF09MTIwO2VbNDU1XT0xMjE7ZVs0NTddPTI1MztlWzQ2MF09MTIyO2VbNDYyXT0zODI7ZVs0NjNdPTM4MDtlWzg1M109NDQ7ZVs4NTVdPTU4O2VbODU2XT00NjtlWzg3Nl09NDc7ZVs4NzhdPTQ1O2VbODgyXT00NTtlWzg5NF09NDA7ZVs4OTVdPTQxO2VbODk2XT05MTtlWzg5N109OTM7ZVs5MjNdPTY0O2VbMTAwNF09NDg7ZVsxMDA1XT00OTtlWzEwMDZdPTUwO2VbMTAwN109NTE7ZVsxMDA4XT01MjtlWzEwMDldPTUzO2VbMTAxMF09NTQ7ZVsxMDExXT01NTtlWzEwMTJdPTU2O2VbMTAxM109NTc7ZVsxMDgxXT0zNztlWzEwODVdPTQzO2VbMTA4Nl09NDV9KSk7dC5nZXRTdXBwbGVtZW50YWxHbHlwaE1hcEZvckNhbGlicmk9ZH0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlRvVW5pY29kZU1hcD10LklkZW50aXR5VG9Vbmljb2RlTWFwPXZvaWQgMDt2YXIgcj1hKDIpO3QuVG9Vbmljb2RlTWFwPWNsYXNzIFRvVW5pY29kZU1hcHtjb25zdHJ1Y3RvcihlPVtdKXt0aGlzLl9tYXA9ZX1nZXQgbGVuZ3RoKCl7cmV0dXJuIHRoaXMuX21hcC5sZW5ndGh9Zm9yRWFjaChlKXtmb3IoY29uc3QgdCBpbiB0aGlzLl9tYXApZSh0LHRoaXMuX21hcFt0XS5jaGFyQ29kZUF0KDApKX1oYXMoZSl7cmV0dXJuIHZvaWQgMCE9PXRoaXMuX21hcFtlXX1nZXQoZSl7cmV0dXJuIHRoaXMuX21hcFtlXX1jaGFyQ29kZU9mKGUpe2NvbnN0IHQ9dGhpcy5fbWFwO2lmKHQubGVuZ3RoPD02NTUzNilyZXR1cm4gdC5pbmRleE9mKGUpO2Zvcihjb25zdCBhIGluIHQpaWYodFthXT09PWUpcmV0dXJuIDB8YTtyZXR1cm4tMX1hbWVuZChlKXtmb3IoY29uc3QgdCBpbiBlKXRoaXMuX21hcFt0XT1lW3RdfX07dC5JZGVudGl0eVRvVW5pY29kZU1hcD1jbGFzcyBJZGVudGl0eVRvVW5pY29kZU1hcHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuZmlyc3RDaGFyPWU7dGhpcy5sYXN0Q2hhcj10fWdldCBsZW5ndGgoKXtyZXR1cm4gdGhpcy5sYXN0Q2hhcisxLXRoaXMuZmlyc3RDaGFyfWZvckVhY2goZSl7Zm9yKGxldCB0PXRoaXMuZmlyc3RDaGFyLGE9dGhpcy5sYXN0Q2hhcjt0PD1hO3QrKyllKHQsdCl9aGFzKGUpe3JldHVybiB0aGlzLmZpcnN0Q2hhcjw9ZSYmZTw9dGhpcy5sYXN0Q2hhcn1nZXQoZSl7aWYodGhpcy5maXJzdENoYXI8PWUmJmU8PXRoaXMubGFzdENoYXIpcmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoZSl9Y2hhckNvZGVPZihlKXtyZXR1cm4gTnVtYmVyLmlzSW50ZWdlcihlKSYmZT49dGhpcy5maXJzdENoYXImJmU8PXRoaXMubGFzdENoYXI/ZTotMX1hbWVuZChlKXsoMCxyLnVucmVhY2hhYmxlKSgiU2hvdWxkIG5vdCBjYWxsIGFtZW5kKCkiKX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuQ0ZGRm9udD12b2lkIDA7dmFyIHI9YSgzNSksbj1hKDM4KSxpPWEoMik7dC5DRkZGb250PWNsYXNzIENGRkZvbnR7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnByb3BlcnRpZXM9dDtjb25zdCBhPW5ldyByLkNGRlBhcnNlcihlLHQsbi5TRUFDX0FOQUxZU0lTX0VOQUJMRUQpO3RoaXMuY2ZmPWEucGFyc2UoKTt0aGlzLmNmZi5kdXBsaWNhdGVGaXJzdEdseXBoKCk7Y29uc3Qgcz1uZXcgci5DRkZDb21waWxlcih0aGlzLmNmZik7dGhpcy5zZWFjcz10aGlzLmNmZi5zZWFjczt0cnl7dGhpcy5kYXRhPXMuY29tcGlsZSgpfWNhdGNoeygwLGkud2FybikoIkZhaWxlZCB0byBjb21waWxlIGZvbnQgIit0LmxvYWRlZE5hbWUpO3RoaXMuZGF0YT1lfXRoaXMuX2NyZWF0ZUJ1aWx0SW5FbmNvZGluZygpfWdldCBudW1HbHlwaHMoKXtyZXR1cm4gdGhpcy5jZmYuY2hhclN0cmluZ3MuY291bnR9Z2V0Q2hhcnNldCgpe3JldHVybiB0aGlzLmNmZi5jaGFyc2V0LmNoYXJzZXR9Z2V0R2x5cGhNYXBwaW5nKCl7Y29uc3QgZT10aGlzLmNmZix0PXRoaXMucHJvcGVydGllcyx7Y2lkVG9HaWRNYXA6YSxjTWFwOnJ9PXQsaT1lLmNoYXJzZXQuY2hhcnNldDtsZXQgcyxvO2lmKHQuY29tcG9zaXRlKXtsZXQgdCxuO2lmKGE/Lmxlbmd0aD4wKXt0PU9iamVjdC5jcmVhdGUobnVsbCk7Zm9yKGxldCBlPTAscj1hLmxlbmd0aDtlPHI7ZSsrKXtjb25zdCByPWFbZV07dm9pZCAwIT09ciYmKHRbcl09ZSl9fXM9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihlLmlzQ0lERm9udClmb3Iobz0wO288aS5sZW5ndGg7bysrKXtjb25zdCBlPWlbb107bj1yLmNoYXJDb2RlT2YoZSk7dm9pZCAwIT09dD8uW25dJiYobj10W25dKTtzW25dPW99ZWxzZSBmb3Iobz0wO288ZS5jaGFyU3RyaW5ncy5jb3VudDtvKyspe249ci5jaGFyQ29kZU9mKG8pO3Nbbl09b31yZXR1cm4gc31sZXQgYz1lLmVuY29kaW5nP2UuZW5jb2RpbmcuZW5jb2Rpbmc6bnVsbDt0LmlzSW50ZXJuYWxGb250JiYoYz10LmRlZmF1bHRFbmNvZGluZyk7cz0oMCxuLnR5cGUxRm9udEdseXBoTWFwcGluZykodCxjLGkpO3JldHVybiBzfWhhc0dseXBoSWQoZSl7cmV0dXJuIHRoaXMuY2ZmLmhhc0dseXBoSWQoZSl9X2NyZWF0ZUJ1aWx0SW5FbmNvZGluZygpe2NvbnN0e2NoYXJzZXQ6ZSxlbmNvZGluZzp0fT10aGlzLmNmZjtpZighZXx8IXQpcmV0dXJuO2NvbnN0IGE9ZS5jaGFyc2V0LHI9dC5lbmNvZGluZyxuPVtdO2Zvcihjb25zdCBlIGluIHIpe2NvbnN0IHQ9cltlXTtpZih0Pj0wKXtjb25zdCByPWFbdF07ciYmKG5bZV09cil9fW4ubGVuZ3RoPjAmJih0aGlzLnByb3BlcnRpZXMuYnVpbHRJbkVuY29kaW5nPW4pfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5Gb250UmVuZGVyZXJGYWN0b3J5PXZvaWQgMDt2YXIgcj1hKDIpLG49YSgzNSksaT1hKDM5KSxzPWEoMzcpLG89YSg4KTtmdW5jdGlvbiBnZXRVaW50MzIoZSx0KXtyZXR1cm4oZVt0XTw8MjR8ZVt0KzFdPDwxNnxlW3QrMl08PDh8ZVt0KzNdKT4+PjB9ZnVuY3Rpb24gZ2V0VWludDE2KGUsdCl7cmV0dXJuIGVbdF08PDh8ZVt0KzFdfWZ1bmN0aW9uIGdldEludDE2KGUsdCl7cmV0dXJuKGVbdF08PDI0fGVbdCsxXTw8MTYpPj4xNn1mdW5jdGlvbiBnZXRJbnQ4KGUsdCl7cmV0dXJuIGVbdF08PDI0Pj4yNH1mdW5jdGlvbiBnZXRGbG9hdDIxNChlLHQpe3JldHVybiBnZXRJbnQxNihlLHQpLzE2Mzg0fWZ1bmN0aW9uIGdldFN1YnJvdXRpbmVCaWFzKGUpe2NvbnN0IHQ9ZS5sZW5ndGg7bGV0IGE9MzI3Njg7dDwxMjQwP2E9MTA3OnQ8MzM5MDAmJihhPTExMzEpO3JldHVybiBhfWZ1bmN0aW9uIHBhcnNlQ21hcChlLHQsYSl7Y29uc3Qgbj0xPT09Z2V0VWludDE2KGUsdCsyKT9nZXRVaW50MzIoZSx0KzgpOmdldFVpbnQzMihlLHQrMTYpLGk9Z2V0VWludDE2KGUsdCtuKTtsZXQgcyxvLGM7aWYoND09PWkpe2dldFVpbnQxNihlLHQrbisyKTtjb25zdCBhPWdldFVpbnQxNihlLHQrbis2KT4+MTtvPXQrbisxNDtzPVtdO2ZvcihjPTA7YzxhO2MrKyxvKz0yKXNbY109e2VuZDpnZXRVaW50MTYoZSxvKX07bys9Mjtmb3IoYz0wO2M8YTtjKyssbys9MilzW2NdLnN0YXJ0PWdldFVpbnQxNihlLG8pO2ZvcihjPTA7YzxhO2MrKyxvKz0yKXNbY10uaWREZWx0YT1nZXRVaW50MTYoZSxvKTtmb3IoYz0wO2M8YTtjKyssbys9Mil7bGV0IHQ9Z2V0VWludDE2KGUsbyk7aWYoMCE9PXQpe3NbY10uaWRzPVtdO2ZvcihsZXQgYT0wLHI9c1tjXS5lbmQtc1tjXS5zdGFydCsxO2E8cjthKyspe3NbY10uaWRzW2FdPWdldFVpbnQxNihlLG8rdCk7dCs9Mn19fXJldHVybiBzfWlmKDEyPT09aSl7Y29uc3QgYT1nZXRVaW50MzIoZSx0K24rMTIpO289dCtuKzE2O3M9W107Zm9yKGM9MDtjPGE7YysrKXt0PWdldFVpbnQzMihlLG8pO3MucHVzaCh7c3RhcnQ6dCxlbmQ6Z2V0VWludDMyKGUsbys0KSxpZERlbHRhOmdldFVpbnQzMihlLG8rOCktdH0pO28rPTEyfXJldHVybiBzfXRocm93IG5ldyByLkZvcm1hdEVycm9yKGB1bnN1cHBvcnRlZCBjbWFwOiAke2l9YCl9ZnVuY3Rpb24gcGFyc2VDZmYoZSx0LGEscil7Y29uc3QgaT1uZXcgbi5DRkZQYXJzZXIobmV3IG8uU3RyZWFtKGUsdCxhLXQpLHt9LHIpLnBhcnNlKCk7cmV0dXJue2dseXBoczppLmNoYXJTdHJpbmdzLm9iamVjdHMsc3VicnM6aS50b3BEaWN0LnByaXZhdGVEaWN0Py5zdWJyc0luZGV4Py5vYmplY3RzLGdzdWJyczppLmdsb2JhbFN1YnJJbmRleD8ub2JqZWN0cyxpc0NGRkNJREZvbnQ6aS5pc0NJREZvbnQsZmRTZWxlY3Q6aS5mZFNlbGVjdCxmZEFycmF5OmkuZmRBcnJheX19ZnVuY3Rpb24gbG9va3VwQ21hcChlLHQpe2NvbnN0IGE9dC5jb2RlUG9pbnRBdCgwKTtsZXQgcj0wLG49MCxpPWUubGVuZ3RoLTE7Zm9yKDtuPGk7KXtjb25zdCB0PW4raSsxPj4xO2E8ZVt0XS5zdGFydD9pPXQtMTpuPXR9ZVtuXS5zdGFydDw9YSYmYTw9ZVtuXS5lbmQmJihyPWVbbl0uaWREZWx0YSsoZVtuXS5pZHM/ZVtuXS5pZHNbYS1lW25dLnN0YXJ0XTphKSY2NTUzNSk7cmV0dXJue2NoYXJDb2RlOmEsZ2x5cGhJZDpyfX1mdW5jdGlvbiBjb21waWxlR2x5ZihlLHQsYSl7ZnVuY3Rpb24gbW92ZVRvKGUsYSl7dC5wdXNoKHtjbWQ6Im1vdmVUbyIsYXJnczpbZSxhXX0pfWZ1bmN0aW9uIGxpbmVUbyhlLGEpe3QucHVzaCh7Y21kOiJsaW5lVG8iLGFyZ3M6W2UsYV19KX1mdW5jdGlvbiBxdWFkcmF0aWNDdXJ2ZVRvKGUsYSxyLG4pe3QucHVzaCh7Y21kOiJxdWFkcmF0aWNDdXJ2ZVRvIixhcmdzOltlLGEscixuXX0pfWxldCByPTA7Y29uc3Qgbj1nZXRJbnQxNihlLHIpO2xldCBpLHM9MCxvPTA7cis9MTA7aWYobjwwKWRve2k9Z2V0VWludDE2KGUscik7Y29uc3Qgbj1nZXRVaW50MTYoZSxyKzIpO3IrPTQ7bGV0IGMsbDtpZigxJmkpe2lmKDImaSl7Yz1nZXRJbnQxNihlLHIpO2w9Z2V0SW50MTYoZSxyKzIpfWVsc2V7Yz1nZXRVaW50MTYoZSxyKTtsPWdldFVpbnQxNihlLHIrMil9cis9NH1lbHNlIGlmKDImaSl7Yz1nZXRJbnQ4KGUscisrKTtsPWdldEludDgoZSxyKyspfWVsc2V7Yz1lW3IrK107bD1lW3IrK119aWYoMiZpKXtzPWM7bz1sfWVsc2V7cz0wO289MH1sZXQgaD0xLHU9MSxkPTAsZj0wO2lmKDgmaSl7aD11PWdldEZsb2F0MjE0KGUscik7cis9Mn1lbHNlIGlmKDY0Jmkpe2g9Z2V0RmxvYXQyMTQoZSxyKTt1PWdldEZsb2F0MjE0KGUscisyKTtyKz00fWVsc2UgaWYoMTI4Jmkpe2g9Z2V0RmxvYXQyMTQoZSxyKTtkPWdldEZsb2F0MjE0KGUscisyKTtmPWdldEZsb2F0MjE0KGUscis0KTt1PWdldEZsb2F0MjE0KGUscis2KTtyKz04fWNvbnN0IGc9YS5nbHlwaHNbbl07aWYoZyl7dC5wdXNoKHtjbWQ6InNhdmUifSx7Y21kOiJ0cmFuc2Zvcm0iLGFyZ3M6W2gsZCxmLHUscyxvXX0pO2NvbXBpbGVHbHlmKGcsdCxhKTt0LnB1c2goe2NtZDoicmVzdG9yZSJ9KX19d2hpbGUoMzImaSk7ZWxzZXtjb25zdCB0PVtdO2xldCBhLGM7Zm9yKGE9MDthPG47YSsrKXt0LnB1c2goZ2V0VWludDE2KGUscikpO3IrPTJ9cis9MitnZXRVaW50MTYoZSxyKTtjb25zdCBsPXQuYXQoLTEpKzEsaD1bXTtmb3IoO2gubGVuZ3RoPGw7KXtpPWVbcisrXTtsZXQgdD0xOzgmaSYmKHQrPWVbcisrXSk7Zm9yKDt0LS0gPjA7KWgucHVzaCh7ZmxhZ3M6aX0pfWZvcihhPTA7YTxsO2ErKyl7c3dpdGNoKDE4JmhbYV0uZmxhZ3Mpe2Nhc2UgMDpzKz1nZXRJbnQxNihlLHIpO3IrPTI7YnJlYWs7Y2FzZSAyOnMtPWVbcisrXTticmVhaztjYXNlIDE4OnMrPWVbcisrXX1oW2FdLng9c31mb3IoYT0wO2E8bDthKyspe3N3aXRjaCgzNiZoW2FdLmZsYWdzKXtjYXNlIDA6bys9Z2V0SW50MTYoZSxyKTtyKz0yO2JyZWFrO2Nhc2UgNDpvLT1lW3IrK107YnJlYWs7Y2FzZSAzNjpvKz1lW3IrK119aFthXS55PW99bGV0IHU9MDtmb3Iocj0wO3I8bjtyKyspe2NvbnN0IGU9dFtyXSxuPWguc2xpY2UodSxlKzEpO2lmKDEmblswXS5mbGFncyluLnB1c2goblswXSk7ZWxzZSBpZigxJm4uYXQoLTEpLmZsYWdzKW4udW5zaGlmdChuLmF0KC0xKSk7ZWxzZXtjb25zdCBlPXtmbGFnczoxLHg6KG5bMF0ueCtuLmF0KC0xKS54KS8yLHk6KG5bMF0ueStuLmF0KC0xKS55KS8yfTtuLnVuc2hpZnQoZSk7bi5wdXNoKGUpfW1vdmVUbyhuWzBdLngsblswXS55KTtmb3IoYT0xLGM9bi5sZW5ndGg7YTxjO2ErKylpZigxJm5bYV0uZmxhZ3MpbGluZVRvKG5bYV0ueCxuW2FdLnkpO2Vsc2UgaWYoMSZuW2ErMV0uZmxhZ3Mpe3F1YWRyYXRpY0N1cnZlVG8oblthXS54LG5bYV0ueSxuW2ErMV0ueCxuW2ErMV0ueSk7YSsrfWVsc2UgcXVhZHJhdGljQ3VydmVUbyhuW2FdLngsblthXS55LChuW2FdLngrblthKzFdLngpLzIsKG5bYV0ueStuW2ErMV0ueSkvMik7dT1lKzF9fX1mdW5jdGlvbiBjb21waWxlQ2hhclN0cmluZyhlLHQsYSxuKXtmdW5jdGlvbiBtb3ZlVG8oZSxhKXt0LnB1c2goe2NtZDoibW92ZVRvIixhcmdzOltlLGFdfSl9ZnVuY3Rpb24gbGluZVRvKGUsYSl7dC5wdXNoKHtjbWQ6ImxpbmVUbyIsYXJnczpbZSxhXX0pfWZ1bmN0aW9uIGJlemllckN1cnZlVG8oZSxhLHIsbixpLHMpe3QucHVzaCh7Y21kOiJiZXppZXJDdXJ2ZVRvIixhcmdzOltlLGEscixuLGksc119KX1jb25zdCBpPVtdO2xldCBvPTAsYz0wLGw9MDshZnVuY3Rpb24gcGFyc2UoZSl7bGV0IGg9MDtmb3IoO2g8ZS5sZW5ndGg7KXtsZXQgdSxkLGYsZyxwLG0sYix5LHcsUz0hMSx4PWVbaCsrXTtzd2l0Y2goeCl7Y2FzZSAxOmNhc2UgMzpjYXNlIDE4OmNhc2UgMjM6bCs9aS5sZW5ndGg+PjE7Uz0hMDticmVhaztjYXNlIDQ6Yys9aS5wb3AoKTttb3ZlVG8obyxjKTtTPSEwO2JyZWFrO2Nhc2UgNTpmb3IoO2kubGVuZ3RoPjA7KXtvKz1pLnNoaWZ0KCk7Yys9aS5zaGlmdCgpO2xpbmVUbyhvLGMpfWJyZWFrO2Nhc2UgNjpmb3IoO2kubGVuZ3RoPjA7KXtvKz1pLnNoaWZ0KCk7bGluZVRvKG8sYyk7aWYoMD09PWkubGVuZ3RoKWJyZWFrO2MrPWkuc2hpZnQoKTtsaW5lVG8obyxjKX1icmVhaztjYXNlIDc6Zm9yKDtpLmxlbmd0aD4wOyl7Yys9aS5zaGlmdCgpO2xpbmVUbyhvLGMpO2lmKDA9PT1pLmxlbmd0aClicmVhaztvKz1pLnNoaWZ0KCk7bGluZVRvKG8sYyl9YnJlYWs7Y2FzZSA4OmZvcig7aS5sZW5ndGg+MDspe3U9bytpLnNoaWZ0KCk7Zj1jK2kuc2hpZnQoKTtkPXUraS5zaGlmdCgpO2c9ZitpLnNoaWZ0KCk7bz1kK2kuc2hpZnQoKTtjPWcraS5zaGlmdCgpO2JlemllckN1cnZlVG8odSxmLGQsZyxvLGMpfWJyZWFrO2Nhc2UgMTA6eT1pLnBvcCgpO3c9bnVsbDtpZihhLmlzQ0ZGQ0lERm9udCl7Y29uc3QgZT1hLmZkU2VsZWN0LmdldEZESW5kZXgobik7aWYoZT49MCYmZTxhLmZkQXJyYXkubGVuZ3RoKXtjb25zdCB0PWEuZmRBcnJheVtlXTtsZXQgcjt0LnByaXZhdGVEaWN0Py5zdWJyc0luZGV4JiYocj10LnByaXZhdGVEaWN0LnN1YnJzSW5kZXgub2JqZWN0cyk7aWYocil7eSs9Z2V0U3Vicm91dGluZUJpYXMocik7dz1yW3ldfX1lbHNlKDAsci53YXJuKSgiSW52YWxpZCBmZCBpbmRleCBmb3IgZ2x5cGggaW5kZXguIil9ZWxzZSB3PWEuc3VicnNbeSthLnN1YnJzQmlhc107dyYmcGFyc2Uodyk7YnJlYWs7Y2FzZSAxMTpyZXR1cm47Y2FzZSAxMjp4PWVbaCsrXTtzd2l0Y2goeCl7Y2FzZSAzNDp1PW8raS5zaGlmdCgpO2Q9dStpLnNoaWZ0KCk7cD1jK2kuc2hpZnQoKTtvPWQraS5zaGlmdCgpO2JlemllckN1cnZlVG8odSxjLGQscCxvLHApO3U9bytpLnNoaWZ0KCk7ZD11K2kuc2hpZnQoKTtvPWQraS5zaGlmdCgpO2JlemllckN1cnZlVG8odSxwLGQsYyxvLGMpO2JyZWFrO2Nhc2UgMzU6dT1vK2kuc2hpZnQoKTtmPWMraS5zaGlmdCgpO2Q9dStpLnNoaWZ0KCk7Zz1mK2kuc2hpZnQoKTtvPWQraS5zaGlmdCgpO2M9ZytpLnNoaWZ0KCk7YmV6aWVyQ3VydmVUbyh1LGYsZCxnLG8sYyk7dT1vK2kuc2hpZnQoKTtmPWMraS5zaGlmdCgpO2Q9dStpLnNoaWZ0KCk7Zz1mK2kuc2hpZnQoKTtvPWQraS5zaGlmdCgpO2M9ZytpLnNoaWZ0KCk7YmV6aWVyQ3VydmVUbyh1LGYsZCxnLG8sYyk7aS5wb3AoKTticmVhaztjYXNlIDM2OnU9bytpLnNoaWZ0KCk7cD1jK2kuc2hpZnQoKTtkPXUraS5zaGlmdCgpO209cCtpLnNoaWZ0KCk7bz1kK2kuc2hpZnQoKTtiZXppZXJDdXJ2ZVRvKHUscCxkLG0sbyxtKTt1PW8raS5zaGlmdCgpO2Q9dStpLnNoaWZ0KCk7Yj1tK2kuc2hpZnQoKTtvPWQraS5zaGlmdCgpO2JlemllckN1cnZlVG8odSxtLGQsYixvLGMpO2JyZWFrO2Nhc2UgMzc6Y29uc3QgZT1vLHQ9Yzt1PW8raS5zaGlmdCgpO2Y9YytpLnNoaWZ0KCk7ZD11K2kuc2hpZnQoKTtnPWYraS5zaGlmdCgpO289ZCtpLnNoaWZ0KCk7Yz1nK2kuc2hpZnQoKTtiZXppZXJDdXJ2ZVRvKHUsZixkLGcsbyxjKTt1PW8raS5zaGlmdCgpO2Y9YytpLnNoaWZ0KCk7ZD11K2kuc2hpZnQoKTtnPWYraS5zaGlmdCgpO289ZDtjPWc7TWF0aC5hYnMoby1lKT5NYXRoLmFicyhjLXQpP28rPWkuc2hpZnQoKTpjKz1pLnNoaWZ0KCk7YmV6aWVyQ3VydmVUbyh1LGYsZCxnLG8sYyk7YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgdW5rbm93biBvcGVyYXRvcjogMTIgJHt4fWApfWJyZWFrO2Nhc2UgMTQ6aWYoaS5sZW5ndGg+PTQpe2NvbnN0IGU9aS5wb3AoKSxyPWkucG9wKCk7Yz1pLnBvcCgpO289aS5wb3AoKTt0LnB1c2goe2NtZDoic2F2ZSJ9LHtjbWQ6InRyYW5zbGF0ZSIsYXJnczpbbyxjXX0pO2xldCBuPWxvb2t1cENtYXAoYS5jbWFwLFN0cmluZy5mcm9tQ2hhckNvZGUoYS5nbHlwaE5hbWVNYXBbcy5TdGFuZGFyZEVuY29kaW5nW2VdXSkpO2NvbXBpbGVDaGFyU3RyaW5nKGEuZ2x5cGhzW24uZ2x5cGhJZF0sdCxhLG4uZ2x5cGhJZCk7dC5wdXNoKHtjbWQ6InJlc3RvcmUifSk7bj1sb29rdXBDbWFwKGEuY21hcCxTdHJpbmcuZnJvbUNoYXJDb2RlKGEuZ2x5cGhOYW1lTWFwW3MuU3RhbmRhcmRFbmNvZGluZ1tyXV0pKTtjb21waWxlQ2hhclN0cmluZyhhLmdseXBoc1tuLmdseXBoSWRdLHQsYSxuLmdseXBoSWQpfXJldHVybjtjYXNlIDE5OmNhc2UgMjA6bCs9aS5sZW5ndGg+PjE7aCs9bCs3Pj4zO1M9ITA7YnJlYWs7Y2FzZSAyMTpjKz1pLnBvcCgpO28rPWkucG9wKCk7bW92ZVRvKG8sYyk7Uz0hMDticmVhaztjYXNlIDIyOm8rPWkucG9wKCk7bW92ZVRvKG8sYyk7Uz0hMDticmVhaztjYXNlIDI0OmZvcig7aS5sZW5ndGg+Mjspe3U9bytpLnNoaWZ0KCk7Zj1jK2kuc2hpZnQoKTtkPXUraS5zaGlmdCgpO2c9ZitpLnNoaWZ0KCk7bz1kK2kuc2hpZnQoKTtjPWcraS5zaGlmdCgpO2JlemllckN1cnZlVG8odSxmLGQsZyxvLGMpfW8rPWkuc2hpZnQoKTtjKz1pLnNoaWZ0KCk7bGluZVRvKG8sYyk7YnJlYWs7Y2FzZSAyNTpmb3IoO2kubGVuZ3RoPjY7KXtvKz1pLnNoaWZ0KCk7Yys9aS5zaGlmdCgpO2xpbmVUbyhvLGMpfXU9bytpLnNoaWZ0KCk7Zj1jK2kuc2hpZnQoKTtkPXUraS5zaGlmdCgpO2c9ZitpLnNoaWZ0KCk7bz1kK2kuc2hpZnQoKTtjPWcraS5zaGlmdCgpO2JlemllckN1cnZlVG8odSxmLGQsZyxvLGMpO2JyZWFrO2Nhc2UgMjY6aS5sZW5ndGglMiYmKG8rPWkuc2hpZnQoKSk7Zm9yKDtpLmxlbmd0aD4wOyl7dT1vO2Y9YytpLnNoaWZ0KCk7ZD11K2kuc2hpZnQoKTtnPWYraS5zaGlmdCgpO289ZDtjPWcraS5zaGlmdCgpO2JlemllckN1cnZlVG8odSxmLGQsZyxvLGMpfWJyZWFrO2Nhc2UgMjc6aS5sZW5ndGglMiYmKGMrPWkuc2hpZnQoKSk7Zm9yKDtpLmxlbmd0aD4wOyl7dT1vK2kuc2hpZnQoKTtmPWM7ZD11K2kuc2hpZnQoKTtnPWYraS5zaGlmdCgpO289ZCtpLnNoaWZ0KCk7Yz1nO2JlemllckN1cnZlVG8odSxmLGQsZyxvLGMpfWJyZWFrO2Nhc2UgMjg6aS5wdXNoKChlW2hdPDwyNHxlW2grMV08PDE2KT4+MTYpO2grPTI7YnJlYWs7Y2FzZSAyOTp5PWkucG9wKCkrYS5nc3VicnNCaWFzO3c9YS5nc3VicnNbeV07dyYmcGFyc2Uodyk7YnJlYWs7Y2FzZSAzMDpmb3IoO2kubGVuZ3RoPjA7KXt1PW87Zj1jK2kuc2hpZnQoKTtkPXUraS5zaGlmdCgpO2c9ZitpLnNoaWZ0KCk7bz1kK2kuc2hpZnQoKTtjPWcrKDE9PT1pLmxlbmd0aD9pLnNoaWZ0KCk6MCk7YmV6aWVyQ3VydmVUbyh1LGYsZCxnLG8sYyk7aWYoMD09PWkubGVuZ3RoKWJyZWFrO3U9bytpLnNoaWZ0KCk7Zj1jO2Q9dStpLnNoaWZ0KCk7Zz1mK2kuc2hpZnQoKTtjPWcraS5zaGlmdCgpO289ZCsoMT09PWkubGVuZ3RoP2kuc2hpZnQoKTowKTtiZXppZXJDdXJ2ZVRvKHUsZixkLGcsbyxjKX1icmVhaztjYXNlIDMxOmZvcig7aS5sZW5ndGg+MDspe3U9bytpLnNoaWZ0KCk7Zj1jO2Q9dStpLnNoaWZ0KCk7Zz1mK2kuc2hpZnQoKTtjPWcraS5zaGlmdCgpO289ZCsoMT09PWkubGVuZ3RoP2kuc2hpZnQoKTowKTtiZXppZXJDdXJ2ZVRvKHUsZixkLGcsbyxjKTtpZigwPT09aS5sZW5ndGgpYnJlYWs7dT1vO2Y9YytpLnNoaWZ0KCk7ZD11K2kuc2hpZnQoKTtnPWYraS5zaGlmdCgpO289ZCtpLnNoaWZ0KCk7Yz1nKygxPT09aS5sZW5ndGg/aS5zaGlmdCgpOjApO2JlemllckN1cnZlVG8odSxmLGQsZyxvLGMpfWJyZWFrO2RlZmF1bHQ6aWYoeDwzMil0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgdW5rbm93biBvcGVyYXRvcjogJHt4fWApO2lmKHg8MjQ3KWkucHVzaCh4LTEzOSk7ZWxzZSBpZih4PDI1MSlpLnB1c2goMjU2Kih4LTI0NykrZVtoKytdKzEwOCk7ZWxzZSBpZih4PDI1NSlpLnB1c2goMjU2Ki0oeC0yNTEpLWVbaCsrXS0xMDgpO2Vsc2V7aS5wdXNoKChlW2hdPDwyNHxlW2grMV08PDE2fGVbaCsyXTw8OHxlW2grM10pLzY1NTM2KTtoKz00fX1TJiYoaS5sZW5ndGg9MCl9fShlKX1jb25zdCBjPVtdO2NsYXNzIENvbXBpbGVkRm9udHtjb25zdHJ1Y3RvcihlKXt0aGlzLmNvbnN0cnVjdG9yPT09Q29tcGlsZWRGb250JiYoMCxyLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgQ29tcGlsZWRGb250LiIpO3RoaXMuZm9udE1hdHJpeD1lO3RoaXMuY29tcGlsZWRHbHlwaHM9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLmNvbXBpbGVkQ2hhckNvZGVUb0dseXBoSWQ9T2JqZWN0LmNyZWF0ZShudWxsKX1nZXRQYXRoSnMoZSl7Y29uc3R7Y2hhckNvZGU6dCxnbHlwaElkOmF9PWxvb2t1cENtYXAodGhpcy5jbWFwLGUpO2xldCByPXRoaXMuY29tcGlsZWRHbHlwaHNbYV07aWYoIXIpdHJ5e3I9dGhpcy5jb21waWxlR2x5cGgodGhpcy5nbHlwaHNbYV0sYSk7dGhpcy5jb21waWxlZEdseXBoc1thXT1yfWNhdGNoKGUpe3RoaXMuY29tcGlsZWRHbHlwaHNbYV09Yzt2b2lkIDA9PT10aGlzLmNvbXBpbGVkQ2hhckNvZGVUb0dseXBoSWRbdF0mJih0aGlzLmNvbXBpbGVkQ2hhckNvZGVUb0dseXBoSWRbdF09YSk7dGhyb3cgZX12b2lkIDA9PT10aGlzLmNvbXBpbGVkQ2hhckNvZGVUb0dseXBoSWRbdF0mJih0aGlzLmNvbXBpbGVkQ2hhckNvZGVUb0dseXBoSWRbdF09YSk7cmV0dXJuIHJ9Y29tcGlsZUdseXBoKGUsdCl7aWYoIWV8fDA9PT1lLmxlbmd0aHx8MTQ9PT1lWzBdKXJldHVybiBjO2xldCBhPXRoaXMuZm9udE1hdHJpeDtpZih0aGlzLmlzQ0ZGQ0lERm9udCl7Y29uc3QgZT10aGlzLmZkU2VsZWN0LmdldEZESW5kZXgodCk7aWYoZT49MCYmZTx0aGlzLmZkQXJyYXkubGVuZ3RoKXthPXRoaXMuZmRBcnJheVtlXS5nZXRCeU5hbWUoIkZvbnRNYXRyaXgiKXx8ci5GT05UX0lERU5USVRZX01BVFJJWH1lbHNlKDAsci53YXJuKSgiSW52YWxpZCBmZCBpbmRleCBmb3IgZ2x5cGggaW5kZXguIil9Y29uc3Qgbj1be2NtZDoic2F2ZSJ9LHtjbWQ6InRyYW5zZm9ybSIsYXJnczphLnNsaWNlKCl9LHtjbWQ6InNjYWxlIixhcmdzOlsic2l6ZSIsIi1zaXplIl19XTt0aGlzLmNvbXBpbGVHbHlwaEltcGwoZSxuLHQpO24ucHVzaCh7Y21kOiJyZXN0b3JlIn0pO3JldHVybiBufWNvbXBpbGVHbHlwaEltcGwoKXsoMCxyLnVucmVhY2hhYmxlKSgiQ2hpbGRyZW4gY2xhc3NlcyBzaG91bGQgaW1wbGVtZW50IHRoaXMuIil9aGFzQnVpbHRQYXRoKGUpe2NvbnN0e2NoYXJDb2RlOnQsZ2x5cGhJZDphfT1sb29rdXBDbWFwKHRoaXMuY21hcCxlKTtyZXR1cm4gdm9pZCAwIT09dGhpcy5jb21waWxlZEdseXBoc1thXSYmdm9pZCAwIT09dGhpcy5jb21waWxlZENoYXJDb2RlVG9HbHlwaElkW3RdfX1jbGFzcyBUcnVlVHlwZUNvbXBpbGVkIGV4dGVuZHMgQ29tcGlsZWRGb250e2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcihhfHxbNDg4ZS02LDAsMCw0ODhlLTYsMCwwXSk7dGhpcy5nbHlwaHM9ZTt0aGlzLmNtYXA9dH1jb21waWxlR2x5cGhJbXBsKGUsdCl7Y29tcGlsZUdseWYoZSx0LHRoaXMpfX1jbGFzcyBUeXBlMkNvbXBpbGVkIGV4dGVuZHMgQ29tcGlsZWRGb250e2NvbnN0cnVjdG9yKGUsdCxhLHIpe3N1cGVyKGF8fFsuMDAxLDAsMCwuMDAxLDAsMF0pO3RoaXMuZ2x5cGhzPWUuZ2x5cGhzO3RoaXMuZ3N1YnJzPWUuZ3N1YnJzfHxbXTt0aGlzLnN1YnJzPWUuc3VicnN8fFtdO3RoaXMuY21hcD10O3RoaXMuZ2x5cGhOYW1lTWFwPXJ8fCgwLGkuZ2V0R2x5cGhzVW5pY29kZSkoKTt0aGlzLmdzdWJyc0JpYXM9Z2V0U3Vicm91dGluZUJpYXModGhpcy5nc3VicnMpO3RoaXMuc3VicnNCaWFzPWdldFN1YnJvdXRpbmVCaWFzKHRoaXMuc3VicnMpO3RoaXMuaXNDRkZDSURGb250PWUuaXNDRkZDSURGb250O3RoaXMuZmRTZWxlY3Q9ZS5mZFNlbGVjdDt0aGlzLmZkQXJyYXk9ZS5mZEFycmF5fWNvbXBpbGVHbHlwaEltcGwoZSx0LGEpe2NvbXBpbGVDaGFyU3RyaW5nKGUsdCx0aGlzLGEpfX10LkZvbnRSZW5kZXJlckZhY3Rvcnk9Y2xhc3MgRm9udFJlbmRlcmVyRmFjdG9yeXtzdGF0aWMgY3JlYXRlKGUsdCl7Y29uc3QgYT1uZXcgVWludDhBcnJheShlLmRhdGEpO2xldCBuLGkscyxvLGMsbDtjb25zdCBoPWdldFVpbnQxNihhLDQpO2ZvcihsZXQgZT0wLHU9MTI7ZTxoO2UrKyx1Kz0xNil7Y29uc3QgZT0oMCxyLmJ5dGVzVG9TdHJpbmcpKGEuc3ViYXJyYXkodSx1KzQpKSxoPWdldFVpbnQzMihhLHUrOCksZD1nZXRVaW50MzIoYSx1KzEyKTtzd2l0Y2goZSl7Y2FzZSJjbWFwIjpuPXBhcnNlQ21hcChhLGgpO2JyZWFrO2Nhc2UiZ2x5ZiI6aT1hLnN1YmFycmF5KGgsaCtkKTticmVhaztjYXNlImxvY2EiOnM9YS5zdWJhcnJheShoLGgrZCk7YnJlYWs7Y2FzZSJoZWFkIjpsPWdldFVpbnQxNihhLGgrMTgpO2M9Z2V0VWludDE2KGEsaCs1MCk7YnJlYWs7Y2FzZSJDRkYgIjpvPXBhcnNlQ2ZmKGEsaCxoK2QsdCl9fWlmKGkpe2NvbnN0IHQ9bD9bMS9sLDAsMCwxL2wsMCwwXTplLmZvbnRNYXRyaXg7cmV0dXJuIG5ldyBUcnVlVHlwZUNvbXBpbGVkKGZ1bmN0aW9uIHBhcnNlR2x5ZlRhYmxlKGUsdCxhKXtsZXQgcixuO2lmKGEpe3I9NDtuPWdldFVpbnQzMn1lbHNle3I9MjtuPShlLHQpPT4yKmdldFVpbnQxNihlLHQpfWNvbnN0IGk9W107bGV0IHM9bih0LDApO2ZvcihsZXQgYT1yO2E8dC5sZW5ndGg7YSs9cil7Y29uc3Qgcj1uKHQsYSk7aS5wdXNoKGUuc3ViYXJyYXkocyxyKSk7cz1yfXJldHVybiBpfShpLHMsYyksbix0KX1yZXR1cm4gbmV3IFR5cGUyQ29tcGlsZWQobyxuLGUuZm9udE1hdHJpeCxlLmdseXBoTmFtZU1hcCl9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LmdldE1ldHJpY3M9dC5nZXRGb250QmFzaWNNZXRyaWNzPXZvaWQgMDt2YXIgcj1hKDMpO2NvbnN0IG49KDAsci5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKChmdW5jdGlvbihlKXtlLkNvdXJpZXI9NjAwO2VbIkNvdXJpZXItQm9sZCJdPTYwMDtlWyJDb3VyaWVyLUJvbGRPYmxpcXVlIl09NjAwO2VbIkNvdXJpZXItT2JsaXF1ZSJdPTYwMDtlLkhlbHZldGljYT0oMCxyLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoKGZ1bmN0aW9uKGUpe2Uuc3BhY2U9Mjc4O2UuZXhjbGFtPTI3ODtlLnF1b3RlZGJsPTM1NTtlLm51bWJlcnNpZ249NTU2O2UuZG9sbGFyPTU1NjtlLnBlcmNlbnQ9ODg5O2UuYW1wZXJzYW5kPTY2NztlLnF1b3RlcmlnaHQ9MjIyO2UucGFyZW5sZWZ0PTMzMztlLnBhcmVucmlnaHQ9MzMzO2UuYXN0ZXJpc2s9Mzg5O2UucGx1cz01ODQ7ZS5jb21tYT0yNzg7ZS5oeXBoZW49MzMzO2UucGVyaW9kPTI3ODtlLnNsYXNoPTI3ODtlLnplcm89NTU2O2Uub25lPTU1NjtlLnR3bz01NTY7ZS50aHJlZT01NTY7ZS5mb3VyPTU1NjtlLmZpdmU9NTU2O2Uuc2l4PTU1NjtlLnNldmVuPTU1NjtlLmVpZ2h0PTU1NjtlLm5pbmU9NTU2O2UuY29sb249Mjc4O2Uuc2VtaWNvbG9uPTI3ODtlLmxlc3M9NTg0O2UuZXF1YWw9NTg0O2UuZ3JlYXRlcj01ODQ7ZS5xdWVzdGlvbj01NTY7ZS5hdD0xMDE1O2UuQT02Njc7ZS5CPTY2NztlLkM9NzIyO2UuRD03MjI7ZS5FPTY2NztlLkY9NjExO2UuRz03Nzg7ZS5IPTcyMjtlLkk9Mjc4O2UuSj01MDA7ZS5LPTY2NztlLkw9NTU2O2UuTT04MzM7ZS5OPTcyMjtlLk89Nzc4O2UuUD02Njc7ZS5RPTc3ODtlLlI9NzIyO2UuUz02Njc7ZS5UPTYxMTtlLlU9NzIyO2UuVj02Njc7ZS5XPTk0NDtlLlg9NjY3O2UuWT02Njc7ZS5aPTYxMTtlLmJyYWNrZXRsZWZ0PTI3ODtlLmJhY2tzbGFzaD0yNzg7ZS5icmFja2V0cmlnaHQ9Mjc4O2UuYXNjaWljaXJjdW09NDY5O2UudW5kZXJzY29yZT01NTY7ZS5xdW90ZWxlZnQ9MjIyO2UuYT01NTY7ZS5iPTU1NjtlLmM9NTAwO2UuZD01NTY7ZS5lPTU1NjtlLmY9Mjc4O2UuZz01NTY7ZS5oPTU1NjtlLmk9MjIyO2Uuaj0yMjI7ZS5rPTUwMDtlLmw9MjIyO2UubT04MzM7ZS5uPTU1NjtlLm89NTU2O2UucD01NTY7ZS5xPTU1NjtlLnI9MzMzO2Uucz01MDA7ZS50PTI3ODtlLnU9NTU2O2Uudj01MDA7ZS53PTcyMjtlLng9NTAwO2UueT01MDA7ZS56PTUwMDtlLmJyYWNlbGVmdD0zMzQ7ZS5iYXI9MjYwO2UuYnJhY2VyaWdodD0zMzQ7ZS5hc2NpaXRpbGRlPTU4NDtlLmV4Y2xhbWRvd249MzMzO2UuY2VudD01NTY7ZS5zdGVybGluZz01NTY7ZS5mcmFjdGlvbj0xNjc7ZS55ZW49NTU2O2UuZmxvcmluPTU1NjtlLnNlY3Rpb249NTU2O2UuY3VycmVuY3k9NTU2O2UucXVvdGVzaW5nbGU9MTkxO2UucXVvdGVkYmxsZWZ0PTMzMztlLmd1aWxsZW1vdGxlZnQ9NTU2O2UuZ3VpbHNpbmdsbGVmdD0zMzM7ZS5ndWlsc2luZ2xyaWdodD0zMzM7ZS5maT01MDA7ZS5mbD01MDA7ZS5lbmRhc2g9NTU2O2UuZGFnZ2VyPTU1NjtlLmRhZ2dlcmRibD01NTY7ZS5wZXJpb2RjZW50ZXJlZD0yNzg7ZS5wYXJhZ3JhcGg9NTM3O2UuYnVsbGV0PTM1MDtlLnF1b3Rlc2luZ2xiYXNlPTIyMjtlLnF1b3RlZGJsYmFzZT0zMzM7ZS5xdW90ZWRibHJpZ2h0PTMzMztlLmd1aWxsZW1vdHJpZ2h0PTU1NjtlLmVsbGlwc2lzPTFlMztlLnBlcnRob3VzYW5kPTFlMztlLnF1ZXN0aW9uZG93bj02MTE7ZS5ncmF2ZT0zMzM7ZS5hY3V0ZT0zMzM7ZS5jaXJjdW1mbGV4PTMzMztlLnRpbGRlPTMzMztlLm1hY3Jvbj0zMzM7ZS5icmV2ZT0zMzM7ZS5kb3RhY2NlbnQ9MzMzO2UuZGllcmVzaXM9MzMzO2UucmluZz0zMzM7ZS5jZWRpbGxhPTMzMztlLmh1bmdhcnVtbGF1dD0zMzM7ZS5vZ29uZWs9MzMzO2UuY2Fyb249MzMzO2UuZW1kYXNoPTFlMztlLkFFPTFlMztlLm9yZGZlbWluaW5lPTM3MDtlLkxzbGFzaD01NTY7ZS5Pc2xhc2g9Nzc4O2UuT0U9MWUzO2Uub3JkbWFzY3VsaW5lPTM2NTtlLmFlPTg4OTtlLmRvdGxlc3NpPTI3ODtlLmxzbGFzaD0yMjI7ZS5vc2xhc2g9NjExO2Uub2U9OTQ0O2UuZ2VybWFuZGJscz02MTE7ZS5JZGllcmVzaXM9Mjc4O2UuZWFjdXRlPTU1NjtlLmFicmV2ZT01NTY7ZS51aHVuZ2FydW1sYXV0PTU1NjtlLmVjYXJvbj01NTY7ZS5ZZGllcmVzaXM9NjY3O2UuZGl2aWRlPTU4NDtlLllhY3V0ZT02Njc7ZS5BY2lyY3VtZmxleD02Njc7ZS5hYWN1dGU9NTU2O2UuVWNpcmN1bWZsZXg9NzIyO2UueWFjdXRlPTUwMDtlLnNjb21tYWFjY2VudD01MDA7ZS5lY2lyY3VtZmxleD01NTY7ZS5VcmluZz03MjI7ZS5VZGllcmVzaXM9NzIyO2UuYW9nb25laz01NTY7ZS5VYWN1dGU9NzIyO2UudW9nb25laz01NTY7ZS5FZGllcmVzaXM9NjY3O2UuRGNyb2F0PTcyMjtlLmNvbW1hYWNjZW50PTI1MDtlLmNvcHlyaWdodD03Mzc7ZS5FbWFjcm9uPTY2NztlLmNjYXJvbj01MDA7ZS5hcmluZz01NTY7ZS5OY29tbWFhY2NlbnQ9NzIyO2UubGFjdXRlPTIyMjtlLmFncmF2ZT01NTY7ZS5UY29tbWFhY2NlbnQ9NjExO2UuQ2FjdXRlPTcyMjtlLmF0aWxkZT01NTY7ZS5FZG90YWNjZW50PTY2NztlLnNjYXJvbj01MDA7ZS5zY2VkaWxsYT01MDA7ZS5pYWN1dGU9Mjc4O2UubG96ZW5nZT00NzE7ZS5SY2Fyb249NzIyO2UuR2NvbW1hYWNjZW50PTc3ODtlLnVjaXJjdW1mbGV4PTU1NjtlLmFjaXJjdW1mbGV4PTU1NjtlLkFtYWNyb249NjY3O2UucmNhcm9uPTMzMztlLmNjZWRpbGxhPTUwMDtlLlpkb3RhY2NlbnQ9NjExO2UuVGhvcm49NjY3O2UuT21hY3Jvbj03Nzg7ZS5SYWN1dGU9NzIyO2UuU2FjdXRlPTY2NztlLmRjYXJvbj02NDM7ZS5VbWFjcm9uPTcyMjtlLnVyaW5nPTU1NjtlLnRocmVlc3VwZXJpb3I9MzMzO2UuT2dyYXZlPTc3ODtlLkFncmF2ZT02Njc7ZS5BYnJldmU9NjY3O2UubXVsdGlwbHk9NTg0O2UudWFjdXRlPTU1NjtlLlRjYXJvbj02MTE7ZS5wYXJ0aWFsZGlmZj00NzY7ZS55ZGllcmVzaXM9NTAwO2UuTmFjdXRlPTcyMjtlLmljaXJjdW1mbGV4PTI3ODtlLkVjaXJjdW1mbGV4PTY2NztlLmFkaWVyZXNpcz01NTY7ZS5lZGllcmVzaXM9NTU2O2UuY2FjdXRlPTUwMDtlLm5hY3V0ZT01NTY7ZS51bWFjcm9uPTU1NjtlLk5jYXJvbj03MjI7ZS5JYWN1dGU9Mjc4O2UucGx1c21pbnVzPTU4NDtlLmJyb2tlbmJhcj0yNjA7ZS5yZWdpc3RlcmVkPTczNztlLkdicmV2ZT03Nzg7ZS5JZG90YWNjZW50PTI3ODtlLnN1bW1hdGlvbj02MDA7ZS5FZ3JhdmU9NjY3O2UucmFjdXRlPTMzMztlLm9tYWNyb249NTU2O2UuWmFjdXRlPTYxMTtlLlpjYXJvbj02MTE7ZS5ncmVhdGVyZXF1YWw9NTQ5O2UuRXRoPTcyMjtlLkNjZWRpbGxhPTcyMjtlLmxjb21tYWFjY2VudD0yMjI7ZS50Y2Fyb249MzE3O2UuZW9nb25laz01NTY7ZS5Vb2dvbmVrPTcyMjtlLkFhY3V0ZT02Njc7ZS5BZGllcmVzaXM9NjY3O2UuZWdyYXZlPTU1NjtlLnphY3V0ZT01MDA7ZS5pb2dvbmVrPTIyMjtlLk9hY3V0ZT03Nzg7ZS5vYWN1dGU9NTU2O2UuYW1hY3Jvbj01NTY7ZS5zYWN1dGU9NTAwO2UuaWRpZXJlc2lzPTI3ODtlLk9jaXJjdW1mbGV4PTc3ODtlLlVncmF2ZT03MjI7ZS5EZWx0YT02MTI7ZS50aG9ybj01NTY7ZS50d29zdXBlcmlvcj0zMzM7ZS5PZGllcmVzaXM9Nzc4O2UubXU9NTU2O2UuaWdyYXZlPTI3ODtlLm9odW5nYXJ1bWxhdXQ9NTU2O2UuRW9nb25laz02Njc7ZS5kY3JvYXQ9NTU2O2UudGhyZWVxdWFydGVycz04MzQ7ZS5TY2VkaWxsYT02Njc7ZS5sY2Fyb249Mjk5O2UuS2NvbW1hYWNjZW50PTY2NztlLkxhY3V0ZT01NTY7ZS50cmFkZW1hcms9MWUzO2UuZWRvdGFjY2VudD01NTY7ZS5JZ3JhdmU9Mjc4O2UuSW1hY3Jvbj0yNzg7ZS5MY2Fyb249NTU2O2Uub25laGFsZj04MzQ7ZS5sZXNzZXF1YWw9NTQ5O2Uub2NpcmN1bWZsZXg9NTU2O2UubnRpbGRlPTU1NjtlLlVodW5nYXJ1bWxhdXQ9NzIyO2UuRWFjdXRlPTY2NztlLmVtYWNyb249NTU2O2UuZ2JyZXZlPTU1NjtlLm9uZXF1YXJ0ZXI9ODM0O2UuU2Nhcm9uPTY2NztlLlNjb21tYWFjY2VudD02Njc7ZS5PaHVuZ2FydW1sYXV0PTc3ODtlLmRlZ3JlZT00MDA7ZS5vZ3JhdmU9NTU2O2UuQ2Nhcm9uPTcyMjtlLnVncmF2ZT01NTY7ZS5yYWRpY2FsPTQ1MztlLkRjYXJvbj03MjI7ZS5yY29tbWFhY2NlbnQ9MzMzO2UuTnRpbGRlPTcyMjtlLm90aWxkZT01NTY7ZS5SY29tbWFhY2NlbnQ9NzIyO2UuTGNvbW1hYWNjZW50PTU1NjtlLkF0aWxkZT02Njc7ZS5Bb2dvbmVrPTY2NztlLkFyaW5nPTY2NztlLk90aWxkZT03Nzg7ZS56ZG90YWNjZW50PTUwMDtlLkVjYXJvbj02Njc7ZS5Jb2dvbmVrPTI3ODtlLmtjb21tYWFjY2VudD01MDA7ZS5taW51cz01ODQ7ZS5JY2lyY3VtZmxleD0yNzg7ZS5uY2Fyb249NTU2O2UudGNvbW1hYWNjZW50PTI3ODtlLmxvZ2ljYWxub3Q9NTg0O2Uub2RpZXJlc2lzPTU1NjtlLnVkaWVyZXNpcz01NTY7ZS5ub3RlcXVhbD01NDk7ZS5nY29tbWFhY2NlbnQ9NTU2O2UuZXRoPTU1NjtlLnpjYXJvbj01MDA7ZS5uY29tbWFhY2NlbnQ9NTU2O2Uub25lc3VwZXJpb3I9MzMzO2UuaW1hY3Jvbj0yNzg7ZS5FdXJvPTU1Nn0pKTtlWyJIZWx2ZXRpY2EtQm9sZCJdPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZS5zcGFjZT0yNzg7ZS5leGNsYW09MzMzO2UucXVvdGVkYmw9NDc0O2UubnVtYmVyc2lnbj01NTY7ZS5kb2xsYXI9NTU2O2UucGVyY2VudD04ODk7ZS5hbXBlcnNhbmQ9NzIyO2UucXVvdGVyaWdodD0yNzg7ZS5wYXJlbmxlZnQ9MzMzO2UucGFyZW5yaWdodD0zMzM7ZS5hc3Rlcmlzaz0zODk7ZS5wbHVzPTU4NDtlLmNvbW1hPTI3ODtlLmh5cGhlbj0zMzM7ZS5wZXJpb2Q9Mjc4O2Uuc2xhc2g9Mjc4O2UuemVybz01NTY7ZS5vbmU9NTU2O2UudHdvPTU1NjtlLnRocmVlPTU1NjtlLmZvdXI9NTU2O2UuZml2ZT01NTY7ZS5zaXg9NTU2O2Uuc2V2ZW49NTU2O2UuZWlnaHQ9NTU2O2UubmluZT01NTY7ZS5jb2xvbj0zMzM7ZS5zZW1pY29sb249MzMzO2UubGVzcz01ODQ7ZS5lcXVhbD01ODQ7ZS5ncmVhdGVyPTU4NDtlLnF1ZXN0aW9uPTYxMTtlLmF0PTk3NTtlLkE9NzIyO2UuQj03MjI7ZS5DPTcyMjtlLkQ9NzIyO2UuRT02Njc7ZS5GPTYxMTtlLkc9Nzc4O2UuSD03MjI7ZS5JPTI3ODtlLko9NTU2O2UuSz03MjI7ZS5MPTYxMTtlLk09ODMzO2UuTj03MjI7ZS5PPTc3ODtlLlA9NjY3O2UuUT03Nzg7ZS5SPTcyMjtlLlM9NjY3O2UuVD02MTE7ZS5VPTcyMjtlLlY9NjY3O2UuVz05NDQ7ZS5YPTY2NztlLlk9NjY3O2UuWj02MTE7ZS5icmFja2V0bGVmdD0zMzM7ZS5iYWNrc2xhc2g9Mjc4O2UuYnJhY2tldHJpZ2h0PTMzMztlLmFzY2lpY2lyY3VtPTU4NDtlLnVuZGVyc2NvcmU9NTU2O2UucXVvdGVsZWZ0PTI3ODtlLmE9NTU2O2UuYj02MTE7ZS5jPTU1NjtlLmQ9NjExO2UuZT01NTY7ZS5mPTMzMztlLmc9NjExO2UuaD02MTE7ZS5pPTI3ODtlLmo9Mjc4O2Uuaz01NTY7ZS5sPTI3ODtlLm09ODg5O2Uubj02MTE7ZS5vPTYxMTtlLnA9NjExO2UucT02MTE7ZS5yPTM4OTtlLnM9NTU2O2UudD0zMzM7ZS51PTYxMTtlLnY9NTU2O2Uudz03Nzg7ZS54PTU1NjtlLnk9NTU2O2Uuej01MDA7ZS5icmFjZWxlZnQ9Mzg5O2UuYmFyPTI4MDtlLmJyYWNlcmlnaHQ9Mzg5O2UuYXNjaWl0aWxkZT01ODQ7ZS5leGNsYW1kb3duPTMzMztlLmNlbnQ9NTU2O2Uuc3Rlcmxpbmc9NTU2O2UuZnJhY3Rpb249MTY3O2UueWVuPTU1NjtlLmZsb3Jpbj01NTY7ZS5zZWN0aW9uPTU1NjtlLmN1cnJlbmN5PTU1NjtlLnF1b3Rlc2luZ2xlPTIzODtlLnF1b3RlZGJsbGVmdD01MDA7ZS5ndWlsbGVtb3RsZWZ0PTU1NjtlLmd1aWxzaW5nbGxlZnQ9MzMzO2UuZ3VpbHNpbmdscmlnaHQ9MzMzO2UuZmk9NjExO2UuZmw9NjExO2UuZW5kYXNoPTU1NjtlLmRhZ2dlcj01NTY7ZS5kYWdnZXJkYmw9NTU2O2UucGVyaW9kY2VudGVyZWQ9Mjc4O2UucGFyYWdyYXBoPTU1NjtlLmJ1bGxldD0zNTA7ZS5xdW90ZXNpbmdsYmFzZT0yNzg7ZS5xdW90ZWRibGJhc2U9NTAwO2UucXVvdGVkYmxyaWdodD01MDA7ZS5ndWlsbGVtb3RyaWdodD01NTY7ZS5lbGxpcHNpcz0xZTM7ZS5wZXJ0aG91c2FuZD0xZTM7ZS5xdWVzdGlvbmRvd249NjExO2UuZ3JhdmU9MzMzO2UuYWN1dGU9MzMzO2UuY2lyY3VtZmxleD0zMzM7ZS50aWxkZT0zMzM7ZS5tYWNyb249MzMzO2UuYnJldmU9MzMzO2UuZG90YWNjZW50PTMzMztlLmRpZXJlc2lzPTMzMztlLnJpbmc9MzMzO2UuY2VkaWxsYT0zMzM7ZS5odW5nYXJ1bWxhdXQ9MzMzO2Uub2dvbmVrPTMzMztlLmNhcm9uPTMzMztlLmVtZGFzaD0xZTM7ZS5BRT0xZTM7ZS5vcmRmZW1pbmluZT0zNzA7ZS5Mc2xhc2g9NjExO2UuT3NsYXNoPTc3ODtlLk9FPTFlMztlLm9yZG1hc2N1bGluZT0zNjU7ZS5hZT04ODk7ZS5kb3RsZXNzaT0yNzg7ZS5sc2xhc2g9Mjc4O2Uub3NsYXNoPTYxMTtlLm9lPTk0NDtlLmdlcm1hbmRibHM9NjExO2UuSWRpZXJlc2lzPTI3ODtlLmVhY3V0ZT01NTY7ZS5hYnJldmU9NTU2O2UudWh1bmdhcnVtbGF1dD02MTE7ZS5lY2Fyb249NTU2O2UuWWRpZXJlc2lzPTY2NztlLmRpdmlkZT01ODQ7ZS5ZYWN1dGU9NjY3O2UuQWNpcmN1bWZsZXg9NzIyO2UuYWFjdXRlPTU1NjtlLlVjaXJjdW1mbGV4PTcyMjtlLnlhY3V0ZT01NTY7ZS5zY29tbWFhY2NlbnQ9NTU2O2UuZWNpcmN1bWZsZXg9NTU2O2UuVXJpbmc9NzIyO2UuVWRpZXJlc2lzPTcyMjtlLmFvZ29uZWs9NTU2O2UuVWFjdXRlPTcyMjtlLnVvZ29uZWs9NjExO2UuRWRpZXJlc2lzPTY2NztlLkRjcm9hdD03MjI7ZS5jb21tYWFjY2VudD0yNTA7ZS5jb3B5cmlnaHQ9NzM3O2UuRW1hY3Jvbj02Njc7ZS5jY2Fyb249NTU2O2UuYXJpbmc9NTU2O2UuTmNvbW1hYWNjZW50PTcyMjtlLmxhY3V0ZT0yNzg7ZS5hZ3JhdmU9NTU2O2UuVGNvbW1hYWNjZW50PTYxMTtlLkNhY3V0ZT03MjI7ZS5hdGlsZGU9NTU2O2UuRWRvdGFjY2VudD02Njc7ZS5zY2Fyb249NTU2O2Uuc2NlZGlsbGE9NTU2O2UuaWFjdXRlPTI3ODtlLmxvemVuZ2U9NDk0O2UuUmNhcm9uPTcyMjtlLkdjb21tYWFjY2VudD03Nzg7ZS51Y2lyY3VtZmxleD02MTE7ZS5hY2lyY3VtZmxleD01NTY7ZS5BbWFjcm9uPTcyMjtlLnJjYXJvbj0zODk7ZS5jY2VkaWxsYT01NTY7ZS5aZG90YWNjZW50PTYxMTtlLlRob3JuPTY2NztlLk9tYWNyb249Nzc4O2UuUmFjdXRlPTcyMjtlLlNhY3V0ZT02Njc7ZS5kY2Fyb249NzQzO2UuVW1hY3Jvbj03MjI7ZS51cmluZz02MTE7ZS50aHJlZXN1cGVyaW9yPTMzMztlLk9ncmF2ZT03Nzg7ZS5BZ3JhdmU9NzIyO2UuQWJyZXZlPTcyMjtlLm11bHRpcGx5PTU4NDtlLnVhY3V0ZT02MTE7ZS5UY2Fyb249NjExO2UucGFydGlhbGRpZmY9NDk0O2UueWRpZXJlc2lzPTU1NjtlLk5hY3V0ZT03MjI7ZS5pY2lyY3VtZmxleD0yNzg7ZS5FY2lyY3VtZmxleD02Njc7ZS5hZGllcmVzaXM9NTU2O2UuZWRpZXJlc2lzPTU1NjtlLmNhY3V0ZT01NTY7ZS5uYWN1dGU9NjExO2UudW1hY3Jvbj02MTE7ZS5OY2Fyb249NzIyO2UuSWFjdXRlPTI3ODtlLnBsdXNtaW51cz01ODQ7ZS5icm9rZW5iYXI9MjgwO2UucmVnaXN0ZXJlZD03Mzc7ZS5HYnJldmU9Nzc4O2UuSWRvdGFjY2VudD0yNzg7ZS5zdW1tYXRpb249NjAwO2UuRWdyYXZlPTY2NztlLnJhY3V0ZT0zODk7ZS5vbWFjcm9uPTYxMTtlLlphY3V0ZT02MTE7ZS5aY2Fyb249NjExO2UuZ3JlYXRlcmVxdWFsPTU0OTtlLkV0aD03MjI7ZS5DY2VkaWxsYT03MjI7ZS5sY29tbWFhY2NlbnQ9Mjc4O2UudGNhcm9uPTM4OTtlLmVvZ29uZWs9NTU2O2UuVW9nb25laz03MjI7ZS5BYWN1dGU9NzIyO2UuQWRpZXJlc2lzPTcyMjtlLmVncmF2ZT01NTY7ZS56YWN1dGU9NTAwO2UuaW9nb25laz0yNzg7ZS5PYWN1dGU9Nzc4O2Uub2FjdXRlPTYxMTtlLmFtYWNyb249NTU2O2Uuc2FjdXRlPTU1NjtlLmlkaWVyZXNpcz0yNzg7ZS5PY2lyY3VtZmxleD03Nzg7ZS5VZ3JhdmU9NzIyO2UuRGVsdGE9NjEyO2UudGhvcm49NjExO2UudHdvc3VwZXJpb3I9MzMzO2UuT2RpZXJlc2lzPTc3ODtlLm11PTYxMTtlLmlncmF2ZT0yNzg7ZS5vaHVuZ2FydW1sYXV0PTYxMTtlLkVvZ29uZWs9NjY3O2UuZGNyb2F0PTYxMTtlLnRocmVlcXVhcnRlcnM9ODM0O2UuU2NlZGlsbGE9NjY3O2UubGNhcm9uPTQwMDtlLktjb21tYWFjY2VudD03MjI7ZS5MYWN1dGU9NjExO2UudHJhZGVtYXJrPTFlMztlLmVkb3RhY2NlbnQ9NTU2O2UuSWdyYXZlPTI3ODtlLkltYWNyb249Mjc4O2UuTGNhcm9uPTYxMTtlLm9uZWhhbGY9ODM0O2UubGVzc2VxdWFsPTU0OTtlLm9jaXJjdW1mbGV4PTYxMTtlLm50aWxkZT02MTE7ZS5VaHVuZ2FydW1sYXV0PTcyMjtlLkVhY3V0ZT02Njc7ZS5lbWFjcm9uPTU1NjtlLmdicmV2ZT02MTE7ZS5vbmVxdWFydGVyPTgzNDtlLlNjYXJvbj02Njc7ZS5TY29tbWFhY2NlbnQ9NjY3O2UuT2h1bmdhcnVtbGF1dD03Nzg7ZS5kZWdyZWU9NDAwO2Uub2dyYXZlPTYxMTtlLkNjYXJvbj03MjI7ZS51Z3JhdmU9NjExO2UucmFkaWNhbD01NDk7ZS5EY2Fyb249NzIyO2UucmNvbW1hYWNjZW50PTM4OTtlLk50aWxkZT03MjI7ZS5vdGlsZGU9NjExO2UuUmNvbW1hYWNjZW50PTcyMjtlLkxjb21tYWFjY2VudD02MTE7ZS5BdGlsZGU9NzIyO2UuQW9nb25laz03MjI7ZS5BcmluZz03MjI7ZS5PdGlsZGU9Nzc4O2UuemRvdGFjY2VudD01MDA7ZS5FY2Fyb249NjY3O2UuSW9nb25laz0yNzg7ZS5rY29tbWFhY2NlbnQ9NTU2O2UubWludXM9NTg0O2UuSWNpcmN1bWZsZXg9Mjc4O2UubmNhcm9uPTYxMTtlLnRjb21tYWFjY2VudD0zMzM7ZS5sb2dpY2Fsbm90PTU4NDtlLm9kaWVyZXNpcz02MTE7ZS51ZGllcmVzaXM9NjExO2Uubm90ZXF1YWw9NTQ5O2UuZ2NvbW1hYWNjZW50PTYxMTtlLmV0aD02MTE7ZS56Y2Fyb249NTAwO2UubmNvbW1hYWNjZW50PTYxMTtlLm9uZXN1cGVyaW9yPTMzMztlLmltYWNyb249Mjc4O2UuRXVybz01NTZ9KSk7ZVsiSGVsdmV0aWNhLUJvbGRPYmxpcXVlIl09KDAsci5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKChmdW5jdGlvbihlKXtlLnNwYWNlPTI3ODtlLmV4Y2xhbT0zMzM7ZS5xdW90ZWRibD00NzQ7ZS5udW1iZXJzaWduPTU1NjtlLmRvbGxhcj01NTY7ZS5wZXJjZW50PTg4OTtlLmFtcGVyc2FuZD03MjI7ZS5xdW90ZXJpZ2h0PTI3ODtlLnBhcmVubGVmdD0zMzM7ZS5wYXJlbnJpZ2h0PTMzMztlLmFzdGVyaXNrPTM4OTtlLnBsdXM9NTg0O2UuY29tbWE9Mjc4O2UuaHlwaGVuPTMzMztlLnBlcmlvZD0yNzg7ZS5zbGFzaD0yNzg7ZS56ZXJvPTU1NjtlLm9uZT01NTY7ZS50d289NTU2O2UudGhyZWU9NTU2O2UuZm91cj01NTY7ZS5maXZlPTU1NjtlLnNpeD01NTY7ZS5zZXZlbj01NTY7ZS5laWdodD01NTY7ZS5uaW5lPTU1NjtlLmNvbG9uPTMzMztlLnNlbWljb2xvbj0zMzM7ZS5sZXNzPTU4NDtlLmVxdWFsPTU4NDtlLmdyZWF0ZXI9NTg0O2UucXVlc3Rpb249NjExO2UuYXQ9OTc1O2UuQT03MjI7ZS5CPTcyMjtlLkM9NzIyO2UuRD03MjI7ZS5FPTY2NztlLkY9NjExO2UuRz03Nzg7ZS5IPTcyMjtlLkk9Mjc4O2UuSj01NTY7ZS5LPTcyMjtlLkw9NjExO2UuTT04MzM7ZS5OPTcyMjtlLk89Nzc4O2UuUD02Njc7ZS5RPTc3ODtlLlI9NzIyO2UuUz02Njc7ZS5UPTYxMTtlLlU9NzIyO2UuVj02Njc7ZS5XPTk0NDtlLlg9NjY3O2UuWT02Njc7ZS5aPTYxMTtlLmJyYWNrZXRsZWZ0PTMzMztlLmJhY2tzbGFzaD0yNzg7ZS5icmFja2V0cmlnaHQ9MzMzO2UuYXNjaWljaXJjdW09NTg0O2UudW5kZXJzY29yZT01NTY7ZS5xdW90ZWxlZnQ9Mjc4O2UuYT01NTY7ZS5iPTYxMTtlLmM9NTU2O2UuZD02MTE7ZS5lPTU1NjtlLmY9MzMzO2UuZz02MTE7ZS5oPTYxMTtlLmk9Mjc4O2Uuaj0yNzg7ZS5rPTU1NjtlLmw9Mjc4O2UubT04ODk7ZS5uPTYxMTtlLm89NjExO2UucD02MTE7ZS5xPTYxMTtlLnI9Mzg5O2Uucz01NTY7ZS50PTMzMztlLnU9NjExO2Uudj01NTY7ZS53PTc3ODtlLng9NTU2O2UueT01NTY7ZS56PTUwMDtlLmJyYWNlbGVmdD0zODk7ZS5iYXI9MjgwO2UuYnJhY2VyaWdodD0zODk7ZS5hc2NpaXRpbGRlPTU4NDtlLmV4Y2xhbWRvd249MzMzO2UuY2VudD01NTY7ZS5zdGVybGluZz01NTY7ZS5mcmFjdGlvbj0xNjc7ZS55ZW49NTU2O2UuZmxvcmluPTU1NjtlLnNlY3Rpb249NTU2O2UuY3VycmVuY3k9NTU2O2UucXVvdGVzaW5nbGU9MjM4O2UucXVvdGVkYmxsZWZ0PTUwMDtlLmd1aWxsZW1vdGxlZnQ9NTU2O2UuZ3VpbHNpbmdsbGVmdD0zMzM7ZS5ndWlsc2luZ2xyaWdodD0zMzM7ZS5maT02MTE7ZS5mbD02MTE7ZS5lbmRhc2g9NTU2O2UuZGFnZ2VyPTU1NjtlLmRhZ2dlcmRibD01NTY7ZS5wZXJpb2RjZW50ZXJlZD0yNzg7ZS5wYXJhZ3JhcGg9NTU2O2UuYnVsbGV0PTM1MDtlLnF1b3Rlc2luZ2xiYXNlPTI3ODtlLnF1b3RlZGJsYmFzZT01MDA7ZS5xdW90ZWRibHJpZ2h0PTUwMDtlLmd1aWxsZW1vdHJpZ2h0PTU1NjtlLmVsbGlwc2lzPTFlMztlLnBlcnRob3VzYW5kPTFlMztlLnF1ZXN0aW9uZG93bj02MTE7ZS5ncmF2ZT0zMzM7ZS5hY3V0ZT0zMzM7ZS5jaXJjdW1mbGV4PTMzMztlLnRpbGRlPTMzMztlLm1hY3Jvbj0zMzM7ZS5icmV2ZT0zMzM7ZS5kb3RhY2NlbnQ9MzMzO2UuZGllcmVzaXM9MzMzO2UucmluZz0zMzM7ZS5jZWRpbGxhPTMzMztlLmh1bmdhcnVtbGF1dD0zMzM7ZS5vZ29uZWs9MzMzO2UuY2Fyb249MzMzO2UuZW1kYXNoPTFlMztlLkFFPTFlMztlLm9yZGZlbWluaW5lPTM3MDtlLkxzbGFzaD02MTE7ZS5Pc2xhc2g9Nzc4O2UuT0U9MWUzO2Uub3JkbWFzY3VsaW5lPTM2NTtlLmFlPTg4OTtlLmRvdGxlc3NpPTI3ODtlLmxzbGFzaD0yNzg7ZS5vc2xhc2g9NjExO2Uub2U9OTQ0O2UuZ2VybWFuZGJscz02MTE7ZS5JZGllcmVzaXM9Mjc4O2UuZWFjdXRlPTU1NjtlLmFicmV2ZT01NTY7ZS51aHVuZ2FydW1sYXV0PTYxMTtlLmVjYXJvbj01NTY7ZS5ZZGllcmVzaXM9NjY3O2UuZGl2aWRlPTU4NDtlLllhY3V0ZT02Njc7ZS5BY2lyY3VtZmxleD03MjI7ZS5hYWN1dGU9NTU2O2UuVWNpcmN1bWZsZXg9NzIyO2UueWFjdXRlPTU1NjtlLnNjb21tYWFjY2VudD01NTY7ZS5lY2lyY3VtZmxleD01NTY7ZS5VcmluZz03MjI7ZS5VZGllcmVzaXM9NzIyO2UuYW9nb25laz01NTY7ZS5VYWN1dGU9NzIyO2UudW9nb25laz02MTE7ZS5FZGllcmVzaXM9NjY3O2UuRGNyb2F0PTcyMjtlLmNvbW1hYWNjZW50PTI1MDtlLmNvcHlyaWdodD03Mzc7ZS5FbWFjcm9uPTY2NztlLmNjYXJvbj01NTY7ZS5hcmluZz01NTY7ZS5OY29tbWFhY2NlbnQ9NzIyO2UubGFjdXRlPTI3ODtlLmFncmF2ZT01NTY7ZS5UY29tbWFhY2NlbnQ9NjExO2UuQ2FjdXRlPTcyMjtlLmF0aWxkZT01NTY7ZS5FZG90YWNjZW50PTY2NztlLnNjYXJvbj01NTY7ZS5zY2VkaWxsYT01NTY7ZS5pYWN1dGU9Mjc4O2UubG96ZW5nZT00OTQ7ZS5SY2Fyb249NzIyO2UuR2NvbW1hYWNjZW50PTc3ODtlLnVjaXJjdW1mbGV4PTYxMTtlLmFjaXJjdW1mbGV4PTU1NjtlLkFtYWNyb249NzIyO2UucmNhcm9uPTM4OTtlLmNjZWRpbGxhPTU1NjtlLlpkb3RhY2NlbnQ9NjExO2UuVGhvcm49NjY3O2UuT21hY3Jvbj03Nzg7ZS5SYWN1dGU9NzIyO2UuU2FjdXRlPTY2NztlLmRjYXJvbj03NDM7ZS5VbWFjcm9uPTcyMjtlLnVyaW5nPTYxMTtlLnRocmVlc3VwZXJpb3I9MzMzO2UuT2dyYXZlPTc3ODtlLkFncmF2ZT03MjI7ZS5BYnJldmU9NzIyO2UubXVsdGlwbHk9NTg0O2UudWFjdXRlPTYxMTtlLlRjYXJvbj02MTE7ZS5wYXJ0aWFsZGlmZj00OTQ7ZS55ZGllcmVzaXM9NTU2O2UuTmFjdXRlPTcyMjtlLmljaXJjdW1mbGV4PTI3ODtlLkVjaXJjdW1mbGV4PTY2NztlLmFkaWVyZXNpcz01NTY7ZS5lZGllcmVzaXM9NTU2O2UuY2FjdXRlPTU1NjtlLm5hY3V0ZT02MTE7ZS51bWFjcm9uPTYxMTtlLk5jYXJvbj03MjI7ZS5JYWN1dGU9Mjc4O2UucGx1c21pbnVzPTU4NDtlLmJyb2tlbmJhcj0yODA7ZS5yZWdpc3RlcmVkPTczNztlLkdicmV2ZT03Nzg7ZS5JZG90YWNjZW50PTI3ODtlLnN1bW1hdGlvbj02MDA7ZS5FZ3JhdmU9NjY3O2UucmFjdXRlPTM4OTtlLm9tYWNyb249NjExO2UuWmFjdXRlPTYxMTtlLlpjYXJvbj02MTE7ZS5ncmVhdGVyZXF1YWw9NTQ5O2UuRXRoPTcyMjtlLkNjZWRpbGxhPTcyMjtlLmxjb21tYWFjY2VudD0yNzg7ZS50Y2Fyb249Mzg5O2UuZW9nb25laz01NTY7ZS5Vb2dvbmVrPTcyMjtlLkFhY3V0ZT03MjI7ZS5BZGllcmVzaXM9NzIyO2UuZWdyYXZlPTU1NjtlLnphY3V0ZT01MDA7ZS5pb2dvbmVrPTI3ODtlLk9hY3V0ZT03Nzg7ZS5vYWN1dGU9NjExO2UuYW1hY3Jvbj01NTY7ZS5zYWN1dGU9NTU2O2UuaWRpZXJlc2lzPTI3ODtlLk9jaXJjdW1mbGV4PTc3ODtlLlVncmF2ZT03MjI7ZS5EZWx0YT02MTI7ZS50aG9ybj02MTE7ZS50d29zdXBlcmlvcj0zMzM7ZS5PZGllcmVzaXM9Nzc4O2UubXU9NjExO2UuaWdyYXZlPTI3ODtlLm9odW5nYXJ1bWxhdXQ9NjExO2UuRW9nb25laz02Njc7ZS5kY3JvYXQ9NjExO2UudGhyZWVxdWFydGVycz04MzQ7ZS5TY2VkaWxsYT02Njc7ZS5sY2Fyb249NDAwO2UuS2NvbW1hYWNjZW50PTcyMjtlLkxhY3V0ZT02MTE7ZS50cmFkZW1hcms9MWUzO2UuZWRvdGFjY2VudD01NTY7ZS5JZ3JhdmU9Mjc4O2UuSW1hY3Jvbj0yNzg7ZS5MY2Fyb249NjExO2Uub25laGFsZj04MzQ7ZS5sZXNzZXF1YWw9NTQ5O2Uub2NpcmN1bWZsZXg9NjExO2UubnRpbGRlPTYxMTtlLlVodW5nYXJ1bWxhdXQ9NzIyO2UuRWFjdXRlPTY2NztlLmVtYWNyb249NTU2O2UuZ2JyZXZlPTYxMTtlLm9uZXF1YXJ0ZXI9ODM0O2UuU2Nhcm9uPTY2NztlLlNjb21tYWFjY2VudD02Njc7ZS5PaHVuZ2FydW1sYXV0PTc3ODtlLmRlZ3JlZT00MDA7ZS5vZ3JhdmU9NjExO2UuQ2Nhcm9uPTcyMjtlLnVncmF2ZT02MTE7ZS5yYWRpY2FsPTU0OTtlLkRjYXJvbj03MjI7ZS5yY29tbWFhY2NlbnQ9Mzg5O2UuTnRpbGRlPTcyMjtlLm90aWxkZT02MTE7ZS5SY29tbWFhY2NlbnQ9NzIyO2UuTGNvbW1hYWNjZW50PTYxMTtlLkF0aWxkZT03MjI7ZS5Bb2dvbmVrPTcyMjtlLkFyaW5nPTcyMjtlLk90aWxkZT03Nzg7ZS56ZG90YWNjZW50PTUwMDtlLkVjYXJvbj02Njc7ZS5Jb2dvbmVrPTI3ODtlLmtjb21tYWFjY2VudD01NTY7ZS5taW51cz01ODQ7ZS5JY2lyY3VtZmxleD0yNzg7ZS5uY2Fyb249NjExO2UudGNvbW1hYWNjZW50PTMzMztlLmxvZ2ljYWxub3Q9NTg0O2Uub2RpZXJlc2lzPTYxMTtlLnVkaWVyZXNpcz02MTE7ZS5ub3RlcXVhbD01NDk7ZS5nY29tbWFhY2NlbnQ9NjExO2UuZXRoPTYxMTtlLnpjYXJvbj01MDA7ZS5uY29tbWFhY2NlbnQ9NjExO2Uub25lc3VwZXJpb3I9MzMzO2UuaW1hY3Jvbj0yNzg7ZS5FdXJvPTU1Nn0pKTtlWyJIZWx2ZXRpY2EtT2JsaXF1ZSJdPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZS5zcGFjZT0yNzg7ZS5leGNsYW09Mjc4O2UucXVvdGVkYmw9MzU1O2UubnVtYmVyc2lnbj01NTY7ZS5kb2xsYXI9NTU2O2UucGVyY2VudD04ODk7ZS5hbXBlcnNhbmQ9NjY3O2UucXVvdGVyaWdodD0yMjI7ZS5wYXJlbmxlZnQ9MzMzO2UucGFyZW5yaWdodD0zMzM7ZS5hc3Rlcmlzaz0zODk7ZS5wbHVzPTU4NDtlLmNvbW1hPTI3ODtlLmh5cGhlbj0zMzM7ZS5wZXJpb2Q9Mjc4O2Uuc2xhc2g9Mjc4O2UuemVybz01NTY7ZS5vbmU9NTU2O2UudHdvPTU1NjtlLnRocmVlPTU1NjtlLmZvdXI9NTU2O2UuZml2ZT01NTY7ZS5zaXg9NTU2O2Uuc2V2ZW49NTU2O2UuZWlnaHQ9NTU2O2UubmluZT01NTY7ZS5jb2xvbj0yNzg7ZS5zZW1pY29sb249Mjc4O2UubGVzcz01ODQ7ZS5lcXVhbD01ODQ7ZS5ncmVhdGVyPTU4NDtlLnF1ZXN0aW9uPTU1NjtlLmF0PTEwMTU7ZS5BPTY2NztlLkI9NjY3O2UuQz03MjI7ZS5EPTcyMjtlLkU9NjY3O2UuRj02MTE7ZS5HPTc3ODtlLkg9NzIyO2UuST0yNzg7ZS5KPTUwMDtlLks9NjY3O2UuTD01NTY7ZS5NPTgzMztlLk49NzIyO2UuTz03Nzg7ZS5QPTY2NztlLlE9Nzc4O2UuUj03MjI7ZS5TPTY2NztlLlQ9NjExO2UuVT03MjI7ZS5WPTY2NztlLlc9OTQ0O2UuWD02Njc7ZS5ZPTY2NztlLlo9NjExO2UuYnJhY2tldGxlZnQ9Mjc4O2UuYmFja3NsYXNoPTI3ODtlLmJyYWNrZXRyaWdodD0yNzg7ZS5hc2NpaWNpcmN1bT00Njk7ZS51bmRlcnNjb3JlPTU1NjtlLnF1b3RlbGVmdD0yMjI7ZS5hPTU1NjtlLmI9NTU2O2UuYz01MDA7ZS5kPTU1NjtlLmU9NTU2O2UuZj0yNzg7ZS5nPTU1NjtlLmg9NTU2O2UuaT0yMjI7ZS5qPTIyMjtlLms9NTAwO2UubD0yMjI7ZS5tPTgzMztlLm49NTU2O2Uubz01NTY7ZS5wPTU1NjtlLnE9NTU2O2Uucj0zMzM7ZS5zPTUwMDtlLnQ9Mjc4O2UudT01NTY7ZS52PTUwMDtlLnc9NzIyO2UueD01MDA7ZS55PTUwMDtlLno9NTAwO2UuYnJhY2VsZWZ0PTMzNDtlLmJhcj0yNjA7ZS5icmFjZXJpZ2h0PTMzNDtlLmFzY2lpdGlsZGU9NTg0O2UuZXhjbGFtZG93bj0zMzM7ZS5jZW50PTU1NjtlLnN0ZXJsaW5nPTU1NjtlLmZyYWN0aW9uPTE2NztlLnllbj01NTY7ZS5mbG9yaW49NTU2O2Uuc2VjdGlvbj01NTY7ZS5jdXJyZW5jeT01NTY7ZS5xdW90ZXNpbmdsZT0xOTE7ZS5xdW90ZWRibGxlZnQ9MzMzO2UuZ3VpbGxlbW90bGVmdD01NTY7ZS5ndWlsc2luZ2xsZWZ0PTMzMztlLmd1aWxzaW5nbHJpZ2h0PTMzMztlLmZpPTUwMDtlLmZsPTUwMDtlLmVuZGFzaD01NTY7ZS5kYWdnZXI9NTU2O2UuZGFnZ2VyZGJsPTU1NjtlLnBlcmlvZGNlbnRlcmVkPTI3ODtlLnBhcmFncmFwaD01Mzc7ZS5idWxsZXQ9MzUwO2UucXVvdGVzaW5nbGJhc2U9MjIyO2UucXVvdGVkYmxiYXNlPTMzMztlLnF1b3RlZGJscmlnaHQ9MzMzO2UuZ3VpbGxlbW90cmlnaHQ9NTU2O2UuZWxsaXBzaXM9MWUzO2UucGVydGhvdXNhbmQ9MWUzO2UucXVlc3Rpb25kb3duPTYxMTtlLmdyYXZlPTMzMztlLmFjdXRlPTMzMztlLmNpcmN1bWZsZXg9MzMzO2UudGlsZGU9MzMzO2UubWFjcm9uPTMzMztlLmJyZXZlPTMzMztlLmRvdGFjY2VudD0zMzM7ZS5kaWVyZXNpcz0zMzM7ZS5yaW5nPTMzMztlLmNlZGlsbGE9MzMzO2UuaHVuZ2FydW1sYXV0PTMzMztlLm9nb25laz0zMzM7ZS5jYXJvbj0zMzM7ZS5lbWRhc2g9MWUzO2UuQUU9MWUzO2Uub3JkZmVtaW5pbmU9MzcwO2UuTHNsYXNoPTU1NjtlLk9zbGFzaD03Nzg7ZS5PRT0xZTM7ZS5vcmRtYXNjdWxpbmU9MzY1O2UuYWU9ODg5O2UuZG90bGVzc2k9Mjc4O2UubHNsYXNoPTIyMjtlLm9zbGFzaD02MTE7ZS5vZT05NDQ7ZS5nZXJtYW5kYmxzPTYxMTtlLklkaWVyZXNpcz0yNzg7ZS5lYWN1dGU9NTU2O2UuYWJyZXZlPTU1NjtlLnVodW5nYXJ1bWxhdXQ9NTU2O2UuZWNhcm9uPTU1NjtlLllkaWVyZXNpcz02Njc7ZS5kaXZpZGU9NTg0O2UuWWFjdXRlPTY2NztlLkFjaXJjdW1mbGV4PTY2NztlLmFhY3V0ZT01NTY7ZS5VY2lyY3VtZmxleD03MjI7ZS55YWN1dGU9NTAwO2Uuc2NvbW1hYWNjZW50PTUwMDtlLmVjaXJjdW1mbGV4PTU1NjtlLlVyaW5nPTcyMjtlLlVkaWVyZXNpcz03MjI7ZS5hb2dvbmVrPTU1NjtlLlVhY3V0ZT03MjI7ZS51b2dvbmVrPTU1NjtlLkVkaWVyZXNpcz02Njc7ZS5EY3JvYXQ9NzIyO2UuY29tbWFhY2NlbnQ9MjUwO2UuY29weXJpZ2h0PTczNztlLkVtYWNyb249NjY3O2UuY2Nhcm9uPTUwMDtlLmFyaW5nPTU1NjtlLk5jb21tYWFjY2VudD03MjI7ZS5sYWN1dGU9MjIyO2UuYWdyYXZlPTU1NjtlLlRjb21tYWFjY2VudD02MTE7ZS5DYWN1dGU9NzIyO2UuYXRpbGRlPTU1NjtlLkVkb3RhY2NlbnQ9NjY3O2Uuc2Nhcm9uPTUwMDtlLnNjZWRpbGxhPTUwMDtlLmlhY3V0ZT0yNzg7ZS5sb3plbmdlPTQ3MTtlLlJjYXJvbj03MjI7ZS5HY29tbWFhY2NlbnQ9Nzc4O2UudWNpcmN1bWZsZXg9NTU2O2UuYWNpcmN1bWZsZXg9NTU2O2UuQW1hY3Jvbj02Njc7ZS5yY2Fyb249MzMzO2UuY2NlZGlsbGE9NTAwO2UuWmRvdGFjY2VudD02MTE7ZS5UaG9ybj02Njc7ZS5PbWFjcm9uPTc3ODtlLlJhY3V0ZT03MjI7ZS5TYWN1dGU9NjY3O2UuZGNhcm9uPTY0MztlLlVtYWNyb249NzIyO2UudXJpbmc9NTU2O2UudGhyZWVzdXBlcmlvcj0zMzM7ZS5PZ3JhdmU9Nzc4O2UuQWdyYXZlPTY2NztlLkFicmV2ZT02Njc7ZS5tdWx0aXBseT01ODQ7ZS51YWN1dGU9NTU2O2UuVGNhcm9uPTYxMTtlLnBhcnRpYWxkaWZmPTQ3NjtlLnlkaWVyZXNpcz01MDA7ZS5OYWN1dGU9NzIyO2UuaWNpcmN1bWZsZXg9Mjc4O2UuRWNpcmN1bWZsZXg9NjY3O2UuYWRpZXJlc2lzPTU1NjtlLmVkaWVyZXNpcz01NTY7ZS5jYWN1dGU9NTAwO2UubmFjdXRlPTU1NjtlLnVtYWNyb249NTU2O2UuTmNhcm9uPTcyMjtlLklhY3V0ZT0yNzg7ZS5wbHVzbWludXM9NTg0O2UuYnJva2VuYmFyPTI2MDtlLnJlZ2lzdGVyZWQ9NzM3O2UuR2JyZXZlPTc3ODtlLklkb3RhY2NlbnQ9Mjc4O2Uuc3VtbWF0aW9uPTYwMDtlLkVncmF2ZT02Njc7ZS5yYWN1dGU9MzMzO2Uub21hY3Jvbj01NTY7ZS5aYWN1dGU9NjExO2UuWmNhcm9uPTYxMTtlLmdyZWF0ZXJlcXVhbD01NDk7ZS5FdGg9NzIyO2UuQ2NlZGlsbGE9NzIyO2UubGNvbW1hYWNjZW50PTIyMjtlLnRjYXJvbj0zMTc7ZS5lb2dvbmVrPTU1NjtlLlVvZ29uZWs9NzIyO2UuQWFjdXRlPTY2NztlLkFkaWVyZXNpcz02Njc7ZS5lZ3JhdmU9NTU2O2UuemFjdXRlPTUwMDtlLmlvZ29uZWs9MjIyO2UuT2FjdXRlPTc3ODtlLm9hY3V0ZT01NTY7ZS5hbWFjcm9uPTU1NjtlLnNhY3V0ZT01MDA7ZS5pZGllcmVzaXM9Mjc4O2UuT2NpcmN1bWZsZXg9Nzc4O2UuVWdyYXZlPTcyMjtlLkRlbHRhPTYxMjtlLnRob3JuPTU1NjtlLnR3b3N1cGVyaW9yPTMzMztlLk9kaWVyZXNpcz03Nzg7ZS5tdT01NTY7ZS5pZ3JhdmU9Mjc4O2Uub2h1bmdhcnVtbGF1dD01NTY7ZS5Fb2dvbmVrPTY2NztlLmRjcm9hdD01NTY7ZS50aHJlZXF1YXJ0ZXJzPTgzNDtlLlNjZWRpbGxhPTY2NztlLmxjYXJvbj0yOTk7ZS5LY29tbWFhY2NlbnQ9NjY3O2UuTGFjdXRlPTU1NjtlLnRyYWRlbWFyaz0xZTM7ZS5lZG90YWNjZW50PTU1NjtlLklncmF2ZT0yNzg7ZS5JbWFjcm9uPTI3ODtlLkxjYXJvbj01NTY7ZS5vbmVoYWxmPTgzNDtlLmxlc3NlcXVhbD01NDk7ZS5vY2lyY3VtZmxleD01NTY7ZS5udGlsZGU9NTU2O2UuVWh1bmdhcnVtbGF1dD03MjI7ZS5FYWN1dGU9NjY3O2UuZW1hY3Jvbj01NTY7ZS5nYnJldmU9NTU2O2Uub25lcXVhcnRlcj04MzQ7ZS5TY2Fyb249NjY3O2UuU2NvbW1hYWNjZW50PTY2NztlLk9odW5nYXJ1bWxhdXQ9Nzc4O2UuZGVncmVlPTQwMDtlLm9ncmF2ZT01NTY7ZS5DY2Fyb249NzIyO2UudWdyYXZlPTU1NjtlLnJhZGljYWw9NDUzO2UuRGNhcm9uPTcyMjtlLnJjb21tYWFjY2VudD0zMzM7ZS5OdGlsZGU9NzIyO2Uub3RpbGRlPTU1NjtlLlJjb21tYWFjY2VudD03MjI7ZS5MY29tbWFhY2NlbnQ9NTU2O2UuQXRpbGRlPTY2NztlLkFvZ29uZWs9NjY3O2UuQXJpbmc9NjY3O2UuT3RpbGRlPTc3ODtlLnpkb3RhY2NlbnQ9NTAwO2UuRWNhcm9uPTY2NztlLklvZ29uZWs9Mjc4O2Uua2NvbW1hYWNjZW50PTUwMDtlLm1pbnVzPTU4NDtlLkljaXJjdW1mbGV4PTI3ODtlLm5jYXJvbj01NTY7ZS50Y29tbWFhY2NlbnQ9Mjc4O2UubG9naWNhbG5vdD01ODQ7ZS5vZGllcmVzaXM9NTU2O2UudWRpZXJlc2lzPTU1NjtlLm5vdGVxdWFsPTU0OTtlLmdjb21tYWFjY2VudD01NTY7ZS5ldGg9NTU2O2UuemNhcm9uPTUwMDtlLm5jb21tYWFjY2VudD01NTY7ZS5vbmVzdXBlcmlvcj0zMzM7ZS5pbWFjcm9uPTI3ODtlLkV1cm89NTU2fSkpO2UuU3ltYm9sPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZS5zcGFjZT0yNTA7ZS5leGNsYW09MzMzO2UudW5pdmVyc2FsPTcxMztlLm51bWJlcnNpZ249NTAwO2UuZXhpc3RlbnRpYWw9NTQ5O2UucGVyY2VudD04MzM7ZS5hbXBlcnNhbmQ9Nzc4O2Uuc3VjaHRoYXQ9NDM5O2UucGFyZW5sZWZ0PTMzMztlLnBhcmVucmlnaHQ9MzMzO2UuYXN0ZXJpc2ttYXRoPTUwMDtlLnBsdXM9NTQ5O2UuY29tbWE9MjUwO2UubWludXM9NTQ5O2UucGVyaW9kPTI1MDtlLnNsYXNoPTI3ODtlLnplcm89NTAwO2Uub25lPTUwMDtlLnR3bz01MDA7ZS50aHJlZT01MDA7ZS5mb3VyPTUwMDtlLmZpdmU9NTAwO2Uuc2l4PTUwMDtlLnNldmVuPTUwMDtlLmVpZ2h0PTUwMDtlLm5pbmU9NTAwO2UuY29sb249Mjc4O2Uuc2VtaWNvbG9uPTI3ODtlLmxlc3M9NTQ5O2UuZXF1YWw9NTQ5O2UuZ3JlYXRlcj01NDk7ZS5xdWVzdGlvbj00NDQ7ZS5jb25ncnVlbnQ9NTQ5O2UuQWxwaGE9NzIyO2UuQmV0YT02Njc7ZS5DaGk9NzIyO2UuRGVsdGE9NjEyO2UuRXBzaWxvbj02MTE7ZS5QaGk9NzYzO2UuR2FtbWE9NjAzO2UuRXRhPTcyMjtlLklvdGE9MzMzO2UudGhldGExPTYzMTtlLkthcHBhPTcyMjtlLkxhbWJkYT02ODY7ZS5NdT04ODk7ZS5OdT03MjI7ZS5PbWljcm9uPTcyMjtlLlBpPTc2ODtlLlRoZXRhPTc0MTtlLlJobz01NTY7ZS5TaWdtYT01OTI7ZS5UYXU9NjExO2UuVXBzaWxvbj02OTA7ZS5zaWdtYTE9NDM5O2UuT21lZ2E9NzY4O2UuWGk9NjQ1O2UuUHNpPTc5NTtlLlpldGE9NjExO2UuYnJhY2tldGxlZnQ9MzMzO2UudGhlcmVmb3JlPTg2MztlLmJyYWNrZXRyaWdodD0zMzM7ZS5wZXJwZW5kaWN1bGFyPTY1ODtlLnVuZGVyc2NvcmU9NTAwO2UucmFkaWNhbGV4PTUwMDtlLmFscGhhPTYzMTtlLmJldGE9NTQ5O2UuY2hpPTU0OTtlLmRlbHRhPTQ5NDtlLmVwc2lsb249NDM5O2UucGhpPTUyMTtlLmdhbW1hPTQxMTtlLmV0YT02MDM7ZS5pb3RhPTMyOTtlLnBoaTE9NjAzO2Uua2FwcGE9NTQ5O2UubGFtYmRhPTU0OTtlLm11PTU3NjtlLm51PTUyMTtlLm9taWNyb249NTQ5O2UucGk9NTQ5O2UudGhldGE9NTIxO2UucmhvPTU0OTtlLnNpZ21hPTYwMztlLnRhdT00Mzk7ZS51cHNpbG9uPTU3NjtlLm9tZWdhMT03MTM7ZS5vbWVnYT02ODY7ZS54aT00OTM7ZS5wc2k9Njg2O2UuemV0YT00OTQ7ZS5icmFjZWxlZnQ9NDgwO2UuYmFyPTIwMDtlLmJyYWNlcmlnaHQ9NDgwO2Uuc2ltaWxhcj01NDk7ZS5FdXJvPTc1MDtlLlVwc2lsb24xPTYyMDtlLm1pbnV0ZT0yNDc7ZS5sZXNzZXF1YWw9NTQ5O2UuZnJhY3Rpb249MTY3O2UuaW5maW5pdHk9NzEzO2UuZmxvcmluPTUwMDtlLmNsdWI9NzUzO2UuZGlhbW9uZD03NTM7ZS5oZWFydD03NTM7ZS5zcGFkZT03NTM7ZS5hcnJvd2JvdGg9MTA0MjtlLmFycm93bGVmdD05ODc7ZS5hcnJvd3VwPTYwMztlLmFycm93cmlnaHQ9OTg3O2UuYXJyb3dkb3duPTYwMztlLmRlZ3JlZT00MDA7ZS5wbHVzbWludXM9NTQ5O2Uuc2Vjb25kPTQxMTtlLmdyZWF0ZXJlcXVhbD01NDk7ZS5tdWx0aXBseT01NDk7ZS5wcm9wb3J0aW9uYWw9NzEzO2UucGFydGlhbGRpZmY9NDk0O2UuYnVsbGV0PTQ2MDtlLmRpdmlkZT01NDk7ZS5ub3RlcXVhbD01NDk7ZS5lcXVpdmFsZW5jZT01NDk7ZS5hcHByb3hlcXVhbD01NDk7ZS5lbGxpcHNpcz0xZTM7ZS5hcnJvd3ZlcnRleD02MDM7ZS5hcnJvd2hvcml6ZXg9MWUzO2UuY2FycmlhZ2VyZXR1cm49NjU4O2UuYWxlcGg9ODIzO2UuSWZyYWt0dXI9Njg2O2UuUmZyYWt0dXI9Nzk1O2Uud2VpZXJzdHJhc3M9OTg3O2UuY2lyY2xlbXVsdGlwbHk9NzY4O2UuY2lyY2xlcGx1cz03Njg7ZS5lbXB0eXNldD04MjM7ZS5pbnRlcnNlY3Rpb249NzY4O2UudW5pb249NzY4O2UucHJvcGVyc3VwZXJzZXQ9NzEzO2UucmVmbGV4c3VwZXJzZXQ9NzEzO2Uubm90c3Vic2V0PTcxMztlLnByb3BlcnN1YnNldD03MTM7ZS5yZWZsZXhzdWJzZXQ9NzEzO2UuZWxlbWVudD03MTM7ZS5ub3RlbGVtZW50PTcxMztlLmFuZ2xlPTc2ODtlLmdyYWRpZW50PTcxMztlLnJlZ2lzdGVyc2VyaWY9NzkwO2UuY29weXJpZ2h0c2VyaWY9NzkwO2UudHJhZGVtYXJrc2VyaWY9ODkwO2UucHJvZHVjdD04MjM7ZS5yYWRpY2FsPTU0OTtlLmRvdG1hdGg9MjUwO2UubG9naWNhbG5vdD03MTM7ZS5sb2dpY2FsYW5kPTYwMztlLmxvZ2ljYWxvcj02MDM7ZS5hcnJvd2RibGJvdGg9MTA0MjtlLmFycm93ZGJsbGVmdD05ODc7ZS5hcnJvd2RibHVwPTYwMztlLmFycm93ZGJscmlnaHQ9OTg3O2UuYXJyb3dkYmxkb3duPTYwMztlLmxvemVuZ2U9NDk0O2UuYW5nbGVsZWZ0PTMyOTtlLnJlZ2lzdGVyc2Fucz03OTA7ZS5jb3B5cmlnaHRzYW5zPTc5MDtlLnRyYWRlbWFya3NhbnM9Nzg2O2Uuc3VtbWF0aW9uPTcxMztlLnBhcmVubGVmdHRwPTM4NDtlLnBhcmVubGVmdGV4PTM4NDtlLnBhcmVubGVmdGJ0PTM4NDtlLmJyYWNrZXRsZWZ0dHA9Mzg0O2UuYnJhY2tldGxlZnRleD0zODQ7ZS5icmFja2V0bGVmdGJ0PTM4NDtlLmJyYWNlbGVmdHRwPTQ5NDtlLmJyYWNlbGVmdG1pZD00OTQ7ZS5icmFjZWxlZnRidD00OTQ7ZS5icmFjZWV4PTQ5NDtlLmFuZ2xlcmlnaHQ9MzI5O2UuaW50ZWdyYWw9Mjc0O2UuaW50ZWdyYWx0cD02ODY7ZS5pbnRlZ3JhbGV4PTY4NjtlLmludGVncmFsYnQ9Njg2O2UucGFyZW5yaWdodHRwPTM4NDtlLnBhcmVucmlnaHRleD0zODQ7ZS5wYXJlbnJpZ2h0YnQ9Mzg0O2UuYnJhY2tldHJpZ2h0dHA9Mzg0O2UuYnJhY2tldHJpZ2h0ZXg9Mzg0O2UuYnJhY2tldHJpZ2h0YnQ9Mzg0O2UuYnJhY2VyaWdodHRwPTQ5NDtlLmJyYWNlcmlnaHRtaWQ9NDk0O2UuYnJhY2VyaWdodGJ0PTQ5NDtlLmFwcGxlPTc5MH0pKTtlWyJUaW1lcy1Sb21hbiJdPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZS5zcGFjZT0yNTA7ZS5leGNsYW09MzMzO2UucXVvdGVkYmw9NDA4O2UubnVtYmVyc2lnbj01MDA7ZS5kb2xsYXI9NTAwO2UucGVyY2VudD04MzM7ZS5hbXBlcnNhbmQ9Nzc4O2UucXVvdGVyaWdodD0zMzM7ZS5wYXJlbmxlZnQ9MzMzO2UucGFyZW5yaWdodD0zMzM7ZS5hc3Rlcmlzaz01MDA7ZS5wbHVzPTU2NDtlLmNvbW1hPTI1MDtlLmh5cGhlbj0zMzM7ZS5wZXJpb2Q9MjUwO2Uuc2xhc2g9Mjc4O2UuemVybz01MDA7ZS5vbmU9NTAwO2UudHdvPTUwMDtlLnRocmVlPTUwMDtlLmZvdXI9NTAwO2UuZml2ZT01MDA7ZS5zaXg9NTAwO2Uuc2V2ZW49NTAwO2UuZWlnaHQ9NTAwO2UubmluZT01MDA7ZS5jb2xvbj0yNzg7ZS5zZW1pY29sb249Mjc4O2UubGVzcz01NjQ7ZS5lcXVhbD01NjQ7ZS5ncmVhdGVyPTU2NDtlLnF1ZXN0aW9uPTQ0NDtlLmF0PTkyMTtlLkE9NzIyO2UuQj02Njc7ZS5DPTY2NztlLkQ9NzIyO2UuRT02MTE7ZS5GPTU1NjtlLkc9NzIyO2UuSD03MjI7ZS5JPTMzMztlLko9Mzg5O2UuSz03MjI7ZS5MPTYxMTtlLk09ODg5O2UuTj03MjI7ZS5PPTcyMjtlLlA9NTU2O2UuUT03MjI7ZS5SPTY2NztlLlM9NTU2O2UuVD02MTE7ZS5VPTcyMjtlLlY9NzIyO2UuVz05NDQ7ZS5YPTcyMjtlLlk9NzIyO2UuWj02MTE7ZS5icmFja2V0bGVmdD0zMzM7ZS5iYWNrc2xhc2g9Mjc4O2UuYnJhY2tldHJpZ2h0PTMzMztlLmFzY2lpY2lyY3VtPTQ2OTtlLnVuZGVyc2NvcmU9NTAwO2UucXVvdGVsZWZ0PTMzMztlLmE9NDQ0O2UuYj01MDA7ZS5jPTQ0NDtlLmQ9NTAwO2UuZT00NDQ7ZS5mPTMzMztlLmc9NTAwO2UuaD01MDA7ZS5pPTI3ODtlLmo9Mjc4O2Uuaz01MDA7ZS5sPTI3ODtlLm09Nzc4O2Uubj01MDA7ZS5vPTUwMDtlLnA9NTAwO2UucT01MDA7ZS5yPTMzMztlLnM9Mzg5O2UudD0yNzg7ZS51PTUwMDtlLnY9NTAwO2Uudz03MjI7ZS54PTUwMDtlLnk9NTAwO2Uuej00NDQ7ZS5icmFjZWxlZnQ9NDgwO2UuYmFyPTIwMDtlLmJyYWNlcmlnaHQ9NDgwO2UuYXNjaWl0aWxkZT01NDE7ZS5leGNsYW1kb3duPTMzMztlLmNlbnQ9NTAwO2Uuc3Rlcmxpbmc9NTAwO2UuZnJhY3Rpb249MTY3O2UueWVuPTUwMDtlLmZsb3Jpbj01MDA7ZS5zZWN0aW9uPTUwMDtlLmN1cnJlbmN5PTUwMDtlLnF1b3Rlc2luZ2xlPTE4MDtlLnF1b3RlZGJsbGVmdD00NDQ7ZS5ndWlsbGVtb3RsZWZ0PTUwMDtlLmd1aWxzaW5nbGxlZnQ9MzMzO2UuZ3VpbHNpbmdscmlnaHQ9MzMzO2UuZmk9NTU2O2UuZmw9NTU2O2UuZW5kYXNoPTUwMDtlLmRhZ2dlcj01MDA7ZS5kYWdnZXJkYmw9NTAwO2UucGVyaW9kY2VudGVyZWQ9MjUwO2UucGFyYWdyYXBoPTQ1MztlLmJ1bGxldD0zNTA7ZS5xdW90ZXNpbmdsYmFzZT0zMzM7ZS5xdW90ZWRibGJhc2U9NDQ0O2UucXVvdGVkYmxyaWdodD00NDQ7ZS5ndWlsbGVtb3RyaWdodD01MDA7ZS5lbGxpcHNpcz0xZTM7ZS5wZXJ0aG91c2FuZD0xZTM7ZS5xdWVzdGlvbmRvd249NDQ0O2UuZ3JhdmU9MzMzO2UuYWN1dGU9MzMzO2UuY2lyY3VtZmxleD0zMzM7ZS50aWxkZT0zMzM7ZS5tYWNyb249MzMzO2UuYnJldmU9MzMzO2UuZG90YWNjZW50PTMzMztlLmRpZXJlc2lzPTMzMztlLnJpbmc9MzMzO2UuY2VkaWxsYT0zMzM7ZS5odW5nYXJ1bWxhdXQ9MzMzO2Uub2dvbmVrPTMzMztlLmNhcm9uPTMzMztlLmVtZGFzaD0xZTM7ZS5BRT04ODk7ZS5vcmRmZW1pbmluZT0yNzY7ZS5Mc2xhc2g9NjExO2UuT3NsYXNoPTcyMjtlLk9FPTg4OTtlLm9yZG1hc2N1bGluZT0zMTA7ZS5hZT02Njc7ZS5kb3RsZXNzaT0yNzg7ZS5sc2xhc2g9Mjc4O2Uub3NsYXNoPTUwMDtlLm9lPTcyMjtlLmdlcm1hbmRibHM9NTAwO2UuSWRpZXJlc2lzPTMzMztlLmVhY3V0ZT00NDQ7ZS5hYnJldmU9NDQ0O2UudWh1bmdhcnVtbGF1dD01MDA7ZS5lY2Fyb249NDQ0O2UuWWRpZXJlc2lzPTcyMjtlLmRpdmlkZT01NjQ7ZS5ZYWN1dGU9NzIyO2UuQWNpcmN1bWZsZXg9NzIyO2UuYWFjdXRlPTQ0NDtlLlVjaXJjdW1mbGV4PTcyMjtlLnlhY3V0ZT01MDA7ZS5zY29tbWFhY2NlbnQ9Mzg5O2UuZWNpcmN1bWZsZXg9NDQ0O2UuVXJpbmc9NzIyO2UuVWRpZXJlc2lzPTcyMjtlLmFvZ29uZWs9NDQ0O2UuVWFjdXRlPTcyMjtlLnVvZ29uZWs9NTAwO2UuRWRpZXJlc2lzPTYxMTtlLkRjcm9hdD03MjI7ZS5jb21tYWFjY2VudD0yNTA7ZS5jb3B5cmlnaHQ9NzYwO2UuRW1hY3Jvbj02MTE7ZS5jY2Fyb249NDQ0O2UuYXJpbmc9NDQ0O2UuTmNvbW1hYWNjZW50PTcyMjtlLmxhY3V0ZT0yNzg7ZS5hZ3JhdmU9NDQ0O2UuVGNvbW1hYWNjZW50PTYxMTtlLkNhY3V0ZT02Njc7ZS5hdGlsZGU9NDQ0O2UuRWRvdGFjY2VudD02MTE7ZS5zY2Fyb249Mzg5O2Uuc2NlZGlsbGE9Mzg5O2UuaWFjdXRlPTI3ODtlLmxvemVuZ2U9NDcxO2UuUmNhcm9uPTY2NztlLkdjb21tYWFjY2VudD03MjI7ZS51Y2lyY3VtZmxleD01MDA7ZS5hY2lyY3VtZmxleD00NDQ7ZS5BbWFjcm9uPTcyMjtlLnJjYXJvbj0zMzM7ZS5jY2VkaWxsYT00NDQ7ZS5aZG90YWNjZW50PTYxMTtlLlRob3JuPTU1NjtlLk9tYWNyb249NzIyO2UuUmFjdXRlPTY2NztlLlNhY3V0ZT01NTY7ZS5kY2Fyb249NTg4O2UuVW1hY3Jvbj03MjI7ZS51cmluZz01MDA7ZS50aHJlZXN1cGVyaW9yPTMwMDtlLk9ncmF2ZT03MjI7ZS5BZ3JhdmU9NzIyO2UuQWJyZXZlPTcyMjtlLm11bHRpcGx5PTU2NDtlLnVhY3V0ZT01MDA7ZS5UY2Fyb249NjExO2UucGFydGlhbGRpZmY9NDc2O2UueWRpZXJlc2lzPTUwMDtlLk5hY3V0ZT03MjI7ZS5pY2lyY3VtZmxleD0yNzg7ZS5FY2lyY3VtZmxleD02MTE7ZS5hZGllcmVzaXM9NDQ0O2UuZWRpZXJlc2lzPTQ0NDtlLmNhY3V0ZT00NDQ7ZS5uYWN1dGU9NTAwO2UudW1hY3Jvbj01MDA7ZS5OY2Fyb249NzIyO2UuSWFjdXRlPTMzMztlLnBsdXNtaW51cz01NjQ7ZS5icm9rZW5iYXI9MjAwO2UucmVnaXN0ZXJlZD03NjA7ZS5HYnJldmU9NzIyO2UuSWRvdGFjY2VudD0zMzM7ZS5zdW1tYXRpb249NjAwO2UuRWdyYXZlPTYxMTtlLnJhY3V0ZT0zMzM7ZS5vbWFjcm9uPTUwMDtlLlphY3V0ZT02MTE7ZS5aY2Fyb249NjExO2UuZ3JlYXRlcmVxdWFsPTU0OTtlLkV0aD03MjI7ZS5DY2VkaWxsYT02Njc7ZS5sY29tbWFhY2NlbnQ9Mjc4O2UudGNhcm9uPTMyNjtlLmVvZ29uZWs9NDQ0O2UuVW9nb25laz03MjI7ZS5BYWN1dGU9NzIyO2UuQWRpZXJlc2lzPTcyMjtlLmVncmF2ZT00NDQ7ZS56YWN1dGU9NDQ0O2UuaW9nb25laz0yNzg7ZS5PYWN1dGU9NzIyO2Uub2FjdXRlPTUwMDtlLmFtYWNyb249NDQ0O2Uuc2FjdXRlPTM4OTtlLmlkaWVyZXNpcz0yNzg7ZS5PY2lyY3VtZmxleD03MjI7ZS5VZ3JhdmU9NzIyO2UuRGVsdGE9NjEyO2UudGhvcm49NTAwO2UudHdvc3VwZXJpb3I9MzAwO2UuT2RpZXJlc2lzPTcyMjtlLm11PTUwMDtlLmlncmF2ZT0yNzg7ZS5vaHVuZ2FydW1sYXV0PTUwMDtlLkVvZ29uZWs9NjExO2UuZGNyb2F0PTUwMDtlLnRocmVlcXVhcnRlcnM9NzUwO2UuU2NlZGlsbGE9NTU2O2UubGNhcm9uPTM0NDtlLktjb21tYWFjY2VudD03MjI7ZS5MYWN1dGU9NjExO2UudHJhZGVtYXJrPTk4MDtlLmVkb3RhY2NlbnQ9NDQ0O2UuSWdyYXZlPTMzMztlLkltYWNyb249MzMzO2UuTGNhcm9uPTYxMTtlLm9uZWhhbGY9NzUwO2UubGVzc2VxdWFsPTU0OTtlLm9jaXJjdW1mbGV4PTUwMDtlLm50aWxkZT01MDA7ZS5VaHVuZ2FydW1sYXV0PTcyMjtlLkVhY3V0ZT02MTE7ZS5lbWFjcm9uPTQ0NDtlLmdicmV2ZT01MDA7ZS5vbmVxdWFydGVyPTc1MDtlLlNjYXJvbj01NTY7ZS5TY29tbWFhY2NlbnQ9NTU2O2UuT2h1bmdhcnVtbGF1dD03MjI7ZS5kZWdyZWU9NDAwO2Uub2dyYXZlPTUwMDtlLkNjYXJvbj02Njc7ZS51Z3JhdmU9NTAwO2UucmFkaWNhbD00NTM7ZS5EY2Fyb249NzIyO2UucmNvbW1hYWNjZW50PTMzMztlLk50aWxkZT03MjI7ZS5vdGlsZGU9NTAwO2UuUmNvbW1hYWNjZW50PTY2NztlLkxjb21tYWFjY2VudD02MTE7ZS5BdGlsZGU9NzIyO2UuQW9nb25laz03MjI7ZS5BcmluZz03MjI7ZS5PdGlsZGU9NzIyO2UuemRvdGFjY2VudD00NDQ7ZS5FY2Fyb249NjExO2UuSW9nb25laz0zMzM7ZS5rY29tbWFhY2NlbnQ9NTAwO2UubWludXM9NTY0O2UuSWNpcmN1bWZsZXg9MzMzO2UubmNhcm9uPTUwMDtlLnRjb21tYWFjY2VudD0yNzg7ZS5sb2dpY2Fsbm90PTU2NDtlLm9kaWVyZXNpcz01MDA7ZS51ZGllcmVzaXM9NTAwO2Uubm90ZXF1YWw9NTQ5O2UuZ2NvbW1hYWNjZW50PTUwMDtlLmV0aD01MDA7ZS56Y2Fyb249NDQ0O2UubmNvbW1hYWNjZW50PTUwMDtlLm9uZXN1cGVyaW9yPTMwMDtlLmltYWNyb249Mjc4O2UuRXVybz01MDB9KSk7ZVsiVGltZXMtQm9sZCJdPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZS5zcGFjZT0yNTA7ZS5leGNsYW09MzMzO2UucXVvdGVkYmw9NTU1O2UubnVtYmVyc2lnbj01MDA7ZS5kb2xsYXI9NTAwO2UucGVyY2VudD0xZTM7ZS5hbXBlcnNhbmQ9ODMzO2UucXVvdGVyaWdodD0zMzM7ZS5wYXJlbmxlZnQ9MzMzO2UucGFyZW5yaWdodD0zMzM7ZS5hc3Rlcmlzaz01MDA7ZS5wbHVzPTU3MDtlLmNvbW1hPTI1MDtlLmh5cGhlbj0zMzM7ZS5wZXJpb2Q9MjUwO2Uuc2xhc2g9Mjc4O2UuemVybz01MDA7ZS5vbmU9NTAwO2UudHdvPTUwMDtlLnRocmVlPTUwMDtlLmZvdXI9NTAwO2UuZml2ZT01MDA7ZS5zaXg9NTAwO2Uuc2V2ZW49NTAwO2UuZWlnaHQ9NTAwO2UubmluZT01MDA7ZS5jb2xvbj0zMzM7ZS5zZW1pY29sb249MzMzO2UubGVzcz01NzA7ZS5lcXVhbD01NzA7ZS5ncmVhdGVyPTU3MDtlLnF1ZXN0aW9uPTUwMDtlLmF0PTkzMDtlLkE9NzIyO2UuQj02Njc7ZS5DPTcyMjtlLkQ9NzIyO2UuRT02Njc7ZS5GPTYxMTtlLkc9Nzc4O2UuSD03Nzg7ZS5JPTM4OTtlLko9NTAwO2UuSz03Nzg7ZS5MPTY2NztlLk09OTQ0O2UuTj03MjI7ZS5PPTc3ODtlLlA9NjExO2UuUT03Nzg7ZS5SPTcyMjtlLlM9NTU2O2UuVD02Njc7ZS5VPTcyMjtlLlY9NzIyO2UuVz0xZTM7ZS5YPTcyMjtlLlk9NzIyO2UuWj02Njc7ZS5icmFja2V0bGVmdD0zMzM7ZS5iYWNrc2xhc2g9Mjc4O2UuYnJhY2tldHJpZ2h0PTMzMztlLmFzY2lpY2lyY3VtPTU4MTtlLnVuZGVyc2NvcmU9NTAwO2UucXVvdGVsZWZ0PTMzMztlLmE9NTAwO2UuYj01NTY7ZS5jPTQ0NDtlLmQ9NTU2O2UuZT00NDQ7ZS5mPTMzMztlLmc9NTAwO2UuaD01NTY7ZS5pPTI3ODtlLmo9MzMzO2Uuaz01NTY7ZS5sPTI3ODtlLm09ODMzO2Uubj01NTY7ZS5vPTUwMDtlLnA9NTU2O2UucT01NTY7ZS5yPTQ0NDtlLnM9Mzg5O2UudD0zMzM7ZS51PTU1NjtlLnY9NTAwO2Uudz03MjI7ZS54PTUwMDtlLnk9NTAwO2Uuej00NDQ7ZS5icmFjZWxlZnQ9Mzk0O2UuYmFyPTIyMDtlLmJyYWNlcmlnaHQ9Mzk0O2UuYXNjaWl0aWxkZT01MjA7ZS5leGNsYW1kb3duPTMzMztlLmNlbnQ9NTAwO2Uuc3Rlcmxpbmc9NTAwO2UuZnJhY3Rpb249MTY3O2UueWVuPTUwMDtlLmZsb3Jpbj01MDA7ZS5zZWN0aW9uPTUwMDtlLmN1cnJlbmN5PTUwMDtlLnF1b3Rlc2luZ2xlPTI3ODtlLnF1b3RlZGJsbGVmdD01MDA7ZS5ndWlsbGVtb3RsZWZ0PTUwMDtlLmd1aWxzaW5nbGxlZnQ9MzMzO2UuZ3VpbHNpbmdscmlnaHQ9MzMzO2UuZmk9NTU2O2UuZmw9NTU2O2UuZW5kYXNoPTUwMDtlLmRhZ2dlcj01MDA7ZS5kYWdnZXJkYmw9NTAwO2UucGVyaW9kY2VudGVyZWQ9MjUwO2UucGFyYWdyYXBoPTU0MDtlLmJ1bGxldD0zNTA7ZS5xdW90ZXNpbmdsYmFzZT0zMzM7ZS5xdW90ZWRibGJhc2U9NTAwO2UucXVvdGVkYmxyaWdodD01MDA7ZS5ndWlsbGVtb3RyaWdodD01MDA7ZS5lbGxpcHNpcz0xZTM7ZS5wZXJ0aG91c2FuZD0xZTM7ZS5xdWVzdGlvbmRvd249NTAwO2UuZ3JhdmU9MzMzO2UuYWN1dGU9MzMzO2UuY2lyY3VtZmxleD0zMzM7ZS50aWxkZT0zMzM7ZS5tYWNyb249MzMzO2UuYnJldmU9MzMzO2UuZG90YWNjZW50PTMzMztlLmRpZXJlc2lzPTMzMztlLnJpbmc9MzMzO2UuY2VkaWxsYT0zMzM7ZS5odW5nYXJ1bWxhdXQ9MzMzO2Uub2dvbmVrPTMzMztlLmNhcm9uPTMzMztlLmVtZGFzaD0xZTM7ZS5BRT0xZTM7ZS5vcmRmZW1pbmluZT0zMDA7ZS5Mc2xhc2g9NjY3O2UuT3NsYXNoPTc3ODtlLk9FPTFlMztlLm9yZG1hc2N1bGluZT0zMzA7ZS5hZT03MjI7ZS5kb3RsZXNzaT0yNzg7ZS5sc2xhc2g9Mjc4O2Uub3NsYXNoPTUwMDtlLm9lPTcyMjtlLmdlcm1hbmRibHM9NTU2O2UuSWRpZXJlc2lzPTM4OTtlLmVhY3V0ZT00NDQ7ZS5hYnJldmU9NTAwO2UudWh1bmdhcnVtbGF1dD01NTY7ZS5lY2Fyb249NDQ0O2UuWWRpZXJlc2lzPTcyMjtlLmRpdmlkZT01NzA7ZS5ZYWN1dGU9NzIyO2UuQWNpcmN1bWZsZXg9NzIyO2UuYWFjdXRlPTUwMDtlLlVjaXJjdW1mbGV4PTcyMjtlLnlhY3V0ZT01MDA7ZS5zY29tbWFhY2NlbnQ9Mzg5O2UuZWNpcmN1bWZsZXg9NDQ0O2UuVXJpbmc9NzIyO2UuVWRpZXJlc2lzPTcyMjtlLmFvZ29uZWs9NTAwO2UuVWFjdXRlPTcyMjtlLnVvZ29uZWs9NTU2O2UuRWRpZXJlc2lzPTY2NztlLkRjcm9hdD03MjI7ZS5jb21tYWFjY2VudD0yNTA7ZS5jb3B5cmlnaHQ9NzQ3O2UuRW1hY3Jvbj02Njc7ZS5jY2Fyb249NDQ0O2UuYXJpbmc9NTAwO2UuTmNvbW1hYWNjZW50PTcyMjtlLmxhY3V0ZT0yNzg7ZS5hZ3JhdmU9NTAwO2UuVGNvbW1hYWNjZW50PTY2NztlLkNhY3V0ZT03MjI7ZS5hdGlsZGU9NTAwO2UuRWRvdGFjY2VudD02Njc7ZS5zY2Fyb249Mzg5O2Uuc2NlZGlsbGE9Mzg5O2UuaWFjdXRlPTI3ODtlLmxvemVuZ2U9NDk0O2UuUmNhcm9uPTcyMjtlLkdjb21tYWFjY2VudD03Nzg7ZS51Y2lyY3VtZmxleD01NTY7ZS5hY2lyY3VtZmxleD01MDA7ZS5BbWFjcm9uPTcyMjtlLnJjYXJvbj00NDQ7ZS5jY2VkaWxsYT00NDQ7ZS5aZG90YWNjZW50PTY2NztlLlRob3JuPTYxMTtlLk9tYWNyb249Nzc4O2UuUmFjdXRlPTcyMjtlLlNhY3V0ZT01NTY7ZS5kY2Fyb249NjcyO2UuVW1hY3Jvbj03MjI7ZS51cmluZz01NTY7ZS50aHJlZXN1cGVyaW9yPTMwMDtlLk9ncmF2ZT03Nzg7ZS5BZ3JhdmU9NzIyO2UuQWJyZXZlPTcyMjtlLm11bHRpcGx5PTU3MDtlLnVhY3V0ZT01NTY7ZS5UY2Fyb249NjY3O2UucGFydGlhbGRpZmY9NDk0O2UueWRpZXJlc2lzPTUwMDtlLk5hY3V0ZT03MjI7ZS5pY2lyY3VtZmxleD0yNzg7ZS5FY2lyY3VtZmxleD02Njc7ZS5hZGllcmVzaXM9NTAwO2UuZWRpZXJlc2lzPTQ0NDtlLmNhY3V0ZT00NDQ7ZS5uYWN1dGU9NTU2O2UudW1hY3Jvbj01NTY7ZS5OY2Fyb249NzIyO2UuSWFjdXRlPTM4OTtlLnBsdXNtaW51cz01NzA7ZS5icm9rZW5iYXI9MjIwO2UucmVnaXN0ZXJlZD03NDc7ZS5HYnJldmU9Nzc4O2UuSWRvdGFjY2VudD0zODk7ZS5zdW1tYXRpb249NjAwO2UuRWdyYXZlPTY2NztlLnJhY3V0ZT00NDQ7ZS5vbWFjcm9uPTUwMDtlLlphY3V0ZT02Njc7ZS5aY2Fyb249NjY3O2UuZ3JlYXRlcmVxdWFsPTU0OTtlLkV0aD03MjI7ZS5DY2VkaWxsYT03MjI7ZS5sY29tbWFhY2NlbnQ9Mjc4O2UudGNhcm9uPTQxNjtlLmVvZ29uZWs9NDQ0O2UuVW9nb25laz03MjI7ZS5BYWN1dGU9NzIyO2UuQWRpZXJlc2lzPTcyMjtlLmVncmF2ZT00NDQ7ZS56YWN1dGU9NDQ0O2UuaW9nb25laz0yNzg7ZS5PYWN1dGU9Nzc4O2Uub2FjdXRlPTUwMDtlLmFtYWNyb249NTAwO2Uuc2FjdXRlPTM4OTtlLmlkaWVyZXNpcz0yNzg7ZS5PY2lyY3VtZmxleD03Nzg7ZS5VZ3JhdmU9NzIyO2UuRGVsdGE9NjEyO2UudGhvcm49NTU2O2UudHdvc3VwZXJpb3I9MzAwO2UuT2RpZXJlc2lzPTc3ODtlLm11PTU1NjtlLmlncmF2ZT0yNzg7ZS5vaHVuZ2FydW1sYXV0PTUwMDtlLkVvZ29uZWs9NjY3O2UuZGNyb2F0PTU1NjtlLnRocmVlcXVhcnRlcnM9NzUwO2UuU2NlZGlsbGE9NTU2O2UubGNhcm9uPTM5NDtlLktjb21tYWFjY2VudD03Nzg7ZS5MYWN1dGU9NjY3O2UudHJhZGVtYXJrPTFlMztlLmVkb3RhY2NlbnQ9NDQ0O2UuSWdyYXZlPTM4OTtlLkltYWNyb249Mzg5O2UuTGNhcm9uPTY2NztlLm9uZWhhbGY9NzUwO2UubGVzc2VxdWFsPTU0OTtlLm9jaXJjdW1mbGV4PTUwMDtlLm50aWxkZT01NTY7ZS5VaHVuZ2FydW1sYXV0PTcyMjtlLkVhY3V0ZT02Njc7ZS5lbWFjcm9uPTQ0NDtlLmdicmV2ZT01MDA7ZS5vbmVxdWFydGVyPTc1MDtlLlNjYXJvbj01NTY7ZS5TY29tbWFhY2NlbnQ9NTU2O2UuT2h1bmdhcnVtbGF1dD03Nzg7ZS5kZWdyZWU9NDAwO2Uub2dyYXZlPTUwMDtlLkNjYXJvbj03MjI7ZS51Z3JhdmU9NTU2O2UucmFkaWNhbD01NDk7ZS5EY2Fyb249NzIyO2UucmNvbW1hYWNjZW50PTQ0NDtlLk50aWxkZT03MjI7ZS5vdGlsZGU9NTAwO2UuUmNvbW1hYWNjZW50PTcyMjtlLkxjb21tYWFjY2VudD02Njc7ZS5BdGlsZGU9NzIyO2UuQW9nb25laz03MjI7ZS5BcmluZz03MjI7ZS5PdGlsZGU9Nzc4O2UuemRvdGFjY2VudD00NDQ7ZS5FY2Fyb249NjY3O2UuSW9nb25laz0zODk7ZS5rY29tbWFhY2NlbnQ9NTU2O2UubWludXM9NTcwO2UuSWNpcmN1bWZsZXg9Mzg5O2UubmNhcm9uPTU1NjtlLnRjb21tYWFjY2VudD0zMzM7ZS5sb2dpY2Fsbm90PTU3MDtlLm9kaWVyZXNpcz01MDA7ZS51ZGllcmVzaXM9NTU2O2Uubm90ZXF1YWw9NTQ5O2UuZ2NvbW1hYWNjZW50PTUwMDtlLmV0aD01MDA7ZS56Y2Fyb249NDQ0O2UubmNvbW1hYWNjZW50PTU1NjtlLm9uZXN1cGVyaW9yPTMwMDtlLmltYWNyb249Mjc4O2UuRXVybz01MDB9KSk7ZVsiVGltZXMtQm9sZEl0YWxpYyJdPSgwLHIuZ2V0TG9va3VwVGFibGVGYWN0b3J5KSgoZnVuY3Rpb24oZSl7ZS5zcGFjZT0yNTA7ZS5leGNsYW09Mzg5O2UucXVvdGVkYmw9NTU1O2UubnVtYmVyc2lnbj01MDA7ZS5kb2xsYXI9NTAwO2UucGVyY2VudD04MzM7ZS5hbXBlcnNhbmQ9Nzc4O2UucXVvdGVyaWdodD0zMzM7ZS5wYXJlbmxlZnQ9MzMzO2UucGFyZW5yaWdodD0zMzM7ZS5hc3Rlcmlzaz01MDA7ZS5wbHVzPTU3MDtlLmNvbW1hPTI1MDtlLmh5cGhlbj0zMzM7ZS5wZXJpb2Q9MjUwO2Uuc2xhc2g9Mjc4O2UuemVybz01MDA7ZS5vbmU9NTAwO2UudHdvPTUwMDtlLnRocmVlPTUwMDtlLmZvdXI9NTAwO2UuZml2ZT01MDA7ZS5zaXg9NTAwO2Uuc2V2ZW49NTAwO2UuZWlnaHQ9NTAwO2UubmluZT01MDA7ZS5jb2xvbj0zMzM7ZS5zZW1pY29sb249MzMzO2UubGVzcz01NzA7ZS5lcXVhbD01NzA7ZS5ncmVhdGVyPTU3MDtlLnF1ZXN0aW9uPTUwMDtlLmF0PTgzMjtlLkE9NjY3O2UuQj02Njc7ZS5DPTY2NztlLkQ9NzIyO2UuRT02Njc7ZS5GPTY2NztlLkc9NzIyO2UuSD03Nzg7ZS5JPTM4OTtlLko9NTAwO2UuSz02Njc7ZS5MPTYxMTtlLk09ODg5O2UuTj03MjI7ZS5PPTcyMjtlLlA9NjExO2UuUT03MjI7ZS5SPTY2NztlLlM9NTU2O2UuVD02MTE7ZS5VPTcyMjtlLlY9NjY3O2UuVz04ODk7ZS5YPTY2NztlLlk9NjExO2UuWj02MTE7ZS5icmFja2V0bGVmdD0zMzM7ZS5iYWNrc2xhc2g9Mjc4O2UuYnJhY2tldHJpZ2h0PTMzMztlLmFzY2lpY2lyY3VtPTU3MDtlLnVuZGVyc2NvcmU9NTAwO2UucXVvdGVsZWZ0PTMzMztlLmE9NTAwO2UuYj01MDA7ZS5jPTQ0NDtlLmQ9NTAwO2UuZT00NDQ7ZS5mPTMzMztlLmc9NTAwO2UuaD01NTY7ZS5pPTI3ODtlLmo9Mjc4O2Uuaz01MDA7ZS5sPTI3ODtlLm09Nzc4O2Uubj01NTY7ZS5vPTUwMDtlLnA9NTAwO2UucT01MDA7ZS5yPTM4OTtlLnM9Mzg5O2UudD0yNzg7ZS51PTU1NjtlLnY9NDQ0O2Uudz02Njc7ZS54PTUwMDtlLnk9NDQ0O2Uuej0zODk7ZS5icmFjZWxlZnQ9MzQ4O2UuYmFyPTIyMDtlLmJyYWNlcmlnaHQ9MzQ4O2UuYXNjaWl0aWxkZT01NzA7ZS5leGNsYW1kb3duPTM4OTtlLmNlbnQ9NTAwO2Uuc3Rlcmxpbmc9NTAwO2UuZnJhY3Rpb249MTY3O2UueWVuPTUwMDtlLmZsb3Jpbj01MDA7ZS5zZWN0aW9uPTUwMDtlLmN1cnJlbmN5PTUwMDtlLnF1b3Rlc2luZ2xlPTI3ODtlLnF1b3RlZGJsbGVmdD01MDA7ZS5ndWlsbGVtb3RsZWZ0PTUwMDtlLmd1aWxzaW5nbGxlZnQ9MzMzO2UuZ3VpbHNpbmdscmlnaHQ9MzMzO2UuZmk9NTU2O2UuZmw9NTU2O2UuZW5kYXNoPTUwMDtlLmRhZ2dlcj01MDA7ZS5kYWdnZXJkYmw9NTAwO2UucGVyaW9kY2VudGVyZWQ9MjUwO2UucGFyYWdyYXBoPTUwMDtlLmJ1bGxldD0zNTA7ZS5xdW90ZXNpbmdsYmFzZT0zMzM7ZS5xdW90ZWRibGJhc2U9NTAwO2UucXVvdGVkYmxyaWdodD01MDA7ZS5ndWlsbGVtb3RyaWdodD01MDA7ZS5lbGxpcHNpcz0xZTM7ZS5wZXJ0aG91c2FuZD0xZTM7ZS5xdWVzdGlvbmRvd249NTAwO2UuZ3JhdmU9MzMzO2UuYWN1dGU9MzMzO2UuY2lyY3VtZmxleD0zMzM7ZS50aWxkZT0zMzM7ZS5tYWNyb249MzMzO2UuYnJldmU9MzMzO2UuZG90YWNjZW50PTMzMztlLmRpZXJlc2lzPTMzMztlLnJpbmc9MzMzO2UuY2VkaWxsYT0zMzM7ZS5odW5nYXJ1bWxhdXQ9MzMzO2Uub2dvbmVrPTMzMztlLmNhcm9uPTMzMztlLmVtZGFzaD0xZTM7ZS5BRT05NDQ7ZS5vcmRmZW1pbmluZT0yNjY7ZS5Mc2xhc2g9NjExO2UuT3NsYXNoPTcyMjtlLk9FPTk0NDtlLm9yZG1hc2N1bGluZT0zMDA7ZS5hZT03MjI7ZS5kb3RsZXNzaT0yNzg7ZS5sc2xhc2g9Mjc4O2Uub3NsYXNoPTUwMDtlLm9lPTcyMjtlLmdlcm1hbmRibHM9NTAwO2UuSWRpZXJlc2lzPTM4OTtlLmVhY3V0ZT00NDQ7ZS5hYnJldmU9NTAwO2UudWh1bmdhcnVtbGF1dD01NTY7ZS5lY2Fyb249NDQ0O2UuWWRpZXJlc2lzPTYxMTtlLmRpdmlkZT01NzA7ZS5ZYWN1dGU9NjExO2UuQWNpcmN1bWZsZXg9NjY3O2UuYWFjdXRlPTUwMDtlLlVjaXJjdW1mbGV4PTcyMjtlLnlhY3V0ZT00NDQ7ZS5zY29tbWFhY2NlbnQ9Mzg5O2UuZWNpcmN1bWZsZXg9NDQ0O2UuVXJpbmc9NzIyO2UuVWRpZXJlc2lzPTcyMjtlLmFvZ29uZWs9NTAwO2UuVWFjdXRlPTcyMjtlLnVvZ29uZWs9NTU2O2UuRWRpZXJlc2lzPTY2NztlLkRjcm9hdD03MjI7ZS5jb21tYWFjY2VudD0yNTA7ZS5jb3B5cmlnaHQ9NzQ3O2UuRW1hY3Jvbj02Njc7ZS5jY2Fyb249NDQ0O2UuYXJpbmc9NTAwO2UuTmNvbW1hYWNjZW50PTcyMjtlLmxhY3V0ZT0yNzg7ZS5hZ3JhdmU9NTAwO2UuVGNvbW1hYWNjZW50PTYxMTtlLkNhY3V0ZT02Njc7ZS5hdGlsZGU9NTAwO2UuRWRvdGFjY2VudD02Njc7ZS5zY2Fyb249Mzg5O2Uuc2NlZGlsbGE9Mzg5O2UuaWFjdXRlPTI3ODtlLmxvemVuZ2U9NDk0O2UuUmNhcm9uPTY2NztlLkdjb21tYWFjY2VudD03MjI7ZS51Y2lyY3VtZmxleD01NTY7ZS5hY2lyY3VtZmxleD01MDA7ZS5BbWFjcm9uPTY2NztlLnJjYXJvbj0zODk7ZS5jY2VkaWxsYT00NDQ7ZS5aZG90YWNjZW50PTYxMTtlLlRob3JuPTYxMTtlLk9tYWNyb249NzIyO2UuUmFjdXRlPTY2NztlLlNhY3V0ZT01NTY7ZS5kY2Fyb249NjA4O2UuVW1hY3Jvbj03MjI7ZS51cmluZz01NTY7ZS50aHJlZXN1cGVyaW9yPTMwMDtlLk9ncmF2ZT03MjI7ZS5BZ3JhdmU9NjY3O2UuQWJyZXZlPTY2NztlLm11bHRpcGx5PTU3MDtlLnVhY3V0ZT01NTY7ZS5UY2Fyb249NjExO2UucGFydGlhbGRpZmY9NDk0O2UueWRpZXJlc2lzPTQ0NDtlLk5hY3V0ZT03MjI7ZS5pY2lyY3VtZmxleD0yNzg7ZS5FY2lyY3VtZmxleD02Njc7ZS5hZGllcmVzaXM9NTAwO2UuZWRpZXJlc2lzPTQ0NDtlLmNhY3V0ZT00NDQ7ZS5uYWN1dGU9NTU2O2UudW1hY3Jvbj01NTY7ZS5OY2Fyb249NzIyO2UuSWFjdXRlPTM4OTtlLnBsdXNtaW51cz01NzA7ZS5icm9rZW5iYXI9MjIwO2UucmVnaXN0ZXJlZD03NDc7ZS5HYnJldmU9NzIyO2UuSWRvdGFjY2VudD0zODk7ZS5zdW1tYXRpb249NjAwO2UuRWdyYXZlPTY2NztlLnJhY3V0ZT0zODk7ZS5vbWFjcm9uPTUwMDtlLlphY3V0ZT02MTE7ZS5aY2Fyb249NjExO2UuZ3JlYXRlcmVxdWFsPTU0OTtlLkV0aD03MjI7ZS5DY2VkaWxsYT02Njc7ZS5sY29tbWFhY2NlbnQ9Mjc4O2UudGNhcm9uPTM2NjtlLmVvZ29uZWs9NDQ0O2UuVW9nb25laz03MjI7ZS5BYWN1dGU9NjY3O2UuQWRpZXJlc2lzPTY2NztlLmVncmF2ZT00NDQ7ZS56YWN1dGU9Mzg5O2UuaW9nb25laz0yNzg7ZS5PYWN1dGU9NzIyO2Uub2FjdXRlPTUwMDtlLmFtYWNyb249NTAwO2Uuc2FjdXRlPTM4OTtlLmlkaWVyZXNpcz0yNzg7ZS5PY2lyY3VtZmxleD03MjI7ZS5VZ3JhdmU9NzIyO2UuRGVsdGE9NjEyO2UudGhvcm49NTAwO2UudHdvc3VwZXJpb3I9MzAwO2UuT2RpZXJlc2lzPTcyMjtlLm11PTU3NjtlLmlncmF2ZT0yNzg7ZS5vaHVuZ2FydW1sYXV0PTUwMDtlLkVvZ29uZWs9NjY3O2UuZGNyb2F0PTUwMDtlLnRocmVlcXVhcnRlcnM9NzUwO2UuU2NlZGlsbGE9NTU2O2UubGNhcm9uPTM4MjtlLktjb21tYWFjY2VudD02Njc7ZS5MYWN1dGU9NjExO2UudHJhZGVtYXJrPTFlMztlLmVkb3RhY2NlbnQ9NDQ0O2UuSWdyYXZlPTM4OTtlLkltYWNyb249Mzg5O2UuTGNhcm9uPTYxMTtlLm9uZWhhbGY9NzUwO2UubGVzc2VxdWFsPTU0OTtlLm9jaXJjdW1mbGV4PTUwMDtlLm50aWxkZT01NTY7ZS5VaHVuZ2FydW1sYXV0PTcyMjtlLkVhY3V0ZT02Njc7ZS5lbWFjcm9uPTQ0NDtlLmdicmV2ZT01MDA7ZS5vbmVxdWFydGVyPTc1MDtlLlNjYXJvbj01NTY7ZS5TY29tbWFhY2NlbnQ9NTU2O2UuT2h1bmdhcnVtbGF1dD03MjI7ZS5kZWdyZWU9NDAwO2Uub2dyYXZlPTUwMDtlLkNjYXJvbj02Njc7ZS51Z3JhdmU9NTU2O2UucmFkaWNhbD01NDk7ZS5EY2Fyb249NzIyO2UucmNvbW1hYWNjZW50PTM4OTtlLk50aWxkZT03MjI7ZS5vdGlsZGU9NTAwO2UuUmNvbW1hYWNjZW50PTY2NztlLkxjb21tYWFjY2VudD02MTE7ZS5BdGlsZGU9NjY3O2UuQW9nb25laz02Njc7ZS5BcmluZz02Njc7ZS5PdGlsZGU9NzIyO2UuemRvdGFjY2VudD0zODk7ZS5FY2Fyb249NjY3O2UuSW9nb25laz0zODk7ZS5rY29tbWFhY2NlbnQ9NTAwO2UubWludXM9NjA2O2UuSWNpcmN1bWZsZXg9Mzg5O2UubmNhcm9uPTU1NjtlLnRjb21tYWFjY2VudD0yNzg7ZS5sb2dpY2Fsbm90PTYwNjtlLm9kaWVyZXNpcz01MDA7ZS51ZGllcmVzaXM9NTU2O2Uubm90ZXF1YWw9NTQ5O2UuZ2NvbW1hYWNjZW50PTUwMDtlLmV0aD01MDA7ZS56Y2Fyb249Mzg5O2UubmNvbW1hYWNjZW50PTU1NjtlLm9uZXN1cGVyaW9yPTMwMDtlLmltYWNyb249Mjc4O2UuRXVybz01MDB9KSk7ZVsiVGltZXMtSXRhbGljIl09KDAsci5nZXRMb29rdXBUYWJsZUZhY3RvcnkpKChmdW5jdGlvbihlKXtlLnNwYWNlPTI1MDtlLmV4Y2xhbT0zMzM7ZS5xdW90ZWRibD00MjA7ZS5udW1iZXJzaWduPTUwMDtlLmRvbGxhcj01MDA7ZS5wZXJjZW50PTgzMztlLmFtcGVyc2FuZD03Nzg7ZS5xdW90ZXJpZ2h0PTMzMztlLnBhcmVubGVmdD0zMzM7ZS5wYXJlbnJpZ2h0PTMzMztlLmFzdGVyaXNrPTUwMDtlLnBsdXM9Njc1O2UuY29tbWE9MjUwO2UuaHlwaGVuPTMzMztlLnBlcmlvZD0yNTA7ZS5zbGFzaD0yNzg7ZS56ZXJvPTUwMDtlLm9uZT01MDA7ZS50d289NTAwO2UudGhyZWU9NTAwO2UuZm91cj01MDA7ZS5maXZlPTUwMDtlLnNpeD01MDA7ZS5zZXZlbj01MDA7ZS5laWdodD01MDA7ZS5uaW5lPTUwMDtlLmNvbG9uPTMzMztlLnNlbWljb2xvbj0zMzM7ZS5sZXNzPTY3NTtlLmVxdWFsPTY3NTtlLmdyZWF0ZXI9Njc1O2UucXVlc3Rpb249NTAwO2UuYXQ9OTIwO2UuQT02MTE7ZS5CPTYxMTtlLkM9NjY3O2UuRD03MjI7ZS5FPTYxMTtlLkY9NjExO2UuRz03MjI7ZS5IPTcyMjtlLkk9MzMzO2UuSj00NDQ7ZS5LPTY2NztlLkw9NTU2O2UuTT04MzM7ZS5OPTY2NztlLk89NzIyO2UuUD02MTE7ZS5RPTcyMjtlLlI9NjExO2UuUz01MDA7ZS5UPTU1NjtlLlU9NzIyO2UuVj02MTE7ZS5XPTgzMztlLlg9NjExO2UuWT01NTY7ZS5aPTU1NjtlLmJyYWNrZXRsZWZ0PTM4OTtlLmJhY2tzbGFzaD0yNzg7ZS5icmFja2V0cmlnaHQ9Mzg5O2UuYXNjaWljaXJjdW09NDIyO2UudW5kZXJzY29yZT01MDA7ZS5xdW90ZWxlZnQ9MzMzO2UuYT01MDA7ZS5iPTUwMDtlLmM9NDQ0O2UuZD01MDA7ZS5lPTQ0NDtlLmY9Mjc4O2UuZz01MDA7ZS5oPTUwMDtlLmk9Mjc4O2Uuaj0yNzg7ZS5rPTQ0NDtlLmw9Mjc4O2UubT03MjI7ZS5uPTUwMDtlLm89NTAwO2UucD01MDA7ZS5xPTUwMDtlLnI9Mzg5O2Uucz0zODk7ZS50PTI3ODtlLnU9NTAwO2Uudj00NDQ7ZS53PTY2NztlLng9NDQ0O2UueT00NDQ7ZS56PTM4OTtlLmJyYWNlbGVmdD00MDA7ZS5iYXI9Mjc1O2UuYnJhY2VyaWdodD00MDA7ZS5hc2NpaXRpbGRlPTU0MTtlLmV4Y2xhbWRvd249Mzg5O2UuY2VudD01MDA7ZS5zdGVybGluZz01MDA7ZS5mcmFjdGlvbj0xNjc7ZS55ZW49NTAwO2UuZmxvcmluPTUwMDtlLnNlY3Rpb249NTAwO2UuY3VycmVuY3k9NTAwO2UucXVvdGVzaW5nbGU9MjE0O2UucXVvdGVkYmxsZWZ0PTU1NjtlLmd1aWxsZW1vdGxlZnQ9NTAwO2UuZ3VpbHNpbmdsbGVmdD0zMzM7ZS5ndWlsc2luZ2xyaWdodD0zMzM7ZS5maT01MDA7ZS5mbD01MDA7ZS5lbmRhc2g9NTAwO2UuZGFnZ2VyPTUwMDtlLmRhZ2dlcmRibD01MDA7ZS5wZXJpb2RjZW50ZXJlZD0yNTA7ZS5wYXJhZ3JhcGg9NTIzO2UuYnVsbGV0PTM1MDtlLnF1b3Rlc2luZ2xiYXNlPTMzMztlLnF1b3RlZGJsYmFzZT01NTY7ZS5xdW90ZWRibHJpZ2h0PTU1NjtlLmd1aWxsZW1vdHJpZ2h0PTUwMDtlLmVsbGlwc2lzPTg4OTtlLnBlcnRob3VzYW5kPTFlMztlLnF1ZXN0aW9uZG93bj01MDA7ZS5ncmF2ZT0zMzM7ZS5hY3V0ZT0zMzM7ZS5jaXJjdW1mbGV4PTMzMztlLnRpbGRlPTMzMztlLm1hY3Jvbj0zMzM7ZS5icmV2ZT0zMzM7ZS5kb3RhY2NlbnQ9MzMzO2UuZGllcmVzaXM9MzMzO2UucmluZz0zMzM7ZS5jZWRpbGxhPTMzMztlLmh1bmdhcnVtbGF1dD0zMzM7ZS5vZ29uZWs9MzMzO2UuY2Fyb249MzMzO2UuZW1kYXNoPTg4OTtlLkFFPTg4OTtlLm9yZGZlbWluaW5lPTI3NjtlLkxzbGFzaD01NTY7ZS5Pc2xhc2g9NzIyO2UuT0U9OTQ0O2Uub3JkbWFzY3VsaW5lPTMxMDtlLmFlPTY2NztlLmRvdGxlc3NpPTI3ODtlLmxzbGFzaD0yNzg7ZS5vc2xhc2g9NTAwO2Uub2U9NjY3O2UuZ2VybWFuZGJscz01MDA7ZS5JZGllcmVzaXM9MzMzO2UuZWFjdXRlPTQ0NDtlLmFicmV2ZT01MDA7ZS51aHVuZ2FydW1sYXV0PTUwMDtlLmVjYXJvbj00NDQ7ZS5ZZGllcmVzaXM9NTU2O2UuZGl2aWRlPTY3NTtlLllhY3V0ZT01NTY7ZS5BY2lyY3VtZmxleD02MTE7ZS5hYWN1dGU9NTAwO2UuVWNpcmN1bWZsZXg9NzIyO2UueWFjdXRlPTQ0NDtlLnNjb21tYWFjY2VudD0zODk7ZS5lY2lyY3VtZmxleD00NDQ7ZS5VcmluZz03MjI7ZS5VZGllcmVzaXM9NzIyO2UuYW9nb25laz01MDA7ZS5VYWN1dGU9NzIyO2UudW9nb25laz01MDA7ZS5FZGllcmVzaXM9NjExO2UuRGNyb2F0PTcyMjtlLmNvbW1hYWNjZW50PTI1MDtlLmNvcHlyaWdodD03NjA7ZS5FbWFjcm9uPTYxMTtlLmNjYXJvbj00NDQ7ZS5hcmluZz01MDA7ZS5OY29tbWFhY2NlbnQ9NjY3O2UubGFjdXRlPTI3ODtlLmFncmF2ZT01MDA7ZS5UY29tbWFhY2NlbnQ9NTU2O2UuQ2FjdXRlPTY2NztlLmF0aWxkZT01MDA7ZS5FZG90YWNjZW50PTYxMTtlLnNjYXJvbj0zODk7ZS5zY2VkaWxsYT0zODk7ZS5pYWN1dGU9Mjc4O2UubG96ZW5nZT00NzE7ZS5SY2Fyb249NjExO2UuR2NvbW1hYWNjZW50PTcyMjtlLnVjaXJjdW1mbGV4PTUwMDtlLmFjaXJjdW1mbGV4PTUwMDtlLkFtYWNyb249NjExO2UucmNhcm9uPTM4OTtlLmNjZWRpbGxhPTQ0NDtlLlpkb3RhY2NlbnQ9NTU2O2UuVGhvcm49NjExO2UuT21hY3Jvbj03MjI7ZS5SYWN1dGU9NjExO2UuU2FjdXRlPTUwMDtlLmRjYXJvbj01NDQ7ZS5VbWFjcm9uPTcyMjtlLnVyaW5nPTUwMDtlLnRocmVlc3VwZXJpb3I9MzAwO2UuT2dyYXZlPTcyMjtlLkFncmF2ZT02MTE7ZS5BYnJldmU9NjExO2UubXVsdGlwbHk9Njc1O2UudWFjdXRlPTUwMDtlLlRjYXJvbj01NTY7ZS5wYXJ0aWFsZGlmZj00NzY7ZS55ZGllcmVzaXM9NDQ0O2UuTmFjdXRlPTY2NztlLmljaXJjdW1mbGV4PTI3ODtlLkVjaXJjdW1mbGV4PTYxMTtlLmFkaWVyZXNpcz01MDA7ZS5lZGllcmVzaXM9NDQ0O2UuY2FjdXRlPTQ0NDtlLm5hY3V0ZT01MDA7ZS51bWFjcm9uPTUwMDtlLk5jYXJvbj02Njc7ZS5JYWN1dGU9MzMzO2UucGx1c21pbnVzPTY3NTtlLmJyb2tlbmJhcj0yNzU7ZS5yZWdpc3RlcmVkPTc2MDtlLkdicmV2ZT03MjI7ZS5JZG90YWNjZW50PTMzMztlLnN1bW1hdGlvbj02MDA7ZS5FZ3JhdmU9NjExO2UucmFjdXRlPTM4OTtlLm9tYWNyb249NTAwO2UuWmFjdXRlPTU1NjtlLlpjYXJvbj01NTY7ZS5ncmVhdGVyZXF1YWw9NTQ5O2UuRXRoPTcyMjtlLkNjZWRpbGxhPTY2NztlLmxjb21tYWFjY2VudD0yNzg7ZS50Y2Fyb249MzAwO2UuZW9nb25laz00NDQ7ZS5Vb2dvbmVrPTcyMjtlLkFhY3V0ZT02MTE7ZS5BZGllcmVzaXM9NjExO2UuZWdyYXZlPTQ0NDtlLnphY3V0ZT0zODk7ZS5pb2dvbmVrPTI3ODtlLk9hY3V0ZT03MjI7ZS5vYWN1dGU9NTAwO2UuYW1hY3Jvbj01MDA7ZS5zYWN1dGU9Mzg5O2UuaWRpZXJlc2lzPTI3ODtlLk9jaXJjdW1mbGV4PTcyMjtlLlVncmF2ZT03MjI7ZS5EZWx0YT02MTI7ZS50aG9ybj01MDA7ZS50d29zdXBlcmlvcj0zMDA7ZS5PZGllcmVzaXM9NzIyO2UubXU9NTAwO2UuaWdyYXZlPTI3ODtlLm9odW5nYXJ1bWxhdXQ9NTAwO2UuRW9nb25laz02MTE7ZS5kY3JvYXQ9NTAwO2UudGhyZWVxdWFydGVycz03NTA7ZS5TY2VkaWxsYT01MDA7ZS5sY2Fyb249MzAwO2UuS2NvbW1hYWNjZW50PTY2NztlLkxhY3V0ZT01NTY7ZS50cmFkZW1hcms9OTgwO2UuZWRvdGFjY2VudD00NDQ7ZS5JZ3JhdmU9MzMzO2UuSW1hY3Jvbj0zMzM7ZS5MY2Fyb249NjExO2Uub25laGFsZj03NTA7ZS5sZXNzZXF1YWw9NTQ5O2Uub2NpcmN1bWZsZXg9NTAwO2UubnRpbGRlPTUwMDtlLlVodW5nYXJ1bWxhdXQ9NzIyO2UuRWFjdXRlPTYxMTtlLmVtYWNyb249NDQ0O2UuZ2JyZXZlPTUwMDtlLm9uZXF1YXJ0ZXI9NzUwO2UuU2Nhcm9uPTUwMDtlLlNjb21tYWFjY2VudD01MDA7ZS5PaHVuZ2FydW1sYXV0PTcyMjtlLmRlZ3JlZT00MDA7ZS5vZ3JhdmU9NTAwO2UuQ2Nhcm9uPTY2NztlLnVncmF2ZT01MDA7ZS5yYWRpY2FsPTQ1MztlLkRjYXJvbj03MjI7ZS5yY29tbWFhY2NlbnQ9Mzg5O2UuTnRpbGRlPTY2NztlLm90aWxkZT01MDA7ZS5SY29tbWFhY2NlbnQ9NjExO2UuTGNvbW1hYWNjZW50PTU1NjtlLkF0aWxkZT02MTE7ZS5Bb2dvbmVrPTYxMTtlLkFyaW5nPTYxMTtlLk90aWxkZT03MjI7ZS56ZG90YWNjZW50PTM4OTtlLkVjYXJvbj02MTE7ZS5Jb2dvbmVrPTMzMztlLmtjb21tYWFjY2VudD00NDQ7ZS5taW51cz02NzU7ZS5JY2lyY3VtZmxleD0zMzM7ZS5uY2Fyb249NTAwO2UudGNvbW1hYWNjZW50PTI3ODtlLmxvZ2ljYWxub3Q9Njc1O2Uub2RpZXJlc2lzPTUwMDtlLnVkaWVyZXNpcz01MDA7ZS5ub3RlcXVhbD01NDk7ZS5nY29tbWFhY2NlbnQ9NTAwO2UuZXRoPTUwMDtlLnpjYXJvbj0zODk7ZS5uY29tbWFhY2NlbnQ9NTAwO2Uub25lc3VwZXJpb3I9MzAwO2UuaW1hY3Jvbj0yNzg7ZS5FdXJvPTUwMH0pKTtlLlphcGZEaW5nYmF0cz0oMCxyLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoKGZ1bmN0aW9uKGUpe2Uuc3BhY2U9Mjc4O2UuYTE9OTc0O2UuYTI9OTYxO2UuYTIwMj05NzQ7ZS5hMz05ODA7ZS5hND03MTk7ZS5hNT03ODk7ZS5hMTE5PTc5MDtlLmExMTg9NzkxO2UuYTExNz02OTA7ZS5hMTE9OTYwO2UuYTEyPTkzOTtlLmExMz01NDk7ZS5hMTQ9ODU1O2UuYTE1PTkxMTtlLmExNj05MzM7ZS5hMTA1PTkxMTtlLmExNz05NDU7ZS5hMTg9OTc0O2UuYTE5PTc1NTtlLmEyMD04NDY7ZS5hMjE9NzYyO2UuYTIyPTc2MTtlLmEyMz01NzE7ZS5hMjQ9Njc3O2UuYTI1PTc2MztlLmEyNj03NjA7ZS5hMjc9NzU5O2UuYTI4PTc1NDtlLmE2PTQ5NDtlLmE3PTU1MjtlLmE4PTUzNztlLmE5PTU3NztlLmExMD02OTI7ZS5hMjk9Nzg2O2UuYTMwPTc4ODtlLmEzMT03ODg7ZS5hMzI9NzkwO2UuYTMzPTc5MztlLmEzND03OTQ7ZS5hMzU9ODE2O2UuYTM2PTgyMztlLmEzNz03ODk7ZS5hMzg9ODQxO2UuYTM5PTgyMztlLmE0MD04MzM7ZS5hNDE9ODE2O2UuYTQyPTgzMTtlLmE0Mz05MjM7ZS5hNDQ9NzQ0O2UuYTQ1PTcyMztlLmE0Nj03NDk7ZS5hNDc9NzkwO2UuYTQ4PTc5MjtlLmE0OT02OTU7ZS5hNTA9Nzc2O2UuYTUxPTc2ODtlLmE1Mj03OTI7ZS5hNTM9NzU5O2UuYTU0PTcwNztlLmE1NT03MDg7ZS5hNTY9NjgyO2UuYTU3PTcwMTtlLmE1OD04MjY7ZS5hNTk9ODE1O2UuYTYwPTc4OTtlLmE2MT03ODk7ZS5hNjI9NzA3O2UuYTYzPTY4NztlLmE2ND02OTY7ZS5hNjU9Njg5O2UuYTY2PTc4NjtlLmE2Nz03ODc7ZS5hNjg9NzEzO2UuYTY5PTc5MTtlLmE3MD03ODU7ZS5hNzE9NzkxO2UuYTcyPTg3MztlLmE3Mz03NjE7ZS5hNzQ9NzYyO2UuYTIwMz03NjI7ZS5hNzU9NzU5O2UuYTIwND03NTk7ZS5hNzY9ODkyO2UuYTc3PTg5MjtlLmE3OD03ODg7ZS5hNzk9Nzg0O2UuYTgxPTQzODtlLmE4Mj0xMzg7ZS5hODM9Mjc3O2UuYTg0PTQxNTtlLmE5Nz0zOTI7ZS5hOTg9MzkyO2UuYTk5PTY2ODtlLmExMDA9NjY4O2UuYTg5PTM5MDtlLmE5MD0zOTA7ZS5hOTM9MzE3O2UuYTk0PTMxNztlLmE5MT0yNzY7ZS5hOTI9Mjc2O2UuYTIwNT01MDk7ZS5hODU9NTA5O2UuYTIwNj00MTA7ZS5hODY9NDEwO2UuYTg3PTIzNDtlLmE4OD0yMzQ7ZS5hOTU9MzM0O2UuYTk2PTMzNDtlLmExMDE9NzMyO2UuYTEwMj01NDQ7ZS5hMTAzPTU0NDtlLmExMDQ9OTEwO2UuYTEwNj02Njc7ZS5hMTA3PTc2MDtlLmExMDg9NzYwO2UuYTExMj03NzY7ZS5hMTExPTU5NTtlLmExMTA9Njk0O2UuYTEwOT02MjY7ZS5hMTIwPTc4ODtlLmExMjE9Nzg4O2UuYTEyMj03ODg7ZS5hMTIzPTc4ODtlLmExMjQ9Nzg4O2UuYTEyNT03ODg7ZS5hMTI2PTc4ODtlLmExMjc9Nzg4O2UuYTEyOD03ODg7ZS5hMTI5PTc4ODtlLmExMzA9Nzg4O2UuYTEzMT03ODg7ZS5hMTMyPTc4ODtlLmExMzM9Nzg4O2UuYTEzND03ODg7ZS5hMTM1PTc4ODtlLmExMzY9Nzg4O2UuYTEzNz03ODg7ZS5hMTM4PTc4ODtlLmExMzk9Nzg4O2UuYTE0MD03ODg7ZS5hMTQxPTc4ODtlLmExNDI9Nzg4O2UuYTE0Mz03ODg7ZS5hMTQ0PTc4ODtlLmExNDU9Nzg4O2UuYTE0Nj03ODg7ZS5hMTQ3PTc4ODtlLmExNDg9Nzg4O2UuYTE0OT03ODg7ZS5hMTUwPTc4ODtlLmExNTE9Nzg4O2UuYTE1Mj03ODg7ZS5hMTUzPTc4ODtlLmExNTQ9Nzg4O2UuYTE1NT03ODg7ZS5hMTU2PTc4ODtlLmExNTc9Nzg4O2UuYTE1OD03ODg7ZS5hMTU5PTc4ODtlLmExNjA9ODk0O2UuYTE2MT04Mzg7ZS5hMTYzPTEwMTY7ZS5hMTY0PTQ1ODtlLmExOTY9NzQ4O2UuYTE2NT05MjQ7ZS5hMTkyPTc0ODtlLmExNjY9OTE4O2UuYTE2Nz05Mjc7ZS5hMTY4PTkyODtlLmExNjk9OTI4O2UuYTE3MD04MzQ7ZS5hMTcxPTg3MztlLmExNzI9ODI4O2UuYTE3Mz05MjQ7ZS5hMTYyPTkyNDtlLmExNzQ9OTE3O2UuYTE3NT05MzA7ZS5hMTc2PTkzMTtlLmExNzc9NDYzO2UuYTE3OD04ODM7ZS5hMTc5PTgzNjtlLmExOTM9ODM2O2UuYTE4MD04Njc7ZS5hMTk5PTg2NztlLmExODE9Njk2O2UuYTIwMD02OTY7ZS5hMTgyPTg3NDtlLmEyMDE9ODc0O2UuYTE4Mz03NjA7ZS5hMTg0PTk0NjtlLmExOTc9NzcxO2UuYTE4NT04NjU7ZS5hMTk0PTc3MTtlLmExOTg9ODg4O2UuYTE4Nj05Njc7ZS5hMTk1PTg4ODtlLmExODc9ODMxO2UuYTE4OD04NzM7ZS5hMTg5PTkyNztlLmExOTA9OTcwO2UuYTE5MT05MTh9KSl9KSk7dC5nZXRNZXRyaWNzPW47Y29uc3QgaT0oMCxyLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoKGZ1bmN0aW9uKGUpe2UuQ291cmllcj17YXNjZW50OjYyOSxkZXNjZW50Oi0xNTcsY2FwSGVpZ2h0OjU2Mix4SGVpZ2h0Oi00MjZ9O2VbIkNvdXJpZXItQm9sZCJdPXthc2NlbnQ6NjI5LGRlc2NlbnQ6LTE1NyxjYXBIZWlnaHQ6NTYyLHhIZWlnaHQ6NDM5fTtlWyJDb3VyaWVyLU9ibGlxdWUiXT17YXNjZW50OjYyOSxkZXNjZW50Oi0xNTcsY2FwSGVpZ2h0OjU2Mix4SGVpZ2h0OjQyNn07ZVsiQ291cmllci1Cb2xkT2JsaXF1ZSJdPXthc2NlbnQ6NjI5LGRlc2NlbnQ6LTE1NyxjYXBIZWlnaHQ6NTYyLHhIZWlnaHQ6NDI2fTtlLkhlbHZldGljYT17YXNjZW50OjcxOCxkZXNjZW50Oi0yMDcsY2FwSGVpZ2h0OjcxOCx4SGVpZ2h0OjUyM307ZVsiSGVsdmV0aWNhLUJvbGQiXT17YXNjZW50OjcxOCxkZXNjZW50Oi0yMDcsY2FwSGVpZ2h0OjcxOCx4SGVpZ2h0OjUzMn07ZVsiSGVsdmV0aWNhLU9ibGlxdWUiXT17YXNjZW50OjcxOCxkZXNjZW50Oi0yMDcsY2FwSGVpZ2h0OjcxOCx4SGVpZ2h0OjUyM307ZVsiSGVsdmV0aWNhLUJvbGRPYmxpcXVlIl09e2FzY2VudDo3MTgsZGVzY2VudDotMjA3LGNhcEhlaWdodDo3MTgseEhlaWdodDo1MzJ9O2VbIlRpbWVzLVJvbWFuIl09e2FzY2VudDo2ODMsZGVzY2VudDotMjE3LGNhcEhlaWdodDo2NjIseEhlaWdodDo0NTB9O2VbIlRpbWVzLUJvbGQiXT17YXNjZW50OjY4MyxkZXNjZW50Oi0yMTcsY2FwSGVpZ2h0OjY3Nix4SGVpZ2h0OjQ2MX07ZVsiVGltZXMtSXRhbGljIl09e2FzY2VudDo2ODMsZGVzY2VudDotMjE3LGNhcEhlaWdodDo2NTMseEhlaWdodDo0NDF9O2VbIlRpbWVzLUJvbGRJdGFsaWMiXT17YXNjZW50OjY4MyxkZXNjZW50Oi0yMTcsY2FwSGVpZ2h0OjY2OSx4SGVpZ2h0OjQ2Mn07ZS5TeW1ib2w9e2FzY2VudDpNYXRoLk5hTixkZXNjZW50Ok1hdGguTmFOLGNhcEhlaWdodDpNYXRoLk5hTix4SGVpZ2h0Ok1hdGguTmFOfTtlLlphcGZEaW5nYmF0cz17YXNjZW50Ok1hdGguTmFOLGRlc2NlbnQ6TWF0aC5OYU4sY2FwSGVpZ2h0Ok1hdGguTmFOLHhIZWlnaHQ6TWF0aC5OYU59fSkpO3QuZ2V0Rm9udEJhc2ljTWV0cmljcz1pfSwoZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkdseWZUYWJsZT12b2lkIDA7dC5HbHlmVGFibGU9Y2xhc3MgR2x5ZlRhYmxle2NvbnN0cnVjdG9yKHtnbHlmVGFibGU6ZSxpc0dseXBoTG9jYXRpb25zTG9uZzp0LGxvY2FUYWJsZTphLG51bUdseXBoczpyfSl7dGhpcy5nbHlwaHM9W107Y29uc3Qgbj1uZXcgRGF0YVZpZXcoYS5idWZmZXIsYS5ieXRlT2Zmc2V0LGEuYnl0ZUxlbmd0aCksaT1uZXcgRGF0YVZpZXcoZS5idWZmZXIsZS5ieXRlT2Zmc2V0LGUuYnl0ZUxlbmd0aCkscz10PzQ6MjtsZXQgbz10P24uZ2V0VWludDMyKDApOjIqbi5nZXRVaW50MTYoMCksYz0wO2ZvcihsZXQgZT0wO2U8cjtlKyspe2MrPXM7Y29uc3QgZT10P24uZ2V0VWludDMyKGMpOjIqbi5nZXRVaW50MTYoYyk7aWYoZT09PW8pe3RoaXMuZ2x5cGhzLnB1c2gobmV3IEdseXBoKHt9KSk7Y29udGludWV9Y29uc3QgYT1HbHlwaC5wYXJzZShvLGkpO3RoaXMuZ2x5cGhzLnB1c2goYSk7bz1lfX1nZXRTaXplKCl7cmV0dXJuIHRoaXMuZ2x5cGhzLnJlZHVjZSgoKGUsdCk9PmUrKHQuZ2V0U2l6ZSgpKzMmLTQpKSwwKX13cml0ZSgpe2NvbnN0IGU9dGhpcy5nZXRTaXplKCksdD1uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKGUpKSxhPWU+MTMxMDcwLHI9YT80OjIsbj1uZXcgRGF0YVZpZXcobmV3IEFycmF5QnVmZmVyKCh0aGlzLmdseXBocy5sZW5ndGgrMSkqcikpO2E/bi5zZXRVaW50MzIoMCwwKTpuLnNldFVpbnQxNigwLDApO2xldCBpPTAscz0wO2Zvcihjb25zdCBlIG9mIHRoaXMuZ2x5cGhzKXtpKz1lLndyaXRlKGksdCk7aT1pKzMmLTQ7cys9cjthP24uc2V0VWludDMyKHMsaSk6bi5zZXRVaW50MTYocyxpPj4xKX1yZXR1cm57aXNMb2NhdGlvbkxvbmc6YSxsb2NhOm5ldyBVaW50OEFycmF5KG4uYnVmZmVyKSxnbHlmOm5ldyBVaW50OEFycmF5KHQuYnVmZmVyKX19c2NhbGUoZSl7Zm9yKGxldCB0PTAsYT10aGlzLmdseXBocy5sZW5ndGg7dDxhO3QrKyl0aGlzLmdseXBoc1t0XS5zY2FsZShlW3RdKX19O2NsYXNzIEdseXBoe2NvbnN0cnVjdG9yKHtoZWFkZXI6ZT1udWxsLHNpbXBsZTp0PW51bGwsY29tcG9zaXRlczphPW51bGx9KXt0aGlzLmhlYWRlcj1lO3RoaXMuc2ltcGxlPXQ7dGhpcy5jb21wb3NpdGVzPWF9c3RhdGljIHBhcnNlKGUsdCl7Y29uc3RbYSxyXT1HbHlwaEhlYWRlci5wYXJzZShlLHQpO2UrPWE7aWYoci5udW1iZXJPZkNvbnRvdXJzPDApe2NvbnN0IGE9W107Zm9yKDs7KXtjb25zdFtyLG5dPUNvbXBvc2l0ZUdseXBoLnBhcnNlKGUsdCk7ZSs9cjthLnB1c2gobik7aWYoISgzMiZuLmZsYWdzKSlicmVha31yZXR1cm4gbmV3IEdseXBoKHtoZWFkZXI6cixjb21wb3NpdGVzOmF9KX1jb25zdCBuPVNpbXBsZUdseXBoLnBhcnNlKGUsdCxyLm51bWJlck9mQ29udG91cnMpO3JldHVybiBuZXcgR2x5cGgoe2hlYWRlcjpyLHNpbXBsZTpufSl9Z2V0U2l6ZSgpe2lmKCF0aGlzLmhlYWRlcilyZXR1cm4gMDtjb25zdCBlPXRoaXMuc2ltcGxlP3RoaXMuc2ltcGxlLmdldFNpemUoKTp0aGlzLmNvbXBvc2l0ZXMucmVkdWNlKCgoZSx0KT0+ZSt0LmdldFNpemUoKSksMCk7cmV0dXJuIHRoaXMuaGVhZGVyLmdldFNpemUoKStlfXdyaXRlKGUsdCl7aWYoIXRoaXMuaGVhZGVyKXJldHVybiAwO2NvbnN0IGE9ZTtlKz10aGlzLmhlYWRlci53cml0ZShlLHQpO2lmKHRoaXMuc2ltcGxlKWUrPXRoaXMuc2ltcGxlLndyaXRlKGUsdCk7ZWxzZSBmb3IoY29uc3QgYSBvZiB0aGlzLmNvbXBvc2l0ZXMpZSs9YS53cml0ZShlLHQpO3JldHVybiBlLWF9c2NhbGUoZSl7aWYoIXRoaXMuaGVhZGVyKXJldHVybjtjb25zdCB0PSh0aGlzLmhlYWRlci54TWluK3RoaXMuaGVhZGVyLnhNYXgpLzI7dGhpcy5oZWFkZXIuc2NhbGUodCxlKTtpZih0aGlzLnNpbXBsZSl0aGlzLnNpbXBsZS5zY2FsZSh0LGUpO2Vsc2UgZm9yKGNvbnN0IGEgb2YgdGhpcy5jb21wb3NpdGVzKWEuc2NhbGUodCxlKX19Y2xhc3MgR2x5cGhIZWFkZXJ7Y29uc3RydWN0b3Ioe251bWJlck9mQ29udG91cnM6ZSx4TWluOnQseU1pbjphLHhNYXg6cix5TWF4Om59KXt0aGlzLm51bWJlck9mQ29udG91cnM9ZTt0aGlzLnhNaW49dDt0aGlzLnlNaW49YTt0aGlzLnhNYXg9cjt0aGlzLnlNYXg9bn1zdGF0aWMgcGFyc2UoZSx0KXtyZXR1cm5bMTAsbmV3IEdseXBoSGVhZGVyKHtudW1iZXJPZkNvbnRvdXJzOnQuZ2V0SW50MTYoZSkseE1pbjp0LmdldEludDE2KGUrMikseU1pbjp0LmdldEludDE2KGUrNCkseE1heDp0LmdldEludDE2KGUrNikseU1heDp0LmdldEludDE2KGUrOCl9KV19Z2V0U2l6ZSgpe3JldHVybiAxMH13cml0ZShlLHQpe3Quc2V0SW50MTYoZSx0aGlzLm51bWJlck9mQ29udG91cnMpO3Quc2V0SW50MTYoZSsyLHRoaXMueE1pbik7dC5zZXRJbnQxNihlKzQsdGhpcy55TWluKTt0LnNldEludDE2KGUrNix0aGlzLnhNYXgpO3Quc2V0SW50MTYoZSs4LHRoaXMueU1heCk7cmV0dXJuIDEwfXNjYWxlKGUsdCl7dGhpcy54TWluPU1hdGgucm91bmQoZSsodGhpcy54TWluLWUpKnQpO3RoaXMueE1heD1NYXRoLnJvdW5kKGUrKHRoaXMueE1heC1lKSp0KX19Y2xhc3MgQ29udG91cntjb25zdHJ1Y3Rvcih7ZmxhZ3M6ZSx4Q29vcmRpbmF0ZXM6dCx5Q29vcmRpbmF0ZXM6YX0pe3RoaXMueENvb3JkaW5hdGVzPXQ7dGhpcy55Q29vcmRpbmF0ZXM9YTt0aGlzLmZsYWdzPWV9fWNsYXNzIFNpbXBsZUdseXBoe2NvbnN0cnVjdG9yKHtjb250b3VyczplLGluc3RydWN0aW9uczp0fSl7dGhpcy5jb250b3Vycz1lO3RoaXMuaW5zdHJ1Y3Rpb25zPXR9c3RhdGljIHBhcnNlKGUsdCxhKXtjb25zdCByPVtdO2ZvcihsZXQgbj0wO248YTtuKyspe2NvbnN0IGE9dC5nZXRVaW50MTYoZSk7ZSs9MjtyLnB1c2goYSl9Y29uc3Qgbj1yW2EtMV0rMSxpPXQuZ2V0VWludDE2KGUpO2UrPTI7Y29uc3Qgcz1uZXcgVWludDhBcnJheSh0KS5zbGljZShlLGUraSk7ZSs9aTtjb25zdCBvPVtdO2ZvcihsZXQgYT0wO2E8bjtlKyssYSsrKXtsZXQgcj10LmdldFVpbnQ4KGUpO28ucHVzaChyKTtpZig4JnIpe2NvbnN0IG49dC5nZXRVaW50OCgrK2UpO3JePTg7Zm9yKGxldCBlPTA7ZTxuO2UrKylvLnB1c2gocik7YSs9bn19Y29uc3QgYz1bXTtsZXQgbD1bXSxoPVtdLHU9W107Y29uc3QgZD1bXTtsZXQgZj0wLGc9MDtmb3IobGV0IGE9MDthPG47YSsrKXtjb25zdCBuPW9bYV07aWYoMiZuKXtjb25zdCBhPXQuZ2V0VWludDgoZSsrKTtnKz0xNiZuP2E6LWE7bC5wdXNoKGcpfWVsc2UgaWYoMTYmbilsLnB1c2goZyk7ZWxzZXtnKz10LmdldEludDE2KGUpO2UrPTI7bC5wdXNoKGcpfWlmKHJbZl09PT1hKXtmKys7Yy5wdXNoKGwpO2w9W119fWc9MDtmPTA7Zm9yKGxldCBhPTA7YTxuO2ErKyl7Y29uc3Qgbj1vW2FdO2lmKDQmbil7Y29uc3QgYT10LmdldFVpbnQ4KGUrKyk7Zys9MzImbj9hOi1hO2gucHVzaChnKX1lbHNlIGlmKDMyJm4paC5wdXNoKGcpO2Vsc2V7Zys9dC5nZXRJbnQxNihlKTtlKz0yO2gucHVzaChnKX11LnB1c2goMSZufDY0Jm4pO2lmKHJbZl09PT1hKXtsPWNbZl07ZisrO2QucHVzaChuZXcgQ29udG91cih7ZmxhZ3M6dSx4Q29vcmRpbmF0ZXM6bCx5Q29vcmRpbmF0ZXM6aH0pKTtoPVtdO3U9W119fXJldHVybiBuZXcgU2ltcGxlR2x5cGgoe2NvbnRvdXJzOmQsaW5zdHJ1Y3Rpb25zOnN9KX1nZXRTaXplKCl7bGV0IGU9Mip0aGlzLmNvbnRvdXJzLmxlbmd0aCsyK3RoaXMuaW5zdHJ1Y3Rpb25zLmxlbmd0aCx0PTAsYT0wO2Zvcihjb25zdCByIG9mIHRoaXMuY29udG91cnMpe2UrPXIuZmxhZ3MubGVuZ3RoO2ZvcihsZXQgbj0wLGk9ci54Q29vcmRpbmF0ZXMubGVuZ3RoO248aTtuKyspe2NvbnN0IGk9ci54Q29vcmRpbmF0ZXNbbl0scz1yLnlDb29yZGluYXRlc1tuXTtsZXQgbz1NYXRoLmFicyhpLXQpO28+MjU1P2UrPTI6bz4wJiYoZSs9MSk7dD1pO289TWF0aC5hYnMocy1hKTtvPjI1NT9lKz0yOm8+MCYmKGUrPTEpO2E9c319cmV0dXJuIGV9d3JpdGUoZSx0KXtjb25zdCBhPWUscj1bXSxuPVtdLGk9W107bGV0IHM9MCxvPTA7Zm9yKGNvbnN0IGEgb2YgdGhpcy5jb250b3Vycyl7Zm9yKGxldCBlPTAsdD1hLnhDb29yZGluYXRlcy5sZW5ndGg7ZTx0O2UrKyl7bGV0IHQ9YS5mbGFnc1tlXTtjb25zdCBjPWEueENvb3JkaW5hdGVzW2VdO2xldCBsPWMtcztpZigwPT09bCl7dHw9MTY7ci5wdXNoKDApfWVsc2V7Y29uc3QgZT1NYXRoLmFicyhsKTtpZihlPD0yNTUpe3R8PWw+PTA/MTg6MjtyLnB1c2goZSl9ZWxzZSByLnB1c2gobCl9cz1jO2NvbnN0IGg9YS55Q29vcmRpbmF0ZXNbZV07bD1oLW87aWYoMD09PWwpe3R8PTMyO24ucHVzaCgwKX1lbHNle2NvbnN0IGU9TWF0aC5hYnMobCk7aWYoZTw9MjU1KXt0fD1sPj0wPzM2OjQ7bi5wdXNoKGUpfWVsc2Ugbi5wdXNoKGwpfW89aDtpLnB1c2godCl9dC5zZXRVaW50MTYoZSxyLmxlbmd0aC0xKTtlKz0yfXQuc2V0VWludDE2KGUsdGhpcy5pbnN0cnVjdGlvbnMubGVuZ3RoKTtlKz0yO2lmKHRoaXMuaW5zdHJ1Y3Rpb25zLmxlbmd0aCl7bmV3IFVpbnQ4QXJyYXkodC5idWZmZXIsMCx0LmJ1ZmZlci5ieXRlTGVuZ3RoKS5zZXQodGhpcy5pbnN0cnVjdGlvbnMsZSk7ZSs9dGhpcy5pbnN0cnVjdGlvbnMubGVuZ3RofWZvcihjb25zdCBhIG9mIGkpdC5zZXRVaW50OChlKyssYSk7Zm9yKGxldCBhPTAsbj1yLmxlbmd0aDthPG47YSsrKXtjb25zdCBuPXJbYV0scz1pW2FdO2lmKDImcyl0LnNldFVpbnQ4KGUrKyxuKTtlbHNlIGlmKCEoMTYmcykpe3Quc2V0SW50MTYoZSxuKTtlKz0yfX1mb3IobGV0IGE9MCxyPW4ubGVuZ3RoO2E8cjthKyspe2NvbnN0IHI9blthXSxzPWlbYV07aWYoNCZzKXQuc2V0VWludDgoZSsrLHIpO2Vsc2UgaWYoISgzMiZzKSl7dC5zZXRJbnQxNihlLHIpO2UrPTJ9fXJldHVybiBlLWF9c2NhbGUoZSx0KXtmb3IoY29uc3QgYSBvZiB0aGlzLmNvbnRvdXJzKWlmKDAhPT1hLnhDb29yZGluYXRlcy5sZW5ndGgpZm9yKGxldCByPTAsbj1hLnhDb29yZGluYXRlcy5sZW5ndGg7cjxuO3IrKylhLnhDb29yZGluYXRlc1tyXT1NYXRoLnJvdW5kKGUrKGEueENvb3JkaW5hdGVzW3JdLWUpKnQpfX1jbGFzcyBDb21wb3NpdGVHbHlwaHtjb25zdHJ1Y3Rvcih7ZmxhZ3M6ZSxnbHlwaEluZGV4OnQsYXJndW1lbnQxOmEsYXJndW1lbnQyOnIsdHJhbnNmOm4saW5zdHJ1Y3Rpb25zOml9KXt0aGlzLmZsYWdzPWU7dGhpcy5nbHlwaEluZGV4PXQ7dGhpcy5hcmd1bWVudDE9YTt0aGlzLmFyZ3VtZW50Mj1yO3RoaXMudHJhbnNmPW47dGhpcy5pbnN0cnVjdGlvbnM9aX1zdGF0aWMgcGFyc2UoZSx0KXtjb25zdCBhPWUscj1bXTtsZXQgbj10LmdldFVpbnQxNihlKTtjb25zdCBpPXQuZ2V0VWludDE2KGUrMik7ZSs9NDtsZXQgcyxvO2lmKDEmbil7aWYoMiZuKXtzPXQuZ2V0SW50MTYoZSk7bz10LmdldEludDE2KGUrMil9ZWxzZXtzPXQuZ2V0VWludDE2KGUpO289dC5nZXRVaW50MTYoZSsyKX1lKz00O25ePTF9ZWxzZXtpZigyJm4pe3M9dC5nZXRJbnQ4KGUpO289dC5nZXRJbnQ4KGUrMSl9ZWxzZXtzPXQuZ2V0VWludDgoZSk7bz10LmdldFVpbnQ4KGUrMSl9ZSs9Mn1pZig4Jm4pe3IucHVzaCh0LmdldFVpbnQxNihlKSk7ZSs9Mn1lbHNlIGlmKDY0Jm4pe3IucHVzaCh0LmdldFVpbnQxNihlKSx0LmdldFVpbnQxNihlKzIpKTtlKz00fWVsc2UgaWYoMTI4Jm4pe3IucHVzaCh0LmdldFVpbnQxNihlKSx0LmdldFVpbnQxNihlKzIpLHQuZ2V0VWludDE2KGUrNCksdC5nZXRVaW50MTYoZSs2KSk7ZSs9OH1sZXQgYz1udWxsO2lmKDI1NiZuKXtjb25zdCBhPXQuZ2V0VWludDE2KGUpO2UrPTI7Yz1uZXcgVWludDhBcnJheSh0KS5zbGljZShlLGUrYSk7ZSs9YX1yZXR1cm5bZS1hLG5ldyBDb21wb3NpdGVHbHlwaCh7ZmxhZ3M6bixnbHlwaEluZGV4OmksYXJndW1lbnQxOnMsYXJndW1lbnQyOm8sdHJhbnNmOnIsaW5zdHJ1Y3Rpb25zOmN9KV19Z2V0U2l6ZSgpe2xldCBlPTQrMip0aGlzLnRyYW5zZi5sZW5ndGg7MjU2JnRoaXMuZmxhZ3MmJihlKz0yK3RoaXMuaW5zdHJ1Y3Rpb25zLmxlbmd0aCk7ZSs9MjsyJnRoaXMuZmxhZ3M/dGhpcy5hcmd1bWVudDE+PS0xMjgmJnRoaXMuYXJndW1lbnQxPD0xMjcmJnRoaXMuYXJndW1lbnQyPj0tMTI4JiZ0aGlzLmFyZ3VtZW50Mjw9MTI3fHwoZSs9Mik6dGhpcy5hcmd1bWVudDE+PTAmJnRoaXMuYXJndW1lbnQxPD0yNTUmJnRoaXMuYXJndW1lbnQyPj0wJiZ0aGlzLmFyZ3VtZW50Mjw9MjU1fHwoZSs9Mik7cmV0dXJuIGV9d3JpdGUoZSx0KXtjb25zdCBhPWU7MiZ0aGlzLmZsYWdzP3RoaXMuYXJndW1lbnQxPj0tMTI4JiZ0aGlzLmFyZ3VtZW50MTw9MTI3JiZ0aGlzLmFyZ3VtZW50Mj49LTEyOCYmdGhpcy5hcmd1bWVudDI8PTEyN3x8KHRoaXMuZmxhZ3N8PTEpOnRoaXMuYXJndW1lbnQxPj0wJiZ0aGlzLmFyZ3VtZW50MTw9MjU1JiZ0aGlzLmFyZ3VtZW50Mj49MCYmdGhpcy5hcmd1bWVudDI8PTI1NXx8KHRoaXMuZmxhZ3N8PTEpO3Quc2V0VWludDE2KGUsdGhpcy5mbGFncyk7dC5zZXRVaW50MTYoZSsyLHRoaXMuZ2x5cGhJbmRleCk7ZSs9NDtpZigxJnRoaXMuZmxhZ3Mpe2lmKDImdGhpcy5mbGFncyl7dC5zZXRJbnQxNihlLHRoaXMuYXJndW1lbnQxKTt0LnNldEludDE2KGUrMix0aGlzLmFyZ3VtZW50Mil9ZWxzZXt0LnNldFVpbnQxNihlLHRoaXMuYXJndW1lbnQxKTt0LnNldFVpbnQxNihlKzIsdGhpcy5hcmd1bWVudDIpfWUrPTR9ZWxzZXt0LnNldFVpbnQ4KGUsdGhpcy5hcmd1bWVudDEpO3Quc2V0VWludDgoZSsxLHRoaXMuYXJndW1lbnQyKTtlKz0yfWlmKDI1NiZ0aGlzLmZsYWdzKXt0LnNldFVpbnQxNihlLHRoaXMuaW5zdHJ1Y3Rpb25zLmxlbmd0aCk7ZSs9MjtpZih0aGlzLmluc3RydWN0aW9ucy5sZW5ndGgpe25ldyBVaW50OEFycmF5KHQuYnVmZmVyLDAsdC5idWZmZXIuYnl0ZUxlbmd0aCkuc2V0KHRoaXMuaW5zdHJ1Y3Rpb25zLGUpO2UrPXRoaXMuaW5zdHJ1Y3Rpb25zLmxlbmd0aH19cmV0dXJuIGUtYX1zY2FsZShlLHQpe319fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuT3BlblR5cGVGaWxlQnVpbGRlcj12b2lkIDA7dmFyIHI9YSgzKSxuPWEoMik7ZnVuY3Rpb24gd3JpdGVJbnQxNihlLHQsYSl7ZVt0XT1hPj44JjI1NTtlW3QrMV09MjU1JmF9ZnVuY3Rpb24gd3JpdGVJbnQzMihlLHQsYSl7ZVt0XT1hPj4yNCYyNTU7ZVt0KzFdPWE+PjE2JjI1NTtlW3QrMl09YT4+OCYyNTU7ZVt0KzNdPTI1NSZhfWZ1bmN0aW9uIHdyaXRlRGF0YShlLHQsYSl7aWYoYSBpbnN0YW5jZW9mIFVpbnQ4QXJyYXkpZS5zZXQoYSx0KTtlbHNlIGlmKCJzdHJpbmciPT10eXBlb2YgYSlmb3IobGV0IHI9MCxuPWEubGVuZ3RoO3I8bjtyKyspZVt0KytdPTI1NSZhLmNoYXJDb2RlQXQocik7ZWxzZSBmb3IoY29uc3QgciBvZiBhKWVbdCsrXT0yNTUmcn1jbGFzcyBPcGVuVHlwZUZpbGVCdWlsZGVye2NvbnN0cnVjdG9yKGUpe3RoaXMuc2ZudD1lO3RoaXMudGFibGVzPU9iamVjdC5jcmVhdGUobnVsbCl9c3RhdGljIGdldFNlYXJjaFBhcmFtcyhlLHQpe2xldCBhPTEscj0wO2Zvcig7KGFeZSk+YTspe2E8PD0xO3IrK31jb25zdCBuPWEqdDtyZXR1cm57cmFuZ2U6bixlbnRyeTpyLHJhbmdlU2hpZnQ6dCplLW59fXRvQXJyYXkoKXtsZXQgZT10aGlzLnNmbnQ7Y29uc3QgdD10aGlzLnRhYmxlcyxhPU9iamVjdC5rZXlzKHQpO2Euc29ydCgpO2NvbnN0IGk9YS5sZW5ndGg7bGV0IHMsbyxjLGwsaCx1PTEyKzE2Kmk7Y29uc3QgZD1bdV07Zm9yKHM9MDtzPGk7cysrKXtsPXRbYVtzXV07dSs9KGwubGVuZ3RoKzMmLTQpPj4+MDtkLnB1c2godSl9Y29uc3QgZj1uZXcgVWludDhBcnJheSh1KTtmb3Iocz0wO3M8aTtzKyspe2w9dFthW3NdXTt3cml0ZURhdGEoZixkW3NdLGwpfSJ0cnVlIj09PWUmJihlPSgwLG4uc3RyaW5nMzIpKDY1NTM2KSk7ZlswXT0yNTUmZS5jaGFyQ29kZUF0KDApO2ZbMV09MjU1JmUuY2hhckNvZGVBdCgxKTtmWzJdPTI1NSZlLmNoYXJDb2RlQXQoMik7ZlszXT0yNTUmZS5jaGFyQ29kZUF0KDMpO3dyaXRlSW50MTYoZiw0LGkpO2NvbnN0IGc9T3BlblR5cGVGaWxlQnVpbGRlci5nZXRTZWFyY2hQYXJhbXMoaSwxNik7d3JpdGVJbnQxNihmLDYsZy5yYW5nZSk7d3JpdGVJbnQxNihmLDgsZy5lbnRyeSk7d3JpdGVJbnQxNihmLDEwLGcucmFuZ2VTaGlmdCk7dT0xMjtmb3Iocz0wO3M8aTtzKyspe2g9YVtzXTtmW3VdPTI1NSZoLmNoYXJDb2RlQXQoMCk7Zlt1KzFdPTI1NSZoLmNoYXJDb2RlQXQoMSk7Zlt1KzJdPTI1NSZoLmNoYXJDb2RlQXQoMik7Zlt1KzNdPTI1NSZoLmNoYXJDb2RlQXQoMyk7bGV0IGU9MDtmb3Iobz1kW3NdLGM9ZFtzKzFdO288YztvKz00KXtlPWUrKDAsci5yZWFkVWludDMyKShmLG8pPj4+MH13cml0ZUludDMyKGYsdSs0LGUpO3dyaXRlSW50MzIoZix1KzgsZFtzXSk7d3JpdGVJbnQzMihmLHUrMTIsdFtoXS5sZW5ndGgpO3UrPTE2fXJldHVybiBmfWFkZFRhYmxlKGUsdCl7aWYoZSBpbiB0aGlzLnRhYmxlcyl0aHJvdyBuZXcgRXJyb3IoIlRhYmxlICIrZSsiIGFscmVhZHkgZXhpc3RzIik7dGhpcy50YWJsZXNbZV09dH19dC5PcGVuVHlwZUZpbGVCdWlsZGVyPU9wZW5UeXBlRmlsZUJ1aWxkZXJ9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5UeXBlMUZvbnQ9dm9pZCAwO3ZhciByPWEoMzUpLG49YSgyKSxpPWEoMzgpLHM9YSgzKSxvPWEoOCksYz1hKDQ5KTtmdW5jdGlvbiBmaW5kQmxvY2soZSx0LGEpe2NvbnN0IHI9ZS5sZW5ndGgsbj10Lmxlbmd0aCxpPXItbjtsZXQgbz1hLGM9ITE7Zm9yKDtvPGk7KXtsZXQgYT0wO2Zvcig7YTxuJiZlW28rYV09PT10W2FdOylhKys7aWYoYT49bil7bys9YTtmb3IoO288ciYmKDAscy5pc1doaXRlU3BhY2UpKGVbb10pOylvKys7Yz0hMDticmVha31vKyt9cmV0dXJue2ZvdW5kOmMsbGVuZ3RoOm99fXQuVHlwZTFGb250PWNsYXNzIFR5cGUxRm9udHtjb25zdHJ1Y3RvcihlLHQsYSl7bGV0IHI9YS5sZW5ndGgxLHM9YS5sZW5ndGgyLGw9dC5wZWVrQnl0ZXMoNik7Y29uc3QgaD0xMjg9PT1sWzBdJiYxPT09bFsxXTtpZihoKXt0LnNraXAoNik7cj1sWzVdPDwyNHxsWzRdPDwxNnxsWzNdPDw4fGxbMl19Y29uc3QgdT1mdW5jdGlvbiBnZXRIZWFkZXJCbG9jayhlLHQpe2NvbnN0IGE9WzEwMSwxMDEsMTIwLDEwMSw5OV0scj1lLnBvcztsZXQgaSxzLGMsbDt0cnl7aT1lLmdldEJ5dGVzKHQpO3M9aS5sZW5ndGh9Y2F0Y2h7fWlmKHM9PT10KXtjPWZpbmRCbG9jayhpLGEsdC0yKmEubGVuZ3RoKTtpZihjLmZvdW5kJiZjLmxlbmd0aD09PXQpcmV0dXJue3N0cmVhbTpuZXcgby5TdHJlYW0oaSksbGVuZ3RoOnR9fSgwLG4ud2FybikoJ0ludmFsaWQgIkxlbmd0aDEiIHByb3BlcnR5IGluIFR5cGUxIGZvbnQgLS0gdHJ5aW5nIHRvIHJlY292ZXIuJyk7ZS5wb3M9cjtmb3IoOzspe2M9ZmluZEJsb2NrKGUucGVla0J5dGVzKDIwNDgpLGEsMCk7aWYoMD09PWMubGVuZ3RoKWJyZWFrO2UucG9zKz1jLmxlbmd0aDtpZihjLmZvdW5kKXtsPWUucG9zLXI7YnJlYWt9fWUucG9zPXI7aWYobClyZXR1cm57c3RyZWFtOm5ldyBvLlN0cmVhbShlLmdldEJ5dGVzKGwpKSxsZW5ndGg6bH07KDAsbi53YXJuKSgnVW5hYmxlIHRvIHJlY292ZXIgIkxlbmd0aDEiIHByb3BlcnR5IGluIFR5cGUxIGZvbnQgLS0gdXNpbmcgYXMgaXMuJyk7cmV0dXJue3N0cmVhbTpuZXcgby5TdHJlYW0oZS5nZXRCeXRlcyh0KSksbGVuZ3RoOnR9fSh0LHIpO25ldyBjLlR5cGUxUGFyc2VyKHUuc3RyZWFtLCExLGkuU0VBQ19BTkFMWVNJU19FTkFCTEVEKS5leHRyYWN0Rm9udEhlYWRlcihhKTtpZihoKXtsPXQuZ2V0Qnl0ZXMoNik7cz1sWzVdPDwyNHxsWzRdPDwxNnxsWzNdPDw4fGxbMl19Y29uc3QgZD1mdW5jdGlvbiBnZXRFZXhlY0Jsb2NrKGUsdCl7Y29uc3QgYT1lLmdldEJ5dGVzKCk7aWYoMD09PWEubGVuZ3RoKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJnZXRFZXhlY0Jsb2NrIC0gbm8gZm9udCBwcm9ncmFtIGZvdW5kLiIpO3JldHVybntzdHJlYW06bmV3IG8uU3RyZWFtKGEpLGxlbmd0aDphLmxlbmd0aH19KHQpLGY9bmV3IGMuVHlwZTFQYXJzZXIoZC5zdHJlYW0sITAsaS5TRUFDX0FOQUxZU0lTX0VOQUJMRUQpLmV4dHJhY3RGb250UHJvZ3JhbShhKTtmb3IoY29uc3QgZSBpbiBmLnByb3BlcnRpZXMpYVtlXT1mLnByb3BlcnRpZXNbZV07Y29uc3QgZz1mLmNoYXJzdHJpbmdzLHA9dGhpcy5nZXRUeXBlMkNoYXJzdHJpbmdzKGcpLG09dGhpcy5nZXRUeXBlMlN1YnJzKGYuc3VicnMpO3RoaXMuY2hhcnN0cmluZ3M9Zzt0aGlzLmRhdGE9dGhpcy53cmFwKGUscCx0aGlzLmNoYXJzdHJpbmdzLG0sYSk7dGhpcy5zZWFjcz10aGlzLmdldFNlYWNzKGYuY2hhcnN0cmluZ3MpfWdldCBudW1HbHlwaHMoKXtyZXR1cm4gdGhpcy5jaGFyc3RyaW5ncy5sZW5ndGgrMX1nZXRDaGFyc2V0KCl7Y29uc3QgZT1bIi5ub3RkZWYiXTtmb3IoY29uc3R7Z2x5cGhOYW1lOnR9b2YgdGhpcy5jaGFyc3RyaW5ncyllLnB1c2godCk7cmV0dXJuIGV9Z2V0R2x5cGhNYXBwaW5nKGUpe2NvbnN0IHQ9dGhpcy5jaGFyc3RyaW5ncztpZihlLmNvbXBvc2l0ZSl7Y29uc3QgYT1PYmplY3QuY3JlYXRlKG51bGwpO2ZvcihsZXQgcj0wLG49dC5sZW5ndGg7cjxuO3IrKyl7YVtlLmNNYXAuY2hhckNvZGVPZihyKV09cisxfXJldHVybiBhfWNvbnN0IGE9WyIubm90ZGVmIl07bGV0IHIsbjtmb3Iobj0wO248dC5sZW5ndGg7bisrKWEucHVzaCh0W25dLmdseXBoTmFtZSk7Y29uc3Qgcz1lLmJ1aWx0SW5FbmNvZGluZztpZihzKXtyPU9iamVjdC5jcmVhdGUobnVsbCk7Zm9yKGNvbnN0IGUgaW4gcyl7bj1hLmluZGV4T2Yoc1tlXSk7bj49MCYmKHJbZV09bil9fXJldHVybigwLGkudHlwZTFGb250R2x5cGhNYXBwaW5nKShlLHIsYSl9aGFzR2x5cGhJZChlKXtpZihlPDB8fGU+PXRoaXMubnVtR2x5cGhzKXJldHVybiExO2lmKDA9PT1lKXJldHVybiEwO3JldHVybiB0aGlzLmNoYXJzdHJpbmdzW2UtMV0uY2hhcnN0cmluZy5sZW5ndGg+MH1nZXRTZWFjcyhlKXtjb25zdCB0PVtdO2ZvcihsZXQgYT0wLHI9ZS5sZW5ndGg7YTxyO2ErKyl7Y29uc3Qgcj1lW2FdO3Iuc2VhYyYmKHRbYSsxXT1yLnNlYWMpfXJldHVybiB0fWdldFR5cGUyQ2hhcnN0cmluZ3MoZSl7Y29uc3QgdD1bXTtmb3IoY29uc3QgYSBvZiBlKXQucHVzaChhLmNoYXJzdHJpbmcpO3JldHVybiB0fWdldFR5cGUyU3VicnMoZSl7bGV0IHQ9MDtjb25zdCBhPWUubGVuZ3RoO3Q9YTwxMTMzPzEwNzphPDMzNzY5PzExMzE6MzI3Njg7Y29uc3Qgcj1bXTtsZXQgbjtmb3Iobj0wO248dDtuKyspci5wdXNoKFsxMV0pO2ZvcihuPTA7bjxhO24rKylyLnB1c2goZVtuXSk7cmV0dXJuIHJ9d3JhcChlLHQsYSxuLGkpe2NvbnN0IHM9bmV3IHIuQ0ZGO3MuaGVhZGVyPW5ldyByLkNGRkhlYWRlcigxLDAsNCw0KTtzLm5hbWVzPVtlXTtjb25zdCBvPW5ldyByLkNGRlRvcERpY3Q7by5zZXRCeU5hbWUoInZlcnNpb24iLDM5MSk7by5zZXRCeU5hbWUoIk5vdGljZSIsMzkyKTtvLnNldEJ5TmFtZSgiRnVsbE5hbWUiLDM5Myk7by5zZXRCeU5hbWUoIkZhbWlseU5hbWUiLDM5NCk7by5zZXRCeU5hbWUoIldlaWdodCIsMzk1KTtvLnNldEJ5TmFtZSgiRW5jb2RpbmciLG51bGwpO28uc2V0QnlOYW1lKCJGb250TWF0cml4IixpLmZvbnRNYXRyaXgpO28uc2V0QnlOYW1lKCJGb250QkJveCIsaS5iYm94KTtvLnNldEJ5TmFtZSgiY2hhcnNldCIsbnVsbCk7by5zZXRCeU5hbWUoIkNoYXJTdHJpbmdzIixudWxsKTtvLnNldEJ5TmFtZSgiUHJpdmF0ZSIsbnVsbCk7cy50b3BEaWN0PW87Y29uc3QgYz1uZXcgci5DRkZTdHJpbmdzO2MuYWRkKCJWZXJzaW9uIDAuMTEiKTtjLmFkZCgiU2VlIG9yaWdpbmFsIG5vdGljZSIpO2MuYWRkKGUpO2MuYWRkKGUpO2MuYWRkKCJNZWRpdW0iKTtzLnN0cmluZ3M9YztzLmdsb2JhbFN1YnJJbmRleD1uZXcgci5DRkZJbmRleDtjb25zdCBsPXQubGVuZ3RoLGg9WyIubm90ZGVmIl07bGV0IHUsZDtmb3IodT0wO3U8bDt1Kyspe2NvbnN0IGU9YVt1XS5nbHlwaE5hbWU7LTE9PT1yLkNGRlN0YW5kYXJkU3RyaW5ncy5pbmRleE9mKGUpJiZjLmFkZChlKTtoLnB1c2goZSl9cy5jaGFyc2V0PW5ldyByLkNGRkNoYXJzZXQoITEsMCxoKTtjb25zdCBmPW5ldyByLkNGRkluZGV4O2YuYWRkKFsxMzksMTRdKTtmb3IodT0wO3U8bDt1KyspZi5hZGQodFt1XSk7cy5jaGFyU3RyaW5ncz1mO2NvbnN0IGc9bmV3IHIuQ0ZGUHJpdmF0ZURpY3Q7Zy5zZXRCeU5hbWUoIlN1YnJzIixudWxsKTtjb25zdCBwPVsiQmx1ZVZhbHVlcyIsIk90aGVyQmx1ZXMiLCJGYW1pbHlCbHVlcyIsIkZhbWlseU90aGVyQmx1ZXMiLCJTdGVtU25hcEgiLCJTdGVtU25hcFYiLCJCbHVlU2hpZnQiLCJCbHVlRnV6eiIsIkJsdWVTY2FsZSIsIkxhbmd1YWdlR3JvdXAiLCJFeHBhbnNpb25GYWN0b3IiLCJGb3JjZUJvbGQiLCJTdGRIVyIsIlN0ZFZXIl07Zm9yKHU9MCxkPXAubGVuZ3RoO3U8ZDt1Kyspe2NvbnN0IGU9cFt1XTtpZighKGUgaW4gaS5wcml2YXRlRGF0YSkpY29udGludWU7Y29uc3QgdD1pLnByaXZhdGVEYXRhW2VdO2lmKEFycmF5LmlzQXJyYXkodCkpZm9yKGxldCBlPXQubGVuZ3RoLTE7ZT4wO2UtLSl0W2VdLT10W2UtMV07Zy5zZXRCeU5hbWUoZSx0KX1zLnRvcERpY3QucHJpdmF0ZURpY3Q9Zztjb25zdCBtPW5ldyByLkNGRkluZGV4O2Zvcih1PTAsZD1uLmxlbmd0aDt1PGQ7dSsrKW0uYWRkKG5bdV0pO2cuc3VicnNJbmRleD1tO3JldHVybiBuZXcgci5DRkZDb21waWxlcihzKS5jb21waWxlKCl9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlR5cGUxUGFyc2VyPXZvaWQgMDt2YXIgcj1hKDM3KSxuPWEoMyksaT1hKDgpLHM9YSgyKTtjb25zdCBvPVs0XSxjPVs1XSxsPVs2XSxoPVs3XSx1PVs4XSxkPVsxMiwzNV0sZj1bMTRdLGc9WzIxXSxwPVsyMl0sbT1bMzBdLGI9WzMxXTtjbGFzcyBUeXBlMUNoYXJTdHJpbmd7Y29uc3RydWN0b3IoKXt0aGlzLndpZHRoPTA7dGhpcy5sc2I9MDt0aGlzLmZsZXhpbmc9ITE7dGhpcy5vdXRwdXQ9W107dGhpcy5zdGFjaz1bXX1jb252ZXJ0KGUsdCxhKXtjb25zdCByPWUubGVuZ3RoO2xldCBuLGkseSx3PSExO2ZvcihsZXQgUz0wO1M8cjtTKyspe2xldCByPWVbU107aWYocjwzMil7MTI9PT1yJiYocj0ocjw8OCkrZVsrK1NdKTtzd2l0Y2gocil7Y2FzZSAxOmNhc2UgMzpjYXNlIDk6Y2FzZSAzMDcyOmNhc2UgMzA3MzpjYXNlIDMwNzQ6Y2FzZSAzMTA1OnRoaXMuc3RhY2s9W107YnJlYWs7Y2FzZSA0OmlmKHRoaXMuZmxleGluZyl7aWYodGhpcy5zdGFjay5sZW5ndGg8MSl7dz0hMDticmVha31jb25zdCBlPXRoaXMuc3RhY2sucG9wKCk7dGhpcy5zdGFjay5wdXNoKDAsZSk7YnJlYWt9dz10aGlzLmV4ZWN1dGVDb21tYW5kKDEsbyk7YnJlYWs7Y2FzZSA1Onc9dGhpcy5leGVjdXRlQ29tbWFuZCgyLGMpO2JyZWFrO2Nhc2UgNjp3PXRoaXMuZXhlY3V0ZUNvbW1hbmQoMSxsKTticmVhaztjYXNlIDc6dz10aGlzLmV4ZWN1dGVDb21tYW5kKDEsaCk7YnJlYWs7Y2FzZSA4Onc9dGhpcy5leGVjdXRlQ29tbWFuZCg2LHUpO2JyZWFrO2Nhc2UgMTA6aWYodGhpcy5zdGFjay5sZW5ndGg8MSl7dz0hMDticmVha315PXRoaXMuc3RhY2sucG9wKCk7aWYoIXRbeV0pe3c9ITA7YnJlYWt9dz10aGlzLmNvbnZlcnQodFt5XSx0LGEpO2JyZWFrO2Nhc2UgMTE6cmV0dXJuIHc7Y2FzZSAxMzppZih0aGlzLnN0YWNrLmxlbmd0aDwyKXt3PSEwO2JyZWFrfW49dGhpcy5zdGFjay5wb3AoKTtpPXRoaXMuc3RhY2sucG9wKCk7dGhpcy5sc2I9aTt0aGlzLndpZHRoPW47dGhpcy5zdGFjay5wdXNoKG4saSk7dz10aGlzLmV4ZWN1dGVDb21tYW5kKDIscCk7YnJlYWs7Y2FzZSAxNDp0aGlzLm91dHB1dC5wdXNoKGZbMF0pO2JyZWFrO2Nhc2UgMjE6aWYodGhpcy5mbGV4aW5nKWJyZWFrO3c9dGhpcy5leGVjdXRlQ29tbWFuZCgyLGcpO2JyZWFrO2Nhc2UgMjI6aWYodGhpcy5mbGV4aW5nKXt0aGlzLnN0YWNrLnB1c2goMCk7YnJlYWt9dz10aGlzLmV4ZWN1dGVDb21tYW5kKDEscCk7YnJlYWs7Y2FzZSAzMDp3PXRoaXMuZXhlY3V0ZUNvbW1hbmQoNCxtKTticmVhaztjYXNlIDMxOnc9dGhpcy5leGVjdXRlQ29tbWFuZCg0LGIpO2JyZWFrO2Nhc2UgMzA3ODppZihhKXtjb25zdCBlPXRoaXMuc3RhY2suYXQoLTUpO3RoaXMuc2VhYz10aGlzLnN0YWNrLnNwbGljZSgtNCw0KTt0aGlzLnNlYWNbMF0rPXRoaXMubHNiLWU7dz10aGlzLmV4ZWN1dGVDb21tYW5kKDAsZil9ZWxzZSB3PXRoaXMuZXhlY3V0ZUNvbW1hbmQoNCxmKTticmVhaztjYXNlIDMwNzk6aWYodGhpcy5zdGFjay5sZW5ndGg8NCl7dz0hMDticmVha310aGlzLnN0YWNrLnBvcCgpO249dGhpcy5zdGFjay5wb3AoKTtjb25zdCBlPXRoaXMuc3RhY2sucG9wKCk7aT10aGlzLnN0YWNrLnBvcCgpO3RoaXMubHNiPWk7dGhpcy53aWR0aD1uO3RoaXMuc3RhY2sucHVzaChuLGksZSk7dz10aGlzLmV4ZWN1dGVDb21tYW5kKDMsZyk7YnJlYWs7Y2FzZSAzMDg0OmlmKHRoaXMuc3RhY2subGVuZ3RoPDIpe3c9ITA7YnJlYWt9Y29uc3QgUz10aGlzLnN0YWNrLnBvcCgpLHg9dGhpcy5zdGFjay5wb3AoKTt0aGlzLnN0YWNrLnB1c2goeC9TKTticmVhaztjYXNlIDMwODg6aWYodGhpcy5zdGFjay5sZW5ndGg8Mil7dz0hMDticmVha315PXRoaXMuc3RhY2sucG9wKCk7Y29uc3QgQz10aGlzLnN0YWNrLnBvcCgpO2lmKDA9PT15JiYzPT09Qyl7Y29uc3QgZT10aGlzLnN0YWNrLnNwbGljZSgtMTcsMTcpO3RoaXMuc3RhY2sucHVzaChlWzJdK2VbMF0sZVszXStlWzFdLGVbNF0sZVs1XSxlWzZdLGVbN10sZVs4XSxlWzldLGVbMTBdLGVbMTFdLGVbMTJdLGVbMTNdLGVbMTRdKTt3PXRoaXMuZXhlY3V0ZUNvbW1hbmQoMTMsZCwhMCk7dGhpcy5mbGV4aW5nPSExO3RoaXMuc3RhY2sucHVzaChlWzE1XSxlWzE2XSl9ZWxzZSAxPT09eSYmMD09PUMmJih0aGlzLmZsZXhpbmc9ITApO2JyZWFrO2Nhc2UgMzA4OTpicmVhaztkZWZhdWx0OigwLHMud2FybikoJ1Vua25vd24gdHlwZSAxIGNoYXJzdHJpbmcgY29tbWFuZCBvZiAiJytyKyciJyl9aWYodylicmVha31lbHNle3I8PTI0Nj9yLT0xMzk6cj1yPD0yNTA/MjU2KihyLTI0NykrZVsrK1NdKzEwODpyPD0yNTQ/LTI1Niooci0yNTEpLWVbKytTXS0xMDg6KDI1NSZlWysrU10pPDwyNHwoMjU1JmVbKytTXSk8PDE2fCgyNTUmZVsrK1NdKTw8OHwoMjU1JmVbKytTXSk8PDA7dGhpcy5zdGFjay5wdXNoKHIpfX1yZXR1cm4gd31leGVjdXRlQ29tbWFuZChlLHQsYSl7Y29uc3Qgcj10aGlzLnN0YWNrLmxlbmd0aDtpZihlPnIpcmV0dXJuITA7Y29uc3Qgbj1yLWU7Zm9yKGxldCBlPW47ZTxyO2UrKyl7bGV0IHQ9dGhpcy5zdGFja1tlXTtpZihOdW1iZXIuaXNJbnRlZ2VyKHQpKXRoaXMub3V0cHV0LnB1c2goMjgsdD4+OCYyNTUsMjU1JnQpO2Vsc2V7dD02NTUzNip0fDA7dGhpcy5vdXRwdXQucHVzaCgyNTUsdD4+MjQmMjU1LHQ+PjE2JjI1NSx0Pj44JjI1NSwyNTUmdCl9fXRoaXMub3V0cHV0LnB1c2goLi4udCk7YT90aGlzLnN0YWNrLnNwbGljZShuLGUpOnRoaXMuc3RhY2subGVuZ3RoPTA7cmV0dXJuITF9fWZ1bmN0aW9uIGlzSGV4RGlnaXQoZSl7cmV0dXJuIGU+PTQ4JiZlPD01N3x8ZT49NjUmJmU8PTcwfHxlPj05NyYmZTw9MTAyfWZ1bmN0aW9uIGRlY3J5cHQoZSx0LGEpe2lmKGE+PWUubGVuZ3RoKXJldHVybiBuZXcgVWludDhBcnJheSgwKTtsZXQgcixuLGk9MHx0O2ZvcihyPTA7cjxhO3IrKylpPTUyODQ1KihlW3JdK2kpKzIyNzE5JjY1NTM1O2NvbnN0IHM9ZS5sZW5ndGgtYSxvPW5ldyBVaW50OEFycmF5KHMpO2ZvcihyPWEsbj0wO248cztyKyssbisrKXtjb25zdCB0PWVbcl07b1tuXT10Xmk+Pjg7aT01Mjg0NSoodCtpKSsyMjcxOSY2NTUzNX1yZXR1cm4gb31mdW5jdGlvbiBpc1NwZWNpYWwoZSl7cmV0dXJuIDQ3PT09ZXx8OTE9PT1lfHw5Mz09PWV8fDEyMz09PWV8fDEyNT09PWV8fDQwPT09ZXx8NDE9PT1lfXQuVHlwZTFQYXJzZXI9Y2xhc3MgVHlwZTFQYXJzZXJ7Y29uc3RydWN0b3IoZSx0LGEpe2lmKHQpe2NvbnN0IHQ9ZS5nZXRCeXRlcygpLGE9ISgoaXNIZXhEaWdpdCh0WzBdKXx8KDAsbi5pc1doaXRlU3BhY2UpKHRbMF0pKSYmaXNIZXhEaWdpdCh0WzFdKSYmaXNIZXhEaWdpdCh0WzJdKSYmaXNIZXhEaWdpdCh0WzNdKSYmaXNIZXhEaWdpdCh0WzRdKSYmaXNIZXhEaWdpdCh0WzVdKSYmaXNIZXhEaWdpdCh0WzZdKSYmaXNIZXhEaWdpdCh0WzddKSk7ZT1uZXcgaS5TdHJlYW0oYT9kZWNyeXB0KHQsNTU2NjUsNCk6ZnVuY3Rpb24gZGVjcnlwdEFzY2lpKGUsdCxhKXtsZXQgcj0wfHQ7Y29uc3Qgbj1lLmxlbmd0aCxpPW5ldyBVaW50OEFycmF5KG4+Pj4xKTtsZXQgcyxvO2ZvcihzPTAsbz0wO3M8bjtzKyspe2NvbnN0IHQ9ZVtzXTtpZighaXNIZXhEaWdpdCh0KSljb250aW51ZTtzKys7bGV0IGE7Zm9yKDtzPG4mJiFpc0hleERpZ2l0KGE9ZVtzXSk7KXMrKztpZihzPG4pe2NvbnN0IGU9cGFyc2VJbnQoU3RyaW5nLmZyb21DaGFyQ29kZSh0LGEpLDE2KTtpW28rK109ZV5yPj44O3I9NTI4NDUqKGUrcikrMjI3MTkmNjU1MzV9fXJldHVybiBpLnNsaWNlKGEsbyl9KHQsNTU2NjUsNCkpfXRoaXMuc2VhY0FuYWx5c2lzRW5hYmxlZD0hIWE7dGhpcy5zdHJlYW09ZTt0aGlzLm5leHRDaGFyKCl9cmVhZE51bWJlckFycmF5KCl7dGhpcy5nZXRUb2tlbigpO2NvbnN0IGU9W107Zm9yKDs7KXtjb25zdCB0PXRoaXMuZ2V0VG9rZW4oKTtpZihudWxsPT09dHx8Il0iPT09dHx8In0iPT09dClicmVhaztlLnB1c2gocGFyc2VGbG9hdCh0fHwwKSl9cmV0dXJuIGV9cmVhZE51bWJlcigpe2NvbnN0IGU9dGhpcy5nZXRUb2tlbigpO3JldHVybiBwYXJzZUZsb2F0KGV8fDApfXJlYWRJbnQoKXtjb25zdCBlPXRoaXMuZ2V0VG9rZW4oKTtyZXR1cm4gMHxwYXJzZUludChlfHwwLDEwKX1yZWFkQm9vbGVhbigpe3JldHVybiJ0cnVlIj09PXRoaXMuZ2V0VG9rZW4oKT8xOjB9bmV4dENoYXIoKXtyZXR1cm4gdGhpcy5jdXJyZW50Q2hhcj10aGlzLnN0cmVhbS5nZXRCeXRlKCl9cHJldkNoYXIoKXt0aGlzLnN0cmVhbS5za2lwKC0yKTtyZXR1cm4gdGhpcy5jdXJyZW50Q2hhcj10aGlzLnN0cmVhbS5nZXRCeXRlKCl9Z2V0VG9rZW4oKXtsZXQgZT0hMSx0PXRoaXMuY3VycmVudENoYXI7Zm9yKDs7KXtpZigtMT09PXQpcmV0dXJuIG51bGw7aWYoZSkxMCE9PXQmJjEzIT09dHx8KGU9ITEpO2Vsc2UgaWYoMzc9PT10KWU9ITA7ZWxzZSBpZighKDAsbi5pc1doaXRlU3BhY2UpKHQpKWJyZWFrO3Q9dGhpcy5uZXh0Q2hhcigpfWlmKGlzU3BlY2lhbCh0KSl7dGhpcy5uZXh0Q2hhcigpO3JldHVybiBTdHJpbmcuZnJvbUNoYXJDb2RlKHQpfWxldCBhPSIiO2Rve2ErPVN0cmluZy5mcm9tQ2hhckNvZGUodCk7dD10aGlzLm5leHRDaGFyKCl9d2hpbGUodD49MCYmISgwLG4uaXNXaGl0ZVNwYWNlKSh0KSYmIWlzU3BlY2lhbCh0KSk7cmV0dXJuIGF9cmVhZENoYXJTdHJpbmdzKGUsdCl7cmV0dXJuLTE9PT10P2U6ZGVjcnlwdChlLDQzMzAsdCl9ZXh0cmFjdEZvbnRQcm9ncmFtKGUpe2NvbnN0IHQ9dGhpcy5zdHJlYW0sYT1bXSxyPVtdLG49T2JqZWN0LmNyZWF0ZShudWxsKTtuLmxlbklWPTQ7Y29uc3QgaT17c3VicnM6W10sY2hhcnN0cmluZ3M6W10scHJvcGVydGllczp7cHJpdmF0ZURhdGE6bn19O2xldCBzLG8sYyxsO2Zvcig7bnVsbCE9PShzPXRoaXMuZ2V0VG9rZW4oKSk7KWlmKCIvIj09PXMpe3M9dGhpcy5nZXRUb2tlbigpO3N3aXRjaChzKXtjYXNlIkNoYXJTdHJpbmdzIjp0aGlzLmdldFRva2VuKCk7dGhpcy5nZXRUb2tlbigpO3RoaXMuZ2V0VG9rZW4oKTt0aGlzLmdldFRva2VuKCk7Zm9yKDs7KXtzPXRoaXMuZ2V0VG9rZW4oKTtpZihudWxsPT09c3x8ImVuZCI9PT1zKWJyZWFrO2lmKCIvIiE9PXMpY29udGludWU7Y29uc3QgZT10aGlzLmdldFRva2VuKCk7bz10aGlzLnJlYWRJbnQoKTt0aGlzLmdldFRva2VuKCk7Yz1vPjA/dC5nZXRCeXRlcyhvKTpuZXcgVWludDhBcnJheSgwKTtsPWkucHJvcGVydGllcy5wcml2YXRlRGF0YS5sZW5JVjtjb25zdCBhPXRoaXMucmVhZENoYXJTdHJpbmdzKGMsbCk7dGhpcy5uZXh0Q2hhcigpO3M9dGhpcy5nZXRUb2tlbigpOyJub2FjY2VzcyI9PT1zP3RoaXMuZ2V0VG9rZW4oKToiLyI9PT1zJiZ0aGlzLnByZXZDaGFyKCk7ci5wdXNoKHtnbHlwaDplLGVuY29kZWQ6YX0pfWJyZWFrO2Nhc2UiU3VicnMiOnRoaXMucmVhZEludCgpO3RoaXMuZ2V0VG9rZW4oKTtmb3IoOyJkdXAiPT09dGhpcy5nZXRUb2tlbigpOyl7Y29uc3QgZT10aGlzLnJlYWRJbnQoKTtvPXRoaXMucmVhZEludCgpO3RoaXMuZ2V0VG9rZW4oKTtjPW8+MD90LmdldEJ5dGVzKG8pOm5ldyBVaW50OEFycmF5KDApO2w9aS5wcm9wZXJ0aWVzLnByaXZhdGVEYXRhLmxlbklWO2NvbnN0IHI9dGhpcy5yZWFkQ2hhclN0cmluZ3MoYyxsKTt0aGlzLm5leHRDaGFyKCk7cz10aGlzLmdldFRva2VuKCk7Im5vYWNjZXNzIj09PXMmJnRoaXMuZ2V0VG9rZW4oKTthW2VdPXJ9YnJlYWs7Y2FzZSJCbHVlVmFsdWVzIjpjYXNlIk90aGVyQmx1ZXMiOmNhc2UiRmFtaWx5Qmx1ZXMiOmNhc2UiRmFtaWx5T3RoZXJCbHVlcyI6Y29uc3QgZT10aGlzLnJlYWROdW1iZXJBcnJheSgpO2UubGVuZ3RoPjAmJmUubGVuZ3RoLDA7YnJlYWs7Y2FzZSJTdGVtU25hcEgiOmNhc2UiU3RlbVNuYXBWIjppLnByb3BlcnRpZXMucHJpdmF0ZURhdGFbc109dGhpcy5yZWFkTnVtYmVyQXJyYXkoKTticmVhaztjYXNlIlN0ZEhXIjpjYXNlIlN0ZFZXIjppLnByb3BlcnRpZXMucHJpdmF0ZURhdGFbc109dGhpcy5yZWFkTnVtYmVyQXJyYXkoKVswXTticmVhaztjYXNlIkJsdWVTaGlmdCI6Y2FzZSJsZW5JViI6Y2FzZSJCbHVlRnV6eiI6Y2FzZSJCbHVlU2NhbGUiOmNhc2UiTGFuZ3VhZ2VHcm91cCI6aS5wcm9wZXJ0aWVzLnByaXZhdGVEYXRhW3NdPXRoaXMucmVhZE51bWJlcigpO2JyZWFrO2Nhc2UiRXhwYW5zaW9uRmFjdG9yIjppLnByb3BlcnRpZXMucHJpdmF0ZURhdGFbc109dGhpcy5yZWFkTnVtYmVyKCl8fC4wNjticmVhaztjYXNlIkZvcmNlQm9sZCI6aS5wcm9wZXJ0aWVzLnByaXZhdGVEYXRhW3NdPXRoaXMucmVhZEJvb2xlYW4oKX19Zm9yKGNvbnN0e2VuY29kZWQ6dCxnbHlwaDpufW9mIHIpe2NvbnN0IHI9bmV3IFR5cGUxQ2hhclN0cmluZyxzPXIuY29udmVydCh0LGEsdGhpcy5zZWFjQW5hbHlzaXNFbmFibGVkKTtsZXQgbz1yLm91dHB1dDtzJiYobz1bMTRdKTtjb25zdCBjPXtnbHlwaE5hbWU6bixjaGFyc3RyaW5nOm8sd2lkdGg6ci53aWR0aCxsc2I6ci5sc2Isc2VhYzpyLnNlYWN9OyIubm90ZGVmIj09PW4/aS5jaGFyc3RyaW5ncy51bnNoaWZ0KGMpOmkuY2hhcnN0cmluZ3MucHVzaChjKTtpZihlLmJ1aWx0SW5FbmNvZGluZyl7Y29uc3QgdD1lLmJ1aWx0SW5FbmNvZGluZy5pbmRleE9mKG4pO3Q+LTEmJnZvaWQgMD09PWUud2lkdGhzW3RdJiZ0Pj1lLmZpcnN0Q2hhciYmdDw9ZS5sYXN0Q2hhciYmKGUud2lkdGhzW3RdPXIud2lkdGgpfX1yZXR1cm4gaX1leHRyYWN0Rm9udEhlYWRlcihlKXtsZXQgdDtmb3IoO251bGwhPT0odD10aGlzLmdldFRva2VuKCkpOylpZigiLyI9PT10KXt0PXRoaXMuZ2V0VG9rZW4oKTtzd2l0Y2godCl7Y2FzZSJGb250TWF0cml4Ijpjb25zdCBhPXRoaXMucmVhZE51bWJlckFycmF5KCk7ZS5mb250TWF0cml4PWE7YnJlYWs7Y2FzZSJFbmNvZGluZyI6Y29uc3Qgbj10aGlzLmdldFRva2VuKCk7bGV0IGk7aWYoL15cZCskLy50ZXN0KG4pKXtpPVtdO2NvbnN0IGU9MHxwYXJzZUludChuLDEwKTt0aGlzLmdldFRva2VuKCk7Zm9yKGxldCBhPTA7YTxlO2ErKyl7dD10aGlzLmdldFRva2VuKCk7Zm9yKDsiZHVwIiE9PXQmJiJkZWYiIT09dDspe3Q9dGhpcy5nZXRUb2tlbigpO2lmKG51bGw9PT10KXJldHVybn1pZigiZGVmIj09PXQpYnJlYWs7Y29uc3QgZT10aGlzLnJlYWRJbnQoKTt0aGlzLmdldFRva2VuKCk7Y29uc3QgYT10aGlzLmdldFRva2VuKCk7aVtlXT1hO3RoaXMuZ2V0VG9rZW4oKX19ZWxzZSBpPSgwLHIuZ2V0RW5jb2RpbmcpKG4pO2UuYnVpbHRJbkVuY29kaW5nPWk7YnJlYWs7Y2FzZSJGb250QkJveCI6Y29uc3Qgcz10aGlzLnJlYWROdW1iZXJBcnJheSgpO2UuYXNjZW50PU1hdGgubWF4KHNbM10sc1sxXSk7ZS5kZXNjZW50PU1hdGgubWluKHNbMV0sc1szXSk7ZS5hc2NlbnRTY2FsZWQ9ITB9fX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuUGF0dGVybj12b2lkIDA7dC5jbGVhclBhdHRlcm5DYWNoZXM9ZnVuY3Rpb24gY2xlYXJQYXR0ZXJuQ2FjaGVzKCl7Zj1PYmplY3QuY3JlYXRlKG51bGwpfTt0LmdldFRpbGluZ1BhdHRlcm5JUj1mdW5jdGlvbiBnZXRUaWxpbmdQYXR0ZXJuSVIoZSx0LGEpe2NvbnN0IG49dC5nZXRBcnJheSgiTWF0cml4IiksaT1yLlV0aWwubm9ybWFsaXplUmVjdCh0LmdldEFycmF5KCJCQm94IikpLHM9dC5nZXQoIlhTdGVwIiksbz10LmdldCgiWVN0ZXAiKSxjPXQuZ2V0KCJQYWludFR5cGUiKSxsPXQuZ2V0KCJUaWxpbmdUeXBlIik7aWYoaVsyXS1pWzBdPT0wfHxpWzNdLWlbMV09PTApdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYEludmFsaWQgZ2V0VGlsaW5nUGF0dGVybklSIC9CQm94IGFycmF5OiBbJHtpfV0uYCk7cmV0dXJuWyJUaWxpbmdQYXR0ZXJuIixhLGUsbixpLHMsbyxjLGxdfTt2YXIgcj1hKDIpLG49YSg1KSxpPWEoMTIpLHM9YSgzKTtjb25zdCBvPTIsYz0zLGw9NCxoPTUsdT02LGQ9Nzt0LlBhdHRlcm49Y2xhc3MgUGF0dGVybntjb25zdHJ1Y3RvcigpeygwLHIudW5yZWFjaGFibGUpKCJDYW5ub3QgaW5pdGlhbGl6ZSBQYXR0ZXJuLiIpfXN0YXRpYyBwYXJzZVNoYWRpbmcoZSx0LGEsaSxmKXtjb25zdCBnPWUgaW5zdGFuY2VvZiBuLkJhc2VTdHJlYW0/ZS5kaWN0OmUscD1nLmdldCgiU2hhZGluZ1R5cGUiKTt0cnl7c3dpdGNoKHApe2Nhc2UgbzpjYXNlIGM6cmV0dXJuIG5ldyBSYWRpYWxBeGlhbFNoYWRpbmcoZyx0LGEsaSxmKTtjYXNlIGw6Y2FzZSBoOmNhc2UgdTpjYXNlIGQ6cmV0dXJuIG5ldyBNZXNoU2hhZGluZyhlLHQsYSxpLGYpO2RlZmF1bHQ6dGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlVuc3VwcG9ydGVkIFNoYWRpbmdUeXBlOiAiK3ApfX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2Ygcy5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLHIud2FybikoZSk7cmV0dXJuIG5ldyBEdW1teVNoYWRpbmd9fX07Y2xhc3MgQmFzZVNoYWRpbmd7c3RhdGljIFNNQUxMX05VTUJFUj0xZS02O2NvbnN0cnVjdG9yKCl7dGhpcy5jb25zdHJ1Y3Rvcj09PUJhc2VTaGFkaW5nJiYoMCxyLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgQmFzZVNoYWRpbmcuIil9Z2V0SVIoKXsoMCxyLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBnZXRJUmAgY2FsbGVkLiIpfX1jbGFzcyBSYWRpYWxBeGlhbFNoYWRpbmcgZXh0ZW5kcyBCYXNlU2hhZGluZ3tjb25zdHJ1Y3RvcihlLHQsYSxuLHMpe3N1cGVyKCk7dGhpcy5jb29yZHNBcnI9ZS5nZXRBcnJheSgiQ29vcmRzIik7dGhpcy5zaGFkaW5nVHlwZT1lLmdldCgiU2hhZGluZ1R5cGUiKTtjb25zdCBvPWkuQ29sb3JTcGFjZS5wYXJzZSh7Y3M6ZS5nZXRSYXcoIkNTIil8fGUuZ2V0UmF3KCJDb2xvclNwYWNlIikseHJlZjp0LHJlc291cmNlczphLHBkZkZ1bmN0aW9uRmFjdG9yeTpuLGxvY2FsQ29sb3JTcGFjZUNhY2hlOnN9KSxsPWUuZ2V0QXJyYXkoIkJCb3giKTt0aGlzLmJib3g9QXJyYXkuaXNBcnJheShsKSYmND09PWwubGVuZ3RoP3IuVXRpbC5ub3JtYWxpemVSZWN0KGwpOm51bGw7bGV0IGg9MCx1PTE7aWYoZS5oYXMoIkRvbWFpbiIpKXtjb25zdCB0PWUuZ2V0QXJyYXkoIkRvbWFpbiIpO2g9dFswXTt1PXRbMV19bGV0IGQ9ITEsZj0hMTtpZihlLmhhcygiRXh0ZW5kIikpe2NvbnN0IHQ9ZS5nZXRBcnJheSgiRXh0ZW5kIik7ZD10WzBdO2Y9dFsxXX1pZighKHRoaXMuc2hhZGluZ1R5cGUhPT1jfHxkJiZmKSl7Y29uc3RbZSx0LGEsbixpLHNdPXRoaXMuY29vcmRzQXJyLG89TWF0aC5oeXBvdChlLW4sdC1pKTthPD1zK28mJnM8PWErbyYmKDAsci53YXJuKSgiVW5zdXBwb3J0ZWQgcmFkaWFsIGdyYWRpZW50LiIpfXRoaXMuZXh0ZW5kU3RhcnQ9ZDt0aGlzLmV4dGVuZEVuZD1mO2NvbnN0IGc9ZS5nZXRSYXcoIkZ1bmN0aW9uIikscD1uLmNyZWF0ZUZyb21BcnJheShnKSxtPSh1LWgpLzg0MCxiPXRoaXMuY29sb3JTdG9wcz1bXTtpZihoPj11fHxtPD0wKXsoMCxyLmluZm8pKCJCYWQgc2hhZGluZyBkb21haW4uIik7cmV0dXJufWNvbnN0IHk9bmV3IEZsb2F0MzJBcnJheShvLm51bUNvbXBzKSx3PW5ldyBGbG9hdDMyQXJyYXkoMSk7bGV0IFMseD0wO3dbMF09aDtwKHcsMCx5LDApO2xldCBDPW8uZ2V0UmdiKHksMCk7Y29uc3Qgaz1yLlV0aWwubWFrZUhleENvbG9yKENbMF0sQ1sxXSxDWzJdKTtiLnB1c2goWzAsa10pO2xldCB2PTE7d1swXT1oK207cCh3LDAseSwwKTtsZXQgRj1vLmdldFJnYih5LDApLE89RlswXS1DWzBdKzEsVD1GWzFdLUNbMV0rMSxNPUZbMl0tQ1syXSsxLEQ9RlswXS1DWzBdLTEsRT1GWzFdLUNbMV0tMSxOPUZbMl0tQ1syXS0xO2ZvcihsZXQgZT0yO2U8ODQwO2UrKyl7d1swXT1oK2UqbTtwKHcsMCx5LDApO1M9by5nZXRSZ2IoeSwwKTtjb25zdCB0PWUteDtPPU1hdGgubWluKE8sKFNbMF0tQ1swXSsxKS90KTtUPU1hdGgubWluKFQsKFNbMV0tQ1sxXSsxKS90KTtNPU1hdGgubWluKE0sKFNbMl0tQ1syXSsxKS90KTtEPU1hdGgubWF4KEQsKFNbMF0tQ1swXS0xKS90KTtFPU1hdGgubWF4KEUsKFNbMV0tQ1sxXS0xKS90KTtOPU1hdGgubWF4KE4sKFNbMl0tQ1syXS0xKS90KTtpZighKEQ8PU8mJkU8PVQmJk48PU0pKXtjb25zdCBlPXIuVXRpbC5tYWtlSGV4Q29sb3IoRlswXSxGWzFdLEZbMl0pO2IucHVzaChbdi84NDAsZV0pO089U1swXS1GWzBdKzE7VD1TWzFdLUZbMV0rMTtNPVNbMl0tRlsyXSsxO0Q9U1swXS1GWzBdLTE7RT1TWzFdLUZbMV0tMTtOPVNbMl0tRlsyXS0xO3g9djtDPUZ9dj1lO0Y9U31jb25zdCBSPXIuVXRpbC5tYWtlSGV4Q29sb3IoRlswXSxGWzFdLEZbMl0pO2IucHVzaChbMSxSXSk7bGV0IEw9InRyYW5zcGFyZW50IjtpZihlLmhhcygiQmFja2dyb3VuZCIpKXtTPW8uZ2V0UmdiKGUuZ2V0KCJCYWNrZ3JvdW5kIiksMCk7TD1yLlV0aWwubWFrZUhleENvbG9yKFNbMF0sU1sxXSxTWzJdKX1pZighZCl7Yi51bnNoaWZ0KFswLExdKTtiWzFdWzBdKz1CYXNlU2hhZGluZy5TTUFMTF9OVU1CRVJ9aWYoIWYpe2IuYXQoLTEpWzBdLT1CYXNlU2hhZGluZy5TTUFMTF9OVU1CRVI7Yi5wdXNoKFsxLExdKX10aGlzLmNvbG9yU3RvcHM9Yn1nZXRJUigpe2NvbnN0IGU9dGhpcy5jb29yZHNBcnIsdD10aGlzLnNoYWRpbmdUeXBlO2xldCBhLG4saSxzLGw7aWYodD09PW8pe249W2VbMF0sZVsxXV07aT1bZVsyXSxlWzNdXTtzPW51bGw7bD1udWxsO2E9ImF4aWFsIn1lbHNlIGlmKHQ9PT1jKXtuPVtlWzBdLGVbMV1dO2k9W2VbM10sZVs0XV07cz1lWzJdO2w9ZVs1XTthPSJyYWRpYWwifWVsc2UoMCxyLnVucmVhY2hhYmxlKShgZ2V0UGF0dGVybiB0eXBlIHVua25vd246ICR7dH1gKTtyZXR1cm5bIlJhZGlhbEF4aWFsIixhLHRoaXMuYmJveCx0aGlzLmNvbG9yU3RvcHMsbixpLHMsbF19fWNsYXNzIE1lc2hTdHJlYW1SZWFkZXJ7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnN0cmVhbT1lO3RoaXMuY29udGV4dD10O3RoaXMuYnVmZmVyPTA7dGhpcy5idWZmZXJMZW5ndGg9MDtjb25zdCBhPXQubnVtQ29tcHM7dGhpcy50bXBDb21wc0J1Zj1uZXcgRmxvYXQzMkFycmF5KGEpO2NvbnN0IHI9dC5jb2xvclNwYWNlLm51bUNvbXBzO3RoaXMudG1wQ3NDb21wc0J1Zj10LmNvbG9yRm4/bmV3IEZsb2F0MzJBcnJheShyKTp0aGlzLnRtcENvbXBzQnVmfWdldCBoYXNEYXRhKCl7aWYodGhpcy5zdHJlYW0uZW5kKXJldHVybiB0aGlzLnN0cmVhbS5wb3M8dGhpcy5zdHJlYW0uZW5kO2lmKHRoaXMuYnVmZmVyTGVuZ3RoPjApcmV0dXJuITA7Y29uc3QgZT10aGlzLnN0cmVhbS5nZXRCeXRlKCk7aWYoZTwwKXJldHVybiExO3RoaXMuYnVmZmVyPWU7dGhpcy5idWZmZXJMZW5ndGg9ODtyZXR1cm4hMH1yZWFkQml0cyhlKXtsZXQgdD10aGlzLmJ1ZmZlcixhPXRoaXMuYnVmZmVyTGVuZ3RoO2lmKDMyPT09ZSl7aWYoMD09PWEpcmV0dXJuKHRoaXMuc3RyZWFtLmdldEJ5dGUoKTw8MjR8dGhpcy5zdHJlYW0uZ2V0Qnl0ZSgpPDwxNnx0aGlzLnN0cmVhbS5nZXRCeXRlKCk8PDh8dGhpcy5zdHJlYW0uZ2V0Qnl0ZSgpKT4+PjA7dD10PDwyNHx0aGlzLnN0cmVhbS5nZXRCeXRlKCk8PDE2fHRoaXMuc3RyZWFtLmdldEJ5dGUoKTw8OHx0aGlzLnN0cmVhbS5nZXRCeXRlKCk7Y29uc3QgZT10aGlzLnN0cmVhbS5nZXRCeXRlKCk7dGhpcy5idWZmZXI9ZSYoMTw8YSktMTtyZXR1cm4odDw8OC1hfCgyNTUmZSk+PmEpPj4+MH1pZig4PT09ZSYmMD09PWEpcmV0dXJuIHRoaXMuc3RyZWFtLmdldEJ5dGUoKTtmb3IoO2E8ZTspe3Q9dDw8OHx0aGlzLnN0cmVhbS5nZXRCeXRlKCk7YSs9OH1hLT1lO3RoaXMuYnVmZmVyTGVuZ3RoPWE7dGhpcy5idWZmZXI9dCYoMTw8YSktMTtyZXR1cm4gdD4+YX1hbGlnbigpe3RoaXMuYnVmZmVyPTA7dGhpcy5idWZmZXJMZW5ndGg9MH1yZWFkRmxhZygpe3JldHVybiB0aGlzLnJlYWRCaXRzKHRoaXMuY29udGV4dC5iaXRzUGVyRmxhZyl9cmVhZENvb3JkaW5hdGUoKXtjb25zdCBlPXRoaXMuY29udGV4dC5iaXRzUGVyQ29vcmRpbmF0ZSx0PXRoaXMucmVhZEJpdHMoZSksYT10aGlzLnJlYWRCaXRzKGUpLHI9dGhpcy5jb250ZXh0LmRlY29kZSxuPWU8MzI/MS8oKDE8PGUpLTEpOjIuMzI4MzA2NDM2NTM4Njk2M2UtMTA7cmV0dXJuW3QqbiooclsxXS1yWzBdKStyWzBdLGEqbiooclszXS1yWzJdKStyWzJdXX1yZWFkQ29tcG9uZW50cygpe2NvbnN0IGU9dGhpcy5jb250ZXh0Lm51bUNvbXBzLHQ9dGhpcy5jb250ZXh0LmJpdHNQZXJDb21wb25lbnQsYT10PDMyPzEvKCgxPDx0KS0xKToyLjMyODMwNjQzNjUzODY5NjNlLTEwLHI9dGhpcy5jb250ZXh0LmRlY29kZSxuPXRoaXMudG1wQ29tcHNCdWY7Zm9yKGxldCBpPTAscz00O2k8ZTtpKysscys9Mil7Y29uc3QgZT10aGlzLnJlYWRCaXRzKHQpO25baV09ZSphKihyW3MrMV0tcltzXSkrcltzXX1jb25zdCBpPXRoaXMudG1wQ3NDb21wc0J1Zjt0aGlzLmNvbnRleHQuY29sb3JGbiYmdGhpcy5jb250ZXh0LmNvbG9yRm4obiwwLGksMCk7cmV0dXJuIHRoaXMuY29udGV4dC5jb2xvclNwYWNlLmdldFJnYihpLDApfX1sZXQgZj1PYmplY3QuY3JlYXRlKG51bGwpO2Z1bmN0aW9uIGdldEIoZSl7cmV0dXJuIGZbZV18fD1mdW5jdGlvbiBidWlsZEIoZSl7Y29uc3QgdD1bXTtmb3IobGV0IGE9MDthPD1lO2ErKyl7Y29uc3Qgcj1hL2Usbj0xLXI7dC5wdXNoKG5ldyBGbG9hdDMyQXJyYXkoW24qKjMsMypyKm4qKjIsMypyKioyKm4scioqM10pKX1yZXR1cm4gdH0oZSl9Y2xhc3MgTWVzaFNoYWRpbmcgZXh0ZW5kcyBCYXNlU2hhZGluZ3tzdGF0aWMgTUlOX1NQTElUX1BBVENIX0NIVU5LU19BTU9VTlQ9MztzdGF0aWMgTUFYX1NQTElUX1BBVENIX0NIVU5LU19BTU9VTlQ9MjA7c3RhdGljIFRSSUFOR0xFX0RFTlNJVFk9MjA7Y29uc3RydWN0b3IoZSx0LGEscyxvKXtzdXBlcigpO2lmKCEoZSBpbnN0YW5jZW9mIG4uQmFzZVN0cmVhbSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIk1lc2ggZGF0YSBpcyBub3QgYSBzdHJlYW0iKTtjb25zdCBjPWUuZGljdDt0aGlzLnNoYWRpbmdUeXBlPWMuZ2V0KCJTaGFkaW5nVHlwZSIpO2NvbnN0IGY9Yy5nZXRBcnJheSgiQkJveCIpO3RoaXMuYmJveD1BcnJheS5pc0FycmF5KGYpJiY0PT09Zi5sZW5ndGg/ci5VdGlsLm5vcm1hbGl6ZVJlY3QoZik6bnVsbDtjb25zdCBnPWkuQ29sb3JTcGFjZS5wYXJzZSh7Y3M6Yy5nZXRSYXcoIkNTIil8fGMuZ2V0UmF3KCJDb2xvclNwYWNlIikseHJlZjp0LHJlc291cmNlczphLHBkZkZ1bmN0aW9uRmFjdG9yeTpzLGxvY2FsQ29sb3JTcGFjZUNhY2hlOm99KTt0aGlzLmJhY2tncm91bmQ9Yy5oYXMoIkJhY2tncm91bmQiKT9nLmdldFJnYihjLmdldCgiQmFja2dyb3VuZCIpLDApOm51bGw7Y29uc3QgcD1jLmdldFJhdygiRnVuY3Rpb24iKSxtPXA/cy5jcmVhdGVGcm9tQXJyYXkocCk6bnVsbDt0aGlzLmNvb3Jkcz1bXTt0aGlzLmNvbG9ycz1bXTt0aGlzLmZpZ3VyZXM9W107Y29uc3QgYj17Yml0c1BlckNvb3JkaW5hdGU6Yy5nZXQoIkJpdHNQZXJDb29yZGluYXRlIiksYml0c1BlckNvbXBvbmVudDpjLmdldCgiQml0c1BlckNvbXBvbmVudCIpLGJpdHNQZXJGbGFnOmMuZ2V0KCJCaXRzUGVyRmxhZyIpLGRlY29kZTpjLmdldEFycmF5KCJEZWNvZGUiKSxjb2xvckZuOm0sY29sb3JTcGFjZTpnLG51bUNvbXBzOm0/MTpnLm51bUNvbXBzfSx5PW5ldyBNZXNoU3RyZWFtUmVhZGVyKGUsYik7bGV0IHc9ITE7c3dpdGNoKHRoaXMuc2hhZGluZ1R5cGUpe2Nhc2UgbDp0aGlzLl9kZWNvZGVUeXBlNFNoYWRpbmcoeSk7YnJlYWs7Y2FzZSBoOmNvbnN0IGU9MHxjLmdldCgiVmVydGljZXNQZXJSb3ciKTtpZihlPDIpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgVmVydGljZXNQZXJSb3ciKTt0aGlzLl9kZWNvZGVUeXBlNVNoYWRpbmcoeSxlKTticmVhaztjYXNlIHU6dGhpcy5fZGVjb2RlVHlwZTZTaGFkaW5nKHkpO3c9ITA7YnJlYWs7Y2FzZSBkOnRoaXMuX2RlY29kZVR5cGU3U2hhZGluZyh5KTt3PSEwO2JyZWFrO2RlZmF1bHQ6KDAsci51bnJlYWNoYWJsZSkoIlVuc3VwcG9ydGVkIG1lc2ggdHlwZS4iKX1pZih3KXt0aGlzLl91cGRhdGVCb3VuZHMoKTtmb3IobGV0IGU9MCx0PXRoaXMuZmlndXJlcy5sZW5ndGg7ZTx0O2UrKyl0aGlzLl9idWlsZEZpZ3VyZUZyb21QYXRjaChlKX10aGlzLl91cGRhdGVCb3VuZHMoKTt0aGlzLl9wYWNrRGF0YSgpfV9kZWNvZGVUeXBlNFNoYWRpbmcoZSl7Y29uc3QgdD10aGlzLmNvb3JkcyxhPXRoaXMuY29sb3JzLG49W10saT1bXTtsZXQgcz0wO2Zvcig7ZS5oYXNEYXRhOyl7Y29uc3Qgbz1lLnJlYWRGbGFnKCksYz1lLnJlYWRDb29yZGluYXRlKCksbD1lLnJlYWRDb21wb25lbnRzKCk7aWYoMD09PXMpe2lmKCEoMDw9byYmbzw9MikpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlVua25vd24gdHlwZTQgZmxhZyIpO3N3aXRjaChvKXtjYXNlIDA6cz0zO2JyZWFrO2Nhc2UgMTppLnB1c2goaS5hdCgtMiksaS5hdCgtMSkpO3M9MTticmVhaztjYXNlIDI6aS5wdXNoKGkuYXQoLTMpLGkuYXQoLTEpKTtzPTF9bi5wdXNoKG8pfWkucHVzaCh0Lmxlbmd0aCk7dC5wdXNoKGMpO2EucHVzaChsKTtzLS07ZS5hbGlnbigpfXRoaXMuZmlndXJlcy5wdXNoKHt0eXBlOiJ0cmlhbmdsZXMiLGNvb3JkczpuZXcgSW50MzJBcnJheShpKSxjb2xvcnM6bmV3IEludDMyQXJyYXkoaSl9KX1fZGVjb2RlVHlwZTVTaGFkaW5nKGUsdCl7Y29uc3QgYT10aGlzLmNvb3JkcyxyPXRoaXMuY29sb3JzLG49W107Zm9yKDtlLmhhc0RhdGE7KXtjb25zdCB0PWUucmVhZENvb3JkaW5hdGUoKSxpPWUucmVhZENvbXBvbmVudHMoKTtuLnB1c2goYS5sZW5ndGgpO2EucHVzaCh0KTtyLnB1c2goaSl9dGhpcy5maWd1cmVzLnB1c2goe3R5cGU6ImxhdHRpY2UiLGNvb3JkczpuZXcgSW50MzJBcnJheShuKSxjb2xvcnM6bmV3IEludDMyQXJyYXkobiksdmVydGljZXNQZXJSb3c6dH0pfV9kZWNvZGVUeXBlNlNoYWRpbmcoZSl7Y29uc3QgdD10aGlzLmNvb3JkcyxhPXRoaXMuY29sb3JzLG49bmV3IEludDMyQXJyYXkoMTYpLGk9bmV3IEludDMyQXJyYXkoNCk7Zm9yKDtlLmhhc0RhdGE7KXtjb25zdCBzPWUucmVhZEZsYWcoKTtpZighKDA8PXMmJnM8PTMpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJVbmtub3duIHR5cGU2IGZsYWciKTtjb25zdCBvPXQubGVuZ3RoO2ZvcihsZXQgYT0wLHI9MCE9PXM/ODoxMjthPHI7YSsrKXQucHVzaChlLnJlYWRDb29yZGluYXRlKCkpO2NvbnN0IGM9YS5sZW5ndGg7Zm9yKGxldCB0PTAscj0wIT09cz8yOjQ7dDxyO3QrKylhLnB1c2goZS5yZWFkQ29tcG9uZW50cygpKTtsZXQgbCxoLHUsZDtzd2l0Y2gocyl7Y2FzZSAwOm5bMTJdPW8rMztuWzEzXT1vKzQ7blsxNF09bys1O25bMTVdPW8rNjtuWzhdPW8rMjtuWzExXT1vKzc7bls0XT1vKzE7bls3XT1vKzg7blswXT1vO25bMV09bysxMTtuWzJdPW8rMTA7blszXT1vKzk7aVsyXT1jKzE7aVszXT1jKzI7aVswXT1jO2lbMV09YyszO2JyZWFrO2Nhc2UgMTpsPW5bMTJdO2g9blsxM107dT1uWzE0XTtkPW5bMTVdO25bMTJdPWQ7blsxM109byswO25bMTRdPW8rMTtuWzE1XT1vKzI7bls4XT11O25bMTFdPW8rMztuWzRdPWg7bls3XT1vKzQ7blswXT1sO25bMV09bys3O25bMl09bys2O25bM109bys1O2w9aVsyXTtoPWlbM107aVsyXT1oO2lbM109YztpWzBdPWw7aVsxXT1jKzE7YnJlYWs7Y2FzZSAyOmw9blsxNV07aD1uWzExXTtuWzEyXT1uWzNdO25bMTNdPW8rMDtuWzE0XT1vKzE7blsxNV09bysyO25bOF09bls3XTtuWzExXT1vKzM7bls0XT1oO25bN109bys0O25bMF09bDtuWzFdPW8rNztuWzJdPW8rNjtuWzNdPW8rNTtsPWlbM107aVsyXT1pWzFdO2lbM109YztpWzBdPWw7aVsxXT1jKzE7YnJlYWs7Y2FzZSAzOm5bMTJdPW5bMF07blsxM109byswO25bMTRdPW8rMTtuWzE1XT1vKzI7bls4XT1uWzFdO25bMTFdPW8rMztuWzRdPW5bMl07bls3XT1vKzQ7blswXT1uWzNdO25bMV09bys3O25bMl09bys2O25bM109bys1O2lbMl09aVswXTtpWzNdPWM7aVswXT1pWzFdO2lbMV09YysxfW5bNV09dC5sZW5ndGg7dC5wdXNoKFsoLTQqdFtuWzBdXVswXS10W25bMTVdXVswXSs2Kih0W25bNF1dWzBdK3RbblsxXV1bMF0pLTIqKHRbblsxMl1dWzBdK3RbblszXV1bMF0pKzMqKHRbblsxM11dWzBdK3Rbbls3XV1bMF0pKS85LCgtNCp0W25bMF1dWzFdLXRbblsxNV1dWzFdKzYqKHRbbls0XV1bMV0rdFtuWzFdXVsxXSktMioodFtuWzEyXV1bMV0rdFtuWzNdXVsxXSkrMyoodFtuWzEzXV1bMV0rdFtuWzddXVsxXSkpLzldKTtuWzZdPXQubGVuZ3RoO3QucHVzaChbKC00KnRbblszXV1bMF0tdFtuWzEyXV1bMF0rNioodFtuWzJdXVswXSt0W25bN11dWzBdKS0yKih0W25bMF1dWzBdK3RbblsxNV1dWzBdKSszKih0W25bNF1dWzBdK3RbblsxNF1dWzBdKSkvOSwoLTQqdFtuWzNdXVsxXS10W25bMTJdXVsxXSs2Kih0W25bMl1dWzFdK3Rbbls3XV1bMV0pLTIqKHRbblswXV1bMV0rdFtuWzE1XV1bMV0pKzMqKHRbbls0XV1bMV0rdFtuWzE0XV1bMV0pKS85XSk7bls5XT10Lmxlbmd0aDt0LnB1c2goWygtNCp0W25bMTJdXVswXS10W25bM11dWzBdKzYqKHRbbls4XV1bMF0rdFtuWzEzXV1bMF0pLTIqKHRbblswXV1bMF0rdFtuWzE1XV1bMF0pKzMqKHRbblsxMV1dWzBdK3RbblsxXV1bMF0pKS85LCgtNCp0W25bMTJdXVsxXS10W25bM11dWzFdKzYqKHRbbls4XV1bMV0rdFtuWzEzXV1bMV0pLTIqKHRbblswXV1bMV0rdFtuWzE1XV1bMV0pKzMqKHRbblsxMV1dWzFdK3RbblsxXV1bMV0pKS85XSk7blsxMF09dC5sZW5ndGg7dC5wdXNoKFsoLTQqdFtuWzE1XV1bMF0tdFtuWzBdXVswXSs2Kih0W25bMTFdXVswXSt0W25bMTRdXVswXSktMioodFtuWzEyXV1bMF0rdFtuWzNdXVswXSkrMyoodFtuWzJdXVswXSt0W25bOF1dWzBdKSkvOSwoLTQqdFtuWzE1XV1bMV0tdFtuWzBdXVsxXSs2Kih0W25bMTFdXVsxXSt0W25bMTRdXVsxXSktMioodFtuWzEyXV1bMV0rdFtuWzNdXVsxXSkrMyoodFtuWzJdXVsxXSt0W25bOF1dWzFdKSkvOV0pO3RoaXMuZmlndXJlcy5wdXNoKHt0eXBlOiJwYXRjaCIsY29vcmRzOm5ldyBJbnQzMkFycmF5KG4pLGNvbG9yczpuZXcgSW50MzJBcnJheShpKX0pfX1fZGVjb2RlVHlwZTdTaGFkaW5nKGUpe2NvbnN0IHQ9dGhpcy5jb29yZHMsYT10aGlzLmNvbG9ycyxuPW5ldyBJbnQzMkFycmF5KDE2KSxpPW5ldyBJbnQzMkFycmF5KDQpO2Zvcig7ZS5oYXNEYXRhOyl7Y29uc3Qgcz1lLnJlYWRGbGFnKCk7aWYoISgwPD1zJiZzPD0zKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiVW5rbm93biB0eXBlNyBmbGFnIik7Y29uc3Qgbz10Lmxlbmd0aDtmb3IobGV0IGE9MCxyPTAhPT1zPzEyOjE2O2E8cjthKyspdC5wdXNoKGUucmVhZENvb3JkaW5hdGUoKSk7Y29uc3QgYz1hLmxlbmd0aDtmb3IobGV0IHQ9MCxyPTAhPT1zPzI6NDt0PHI7dCsrKWEucHVzaChlLnJlYWRDb21wb25lbnRzKCkpO2xldCBsLGgsdSxkO3N3aXRjaChzKXtjYXNlIDA6blsxMl09byszO25bMTNdPW8rNDtuWzE0XT1vKzU7blsxNV09bys2O25bOF09bysyO25bOV09bysxMztuWzEwXT1vKzE0O25bMTFdPW8rNztuWzRdPW8rMTtuWzVdPW8rMTI7bls2XT1vKzE1O25bN109bys4O25bMF09bztuWzFdPW8rMTE7blsyXT1vKzEwO25bM109bys5O2lbMl09YysxO2lbM109YysyO2lbMF09YztpWzFdPWMrMzticmVhaztjYXNlIDE6bD1uWzEyXTtoPW5bMTNdO3U9blsxNF07ZD1uWzE1XTtuWzEyXT1kO25bMTNdPW8rMDtuWzE0XT1vKzE7blsxNV09bysyO25bOF09dTtuWzldPW8rOTtuWzEwXT1vKzEwO25bMTFdPW8rMztuWzRdPWg7bls1XT1vKzg7bls2XT1vKzExO25bN109bys0O25bMF09bDtuWzFdPW8rNztuWzJdPW8rNjtuWzNdPW8rNTtsPWlbMl07aD1pWzNdO2lbMl09aDtpWzNdPWM7aVswXT1sO2lbMV09YysxO2JyZWFrO2Nhc2UgMjpsPW5bMTVdO2g9blsxMV07blsxMl09blszXTtuWzEzXT1vKzA7blsxNF09bysxO25bMTVdPW8rMjtuWzhdPW5bN107bls5XT1vKzk7blsxMF09bysxMDtuWzExXT1vKzM7bls0XT1oO25bNV09bys4O25bNl09bysxMTtuWzddPW8rNDtuWzBdPWw7blsxXT1vKzc7blsyXT1vKzY7blszXT1vKzU7bD1pWzNdO2lbMl09aVsxXTtpWzNdPWM7aVswXT1sO2lbMV09YysxO2JyZWFrO2Nhc2UgMzpuWzEyXT1uWzBdO25bMTNdPW8rMDtuWzE0XT1vKzE7blsxNV09bysyO25bOF09blsxXTtuWzldPW8rOTtuWzEwXT1vKzEwO25bMTFdPW8rMztuWzRdPW5bMl07bls1XT1vKzg7bls2XT1vKzExO25bN109bys0O25bMF09blszXTtuWzFdPW8rNztuWzJdPW8rNjtuWzNdPW8rNTtpWzJdPWlbMF07aVszXT1jO2lbMF09aVsxXTtpWzFdPWMrMX10aGlzLmZpZ3VyZXMucHVzaCh7dHlwZToicGF0Y2giLGNvb3JkczpuZXcgSW50MzJBcnJheShuKSxjb2xvcnM6bmV3IEludDMyQXJyYXkoaSl9KX19X2J1aWxkRmlndXJlRnJvbVBhdGNoKGUpe2NvbnN0IHQ9dGhpcy5maWd1cmVzW2VdOygwLHIuYXNzZXJ0KSgicGF0Y2giPT09dC50eXBlLCJVbmV4cGVjdGVkIHBhdGNoIG1lc2ggZmlndXJlIik7Y29uc3QgYT10aGlzLmNvb3JkcyxuPXRoaXMuY29sb3JzLGk9dC5jb29yZHMscz10LmNvbG9ycyxvPU1hdGgubWluKGFbaVswXV1bMF0sYVtpWzNdXVswXSxhW2lbMTJdXVswXSxhW2lbMTVdXVswXSksYz1NYXRoLm1pbihhW2lbMF1dWzFdLGFbaVszXV1bMV0sYVtpWzEyXV1bMV0sYVtpWzE1XV1bMV0pLGw9TWF0aC5tYXgoYVtpWzBdXVswXSxhW2lbM11dWzBdLGFbaVsxMl1dWzBdLGFbaVsxNV1dWzBdKSxoPU1hdGgubWF4KGFbaVswXV1bMV0sYVtpWzNdXVsxXSxhW2lbMTJdXVsxXSxhW2lbMTVdXVsxXSk7bGV0IHU9TWF0aC5jZWlsKChsLW8pKk1lc2hTaGFkaW5nLlRSSUFOR0xFX0RFTlNJVFkvKHRoaXMuYm91bmRzWzJdLXRoaXMuYm91bmRzWzBdKSk7dT1NYXRoLm1heChNZXNoU2hhZGluZy5NSU5fU1BMSVRfUEFUQ0hfQ0hVTktTX0FNT1VOVCxNYXRoLm1pbihNZXNoU2hhZGluZy5NQVhfU1BMSVRfUEFUQ0hfQ0hVTktTX0FNT1VOVCx1KSk7bGV0IGQ9TWF0aC5jZWlsKChoLWMpKk1lc2hTaGFkaW5nLlRSSUFOR0xFX0RFTlNJVFkvKHRoaXMuYm91bmRzWzNdLXRoaXMuYm91bmRzWzFdKSk7ZD1NYXRoLm1heChNZXNoU2hhZGluZy5NSU5fU1BMSVRfUEFUQ0hfQ0hVTktTX0FNT1VOVCxNYXRoLm1pbihNZXNoU2hhZGluZy5NQVhfU1BMSVRfUEFUQ0hfQ0hVTktTX0FNT1VOVCxkKSk7Y29uc3QgZj11KzEsZz1uZXcgSW50MzJBcnJheSgoZCsxKSpmKSxwPW5ldyBJbnQzMkFycmF5KChkKzEpKmYpO2xldCBtPTA7Y29uc3QgYj1uZXcgVWludDhBcnJheSgzKSx5PW5ldyBVaW50OEFycmF5KDMpLHc9bltzWzBdXSxTPW5bc1sxXV0seD1uW3NbMl1dLEM9bltzWzNdXSxrPWdldEIoZCksdj1nZXRCKHUpO2ZvcihsZXQgZT0wO2U8PWQ7ZSsrKXtiWzBdPSh3WzBdKihkLWUpK3hbMF0qZSkvZHwwO2JbMV09KHdbMV0qKGQtZSkreFsxXSplKS9kfDA7YlsyXT0od1syXSooZC1lKSt4WzJdKmUpL2R8MDt5WzBdPShTWzBdKihkLWUpK0NbMF0qZSkvZHwwO3lbMV09KFNbMV0qKGQtZSkrQ1sxXSplKS9kfDA7eVsyXT0oU1syXSooZC1lKStDWzJdKmUpL2R8MDtmb3IobGV0IHQ9MDt0PD11O3QrKyxtKyspe2lmKCEoMCE9PWUmJmUhPT1kfHwwIT09dCYmdCE9PXUpKWNvbnRpbnVlO2xldCByPTAscz0wLG89MDtmb3IobGV0IG49MDtuPD0zO24rKylmb3IobGV0IGM9MDtjPD0zO2MrKyxvKyspe2NvbnN0IGw9a1tlXVtuXSp2W3RdW2NdO3IrPWFbaVtvXV1bMF0qbDtzKz1hW2lbb11dWzFdKmx9Z1ttXT1hLmxlbmd0aDthLnB1c2goW3Isc10pO3BbbV09bi5sZW5ndGg7Y29uc3QgYz1uZXcgVWludDhBcnJheSgzKTtjWzBdPShiWzBdKih1LXQpK3lbMF0qdCkvdXwwO2NbMV09KGJbMV0qKHUtdCkreVsxXSp0KS91fDA7Y1syXT0oYlsyXSoodS10KSt5WzJdKnQpL3V8MDtuLnB1c2goYyl9fWdbMF09aVswXTtwWzBdPXNbMF07Z1t1XT1pWzNdO3BbdV09c1sxXTtnW2YqZF09aVsxMl07cFtmKmRdPXNbMl07Z1tmKmQrdV09aVsxNV07cFtmKmQrdV09c1szXTt0aGlzLmZpZ3VyZXNbZV09e3R5cGU6ImxhdHRpY2UiLGNvb3JkczpnLGNvbG9yczpwLHZlcnRpY2VzUGVyUm93OmZ9fV91cGRhdGVCb3VuZHMoKXtsZXQgZT10aGlzLmNvb3Jkc1swXVswXSx0PXRoaXMuY29vcmRzWzBdWzFdLGE9ZSxyPXQ7Zm9yKGxldCBuPTEsaT10aGlzLmNvb3Jkcy5sZW5ndGg7bjxpO24rKyl7Y29uc3QgaT10aGlzLmNvb3Jkc1tuXVswXSxzPXRoaXMuY29vcmRzW25dWzFdO2U9ZT5pP2k6ZTt0PXQ+cz9zOnQ7YT1hPGk/aTphO3I9cjxzP3M6cn10aGlzLmJvdW5kcz1bZSx0LGEscl19X3BhY2tEYXRhKCl7bGV0IGUsdCxhLHI7Y29uc3Qgbj10aGlzLmNvb3JkcyxpPW5ldyBGbG9hdDMyQXJyYXkoMipuLmxlbmd0aCk7Zm9yKGU9MCxhPTAsdD1uLmxlbmd0aDtlPHQ7ZSsrKXtjb25zdCB0PW5bZV07aVthKytdPXRbMF07aVthKytdPXRbMV19dGhpcy5jb29yZHM9aTtjb25zdCBzPXRoaXMuY29sb3JzLG89bmV3IFVpbnQ4QXJyYXkoMypzLmxlbmd0aCk7Zm9yKGU9MCxhPTAsdD1zLmxlbmd0aDtlPHQ7ZSsrKXtjb25zdCB0PXNbZV07b1thKytdPXRbMF07b1thKytdPXRbMV07b1thKytdPXRbMl19dGhpcy5jb2xvcnM9bztjb25zdCBjPXRoaXMuZmlndXJlcztmb3IoZT0wLHQ9Yy5sZW5ndGg7ZTx0O2UrKyl7Y29uc3QgdD1jW2VdLG49dC5jb29yZHMsaT10LmNvbG9ycztmb3IoYT0wLHI9bi5sZW5ndGg7YTxyO2ErKyl7blthXSo9MjtpW2FdKj0zfX19Z2V0SVIoKXtyZXR1cm5bIk1lc2giLHRoaXMuc2hhZGluZ1R5cGUsdGhpcy5jb29yZHMsdGhpcy5jb2xvcnMsdGhpcy5maWd1cmVzLHRoaXMuYm91bmRzLHRoaXMuYmJveCx0aGlzLmJhY2tncm91bmRdfX1jbGFzcyBEdW1teVNoYWRpbmcgZXh0ZW5kcyBCYXNlU2hhZGluZ3tnZXRJUigpe3JldHVyblsiRHVtbXkiXX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuZ2V0WGZhRm9udERpY3Q9ZnVuY3Rpb24gZ2V0WGZhRm9udERpY3QoZSl7Y29uc3QgdD1mdW5jdGlvbiBnZXRYZmFGb250V2lkdGhzKGUpe2NvbnN0IHQ9Z2V0WGZhRm9udE5hbWUoZSk7aWYoIXQpcmV0dXJuIG51bGw7Y29uc3R7YmFzZVdpZHRoczphLGJhc2VNYXBwaW5nOnIsZmFjdG9yczpufT10LGk9bj9hLm1hcCgoKGUsdCk9PmUqblt0XSkpOmE7bGV0IHMsbz0tMjtjb25zdCBjPVtdO2Zvcihjb25zdFtlLHRdb2Ygci5tYXAoKChlLHQpPT5bZSx0XSkpLnNvcnQoKChbZV0sW3RdKT0+ZS10KSkpaWYoLTEhPT1lKWlmKGU9PT1vKzEpe3MucHVzaChpW3RdKTtvKz0xfWVsc2V7bz1lO3M9W2lbdF1dO2MucHVzaChlLHMpfXJldHVybiBjfShlKSxhPW5ldyBuLkRpY3QobnVsbCk7YS5zZXQoIkJhc2VGb250IixuLk5hbWUuZ2V0KGUpKTthLnNldCgiVHlwZSIsbi5OYW1lLmdldCgiRm9udCIpKTthLnNldCgiU3VidHlwZSIsbi5OYW1lLmdldCgiQ0lERm9udFR5cGUyIikpO2Euc2V0KCJFbmNvZGluZyIsbi5OYW1lLmdldCgiSWRlbnRpdHktSCIpKTthLnNldCgiQ0lEVG9HSURNYXAiLG4uTmFtZS5nZXQoIklkZW50aXR5IikpO2Euc2V0KCJXIix0KTthLnNldCgiRmlyc3RDaGFyIix0WzBdKTthLnNldCgiTGFzdENoYXIiLHQuYXQoLTIpK3QuYXQoLTEpLmxlbmd0aC0xKTtjb25zdCByPW5ldyBuLkRpY3QobnVsbCk7YS5zZXQoIkZvbnREZXNjcmlwdG9yIixyKTtjb25zdCBpPW5ldyBuLkRpY3QobnVsbCk7aS5zZXQoIk9yZGVyaW5nIiwiSWRlbnRpdHkiKTtpLnNldCgiUmVnaXN0cnkiLCJBZG9iZSIpO2kuc2V0KCJTdXBwbGVtZW50IiwwKTthLnNldCgiQ0lEU3lzdGVtSW5mbyIsaSk7cmV0dXJuIGF9O3QuZ2V0WGZhRm9udE5hbWU9Z2V0WGZhRm9udE5hbWU7dmFyIHI9YSg1Miksbj1hKDQpLGk9YSg1Mykscz1hKDU0KSxvPWEoNTUpLGM9YSg1NiksbD1hKDMpLGg9YSgzOCk7Y29uc3QgdT0oMCxsLmdldExvb2t1cFRhYmxlRmFjdG9yeSkoKGZ1bmN0aW9uKGUpe2VbIk15cmlhZFByby1SZWd1bGFyIl09ZVsiUGRmSlMtRmFsbGJhY2stUmVndWxhciJdPXtuYW1lOiJMaWJlcmF0aW9uU2Fucy1SZWd1bGFyIixmYWN0b3JzOm8uTXlyaWFkUHJvUmVndWxhckZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zUmVndWxhcldpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmcsbWV0cmljczpvLk15cmlhZFByb1JlZ3VsYXJNZXRyaWNzfTtlWyJNeXJpYWRQcm8tQm9sZCJdPWVbIlBkZkpTLUZhbGxiYWNrLUJvbGQiXT17bmFtZToiTGliZXJhdGlvblNhbnMtQm9sZCIsZmFjdG9yczpvLk15cmlhZFByb0JvbGRGYWN0b3JzLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc0JvbGRXaWR0aHMsYmFzZU1hcHBpbmc6cy5MaWJlcmF0aW9uU2Fuc0JvbGRNYXBwaW5nLG1ldHJpY3M6by5NeXJpYWRQcm9Cb2xkTWV0cmljc307ZVsiTXlyaWFkUHJvLUl0Il09ZVsiTXlyaWFkUHJvLUl0YWxpYyJdPWVbIlBkZkpTLUZhbGxiYWNrLUl0YWxpYyJdPXtuYW1lOiJMaWJlcmF0aW9uU2Fucy1JdGFsaWMiLGZhY3RvcnM6by5NeXJpYWRQcm9JdGFsaWNGYWN0b3JzLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc0l0YWxpY1dpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zSXRhbGljTWFwcGluZyxtZXRyaWNzOm8uTXlyaWFkUHJvSXRhbGljTWV0cmljc307ZVsiTXlyaWFkUHJvLUJvbGRJdCJdPWVbIk15cmlhZFByby1Cb2xkSXRhbGljIl09ZVsiUGRmSlMtRmFsbGJhY2stQm9sZEl0YWxpYyJdPXtuYW1lOiJMaWJlcmF0aW9uU2Fucy1Cb2xkSXRhbGljIixmYWN0b3JzOm8uTXlyaWFkUHJvQm9sZEl0YWxpY0ZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zQm9sZEl0YWxpY1dpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcsbWV0cmljczpvLk15cmlhZFByb0JvbGRJdGFsaWNNZXRyaWNzfTtlLkFyaWFsTVQ9ZS5BcmlhbD1lWyJBcmlhbC1SZWd1bGFyIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLVJlZ3VsYXIiLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc1JlZ3VsYXJXaWR0aHMsYmFzZU1hcHBpbmc6cy5MaWJlcmF0aW9uU2Fuc1JlZ3VsYXJNYXBwaW5nfTtlWyJBcmlhbC1Cb2xkTVQiXT1lWyJBcmlhbC1Cb2xkIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLUJvbGQiLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc0JvbGRXaWR0aHMsYmFzZU1hcHBpbmc6cy5MaWJlcmF0aW9uU2Fuc0JvbGRNYXBwaW5nfTtlWyJBcmlhbC1JdGFsaWNNVCJdPWVbIkFyaWFsLUl0YWxpYyJdPXtuYW1lOiJMaWJlcmF0aW9uU2Fucy1JdGFsaWMiLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc0l0YWxpY1dpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zSXRhbGljTWFwcGluZ307ZVsiQXJpYWwtQm9sZEl0YWxpY01UIl09ZVsiQXJpYWwtQm9sZEl0YWxpYyJdPXtuYW1lOiJMaWJlcmF0aW9uU2Fucy1Cb2xkSXRhbGljIixiYXNlV2lkdGhzOnMuTGliZXJhdGlvblNhbnNCb2xkSXRhbGljV2lkdGhzLGJhc2VNYXBwaW5nOnMuTGliZXJhdGlvblNhbnNCb2xkSXRhbGljTWFwcGluZ307ZVsiQ2FsaWJyaS1SZWd1bGFyIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLVJlZ3VsYXIiLGZhY3RvcnM6ci5DYWxpYnJpUmVndWxhckZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zUmVndWxhcldpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmcsbWV0cmljczpyLkNhbGlicmlSZWd1bGFyTWV0cmljc307ZVsiQ2FsaWJyaS1Cb2xkIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLUJvbGQiLGZhY3RvcnM6ci5DYWxpYnJpQm9sZEZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zQm9sZFdpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmcsbWV0cmljczpyLkNhbGlicmlCb2xkTWV0cmljc307ZVsiQ2FsaWJyaS1JdGFsaWMiXT17bmFtZToiTGliZXJhdGlvblNhbnMtSXRhbGljIixmYWN0b3JzOnIuQ2FsaWJyaUl0YWxpY0ZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zSXRhbGljV2lkdGhzLGJhc2VNYXBwaW5nOnMuTGliZXJhdGlvblNhbnNJdGFsaWNNYXBwaW5nLG1ldHJpY3M6ci5DYWxpYnJpSXRhbGljTWV0cmljc307ZVsiQ2FsaWJyaS1Cb2xkSXRhbGljIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLUJvbGRJdGFsaWMiLGZhY3RvcnM6ci5DYWxpYnJpQm9sZEl0YWxpY0ZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zQm9sZEl0YWxpY1dpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcsbWV0cmljczpyLkNhbGlicmlCb2xkSXRhbGljTWV0cmljc307ZVsiU2Vnb2V1aS1SZWd1bGFyIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLVJlZ3VsYXIiLGZhY3RvcnM6Yy5TZWdvZXVpUmVndWxhckZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zUmVndWxhcldpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmcsbWV0cmljczpjLlNlZ29ldWlSZWd1bGFyTWV0cmljc307ZVsiU2Vnb2V1aS1Cb2xkIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLUJvbGQiLGZhY3RvcnM6Yy5TZWdvZXVpQm9sZEZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zQm9sZFdpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmcsbWV0cmljczpjLlNlZ29ldWlCb2xkTWV0cmljc307ZVsiU2Vnb2V1aS1JdGFsaWMiXT17bmFtZToiTGliZXJhdGlvblNhbnMtSXRhbGljIixmYWN0b3JzOmMuU2Vnb2V1aUl0YWxpY0ZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zSXRhbGljV2lkdGhzLGJhc2VNYXBwaW5nOnMuTGliZXJhdGlvblNhbnNJdGFsaWNNYXBwaW5nLG1ldHJpY3M6Yy5TZWdvZXVpSXRhbGljTWV0cmljc307ZVsiU2Vnb2V1aS1Cb2xkSXRhbGljIl09e25hbWU6IkxpYmVyYXRpb25TYW5zLUJvbGRJdGFsaWMiLGZhY3RvcnM6Yy5TZWdvZXVpQm9sZEl0YWxpY0ZhY3RvcnMsYmFzZVdpZHRoczpzLkxpYmVyYXRpb25TYW5zQm9sZEl0YWxpY1dpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmcsbWV0cmljczpjLlNlZ29ldWlCb2xkSXRhbGljTWV0cmljc307ZVsiSGVsdmV0aWNhLVJlZ3VsYXIiXT1lLkhlbHZldGljYT17bmFtZToiTGliZXJhdGlvblNhbnMtUmVndWxhciIsZmFjdG9yczppLkhlbHZldGljYVJlZ3VsYXJGYWN0b3JzLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc1JlZ3VsYXJXaWR0aHMsYmFzZU1hcHBpbmc6cy5MaWJlcmF0aW9uU2Fuc1JlZ3VsYXJNYXBwaW5nLG1ldHJpY3M6aS5IZWx2ZXRpY2FSZWd1bGFyTWV0cmljc307ZVsiSGVsdmV0aWNhLUJvbGQiXT17bmFtZToiTGliZXJhdGlvblNhbnMtQm9sZCIsZmFjdG9yczppLkhlbHZldGljYUJvbGRGYWN0b3JzLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc0JvbGRXaWR0aHMsYmFzZU1hcHBpbmc6cy5MaWJlcmF0aW9uU2Fuc0JvbGRNYXBwaW5nLG1ldHJpY3M6aS5IZWx2ZXRpY2FCb2xkTWV0cmljc307ZVsiSGVsdmV0aWNhLUl0YWxpYyJdPXtuYW1lOiJMaWJlcmF0aW9uU2Fucy1JdGFsaWMiLGZhY3RvcnM6aS5IZWx2ZXRpY2FJdGFsaWNGYWN0b3JzLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc0l0YWxpY1dpZHRocyxiYXNlTWFwcGluZzpzLkxpYmVyYXRpb25TYW5zSXRhbGljTWFwcGluZyxtZXRyaWNzOmkuSGVsdmV0aWNhSXRhbGljTWV0cmljc307ZVsiSGVsdmV0aWNhLUJvbGRJdGFsaWMiXT17bmFtZToiTGliZXJhdGlvblNhbnMtQm9sZEl0YWxpYyIsZmFjdG9yczppLkhlbHZldGljYUJvbGRJdGFsaWNGYWN0b3JzLGJhc2VXaWR0aHM6cy5MaWJlcmF0aW9uU2Fuc0JvbGRJdGFsaWNXaWR0aHMsYmFzZU1hcHBpbmc6cy5MaWJlcmF0aW9uU2Fuc0JvbGRJdGFsaWNNYXBwaW5nLG1ldHJpY3M6aS5IZWx2ZXRpY2FCb2xkSXRhbGljTWV0cmljc319KSk7ZnVuY3Rpb24gZ2V0WGZhRm9udE5hbWUoZSl7Y29uc3QgdD0oMCxoLm5vcm1hbGl6ZUZvbnROYW1lKShlKTtyZXR1cm4gdSgpW3RdfX0sKGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5DYWxpYnJpUmVndWxhck1ldHJpY3M9dC5DYWxpYnJpUmVndWxhckZhY3RvcnM9dC5DYWxpYnJpSXRhbGljTWV0cmljcz10LkNhbGlicmlJdGFsaWNGYWN0b3JzPXQuQ2FsaWJyaUJvbGRNZXRyaWNzPXQuQ2FsaWJyaUJvbGRJdGFsaWNNZXRyaWNzPXQuQ2FsaWJyaUJvbGRJdGFsaWNGYWN0b3JzPXQuQ2FsaWJyaUJvbGRGYWN0b3JzPXZvaWQgMDt0LkNhbGlicmlCb2xkRmFjdG9ycz1bMS4zODc3LDEsMSwxLC45NzgwMSwuOTI0ODIsLjg5NTUyLC45MTEzMywuODE5ODgsLjk3NTY2LC45ODE1MiwuOTM1NDgsLjkzNTQ4LDEuMjc5OCwuODUyODQsLjkyNzk0LDEsLjk2MTM0LDEuNTQ2NTcsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC44Mjg0NSwuODI4NDUsLjg1Mjg0LC44NTI4NCwuODUyODQsLjc1ODU5LC45MjEzOCwuODM5MDgsLjc3NjIsLjczMjkzLC44NzI4OSwuNzMxMzMsLjc1MTQsLjgxOTIxLC44NzM1NiwuOTU5NTgsLjU5NTI2LC43NTcyNywuNjkyMjUsMS4wNDkyNCwuOTEyMSwuODY5NDMsLjc5Nzk1LC44ODE5OCwuNzc5NTgsLjcwODY0LC44MTA1NSwuOTAzOTksLjg4NjUzLC45NjAxNywuODI1NzcsLjc3ODkyLC43ODI1NywuOTc1MDcsMS41NDY1NywuOTc1MDcsLjg1Mjg0LC44OTU1MiwuOTAxNzYsLjg4NzYyLC44Nzg1LC43NTI0MSwuODc4NSwuOTA1MTgsLjk1MDE1LC43NzYxOCwuODc4NSwuODg0MDEsLjkxOTE2LC44NjMwNCwuODg0MDEsLjkxNDg4LC44Nzg1LC44ODAxLC44Nzg1LC44Nzg1LC45MTM0MywuNzE3MywxLjA0MTA2LC44Nzg1LC44NTA3NSwuOTU3OTQsLjgyNjE2LC44NTE2MiwuNzk0OTIsLjg4MzMxLDEuNjk4MDgsLjg4MzMxLC44NTI4NCwuOTc4MDEsLjg5NTUyLC45MTEzMywuODk1NTIsLjkxMTMzLDEuNzgwMSwuODk1NTIsMS4yNDQ4NywxLjEzMjU0LDEuMTI0MDEsLjk2ODM5LC44NTI4NCwuNjg3ODcsLjcwNjQ1LC44NTU5MiwuOTA3NDcsMS4wMTQ2NiwxLjAwODgsLjkwMzIzLDEsMS4wNzQ2MywxLC45MTA1NiwuNzU4MDYsMS4xOTExOCwuOTY4MzksLjc4ODY0LC44Mjg0NSwuODQxMzMsLjc1ODU5LC44MzkwOCwuODM5MDgsLjgzOTA4LC44MzkwOCwuODM5MDgsLjgzOTA4LC43NzUzOSwuNzMyOTMsLjczMTMzLC43MzEzMywuNzMxMzMsLjczMTMzLC45NTk1OCwuOTU5NTgsLjk1OTU4LC45NTk1OCwuODg1MDYsLjkxMjEsLjg2OTQzLC44Njk0MywuODY5NDMsLjg2OTQzLC44Njk0MywuODUyODQsLjg3NTA4LC45MDM5OSwuOTAzOTksLjkwMzk5LC45MDM5OSwuNzc4OTIsLjc5Nzk1LC45MDgwNywuODg3NjIsLjg4NzYyLC44ODc2MiwuODg3NjIsLjg4NzYyLC44ODc2MiwuODcxNSwuNzUyNDEsLjkwNTE4LC45MDUxOCwuOTA1MTgsLjkwNTE4LC44ODQwMSwuODg0MDEsLjg4NDAxLC44ODQwMSwuODc4NSwuODc4NSwuODgwMSwuODgwMSwuODgwMSwuODgwMSwuODgwMSwuOTA3NDcsLjg5MDQ5LC44Nzg1LC44Nzg1LC44Nzg1LC44Nzg1LC44NTE2MiwuODc4NSwuODUxNjIsLjgzOTA4LC44ODc2MiwuODM5MDgsLjg4NzYyLC44MzkwOCwuODg3NjIsLjczMjkzLC43NTI0MSwuNzMyOTMsLjc1MjQxLC43MzI5MywuNzUyNDEsLjczMjkzLC43NTI0MSwuODcyODksLjgzMDE2LC44ODUwNiwuOTMxMjUsLjczMTMzLC45MDUxOCwuNzMxMzMsLjkwNTE4LC43MzEzMywuOTA1MTgsLjczMTMzLC45MDUxOCwuNzMxMzMsLjkwNTE4LC44MTkyMSwuNzc2MTgsLjgxOTIxLC43NzYxOCwuODE5MjEsLjc3NjE4LDEsMSwuODczNTYsLjg3ODUsLjkxMDc1LC44OTYwOCwuOTU5NTgsLjg4NDAxLC45NTk1OCwuODg0MDEsLjk1OTU4LC44ODQwMSwuOTU5NTgsLjg4NDAxLC45NTk1OCwuODg0MDEsLjc2MjI5LC45MDE2NywuNTk1MjYsLjkxOTE2LDEsMSwuODYzMDQsLjY5MjI1LC44ODQwMSwxLDEsLjcwNDI0LC43OTQ2OCwuOTE5MjYsLjg4MTc1LC43MDgyMywuOTQ5MDMsLjkxMjEsLjg3ODUsMSwxLC45MTIxLC44Nzg1LC44NzgwMiwuODg2NTYsLjg3ODUsLjg2OTQzLC44ODAxLC44Njk0MywuODgwMSwuODY5NDMsLjg4MDEsLjg3NDAyLC44OTI5MSwuNzc5NTgsLjkxMzQzLDEsMSwuNzc5NTgsLjkxMzQzLC43MDg2NCwuNzE3MywuNzA4NjQsLjcxNzMsLjcwODY0LC43MTczLC43MDg2NCwuNzE3MywxLDEsLjgxMDU1LC43NTg0MSwuODEwNTUsMS4wNjQ1MiwuOTAzOTksLjg3ODUsLjkwMzk5LC44Nzg1LC45MDM5OSwuODc4NSwuOTAzOTksLjg3ODUsLjkwMzk5LC44Nzg1LC45MDM5OSwuODc4NSwuOTYwMTcsLjk1Nzk0LC43Nzg5MiwuODUxNjIsLjc3ODkyLC43ODI1NywuNzk0OTIsLjc4MjU3LC43OTQ5MiwuNzgyNTcsLjc5NDkyLC45Mjk3LC41Njg5MiwuODM5MDgsLjg4NzYyLC43NzUzOSwuODcxNSwuODc1MDgsLjg5MDQ5LDEsMSwuODEwNTUsMS4wNDEwNiwxLjIwNTI4LDEuMjA1MjgsMSwxLjE1NTQzLC43MDY3NCwuOTgzODcsLjk0NzIxLDEuMzM0MzEsMS40NTg5NCwuOTUxNjEsMS4wNjMwMywuODM5MDgsLjgwMzUyLC41NzE4NCwuNjk2NSwuNTYyODksLjgyMDAxLC41NjAyOSwuODEyMzUsMS4wMjk4OCwuODM5MDgsLjc3NjIsLjY4MTU2LC44MDM2NywuNzMxMzMsLjc4MjU3LC44NzM1NiwuODY5NDMsLjk1OTU4LC43NTcyNywuODkwMTksMS4wNDkyNCwuOTEyMSwuNzY0OCwuODY5NDMsLjg3MzU2LC43OTc5NSwuNzgyNzUsLjgxMDU1LC43Nzg5MiwuOTc2MiwuODI1NzcsLjk5ODE5LC44NDg5NiwuOTU5NTgsLjc3ODkyLC45NjEwOCwxLjAxNDA3LC44OTA0OSwxLjAyOTg4LC45NDIxMSwuOTYxMDgsLjg5MzYsLjg0MDIxLC44Nzg0MiwuOTYzOTksLjc5MTA5LC44OTA0OSwxLjAwODEzLDEuMDI5ODgsLjg2MDc3LC44NzQ0NSwuOTIwOTksLjg0NzIzLC44NjUxMywuODgwMSwuNzU2MzgsLjg1NzE0LC43ODIxNiwuNzk1ODYsLjg3OTY1LC45NDIxMSwuOTc3NDcsLjc4Mjg3LC45NzkyNiwuODQ5NzEsMS4wMjk4OCwuOTQyMTEsLjg4MDEsLjk0MjExLC44NDk3MSwuNzMxMzMsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjkwMjY0LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC45MDUxOCwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTA1NDgsMSwxLDEsMSwxLDEsLjk2MDE3LC45NTc5NCwuOTYwMTcsLjk1Nzk0LC45NjAxNywuOTU3OTQsLjc3ODkyLC44NTE2MiwxLDEsLjg5NTUyLC45MDUyNywxLC45MDM2MywuOTI3OTQsLjkyNzk0LC45Mjc5NCwuOTI3OTQsLjg3MDEyLC44NzAxMiwuODcwMTIsLjg5NTUyLC44OTU1MiwxLjQyMjU5LC43MTE0MywxLjA2MTUyLDEsMSwxLjAzMzcyLDEuMDMzNzIsLjk3MTcxLDEuNDk1NiwyLjI4MDcsLjkzODM1LC44MzQwNiwuOTExMzMsLjg0MTA3LC45MTEzMywxLDEsMSwuNzIwMjEsMSwxLjIzMTA4LC44MzQ4OSwuODg1MjUsLjg4NTI1LC44MTQ5OSwuOTA1MjcsMS44MTA1NSwuOTA1MjcsMS44MTA1NSwxLjMxMDA2LDEuNTM3MTEsLjk0NDM0LDEuMDg2OTYsMSwuOTUwMTgsLjc3MTkyLC44NTI4NCwuOTA3NDcsMS4xNzUzNCwuNjk4MjUsLjk3MTYsMS4zNzA3NywuOTA3NDcsLjkwNzQ3LC44NTM1NiwuOTA3NDcsLjkwNzQ3LDEuNDQ5NDcsLjg1Mjg0LC44OTQxLC44OTQxLC43MDU3MiwuOCwuNzA1NzIsLjcwNTcyLC43MDU3MiwuNzA1NzIsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC45OTg2MiwuOTk4NjIsMSwxLDEsMSwxLDEuMDgwMDQsLjkxMDI3LDEsMSwxLC45OTg2MiwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTA3MjcsLjkwNzI3LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXTt0LkNhbGlicmlCb2xkTWV0cmljcz17bGluZUhlaWdodDoxLjIyMDcsbGluZUdhcDouMjIwN307dC5DYWxpYnJpQm9sZEl0YWxpY0ZhY3RvcnM9WzEuMzg3NywxLDEsMSwuOTc4MDEsLjkyNDgyLC44OTU1MiwuOTExMzMsLjgxOTg4LC45NzU2NiwuOTgxNTIsLjkzNTQ4LC45MzU0OCwxLjI3OTgsLjg1Mjg0LC45Mjc5NCwxLC45NjEzNCwxLjU2MjM5LC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuODI4NDUsLjgyODQ1LC44NTI4NCwuODUyODQsLjg1Mjg0LC43NTg1OSwuOTIxMzgsLjgzOTA4LC43NzYyLC43MTgwNSwuODcyODksLjczMTMzLC43NTE0LC44MTkyMSwuODczNTYsLjk1OTU4LC41OTUyNiwuNzU3MjcsLjY5MjI1LDEuMDQ5MjQsLjkwODcyLC44NTkzOCwuNzk3OTUsLjg3MDY4LC43Nzk1OCwuNjk3NjYsLjgxMDU1LC45MDM5OSwuODg2NTMsLjk2MDY4LC44MjU3NywuNzc4OTIsLjc4MjU3LC45NzUwNywxLjUyOSwuOTc1MDcsLjg1Mjg0LC44OTU1MiwuOTAxNzYsLjk0OTA4LC44NjQxMSwuNzQwMTIsLjg2NDExLC44ODMyMywuOTUwMTUsLjg2NDExLC44NjMzMSwuODg0MDEsLjkxOTE2LC44NjMwNCwuODg0MDEsLjkwMzksLjg2MzMxLC44NjMzMSwuODY0MTEsLjg2NDExLC45MDQ2NCwuNzA4NTIsMS4wNDEwNiwuODYzMzEsLjg0MzcyLC45NTc5NCwuODI2MTYsLjg0NTQ4LC43OTQ5MiwuODgzMzEsMS42OTgwOCwuODgzMzEsLjg1Mjg0LC45NzgwMSwuODk1NTIsLjkxMTMzLC44OTU1MiwuOTExMzMsMS43ODAxLC44OTU1MiwxLjI0NDg3LDEuMTMyNTQsMS4xOTEyOSwuOTY4MzksLjg1Mjg0LC42ODc4NywuNzA2NDUsLjg1NTkyLC45MDc0NywxLjAxNDY2LDEuMDA4OCwuOTAzMjMsMSwxLjA3NDYzLDEsLjkxMDU2LC43NTgwNiwxLjE5MTE4LC45NjgzOSwuNzg4NjQsLjgyODQ1LC44NDEzMywuNzU4NTksLjgzOTA4LC44MzkwOCwuODM5MDgsLjgzOTA4LC44MzkwOCwuODM5MDgsLjc3NTM5LC43MTgwNSwuNzMxMzMsLjczMTMzLC43MzEzMywuNzMxMzMsLjk1OTU4LC45NTk1OCwuOTU5NTgsLjk1OTU4LC44ODUwNiwuOTA4NzIsLjg1OTM4LC44NTkzOCwuODU5MzgsLjg1OTM4LC44NTkzOCwuODUyODQsLjg3MDY4LC45MDM5OSwuOTAzOTksLjkwMzk5LC45MDM5OSwuNzc4OTIsLjc5Nzk1LC45MDgwNywuOTQ5MDgsLjk0OTA4LC45NDkwOCwuOTQ5MDgsLjk0OTA4LC45NDkwOCwuODU4ODcsLjc0MDEyLC44ODMyMywuODgzMjMsLjg4MzIzLC44ODMyMywuODg0MDEsLjg4NDAxLC44ODQwMSwuODg0MDEsLjg3ODUsLjg2MzMxLC44NjMzMSwuODYzMzEsLjg2MzMxLC44NjMzMSwuODYzMzEsLjkwNzQ3LC44OTA0OSwuODYzMzEsLjg2MzMxLC44NjMzMSwuODYzMzEsLjg0NTQ4LC44NjQxMSwuODQ1NDgsLjgzOTA4LC45NDkwOCwuODM5MDgsLjk0OTA4LC44MzkwOCwuOTQ5MDgsLjcxODA1LC43NDAxMiwuNzE4MDUsLjc0MDEyLC43MTgwNSwuNzQwMTIsLjcxODA1LC43NDAxMiwuODcyODksLjc5NTM4LC44ODUwNiwuOTI3MjYsLjczMTMzLC44ODMyMywuNzMxMzMsLjg4MzIzLC43MzEzMywuODgzMjMsLjczMTMzLC44ODMyMywuNzMxMzMsLjg4MzIzLC44MTkyMSwuODY0MTEsLjgxOTIxLC44NjQxMSwuODE5MjEsLjg2NDExLDEsMSwuODczNTYsLjg2MzMxLC45MTA3NSwuODc3NywuOTU5NTgsLjg4NDAxLC45NTk1OCwuODg0MDEsLjk1OTU4LC44ODQwMSwuOTU5NTgsLjg4NDAxLC45NTk1OCwuODg0MDEsLjc2NDY3LC45MDE2NywuNTk1MjYsLjkxOTE2LDEsMSwuODYzMDQsLjY5MjI1LC44ODQwMSwxLDEsLjcwNDI0LC43NzMxMiwuOTE5MjYsLjg4MTc1LC43MDgyMywuOTQ5MDMsLjkwODcyLC44NjMzMSwxLDEsLjkwODcyLC44NjMzMSwuODY5MDYsLjg4MTE2LC44NjMzMSwuODU5MzgsLjg2MzMxLC44NTkzOCwuODYzMzEsLjg1OTM4LC44NjMzMSwuODc0MDIsLjg2NTQ5LC43Nzk1OCwuOTA0NjQsMSwxLC43Nzk1OCwuOTA0NjQsLjY5NzY2LC43MDg1MiwuNjk3NjYsLjcwODUyLC42OTc2NiwuNzA4NTIsLjY5NzY2LC43MDg1MiwxLDEsLjgxMDU1LC43NTg0MSwuODEwNTUsMS4wNjQ1MiwuOTAzOTksLjg2MzMxLC45MDM5OSwuODYzMzEsLjkwMzk5LC44NjMzMSwuOTAzOTksLjg2MzMxLC45MDM5OSwuODYzMzEsLjkwMzk5LC44NjMzMSwuOTYwNjgsLjk1Nzk0LC43Nzg5MiwuODQ1NDgsLjc3ODkyLC43ODI1NywuNzk0OTIsLjc4MjU3LC43OTQ5MiwuNzgyNTcsLjc5NDkyLC45Mjk3LC41Njg5MiwuODM5MDgsLjk0OTA4LC43NzUzOSwuODU4ODcsLjg3MDY4LC44OTA0OSwxLDEsLjgxMDU1LDEuMDQxMDYsMS4yMDUyOCwxLjIwNTI4LDEsMS4xNTU0MywuNzAwODgsLjk4Mzg3LC45NDcyMSwxLjMzNDMxLDEuNDU4OTQsLjk1MTYxLDEuNDgzODcsLjgzOTA4LC44MDM1MiwuNTcxMTgsLjY5NjUsLjU2MzQ3LC43OTE3OSwuNTU4NTMsLjgwMzQ2LDEuMDI5ODgsLjgzOTA4LC43NzYyLC42NzE3NCwuODYwMzYsLjczMTMzLC43ODI1NywuODczNTYsLjg2NDQxLC45NTk1OCwuNzU3MjcsLjg5MDE5LDEuMDQ5MjQsLjkwODcyLC43NDg4OSwuODU5MzgsLjg3ODkxLC43OTc5NSwuNzk1NywuODEwNTUsLjc3ODkyLC45NzQ0NywuODI1NzcsLjk3NDY2LC44NzE3OSwuOTU5NTgsLjc3ODkyLC45NDI1MiwuOTU2MTIsLjg3NTMsMS4wMjk4OCwuOTI3MzMsLjk0MjUyLC44NzQxMSwuODQwMjEsLjg3MjgsLjk1NjEyLC43NDA4MSwuODc1MywxLjAyMTg5LDEuMDI5ODgsLjg0ODE0LC44NzQ0NSwuOTE4MjIsLjg0NzIzLC44NTY2OCwuODYzMzEsLjgxMzQ0LC44NzU4MSwuNzY0MjIsLjgyMDQ2LC45NjA1NywuOTI3MzMsLjk5Mzc1LC43ODAyMiwuOTU0NTIsLjg2MDE1LDEuMDI5ODgsLjkyNzMzLC44NjMzMSwuOTI3MzMsLjg2MDE1LC43MzEzMywxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTA2MzEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjg4MzIzLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC44NTE3NCwxLDEsMSwxLDEsMSwuOTYwNjgsLjk1Nzk0LC45NjA2OCwuOTU3OTQsLjk2MDY4LC45NTc5NCwuNzc4OTIsLjg0NTQ4LDEsMSwuODk1NTIsLjkwNTI3LDEsLjkwMzYzLC45Mjc5NCwuOTI3OTQsLjkyNzk0LC44OTgwNywuODcwMTIsLjg3MDEyLC44NzAxMiwuODk1NTIsLjg5NTUyLDEuNDIyNTksLjcxMDk0LDEuMDYxNTIsMSwxLDEuMDMzNzIsMS4wMzM3MiwuOTcxNzEsMS40OTU2LDIuMjgwNywuOTI5NzIsLjgzNDA2LC45MTEzMywuODMzMjYsLjkxMTMzLDEsMSwxLC43MjAyMSwxLDEuMjMxMDgsLjgzNDg5LC44ODUyNSwuODg1MjUsLjgxNDk5LC45MDYxNiwxLjgxMDU1LC45MDUyNywxLjgxMDU1LDEuMzEwNywxLjUzNzExLC45NDQzNCwxLjA4Njk2LDEsLjk1MDE4LC43NzE5MiwuODUyODQsLjkwNzQ3LDEuMTc1MzQsLjY5ODI1LC45NzE2LDEuMzcwNzcsLjkwNzQ3LC45MDc0NywuODUzNTYsLjkwNzQ3LC45MDc0NywxLjQ0OTQ3LC44NTI4NCwuODk0MSwuODk0MSwuNzA1NzIsLjgsLjcwNTcyLC43MDU3MiwuNzA1NzIsLjcwNTcyLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTk4NjIsLjk5ODYyLDEsMSwxLDEsMSwxLjA4MDA0LC45MTAyNywxLDEsMSwuOTk4NjIsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjkwNzI3LC45MDcyNywxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMV07dC5DYWxpYnJpQm9sZEl0YWxpY01ldHJpY3M9e2xpbmVIZWlnaHQ6MS4yMjA3LGxpbmVHYXA6LjIyMDd9O3QuQ2FsaWJyaUl0YWxpY0ZhY3RvcnM9WzEuMzg3NywxLDEsMSwxLjE3MjIzLDEuMTI5MywuODk1NTIsLjkxMTMzLC44MDM5NSwxLjAyMjY5LDEuMTU2MDEsLjkxMDU2LC45MTA1NiwxLjI3OTgsLjg1Mjg0LC44OTgwNywxLC45MDg2MSwxLjM5NTQzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTYzMDksLjk2MzA5LC44NTI4NCwuODUyODQsLjg1Mjg0LC44MzMxOSwuODgwNzEsLjg2NzUsLjgxNTUyLC43MjM0NiwuODUxOTMsLjczMjA2LC43NTIyLC44MTEwNSwuODYyNzUsLjkwNjg1LC42Mzc3LC43Nzg5MiwuNzU1OTMsMS4wMjYzOCwuODkyNDksLjg0MTE4LC43NzQ1MiwuODUzNzQsLjc1MTg2LC42Nzc4OSwuNzk3NzYsLjg4ODQ0LC44NTA2NiwuOTQzMDksLjc3ODE4LC43MzA2LC43NjY1OSwxLjEwMzY5LDEuMzgzMTMsMS4xMDM2OSwxLjA2MTM5LC44OTU1MiwuODczOSwuOTI0NSwuOTI0NSwuODMyMDMsLjkyNDUsLjg1ODY1LDEuMDk4NDIsLjkyNDUsLjkyNDUsMS4wMzI5NywxLjA3NjkyLC45MDkxOCwxLjAzMjk3LC45NDk1OSwuOTI0NSwuOTIyNzQsLjkyNDUsLjkyNDUsMS4wMjkzMywuNzc4MzIsMS4yMDU2MiwuOTI0NSwuODkxNiwuOTg5ODYsLjg2NjIxLC44OTQ1MywuNzkwMDQsLjk0MTUyLDEuNzcyNTYsLjk0MTUyLC44NTI4NCwuOTc4MDEsLjg5NTUyLC45MTEzMywuODk1NTIsLjkxMTMzLDEuOTE3MjksLjg5NTUyLDEuMTc4ODksMS4xMzI1NCwxLjE2MzU5LC45MjA5OCwuODUyODQsLjY4Nzg3LC43MTM1MywuODQ3MzcsLjkwNzQ3LDEuMDA4OCwxLjAwNDQsLjg3NjgzLDEsMS4wOTA5MSwxLC45MjIyOSwuNzM5LDEuMTU2NDIsLjkyMDk4LC43NjI4OCwuODA1MDQsLjgwOTcyLC43NTg1OSwuODY3NSwuODY3NSwuODY3NSwuODY3NSwuODY3NSwuODY3NSwuNzYzMTgsLjcyMzQ2LC43MzIwNiwuNzMyMDYsLjczMjA2LC43MzIwNiwuOTA2ODUsLjkwNjg1LC45MDY4NSwuOTA2ODUsLjg2NDc3LC44OTI0OSwuODQxMTgsLjg0MTE4LC44NDExOCwuODQxMTgsLjg0MTE4LC44NTI4NCwuODQ1NTcsLjg4ODQ0LC44ODg0NCwuODg4NDQsLjg4ODQ0LC43MzA2LC43NzQ1MiwuODYzMzEsLjkyNDUsLjkyNDUsLjkyNDUsLjkyNDUsLjkyNDUsLjkyNDUsLjg0ODQzLC44MzIwMywuODU4NjUsLjg1ODY1LC44NTg2NSwuODU4NjUsLjgyNjAxLC44MjYwMSwuODI2MDEsLjgyNjAxLC45NDQ2OSwuOTI0NSwuOTIyNzQsLjkyMjc0LC45MjI3NCwuOTIyNzQsLjkyMjc0LC45MDc0NywuODY2NTEsLjkyNDUsLjkyNDUsLjkyNDUsLjkyNDUsLjg5NDUzLC45MjQ1LC44OTQ1MywuODY3NSwuOTI0NSwuODY3NSwuOTI0NSwuODY3NSwuOTI0NSwuNzIzNDYsLjgzMjAzLC43MjM0NiwuODMyMDMsLjcyMzQ2LC44MzIwMywuNzIzNDYsLjgzMjAzLC44NTE5MywuODg3NSwuODY0NzcsLjk5MDM0LC43MzIwNiwuODU4NjUsLjczMjA2LC44NTg2NSwuNzMyMDYsLjg1ODY1LC43MzIwNiwuODU4NjUsLjczMjA2LC44NTg2NSwuODExMDUsLjkyNDUsLjgxMTA1LC45MjQ1LC44MTEwNSwuOTI0NSwxLDEsLjg2Mjc1LC45MjQ1LC45MDg3MiwuOTM1OTEsLjkwNjg1LC44MjYwMSwuOTA2ODUsLjgyNjAxLC45MDY4NSwuODI2MDEsLjkwNjg1LDEuMDMyOTcsLjkwNjg1LC44MjYwMSwuNzc4OTYsMS4wNTYxMSwuNjM3NywxLjA3NjkyLDEsMSwuOTA5MTgsLjc1NTkzLDEuMDMyOTcsMSwxLC43NjAzMiwuOTM3NSwuOTgxNTYsLjkzNDA3LC43NzI2MSwxLjExNDI5LC44OTI0OSwuOTI0NSwxLDEsLjg5MjQ5LC45MjQ1LC45MjUzNCwuODY2OTgsLjkyNDUsLjg0MTE4LC45MjI3NCwuODQxMTgsLjkyMjc0LC44NDExOCwuOTIyNzQsLjg2NjcsLjg2MjkxLC43NTE4NiwxLjAyOTMzLDEsMSwuNzUxODYsMS4wMjkzMywuNjc3ODksLjc3ODMyLC42Nzc4OSwuNzc4MzIsLjY3Nzg5LC43NzgzMiwuNjc3ODksLjc3ODMyLDEsMSwuNzk3NzYsLjk3NjU1LC43OTc3NiwxLjIzMDIzLC44ODg0NCwuOTI0NSwuODg4NDQsLjkyNDUsLjg4ODQ0LC45MjQ1LC44ODg0NCwuOTI0NSwuODg4NDQsLjkyNDUsLjg4ODQ0LC45MjQ1LC45NDMwOSwuOTg5ODYsLjczMDYsLjg5NDUzLC43MzA2LC43NjY1OSwuNzkwMDQsLjc2NjU5LC43OTAwNCwuNzY2NTksLjc5MDA0LDEuMDkyMzEsLjU0ODczLC44Njc1LC45MjQ1LC43NjMxOCwuODQ4NDMsLjg0NTU3LC44NjY1MSwxLDEsLjc5Nzc2LDEuMjA1NjIsMS4xODYyMiwxLjE4NjIyLDEsMS4xNDM3LC42NzAwOSwuOTYzMzQsLjkzNjk1LDEuMzUxOTEsMS40MDkwOSwuOTUxNjEsMS40ODM4NywuODY3NSwuOTA4NjEsLjYxOTIsLjczNjMsLjY0ODI0LC44MjQxMSwuNTYzMjEsLjg1Njk2LDEuMjM1MTYsLjg2NzUsLjgxNTUyLC43Mjg2LC44NDEzNCwuNzMyMDYsLjc2NjU5LC44NjI3NSwuODQzNjksLjkwNjg1LC43Nzg5MiwuODU4NzEsMS4wMjYzOCwuODkyNDksLjc1ODI4LC44NDExOCwuODU5ODQsLjc3NDUyLC43NjQ2NiwuNzk3NzYsLjczMDYsLjkwNzgyLC43NzgxOCwuOTAzLC44NzI5MSwuOTA2ODUsLjczMDYsLjk5MDU4LDEuMDM2NjcsLjk0NjM1LDEuMjM1MTYsLjk4NDksLjk5MDU4LC45MjM5MywuODkxNiwuOTQyLDEuMDM2NjcsLjc1MDI2LC45NDYzNSwxLjAyOTcsMS4yMzUxNiwuOTA5MTgsLjk0MDQ4LC45ODIxNywuODk3NDYsLjg0MTUzLC45MjI3NCwuODI1MDcsLjg4ODMyLC44NDQzOCwuODgxNzgsMS4wMzUyNSwuOTg0OSwxLjAwMjI1LC43ODA4NiwuOTcyNDgsLjg5NDA0LDEuMjM1MTYsLjk4NDksLjkyMjc0LC45ODQ5LC44OTQwNCwuNzMyMDYsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjg5NjkzLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC44NTg2NSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTA5MzMsMSwxLDEsMSwxLDEsLjk0MzA5LC45ODk4NiwuOTQzMDksLjk4OTg2LC45NDMwOSwuOTg5ODYsLjczMDYsLjg5NDUzLDEsMSwuODk1NTIsLjkwNTI3LDEsLjkwMTg2LDEuMTIzMDgsMS4xMjMwOCwxLjEyMzA4LDEuMTIzMDgsMS4yNTY2LDEuMjU2NiwxLjI1NjYsLjg5NTUyLC44OTU1MiwxLjQyMjU5LC42ODk5NCwxLjAzODA5LDEsMSwxLjAxNzYsMS4wMTc2LDEuMTE1MjMsMS40OTU2LDIuMDE0NjIsLjk3ODU4LC44MjYxNiwuOTExMzMsLjgzNDM3LC45MTEzMywxLDEsMSwuNzA1MDgsMSwxLjIzMTA4LC43OTgwMSwuODQ0MjYsLjg0NDI2LC43NzQsLjkwNTcyLDEuODEwNTUsLjkwNzQ5LDEuODEwNTUsMS4yODgwOSwxLjU1NDY5LC45NDQzNCwxLjA3ODA2LDEsLjk3MDk0LC43NTg5LC44NTI4NCwuOTA3NDcsMS4xOTY1OCwuNjk4MjUsLjk3NjIyLDEuMzM1MTIsLjkwNzQ3LC45MDc0NywuODUyODQsLjkwNzQ3LC45MDc0NywxLjQ0OTQ3LC44NTI4NCwuODk0MSwuODk0MSwuNzA1NzIsLjgsLjcwNTcyLC43MDU3MiwuNzA1NzIsLjcwNTcyLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTk4NjIsLjk5ODYyLDEsMSwxLDEsMSwxLjAzMzYsLjkxMDI3LDEsMSwxLC45OTg2MiwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjA1ODU5LDEuMDU4NTksMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDFdO3QuQ2FsaWJyaUl0YWxpY01ldHJpY3M9e2xpbmVIZWlnaHQ6MS4yMjA3LGxpbmVHYXA6LjIyMDd9O3QuQ2FsaWJyaVJlZ3VsYXJGYWN0b3JzPVsxLjM4NzcsMSwxLDEsMS4xNzIyMywxLjEyOTMsLjg5NTUyLC45MTEzMywuODAzOTUsMS4wMjI2OSwxLjE1NjAxLC45MTA1NiwuOTEwNTYsMS4yNzk4LC44NTI4NCwuODk4MDcsMSwuOTA4NjEsMS4zOTAxNiwuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjkxMTMzLC45MTEzMywuOTExMzMsLjk2MzA5LC45NjMwOSwuODUyODQsLjg1Mjg0LC44NTI4NCwuODMzMTksLjg4MDcxLC44Njc1LC44MTU1MiwuNzM4MzQsLjg1MTkzLC43MzIwNiwuNzUyMiwuODExMDUsLjg2Mjc1LC45MDY4NSwuNjM3NywuNzc4OTIsLjc1NTkzLDEuMDI2MzgsLjg5Mzg1LC44NTEyMiwuNzc0NTIsLjg2NTAzLC43NTE4NiwuNjg4ODcsLjc5Nzc2LC44ODg0NCwuODUwNjYsLjk0MjU4LC43NzgxOCwuNzMwNiwuNzY2NTksMS4xMDM2OSwxLjM5MDE2LDEuMTAzNjksMS4wNjEzOSwuODk1NTIsLjg3MzksLjg2MTI4LC45NDQ2OSwuODQ1NywuOTQ0NjksLjg5NDY0LDEuMDk4NDIsLjg0NjM2LC45NDQ2OSwxLjAzMjk3LDEuMDc2OTIsLjkwOTE4LDEuMDMyOTcsLjk1ODk3LC45NDQ2OSwuOTQ4MiwuOTQ0NjksLjk0NDY5LDEuMDQ2OTIsLjc4MjIzLDEuMjA1NjIsLjk0NDY5LC45MDMzMiwuOTg5ODYsLjg2NjIxLC45MDUyNywuNzkwMDQsLjk0MTUyLDEuNzcyNTYsLjk0MTUyLC44NTI4NCwuOTc4MDEsLjg5NTUyLC45MTEzMywuODk1NTIsLjkxMTMzLDEuOTE3MjksLjg5NTUyLDEuMTc4ODksMS4xMzI1NCwxLjA4NzA3LC45MjA5OCwuODUyODQsLjY4Nzg3LC43MTM1MywuODQ3MzcsLjkwNzQ3LDEuMDA4OCwxLjAwNDQsLjg3NjgzLDEsMS4wOTA5MSwxLC45MjIyOSwuNzM5LDEuMTU2NDIsLjkyMDk4LC43NjI4OCwuODA1MDQsLjgwOTcyLC43NTg1OSwuODY3NSwuODY3NSwuODY3NSwuODY3NSwuODY3NSwuODY3NSwuNzYzMTgsLjczODM0LC43MzIwNiwuNzMyMDYsLjczMjA2LC43MzIwNiwuOTA2ODUsLjkwNjg1LC45MDY4NSwuOTA2ODUsLjg2NDc3LC44OTM4NSwuODUxMjIsLjg1MTIyLC44NTEyMiwuODUxMjIsLjg1MTIyLC44NTI4NCwuODUzMTEsLjg4ODQ0LC44ODg0NCwuODg4NDQsLjg4ODQ0LC43MzA2LC43NzQ1MiwuODYzMzEsLjg2MTI4LC44NjEyOCwuODYxMjgsLjg2MTI4LC44NjEyOCwuODYxMjgsLjg2OTMsLjg0NTcsLjg5NDY0LC44OTQ2NCwuODk0NjQsLjg5NDY0LC44MjYwMSwuODI2MDEsLjgyNjAxLC44MjYwMSwuOTQ0NjksLjk0NDY5LC45NDgyLC45NDgyLC45NDgyLC45NDgyLC45NDgyLC45MDc0NywuODY2NTEsLjk0NDY5LC45NDQ2OSwuOTQ0NjksLjk0NDY5LC45MDUyNywuOTQ0NjksLjkwNTI3LC44Njc1LC44NjEyOCwuODY3NSwuODYxMjgsLjg2NzUsLjg2MTI4LC43MzgzNCwuODQ1NywuNzM4MzQsLjg0NTcsLjczODM0LC44NDU3LC43MzgzNCwuODQ1NywuODUxOTMsLjkyNDU0LC44NjQ3NywuOTkyMSwuNzMyMDYsLjg5NDY0LC43MzIwNiwuODk0NjQsLjczMjA2LC44OTQ2NCwuNzMyMDYsLjg5NDY0LC43MzIwNiwuODk0NjQsLjgxMTA1LC44NDYzNiwuODExMDUsLjg0NjM2LC44MTEwNSwuODQ2MzYsMSwxLC44NjI3NSwuOTQ0NjksLjkwODcyLC45NTc4NiwuOTA2ODUsLjgyNjAxLC45MDY4NSwuODI2MDEsLjkwNjg1LC44MjYwMSwuOTA2ODUsMS4wMzI5NywuOTA2ODUsLjgyNjAxLC43Nzc0MSwxLjA1NjExLC42Mzc3LDEuMDc2OTIsMSwxLC45MDkxOCwuNzU1OTMsMS4wMzI5NywxLDEsLjc2MDMyLC45MDQ1MiwuOTgxNTYsMS4xMTg0MiwuNzcyNjEsMS4xMTQyOSwuODkzODUsLjk0NDY5LDEsMSwuODkzODUsLjk0NDY5LC45NTg3NywuODY5MDEsLjk0NDY5LC44NTEyMiwuOTQ4MiwuODUxMjIsLjk0ODIsLjg1MTIyLC45NDgyLC44NjY3LC45MDAxNiwuNzUxODYsMS4wNDY5MiwxLDEsLjc1MTg2LDEuMDQ2OTIsLjY4ODg3LC43ODIyMywuNjg4ODcsLjc4MjIzLC42ODg4NywuNzgyMjMsLjY4ODg3LC43ODIyMywxLDEsLjc5Nzc2LC45MjE4OCwuNzk3NzYsMS4yMzAyMywuODg4NDQsLjk0NDY5LC44ODg0NCwuOTQ0NjksLjg4ODQ0LC45NDQ2OSwuODg4NDQsLjk0NDY5LC44ODg0NCwuOTQ0NjksLjg4ODQ0LC45NDQ2OSwuOTQyNTgsLjk4OTg2LC43MzA2LC45MDUyNywuNzMwNiwuNzY2NTksLjc5MDA0LC43NjY1OSwuNzkwMDQsLjc2NjU5LC43OTAwNCwxLjA5MjMxLC41NDg3MywuODY3NSwuODYxMjgsLjc2MzE4LC44NjkzLC44NTMxMSwuODY2NTEsMSwxLC43OTc3NiwxLjIwNTYyLDEuMTg2MjIsMS4xODYyMiwxLDEuMTQzNywuNjc3NDIsLjk2MzM0LC45MzY5NSwxLjM1MTkxLDEuNDA5MDksLjk1MTYxLDEuNDgzODcsLjg2Njg2LC45MDg2MSwuNjIyNjcsLjc0MzU5LC42NTY0OSwuODU0OTgsLjU2OTYzLC44ODI1NCwxLjIzNTE2LC44Njc1LC44MTU1MiwuNzU0NDMsLjg0NTAzLC43MzIwNiwuNzY2NTksLjg2Mjc1LC44NTEyMiwuOTA2ODUsLjc3ODkyLC44NTc0NiwxLjAyNjM4LC44OTM4NSwuNzU2NTcsLjg1MTIyLC44NjI3NSwuNzc0NTIsLjc0MTcxLC43OTc3NiwuNzMwNiwuOTUxNjUsLjc3ODE4LC44OTc3MiwuODg4MzEsLjkwNjg1LC43MzA2LC45ODE0MiwxLjAyMTkxLC45NjU3NiwxLjIzNTE2LC45OTAxOCwuOTgxNDIsLjkyMzYsLjg5MjU4LC45NDAzNSwxLjAyMTkxLC43ODg0OCwuOTY1NzYsLjk1NjEsMS4yMzUxNiwuOTA5MTgsLjkyNTc4LC45NTQyNCwuODk3NDYsLjgzOTY5LC45NDgyLC44MDExMywuODk0NDIsLjg1MjA4LC44NjE1NSwuOTgwMjIsLjk5MDE4LDEuMDA0NTIsLjgxMjA5LC45OTI0NywuODkxODEsMS4yMzUxNiwuOTkwMTgsLjk0ODIsLjk5MDE4LC44OTE4MSwuNzMyMDYsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjg4ODQ0LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC44OTQ2NCwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTY3NjYsMSwxLDEsMSwxLDEsLjk0MjU4LC45ODk4NiwuOTQyNTgsLjk4OTg2LC45NDI1OCwuOTg5ODYsLjczMDYsLjkwNTI3LDEsMSwuODk1NTIsLjkwNTI3LDEsLjkwMTg2LDEuMTIzMDgsMS4xMjMwOCwxLjEyMzA4LDEuMTIzMDgsMS4yNTY2LDEuMjU2NiwxLjI1NjYsLjg5NTUyLC44OTU1MiwxLjQyMjU5LC42OTA0MywxLjAzODA5LDEsMSwxLjAxNzYsMS4wMTc2LDEuMTE1MjMsMS40OTU2LDIuMDE0NjIsLjk5MzMxLC44MjYxNiwuOTExMzMsLjg0Mjg2LC45MTEzMywxLDEsMSwuNzA1MDgsMSwxLjIzMTA4LC43OTgwMSwuODQ0MjYsLjg0NDI2LC43NzQsLjkwNTI3LDEuODEwNTUsLjkwNTI3LDEuODEwNTUsMS4yODgwOSwxLjU1NDY5LC45NDQzNCwxLjA3ODA2LDEsLjk3MDk0LC43NTg5LC44NTI4NCwuOTA3NDcsMS4xOTY1OCwuNjk4MjUsLjk3NjIyLDEuMzM1MTIsLjkwNzQ3LC45MDc0NywuODUzNTYsLjkwNzQ3LC45MDc0NywxLjQ0OTQ3LC44NTI4NCwuODk0MSwuODk0MSwuNzA1NzIsLjgsLjcwNTcyLC43MDU3MiwuNzA1NzIsLjcwNTcyLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTk4NjIsLjk5ODYyLDEsMSwxLDEsMSwxLjAzMzYsLjkxMDI3LDEsMSwxLC45OTg2MiwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjA1ODU5LDEuMDU4NTksMSwxLDEsMS4wNzE4NSwuOTk0MTMsLjk2MzM0LDEuMDgwNjUsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXTt0LkNhbGlicmlSZWd1bGFyTWV0cmljcz17bGluZUhlaWdodDoxLjIyMDcsbGluZUdhcDouMjIwN319LChlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuSGVsdmV0aWNhUmVndWxhck1ldHJpY3M9dC5IZWx2ZXRpY2FSZWd1bGFyRmFjdG9ycz10LkhlbHZldGljYUl0YWxpY01ldHJpY3M9dC5IZWx2ZXRpY2FJdGFsaWNGYWN0b3JzPXQuSGVsdmV0aWNhQm9sZE1ldHJpY3M9dC5IZWx2ZXRpY2FCb2xkSXRhbGljTWV0cmljcz10LkhlbHZldGljYUJvbGRJdGFsaWNGYWN0b3JzPXQuSGVsdmV0aWNhQm9sZEZhY3RvcnM9dm9pZCAwO3QuSGVsdmV0aWNhQm9sZEZhY3RvcnM9Wy43NjExNiwxLDEsMS4wMDA2LC45OTk5OCwuOTk5NzQsLjk5OTczLC45OTk3MywuOTk5ODIsLjk5OTc3LDEuMDAwODcsLjk5OTk4LC45OTk5OCwuOTk5NTksMS4wMDAwMywxLjAwMDYsLjk5OTk4LDEuMDAwNiwxLjAwMDYsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk5OCwxLDEuMDAwMDMsMS4wMDAwMywxLjAwMDAzLDEuMDAwMjYsLjk5OTksLjk5OTc3LC45OTk3NywuOTk5NzcsLjk5OTc3LDEuMDAwMDEsMS4wMDAyNiwxLjAwMDIyLC45OTk3NywxLjAwMDYsLjk5OTczLC45OTk3NywxLjAwMDI2LC45OTk5OSwuOTk5NzcsMS4wMDAyMiwxLjAwMDAxLDEuMDAwMjIsLjk5OTc3LDEuMDAwMDEsMS4wMDAyNiwuOTk5NzcsMS4wMDAwMSwxLjAwMDE2LDEuMDAwMDEsMS4wMDAwMSwxLjAwMDI2LC45OTk5OCwxLjAwMDYsLjk5OTk4LDEuMDAwMDMsLjk5OTczLC45OTk5OCwuOTk5NzMsMS4wMDAyNiwuOTk5NzMsMS4wMDAyNiwuOTk5NzMsLjk5OTk4LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDYsMS4wMDA2LC45OTk3MywxLjAwMDYsLjk5OTgyLDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsLjk5OTU5LC45OTk3MywuOTk5OTgsMS4wMDAyNiwuOTk5NzMsMS4wMDAyMiwuOTk5NzMsLjk5OTczLDEsLjk5OTU5LDEuMDAwNzcsLjk5OTU5LDEuMDAwMDMsLjk5OTk4LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywxLjAwMDc3LC45OTk3MywuOTk5OTgsMS4wMDAyNSwuOTk5NjgsLjk5OTczLDEuMDAwMDMsMS4wMDAyNSwuNjAyOTksMS4wMDAyNCwxLjA2NDA5LDEsMSwuOTk5OTgsMSwuOTk5NzMsMS4wMDA2LC45OTk5OCwxLC45OTkzNiwuOTk5NzMsMS4wMDAwMiwxLjAwMDAyLDEuMDAwMDIsMS4wMDAyNiwuOTk5NzcsLjk5OTc3LC45OTk3NywuOTk5NzcsLjk5OTc3LC45OTk3NywxLC45OTk3NywxLjAwMDAxLDEuMDAwMDEsMS4wMDAwMSwxLjAwMDAxLDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwuOTk5NzcsLjk5OTc3LDEuMDAwMjIsMS4wMDAyMiwxLjAwMDIyLDEuMDAwMjIsMS4wMDAyMiwxLjAwMDAzLDEuMDAwMjIsLjk5OTc3LC45OTk3NywuOTk5NzcsLjk5OTc3LDEuMDAwMDEsMS4wMDAwMSwxLjAwMDI2LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk4MiwuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LDEuMDY0MDksMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LC45OTk3MywxLjAwMDI2LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywxLjAzMzc0LC45OTk3NywxLjAwMDI2LDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMjIsMS4wMDAyNiwxLjAwMDIyLDEuMDAwMjYsMS4wMDAyMiwxLjAwMDI2LDEuMDAwMjIsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA0MiwuOTk5NzMsLjk5OTczLDEuMDAwNiwuOTk5NzcsLjk5OTczLC45OTk3MywxLjAwMDI2LDEuMDAwNiwxLjAwMDI2LDEuMDAwNiwxLjAwMDI2LDEuMDM4MjgsMS4wMDAyNiwuOTk5OTksMS4wMDAyNiwxLjAwMDYsLjk5OTc3LDEuMDAwMjYsLjk5OTc3LDEuMDAwMjYsLjk5OTc3LDEuMDAwMjYsLjk5OTMsLjk5OTgsMS4wMDAyNiwxLjAwMDIyLDEuMDAwMjYsMS4wMDAyMiwxLjAwMDI2LDEuMDAwMjIsMS4wMDAyNiwxLDEuMDAwMTYsLjk5OTc3LC45OTk1OSwuOTk5NzcsLjk5OTU5LC45OTk3NywuOTk5NTksMS4wMDAwMSwuOTk5NzMsMS4wMDAwMSwuOTk5NzMsMS4wMDAwMSwuOTk5NzMsMS4wMDAwMSwuOTk5NzMsMS4wMDAyNiwuOTk5OTgsMS4wMDAyNiwuODEyMSwxLjAwMDI2LC45OTk5OCwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwxLjAwMDE2LDEuMDAwMjIsMS4wMDAwMSwuOTk5NzMsMS4wMDAwMSwxLjAwMDI2LDEsMS4wMDAyNiwxLDEuMDAwMjYsMSwxLjAwMDYsLjk5OTczLC45OTk3NywuOTk5NzMsMSwuOTk5ODIsMS4wMDAyMiwxLjAwMDI2LDEuMDAwMDEsLjk5OTczLDEuMDAwMjYsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwxLjAwMDM0LC45OTk3NywxLC45OTk5NywxLjAwMDI2LDEuMDAwNzgsMS4wMDAzNiwuOTk5NzMsMS4wMDAxMywxLjAwMDYsLjk5OTc3LC45OTk3NywuOTk5ODgsLjg1MTQ4LDEuMDAwMDEsMS4wMDAyNiwuOTk5NzcsMS4wMDAyMiwxLjAwMDYsLjk5OTc3LDEuMDAwMDEsLjk5OTk5LC45OTk3NywxLjAwMDY5LDEuMDAwMjIsLjk5OTc3LDEuMDAwMDEsLjk5OTg0LDEuMDAwMjYsMS4wMDAwMSwxLjAwMDI0LDEuMDAwMDEsLjk5OTksMSwxLjAwMDYsMS4wMDAwMSwxLjAwMDQxLC45OTk2MiwxLjAwMDI2LDEuMDAwNiwuOTk5OTUsMS4wMDA0MSwuOTk5NDIsLjk5OTczLC45OTkyNywxLjAwMDgyLC45OTkwMiwxLjAwMDI2LDEuMDAwODcsMS4wMDA2LDEuMDAwNjksLjk5OTczLC45OTg2NywuOTk5NzMsLjk5OTMsMS4wMDAyNiwxLjAwMDQ5LDEuMDAwNTYsMSwuOTk5ODgsLjk5OTM1LC45OTk5NSwuOTk5NTQsMS4wMDA1NSwuOTk5NDUsMS4wMDAzMiwxLjAwMDYsLjk5OTk1LDEuMDAwMjYsLjk5OTk1LDEuMDAwMzIsMS4wMDAwMSwxLjAwMDA4LC45OTk3MSwxLjAwMDE5LC45OTk0LDEuMDAwMDEsMS4wMDA2LDEuMDAwNDQsLjk5OTczLDEuMDAwMjMsMS4wMDA0NywxLC45OTk0MiwuOTk1NjEsLjk5OTg5LDEuMDAwMzUsLjk5OTc3LDEuMDAwMzUsLjk5OTc3LDEuMDAwMTksLjk5OTQ0LDEuMDAwMDEsMS4wMDAyMSwuOTk5MjYsMS4wMDAzNSwxLjAwMDM1LC45OTk0MiwxLjAwMDQ4LC45OTk5OSwuOTk5NzcsMS4wMDAyMiwxLjAwMDM1LDEuMDAwMDEsLjk5OTc3LDEuMDAwMjYsLjk5OTg5LDEuMDAwNTcsMS4wMDAwMSwuOTk5MzYsMS4wMDA1MiwxLjAwMDEyLC45OTk5NiwxLjAwMDQzLDEsMS4wMDAzNSwuOTk5NCwuOTk5NzYsMS4wMDAzNSwuOTk5NzMsMS4wMDA1MiwxLjAwMDQxLDEuMDAxMTksMS4wMDAzNywuOTk5NzMsMS4wMDAwMiwuOTk5ODYsMS4wMDA0MSwxLjAwMDQxLC45OTkwMiwuOTk5NiwxLjAwMDM0LC45OTk5OSwxLjAwMDI2LC45OTk5OSwxLjAwMDI2LC45OTk3MywxLjAwMDUyLC45OTk3MywxLC45OTk3MywxLjAwMDQxLDEuMDAwNzUsLjk5OTQsMS4wMDAzLC45OTk5OSwxLDEuMDAwNDEsLjk5OTU1LDEsLjk5OTE1LC45OTk3MywuOTk5NzMsMS4wMDAyNiwxLjAwMTE5LC45OTk1NSwuOTk5NzMsMS4wMDA2LC45OTkxMSwxLjAwMDYsMS4wMDAyNiwuOTk5NzIsMS4wMDAyNiwuOTk5MDIsMS4wMDA0MSwuOTk5NzMsLjk5OTk5LDEsMSwxLjAwMDM4LDEuMDAwNSwxLjAwMDE2LDEuMDAwMjIsMS4wMDAxNiwxLjAwMDIyLDEuMDAwMTYsMS4wMDAyMiwxLjAwMDAxLC45OTk3MywxLDEsLjk5OTczLDEsMSwuOTk5NTUsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEsMSwxLC45OTk3MywuOTk5NzMsLjk5OTcyLDEsMSwxLjAwMTA2LC45OTk5OSwuOTk5OTgsLjk5OTk4LC45OTk5OSwuOTk5OTgsMS42NjQ3NSwxLC45OTk3MywuOTk5NzMsMS4wMDAyMywuOTk5NzMsLjk5OTcxLDEuMDAwNDcsMS4wMDAyMywxLC45OTk5MSwuOTk5ODQsMS4wMDAwMiwxLjAwMDAyLDEuMDAwMDIsMS4wMDAwMiwxLDEsMSwxLDEsMSwxLC45OTk3MiwxLDEuMjA5ODUsMS4zOTcxMywxLjAwMDAzLDEuMDAwMzEsMS4wMDAxNSwxLC45OTU2MSwxLjAwMDI3LDEuMDAwMzEsMS4wMDAzMSwuOTk5MTUsMS4wMDAzMSwxLjAwMDMxLC45OTk5OSwxLjAwMDAzLC45OTk5OSwuOTk5OTksMS40MTE0NCwxLjYsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQwNTc5LDEuNDA1NzksMS4zNjYyNSwuOTk5OTksMSwuOTk4NjEsLjk5ODYxLDEsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwuOTk5NzIsLjk5OTk5LC45OTk5OSwuOTk5OTksLjk5OTk5LDEuNDA0ODMsMSwuOTk5NzcsMS4wMDA1NCwxLDEsLjk5OTUzLC45OTk2MiwxLjAwMDQyLC45OTk1LDEsMSwxLDEsMSwxLDEsMSwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXTt0LkhlbHZldGljYUJvbGRNZXRyaWNzPXtsaW5lSGVpZ2h0OjEuMixsaW5lR2FwOi4yfTt0LkhlbHZldGljYUJvbGRJdGFsaWNGYWN0b3JzPVsuNzYxMTYsMSwxLDEuMDAwNiwuOTk5OTgsLjk5OTc0LC45OTk3MywuOTk5NzMsLjk5OTgyLC45OTk3NywxLjAwMDg3LC45OTk5OCwuOTk5OTgsLjk5OTU5LDEuMDAwMDMsMS4wMDA2LC45OTk5OCwxLjAwMDYsMS4wMDA2LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5OTgsMSwxLjAwMDAzLDEuMDAwMDMsMS4wMDAwMywxLjAwMDI2LC45OTk5LC45OTk3NywuOTk5NzcsLjk5OTc3LC45OTk3NywxLjAwMDAxLDEuMDAwMjYsMS4wMDAyMiwuOTk5NzcsMS4wMDA2LC45OTk3MywuOTk5NzcsMS4wMDAyNiwuOTk5OTksLjk5OTc3LDEuMDAwMjIsMS4wMDAwMSwxLjAwMDIyLC45OTk3NywxLjAwMDAxLDEuMDAwMjYsLjk5OTc3LDEuMDAwMDEsMS4wMDAxNiwxLjAwMDAxLDEuMDAwMDEsMS4wMDAyNiwuOTk5OTgsMS4wMDA2LC45OTk5OCwxLjAwMDAzLC45OTk3MywuOTk5OTgsLjk5OTczLDEuMDAwMjYsLjk5OTczLDEuMDAwMjYsLjk5OTczLC45OTk5OCwxLjAwMDI2LDEuMDAwMjYsMS4wMDA2LDEuMDAwNiwuOTk5NzMsMS4wMDA2LC45OTk4MiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LC45OTk1OSwuOTk5NzMsLjk5OTk4LDEuMDAwMjYsLjk5OTczLDEuMDAwMjIsLjk5OTczLC45OTk3MywxLC45OTk1OSwxLjAwMDc3LC45OTk1OSwxLjAwMDAzLC45OTk5OCwuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsMS4wMDA3NywuOTk5NzMsLjk5OTk4LDEuMDAwMjUsLjk5OTY4LC45OTk3MywxLjAwMDAzLDEuMDAwMjUsLjYwMjk5LDEuMDAwMjQsMS4wNjQwOSwxLDEsLjk5OTk4LDEsLjk5OTczLDEuMDAwNiwuOTk5OTgsMSwuOTk5MzYsLjk5OTczLDEuMDAwMDIsMS4wMDAwMiwxLjAwMDAyLDEuMDAwMjYsLjk5OTc3LC45OTk3NywuOTk5NzcsLjk5OTc3LC45OTk3NywuOTk5NzcsMSwuOTk5NzcsMS4wMDAwMSwxLjAwMDAxLDEuMDAwMDEsMS4wMDAwMSwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsLjk5OTc3LC45OTk3NywxLjAwMDIyLDEuMDAwMjIsMS4wMDAyMiwxLjAwMDIyLDEuMDAwMjIsMS4wMDAwMywxLjAwMDIyLC45OTk3NywuOTk5NzcsLjk5OTc3LC45OTk3NywxLjAwMDAxLDEuMDAwMDEsMS4wMDAyNiwuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5ODIsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwxLjA2NDA5LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwuOTk5NzMsMS4wMDAyNiwuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsMS4wMDQ0LC45OTk3NywxLjAwMDI2LDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMjIsMS4wMDAyNiwxLjAwMDIyLDEuMDAwMjYsMS4wMDAyMiwxLjAwMDI2LDEuMDAwMjIsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsLjk5OTcxLC45OTk3MywuOTk5NzMsMS4wMDA2LC45OTk3NywuOTk5NzMsLjk5OTczLDEuMDAwMjYsMS4wMDA2LDEuMDAwMjYsMS4wMDA2LDEuMDAwMjYsMS4wMTAxMSwxLjAwMDI2LC45OTk5OSwxLjAwMDI2LDEuMDAwNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5NzcsMS4wMDAyNiwuOTk5MywuOTk5OCwxLjAwMDI2LDEuMDAwMjIsMS4wMDAyNiwxLjAwMDIyLDEuMDAwMjYsMS4wMDAyMiwxLjAwMDI2LDEsMS4wMDAxNiwuOTk5NzcsLjk5OTU5LC45OTk3NywuOTk5NTksLjk5OTc3LC45OTk1OSwxLjAwMDAxLC45OTk3MywxLjAwMDAxLC45OTk3MywxLjAwMDAxLC45OTk3MywxLjAwMDAxLC45OTk3MywxLjAwMDI2LC45OTk5OCwxLjAwMDI2LC44MTIxLDEuMDAwMjYsLjk5OTk4LC45OTk3NywxLjAwMDI2LC45OTk3NywxLjAwMDI2LC45OTk3NywxLjAwMDI2LC45OTk3NywxLjAwMDI2LC45OTk3NywxLjAwMDI2LC45OTk3NywxLjAwMDI2LDEuMDAwMTYsMS4wMDAyMiwxLjAwMDAxLC45OTk3MywxLjAwMDAxLDEuMDAwMjYsMSwxLjAwMDI2LDEsMS4wMDAyNiwxLDEuMDAwNiwuOTk5NzMsLjk5OTc3LC45OTk3MywxLC45OTk4MiwxLjAwMDIyLDEuMDAwMjYsMS4wMDAwMSwuOTk5NzMsMS4wMDAyNiwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5NzcsMSwxLDEuMDAwMjYsLjk5OTY5LC45OTk3MiwuOTk5ODEsLjk5OTgsMS4wMDA2LC45OTk3NywuOTk5NzcsMS4wMDAyMiwuOTExNTUsMS4wMDAwMSwxLjAwMDI2LC45OTk3NywxLjAwMDIyLDEuMDAwNiwuOTk5NzcsMS4wMDAwMSwuOTk5OTksLjk5OTc3LC45OTk2NiwxLjAwMDIyLDEuMDAwMzIsMS4wMDAwMSwuOTk5NDQsMS4wMDAyNiwxLjAwMDAxLC45OTk2OCwxLjAwMDAxLDEuMDAwNDcsMSwxLjAwMDYsMS4wMDAwMSwuOTk5ODEsMS4wMDEwMSwxLjAwMDI2LDEuMDAwNiwuOTk5NDgsLjk5OTgxLDEuMDAwNjQsLjk5OTczLC45OTk0MiwxLjAwMTAxLDEuMDAwNjEsMS4wMDAyNiwxLjAwMDY5LDEuMDAwNiwxLjAwMDE0LC45OTk3MywxLjAxMzIyLC45OTk3MywxLjAwMDY1LDEuMDAwMjYsMS4wMDAxMiwuOTk5MjMsMSwxLjAwMDY0LDEuMDAwNzYsLjk5OTQ4LDEuMDAwNTUsMS4wMDA2MywxLjAwMDA3LC45OTk0MywxLjAwMDYsLjk5OTQ4LDEuMDAwMjYsLjk5OTQ4LC45OTk0MywxLjAwMDAxLDEuMDAwMDEsMS4wMDAyOSwxLjAwMDM4LDEuMDAwMzUsMS4wMDAwMSwxLjAwMDYsMS4wMDA2LC45OTk3MywuOTk5NzgsMS4wMDAwMSwxLjAwMDU3LC45OTk4OSwuOTk5NjcsLjk5OTY0LC45OTk2NywuOTk5NzcsLjk5OTk5LC45OTk3NywxLjAwMDM4LC45OTk3NywxLjAwMDAxLC45OTk3MywxLjAwMDY2LC45OTk2NywuOTk5NjcsMS4wMDA0MSwuOTk5OTgsLjk5OTk5LC45OTk3NywxLjAwMDIyLC45OTk2NywxLjAwMDAxLC45OTk3NywxLjAwMDI2LC45OTk2NCwxLjAwMDMxLDEuMDAwMDEsLjk5OTk5LC45OTk5OSwxLDEuMDAwMjMsMSwxLC45OTk5OSwxLjAwMDM1LDEuMDAwMDEsLjk5OTk5LC45OTk3MywuOTk5NzcsLjk5OTk5LDEuMDAwNTgsLjk5OTczLC45OTk3MywuOTk5NTUsLjk5OTUsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMzIsLjk5OTg5LDEuMDAwMzQsLjk5OTk5LDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LC45OTk3MywuNDU5OTgsLjk5OTczLDEuMDAwMjYsLjk5OTczLDEuMDAwMDEsLjk5OTk5LC45OTk4MiwuOTk5OTQsLjk5OTk2LDEsMS4wMDA0MiwxLjAwMDQ0LDEuMDAwMjksMS4wMDAyMywuOTk5NzMsLjk5OTczLDEuMDAwMjYsLjk5OTQ5LDEuMDAwMDIsLjk5OTczLDEuMDAwNiwxLjAwMDYsMS4wMDA2LC45OTk3NSwxLjAwMDI2LDEuMDAwMjYsMS4wMDAzMiwuOTg2ODUsLjk5OTczLDEuMDAwMjYsMSwxLC45OTk2NiwxLjAwMDQ0LDEuMDAwMTYsMS4wMDAyMiwxLjAwMDE2LDEuMDAwMjIsMS4wMDAxNiwxLjAwMDIyLDEuMDAwMDEsLjk5OTczLDEsMSwuOTk5NzMsMSwxLC45OTk1NSwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMSwxLDEsLjk5OTczLC45OTk3MywuOTk5NzIsMSwxLDEuMDAxMDYsLjk5OTk5LC45OTk5OCwuOTk5OTgsLjk5OTk5LC45OTk5OCwxLjY2NDc1LDEsLjk5OTczLC45OTk3MywxLC45OTk3MywuOTk5NzEsLjk5OTc4LDEsMSwuOTk5OTEsLjk5OTg0LDEuMDAwMDIsMS4wMDAwMiwxLjAwMDAyLDEuMDAwMDIsMS4wMDA5OCwxLDEsMSwxLjAwMDQ5LDEsMSwuOTk5NzIsMSwxLjIwOTg1LDEuMzk3MTMsMS4wMDAwMywxLjAwMDMxLDEuMDAwMTUsMSwuOTk1NjEsMS4wMDAyNywxLjAwMDMxLDEuMDAwMzEsLjk5OTE1LDEuMDAwMzEsMS4wMDAzMSwuOTk5OTksMS4wMDAwMywuOTk5OTksLjk5OTk5LDEuNDExNDQsMS42LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MDU3OSwxLjQwNTc5LDEuMzY2MjUsLjk5OTk5LDEsLjk5ODYxLC45OTg2MSwxLDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsLjk5OTcyLC45OTk5OSwuOTk5OTksLjk5OTk5LC45OTk5OSwxLjQwNDgzLDEsLjk5OTc3LDEuMDAwNTQsMSwxLC45OTk1MywuOTk5NjIsMS4wMDA0MiwuOTk5NSwxLDEsMSwxLDEsMSwxLDEsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LDEsMSwxLDEsMSwxLDEsMSwxLDEsMV07dC5IZWx2ZXRpY2FCb2xkSXRhbGljTWV0cmljcz17bGluZUhlaWdodDoxLjM1LGxpbmVHYXA6LjJ9O3QuSGVsdmV0aWNhSXRhbGljRmFjdG9ycz1bLjc2MTE2LDEsMSwxLjAwMDYsMS4wMDA2LDEuMDAwMDYsLjk5OTczLC45OTk3MywuOTk5ODIsMS4wMDAwMSwxLjAwMDQzLC45OTk5OCwuOTk5OTgsLjk5OTU5LDEuMDAwMDMsMS4wMDA2LC45OTk5OCwxLjAwMDYsMS4wMDA2LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywxLjAwMDYsMSwxLjAwMDAzLDEuMDAwMDMsMS4wMDAwMywuOTk5NzMsLjk5OTg3LDEuMDAwMDEsMS4wMDAwMSwuOTk5NzcsLjk5OTc3LDEuMDAwMDEsMS4wMDAyNiwxLjAwMDIyLC45OTk3NywxLjAwMDYsMSwxLjAwMDAxLC45OTk3MywuOTk5OTksLjk5OTc3LDEuMDAwMjIsMS4wMDAwMSwxLjAwMDIyLC45OTk3NywxLjAwMDAxLDEuMDAwMjYsLjk5OTc3LDEuMDAwMDEsMS4wMDAxNiwxLjAwMDAxLDEuMDAwMDEsMS4wMDAyNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwuOTk5NDksLjk5OTczLC45OTk5OCwuOTk5NzMsLjk5OTczLDEsLjk5OTczLC45OTk3MywxLjAwMDYsLjk5OTczLC45OTk3MywuOTk5MjQsLjk5OTI0LDEsLjk5OTI0LC45OTk5OSwuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTk4LDEsMS4wMDA2LC45OTk3MywxLC45OTk3NywxLDEsMSwxLjAwMDA1LDEuMDAwOSwxLjAwMDA1LDEuMDAwMDMsLjk5OTk4LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywxLjAwMDksLjk5OTczLC45OTk5OCwxLjAwMDI1LC45OTk2OCwuOTk5NzMsMS4wMDAwMywxLjAwMDI1LC42MDI5OSwxLjAwMDI0LDEuMDY0MDksMSwxLC45OTk5OCwxLC45OTk4LDEuMDAwNiwuOTk5OTgsMSwuOTk5MzYsLjk5OTczLDEuMDAwMDIsMS4wMDAwMiwxLjAwMDAyLDEuMDAwMjYsMS4wMDAwMSwxLjAwMDAxLDEuMDAwMDEsMS4wMDAwMSwxLjAwMDAxLDEuMDAwMDEsMSwuOTk5NzcsMS4wMDAwMSwxLjAwMDAxLDEuMDAwMDEsMS4wMDAwMSwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsLjk5OTc3LC45OTk3NywxLjAwMDIyLDEuMDAwMjIsMS4wMDAyMiwxLjAwMDIyLDEuMDAwMjIsMS4wMDAwMywxLjAwMDIyLC45OTk3NywuOTk5NzcsLjk5OTc3LC45OTk3NywxLjAwMDAxLDEuMDAwMDEsMS4wMDAyNiwuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5ODIsMSwuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywxLjA2NDA5LDEuMDAwMjYsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLDEsLjk5OTczLDEsMS4wMDAwMSwuOTk5NzMsMS4wMDAwMSwuOTk5NzMsMS4wMDAwMSwuOTk5NzMsLjk5OTc3LDEsLjk5OTc3LDEsLjk5OTc3LDEsLjk5OTc3LDEsLjk5OTc3LDEuMDI4OCwuOTk5NzcsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMjIsLjk5OTczLDEuMDAwMjIsLjk5OTczLDEuMDAwMjIsLjk5OTczLDEuMDAwMjIsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsLjk5OTI0LDEuMDAwNiwxLjAwMDYsLjk5OTQ2LDEuMDAwMzQsMSwuOTk5MjQsMS4wMDAwMSwxLDEsLjk5OTczLC45OTkyNCwuOTk5NzMsLjk5OTI0LC45OTk3MywxLjA2MzExLC45OTk3MywxLjAwMDI0LC45OTk3MywuOTk5MjQsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsMS4wMDA0MSwuOTk5OCwuOTk5NzMsMS4wMDAyMiwuOTk5NzMsMS4wMDAyMiwuOTk5NzMsMS4wMDAyMiwuOTk5NzMsMSwxLjAwMDE2LC45OTk3NywuOTk5OTgsLjk5OTc3LC45OTk5OCwuOTk5NzcsLjk5OTk4LDEuMDAwMDEsMSwxLjAwMDAxLDEsMS4wMDAwMSwxLDEuMDAwMDEsMSwxLjAwMDI2LDEuMDAwNiwxLjAwMDI2LC44OTU0NywxLjAwMDI2LDEuMDAwNiwuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywxLjAwMDE2LC45OTk3NywxLjAwMDAxLDEsMS4wMDAwMSwxLjAwMDI2LDEsMS4wMDAyNiwxLDEuMDAwMjYsMSwuOTk5MjQsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEsLjk5OTgyLDEuMDAwMjIsMS4wMDAyNiwxLjAwMDAxLDEsMS4wMDAyNiwxLjAwMDYsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwxLjAwMDAxLDEsMS4wMDA1NCwuOTk5NzcsMS4wMDA4NCwxLjAwMDA3LC45OTk3MywxLjAwMDEzLC45OTkyNCwxLjAwMDAxLDEuMDAwMDEsLjk5OTQ1LC45MTIyMSwxLjAwMDAxLDEuMDAwMjYsLjk5OTc3LDEuMDAwMjIsMS4wMDA2LDEuMDAwMDEsMS4wMDAwMSwuOTk5OTksLjk5OTc3LC45OTkzMywxLjAwMDIyLDEuMDAwNTQsMS4wMDAwMSwxLjAwMDY1LDEuMDAwMjYsMS4wMDAwMSwxLjAwMDEsMS4wMDAwMSwxLjAwMDUyLDEsMS4wMDA2LDEuMDAwMDEsLjk5OTQ1LC45OTg5NywuOTk5NjgsLjk5OTI0LDEuMDAwMzYsLjk5OTQ1LC45OTk0OSwxLDEuMDAwNiwuOTk4OTcsLjk5OTE4LC45OTk2OCwuOTk5MTEsLjk5OTI0LDEsLjk5OTYyLDEuMDE0ODcsMSwxLjAwMDUsLjk5OTczLDEuMDAwMTIsMS4wMDA0MywxLC45OTk5NSwuOTk5OTQsMS4wMDAzNiwuOTk5NDcsMS4wMDAxOSwxLjAwMDYzLDEuMDAwMjUsLjk5OTI0LDEuMDAwMzYsLjk5OTczLDEuMDAwMzYsMS4wMDAyNSwxLjAwMDAxLDEuMDAwMDEsMS4wMDAyNywxLjAwMDEsMS4wMDA2OCwxLjAwMDAxLDEuMDAwNiwxLjAwMDYsMSwxLjAwMDA4LC45OTk1NywuOTk5NzIsLjk5OTQsLjk5OTU0LC45OTk3NSwxLjAwMDUxLDEuMDAwMDEsMS4wMDAxOSwxLjAwMDAxLDEuMDAwMSwuOTk5ODYsMS4wMDAwMSwxLjAwMDAxLDEuMDAwMzgsLjk5OTU0LC45OTk1NCwuOTk5NCwxLjAwMDY2LC45OTk5OSwuOTk5NzcsMS4wMDAyMiwxLjAwMDU0LDEuMDAwMDEsLjk5OTc3LDEuMDAwMjYsLjk5OTc1LDEuMDAwMSwxLjAwMDAxLC45OTk5MywuOTk5NSwuOTk5NTUsMS4wMDAxNiwuOTk5NzgsLjk5OTc0LDEuMDAwMTksMS4wMDAyMiwuOTk5NTUsMS4wMDA1MywuOTk5NzMsMS4wMDA4OSwxLjAwMDA1LC45OTk2NywxLjAwMDQ4LC45OTk3MywxLjAwMDAyLDEuMDAwMzQsLjk5OTczLC45OTk3MywuOTk5NjQsMS4wMDAwNiwxLjAwMDY2LC45OTk0NywuOTk5NzMsLjk4ODk0LC45OTk3MywxLC40NDg5OCwxLC45OTk0NiwxLDEuMDAwMzksMS4wMDA4MiwuOTk5OTEsLjk5OTkxLC45OTk4NSwxLjAwMDIyLDEuMDAwMjMsMS4wMDA2MSwxLjAwMDA2LC45OTk2NiwuOTk5NzMsLjk5OTczLC45OTk3MywxLjAwMDE5LDEuMDAwOCwxLC45OTkyNCwuOTk5MjQsLjk5OTI0LC45OTk4MywxLjAwMDQ0LC45OTk3MywuOTk5NjQsLjk4MzMyLDEsLjk5OTczLDEsMSwuOTk5NjIsLjk5ODk1LDEuMDAwMTYsLjk5OTc3LDEuMDAwMTYsLjk5OTc3LDEuMDAwMTYsLjk5OTc3LDEuMDAwMDEsMSwxLDEsLjk5OTczLDEsMSwuOTk5NTUsLjk5OTI0LC45OTkyNCwuOTk5MjQsLjk5OTI0LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk3MywuOTk5NzMsLjk5OTcyLDEsMSwxLjAwMjY3LC45OTk5OSwuOTk5OTgsLjk5OTk4LDEsLjk5OTk4LDEuNjY0NzUsMSwuOTk5NzMsLjk5OTczLDEuMDAwMjMsLjk5OTczLDEuMDA0MjMsLjk5OTI1LC45OTk5OSwxLC45OTk5MSwuOTk5ODQsMS4wMDAwMiwxLjAwMDAyLDEuMDAwMDIsMS4wMDAwMiwxLjAwMDQ5LDEsMS4wMDI0NSwxLDEsMSwxLC45NjMyOSwxLDEuMjA5ODUsMS4zOTcxMywxLjAwMDAzLC44MjU0LDEuMDAwMTUsMSwxLjAwMDM1LDEuMDAwMjcsMS4wMDAzMSwxLjAwMDMxLDEuMDAwMDMsMS4wMDAzMSwxLjAwMDMxLC45OTk5OSwxLjAwMDAzLC45OTk5OSwuOTk5OTksMS40MTE0NCwxLjYsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQwNTc5LDEuNDA1NzksMS4zNjYyNSwuOTk5OTksMSwuOTk4NjEsLjk5ODYxLDEsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsMS4wMDAyNiwuOTUzMTcsLjk5OTk5LC45OTk5OSwuOTk5OTksLjk5OTk5LDEuNDA0ODMsMSwuOTk5NzcsMS4wMDA1NCwxLDEsLjk5OTUzLC45OTk2MiwxLjAwMDQyLC45OTk1LDEsMSwxLDEsMSwxLDEsMSwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXTt0LkhlbHZldGljYUl0YWxpY01ldHJpY3M9e2xpbmVIZWlnaHQ6MS4zNSxsaW5lR2FwOi4yfTt0LkhlbHZldGljYVJlZ3VsYXJGYWN0b3JzPVsuNzYxMTYsMSwxLDEuMDAwNiwxLjAwMDYsMS4wMDAwNiwuOTk5NzMsLjk5OTczLC45OTk4MiwxLjAwMDAxLDEuMDAwNDMsLjk5OTk4LC45OTk5OCwuOTk5NTksMS4wMDAwMywxLjAwMDYsLjk5OTk4LDEuMDAwNiwxLjAwMDYsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLDEuMDAwNiwxLDEuMDAwMDMsMS4wMDAwMywxLjAwMDAzLC45OTk3MywuOTk5ODcsMS4wMDAwMSwxLjAwMDAxLC45OTk3NywuOTk5NzcsMS4wMDAwMSwxLjAwMDI2LDEuMDAwMjIsLjk5OTc3LDEuMDAwNiwxLDEuMDAwMDEsLjk5OTczLC45OTk5OSwuOTk5NzcsMS4wMDAyMiwxLjAwMDAxLDEuMDAwMjIsLjk5OTc3LDEuMDAwMDEsMS4wMDAyNiwuOTk5NzcsMS4wMDAwMSwxLjAwMDE2LDEuMDAwMDEsMS4wMDAwMSwxLjAwMDI2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LC45OTk0OSwuOTk5NzMsLjk5OTk4LC45OTk3MywuOTk5NzMsMSwuOTk5NzMsLjk5OTczLDEuMDAwNiwuOTk5NzMsLjk5OTczLC45OTkyNCwuOTk5MjQsMSwuOTk5MjQsLjk5OTk5LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5OTgsMSwxLjAwMDYsLjk5OTczLDEsLjk5OTc3LDEsMSwxLDEuMDAwMDUsMS4wMDA5LDEuMDAwMDUsMS4wMDAwMywuOTk5OTgsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLDEuMDAwOSwuOTk5NzMsLjk5OTk4LDEuMDAwMjUsLjk5OTY4LC45OTk3MywxLjAwMDAzLDEuMDAwMjUsLjYwMjk5LDEuMDAwMjQsMS4wNjQwOSwxLDEsLjk5OTk4LDEsLjk5OTgsMS4wMDA2LC45OTk5OCwxLC45OTkzNiwuOTk5NzMsMS4wMDAwMiwxLjAwMDAyLDEuMDAwMDIsMS4wMDAyNiwxLjAwMDAxLDEuMDAwMDEsMS4wMDAwMSwxLjAwMDAxLDEuMDAwMDEsMS4wMDAwMSwxLC45OTk3NywxLjAwMDAxLDEuMDAwMDEsMS4wMDAwMSwxLjAwMDAxLDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwuOTk5NzcsLjk5OTc3LDEuMDAwMjIsMS4wMDAyMiwxLjAwMDIyLDEuMDAwMjIsMS4wMDAyMiwxLjAwMDAzLDEuMDAwMjIsLjk5OTc3LC45OTk3NywuOTk5NzcsLjk5OTc3LDEuMDAwMDEsMS4wMDAwMSwxLjAwMDI2LC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk4MiwxLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsLjk5OTczLDEuMDY0MDksMS4wMDAyNiwuOTk5NzMsLjk5OTczLC45OTk3MywuOTk5NzMsMSwuOTk5NzMsMSwxLjAwMDAxLC45OTk3MywxLjAwMDAxLC45OTk3MywxLjAwMDAxLC45OTk3MywuOTk5NzcsMSwuOTk5NzcsMSwuOTk5NzcsMSwuOTk5NzcsMSwuOTk5NzcsMS4wNDU5NiwuOTk5NzcsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEuMDAwMjIsLjk5OTczLDEuMDAwMjIsLjk5OTczLDEuMDAwMjIsLjk5OTczLDEuMDAwMjIsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsMS4wMDA2LDEuMDAwNiwxLjAwMDYsLjk5OTI0LDEuMDAwNiwxLjAwMDYsMS4wMDAxOSwxLjAwMDM0LDEsLjk5OTI0LDEuMDAwMDEsMSwxLC45OTk3MywuOTk5MjQsLjk5OTczLC45OTkyNCwuOTk5NzMsMS4wMjU3MiwuOTk5NzMsMS4wMDAwNSwuOTk5NzMsLjk5OTI0LC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk5OSwuOTk5OCwuOTk5NzMsMS4wMDAyMiwuOTk5NzMsMS4wMDAyMiwuOTk5NzMsMS4wMDAyMiwuOTk5NzMsMSwxLjAwMDE2LC45OTk3NywuOTk5OTgsLjk5OTc3LC45OTk5OCwuOTk5NzcsLjk5OTk4LDEuMDAwMDEsMSwxLjAwMDAxLDEsMS4wMDAwMSwxLDEuMDAwMDEsMSwxLjAwMDI2LDEuMDAwNiwxLjAwMDI2LC44NDUzMywxLjAwMDI2LDEuMDAwNiwuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywuOTk5NzcsLjk5OTczLC45OTk3NywuOTk5NzMsLjk5OTc3LC45OTk3MywxLjAwMDE2LC45OTk3NywxLjAwMDAxLDEsMS4wMDAwMSwxLjAwMDI2LDEsMS4wMDAyNiwxLDEuMDAwMjYsMSwuOTk5MjQsLjk5OTczLDEuMDAwMDEsLjk5OTczLDEsLjk5OTgyLDEuMDAwMjIsMS4wMDAyNiwxLjAwMDAxLDEsMS4wMDAyNiwxLjAwMDYsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTk4LC45OTk5OCwuOTk5MjgsMSwuOTk5NzcsMS4wMDAxMywxLjAwMDU1LC45OTk0NywuOTk5NDUsLjk5OTQxLC45OTkyNCwxLjAwMDAxLDEuMDAwMDEsMS4wMDA0LC45MTYyMSwxLjAwMDAxLDEuMDAwMjYsLjk5OTc3LDEuMDAwMjIsMS4wMDA2LDEuMDAwMDEsMS4wMDAwNSwuOTk5OTksLjk5OTc3LDEuMDAwMTUsMS4wMDAyMiwuOTk5NzcsMS4wMDAwMSwuOTk5NzMsMS4wMDAyNiwxLjAwMDAxLDEuMDAwMTksMS4wMDAwMSwuOTk5NDYsMSwxLjAwMDYsMS4wMDAwMSwuOTk5NzgsMS4wMDA0NSwuOTk5NzMsLjk5OTI0LDEuMDAwMjMsLjk5OTc4LC45OTk2NiwxLDEuMDAwNjUsMS4wMDA0NSwxLjAwMDE5LC45OTk3MywuOTk5NzMsLjk5OTI0LDEsMSwuOTY0OTksMSwxLjAwMDU1LC45OTk3MywxLjAwMDA4LDEuMDAwMjcsMSwuOTk5NywuOTk5OTUsMS4wMDAyMywuOTk5MzMsMS4wMDAxOSwxLjAwMDE1LDEuMDAwMzEsLjk5OTI0LDEuMDAwMjMsLjk5OTczLDEuMDAwMjMsMS4wMDAzMSwxLjAwMDAxLC45OTkyOCwxLjAwMDI5LDEuMDAwOTIsMS4wMDAzNSwxLjAwMDAxLDEuMDAwNiwxLjAwMDYsMSwuOTk5ODgsLjk5OTc1LDEsMS4wMDA4MiwuOTk1NjEsLjk5OTYsMS4wMDAzNSwxLjAwMDAxLC45OTk2MiwxLjAwMDAxLDEuMDAwOTIsLjk5OTY0LDEuMDAwMDEsLjk5OTYzLC45OTk5OSwxLjAwMDM1LDEuMDAwMzUsMS4wMDA4MiwuOTk5NjIsLjk5OTk5LC45OTk3NywxLjAwMDIyLDEuMDAwMzUsMS4wMDAwMSwuOTk5NzcsMS4wMDAyNiwuOTk5NiwuOTk5NjcsMS4wMDAwMSwxLjAwMDM0LDEuMDAwNzQsMS4wMDA1NCwxLjAwMDUzLDEuMDAwNjMsLjk5OTcxLC45OTk2MiwxLjAwMDM1LC45OTk3NSwuOTk5NzcsLjk5OTczLDEuMDAwNDMsLjk5OTUzLDEuMDAwNywuOTk5MTUsLjk5OTczLDEuMDAwMDgsLjk5ODkyLDEuMDAwNzMsMS4wMDA3MywxLjAwMTE0LC45OTkxNSwxLjAwMDczLC45OTk1NSwuOTk5NzMsMS4wMDA5MiwuOTk5NzMsMSwuOTk5OTgsMSwxLjAwMDMsMSwxLjAwMDQzLDEuMDAwMDEsLjk5OTY5LDEuMDAwMywxLDEuMDAwMzUsMS4wMDAwMSwuOTk5NSwxLDEuMDAwOTIsLjk5OTczLC45OTk3MywuOTk5NzMsMS4wMDA3LC45OTk1LDEsLjk5OTI0LDEuMDAwNiwuOTk5MjQsLjk5OTcyLDEuMDAwNjIsLjk5OTczLDEuMDAxMTQsMS4wMDA3MywxLC45OTk1NSwxLDEsMS4wMDA0NywuOTk5NjgsMS4wMDAxNiwuOTk5NzcsMS4wMDAxNiwuOTk5NzcsMS4wMDAxNiwuOTk5NzcsMS4wMDAwMSwxLDEsMSwuOTk5NzMsMSwxLC45OTk1NSwuOTk5MjQsLjk5OTI0LC45OTkyNCwuOTk5MjQsLjk5OTk4LC45OTk5OCwuOTk5OTgsLjk5OTczLC45OTk3MywuOTk5NzIsMSwxLDEuMDAyNjcsLjk5OTk5LC45OTk5OCwuOTk5OTgsMSwuOTk5OTgsMS42NjQ3NSwxLC45OTk3MywuOTk5NzMsMS4wMDAyMywuOTk5NzMsLjk5OTcxLC45OTkyNSwxLjAwMDIzLDEsLjk5OTkxLC45OTk4NCwxLjAwMDAyLDEuMDAwMDIsMS4wMDAwMiwxLjAwMDAyLDEsMSwxLDEsMSwxLDEsLjk2MzI5LDEsMS4yMDk4NSwxLjM5NzEzLDEuMDAwMDMsLjgyNTQsMS4wMDAxNSwxLDEuMDAwMzUsMS4wMDAyNywxLjAwMDMxLDEuMDAwMzEsLjk5OTE1LDEuMDAwMzEsMS4wMDAzMSwuOTk5OTksMS4wMDAwMywuOTk5OTksLjk5OTk5LDEuNDExNDQsMS42LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MTE0NCwxLjQxMTQ0LDEuNDExNDQsMS40MDU3OSwxLjQwNTc5LDEuMzY2MjUsLjk5OTk5LDEsLjk5ODYxLC45OTg2MSwxLDEuMDAwMjYsMS4wMDAyNiwxLjAwMDI2LDEuMDAwMjYsLjk1MzE3LC45OTk5OSwuOTk5OTksLjk5OTk5LC45OTk5OSwxLjQwNDgzLDEsLjk5OTc3LDEuMDAwNTQsMSwxLC45OTk1MywuOTk5NjIsMS4wMDA0MiwuOTk5NSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDFdO3QuSGVsdmV0aWNhUmVndWxhck1ldHJpY3M9e2xpbmVIZWlnaHQ6MS4yLGxpbmVHYXA6LjJ9fSwoZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkxpYmVyYXRpb25TYW5zUmVndWxhcldpZHRocz10LkxpYmVyYXRpb25TYW5zUmVndWxhck1hcHBpbmc9dC5MaWJlcmF0aW9uU2Fuc0l0YWxpY1dpZHRocz10LkxpYmVyYXRpb25TYW5zSXRhbGljTWFwcGluZz10LkxpYmVyYXRpb25TYW5zQm9sZFdpZHRocz10LkxpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmc9dC5MaWJlcmF0aW9uU2Fuc0JvbGRJdGFsaWNXaWR0aHM9dC5MaWJlcmF0aW9uU2Fuc0JvbGRJdGFsaWNNYXBwaW5nPXZvaWQgMDt0LkxpYmVyYXRpb25TYW5zQm9sZFdpZHRocz1bMzY1LDAsMzMzLDI3OCwzMzMsNDc0LDU1Niw1NTYsODg5LDcyMiwyMzgsMzMzLDMzMywzODksNTg0LDI3OCwzMzMsMjc4LDI3OCw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsMzMzLDMzMyw1ODQsNTg0LDU4NCw2MTEsOTc1LDcyMiw3MjIsNzIyLDcyMiw2NjcsNjExLDc3OCw3MjIsMjc4LDU1Niw3MjIsNjExLDgzMyw3MjIsNzc4LDY2Nyw3NzgsNzIyLDY2Nyw2MTEsNzIyLDY2Nyw5NDQsNjY3LDY2Nyw2MTEsMzMzLDI3OCwzMzMsNTg0LDU1NiwzMzMsNTU2LDYxMSw1NTYsNjExLDU1NiwzMzMsNjExLDYxMSwyNzgsMjc4LDU1NiwyNzgsODg5LDYxMSw2MTEsNjExLDYxMSwzODksNTU2LDMzMyw2MTEsNTU2LDc3OCw1NTYsNTU2LDUwMCwzODksMjgwLDM4OSw1ODQsMzMzLDU1Niw1NTYsNTU2LDU1NiwyODAsNTU2LDMzMyw3MzcsMzcwLDU1Niw1ODQsNzM3LDU1Miw0MDAsNTQ5LDMzMywzMzMsMzMzLDU3Niw1NTYsMjc4LDMzMywzMzMsMzY1LDU1Niw4MzQsODM0LDgzNCw2MTEsNzIyLDcyMiw3MjIsNzIyLDcyMiw3MjIsMWUzLDcyMiw2NjcsNjY3LDY2Nyw2NjcsMjc4LDI3OCwyNzgsMjc4LDcyMiw3MjIsNzc4LDc3OCw3NzgsNzc4LDc3OCw1ODQsNzc4LDcyMiw3MjIsNzIyLDcyMiw2NjcsNjY3LDYxMSw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw4ODksNTU2LDU1Niw1NTYsNTU2LDU1NiwyNzgsMjc4LDI3OCwyNzgsNjExLDYxMSw2MTEsNjExLDYxMSw2MTEsNjExLDU0OSw2MTEsNjExLDYxMSw2MTEsNjExLDU1Niw2MTEsNTU2LDcyMiw1NTYsNzIyLDU1Niw3MjIsNTU2LDcyMiw1NTYsNzIyLDU1Niw3MjIsNTU2LDcyMiw1NTYsNzIyLDcxOSw3MjIsNjExLDY2Nyw1NTYsNjY3LDU1Niw2NjcsNTU2LDY2Nyw1NTYsNjY3LDU1Niw3NzgsNjExLDc3OCw2MTEsNzc4LDYxMSw3NzgsNjExLDcyMiw2MTEsNzIyLDYxMSwyNzgsMjc4LDI3OCwyNzgsMjc4LDI3OCwyNzgsMjc4LDI3OCwyNzgsNzg1LDU1Niw1NTYsMjc4LDcyMiw1NTYsNTU2LDYxMSwyNzgsNjExLDI3OCw2MTEsMzg1LDYxMSw0NzksNjExLDI3OCw3MjIsNjExLDcyMiw2MTEsNzIyLDYxMSw3MDgsNzIzLDYxMSw3NzgsNjExLDc3OCw2MTEsNzc4LDYxMSwxZTMsOTQ0LDcyMiwzODksNzIyLDM4OSw3MjIsMzg5LDY2Nyw1NTYsNjY3LDU1Niw2NjcsNTU2LDY2Nyw1NTYsNjExLDMzMyw2MTEsNDc5LDYxMSwzMzMsNzIyLDYxMSw3MjIsNjExLDcyMiw2MTEsNzIyLDYxMSw3MjIsNjExLDcyMiw2MTEsOTQ0LDc3OCw2NjcsNTU2LDY2Nyw2MTEsNTAwLDYxMSw1MDAsNjExLDUwMCwyNzgsNTU2LDcyMiw1NTYsMWUzLDg4OSw3NzgsNjExLDY2Nyw1NTYsNjExLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsNDY1LDcyMiwzMzMsODUzLDkwNiw0NzQsODI1LDkyNyw4MzgsMjc4LDcyMiw3MjIsNjAxLDcxOSw2NjcsNjExLDcyMiw3NzgsMjc4LDcyMiw2NjcsODMzLDcyMiw2NDQsNzc4LDcyMiw2NjcsNjAwLDYxMSw2NjcsODIxLDY2Nyw4MDksODAyLDI3OCw2NjcsNjE1LDQ1MSw2MTEsMjc4LDU4Miw2MTUsNjEwLDU1Niw2MDYsNDc1LDQ2MCw2MTEsNTQxLDI3OCw1NTgsNTU2LDYxMiw1NTYsNDQ1LDYxMSw3NjYsNjE5LDUyMCw2ODQsNDQ2LDU4Miw3MTUsNTc2LDc1Myw4NDUsMjc4LDU4Miw2MTEsNTgyLDg0NSw2NjcsNjY5LDg4NSw1NjcsNzExLDY2NywyNzgsMjc2LDU1NiwxMDk0LDEwNjIsODc1LDYxMCw3MjIsNjIyLDcxOSw3MjIsNzE5LDcyMiw1NjcsNzEyLDY2Nyw5MDQsNjI2LDcxOSw3MTksNjEwLDcwMiw4MzMsNzIyLDc3OCw3MTksNjY3LDcyMiw2MTEsNjIyLDg1NCw2NjcsNzMwLDcwMywxMDA1LDEwMTksODcwLDk3OSw3MTksNzExLDEwMzEsNzE5LDU1Niw2MTgsNjE1LDQxNyw2MzUsNTU2LDcwOSw0OTcsNjE1LDYxNSw1MDAsNjM1LDc0MCw2MDQsNjExLDYwNCw2MTEsNTU2LDQ5MCw1NTYsODc1LDU1Niw2MTUsNTgxLDgzMyw4NDQsNzI5LDg1NCw2MTUsNTUyLDg1NCw1ODMsNTU2LDU1Niw2MTEsNDE3LDU1Miw1NTYsMjc4LDI4MSwyNzgsOTY5LDkwNiw2MTEsNTAwLDYxNSw1NTYsNjA0LDc3OCw2MTEsNDg3LDQ0Nyw5NDQsNzc4LDk0NCw3NzgsOTQ0LDc3OCw2NjcsNTU2LDMzMywzMzMsNTU2LDFlMywxZTMsNTUyLDI3OCwyNzgsMjc4LDI3OCw1MDAsNTAwLDUwMCw1NTYsNTU2LDM1MCwxZTMsMWUzLDI0MCw0NzksMzMzLDMzMyw2MDQsMzMzLDE2NywzOTYsNTU2LDU1NiwxMDk0LDU1Niw4ODUsNDg5LDExMTUsMWUzLDc2OCw2MDAsODM0LDgzNCw4MzQsODM0LDFlMyw1MDAsMWUzLDUwMCwxZTMsNTAwLDUwMCw0OTQsNjEyLDgyMyw3MTMsNTg0LDU0OSw3MTMsOTc5LDcyMiwyNzQsNTQ5LDU0OSw1ODMsNTQ5LDU0OSw2MDQsNTg0LDYwNCw2MDQsNzA4LDYyNSw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MjksNjA0LDYwNCwzNTQsMzU0LDFlMyw5OTAsOTkwLDk5MCw5OTAsNDk0LDYwNCw2MDQsNjA0LDYwNCwzNTQsMTAyMSwxMDUyLDkxNyw3NTAsNzUwLDUzMSw2NTYsNTk0LDUxMCw1MDAsNzUwLDc1MCw2MTEsNjExLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMjIyLDIyMiwzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzXTt0LkxpYmVyYXRpb25TYW5zQm9sZE1hcHBpbmc9Wy0xLC0xLC0xLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNCwxMjUsMTI2LDE2MSwxNjIsMTYzLDE2NCwxNjUsMTY2LDE2NywxNjgsMTY5LDE3MCwxNzEsMTcyLDE3NCwxNzUsMTc2LDE3NywxNzgsMTc5LDE4MCwxODEsMTgyLDE4MywxODQsMTg1LDE4NiwxODcsMTg4LDE4OSwxOTAsMTkxLDE5MiwxOTMsMTk0LDE5NSwxOTYsMTk3LDE5OCwxOTksMjAwLDIwMSwyMDIsMjAzLDIwNCwyMDUsMjA2LDIwNywyMDgsMjA5LDIxMCwyMTEsMjEyLDIxMywyMTQsMjE1LDIxNiwyMTcsMjE4LDIxOSwyMjAsMjIxLDIyMiwyMjMsMjI0LDIyNSwyMjYsMjI3LDIyOCwyMjksMjMwLDIzMSwyMzIsMjMzLDIzNCwyMzUsMjM2LDIzNywyMzgsMjM5LDI0MCwyNDEsMjQyLDI0MywyNDQsMjQ1LDI0NiwyNDcsMjQ4LDI0OSwyNTAsMjUxLDI1MiwyNTMsMjU0LDI1NSwyNTYsMjU3LDI1OCwyNTksMjYwLDI2MSwyNjIsMjYzLDI2NCwyNjUsMjY2LDI2NywyNjgsMjY5LDI3MCwyNzEsMjcyLDI3MywyNzQsMjc1LDI3NiwyNzcsMjc4LDI3OSwyODAsMjgxLDI4MiwyODMsMjg0LDI4NSwyODYsMjg3LDI4OCwyODksMjkwLDI5MSwyOTIsMjkzLDI5NCwyOTUsMjk2LDI5NywyOTgsMjk5LDMwMCwzMDEsMzAyLDMwMywzMDQsMzA1LDMwNiwzMDcsMzA4LDMwOSwzMTAsMzExLDMxMiwzMTMsMzE0LDMxNSwzMTYsMzE3LDMxOCwzMTksMzIwLDMyMSwzMjIsMzIzLDMyNCwzMjUsMzI2LDMyNywzMjgsMzI5LDMzMCwzMzEsMzMyLDMzMywzMzQsMzM1LDMzNiwzMzcsMzM4LDMzOSwzNDAsMzQxLDM0MiwzNDMsMzQ0LDM0NSwzNDYsMzQ3LDM0OCwzNDksMzUwLDM1MSwzNTIsMzUzLDM1NCwzNTUsMzU2LDM1NywzNTgsMzU5LDM2MCwzNjEsMzYyLDM2MywzNjQsMzY1LDM2NiwzNjcsMzY4LDM2OSwzNzAsMzcxLDM3MiwzNzMsMzc0LDM3NSwzNzYsMzc3LDM3OCwzNzksMzgwLDM4MSwzODIsMzgzLDQwMiw1MDYsNTA3LDUwOCw1MDksNTEwLDUxMSw1MzYsNTM3LDUzOCw1MzksNzEwLDcxMSw3MTMsNzI4LDcyOSw3MzAsNzMxLDczMiw3MzMsOTAwLDkwMSw5MDIsOTAzLDkwNCw5MDUsOTA2LDkwOCw5MTAsOTExLDkxMiw5MTMsOTE0LDkxNSw5MTYsOTE3LDkxOCw5MTksOTIwLDkyMSw5MjIsOTIzLDkyNCw5MjUsOTI2LDkyNyw5MjgsOTI5LDkzMSw5MzIsOTMzLDkzNCw5MzUsOTM2LDkzNyw5MzgsOTM5LDk0MCw5NDEsOTQyLDk0Myw5NDQsOTQ1LDk0Niw5NDcsOTQ4LDk0OSw5NTAsOTUxLDk1Miw5NTMsOTU0LDk1NSw5NTYsOTU3LDk1OCw5NTksOTYwLDk2MSw5NjIsOTYzLDk2NCw5NjUsOTY2LDk2Nyw5NjgsOTY5LDk3MCw5NzEsOTcyLDk3Myw5NzQsMTAyNCwxMDI1LDEwMjYsMTAyNywxMDI4LDEwMjksMTAzMCwxMDMxLDEwMzIsMTAzMywxMDM0LDEwMzUsMTAzNiwxMDM3LDEwMzgsMTAzOSwxMDQwLDEwNDEsMTA0MiwxMDQzLDEwNDQsMTA0NSwxMDQ2LDEwNDcsMTA0OCwxMDQ5LDEwNTAsMTA1MSwxMDUyLDEwNTMsMTA1NCwxMDU1LDEwNTYsMTA1NywxMDU4LDEwNTksMTA2MCwxMDYxLDEwNjIsMTA2MywxMDY0LDEwNjUsMTA2NiwxMDY3LDEwNjgsMTA2OSwxMDcwLDEwNzEsMTA3MiwxMDczLDEwNzQsMTA3NSwxMDc2LDEwNzcsMTA3OCwxMDc5LDEwODAsMTA4MSwxMDgyLDEwODMsMTA4NCwxMDg1LDEwODYsMTA4NywxMDg4LDEwODksMTA5MCwxMDkxLDEwOTIsMTA5MywxMDk0LDEwOTUsMTA5NiwxMDk3LDEwOTgsMTA5OSwxMTAwLDExMDEsMTEwMiwxMTAzLDExMDQsMTEwNSwxMTA2LDExMDcsMTEwOCwxMTA5LDExMTAsMTExMSwxMTEyLDExMTMsMTExNCwxMTE1LDExMTYsMTExNywxMTE4LDExMTksMTEzOCwxMTM5LDExNjgsMTE2OSw3ODA4LDc4MDksNzgxMCw3ODExLDc4MTIsNzgxMyw3OTIyLDc5MjMsODIwOCw4MjA5LDgyMTEsODIxMiw4MjEzLDgyMTUsODIxNiw4MjE3LDgyMTgsODIxOSw4MjIwLDgyMjEsODIyMiw4MjI0LDgyMjUsODIyNiw4MjMwLDgyNDAsODI0Miw4MjQzLDgyNDksODI1MCw4MjUyLDgyNTQsODI2MCw4MzE5LDgzNTUsODM1Niw4MzU5LDgzNjQsODQ1Myw4NDY3LDg0NzAsODQ4Miw4NDg2LDg0OTQsODUzOSw4NTQwLDg1NDEsODU0Miw4NTkyLDg1OTMsODU5NCw4NTk1LDg1OTYsODU5Nyw4NjE2LDg3MDYsODcxMCw4NzE5LDg3MjEsODcyMiw4NzMwLDg3MzQsODczNSw4NzQ1LDg3NDcsODc3Niw4ODAwLDg4MDEsODgwNCw4ODA1LDg5NjIsODk3Niw4OTkyLDg5OTMsOTQ3Miw5NDc0LDk0ODQsOTQ4OCw5NDkyLDk0OTYsOTUwMCw5NTA4LDk1MTYsOTUyNCw5NTMyLDk1NTIsOTU1Myw5NTU0LDk1NTUsOTU1Niw5NTU3LDk1NTgsOTU1OSw5NTYwLDk1NjEsOTU2Miw5NTYzLDk1NjQsOTU2NSw5NTY2LDk1NjcsOTU2OCw5NTY5LDk1NzAsOTU3MSw5NTcyLDk1NzMsOTU3NCw5NTc1LDk1NzYsOTU3Nyw5NTc4LDk1NzksOTU4MCw5NjAwLDk2MDQsOTYwOCw5NjEyLDk2MTYsOTYxNyw5NjE4LDk2MTksOTYzMiw5NjMzLDk2NDIsOTY0Myw5NjQ0LDk2NTAsOTY1OCw5NjYwLDk2NjgsOTY3NCw5Njc1LDk2NzksOTY4OCw5Njg5LDk3MDIsOTc4Niw5Nzg3LDk3ODgsOTc5Miw5Nzk0LDk4MjQsOTgyNyw5ODI5LDk4MzAsOTgzNCw5ODM1LDk4MzYsNjE0NDEsNjE0NDIsNjE0NDUsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTFdO3QuTGliZXJhdGlvblNhbnNCb2xkSXRhbGljV2lkdGhzPVszNjUsMCwzMzMsMjc4LDMzMyw0NzQsNTU2LDU1Niw4ODksNzIyLDIzOCwzMzMsMzMzLDM4OSw1ODQsMjc4LDMzMywyNzgsMjc4LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1NiwzMzMsMzMzLDU4NCw1ODQsNTg0LDYxMSw5NzUsNzIyLDcyMiw3MjIsNzIyLDY2Nyw2MTEsNzc4LDcyMiwyNzgsNTU2LDcyMiw2MTEsODMzLDcyMiw3NzgsNjY3LDc3OCw3MjIsNjY3LDYxMSw3MjIsNjY3LDk0NCw2NjcsNjY3LDYxMSwzMzMsMjc4LDMzMyw1ODQsNTU2LDMzMyw1NTYsNjExLDU1Niw2MTEsNTU2LDMzMyw2MTEsNjExLDI3OCwyNzgsNTU2LDI3OCw4ODksNjExLDYxMSw2MTEsNjExLDM4OSw1NTYsMzMzLDYxMSw1NTYsNzc4LDU1Niw1NTYsNTAwLDM4OSwyODAsMzg5LDU4NCwzMzMsNTU2LDU1Niw1NTYsNTU2LDI4MCw1NTYsMzMzLDczNywzNzAsNTU2LDU4NCw3MzcsNTUyLDQwMCw1NDksMzMzLDMzMywzMzMsNTc2LDU1NiwyNzgsMzMzLDMzMywzNjUsNTU2LDgzNCw4MzQsODM0LDYxMSw3MjIsNzIyLDcyMiw3MjIsNzIyLDcyMiwxZTMsNzIyLDY2Nyw2NjcsNjY3LDY2NywyNzgsMjc4LDI3OCwyNzgsNzIyLDcyMiw3NzgsNzc4LDc3OCw3NzgsNzc4LDU4NCw3NzgsNzIyLDcyMiw3MjIsNzIyLDY2Nyw2NjcsNjExLDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDg4OSw1NTYsNTU2LDU1Niw1NTYsNTU2LDI3OCwyNzgsMjc4LDI3OCw2MTEsNjExLDYxMSw2MTEsNjExLDYxMSw2MTEsNTQ5LDYxMSw2MTEsNjExLDYxMSw2MTEsNTU2LDYxMSw1NTYsNzIyLDU1Niw3MjIsNTU2LDcyMiw1NTYsNzIyLDU1Niw3MjIsNTU2LDcyMiw1NTYsNzIyLDU1Niw3MjIsNzQwLDcyMiw2MTEsNjY3LDU1Niw2NjcsNTU2LDY2Nyw1NTYsNjY3LDU1Niw2NjcsNTU2LDc3OCw2MTEsNzc4LDYxMSw3NzgsNjExLDc3OCw2MTEsNzIyLDYxMSw3MjIsNjExLDI3OCwyNzgsMjc4LDI3OCwyNzgsMjc4LDI3OCwyNzgsMjc4LDI3OCw3ODIsNTU2LDU1NiwyNzgsNzIyLDU1Niw1NTYsNjExLDI3OCw2MTEsMjc4LDYxMSwzOTYsNjExLDQ3OSw2MTEsMjc4LDcyMiw2MTEsNzIyLDYxMSw3MjIsNjExLDcwOCw3MjMsNjExLDc3OCw2MTEsNzc4LDYxMSw3NzgsNjExLDFlMyw5NDQsNzIyLDM4OSw3MjIsMzg5LDcyMiwzODksNjY3LDU1Niw2NjcsNTU2LDY2Nyw1NTYsNjY3LDU1Niw2MTEsMzMzLDYxMSw0NzksNjExLDMzMyw3MjIsNjExLDcyMiw2MTEsNzIyLDYxMSw3MjIsNjExLDcyMiw2MTEsNzIyLDYxMSw5NDQsNzc4LDY2Nyw1NTYsNjY3LDYxMSw1MDAsNjExLDUwMCw2MTEsNTAwLDI3OCw1NTYsNzIyLDU1NiwxZTMsODg5LDc3OCw2MTEsNjY3LDU1Niw2MTEsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsNzIyLDMzMyw4NTQsOTA2LDQ3Myw4NDQsOTMwLDg0NywyNzgsNzIyLDcyMiw2MTAsNjcxLDY2Nyw2MTEsNzIyLDc3OCwyNzgsNzIyLDY2Nyw4MzMsNzIyLDY1Nyw3NzgsNzE4LDY2Nyw1OTAsNjExLDY2Nyw4MjIsNjY3LDgyOSw3ODEsMjc4LDY2Nyw2MjAsNDc5LDYxMSwyNzgsNTkxLDYyMCw2MjEsNTU2LDYxMCw0NzksNDkyLDYxMSw1NTgsMjc4LDU2Niw1NTYsNjAzLDU1Niw0NTAsNjExLDcxMiw2MDUsNTMyLDY2NCw0MDksNTkxLDcwNCw1NzgsNzczLDgzNCwyNzgsNTkxLDYxMSw1OTEsODM0LDY2Nyw2NjcsODg2LDYxNCw3MTksNjY3LDI3OCwyNzgsNTU2LDEwOTQsMTA0Miw4NTQsNjIyLDcxOSw2NzcsNzE5LDcyMiw3MDgsNzIyLDYxNCw3MjIsNjY3LDkyNyw2NDMsNzE5LDcxOSw2MTUsNjg3LDgzMyw3MjIsNzc4LDcxOSw2NjcsNzIyLDYxMSw2NzcsNzgxLDY2Nyw3MjksNzA4LDk3OSw5ODksODU0LDFlMyw3MDgsNzE5LDEwNDIsNzI5LDU1Niw2MTksNjA0LDUzNCw2MTgsNTU2LDczNiw1MTAsNjExLDYxMSw1MDcsNjIyLDc0MCw2MDQsNjExLDYxMSw2MTEsNTU2LDg4OSw1NTYsODg1LDU1Niw2NDYsNTgzLDg4OSw5MzUsNzA3LDg1NCw1OTQsNTUyLDg2NSw1ODksNTU2LDU1Niw2MTEsNDY5LDU2Myw1NTYsMjc4LDI3OCwyNzgsOTY5LDkwNiw2MTEsNTA3LDYxOSw1NTYsNjExLDc3OCw2MTEsNTc1LDQ2Nyw5NDQsNzc4LDk0NCw3NzgsOTQ0LDc3OCw2NjcsNTU2LDMzMywzMzMsNTU2LDFlMywxZTMsNTUyLDI3OCwyNzgsMjc4LDI3OCw1MDAsNTAwLDUwMCw1NTYsNTU2LDM1MCwxZTMsMWUzLDI0MCw0NzksMzMzLDMzMyw2MDQsMzMzLDE2NywzOTYsNTU2LDU1NiwxMTA0LDU1Niw4ODUsNTE2LDExNDYsMWUzLDc2OCw2MDAsODM0LDgzNCw4MzQsODM0LDk5OSw1MDAsMWUzLDUwMCwxZTMsNTAwLDUwMCw0OTQsNjEyLDgyMyw3MTMsNTg0LDU0OSw3MTMsOTc5LDcyMiwyNzQsNTQ5LDU0OSw1ODMsNTQ5LDU0OSw2MDQsNTg0LDYwNCw2MDQsNzA4LDYyNSw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MjksNjA0LDYwNCwzNTQsMzU0LDFlMyw5OTAsOTkwLDk5MCw5OTAsNDk0LDYwNCw2MDQsNjA0LDYwNCwzNTQsMTAyMSwxMDUyLDkxNyw3NTAsNzUwLDUzMSw2NTYsNTk0LDUxMCw1MDAsNzUwLDc1MCw2MTEsNjExLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMjIyLDIyMiwzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzXTt0LkxpYmVyYXRpb25TYW5zQm9sZEl0YWxpY01hcHBpbmc9Wy0xLC0xLC0xLDMyLDMzLDM0LDM1LDM2LDM3LDM4LDM5LDQwLDQxLDQyLDQzLDQ0LDQ1LDQ2LDQ3LDQ4LDQ5LDUwLDUxLDUyLDUzLDU0LDU1LDU2LDU3LDU4LDU5LDYwLDYxLDYyLDYzLDY0LDY1LDY2LDY3LDY4LDY5LDcwLDcxLDcyLDczLDc0LDc1LDc2LDc3LDc4LDc5LDgwLDgxLDgyLDgzLDg0LDg1LDg2LDg3LDg4LDg5LDkwLDkxLDkyLDkzLDk0LDk1LDk2LDk3LDk4LDk5LDEwMCwxMDEsMTAyLDEwMywxMDQsMTA1LDEwNiwxMDcsMTA4LDEwOSwxMTAsMTExLDExMiwxMTMsMTE0LDExNSwxMTYsMTE3LDExOCwxMTksMTIwLDEyMSwxMjIsMTIzLDEyNCwxMjUsMTI2LDE2MSwxNjIsMTYzLDE2NCwxNjUsMTY2LDE2NywxNjgsMTY5LDE3MCwxNzEsMTcyLDE3NCwxNzUsMTc2LDE3NywxNzgsMTc5LDE4MCwxODEsMTgyLDE4MywxODQsMTg1LDE4NiwxODcsMTg4LDE4OSwxOTAsMTkxLDE5MiwxOTMsMTk0LDE5NSwxOTYsMTk3LDE5OCwxOTksMjAwLDIwMSwyMDIsMjAzLDIwNCwyMDUsMjA2LDIwNywyMDgsMjA5LDIxMCwyMTEsMjEyLDIxMywyMTQsMjE1LDIxNiwyMTcsMjE4LDIxOSwyMjAsMjIxLDIyMiwyMjMsMjI0LDIyNSwyMjYsMjI3LDIyOCwyMjksMjMwLDIzMSwyMzIsMjMzLDIzNCwyMzUsMjM2LDIzNywyMzgsMjM5LDI0MCwyNDEsMjQyLDI0MywyNDQsMjQ1LDI0NiwyNDcsMjQ4LDI0OSwyNTAsMjUxLDI1MiwyNTMsMjU0LDI1NSwyNTYsMjU3LDI1OCwyNTksMjYwLDI2MSwyNjIsMjYzLDI2NCwyNjUsMjY2LDI2NywyNjgsMjY5LDI3MCwyNzEsMjcyLDI3MywyNzQsMjc1LDI3NiwyNzcsMjc4LDI3OSwyODAsMjgxLDI4MiwyODMsMjg0LDI4NSwyODYsMjg3LDI4OCwyODksMjkwLDI5MSwyOTIsMjkzLDI5NCwyOTUsMjk2LDI5NywyOTgsMjk5LDMwMCwzMDEsMzAyLDMwMywzMDQsMzA1LDMwNiwzMDcsMzA4LDMwOSwzMTAsMzExLDMxMiwzMTMsMzE0LDMxNSwzMTYsMzE3LDMxOCwzMTksMzIwLDMyMSwzMjIsMzIzLDMyNCwzMjUsMzI2LDMyNywzMjgsMzI5LDMzMCwzMzEsMzMyLDMzMywzMzQsMzM1LDMzNiwzMzcsMzM4LDMzOSwzNDAsMzQxLDM0MiwzNDMsMzQ0LDM0NSwzNDYsMzQ3LDM0OCwzNDksMzUwLDM1MSwzNTIsMzUzLDM1NCwzNTUsMzU2LDM1NywzNTgsMzU5LDM2MCwzNjEsMzYyLDM2MywzNjQsMzY1LDM2NiwzNjcsMzY4LDM2OSwzNzAsMzcxLDM3MiwzNzMsMzc0LDM3NSwzNzYsMzc3LDM3OCwzNzksMzgwLDM4MSwzODIsMzgzLDQwMiw1MDYsNTA3LDUwOCw1MDksNTEwLDUxMSw1MzYsNTM3LDUzOCw1MzksNzEwLDcxMSw3MTMsNzI4LDcyOSw3MzAsNzMxLDczMiw3MzMsOTAwLDkwMSw5MDIsOTAzLDkwNCw5MDUsOTA2LDkwOCw5MTAsOTExLDkxMiw5MTMsOTE0LDkxNSw5MTYsOTE3LDkxOCw5MTksOTIwLDkyMSw5MjIsOTIzLDkyNCw5MjUsOTI2LDkyNyw5MjgsOTI5LDkzMSw5MzIsOTMzLDkzNCw5MzUsOTM2LDkzNyw5MzgsOTM5LDk0MCw5NDEsOTQyLDk0Myw5NDQsOTQ1LDk0Niw5NDcsOTQ4LDk0OSw5NTAsOTUxLDk1Miw5NTMsOTU0LDk1NSw5NTYsOTU3LDk1OCw5NTksOTYwLDk2MSw5NjIsOTYzLDk2NCw5NjUsOTY2LDk2Nyw5NjgsOTY5LDk3MCw5NzEsOTcyLDk3Myw5NzQsMTAyNCwxMDI1LDEwMjYsMTAyNywxMDI4LDEwMjksMTAzMCwxMDMxLDEwMzIsMTAzMywxMDM0LDEwMzUsMTAzNiwxMDM3LDEwMzgsMTAzOSwxMDQwLDEwNDEsMTA0MiwxMDQzLDEwNDQsMTA0NSwxMDQ2LDEwNDcsMTA0OCwxMDQ5LDEwNTAsMTA1MSwxMDUyLDEwNTMsMTA1NCwxMDU1LDEwNTYsMTA1NywxMDU4LDEwNTksMTA2MCwxMDYxLDEwNjIsMTA2MywxMDY0LDEwNjUsMTA2NiwxMDY3LDEwNjgsMTA2OSwxMDcwLDEwNzEsMTA3MiwxMDczLDEwNzQsMTA3NSwxMDc2LDEwNzcsMTA3OCwxMDc5LDEwODAsMTA4MSwxMDgyLDEwODMsMTA4NCwxMDg1LDEwODYsMTA4NywxMDg4LDEwODksMTA5MCwxMDkxLDEwOTIsMTA5MywxMDk0LDEwOTUsMTA5NiwxMDk3LDEwOTgsMTA5OSwxMTAwLDExMDEsMTEwMiwxMTAzLDExMDQsMTEwNSwxMTA2LDExMDcsMTEwOCwxMTA5LDExMTAsMTExMSwxMTEyLDExMTMsMTExNCwxMTE1LDExMTYsMTExNywxMTE4LDExMTksMTEzOCwxMTM5LDExNjgsMTE2OSw3ODA4LDc4MDksNzgxMCw3ODExLDc4MTIsNzgxMyw3OTIyLDc5MjMsODIwOCw4MjA5LDgyMTEsODIxMiw4MjEzLDgyMTUsODIxNiw4MjE3LDgyMTgsODIxOSw4MjIwLDgyMjEsODIyMiw4MjI0LDgyMjUsODIyNiw4MjMwLDgyNDAsODI0Miw4MjQzLDgyNDksODI1MCw4MjUyLDgyNTQsODI2MCw4MzE5LDgzNTUsODM1Niw4MzU5LDgzNjQsODQ1Myw4NDY3LDg0NzAsODQ4Miw4NDg2LDg0OTQsODUzOSw4NTQwLDg1NDEsODU0Miw4NTkyLDg1OTMsODU5NCw4NTk1LDg1OTYsODU5Nyw4NjE2LDg3MDYsODcxMCw4NzE5LDg3MjEsODcyMiw4NzMwLDg3MzQsODczNSw4NzQ1LDg3NDcsODc3Niw4ODAwLDg4MDEsODgwNCw4ODA1LDg5NjIsODk3Niw4OTkyLDg5OTMsOTQ3Miw5NDc0LDk0ODQsOTQ4OCw5NDkyLDk0OTYsOTUwMCw5NTA4LDk1MTYsOTUyNCw5NTMyLDk1NTIsOTU1Myw5NTU0LDk1NTUsOTU1Niw5NTU3LDk1NTgsOTU1OSw5NTYwLDk1NjEsOTU2Miw5NTYzLDk1NjQsOTU2NSw5NTY2LDk1NjcsOTU2OCw5NTY5LDk1NzAsOTU3MSw5NTcyLDk1NzMsOTU3NCw5NTc1LDk1NzYsOTU3Nyw5NTc4LDk1NzksOTU4MCw5NjAwLDk2MDQsOTYwOCw5NjEyLDk2MTYsOTYxNyw5NjE4LDk2MTksOTYzMiw5NjMzLDk2NDIsOTY0Myw5NjQ0LDk2NTAsOTY1OCw5NjYwLDk2NjgsOTY3NCw5Njc1LDk2NzksOTY4OCw5Njg5LDk3MDIsOTc4Niw5Nzg3LDk3ODgsOTc5Miw5Nzk0LDk4MjQsOTgyNyw5ODI5LDk4MzAsOTgzNCw5ODM1LDk4MzYsNjE0NDEsNjE0NDIsNjE0NDUsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTEsLTFdO3QuTGliZXJhdGlvblNhbnNJdGFsaWNXaWR0aHM9WzM2NSwwLDMzMywyNzgsMjc4LDM1NSw1NTYsNTU2LDg4OSw2NjcsMTkxLDMzMywzMzMsMzg5LDU4NCwyNzgsMzMzLDI3OCwyNzgsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDI3OCwyNzgsNTg0LDU4NCw1ODQsNTU2LDEwMTUsNjY3LDY2Nyw3MjIsNzIyLDY2Nyw2MTEsNzc4LDcyMiwyNzgsNTAwLDY2Nyw1NTYsODMzLDcyMiw3NzgsNjY3LDc3OCw3MjIsNjY3LDYxMSw3MjIsNjY3LDk0NCw2NjcsNjY3LDYxMSwyNzgsMjc4LDI3OCw0NjksNTU2LDMzMyw1NTYsNTU2LDUwMCw1NTYsNTU2LDI3OCw1NTYsNTU2LDIyMiwyMjIsNTAwLDIyMiw4MzMsNTU2LDU1Niw1NTYsNTU2LDMzMyw1MDAsMjc4LDU1Niw1MDAsNzIyLDUwMCw1MDAsNTAwLDMzNCwyNjAsMzM0LDU4NCwzMzMsNTU2LDU1Niw1NTYsNTU2LDI2MCw1NTYsMzMzLDczNywzNzAsNTU2LDU4NCw3MzcsNTUyLDQwMCw1NDksMzMzLDMzMywzMzMsNTc2LDUzNywyNzgsMzMzLDMzMywzNjUsNTU2LDgzNCw4MzQsODM0LDYxMSw2NjcsNjY3LDY2Nyw2NjcsNjY3LDY2NywxZTMsNzIyLDY2Nyw2NjcsNjY3LDY2NywyNzgsMjc4LDI3OCwyNzgsNzIyLDcyMiw3NzgsNzc4LDc3OCw3NzgsNzc4LDU4NCw3NzgsNzIyLDcyMiw3MjIsNzIyLDY2Nyw2NjcsNjExLDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDg4OSw1MDAsNTU2LDU1Niw1NTYsNTU2LDI3OCwyNzgsMjc4LDI3OCw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTQ5LDYxMSw1NTYsNTU2LDU1Niw1NTYsNTAwLDU1Niw1MDAsNjY3LDU1Niw2NjcsNTU2LDY2Nyw1NTYsNzIyLDUwMCw3MjIsNTAwLDcyMiw1MDAsNzIyLDUwMCw3MjIsNjI1LDcyMiw1NTYsNjY3LDU1Niw2NjcsNTU2LDY2Nyw1NTYsNjY3LDU1Niw2NjcsNTU2LDc3OCw1NTYsNzc4LDU1Niw3NzgsNTU2LDc3OCw1NTYsNzIyLDU1Niw3MjIsNTU2LDI3OCwyNzgsMjc4LDI3OCwyNzgsMjc4LDI3OCwyMjIsMjc4LDI3OCw3MzMsNDQ0LDUwMCwyMjIsNjY3LDUwMCw1MDAsNTU2LDIyMiw1NTYsMjIyLDU1NiwyODEsNTU2LDQwMCw1NTYsMjIyLDcyMiw1NTYsNzIyLDU1Niw3MjIsNTU2LDYxNSw3MjMsNTU2LDc3OCw1NTYsNzc4LDU1Niw3NzgsNTU2LDFlMyw5NDQsNzIyLDMzMyw3MjIsMzMzLDcyMiwzMzMsNjY3LDUwMCw2NjcsNTAwLDY2Nyw1MDAsNjY3LDUwMCw2MTEsMjc4LDYxMSwzNTQsNjExLDI3OCw3MjIsNTU2LDcyMiw1NTYsNzIyLDU1Niw3MjIsNTU2LDcyMiw1NTYsNzIyLDU1Niw5NDQsNzIyLDY2Nyw1MDAsNjY3LDYxMSw1MDAsNjExLDUwMCw2MTEsNTAwLDIyMiw1NTYsNjY3LDU1NiwxZTMsODg5LDc3OCw2MTEsNjY3LDUwMCw2MTEsMjc4LDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsNjY3LDI3OCw3ODksODQ2LDM4OSw3OTQsODY1LDc3NSwyMjIsNjY3LDY2Nyw1NzAsNjcxLDY2Nyw2MTEsNzIyLDc3OCwyNzgsNjY3LDY2Nyw4MzMsNzIyLDY0OCw3NzgsNzI1LDY2Nyw2MDAsNjExLDY2Nyw4MzcsNjY3LDgzMSw3NjEsMjc4LDY2Nyw1NzAsNDM5LDU1NSwyMjIsNTUwLDU3MCw1NzEsNTAwLDU1Niw0MzksNDYzLDU1NSw1NDIsMjIyLDUwMCw0OTIsNTQ4LDUwMCw0NDcsNTU2LDY3MCw1NzMsNDg2LDYwMywzNzQsNTUwLDY1Miw1NDYsNzI4LDc3OSwyMjIsNTUwLDU1Niw1NTAsNzc5LDY2Nyw2NjcsODQzLDU0NCw3MDgsNjY3LDI3OCwyNzgsNTAwLDEwNjYsOTgyLDg0NCw1ODksNzE1LDYzOSw3MjQsNjY3LDY1MSw2NjcsNTQ0LDcwNCw2NjcsOTE3LDYxNCw3MTUsNzE1LDU4OSw2ODYsODMzLDcyMiw3NzgsNzI1LDY2Nyw3MjIsNjExLDYzOSw3OTUsNjY3LDcyNyw2NzMsOTIwLDkyMyw4MDUsODg2LDY1MSw2OTQsMTAyMiw2ODIsNTU2LDU2Miw1MjIsNDkzLDU1Myw1NTYsNjg4LDQ2NSw1NTYsNTU2LDQ3Miw1NjQsNjg2LDU1MCw1NTYsNTU2LDU1Niw1MDAsODMzLDUwMCw4MzUsNTAwLDU3Miw1MTgsODMwLDg1MSw2MjEsNzM2LDUyNiw0OTIsNzUyLDUzNCw1NTYsNTU2LDU1NiwzNzgsNDk2LDUwMCwyMjIsMjIyLDIyMiw5MTAsODI4LDU1Niw0NzIsNTY1LDUwMCw1NTYsNzc4LDU1Niw0OTIsMzM5LDk0NCw3MjIsOTQ0LDcyMiw5NDQsNzIyLDY2Nyw1MDAsMzMzLDMzMyw1NTYsMWUzLDFlMyw1NTIsMjIyLDIyMiwyMjIsMjIyLDMzMywzMzMsMzMzLDU1Niw1NTYsMzUwLDFlMywxZTMsMTg4LDM1NCwzMzMsMzMzLDUwMCwzMzMsMTY3LDM2NSw1NTYsNTU2LDEwOTQsNTU2LDg4NSwzMjMsMTA4MywxZTMsNzY4LDYwMCw4MzQsODM0LDgzNCw4MzQsMWUzLDUwMCw5OTgsNTAwLDFlMyw1MDAsNTAwLDQ5NCw2MTIsODIzLDcxMyw1ODQsNTQ5LDcxMyw5NzksNzE5LDI3NCw1NDksNTQ5LDU4NCw1NDksNTQ5LDYwNCw1ODQsNjA0LDYwNCw3MDgsNjI1LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcyOSw2MDQsNjA0LDM1NCwzNTQsMWUzLDk5MCw5OTAsOTkwLDk5MCw0OTQsNjA0LDYwNCw2MDQsNjA0LDM1NCwxMDIxLDEwNTIsOTE3LDc1MCw3NTAsNTMxLDY1Niw1OTQsNTEwLDUwMCw3NTAsNzUwLDUwMCw1MDAsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywyMjIsMjIyLDI5NCwyOTQsMzI0LDMyNCwzMTYsMzI4LDM5OCwyODVdO3QuTGliZXJhdGlvblNhbnNJdGFsaWNNYXBwaW5nPVstMSwtMSwtMSwzMiwzMywzNCwzNSwzNiwzNywzOCwzOSw0MCw0MSw0Miw0Myw0NCw0NSw0Niw0Nyw0OCw0OSw1MCw1MSw1Miw1Myw1NCw1NSw1Niw1Nyw1OCw1OSw2MCw2MSw2Miw2Myw2NCw2NSw2Niw2Nyw2OCw2OSw3MCw3MSw3Miw3Myw3NCw3NSw3Niw3Nyw3OCw3OSw4MCw4MSw4Miw4Myw4NCw4NSw4Niw4Nyw4OCw4OSw5MCw5MSw5Miw5Myw5NCw5NSw5Niw5Nyw5OCw5OSwxMDAsMTAxLDEwMiwxMDMsMTA0LDEwNSwxMDYsMTA3LDEwOCwxMDksMTEwLDExMSwxMTIsMTEzLDExNCwxMTUsMTE2LDExNywxMTgsMTE5LDEyMCwxMjEsMTIyLDEyMywxMjQsMTI1LDEyNiwxNjEsMTYyLDE2MywxNjQsMTY1LDE2NiwxNjcsMTY4LDE2OSwxNzAsMTcxLDE3MiwxNzQsMTc1LDE3NiwxNzcsMTc4LDE3OSwxODAsMTgxLDE4MiwxODMsMTg0LDE4NSwxODYsMTg3LDE4OCwxODksMTkwLDE5MSwxOTIsMTkzLDE5NCwxOTUsMTk2LDE5NywxOTgsMTk5LDIwMCwyMDEsMjAyLDIwMywyMDQsMjA1LDIwNiwyMDcsMjA4LDIwOSwyMTAsMjExLDIxMiwyMTMsMjE0LDIxNSwyMTYsMjE3LDIxOCwyMTksMjIwLDIyMSwyMjIsMjIzLDIyNCwyMjUsMjI2LDIyNywyMjgsMjI5LDIzMCwyMzEsMjMyLDIzMywyMzQsMjM1LDIzNiwyMzcsMjM4LDIzOSwyNDAsMjQxLDI0MiwyNDMsMjQ0LDI0NSwyNDYsMjQ3LDI0OCwyNDksMjUwLDI1MSwyNTIsMjUzLDI1NCwyNTUsMjU2LDI1NywyNTgsMjU5LDI2MCwyNjEsMjYyLDI2MywyNjQsMjY1LDI2NiwyNjcsMjY4LDI2OSwyNzAsMjcxLDI3MiwyNzMsMjc0LDI3NSwyNzYsMjc3LDI3OCwyNzksMjgwLDI4MSwyODIsMjgzLDI4NCwyODUsMjg2LDI4NywyODgsMjg5LDI5MCwyOTEsMjkyLDI5MywyOTQsMjk1LDI5NiwyOTcsMjk4LDI5OSwzMDAsMzAxLDMwMiwzMDMsMzA0LDMwNSwzMDYsMzA3LDMwOCwzMDksMzEwLDMxMSwzMTIsMzEzLDMxNCwzMTUsMzE2LDMxNywzMTgsMzE5LDMyMCwzMjEsMzIyLDMyMywzMjQsMzI1LDMyNiwzMjcsMzI4LDMyOSwzMzAsMzMxLDMzMiwzMzMsMzM0LDMzNSwzMzYsMzM3LDMzOCwzMzksMzQwLDM0MSwzNDIsMzQzLDM0NCwzNDUsMzQ2LDM0NywzNDgsMzQ5LDM1MCwzNTEsMzUyLDM1MywzNTQsMzU1LDM1NiwzNTcsMzU4LDM1OSwzNjAsMzYxLDM2MiwzNjMsMzY0LDM2NSwzNjYsMzY3LDM2OCwzNjksMzcwLDM3MSwzNzIsMzczLDM3NCwzNzUsMzc2LDM3NywzNzgsMzc5LDM4MCwzODEsMzgyLDM4Myw0MDIsNTA2LDUwNyw1MDgsNTA5LDUxMCw1MTEsNTM2LDUzNyw1MzgsNTM5LDcxMCw3MTEsNzEzLDcyOCw3MjksNzMwLDczMSw3MzIsNzMzLDkwMCw5MDEsOTAyLDkwMyw5MDQsOTA1LDkwNiw5MDgsOTEwLDkxMSw5MTIsOTEzLDkxNCw5MTUsOTE2LDkxNyw5MTgsOTE5LDkyMCw5MjEsOTIyLDkyMyw5MjQsOTI1LDkyNiw5MjcsOTI4LDkyOSw5MzEsOTMyLDkzMyw5MzQsOTM1LDkzNiw5MzcsOTM4LDkzOSw5NDAsOTQxLDk0Miw5NDMsOTQ0LDk0NSw5NDYsOTQ3LDk0OCw5NDksOTUwLDk1MSw5NTIsOTUzLDk1NCw5NTUsOTU2LDk1Nyw5NTgsOTU5LDk2MCw5NjEsOTYyLDk2Myw5NjQsOTY1LDk2Niw5NjcsOTY4LDk2OSw5NzAsOTcxLDk3Miw5NzMsOTc0LDEwMjQsMTAyNSwxMDI2LDEwMjcsMTAyOCwxMDI5LDEwMzAsMTAzMSwxMDMyLDEwMzMsMTAzNCwxMDM1LDEwMzYsMTAzNywxMDM4LDEwMzksMTA0MCwxMDQxLDEwNDIsMTA0MywxMDQ0LDEwNDUsMTA0NiwxMDQ3LDEwNDgsMTA0OSwxMDUwLDEwNTEsMTA1MiwxMDUzLDEwNTQsMTA1NSwxMDU2LDEwNTcsMTA1OCwxMDU5LDEwNjAsMTA2MSwxMDYyLDEwNjMsMTA2NCwxMDY1LDEwNjYsMTA2NywxMDY4LDEwNjksMTA3MCwxMDcxLDEwNzIsMTA3MywxMDc0LDEwNzUsMTA3NiwxMDc3LDEwNzgsMTA3OSwxMDgwLDEwODEsMTA4MiwxMDgzLDEwODQsMTA4NSwxMDg2LDEwODcsMTA4OCwxMDg5LDEwOTAsMTA5MSwxMDkyLDEwOTMsMTA5NCwxMDk1LDEwOTYsMTA5NywxMDk4LDEwOTksMTEwMCwxMTAxLDExMDIsMTEwMywxMTA0LDExMDUsMTEwNiwxMTA3LDExMDgsMTEwOSwxMTEwLDExMTEsMTExMiwxMTEzLDExMTQsMTExNSwxMTE2LDExMTcsMTExOCwxMTE5LDExMzgsMTEzOSwxMTY4LDExNjksNzgwOCw3ODA5LDc4MTAsNzgxMSw3ODEyLDc4MTMsNzkyMiw3OTIzLDgyMDgsODIwOSw4MjExLDgyMTIsODIxMyw4MjE1LDgyMTYsODIxNyw4MjE4LDgyMTksODIyMCw4MjIxLDgyMjIsODIyNCw4MjI1LDgyMjYsODIzMCw4MjQwLDgyNDIsODI0Myw4MjQ5LDgyNTAsODI1Miw4MjU0LDgyNjAsODMxOSw4MzU1LDgzNTYsODM1OSw4MzY0LDg0NTMsODQ2Nyw4NDcwLDg0ODIsODQ4Niw4NDk0LDg1MzksODU0MCw4NTQxLDg1NDIsODU5Miw4NTkzLDg1OTQsODU5NSw4NTk2LDg1OTcsODYxNiw4NzA2LDg3MTAsODcxOSw4NzIxLDg3MjIsODczMCw4NzM0LDg3MzUsODc0NSw4NzQ3LDg3NzYsODgwMCw4ODAxLDg4MDQsODgwNSw4OTYyLDg5NzYsODk5Miw4OTkzLDk0NzIsOTQ3NCw5NDg0LDk0ODgsOTQ5Miw5NDk2LDk1MDAsOTUwOCw5NTE2LDk1MjQsOTUzMiw5NTUyLDk1NTMsOTU1NCw5NTU1LDk1NTYsOTU1Nyw5NTU4LDk1NTksOTU2MCw5NTYxLDk1NjIsOTU2Myw5NTY0LDk1NjUsOTU2Niw5NTY3LDk1NjgsOTU2OSw5NTcwLDk1NzEsOTU3Miw5NTczLDk1NzQsOTU3NSw5NTc2LDk1NzcsOTU3OCw5NTc5LDk1ODAsOTYwMCw5NjA0LDk2MDgsOTYxMiw5NjE2LDk2MTcsOTYxOCw5NjE5LDk2MzIsOTYzMyw5NjQyLDk2NDMsOTY0NCw5NjUwLDk2NTgsOTY2MCw5NjY4LDk2NzQsOTY3NSw5Njc5LDk2ODgsOTY4OSw5NzAyLDk3ODYsOTc4Nyw5Nzg4LDk3OTIsOTc5NCw5ODI0LDk4MjcsOTgyOSw5ODMwLDk4MzQsOTgzNSw5ODM2LDYxNDQxLDYxNDQyLDYxNDQ1LC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xLC0xXTt0LkxpYmVyYXRpb25TYW5zUmVndWxhcldpZHRocz1bMzY1LDAsMzMzLDI3OCwyNzgsMzU1LDU1Niw1NTYsODg5LDY2NywxOTEsMzMzLDMzMywzODksNTg0LDI3OCwzMzMsMjc4LDI3OCw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsMjc4LDI3OCw1ODQsNTg0LDU4NCw1NTYsMTAxNSw2NjcsNjY3LDcyMiw3MjIsNjY3LDYxMSw3NzgsNzIyLDI3OCw1MDAsNjY3LDU1Niw4MzMsNzIyLDc3OCw2NjcsNzc4LDcyMiw2NjcsNjExLDcyMiw2NjcsOTQ0LDY2Nyw2NjcsNjExLDI3OCwyNzgsMjc4LDQ2OSw1NTYsMzMzLDU1Niw1NTYsNTAwLDU1Niw1NTYsMjc4LDU1Niw1NTYsMjIyLDIyMiw1MDAsMjIyLDgzMyw1NTYsNTU2LDU1Niw1NTYsMzMzLDUwMCwyNzgsNTU2LDUwMCw3MjIsNTAwLDUwMCw1MDAsMzM0LDI2MCwzMzQsNTg0LDMzMyw1NTYsNTU2LDU1Niw1NTYsMjYwLDU1NiwzMzMsNzM3LDM3MCw1NTYsNTg0LDczNyw1NTIsNDAwLDU0OSwzMzMsMzMzLDMzMyw1NzYsNTM3LDI3OCwzMzMsMzMzLDM2NSw1NTYsODM0LDgzNCw4MzQsNjExLDY2Nyw2NjcsNjY3LDY2Nyw2NjcsNjY3LDFlMyw3MjIsNjY3LDY2Nyw2NjcsNjY3LDI3OCwyNzgsMjc4LDI3OCw3MjIsNzIyLDc3OCw3NzgsNzc4LDc3OCw3NzgsNTg0LDc3OCw3MjIsNzIyLDcyMiw3MjIsNjY3LDY2Nyw2MTEsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NTYsODg5LDUwMCw1NTYsNTU2LDU1Niw1NTYsMjc4LDI3OCwyNzgsMjc4LDU1Niw1NTYsNTU2LDU1Niw1NTYsNTU2LDU1Niw1NDksNjExLDU1Niw1NTYsNTU2LDU1Niw1MDAsNTU2LDUwMCw2NjcsNTU2LDY2Nyw1NTYsNjY3LDU1Niw3MjIsNTAwLDcyMiw1MDAsNzIyLDUwMCw3MjIsNTAwLDcyMiw2MTUsNzIyLDU1Niw2NjcsNTU2LDY2Nyw1NTYsNjY3LDU1Niw2NjcsNTU2LDY2Nyw1NTYsNzc4LDU1Niw3NzgsNTU2LDc3OCw1NTYsNzc4LDU1Niw3MjIsNTU2LDcyMiw1NTYsMjc4LDI3OCwyNzgsMjc4LDI3OCwyNzgsMjc4LDIyMiwyNzgsMjc4LDczNSw0NDQsNTAwLDIyMiw2NjcsNTAwLDUwMCw1NTYsMjIyLDU1NiwyMjIsNTU2LDI5Miw1NTYsMzM0LDU1NiwyMjIsNzIyLDU1Niw3MjIsNTU2LDcyMiw1NTYsNjA0LDcyMyw1NTYsNzc4LDU1Niw3NzgsNTU2LDc3OCw1NTYsMWUzLDk0NCw3MjIsMzMzLDcyMiwzMzMsNzIyLDMzMyw2NjcsNTAwLDY2Nyw1MDAsNjY3LDUwMCw2NjcsNTAwLDYxMSwyNzgsNjExLDM3NSw2MTEsMjc4LDcyMiw1NTYsNzIyLDU1Niw3MjIsNTU2LDcyMiw1NTYsNzIyLDU1Niw3MjIsNTU2LDk0NCw3MjIsNjY3LDUwMCw2NjcsNjExLDUwMCw2MTEsNTAwLDYxMSw1MDAsMjIyLDU1Niw2NjcsNTU2LDFlMyw4ODksNzc4LDYxMSw2NjcsNTAwLDYxMSwyNzgsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMyw2NjcsMjc4LDc4NCw4MzgsMzg0LDc3NCw4NTUsNzUyLDIyMiw2NjcsNjY3LDU1MSw2NjgsNjY3LDYxMSw3MjIsNzc4LDI3OCw2NjcsNjY4LDgzMyw3MjIsNjUwLDc3OCw3MjIsNjY3LDYxOCw2MTEsNjY3LDc5OCw2NjcsODM1LDc0OCwyNzgsNjY3LDU3OCw0NDYsNTU2LDIyMiw1NDcsNTc4LDU3NSw1MDAsNTU3LDQ0Niw0NDEsNTU2LDU1NiwyMjIsNTAwLDUwMCw1NzYsNTAwLDQ0OCw1NTYsNjkwLDU2OSw0ODIsNjE3LDM5NSw1NDcsNjQ4LDUyNSw3MTMsNzgxLDIyMiw1NDcsNTU2LDU0Nyw3ODEsNjY3LDY2Nyw4NjUsNTQyLDcxOSw2NjcsMjc4LDI3OCw1MDAsMTA1NywxMDEwLDg1NCw1ODMsNzIyLDYzNSw3MTksNjY3LDY1Niw2NjcsNTQyLDY3Nyw2NjcsOTIzLDYwNCw3MTksNzE5LDU4Myw2NTYsODMzLDcyMiw3NzgsNzE5LDY2Nyw3MjIsNjExLDYzNSw3NjAsNjY3LDc0MCw2NjcsOTE3LDkzOCw3OTIsODg1LDY1Niw3MTksMTAxMCw3MjIsNTU2LDU3Myw1MzEsMzY1LDU4Myw1NTYsNjY5LDQ1OCw1NTksNTU5LDQzOCw1ODMsNjg4LDU1Miw1NTYsNTQyLDU1Niw1MDAsNDU4LDUwMCw4MjMsNTAwLDU3Myw1MjEsODAyLDgyMyw2MjUsNzE5LDUyMSw1MTAsNzUwLDU0Miw1NTYsNTU2LDU1NiwzNjUsNTEwLDUwMCwyMjIsMjc4LDIyMiw5MDYsODEyLDU1Niw0MzgsNTU5LDUwMCw1NTIsNzc4LDU1Niw0ODksNDExLDk0NCw3MjIsOTQ0LDcyMiw5NDQsNzIyLDY2Nyw1MDAsMzMzLDMzMyw1NTYsMWUzLDFlMyw1NTIsMjIyLDIyMiwyMjIsMjIyLDMzMywzMzMsMzMzLDU1Niw1NTYsMzUwLDFlMywxZTMsMTg4LDM1NCwzMzMsMzMzLDUwMCwzMzMsMTY3LDM2NSw1NTYsNTU2LDEwOTQsNTU2LDg4NSwzMjMsMTA3MywxZTMsNzY4LDYwMCw4MzQsODM0LDgzNCw4MzQsMWUzLDUwMCwxZTMsNTAwLDFlMyw1MDAsNTAwLDQ5NCw2MTIsODIzLDcxMyw1ODQsNTQ5LDcxMyw5NzksNzE5LDI3NCw1NDksNTQ5LDU4Myw1NDksNTQ5LDYwNCw1ODQsNjA0LDYwNCw3MDgsNjI1LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcwOCw3MDgsNzA4LDcyOSw2MDQsNjA0LDM1NCwzNTQsMWUzLDk5MCw5OTAsOTkwLDk5MCw0OTQsNjA0LDYwNCw2MDQsNjA0LDM1NCwxMDIxLDEwNTIsOTE3LDc1MCw3NTAsNTMxLDY1Niw1OTQsNTEwLDUwMCw3NTAsNzUwLDUwMCw1MDAsMzMzLDMzMywzMzMsMzMzLDMzMywzMzMsMzMzLDMzMywyMjIsMjIyLDI5NCwyOTQsMzI0LDMyNCwzMTYsMzI4LDM5OCwyODVdO3QuTGliZXJhdGlvblNhbnNSZWd1bGFyTWFwcGluZz1bLTEsLTEsLTEsMzIsMzMsMzQsMzUsMzYsMzcsMzgsMzksNDAsNDEsNDIsNDMsNDQsNDUsNDYsNDcsNDgsNDksNTAsNTEsNTIsNTMsNTQsNTUsNTYsNTcsNTgsNTksNjAsNjEsNjIsNjMsNjQsNjUsNjYsNjcsNjgsNjksNzAsNzEsNzIsNzMsNzQsNzUsNzYsNzcsNzgsNzksODAsODEsODIsODMsODQsODUsODYsODcsODgsODksOTAsOTEsOTIsOTMsOTQsOTUsOTYsOTcsOTgsOTksMTAwLDEwMSwxMDIsMTAzLDEwNCwxMDUsMTA2LDEwNywxMDgsMTA5LDExMCwxMTEsMTEyLDExMywxMTQsMTE1LDExNiwxMTcsMTE4LDExOSwxMjAsMTIxLDEyMiwxMjMsMTI0LDEyNSwxMjYsMTYxLDE2MiwxNjMsMTY0LDE2NSwxNjYsMTY3LDE2OCwxNjksMTcwLDE3MSwxNzIsMTc0LDE3NSwxNzYsMTc3LDE3OCwxNzksMTgwLDE4MSwxODIsMTgzLDE4NCwxODUsMTg2LDE4NywxODgsMTg5LDE5MCwxOTEsMTkyLDE5MywxOTQsMTk1LDE5NiwxOTcsMTk4LDE5OSwyMDAsMjAxLDIwMiwyMDMsMjA0LDIwNSwyMDYsMjA3LDIwOCwyMDksMjEwLDIxMSwyMTIsMjEzLDIxNCwyMTUsMjE2LDIxNywyMTgsMjE5LDIyMCwyMjEsMjIyLDIyMywyMjQsMjI1LDIyNiwyMjcsMjI4LDIyOSwyMzAsMjMxLDIzMiwyMzMsMjM0LDIzNSwyMzYsMjM3LDIzOCwyMzksMjQwLDI0MSwyNDIsMjQzLDI0NCwyNDUsMjQ2LDI0NywyNDgsMjQ5LDI1MCwyNTEsMjUyLDI1MywyNTQsMjU1LDI1NiwyNTcsMjU4LDI1OSwyNjAsMjYxLDI2MiwyNjMsMjY0LDI2NSwyNjYsMjY3LDI2OCwyNjksMjcwLDI3MSwyNzIsMjczLDI3NCwyNzUsMjc2LDI3NywyNzgsMjc5LDI4MCwyODEsMjgyLDI4MywyODQsMjg1LDI4NiwyODcsMjg4LDI4OSwyOTAsMjkxLDI5MiwyOTMsMjk0LDI5NSwyOTYsMjk3LDI5OCwyOTksMzAwLDMwMSwzMDIsMzAzLDMwNCwzMDUsMzA2LDMwNywzMDgsMzA5LDMxMCwzMTEsMzEyLDMxMywzMTQsMzE1LDMxNiwzMTcsMzE4LDMxOSwzMjAsMzIxLDMyMiwzMjMsMzI0LDMyNSwzMjYsMzI3LDMyOCwzMjksMzMwLDMzMSwzMzIsMzMzLDMzNCwzMzUsMzM2LDMzNywzMzgsMzM5LDM0MCwzNDEsMzQyLDM0MywzNDQsMzQ1LDM0NiwzNDcsMzQ4LDM0OSwzNTAsMzUxLDM1MiwzNTMsMzU0LDM1NSwzNTYsMzU3LDM1OCwzNTksMzYwLDM2MSwzNjIsMzYzLDM2NCwzNjUsMzY2LDM2NywzNjgsMzY5LDM3MCwzNzEsMzcyLDM3MywzNzQsMzc1LDM3NiwzNzcsMzc4LDM3OSwzODAsMzgxLDM4MiwzODMsNDAyLDUwNiw1MDcsNTA4LDUwOSw1MTAsNTExLDUzNiw1MzcsNTM4LDUzOSw3MTAsNzExLDcxMyw3MjgsNzI5LDczMCw3MzEsNzMyLDczMyw5MDAsOTAxLDkwMiw5MDMsOTA0LDkwNSw5MDYsOTA4LDkxMCw5MTEsOTEyLDkxMyw5MTQsOTE1LDkxNiw5MTcsOTE4LDkxOSw5MjAsOTIxLDkyMiw5MjMsOTI0LDkyNSw5MjYsOTI3LDkyOCw5MjksOTMxLDkzMiw5MzMsOTM0LDkzNSw5MzYsOTM3LDkzOCw5MzksOTQwLDk0MSw5NDIsOTQzLDk0NCw5NDUsOTQ2LDk0Nyw5NDgsOTQ5LDk1MCw5NTEsOTUyLDk1Myw5NTQsOTU1LDk1Niw5NTcsOTU4LDk1OSw5NjAsOTYxLDk2Miw5NjMsOTY0LDk2NSw5NjYsOTY3LDk2OCw5NjksOTcwLDk3MSw5NzIsOTczLDk3NCwxMDI0LDEwMjUsMTAyNiwxMDI3LDEwMjgsMTAyOSwxMDMwLDEwMzEsMTAzMiwxMDMzLDEwMzQsMTAzNSwxMDM2LDEwMzcsMTAzOCwxMDM5LDEwNDAsMTA0MSwxMDQyLDEwNDMsMTA0NCwxMDQ1LDEwNDYsMTA0NywxMDQ4LDEwNDksMTA1MCwxMDUxLDEwNTIsMTA1MywxMDU0LDEwNTUsMTA1NiwxMDU3LDEwNTgsMTA1OSwxMDYwLDEwNjEsMTA2MiwxMDYzLDEwNjQsMTA2NSwxMDY2LDEwNjcsMTA2OCwxMDY5LDEwNzAsMTA3MSwxMDcyLDEwNzMsMTA3NCwxMDc1LDEwNzYsMTA3NywxMDc4LDEwNzksMTA4MCwxMDgxLDEwODIsMTA4MywxMDg0LDEwODUsMTA4NiwxMDg3LDEwODgsMTA4OSwxMDkwLDEwOTEsMTA5MiwxMDkzLDEwOTQsMTA5NSwxMDk2LDEwOTcsMTA5OCwxMDk5LDExMDAsMTEwMSwxMTAyLDExMDMsMTEwNCwxMTA1LDExMDYsMTEwNywxMTA4LDExMDksMTExMCwxMTExLDExMTIsMTExMywxMTE0LDExMTUsMTExNiwxMTE3LDExMTgsMTExOSwxMTM4LDExMzksMTE2OCwxMTY5LDc4MDgsNzgwOSw3ODEwLDc4MTEsNzgxMiw3ODEzLDc5MjIsNzkyMyw4MjA4LDgyMDksODIxMSw4MjEyLDgyMTMsODIxNSw4MjE2LDgyMTcsODIxOCw4MjE5LDgyMjAsODIyMSw4MjIyLDgyMjQsODIyNSw4MjI2LDgyMzAsODI0MCw4MjQyLDgyNDMsODI0OSw4MjUwLDgyNTIsODI1NCw4MjYwLDgzMTksODM1NSw4MzU2LDgzNTksODM2NCw4NDUzLDg0NjcsODQ3MCw4NDgyLDg0ODYsODQ5NCw4NTM5LDg1NDAsODU0MSw4NTQyLDg1OTIsODU5Myw4NTk0LDg1OTUsODU5Niw4NTk3LDg2MTYsODcwNiw4NzEwLDg3MTksODcyMSw4NzIyLDg3MzAsODczNCw4NzM1LDg3NDUsODc0Nyw4Nzc2LDg4MDAsODgwMSw4ODA0LDg4MDUsODk2Miw4OTc2LDg5OTIsODk5Myw5NDcyLDk0NzQsOTQ4NCw5NDg4LDk0OTIsOTQ5Niw5NTAwLDk1MDgsOTUxNiw5NTI0LDk1MzIsOTU1Miw5NTUzLDk1NTQsOTU1NSw5NTU2LDk1NTcsOTU1OCw5NTU5LDk1NjAsOTU2MSw5NTYyLDk1NjMsOTU2NCw5NTY1LDk1NjYsOTU2Nyw5NTY4LDk1NjksOTU3MCw5NTcxLDk1NzIsOTU3Myw5NTc0LDk1NzUsOTU3Niw5NTc3LDk1NzgsOTU3OSw5NTgwLDk2MDAsOTYwNCw5NjA4LDk2MTIsOTYxNiw5NjE3LDk2MTgsOTYxOSw5NjMyLDk2MzMsOTY0Miw5NjQzLDk2NDQsOTY1MCw5NjU4LDk2NjAsOTY2OCw5Njc0LDk2NzUsOTY3OSw5Njg4LDk2ODksOTcwMiw5Nzg2LDk3ODcsOTc4OCw5NzkyLDk3OTQsOTgyNCw5ODI3LDk4MjksOTgzMCw5ODM0LDk4MzUsOTgzNiw2MTQ0MSw2MTQ0Miw2MTQ0NSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMSwtMV19LChlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuTXlyaWFkUHJvUmVndWxhck1ldHJpY3M9dC5NeXJpYWRQcm9SZWd1bGFyRmFjdG9ycz10Lk15cmlhZFByb0l0YWxpY01ldHJpY3M9dC5NeXJpYWRQcm9JdGFsaWNGYWN0b3JzPXQuTXlyaWFkUHJvQm9sZE1ldHJpY3M9dC5NeXJpYWRQcm9Cb2xkSXRhbGljTWV0cmljcz10Lk15cmlhZFByb0JvbGRJdGFsaWNGYWN0b3JzPXQuTXlyaWFkUHJvQm9sZEZhY3RvcnM9dm9pZCAwO3QuTXlyaWFkUHJvQm9sZEZhY3RvcnM9WzEuMzY4OTgsMSwxLC43MjcwNiwuODA0NzksLjgzNzM0LC45ODg5NCwuOTk3OTMsLjk4OTcsLjkzODg0LC44NjIwOSwuOTQyOTIsLjk0MjkyLDEuMTY2NjEsMS4wMjA1OCwuOTM1ODIsLjk2Njk0LC45MzU4MiwxLjE5MTM3LC45OTc5MywuOTk3OTMsLjk5NzkzLC45OTc5MywuOTk3OTMsLjk5NzkzLC45OTc5MywuOTk3OTMsLjk5NzkzLC45OTc5MywuNzgwNzYsLjc4MDc2LDEuMDIwNTgsMS4wMjA1OCwxLjAyMDU4LC43Mjg1MSwuNzg5NjYsLjkwODM4LC44MzYzNywuODIzOTEsLjk2Mzc2LC44MDA2MSwuODYyNzUsLjg3NjgsLjk1NDA3LDEuMDI1OCwuNzM5MDEsLjg1MDIyLC44MzY1NSwxLjAxNTYsLjk1NTQ2LC45MjE3OSwuODcxMDcsLjkyMTc5LC44MjExNCwuODA5NiwuODk3MTMsLjk0NDM4LC45NTM1MywuOTQwODMsLjkxOTA1LC45MDQwNiwuOTQ0NiwuOTQyOTIsMS4xODc3NywuOTQyOTIsMS4wMjA1OCwuODk5MDMsLjkwMDg4LC45NDkzOCwuOTc4OTgsLjgxMDkzLC45NzU3MSwuOTQ5MzgsMS4wMjQsLjk1NzcsLjk1OTMzLC45ODYyMSwxLjA0NzQsLjk3NDU1LC45ODk4MSwuOTY3MiwuOTU5MzMsLjk0NDYsLjk3ODk4LC45NzQwNywuOTc2NDYsLjc4MDM2LDEuMTAyMDgsLjk1NDQyLC45NTI5OCwuOTc1NzksLjkzMzIsLjk0MDM5LC45MzgsLjgwNjg3LDEuMDExNDksLjgwNjg3LDEuMDIwNTgsLjgwNDc5LC45OTc5MywuOTk3OTMsLjk5NzkzLC45OTc5MywxLjAxMTQ5LDEuMDA4NzIsLjkwMDg4LC45MTg4MiwxLjAyMTMsLjgzNjEsMS4wMjA1OCwuNjIyOTUsLjU0MzI0LC44OTAyMiwxLjA4NTk1LDEsMSwuOTAwODgsMSwuOTc0NTUsLjkzNTgyLC45MDA4OCwxLDEuMDU2ODYsLjgzNjEsLjk5NjQyLC45OTY0MiwuOTk2NDIsLjcyODUxLC45MDgzOCwuOTA4MzgsLjkwODM4LC45MDgzOCwuOTA4MzgsLjkwODM4LC44NjgsLjgyMzkxLC44MDA2MSwuODAwNjEsLjgwMDYxLC44MDA2MSwxLjAyNTgsMS4wMjU4LDEuMDI1OCwxLjAyNTgsLjk3NDg0LC45NTU0NiwuOTIxNzksLjkyMTc5LC45MjE3OSwuOTIxNzksLjkyMTc5LDEuMDIwNTgsLjkyMTc5LC45NDQzOCwuOTQ0MzgsLjk0NDM4LC45NDQzOCwuOTA0MDYsLjg2OTU4LC45ODIyNSwuOTQ5MzgsLjk0OTM4LC45NDkzOCwuOTQ5MzgsLjk0OTM4LC45NDkzOCwuOTAzMSwuODEwOTMsLjk0OTM4LC45NDkzOCwuOTQ5MzgsLjk0OTM4LC45ODYyMSwuOTg2MjEsLjk4NjIxLC45ODYyMSwuOTM5NjksLjk1OTMzLC45NDQ2LC45NDQ2LC45NDQ2LC45NDQ2LC45NDQ2LDEuMDg1OTUsLjk0NDYsLjk1NDQyLC45NTQ0MiwuOTU0NDIsLjk1NDQyLC45NDAzOSwuOTc4OTgsLjk0MDM5LC45MDgzOCwuOTQ5MzgsLjkwODM4LC45NDkzOCwuOTA4MzgsLjk0OTM4LC44MjM5MSwuODEwOTMsLjgyMzkxLC44MTA5MywuODIzOTEsLjgxMDkzLC44MjM5MSwuODEwOTMsLjk2Mzc2LC44NDMxMywuOTc0ODQsLjk3NTcxLC44MDA2MSwuOTQ5MzgsLjgwMDYxLC45NDkzOCwuODAwNjEsLjk0OTM4LC44MDA2MSwuOTQ5MzgsLjgwMDYxLC45NDkzOCwuODc2OCwuOTU3NywuODc2OCwuOTU3NywuODc2OCwuOTU3NywxLDEsLjk1NDA3LC45NTkzMywuOTcwNjksLjk1OTMzLDEuMDI1OCwuOTg2MjEsMS4wMjU4LC45ODYyMSwxLjAyNTgsLjk4NjIxLDEuMDI1OCwuOTg2MjEsMS4wMjU4LC45ODYyMSwuODg3LDEuMDE1OTEsLjczOTAxLDEuMDQ3NCwxLDEsLjk3NDU1LC44MzY1NSwuOTg5ODEsMSwxLC44MzY1NSwuNzM5NzcsLjgzNjU1LC43MzkwMywuODQ2MzgsMS4wMzMsLjk1NTQ2LC45NTkzMywxLDEsLjk1NTQ2LC45NTkzMywuODI3MSwuOTU0MTcsLjk1OTMzLC45MjE3OSwuOTQ0NiwuOTIxNzksLjk0NDYsLjkyMTc5LC45NDQ2LC45MzYsLjkxOTY0LC44MjExNCwuOTc2NDYsMSwxLC44MjExNCwuOTc2NDYsLjgwOTYsLjc4MDM2LC44MDk2LC43ODAzNiwxLDEsLjgwOTYsLjc4MDM2LDEsMSwuODk3MTMsLjc3NDUyLC44OTcxMywxLjEwMjA4LC45NDQzOCwuOTU0NDIsLjk0NDM4LC45NTQ0MiwuOTQ0MzgsLjk1NDQyLC45NDQzOCwuOTU0NDIsLjk0NDM4LC45NTQ0MiwuOTQ0MzgsLjk1NDQyLC45NDA4MywuOTc1NzksLjkwNDA2LC45NDAzOSwuOTA0MDYsLjk0NDYsLjkzOCwuOTQ0NiwuOTM4LC45NDQ2LC45MzgsMSwuOTk3OTMsLjkwODM4LC45NDkzOCwuODY4LC45MDMxLC45MjE3OSwuOTQ0NiwxLDEsLjg5NzEzLDEuMTAyMDgsLjkwMDg4LC45MDA4OCwuOTAwODgsLjkwMDg4LC45MDA4OCwuOTAwODgsLjkwMDg4LC45MDA4OCwuOTAwODgsLjkwOTg5LC45MzU4LC45MTk0NSwuODMxODEsLjc1MjYxLC44Nzk5MiwuODI5NzYsLjk2MDM0LC44MzY4OSwuOTcyNjgsMS4wMDc4LC45MDgzOCwuODM2MzcsLjgwMTksLjkwMTU3LC44MDA2MSwuOTQ0NiwuOTU0MDcsLjkyNDM2LDEuMDI1OCwuODUwMjIsLjk3MTUzLDEuMDE1NiwuOTU1NDYsLjg5MTkyLC45MjE3OSwuOTIzNjEsLjg3MTA3LC45NjMxOCwuODk3MTMsLjkzNzA0LC45NTYzOCwuOTE5MDUsLjkxNzA5LC45Mjc5NiwxLjAyNTgsLjkzNzA0LC45NDgzNiwxLjAzNzMsLjk1OTMzLDEuMDA3OCwuOTU4NzEsLjk0ODM2LC45NjE3NCwuOTI2MDEsLjk0OTgsLjk4NjA3LC45NTc3NiwuOTU5MzMsMS4wNTQ1MywxLjAwNzgsLjk4Mjc1LC45MzE0LC45NTYxNywuOTE3MDEsMS4wNTk5MywuOTQ0NiwuNzgzNjcsLjk1NTMsMSwuODY4MzIsMS4wMTI4LC45NTg3MSwuOTkzOTQsLjg3NTQ4LC45NjM2MSwuODY3NzQsMS4wMDc4LC45NTg3MSwuOTQ0NiwuOTU4NzEsLjg2Nzc0LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjk0MDgzLC45NzU3OSwuOTQwODMsLjk3NTc5LC45NDA4MywuOTc1NzksLjkwNDA2LC45NDAzOSwuOTY2OTQsMSwuODk5MDMsMSwxLDEsLjkzNTgyLC45MzU4MiwuOTM1ODIsMSwuOTA4LC45MDgsLjkxOCwuOTQyMTksLjk0MjE5LC45NjU0NCwxLDEuMjg1LDEsMSwuODEwNzksLjgxMDc5LDEsMSwuNzQ4NTQsMSwxLDEsMSwuOTk3OTMsMSwxLDEsLjY1LDEsMS4zNjE0NSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMS4xNzE3MywxLC44MDUzNSwuNzYxNjksMS4wMjA1OCwxLjA3MzIsMS4wNTQ4NiwxLDEsMS4zMDY5MiwxLjA4NTk1LDEuMDg1OTUsMSwxLjA4NTk1LDEuMDg1OTUsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjE2MTYxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDFdO3QuTXlyaWFkUHJvQm9sZE1ldHJpY3M9e2xpbmVIZWlnaHQ6MS4yLGxpbmVHYXA6LjJ9O3QuTXlyaWFkUHJvQm9sZEl0YWxpY0ZhY3RvcnM9WzEuMzY4OTgsMSwxLC42NjIyNywuODA3NzksLjgxNjI1LC45NzI3NiwuOTcyNzYsLjk3NzMzLC45MjIyMiwuODMyNjYsLjk0MjkyLC45NDI5MiwxLjE2MTQ4LDEuMDIwNTgsLjkzNTgyLC45NjY5NCwuOTM1ODIsMS4xNzMzNywuOTcyNzYsLjk3Mjc2LC45NzI3NiwuOTcyNzYsLjk3Mjc2LC45NzI3NiwuOTcyNzYsLjk3Mjc2LC45NzI3NiwuOTcyNzYsLjc4MDc2LC43ODA3NiwxLjAyMDU4LDEuMDIwNTgsMS4wMjA1OCwuNzE1NDEsLjc2ODEzLC44NTU3NiwuODA1OTEsLjgwNzI5LC45NDI5OSwuNzc1MTIsLjgzNjU1LC44NjUyMywuOTIyMjIsLjk4NjIxLC43MTc0MywuODE2OTgsLjc5NzI2LC45ODU1OCwuOTIyMjIsLjkwNjM3LC44MzgwOSwuOTA2MzcsLjgwNzI5LC43NjQ2MywuODYyNzUsLjkwNjk5LC45MTYwNSwuOTE1NCwuODUzMDgsLjg1NDU4LC45MDUzMSwuOTQyOTIsMS4yMTI5NiwuOTQyOTIsMS4wMjA1OCwuODk5MDMsMS4xODYxNiwuOTk2MTMsLjkxNjc3LC43ODIxNiwuOTE2NzcsLjkwMDgzLC45ODc5NiwuOTEzNSwuOTIxNjgsLjk1MzgxLC45ODk4MSwuOTUyOTgsLjk1MzgxLC45MzQ1OSwuOTIxNjgsLjkxNTEzLC45MjAwNCwuOTE2NzcsLjk1MDc3LC43NDgsMS4wNDUwMiwuOTE2NzcsLjkyMDYxLC45NDIzNiwuODk1NDQsLjg5MzY0LC45LC44MDY4NywuODU3OCwuODA2ODcsMS4wMjA1OCwuODA3NzksLjk3Mjc2LC45NzI3NiwuOTcyNzYsLjk3Mjc2LC44NTc4LC45OTk3MywxLjE4NjE2LC45MTMzOSwxLjA4MDc0LC44Mjg5MSwxLjAyMDU4LC41NTUwOSwuNzE1MjYsLjg5MDIyLDEuMDg1OTUsMSwxLDEuMTg2MTYsMSwuOTY3MzYsLjkzNTgyLDEuMTg2MTYsMSwxLjA0ODY0LC44MjcxMSwuOTkwNDMsLjk5MDQzLC45OTA0MywuNzE1NDEsLjg1NTc2LC44NTU3NiwuODU1NzYsLjg1NTc2LC44NTU3NiwuODU1NzYsLjg0NSwuODA3MjksLjc3NTEyLC43NzUxMiwuNzc1MTIsLjc3NTEyLC45ODYyMSwuOTg2MjEsLjk4NjIxLC45ODYyMSwuOTU5NjEsLjkyMjIyLC45MDYzNywuOTA2MzcsLjkwNjM3LC45MDYzNywuOTA2MzcsMS4wMjA1OCwuOTAyNTEsLjkwNjk5LC45MDY5OSwuOTA2OTksLjkwNjk5LC44NTQ1OCwuODM2NTksLjk0OTUxLC45OTYxMywuOTk2MTMsLjk5NjEzLC45OTYxMywuOTk2MTMsLjk5NjEzLC44NTgxMSwuNzgyMTYsLjkwMDgzLC45MDA4MywuOTAwODMsLjkwMDgzLC45NTM4MSwuOTUzODEsLjk1MzgxLC45NTM4MSwuOTEzNSwuOTIxNjgsLjkxNTEzLC45MTUxMywuOTE1MTMsLjkxNTEzLC45MTUxMywxLjA4NTk1LC45MTY3NywuOTE2NzcsLjkxNjc3LC45MTY3NywuOTE2NzcsLjg5MzY0LC45MjMzMiwuODkzNjQsLjg1NTc2LC45OTYxMywuODU1NzYsLjk5NjEzLC44NTU3NiwuOTk2MTMsLjgwNzI5LC43ODIxNiwuODA3MjksLjc4MjE2LC44MDcyOSwuNzgyMTYsLjgwNzI5LC43ODIxNiwuOTQyOTksLjc2NzgzLC45NTk2MSwuOTE2NzcsLjc3NTEyLC45MDA4MywuNzc1MTIsLjkwMDgzLC43NzUxMiwuOTAwODMsLjc3NTEyLC45MDA4MywuNzc1MTIsLjkwMDgzLC44NjUyMywuOTEzNSwuODY1MjMsLjkxMzUsLjg2NTIzLC45MTM1LDEsMSwuOTIyMjIsLjkyMTY4LC45MjIyMiwuOTIxNjgsLjk4NjIxLC45NTM4MSwuOTg2MjEsLjk1MzgxLC45ODYyMSwuOTUzODEsLjk4NjIxLC45NTM4MSwuOTg2MjEsLjk1MzgxLC44NjAzNiwuOTcwOTYsLjcxNzQzLC45ODk4MSwxLDEsLjk1Mjk4LC43OTcyNiwuOTUzODEsMSwxLC43OTcyNiwuNjg5NCwuNzk3MjYsLjc0MzIxLC44MTY5MSwxLjAwMDYsLjkyMjIyLC45MjE2OCwxLDEsLjkyMjIyLC45MjE2OCwuNzk0NjQsLjkyMDk4LC45MjE2OCwuOTA2MzcsLjkxNTEzLC45MDYzNywuOTE1MTMsLjkwNjM3LC45MTUxMywuOTA5LC44NzUxNCwuODA3MjksLjk1MDc3LDEsMSwuODA3MjksLjk1MDc3LC43NjQ2MywuNzQ4LC43NjQ2MywuNzQ4LDEsMSwuNzY0NjMsLjc0OCwxLDEsLjg2Mjc1LC43MjY1MSwuODYyNzUsMS4wNDUwMiwuOTA2OTksLjkxNjc3LC45MDY5OSwuOTE2NzcsLjkwNjk5LC45MTY3NywuOTA2OTksLjkxNjc3LC45MDY5OSwuOTE2NzcsLjkwNjk5LC45MTY3NywuOTE1NCwuOTQyMzYsLjg1NDU4LC44OTM2NCwuODU0NTgsLjkwNTMxLC45LC45MDUzMSwuOSwuOTA1MzEsLjksMSwuOTcyNzYsLjg1NTc2LC45OTYxMywuODQ1LC44NTgxMSwuOTAyNTEsLjkxNjc3LDEsMSwuODYyNzUsMS4wNDUwMiwxLjE4NjE2LDEuMTg2MTYsMS4xODYxNiwxLjE4NjE2LDEuMTg2MTYsMS4xODYxNiwxLjE4NjE2LDEuMTg2MTYsMS4xODYxNiwxLjAwODk5LDEuMzA2MjgsLjg1NTc2LC44MDE3OCwuNjY4NjIsLjc5MjcsLjY5MzIzLC44ODEyNywuNzI0NTksLjg5NzExLC45NTM4MSwuODU1NzYsLjgwNTkxLC43ODA1LC45NDcyOSwuNzc1MTIsLjkwNTMxLC45MjIyMiwuOTA2MzcsLjk4NjIxLC44MTY5OCwuOTI2NTUsLjk4NTU4LC45MjIyMiwuODUzNTksLjkwNjM3LC45MDk3NiwuODM4MDksLjk0NTIzLC44NjI3NSwuODM1MDksLjkzMTU3LC44NTMwOCwuODMzOTIsLjkyMzQ2LC45ODYyMSwuODM1MDksLjkyODg2LC45MTMyNCwuOTIxNjgsLjk1MzgxLC45MDY0NiwuOTI4ODYsLjkwNTU3LC44Njg0NywuOTAyNzYsLjkxMzI0LC44Njg0MiwuOTIxNjgsLjk5NTMxLC45NTM4MSwuOTIyNCwuODU0MDgsLjkyNjk5LC44Njg0NywxLjAwNTEsLjkxNTEzLC44MDQ4NywuOTM0ODEsMSwuODgxNTksMS4wNTIxNCwuOTA2NDYsLjk3MzU1LC44MTUzOSwuODkzOTgsLjg1OTIzLC45NTM4MSwuOTA2NDYsLjkxNTEzLC45MDY0NiwuODU5MjMsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTE1NCwuOTQyMzYsLjkxNTQsLjk0MjM2LC45MTU0LC45NDIzNiwuODU0NTgsLjg5MzY0LC45NjY5NCwxLC44OTkwMywxLDEsMSwuOTE3ODIsLjkxNzgyLC45MTc4MiwxLC44OTYsLjg5NiwuODk2LC45MzMyLC45MzMyLC45NTk3MywxLDEuMjYsMSwxLC44MDQ3OSwuODAxNzgsMSwxLC44NTYzMywxLDEsMSwxLC45NzI3NiwxLDEsMSwuNjk4LDEsMS4zNjE0NSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMS4xNDU0MiwxLC43OTE5OSwuNzg2OTQsMS4wMjA1OCwxLjAzNDkzLDEuMDU0ODYsMSwxLDEuMjMwMjYsMS4wODU5NSwxLjA4NTk1LDEsMS4wODU5NSwxLjA4NTk1LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMS4yMDAwNiwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXTt0Lk15cmlhZFByb0JvbGRJdGFsaWNNZXRyaWNzPXtsaW5lSGVpZ2h0OjEuMixsaW5lR2FwOi4yfTt0Lk15cmlhZFByb0l0YWxpY0ZhY3RvcnM9WzEuMzY4OTgsMSwxLC42NTUwNywuODQ5NDMsLjg1NjM5LC44ODQ2NSwuODg0NjUsLjg2OTM2LC44ODMwNywuODY5NDgsLjg1MjgzLC44NTI4MywxLjA2MzgzLDEuMDIwNTgsLjc1OTQ1LC45MjE5LC43NTk0NSwxLjE3MzM3LC44ODQ2NSwuODg0NjUsLjg4NDY1LC44ODQ2NSwuODg0NjUsLjg4NDY1LC44ODQ2NSwuODg0NjUsLjg4NDY1LC44ODQ2NSwuNzU5NDUsLjc1OTQ1LDEuMDIwNTgsMS4wMjA1OCwxLjAyMDU4LC42OTA0NiwuNzA5MjYsLjg1MTU4LC43NzgxMiwuNzY4NTIsLjg5NTkxLC43MDQ2NiwuNzYxMjUsLjgwMDk0LC44NjgyMiwuODM4NjQsLjcyOCwuNzcyMTIsLjc5NDc1LC45MzYzNywuODc1MTQsLjg1ODgsLjc2MDEzLC44NTg4LC43MjQyMSwuNjk4NjYsLjc3NTk4LC44NTk5MSwuODA4MTEsLjg3ODMyLC43ODExMiwuNzc1MTIsLjg1NjIsMS4wMjIyLDEuMTg0MTcsMS4wMjIyLDEuMjcwMTQsLjg5OTAzLDEuMTUwMTIsLjkzODU5LC45NDM5OSwuODQ2LC45NDM5OSwuODE0NTMsMS4wMTg2LC45NDIxOSwuOTYwMTcsMS4wMzA3NSwxLjAyMTc1LC45MTIsMS4wMzA3NSwuOTY5OTgsLjk2MDE3LC45Mzg1OSwuOTQzOTksLjk0Mzk5LC45NTQ5MywuNzQ2LDEuMTI2NTgsLjk0NTc4LC45MSwuOTc5LC44ODIsLjg4MiwuODMsLjg1MDM0LC44MzUzNywuODUwMzQsMS4wMjA1OCwuNzA4NjksLjg4NDY1LC44ODQ2NSwuODg0NjUsLjg4NDY1LC44MzUzNywuOTAwODMsMS4xNTAxMiwuOTE2MSwuOTQ1NjUsLjczNTQxLDEuMDIwNTgsLjUzNjA5LC42OTM1MywuNzk1MTksMS4wODU5NSwxLDEsMS4xNTAxMiwxLC45MTk3NCwuNzU5NDUsMS4xNTAxMiwxLC45NDQ2LC43MzM2MSwuOTAwNSwuOTAwNSwuOTAwNSwuNjI4NjQsLjg1MTU4LC44NTE1OCwuODUxNTgsLjg1MTU4LC44NTE1OCwuODUxNTgsLjc3MywuNzY4NTIsLjcwNDY2LC43MDQ2NiwuNzA0NjYsLjcwNDY2LC44Mzg2NCwuODM4NjQsLjgzODY0LC44Mzg2NCwuOTA1NjEsLjg3NTE0LC44NTg4LC44NTg4LC44NTg4LC44NTg4LC44NTg4LDEuMDIwNTgsLjg1NzUxLC44NTk5MSwuODU5OTEsLjg1OTkxLC44NTk5MSwuNzc1MTIsLjc2MDEzLC44ODA3NSwuOTM4NTksLjkzODU5LC45Mzg1OSwuOTM4NTksLjkzODU5LC45Mzg1OSwuODA3NSwuODQ2LC44MTQ1MywuODE0NTMsLjgxNDUzLC44MTQ1MywuODI0MjQsLjgyNDI0LC44MjQyNCwuODI0MjQsLjkyNzgsLjk2MDE3LC45Mzg1OSwuOTM4NTksLjkzODU5LC45Mzg1OSwuOTM4NTksMS4wODU5NSwuODU2MiwuOTQ1NzgsLjk0NTc4LC45NDU3OCwuOTQ1NzgsLjg4MiwuOTQ1NzgsLjg4MiwuODUxNTgsLjkzODU5LC44NTE1OCwuOTM4NTksLjg1MTU4LC45Mzg1OSwuNzY4NTIsLjg0NiwuNzY4NTIsLjg0NiwuNzY4NTIsLjg0NiwuNzY4NTIsLjg0NiwuODk1OTEsLjg1NDQsLjkwNTYxLC45NDM5OSwuNzA0NjYsLjgxNDUzLC43MDQ2NiwuODE0NTMsLjcwNDY2LC44MTQ1MywuNzA0NjYsLjgxNDUzLC43MDQ2NiwuODE0NTMsLjgwMDk0LC45NDIxOSwuODAwOTQsLjk0MjE5LC44MDA5NCwuOTQyMTksMSwxLC44NjgyMiwuOTYwMTcsLjg2ODIyLC45NjAxNywuODM4NjQsLjgyNDI0LC44Mzg2NCwuODI0MjQsLjgzODY0LC44MjQyNCwuODM4NjQsMS4wMzA3NSwuODM4NjQsLjgyNDI0LC44MTQwMiwxLjAyNzM4LC43MjgsMS4wMjE3NSwxLDEsLjkxMiwuNzk0NzUsMS4wMzA3NSwxLDEsLjc5NDc1LC44MzkxMSwuNzk0NzUsLjY2MjY2LC44MDU1MywxLjA2Njc2LC44NzUxNCwuOTYwMTcsMSwxLC44NzUxNCwuOTYwMTcsLjg2ODY1LC44NzM5NiwuOTYwMTcsLjg1ODgsLjkzODU5LC44NTg4LC45Mzg1OSwuODU4OCwuOTM4NTksLjg2NywuODQ3NTksLjcyNDIxLC45NTQ5MywxLDEsLjcyNDIxLC45NTQ5MywuNjk4NjYsLjc0NiwuNjk4NjYsLjc0NiwxLDEsLjY5ODY2LC43NDYsMSwxLC43NzU5OCwuODg0MTcsLjc3NTk4LDEuMTI2NTgsLjg1OTkxLC45NDU3OCwuODU5OTEsLjk0NTc4LC44NTk5MSwuOTQ1NzgsLjg1OTkxLC45NDU3OCwuODU5OTEsLjk0NTc4LC44NTk5MSwuOTQ1NzgsLjg3ODMyLC45NzksLjc3NTEyLC44ODIsLjc3NTEyLC44NTYyLC44MywuODU2MiwuODMsLjg1NjIsLjgzLDEsLjg4NDY1LC44NTE1OCwuOTM4NTksLjc3MywuODA3NSwuODU3NTEsLjg1NjIsMSwxLC43NzU5OCwxLjEyNjU4LDEuMTUwMTIsMS4xNTAxMiwxLjE1MDEyLDEuMTUwMTIsMS4xNTAxMiwxLjE1MzEzLDEuMTUwMTIsMS4xNTAxMiwxLjE1MDEyLDEuMDgxMDYsMS4wMzkwMSwuODUxNTgsLjc3MDI1LC42MjI2NCwuNzY0NiwuNjUzNTEsLjg2MDI2LC42OTQ2MSwuODk5NDcsMS4wMzA3NSwuODUxNTgsLjc3ODEyLC43NjQ0OSwuODg4MzYsLjcwNDY2LC44NTYyLC44NjgyMiwuODU4OCwuODM4NjQsLjc3MjEyLC44NTMwOCwuOTM2MzcsLjg3NTE0LC44MjM1MiwuODU4OCwuODU3MDEsLjc2MDEzLC44OTA1OCwuNzc1OTgsLjgxNTYsLjgyNTY1LC43ODExMiwuNzc4OTksLjg5Mzg2LC44Mzg2NCwuODE1NiwuOTQ4NiwuOTIzODgsLjk2MTg2LDEuMDMwNzUsLjkxMTIzLC45NDg2LC45MzI5OCwuODc4LC45Mzk0MiwuOTIzODgsLjg0NTk2LC45NjE4NiwuOTUxMTksMS4wMzA3NSwuOTIyLC44ODc4NywuOTU4MjksLjg4LC45MzU1OSwuOTM4NTksLjc4ODE1LC45Mzc1OCwxLC44OTIxNywxLjAzNzM3LC45MTEyMywuOTM5NjksLjc3NDg3LC44NTc2OSwuODY3OTksMS4wMzA3NSwuOTExMjMsLjkzODU5LC45MTEyMywuODY3OTksMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuODc4MzIsLjk3OSwuODc4MzIsLjk3OSwuODc4MzIsLjk3OSwuNzc1MTIsLjg4MiwuOTIxOSwxLC44OTkwMywxLDEsMSwuODczMjEsLjg3MzIxLC44NzMyMSwxLDEuMDI3LDEuMDI3LDEuMDI3LC44Njg0NywuODY4NDcsLjc5MTIxLDEsMS4xMjQsMSwxLC43MzU3MiwuNzM1NzIsMSwxLC44NTAzNCwxLDEsMSwxLC44ODQ2NSwxLDEsMSwuNjY5LDEsMS4zNjE0NSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMS4wNDgyOCwxLC43NDk0OCwuNzUxODcsMS4wMjA1OCwuOTgzOTEsMS4wMjExOSwxLDEsMS4wNjIzMywxLjA4NTk1LDEuMDg1OTUsMSwxLjA4NTk1LDEuMDg1OTUsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjA1MjMzLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDFdO3QuTXlyaWFkUHJvSXRhbGljTWV0cmljcz17bGluZUhlaWdodDoxLjIsbGluZUdhcDouMn07dC5NeXJpYWRQcm9SZWd1bGFyRmFjdG9ycz1bMS4zNjg5OCwxLDEsLjc2MzA1LC44Mjc4NCwuOTQ5MzUsLjg5MzY0LC45MjI0MSwuODkwNzMsLjkwNzA2LC45ODQ3MiwuODUyODMsLjg1MjgzLDEuMDY2NCwxLjAyMDU4LC43NDUwNSwuOTIxOSwuNzQ1MDUsMS4yMzQ1NiwuOTIyNDEsLjkyMjQxLC45MjI0MSwuOTIyNDEsLjkyMjQxLC45MjI0MSwuOTIyNDEsLjkyMjQxLC45MjI0MSwuOTIyNDEsLjc0NTA1LC43NDUwNSwxLjAyMDU4LDEuMDIwNTgsMS4wMjA1OCwuNzMwMDIsLjcyNjAxLC45MTc1NSwuODEyNiwuODAzMTQsLjkyMjIyLC43Mzc2NCwuNzk3MjYsLjgzMDUxLC45MDI4NCwuODYwMjMsLjc0LC44MTI2LC44NDg2OSwuOTY1MTgsLjkxMTE1LC44ODU4LC43OTc2MSwuODg1OCwuNzQ0OTgsLjczOTE0LC44MTM2MywuODk1OTEsLjgzNjU5LC44OTYzMywuODU2MDgsLjgxMTEsLjkwNTMxLDEuMDIyMiwxLjIyNzM2LDEuMDIyMiwxLjI3MDE0LC44OTkwMywuOTAwODgsLjg2NjY3LDEuMDIzMSwuODk2LDEuMDE0MTEsLjkwMDgzLDEuMDUwOTksMS4wMDUxMiwuOTk3OTMsMS4wNTMyNiwxLjA5Mzc3LC45MzgsMS4wNjIyNiwxLjAwMTE5LC45OTc5MywuOTg3MTQsMS4wMjMxLDEuMDEyMzEsLjk4MTk2LC43OTIsMS4xOTEzNywuOTkwNzQsLjk2MiwxLjAxOTE1LC45MjYsLjk0MiwuODU2LC44NTAzNCwuOTIwMDYsLjg1MDM0LDEuMDIwNTgsLjY5MDY3LC45MjI0MSwuOTIyNDEsLjkyMjQxLC45MjI0MSwuOTIwMDYsLjkzMzIsLjkwMDg4LC45MTg4MiwuOTM0ODQsLjc1MzM5LDEuMDIwNTgsLjU2ODY2LC41NDMyNCwuNzk1MTksMS4wODU5NSwxLDEsLjkwMDg4LDEsLjk1MzI1LC43NDUwNSwuOTAwODgsMSwuOTcxOTgsLjc1MzM5LC45MTAwOSwuOTEwMDksLjkxMDA5LC42NjQ2NiwuOTE3NTUsLjkxNzU1LC45MTc1NSwuOTE3NTUsLjkxNzU1LC45MTc1NSwuNzg4LC44MDMxNCwuNzM3NjQsLjczNzY0LC43Mzc2NCwuNzM3NjQsLjg2MDIzLC44NjAyMywuODYwMjMsLjg2MDIzLC45MjkxNSwuOTExMTUsLjg4NTgsLjg4NTgsLjg4NTgsLjg4NTgsLjg4NTgsMS4wMjA1OCwuODg1OCwuODk1OTEsLjg5NTkxLC44OTU5MSwuODk1OTEsLjgxMTEsLjc5NjExLC44OTcxMywuODY2NjcsLjg2NjY3LC44NjY2NywuODY2NjcsLjg2NjY3LC44NjY2NywuODY5MzYsLjg5NiwuOTAwODMsLjkwMDgzLC45MDA4MywuOTAwODMsLjg0MjI0LC44NDIyNCwuODQyMjQsLjg0MjI0LC45NzI3NiwuOTk3OTMsLjk4NzE0LC45ODcxNCwuOTg3MTQsLjk4NzE0LC45ODcxNCwxLjA4NTk1LC44OTg3NiwuOTkwNzQsLjk5MDc0LC45OTA3NCwuOTkwNzQsLjk0MiwxLjAyMzEsLjk0MiwuOTE3NTUsLjg2NjY3LC45MTc1NSwuODY2NjcsLjkxNzU1LC44NjY2NywuODAzMTQsLjg5NiwuODAzMTQsLjg5NiwuODAzMTQsLjg5NiwuODAzMTQsLjg5NiwuOTIyMjIsLjkzMzcyLC45MjkxNSwxLjAxNDExLC43Mzc2NCwuOTAwODMsLjczNzY0LC45MDA4MywuNzM3NjQsLjkwMDgzLC43Mzc2NCwuOTAwODMsLjczNzY0LC45MDA4MywuODMwNTEsMS4wMDUxMiwuODMwNTEsMS4wMDUxMiwuODMwNTEsMS4wMDUxMiwxLDEsLjkwMjg0LC45OTc5MywuOTA5NzYsLjk5NzkzLC44NjAyMywuODQyMjQsLjg2MDIzLC44NDIyNCwuODYwMjMsLjg0MjI0LC44NjAyMywxLjA1MzI2LC44NjAyMywuODQyMjQsLjgyODczLDEuMDc0NjksLjc0LDEuMDkzNzcsMSwxLC45MzgsLjg0ODY5LDEuMDYyMjYsMSwxLC44NDg2OSwuODM3MDQsLjg0ODY5LC44MTQ0MSwuODU1ODgsMS4wODkyNywuOTExMTUsLjk5NzkzLDEsMSwuOTExMTUsLjk5NzkzLC45MTg4NywuOTA5OTEsLjk5NzkzLC44ODU4LC45ODcxNCwuODg1OCwuOTg3MTQsLjg4NTgsLjk4NzE0LC44OTQsLjkxNDM0LC43NDQ5OCwuOTgxOTYsMSwxLC43NDQ5OCwuOTgxOTYsLjczOTE0LC43OTIsLjczOTE0LC43OTIsMSwxLC43MzkxNCwuNzkyLDEsMSwuODEzNjMsLjkwNCwuODEzNjMsMS4xOTEzNywuODk1OTEsLjk5MDc0LC44OTU5MSwuOTkwNzQsLjg5NTkxLC45OTA3NCwuODk1OTEsLjk5MDc0LC44OTU5MSwuOTkwNzQsLjg5NTkxLC45OTA3NCwuODk2MzMsMS4wMTkxNSwuODExMSwuOTQyLC44MTExLC45MDUzMSwuODU2LC45MDUzMSwuODU2LC45MDUzMSwuODU2LDEsLjkyMjQxLC45MTc1NSwuODY2NjcsLjc4OCwuODY5MzYsLjg4NTgsLjg5ODc2LDEsMSwuODEzNjMsMS4xOTEzNywuOTAwODgsLjkwMDg4LC45MDA4OCwuOTAwODgsLjkwMDg4LC45MDA4OCwuOTAwODgsLjkwMDg4LC45MDA4OCwuOTAzODgsMS4wMzkwMSwuOTIxMzgsLjc4MTA1LC43MTU0LC44NjE2OSwuODA1MTMsLjk0MDA3LC44MjUyOCwuOTg2MTIsMS4wNjIyNiwuOTE3NTUsLjgxMjYsLjgxODg0LC45MjgxOSwuNzM3NjQsLjkwNTMxLC45MDI4NCwuODg1OCwuODYwMjMsLjgxMjYsLjkxMTcyLC45NjUxOCwuOTExMTUsLjgzMDg5LC44ODU4LC44Nzc5MSwuNzk3NjEsLjg5Mjk3LC44MTM2MywuODgxNTcsLjg5OTkyLC44NTYwOCwuODE5OTIsLjk0MzA3LC44NjAyMywuODgxNTcsLjk1MzA4LC45ODY5OSwuOTk3OTMsMS4wNjIyNiwuOTU4MTcsLjk1MzA4LC45NzM1OCwuOTI4LC45ODA4OCwuOTg2OTksLjkyNzYxLC45OTc5MywuOTYwMTcsMS4wNjIyNiwuOTg2LC45NDQsLjk1OTc4LC45MzgsLjk2NzA1LC45ODcxNCwuODA0NDIsLjk4OTcyLDEsLjg5NzYyLDEuMDQ1NTIsLjk1ODE3LC45OTAwNywuODcwNjQsLjkxODc5LC44ODg4OCwxLjA2MjI2LC45NTgxNywuOTg3MTQsLjk1ODE3LC44ODg4OCwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC44OTYzMywxLjAxOTE1LC44OTYzMywxLjAxOTE1LC44OTYzMywxLjAxOTE1LC44MTExLC45NDIsLjkyMTksMSwuODk5MDMsMSwxLDEsLjkzMTczLC45MzE3MywuOTMxNzMsMSwxLjA2MzA0LDEuMDYzMDQsMS4wNjkwNCwuODk5MDMsLjg5OTAzLC44MDU0OSwxLDEuMTU2LDEsMSwuNzY1NzUsLjc2NTc1LDEsMSwuNzI0NTgsMSwxLDEsMSwuOTIyNDEsMSwxLDEsLjYxOSwxLDEuMzYxNDUsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEuMDcyNTcsMSwuNzQ3MDUsLjcxMTE5LDEuMDIwNTgsMS4wMjQsMS4wMjExOSwxLDEsMS4xNTM2LDEuMDg1OTUsMS4wODU5NSwxLDEuMDg1OTUsMS4wODU5NSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEuMDU2MzgsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMV07dC5NeXJpYWRQcm9SZWd1bGFyTWV0cmljcz17bGluZUhlaWdodDoxLjIsbGluZUdhcDouMn19LChlLHQpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuU2Vnb2V1aVJlZ3VsYXJNZXRyaWNzPXQuU2Vnb2V1aVJlZ3VsYXJGYWN0b3JzPXQuU2Vnb2V1aUl0YWxpY01ldHJpY3M9dC5TZWdvZXVpSXRhbGljRmFjdG9ycz10LlNlZ29ldWlCb2xkTWV0cmljcz10LlNlZ29ldWlCb2xkSXRhbGljTWV0cmljcz10LlNlZ29ldWlCb2xkSXRhbGljRmFjdG9ycz10LlNlZ29ldWlCb2xkRmFjdG9ycz12b2lkIDA7dC5TZWdvZXVpQm9sZEZhY3RvcnM9WzEuNzY3MzgsMSwxLC45OTI5NywuOTgyNCwxLjA0MDE2LDEuMDY0OTcsMS4wMzQyNCwuOTc1MjksMS4xNzY0NywxLjIzMjAzLDEuMTA4NSwxLjEwODUsMS4xNjkzOSwxLjIxMDcsLjk3NTQsMS4yMTQwOCwuOTc1NCwxLjU5NTc4LDEuMDM0MjQsMS4wMzQyNCwxLjAzNDI0LDEuMDM0MjQsMS4wMzQyNCwxLjAzNDI0LDEuMDM0MjQsMS4wMzQyNCwxLjAzNDI0LDEuMDM0MjQsLjgxMzc4LC44MTM3OCwxLjIxMDcsMS4yMTA3LDEuMjEwNywuNzE3MDMsLjk3ODQ3LC45NzM2MywuODg3NzYsLjg2NDEsMS4wMjA5NiwuNzk3OTUsLjg1MTMyLC45MTQsMS4wNjA4NSwxLjE0MDYsLjgwMDcsLjg5ODU4LC44MzY5MywxLjE0ODg5LDEuMDkzOTgsLjk3NDg5LC45MjA5NCwuOTc0ODksLjkwMzk5LC44NDA0MSwuOTU5MjMsMS4wMDEzNSwxLDEuMDY0NjcsLjk4MjQzLC45MDk5NiwuOTkzNjEsMS4xMDg1LDEuNTY5NDIsMS4xMDg1LDEuMjEwNywuNzQ2MjcsLjk0MjgyLC45Njc1MiwxLjAxNTE5LC44NjMwNCwxLjAxMzU5LC45NzI3OCwxLjE1MTAzLDEuMDEzNTksLjk4NTYxLDEuMDIyODUsMS4wMjI4NSwxLjAwNTI3LDEuMDIyODUsMS4wMzAyLC45OTA0MSwxLjAwMDgsMS4wMTUxOSwxLjAxMzU5LDEuMDIyNTgsLjc5MTA0LDEuMTY4NjIsLjk5MDQxLC45NzQ1NCwxLjAyNTExLC45OTI5OCwuOTY3NTIsLjk1ODAxLC45NDg1NiwxLjE2NTc5LC45NDg1NiwxLjIxMDcsLjk4MjQsMS4wMzQyNCwxLjAzNDI0LDEsMS4wMzQyNCwxLjE2NTc5LC44NzI3LDEuMzg3MSwxLjE4NjIyLDEuMTA4MTgsMS4wNDQ3OCwxLjIxMDcsMS4xODYyMiwuNzUxNTUsLjk0OTk0LDEuMjg4MjYsMS4yMTQwOCwxLjIxNDA4LC45MTA1NiwxLC45MTU3MiwuOTc1NCwuNjQ2NjMsMS4xODMyOCwxLjI0ODY2LDEuMDQ0NzgsMS4xNDE2OSwxLjE1NzQ5LDEuMTczODksLjcxNzAzLC45NzM2MywuOTczNjMsLjk3MzYzLC45NzM2MywuOTczNjMsLjk3MzYzLC45MzUwNiwuODY0MSwuNzk3OTUsLjc5Nzk1LC43OTc5NSwuNzk3OTUsMS4xNDA2LDEuMTQwNiwxLjE0MDYsMS4xNDA2LDEuMDIwOTYsMS4wOTM5OCwuOTc0MjYsLjk3NDI2LC45NzQyNiwuOTc0MjYsLjk3NDI2LDEuMjEwNywuOTc0ODksMS4wMDEzNSwxLjAwMTM1LDEuMDAxMzUsMS4wMDEzNSwuOTA5OTYsLjkyMDk0LDEuMDI3OTgsLjk2NzUyLC45Njc1MiwuOTY3NTIsLjk2NzUyLC45Njc1MiwuOTY3NTIsLjkzMTM2LC44NjMwNCwuOTcyNzgsLjk3Mjc4LC45NzI3OCwuOTcyNzgsMS4wMjI4NSwxLjAyMjg1LDEuMDIyODUsMS4wMjI4NSwuOTcxMjIsLjk5MDQxLDEsMSwxLDEsMSwxLjI4ODI2LDEuMDAwOCwuOTkwNDEsLjk5MDQxLC45OTA0MSwuOTkwNDEsLjk2NzUyLDEuMDE1MTksLjk2NzUyLC45NzM2MywuOTY3NTIsLjk3MzYzLC45Njc1MiwuOTczNjMsLjk2NzUyLC44NjQxLC44NjMwNCwuODY0MSwuODYzMDQsLjg2NDEsLjg2MzA0LC44NjQxLC44NjMwNCwxLjAyMDk2LDEuMDMwNTcsMS4wMjA5NiwxLjAzNTE3LC43OTc5NSwuOTcyNzgsLjc5Nzk1LC45NzI3OCwuNzk3OTUsLjk3Mjc4LC43OTc5NSwuOTcyNzgsLjc5Nzk1LC45NzI3OCwuOTE0LDEuMDEzNTksLjkxNCwxLjAxMzU5LC45MTQsMS4wMTM1OSwxLDEsMS4wNjA4NSwuOTg1NjEsMS4wNjA4NSwxLjAwODc5LDEuMTQwNiwxLjAyMjg1LDEuMTQwNiwxLjAyMjg1LDEuMTQwNiwxLjAyMjg1LDEuMTQwNiwxLjAyMjg1LDEuMTQwNiwxLjAyMjg1LC45NzEzOCwxLjA4NjkyLC44MDA3LDEuMDIyODUsMSwxLDEuMDA1MjcsLjgzNjkzLDEuMDIyODUsMSwxLC44MzY5MywuOTQ1NSwuODM2OTMsLjkwNDE4LC44MzY5MywxLjEzMDA1LDEuMDkzOTgsLjk5MDQxLDEsMSwxLjA5Mzk4LC45OTA0MSwuOTY2OTIsMS4wOTI1MSwuOTkwNDEsLjk3NDg5LDEuMDAwOCwuOTc0ODksMS4wMDA4LC45NzQ4OSwxLjAwMDgsLjkzOTk0LC45NzkzMSwuOTAzOTksMS4wMjI1OCwxLDEsLjkwMzk5LDEuMDIyNTgsLjg0MDQxLC43OTEwNCwuODQwNDEsLjc5MTA0LC44NDA0MSwuNzkxMDQsLjg0MDQxLC43OTEwNCwxLDEsLjk1OTIzLDEuMDcwMzQsLjk1OTIzLDEuMTY4NjIsMS4wMDEzNSwuOTkwNDEsMS4wMDEzNSwuOTkwNDEsMS4wMDEzNSwuOTkwNDEsMS4wMDEzNSwuOTkwNDEsMS4wMDEzNSwuOTkwNDEsMS4wMDEzNSwuOTkwNDEsMS4wNjQ2NywxLjAyNTExLC45MDk5NiwuOTY3NTIsLjkwOTk2LC45OTM2MSwuOTU4MDEsLjk5MzYxLC45NTgwMSwuOTkzNjEsLjk1ODAxLDEuMDc3MzMsMS4wMzQyNCwuOTczNjMsLjk2NzUyLC45MzUwNiwuOTMxMzYsLjk3NDg5LDEuMDAwOCwxLDEsLjk1OTIzLDEuMTY4NjIsMS4xNTEwMywxLjE1MTAzLDEuMDExNzMsMS4wMzk1OSwuNzU5NTMsLjgxMzc4LC43OTkxMiwxLjE1MTAzLDEuMjE5OTQsLjk1MTYxLC44NzgxNSwxLjAxMTQ5LC44MTUyNSwuNzY3NiwuOTgxNjcsMS4wMTEzNCwxLjAyNTQ2LC44NDA5NywxLjAzMDg5LDEuMTgxMDIsLjk3MzYzLC44ODc3NiwuODUxMzQsLjk3ODI2LC43OTc5NSwuOTkzNjEsMS4wNjA4NSwuOTc0ODksMS4xNDA2LC44OTg1OCwxLjAzODgsMS4xNDg4OSwxLjA5Mzk4LC44NjAzOSwuOTc0ODksMS4wNTk1LC45MjA5NCwuOTQ3OTMsLjk1OTIzLC45MDk5NiwuOTkzNDYsLjk4MjQzLDEuMDIxMTIsLjk1NDkzLDEuMTQwNiwuOTA5OTYsMS4wMzU3NCwxLjAyNTk3LDEuMDAwOCwxLjE4MTAyLDEuMDY2MjgsMS4wMzU3NCwxLjAxOTIsMS4wMTkzMiwxLjAwODg2LC45NzUzMSwxLjAxMDYsMS4wMDA4LDEuMTMxODksMS4xODEwMiwxLjAyMjc3LC45ODY4MywxLjAwMTYsLjk5NTYxLDEuMDcyMzcsMS4wMDA4LC45MDQzNCwuOTk5MjEsLjkzODAzLC44OTY1LDEuMjMwODUsMS4wNjYyOCwxLjA0OTgzLC45NjI2OCwxLjA0OTksLjk4NDM5LDEuMTgxMDIsMS4wNjYyOCwxLjAwMDgsMS4wNjYyOCwuOTg0MzksLjc5Nzk1LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEuMDk0NjYsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjk3Mjc4LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEuMDIwNjUsMSwxLDEsMSwxLDEsMS4wNjQ2NywxLjAyNTExLDEuMDY0NjcsMS4wMjUxMSwxLjA2NDY3LDEuMDI1MTEsLjkwOTk2LC45Njc1MiwxLDEuMjE0MDgsLjg5OTAzLDEsMSwuNzUxNTUsMS4wNDM5NCwxLjA0Mzk0LDEuMDQzOTQsMS4wNDM5NCwuOTg2MzMsLjk4NjMzLC45ODYzMywuNzMwNDcsLjczMDQ3LDEuMjA2NDIsLjkxMjExLDEuMjU2MzUsMS4yMjIsMS4wMjk1NiwxLjAzMzcyLDEuMDMzNzIsLjk2MDM5LDEuMjQ2MzMsMSwxLjEyNDU0LC45MzUwMywxLjAzNDI0LDEuMTk2ODcsMS4wMzQyNCwxLDEsMSwuNzcxLDEsMSwxLjE1NzQ5LDEuMTU3NDksMS4xNTc0OSwxLjEwOTQ4LC44NjI3OSwuOTQ0MzQsLjg2Mjc5LC45NDQzNCwuODYxODIsMSwxLDEuMTY4OTcsMSwuOTYwODUsLjkwMTM3LDEuMjEwNywxLjE4NDE2LDEuMTM5NzMsLjY5ODI1LC45NzE2LDIuMTAzMzksMS4yOTAwNCwxLjI5MDA0LDEuMjExNzIsMS4yOTAwNCwxLjI5MDA0LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMS40MjYwMywxLC45OTg2MiwuOTk4NjIsMSwuODcwMjUsLjg3MDI1LC44NzAyNSwuODcwMjUsMS4xODg3NCwxLjQyNjAzLDEsMS40MjYwMywxLjQyNjAzLC45OTg2MiwxLDEsMSwxLDEsMS4yODg2LDEuMDQzMTUsMS4xNTI5NiwxLjM0MTYzLDEsMSwxLDEuMDkxOTMsMS4wOTE5MywxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMV07dC5TZWdvZXVpQm9sZE1ldHJpY3M9e2xpbmVIZWlnaHQ6MS4zMzAwOCxsaW5lR2FwOjB9O3QuU2Vnb2V1aUJvbGRJdGFsaWNGYWN0b3JzPVsxLjc2NzM4LDEsMSwuOTg5NDYsMS4wMzk1OSwxLjA0MDE2LDEuMDI4MDksMS4wMzYsLjk3NjM5LDEuMTA5NTMsMS4yMzIwMywxLjExMTQ0LDEuMTExNDQsMS4xNjkzOSwxLjIxMjM3LC45NzU0LDEuMjEyNjEsLjk3NTQsMS41OTc1NCwxLjAzNiwxLjAzNiwxLjAzNiwxLjAzNiwxLjAzNiwxLjAzNiwxLjAzNiwxLjAzNiwxLjAzNiwxLjAzNiwuODEzNzgsLjgxMzc4LDEuMjEyMzcsMS4yMTIzNywxLjIxMjM3LC43MzU0MSwuOTc4NDcsLjk3MzYzLC44OTcyMywuODc4OTcsMS4wNDI2LC43OTQyOSwuODUyOTIsLjkxMTQ5LDEuMDU4MTUsMS4xNDA2LC43OTYzMSwuOTAxMjgsLjgzODUzLDEuMDQzOTYsMS4xMDYxNSwuOTc1NTIsLjk0NDM2LC45NzU1MiwuODg2NDEsLjgwNTI3LC45NjA4MywxLjAwMTM1LDEsMS4wNjc3NywuOTgxNywuOTExNDIsLjk5MzYxLDEuMTExNDQsMS41NzI5MywxLjExMTQ0LDEuMjEyMzcsLjc0NjI3LDEuMzE4MTgsMS4wNjU4NSwuOTcwNDIsLjgzMDU1LC45NzA0MiwuOTM1MDMsMS4xMjYxLC45NzA0MiwuOTc5MjIsMS4xNDIzNiwuOTQ1NTIsMS4wMTA1NCwxLjE0MjM2LDEuMDI0NzEsLjk3OTIyLC45NDE2NSwuOTcwNDIsLjk3MDQyLDEuMDI3NiwuNzg5MjksMS4xMjYxLC45NzkyMiwuOTU4NzQsMS4wMjE5NywuOTg1MDcsLjk2NzUyLC45NzE2OCwuOTUxMDcsMS4xNjU3OSwuOTUxMDcsMS4yMTIzNywxLjAzOTU5LDEuMDM2LDEuMDM2LDEsMS4wMzYsMS4xNjU3OSwuODczNTcsMS4zMTgxOCwxLjE4NzU0LDEuMjY3ODEsMS4wNTM1NiwxLjIxMjM3LDEuMTg2MjIsLjc5NDg3LC45NDk5NCwxLjI5MDA0LDEuMjQwNDcsMS4yNDA0NywxLjMxODE4LDEsLjkxNDg0LC45NzU0LDEuMzE4MTgsMS4xMzQ5LDEuMjQ4NjYsMS4wNTM1NiwxLjEzOTM0LDEuMTU1NzQsMS4xNzM4OSwuNzM1NDEsLjk3MzYzLC45NzM2MywuOTczNjMsLjk3MzYzLC45NzM2MywuOTczNjMsLjk0Mzg1LC44Nzg5NywuNzk0MjksLjc5NDI5LC43OTQyOSwuNzk0MjksMS4xNDA2LDEuMTQwNiwxLjE0MDYsMS4xNDA2LDEuMDQyNiwxLjEwNjE1LC45NzU1MiwuOTc1NTIsLjk3NTUyLC45NzU1MiwuOTc1NTIsMS4yMTIzNywuOTc1NTIsMS4wMDEzNSwxLjAwMTM1LDEuMDAxMzUsMS4wMDEzNSwuOTExNDIsLjk0NDM2LC45ODcyMSwxLjA2NTg1LDEuMDY1ODUsMS4wNjU4NSwxLjA2NTg1LDEuMDY1ODUsMS4wNjU4NSwuOTY3MDUsLjgzMDU1LC45MzUwMywuOTM1MDMsLjkzNTAzLC45MzUwMywxLjE0MjM2LDEuMTQyMzYsMS4xNDIzNiwxLjE0MjM2LC45MzEyNSwuOTc5MjIsLjk0MTY1LC45NDE2NSwuOTQxNjUsLjk0MTY1LC45NDE2NSwxLjI5MDA0LC45NDE2NSwuOTc5MjIsLjk3OTIyLC45NzkyMiwuOTc5MjIsLjk2NzUyLC45NzA0MiwuOTY3NTIsLjk3MzYzLDEuMDY1ODUsLjk3MzYzLDEuMDY1ODUsLjk3MzYzLDEuMDY1ODUsLjg3ODk3LC44MzA1NSwuODc4OTcsLjgzMDU1LC44Nzg5NywuODMwNTUsLjg3ODk3LC44MzA1NSwxLjA0MjYsMS4wMDMzLDEuMDQyNiwuOTcwNDIsLjc5NDI5LC45MzUwMywuNzk0MjksLjkzNTAzLC43OTQyOSwuOTM1MDMsLjc5NDI5LC45MzUwMywuNzk0MjksLjkzNTAzLC45MTE0OSwuOTcwNDIsLjkxMTQ5LC45NzA0MiwuOTExNDksLjk3MDQyLDEsMSwxLjA1ODE1LC45NzkyMiwxLjA1ODE1LC45NzkyMiwxLjE0MDYsMS4xNDIzNiwxLjE0MDYsMS4xNDIzNiwxLjE0MDYsMS4xNDIzNiwxLjE0MDYsMS4xNDIzNiwxLjE0MDYsMS4xNDIzNiwuOTc0NDEsMS4wNDMwMiwuNzk2MzEsMS4wMTU4MiwxLDEsMS4wMTA1NCwuODM4NTMsMS4xNDIzNiwxLDEsLjgzODUzLDEuMDkxMjUsLjgzODUzLC45MDQxOCwuODM4NTMsMS4xOTUwOCwxLjEwNjE1LC45NzkyMiwxLDEsMS4xMDYxNSwuOTc5MjIsMS4wMTAzNCwxLjEwNDY2LC45NzkyMiwuOTc1NTIsLjk0MTY1LC45NzU1MiwuOTQxNjUsLjk3NTUyLC45NDE2NSwuOTE2MDIsLjkxOTgxLC44ODY0MSwxLjAyNzYsMSwxLC44ODY0MSwxLjAyNzYsLjgwNTI3LC43ODkyOSwuODA1MjcsLjc4OTI5LC44MDUyNywuNzg5MjksLjgwNTI3LC43ODkyOSwxLDEsLjk2MDgzLDEuMDU0MDMsLjk1OTIzLDEuMTY4NjIsMS4wMDEzNSwuOTc5MjIsMS4wMDEzNSwuOTc5MjIsMS4wMDEzNSwuOTc5MjIsMS4wMDEzNSwuOTc5MjIsMS4wMDEzNSwuOTc5MjIsMS4wMDEzNSwuOTc5MjIsMS4wNjc3NywxLjAyMTk3LC45MTE0MiwuOTY3NTIsLjkxMTQyLC45OTM2MSwuOTcxNjgsLjk5MzYxLC45NzE2OCwuOTkzNjEsLjk3MTY4LDEuMjMxOTksMS4wMzYsLjk3MzYzLDEuMDY1ODUsLjk0Mzg1LC45NjcwNSwuOTc1NTIsLjk0MTY1LDEsMSwuOTYwODMsMS4xMjYxLDEuMzE4MTgsMS4zMTgxOCwxLjMxODE4LDEuMzE4MTgsMS4zMTgxOCwxLjMxODE4LDEuMzE4MTgsMS4zMTgxOCwxLjMxODE4LC45NTE2MSwxLjI3MTI2LDEuMDA4MTEsLjgzMjg0LC43NzcwMiwuOTkxMzcsLjk1MjUzLDEuMDM0NywuODYxNDIsMS4wNzIwNSwxLjE0MjM2LC45NzM2MywuODk3MjMsLjg2ODY5LDEuMDk4MTgsLjc5NDI5LC45OTM2MSwxLjA1ODE1LC45NzU1MiwxLjE0MDYsLjkwMTI4LDEuMDY2NjIsMS4wNDM5NiwxLjEwNjE1LC44NDkxOCwuOTc1NTIsMS4wNDY5NCwuOTQ0MzYsLjk4MDE1LC45NjA4MywuOTExNDIsMS4wMDM1NiwuOTgxNywxLjAxOTQ1LC45ODk5OSwxLjE0MDYsLjkxMTQyLDEuMDQ5NjEsLjk4OTgsMS4wMDYzOSwxLjE0MjM2LDEuMDc1MTQsMS4wNDk2MSwuOTk2MDcsMS4wMjg5NywxLjAwOCwuOTg5OCwuOTUxMzQsMS4wMDYzOSwxLjExMTIxLDEuMTQyMzYsMS4wMDUxOCwuOTc5ODEsMS4wMjE4NiwxLDEuMDg1NzgsLjk0MTY1LC45OTMxNCwuOTgzODcsLjkzMDI4LC45MzM3NywxLjM1MTI1LDEuMDc1MTQsMS4xMDY4NywuOTM0OTEsMS4wNDIzMiwxLjAwMzUxLDEuMTQyMzYsMS4wNzUxNCwuOTQxNjUsMS4wNzUxNCwxLjAwMzUxLC43OTQyOSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjA5MDk3LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC45MzUwMywxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTY2MDksMSwxLDEsMSwxLDEsMS4wNjc3NywxLjAyMTk3LDEuMDY3NzcsMS4wMjE5NywxLjA2Nzc3LDEuMDIxOTcsLjkxMTQyLC45Njc1MiwxLDEuMjEyNjEsLjg5OTAzLDEsMSwuNzUxNTUsMS4wNDc0NSwxLjA0NzQ1LDEuMDQ3NDUsMS4wNDM5NCwuOTg2MzMsLjk4NjMzLC45ODYzMywuNzI5NTksLjcyOTU5LDEuMjA1MDIsLjkxNDA2LDEuMjY1MTQsMS4yMjIsMS4wMjk1NiwxLjAzMzcyLDEuMDMzNzIsLjk2MDM5LDEuMjQ2MzMsMSwxLjA5MTI1LC45MzMyNywxLjAzMzM2LDEuMTY1NDEsMS4wMzYsMSwxLDEsLjc3MSwxLDEsMS4xNTU3NCwxLjE1NTc0LDEuMTU1NzQsMS4xNTU3NCwuODYzNjQsLjk0NDM0LC44NjI3OSwuOTQ0MzQsLjg2MjI0LDEsMSwxLjE2Nzk4LDEsLjk2MDg1LC45MDA2OCwxLjIxMjM3LDEuMTg0MTYsMS4xMzkwNCwuNjk4MjUsLjk3MTYsMi4xMDMzOSwxLjI5MDA0LDEuMjkwMDQsMS4yMTMzOSwxLjI5MDA0LDEuMjkwMDQsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjQyNjAzLDEsLjk5ODYyLC45OTg2MiwxLC44NzAyNSwuODcwMjUsLjg3MDI1LC44NzAyNSwxLjE4Nzc1LDEuNDI2MDMsMSwxLjQyNjAzLDEuNDI2MDMsLjk5ODYyLDEsMSwxLDEsMSwxLjI4ODYsMS4wNDMxNSwxLjE1Mjk2LDEuMzQxNjMsMSwxLDEsMS4xMzI2OSwxLjEzMjY5LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXTt0LlNlZ29ldWlCb2xkSXRhbGljTWV0cmljcz17bGluZUhlaWdodDoxLjMzMDA4LGxpbmVHYXA6MH07dC5TZWdvZXVpSXRhbGljRmFjdG9ycz1bMS43NjczOCwxLDEsLjk4OTQ2LDEuMTQ3NjMsMS4wNTM2NSwxLjA2MjM0LC45NjkyNywuOTI1ODYsMS4xNTM3MywxLjE4NDE0LC45MTM0OSwuOTEzNDksMS4wNzQwMywxLjE3MzA4LC43ODM4MywxLjIwMDg4LC43ODM4MywxLjQyNTMxLC45NjkyNywuOTY5MjcsLjk2OTI3LC45NjkyNywuOTY5MjcsLjk2OTI3LC45NjkyNywuOTY5MjcsLjk2OTI3LC45NjkyNywuNzgzODMsLjc4MzgzLDEuMTczMDgsMS4xNzMwOCwxLjE3MzA4LC43NzM0OSwuOTQ1NjUsLjk0NzI5LC44NTk0NCwuODg1MDYsLjk4NTgsLjc0ODE3LC44MDAxNiwuODg0NDksLjk4MDM5LC45NTc4MiwuNjkyMzgsLjg5ODk4LC44MzIzMSwuOTgxODMsMS4wMzk4OSwuOTY5MjQsLjg2MjM3LC45NjkyNCwuODA1OTUsLjc0NTI0LC44NjA5MSwuOTU0MDIsLjk0MTQzLC45ODQ0OCwuODg1OCwuODMwODksLjkzMjg1LDEuMDk0OSwxLjM5MDE2LDEuMDk0OSwxLjQ1OTk0LC43NDYyNywxLjA0ODM5LC45NzQ1NCwuOTc0NTQsLjg3MjA3LC45NzQ1NCwuODc1MzMsMS4wNjE1MSwuOTc0NTQsMS4wMDE3NiwxLjE2NDg0LDEuMDgxMzIsLjk4MDQ3LDEuMTY0ODQsMS4wMjk4OSwxLjAxMDU0LC45NjIyNSwuOTc0NTQsLjk3NDU0LDEuMDY1OTgsLjc5MDA0LDEuMTYzNDQsMS4wMDM1MSwuOTQ2MjksLjk5NzMsLjkxMDE2LC45Njc3NywuOTA0MywuOTEwODIsLjkyNDgxLC45MTA4MiwxLjE3MzA4LC45NTc0OCwuOTY5MjcsLjk2OTI3LDEsLjk2OTI3LC45MjQ4MSwuODA1OTcsMS4wNDgzOSwxLjIzMzkzLDEuMTc4MSwuOTI0NSwxLjE3MzA4LDEuMjA4MDgsLjYzMjE4LC45NDI2MSwxLjI0ODIyLDEuMDk5NzEsMS4wOTk3MSwxLjA0ODM5LDEsLjg1MjczLC43ODAzMiwxLjA0ODM5LDEuMDk5NzEsMS4yMjMyNiwuOTI0NSwxLjA5ODM2LDEuMTM1MjUsMS4xNTIyMiwuNzA0MjQsLjk0NzI5LC45NDcyOSwuOTQ3MjksLjk0NzI5LC45NDcyOSwuOTQ3MjksLjg1NDk4LC44ODUwNiwuNzQ4MTcsLjc0ODE3LC43NDgxNywuNzQ4MTcsLjk1NzgyLC45NTc4MiwuOTU3ODIsLjk1NzgyLC45ODU4LDEuMDM5ODksLjk2OTI0LC45NjkyNCwuOTY5MjQsLjk2OTI0LC45NjkyNCwxLjE3MzA4LC45NjkyNCwuOTU0MDIsLjk1NDAyLC45NTQwMiwuOTU0MDIsLjgzMDg5LC44NjIzNywuODg0MDksLjk3NDU0LC45NzQ1NCwuOTc0NTQsLjk3NDU0LC45NzQ1NCwuOTc0NTQsLjkyOTE2LC44NzIwNywuODc1MzMsLjg3NTMzLC44NzUzMywuODc1MzMsLjkzMTQ2LC45MzE0NiwuOTMxNDYsLjkzMTQ2LC45Mzg1NCwxLjAxMDU0LC45NjIyNSwuOTYyMjUsLjk2MjI1LC45NjIyNSwuOTYyMjUsMS4yNDgyMiwuODc2MSwxLjAwMzUxLDEuMDAzNTEsMS4wMDM1MSwxLjAwMzUxLC45Njc3NywuOTc0NTQsLjk2Nzc3LC45NDcyOSwuOTc0NTQsLjk0NzI5LC45NzQ1NCwuOTQ3MjksLjk3NDU0LC44ODUwNiwuODcyMDcsLjg4NTA2LC44NzIwNywuODg1MDYsLjg3MjA3LC44ODUwNiwuODcyMDcsLjk4NTgsLjk1MzkxLC45ODU4LC45NzQ1NCwuNzQ4MTcsLjg3NTMzLC43NDgxNywuODc1MzMsLjc0ODE3LC44NzUzMywuNzQ4MTcsLjg3NTMzLC43NDgxNywuODc1MzMsLjg4NDQ5LC45NzQ1NCwuODg0NDksLjk3NDU0LC44ODQ0OSwuOTc0NTQsMSwxLC45ODAzOSwxLjAwMTc2LC45ODAzOSwxLjAwMTc2LC45NTc4MiwuOTMxNDYsLjk1NzgyLC45MzE0NiwuOTU3ODIsLjkzMTQ2LC45NTc4MiwxLjE2NDg0LC45NTc4MiwuOTMxNDYsLjg0NDIxLDEuMTI3NjEsLjY5MjM4LDEuMDgxMzIsMSwxLC45ODA0NywuODMyMzEsMS4xNjQ4NCwxLDEsLjg0NzIzLDEuMDQ4NjEsLjg0NzIzLC43ODc1NSwuODMyMzEsMS4yMzczNiwxLjAzOTg5LDEuMDEwNTQsMSwxLDEuMDM5ODksMS4wMTA1NCwuOTg1NywxLjAzODQ5LDEuMDEwNTQsLjk2OTI0LC45NjIyNSwuOTY5MjQsLjk2MjI1LC45NjkyNCwuOTYyMjUsLjkyMzgzLC45MDE3MSwuODA1OTUsMS4wNjU5OCwxLDEsLjgwNTk1LDEuMDY1OTgsLjc0NTI0LC43OTAwNCwuNzQ1MjQsLjc5MDA0LC43NDUyNCwuNzkwMDQsLjc0NTI0LC43OTAwNCwxLDEsLjg2MDkxLDEuMDI3NTksLjg1NzcxLDEuMTYzNDQsLjk1NDAyLDEuMDAzNTEsLjk1NDAyLDEuMDAzNTEsLjk1NDAyLDEuMDAzNTEsLjk1NDAyLDEuMDAzNTEsLjk1NDAyLDEuMDAzNTEsLjk1NDAyLDEuMDAzNTEsLjk4NDQ4LC45OTczLC44MzA4OSwuOTY3NzcsLjgzMDg5LC45MzI4NSwuOTA0MywuOTMyODUsLjkwNDMsLjkzMjg1LC45MDQzLDEuMzE4NjgsLjk2OTI3LC45NDcyOSwuOTc0NTQsLjg1NDk4LC45MjkxNiwuOTY5MjQsLjg3NjEsMSwxLC44NjA5MSwxLjE2MzQ0LDEuMDQ4MzksMS4wNDgzOSwxLjA0ODM5LDEuMDQ4MzksMS4wNDgzOSwxLjA0ODM5LDEuMDQ4MzksMS4wNDgzOSwxLjA0ODM5LC44MTk2NSwuODE5NjUsLjk0NzI5LC43ODAzMiwuNzEwMjIsLjkwODgzLC44NDE3MSwuOTk4NzcsLjc3NTk2LDEuMDU3MzQsMS4yLC45NDcyOSwuODU5NDQsLjgyNzkxLC45NjA3LC43NDgxNywuOTMyODUsLjk4MDM5LC45NjkyNCwuOTU3ODIsLjg5ODk4LC45ODMxNiwuOTgxODMsMS4wMzk4OSwuNzg2MTQsLjk2OTI0LC45NzY0MiwuODYyMzcsLjg2MDc1LC44NjA5MSwuODMwODksLjkwMDgyLC44ODU4LC45NzI5NiwxLjAxMjg0LC45NTc4MiwuODMwODksMS4wOTc2LDEuMDQsMS4wMzM0MiwxLjIsMS4wNjc1LDEuMDk3NiwuOTgyMDUsMS4wMzgwOSwxLjA1MDk3LDEuMDQsLjk1MzY0LDEuMDMzNDIsMS4wNTQwMSwxLjIsMS4wMjE0OCwxLjAxMTksMS4wNDcyNCwxLjAxMjcsMS4wMjczMiwuOTYyMjUsLjg5NjUsLjk3NzgzLC45MzU3NCwuOTQ4MTgsMS4zMDY3OSwxLjA2NzUsMS4xMTgyNiwuOTk4MjEsMS4wNTU3LDEuMDMyNiwxLjIsMS4wNjc1LC45NjIyNSwxLjA2NzUsMS4wMzI2LC43NDgxNywxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjAzNzU0LDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLC44NzUzMywxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwuOTg3MDUsMSwxLDEsMSwxLDEsLjk4NDQ4LC45OTczLC45ODQ0OCwuOTk3MywuOTg0NDgsLjk5NzMsLjgzMDg5LC45Njc3NywxLDEuMjAwODgsLjg5OTAzLDEsMSwuNzUxNTUsLjk0OTQ1LC45NDk0NSwuOTQ5NDUsLjk0OTQ1LDEuMTIzMTcsMS4xMjMxNywxLjEyMzE3LC42NzYwMywuNjc2MDMsMS4xNTYyMSwuNzM1ODQsMS4yMTE5MSwxLjIyMTM1LDEuMDY0ODMsLjk0ODY4LC45NDg2OCwuOTU5OTYsMS4yNDYzMywxLDEuMDc0OTcsLjg3NzA5LC45NjkyNywxLjAxNDczLC45NjkyNywxLDEsMSwuNzcyOTUsMSwxLDEuMDk4MzYsMS4wOTgzNiwxLjA5ODM2LDEuMDE1MjIsLjg2MzIxLC45NDQzNCwuODY0OSwuOTQ0MzQsLjg2MTgyLDEsMSwxLjA4MywxLC45MTU3OCwuODY0MzgsMS4xNzMwOCwxLjE4NDE2LDEuMTQ1ODksLjY5ODI1LC45NzYyMiwxLjk2NzkxLDEuMjQ4MjIsMS4yNDgyMiwxLjE3MzA4LDEuMjQ4MjIsMS4yNDgyMiwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEuNDI2MDMsMSwuOTk4NjIsLjk5ODYyLDEsLjg3MDI1LC44NzAyNSwuODcwMjUsLjg3MDI1LDEuMTc5ODQsMS40MjYwMywxLDEuNDI2MDMsMS40MjYwMywuOTk4NjIsMSwxLDEsMSwxLDEuMjg4NiwxLjA0MzE1LDEuMTUyOTYsMS4zNDE2MywxLDEsMSwxLjEwNzQyLDEuMTA3NDIsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDFdO3QuU2Vnb2V1aUl0YWxpY01ldHJpY3M9e2xpbmVIZWlnaHQ6MS4zMzAwOCxsaW5lR2FwOjB9O3QuU2Vnb2V1aVJlZ3VsYXJGYWN0b3JzPVsxLjc2NzM4LDEsMSwuOTg1OTQsMS4wMjI4NSwxLjEwNDU0LDEuMDYyMzQsLjk2OTI3LC45MjAzNywxLjE5OTg1LDEuMjA0NiwuOTA2MTYsLjkwNjE2LDEuMDcxNTIsMS4xNzE0LC43ODAzMiwxLjIwMDg4LC43ODAzMiwxLjQwMjQ2LC45NjkyNywuOTY5MjcsLjk2OTI3LC45NjkyNywuOTY5MjcsLjk2OTI3LC45NjkyNywuOTY5MjcsLjk2OTI3LC45NjkyNywuNzgwMzIsLjc4MDMyLDEuMTcxNCwxLjE3MTQsMS4xNzE0LC44MDU5NywuOTQwODQsLjk2NzA2LC44NTk0NCwuODU3MzQsLjk3MDkzLC43NTg0MiwuNzk5MzYsLjg4MTk4LC45ODMxLC45NTc4MiwuNzEzODcsLjg2OTY5LC44NDYzNiwxLjA3Nzk2LDEuMDM1ODQsLjk2OTI0LC44Mzk2OCwuOTY5MjQsLjgyODI2LC43OTY0OSwuODU3NzEsLjk1MTMyLC45MzExOSwuOTg5NjUsLjg4NDMzLC44Mjg3LC45MzM2NSwxLjA4NjEyLDEuMzYzOCwxLjA4NjEyLDEuNDU3ODYsLjc0NjI3LC44MDQ5OSwuOTE0ODQsMS4wNTcwNywuOTIzODMsMS4wNTg4MiwuOTQwMywxLjEyNjU0LDEuMDU4ODIsMS4wMTc1NiwxLjA5MDExLDEuMDkwMTEsLjk5NDE0LDEuMDkwMTEsMS4wMzQsMS4wMTc1NiwxLjA1MzU2LDEuMDU3MDcsMS4wNTg4MiwxLjA0Mzk5LC44NDg2MywxLjIxOTY4LDEuMDE3NTYsLjk1ODAxLDEuMDAwNjgsLjkxNzk3LC45Njc3NywuOTA0MywuOTAzNTEsLjkyMTA1LC45MDM1MSwxLjE3MTQsLjg1MzM3LC45NjkyNywuOTY5MjcsLjk5OTEyLC45NjkyNywuOTIxMDUsLjgwNTk3LDEuMjQzNCwxLjIwODA4LDEuMDU5MzcsLjkwOTU3LDEuMTcxNCwxLjIwODA4LC43NTE1NSwuOTQyNjEsMS4yNDY0NCwxLjA5OTcxLDEuMDk5NzEsLjg0NzUxLDEsLjg1MjczLC43ODAzMiwuNjE1ODQsMS4wNTQyNSwxLjE3OTE0LC45MDk1NywxLjA4NjY1LDEuMTE1OTMsMS4xNDE2OSwuNzMzODEsLjk2NzA2LC45NjcwNiwuOTY3MDYsLjk2NzA2LC45NjcwNiwuOTY3MDYsLjg2MDM1LC44NTczNCwuNzU4NDIsLjc1ODQyLC43NTg0MiwuNzU4NDIsLjk1NzgyLC45NTc4MiwuOTU3ODIsLjk1NzgyLC45NzA5MywxLjAzNTg0LC45NjkyNCwuOTY5MjQsLjk2OTI0LC45NjkyNCwuOTY5MjQsMS4xNzE0LC45NjkyNCwuOTUxMzIsLjk1MTMyLC45NTEzMiwuOTUxMzIsLjgyODcsLjgzOTY4LC44OTA0OSwuOTE0ODQsLjkxNDg0LC45MTQ4NCwuOTE0ODQsLjkxNDg0LC45MTQ4NCwuOTM1NzUsLjkyMzgzLC45NDAzLC45NDAzLC45NDAzLC45NDAzLC44NzE3LC44NzE3LC44NzE3LC44NzE3LDEuMDA1MjcsMS4wMTc1NiwxLjA1MzU2LDEuMDUzNTYsMS4wNTM1NiwxLjA1MzU2LDEuMDUzNTYsMS4yNDY0NCwuOTU5MjMsMS4wMTc1NiwxLjAxNzU2LDEuMDE3NTYsMS4wMTc1NiwuOTY3NzcsMS4wNTcwNywuOTY3NzcsLjk2NzA2LC45MTQ4NCwuOTY3MDYsLjkxNDg0LC45NjcwNiwuOTE0ODQsLjg1NzM0LC45MjM4MywuODU3MzQsLjkyMzgzLC44NTczNCwuOTIzODMsLjg1NzM0LC45MjM4MywuOTcwOTMsMS4wOTY5LC45NzA5MywxLjA1ODgyLC43NTg0MiwuOTQwMywuNzU4NDIsLjk0MDMsLjc1ODQyLC45NDAzLC43NTg0MiwuOTQwMywuNzU4NDIsLjk0MDMsLjg4MTk4LDEuMDU4ODIsLjg4MTk4LDEuMDU4ODIsLjg4MTk4LDEuMDU4ODIsMSwxLC45ODMxLDEuMDE3NTYsLjk4MzEsMS4wMTc1NiwuOTU3ODIsLjg3MTcsLjk1NzgyLC44NzE3LC45NTc4MiwuODcxNywuOTU3ODIsMS4wOTAxMSwuOTU3ODIsLjg3MTcsLjg0Nzg0LDEuMTE1NTEsLjcxMzg3LDEuMDkwMTEsMSwxLC45OTQxNCwuODQ2MzYsMS4wOTAxMSwxLDEsLjg0NjM2LDEuMDUzNiwuODQ2MzYsLjk0Mjk4LC44NDYzNiwxLjIzMjk3LDEuMDM1ODQsMS4wMTc1NiwxLDEsMS4wMzU4NCwxLjAxNzU2LDEuMDAzMjMsMS4wMzQ0NCwxLjAxNzU2LC45NjkyNCwxLjA1MzU2LC45NjkyNCwxLjA1MzU2LC45NjkyNCwxLjA1MzU2LC45MzA2NiwuOTgyOTMsLjgyODI2LDEuMDQzOTksMSwxLC44MjgyNiwxLjA0Mzk5LC43OTY0OSwuODQ4NjMsLjc5NjQ5LC44NDg2MywuNzk2NDksLjg0ODYzLC43OTY0OSwuODQ4NjMsMSwxLC44NTc3MSwxLjE3MzE4LC44NTc3MSwxLjIxOTY4LC45NTEzMiwxLjAxNzU2LC45NTEzMiwxLjAxNzU2LC45NTEzMiwxLjAxNzU2LC45NTEzMiwxLjAxNzU2LC45NTEzMiwxLjAxNzU2LC45NTEzMiwxLjAxNzU2LC45ODk2NSwxLjAwMDY4LC44Mjg3LC45Njc3NywuODI4NywuOTMzNjUsLjkwNDMsLjkzMzY1LC45MDQzLC45MzM2NSwuOTA0MywxLjA4NTcxLC45NjkyNywuOTY3MDYsLjkxNDg0LC44NjAzNSwuOTM1NzUsLjk2OTI0LC45NTkyMywxLDEsLjg1NzcxLDEuMjE5NjgsMS4xMTQzNywxLjExNDM3LC45MzEwOSwuOTEyMDIsLjYwNDExLC44NDE2NCwuNTU1NzIsMS4wMTE3MywuOTczNjEsLjgxODE4LC44MTgxOCwuOTY2MzUsLjc4MDMyLC43MjcyNywuOTIzNjYsLjk4NjAxLDEuMDM0MDUsLjc3OTY4LDEuMDk3OTksMS4yLC45NjcwNiwuODU5NDQsLjg1NjM4LC45NjQ5MSwuNzU4NDIsLjkzMzY1LC45ODMxLC45NjkyNCwuOTU3ODIsLjg2OTY5LC45NDE1MiwxLjA3Nzk2LDEuMDM1ODQsLjc4NDM3LC45NjkyNCwuOTg3MTUsLjgzOTY4LC44MzQ5MSwuODU3NzEsLjgyODcsLjk0NDkyLC44ODQzMywuOTI4NywxLjAwOTgsLjk1NzgyLC44Mjg3LDEuMDYyNSwuOTgyNDgsMS4wMzQyNCwxLjIsMS4wMTA3MSwxLjA2MjUsLjk1MjQ2LDEuMDM4MDksMS4wNDkxMiwuOTgyNDgsMS4wMDIyMSwxLjAzNDI0LDEuMDU0NDMsMS4yLDEuMDQ3ODUsLjk5NjA5LDEuMDAxNjksMS4wNTE3NiwuOTkzNDYsMS4wNTM1NiwuOTA4NywxLjAzMDA0LC45NTU0MiwuOTMxMTcsMS4yMzM2MiwxLjAxMDcxLDEuMDc4MzEsMS4wMjUxMiwxLjA1MjA1LDEuMDM1MDIsMS4yLDEuMDEwNzEsMS4wNTM1NiwxLjAxMDcxLDEuMDM1MDIsLjc1ODQyLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEuMDM3MTksMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsLjk0MDMsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMS4wNDAyMSwxLDEsMSwxLDEsMSwuOTg5NjUsMS4wMDA2OCwuOTg5NjUsMS4wMDA2OCwuOTg5NjUsMS4wMDA2OCwuODI4NywuOTY3NzcsMSwxLjIwMDg4LC44OTkwMywxLDEsLjc1MTU1LDEuMDMwNzcsMS4wMzA3NywxLjAzMDc3LDEuMDMwNzcsMS4xMzE5NiwxLjEzMTk2LDEuMTMxOTYsLjY3NDI4LC42NzQyOCwxLjE2MDM5LC43MzI5MSwxLjIwOTk2LDEuMjIxMzUsMS4wNjQ4MywuOTQ4NjgsLjk0ODY4LC45NTk5NiwxLjI0NjMzLDEsMS4wNzQ5NywuODc3OTYsLjk2OTI3LDEuMDE1MTgsLjk2OTI3LDEsMSwxLC43NzI5NSwxLDEsMS4xMDUzOSwxLjEwNTM5LDEuMTEzNTgsMS4wNjk2NywuODYyNzksLjk0NDM0LC44NjI3OSwuOTQ0MzQsLjg2MTgyLDEsMSwxLjA4MywxLC45MTU3OCwuODY1MDcsMS4xNzE0LDEuMTg0MTYsMS4xNDU4OSwuNjk4MjUsLjk3NjIyLDEuOTY5NywxLjI0ODIyLDEuMjQ4MjIsMS4xNzIzOCwxLjI0ODIyLDEuMjQ4MjIsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxLjQyNjAzLDEsLjk5ODYyLC45OTg2MiwxLC44NzAyNSwuODcwMjUsLjg3MDI1LC44NzAyNSwxLjE4MDgzLDEuNDI2MDMsMSwxLjQyNjAzLDEuNDI2MDMsLjk5ODYyLDEsMSwxLDEsMSwxLjI4ODYsMS4wNDMxNSwxLjE1Mjk2LDEuMzQxNjMsMSwxLDEsMS4xMDkzOCwxLjEwOTM4LDEsMSwxLDEuMDU0MjUsMS4wOTk3MSwxLjA5OTcxLDEuMDk5NzEsMSwxLDEsMSwxLDEsMSwxLDEsMSwxXTt0LlNlZ29ldWlSZWd1bGFyTWV0cmljcz17bGluZUhlaWdodDoxLjMzMDA4LGxpbmVHYXA6MH19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5Qb3N0U2NyaXB0RXZhbHVhdG9yPXQuUG9zdFNjcmlwdENvbXBpbGVyPXQuUERGRnVuY3Rpb25GYWN0b3J5PXZvaWQgMDt0LmlzUERGRnVuY3Rpb249ZnVuY3Rpb24gaXNQREZGdW5jdGlvbihlKXtsZXQgdDtpZihlIGluc3RhbmNlb2Ygci5EaWN0KXQ9ZTtlbHNle2lmKCEoZSBpbnN0YW5jZW9mIHMuQmFzZVN0cmVhbSkpcmV0dXJuITE7dD1lLmRpY3R9cmV0dXJuIHQuaGFzKCJGdW5jdGlvblR5cGUiKX07dmFyIHI9YSg0KSxuPWEoMiksaT1hKDU4KSxzPWEoNSksbz1hKDU5KTt0LlBERkZ1bmN0aW9uRmFjdG9yeT1jbGFzcyBQREZGdW5jdGlvbkZhY3Rvcnl7Y29uc3RydWN0b3Ioe3hyZWY6ZSxpc0V2YWxTdXBwb3J0ZWQ6dD0hMH0pe3RoaXMueHJlZj1lO3RoaXMuaXNFdmFsU3VwcG9ydGVkPSExIT09dH1jcmVhdGUoZSl7Y29uc3QgdD10aGlzLmdldENhY2hlZChlKTtpZih0KXJldHVybiB0O2NvbnN0IGE9UERGRnVuY3Rpb24ucGFyc2Uoe3hyZWY6dGhpcy54cmVmLGlzRXZhbFN1cHBvcnRlZDp0aGlzLmlzRXZhbFN1cHBvcnRlZCxmbjplIGluc3RhbmNlb2Ygci5SZWY/dGhpcy54cmVmLmZldGNoKGUpOmV9KTt0aGlzLl9jYWNoZShlLGEpO3JldHVybiBhfWNyZWF0ZUZyb21BcnJheShlKXtjb25zdCB0PXRoaXMuZ2V0Q2FjaGVkKGUpO2lmKHQpcmV0dXJuIHQ7Y29uc3QgYT1QREZGdW5jdGlvbi5wYXJzZUFycmF5KHt4cmVmOnRoaXMueHJlZixpc0V2YWxTdXBwb3J0ZWQ6dGhpcy5pc0V2YWxTdXBwb3J0ZWQsZm5PYmo6ZSBpbnN0YW5jZW9mIHIuUmVmP3RoaXMueHJlZi5mZXRjaChlKTplfSk7dGhpcy5fY2FjaGUoZSxhKTtyZXR1cm4gYX1nZXRDYWNoZWQoZSl7bGV0IHQ7ZSBpbnN0YW5jZW9mIHIuUmVmP3Q9ZTplIGluc3RhbmNlb2Ygci5EaWN0P3Q9ZS5vYmpJZDplIGluc3RhbmNlb2Ygcy5CYXNlU3RyZWFtJiYodD1lLmRpY3Q/Lm9iaklkKTtpZih0KXtjb25zdCBlPXRoaXMuX2xvY2FsRnVuY3Rpb25DYWNoZS5nZXRCeVJlZih0KTtpZihlKXJldHVybiBlfXJldHVybiBudWxsfV9jYWNoZShlLHQpe2lmKCF0KXRocm93IG5ldyBFcnJvcignUERGRnVuY3Rpb25GYWN0b3J5Ll9jYWNoZSAtIGV4cGVjdGVkICJwYXJzZWRGdW5jdGlvbiIgYXJndW1lbnQuJyk7bGV0IGE7ZSBpbnN0YW5jZW9mIHIuUmVmP2E9ZTplIGluc3RhbmNlb2Ygci5EaWN0P2E9ZS5vYmpJZDplIGluc3RhbmNlb2Ygcy5CYXNlU3RyZWFtJiYoYT1lLmRpY3Q/Lm9iaklkKTthJiZ0aGlzLl9sb2NhbEZ1bmN0aW9uQ2FjaGUuc2V0KG51bGwsYSx0KX1nZXQgX2xvY2FsRnVuY3Rpb25DYWNoZSgpe3JldHVybigwLG4uc2hhZG93KSh0aGlzLCJfbG9jYWxGdW5jdGlvbkNhY2hlIixuZXcgby5Mb2NhbEZ1bmN0aW9uQ2FjaGUpfX07ZnVuY3Rpb24gdG9OdW1iZXJBcnJheShlKXtpZighQXJyYXkuaXNBcnJheShlKSlyZXR1cm4gbnVsbDtjb25zdCB0PWUubGVuZ3RoO2ZvcihsZXQgYT0wO2E8dDthKyspaWYoIm51bWJlciIhPXR5cGVvZiBlW2FdKXtjb25zdCBhPW5ldyBBcnJheSh0KTtmb3IobGV0IHI9MDtyPHQ7cisrKWFbcl09K2Vbcl07cmV0dXJuIGF9cmV0dXJuIGV9Y2xhc3MgUERGRnVuY3Rpb257c3RhdGljIGdldFNhbXBsZUFycmF5KGUsdCxhLHIpe2xldCBuLGkscz0xO2ZvcihuPTAsaT1lLmxlbmd0aDtuPGk7bisrKXMqPWVbbl07cyo9dDtjb25zdCBvPW5ldyBBcnJheShzKTtsZXQgYz0wLGw9MDtjb25zdCBoPTEvKDIqKmEtMSksdT1yLmdldEJ5dGVzKChzKmErNykvOCk7bGV0IGQ9MDtmb3Iobj0wO248cztuKyspe2Zvcig7YzxhOyl7bDw8PTg7bHw9dVtkKytdO2MrPTh9Yy09YTtvW25dPShsPj5jKSpoO2wmPSgxPDxjKS0xfXJldHVybiBvfXN0YXRpYyBwYXJzZSh7eHJlZjplLGlzRXZhbFN1cHBvcnRlZDp0LGZuOmF9KXtjb25zdCByPWEuZGljdHx8YTtzd2l0Y2goci5nZXQoIkZ1bmN0aW9uVHlwZSIpKXtjYXNlIDA6cmV0dXJuIHRoaXMuY29uc3RydWN0U2FtcGxlZCh7eHJlZjplLGlzRXZhbFN1cHBvcnRlZDp0LGZuOmEsZGljdDpyfSk7Y2FzZSAxOmJyZWFrO2Nhc2UgMjpyZXR1cm4gdGhpcy5jb25zdHJ1Y3RJbnRlcnBvbGF0ZWQoe3hyZWY6ZSxpc0V2YWxTdXBwb3J0ZWQ6dCxkaWN0OnJ9KTtjYXNlIDM6cmV0dXJuIHRoaXMuY29uc3RydWN0U3RpY2hlZCh7eHJlZjplLGlzRXZhbFN1cHBvcnRlZDp0LGRpY3Q6cn0pO2Nhc2UgNDpyZXR1cm4gdGhpcy5jb25zdHJ1Y3RQb3N0U2NyaXB0KHt4cmVmOmUsaXNFdmFsU3VwcG9ydGVkOnQsZm46YSxkaWN0OnJ9KX10aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiVW5rbm93biB0eXBlIG9mIGZ1bmN0aW9uIil9c3RhdGljIHBhcnNlQXJyYXkoe3hyZWY6ZSxpc0V2YWxTdXBwb3J0ZWQ6dCxmbk9iajphfSl7aWYoIUFycmF5LmlzQXJyYXkoYSkpcmV0dXJuIHRoaXMucGFyc2Uoe3hyZWY6ZSxpc0V2YWxTdXBwb3J0ZWQ6dCxmbjphfSk7Y29uc3Qgcj1bXTtmb3IoY29uc3QgbiBvZiBhKXIucHVzaCh0aGlzLnBhcnNlKHt4cmVmOmUsaXNFdmFsU3VwcG9ydGVkOnQsZm46ZS5mZXRjaElmUmVmKG4pfSkpO3JldHVybiBmdW5jdGlvbihlLHQsYSxuKXtmb3IobGV0IGk9MCxzPXIubGVuZ3RoO2k8cztpKyspcltpXShlLHQsYSxuK2kpfX1zdGF0aWMgY29uc3RydWN0U2FtcGxlZCh7eHJlZjplLGlzRXZhbFN1cHBvcnRlZDp0LGZuOmEsZGljdDpyfSl7ZnVuY3Rpb24gdG9NdWx0aUFycmF5KGUpe2NvbnN0IHQ9ZS5sZW5ndGgsYT1bXTtsZXQgcj0wO2ZvcihsZXQgbj0wO248dDtuKz0yKWFbcisrXT1bZVtuXSxlW24rMV1dO3JldHVybiBhfWZ1bmN0aW9uIGludGVycG9sYXRlKGUsdCxhLHIsbil7cmV0dXJuIHIrKG4tcikvKGEtdCkqKGUtdCl9bGV0IGk9dG9OdW1iZXJBcnJheShyLmdldEFycmF5KCJEb21haW4iKSkscz10b051bWJlckFycmF5KHIuZ2V0QXJyYXkoIlJhbmdlIikpO2lmKCFpfHwhcyl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiTm8gZG9tYWluIG9yIHJhbmdlIik7Y29uc3Qgbz1pLmxlbmd0aC8yLGM9cy5sZW5ndGgvMjtpPXRvTXVsdGlBcnJheShpKTtzPXRvTXVsdGlBcnJheShzKTtjb25zdCBsPXRvTnVtYmVyQXJyYXkoci5nZXRBcnJheSgiU2l6ZSIpKSxoPXIuZ2V0KCJCaXRzUGVyU2FtcGxlIiksdT1yLmdldCgiT3JkZXIiKXx8MTsxIT09dSYmKDAsbi5pbmZvKSgiTm8gc3VwcG9ydCBmb3IgY3ViaWMgc3BsaW5lIGludGVycG9sYXRpb246ICIrdSk7bGV0IGQ9dG9OdW1iZXJBcnJheShyLmdldEFycmF5KCJFbmNvZGUiKSk7aWYoZClkPXRvTXVsdGlBcnJheShkKTtlbHNle2Q9W107Zm9yKGxldCBlPTA7ZTxvOysrZSlkLnB1c2goWzAsbFtlXS0xXSl9bGV0IGY9dG9OdW1iZXJBcnJheShyLmdldEFycmF5KCJEZWNvZGUiKSk7Zj1mP3RvTXVsdGlBcnJheShmKTpzO2NvbnN0IGc9dGhpcy5nZXRTYW1wbGVBcnJheShsLGMsaCxhKTtyZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0U2FtcGxlZEZuKGUsdCxhLHIpe2NvbnN0IG49MTw8byxoPW5ldyBGbG9hdDY0QXJyYXkobiksdT1uZXcgVWludDMyQXJyYXkobik7bGV0IHAsbTtmb3IobT0wO208bjttKyspaFttXT0xO2xldCBiPWMseT0xO2ZvcihwPTA7cDxvOysrcCl7Y29uc3QgYT1pW3BdWzBdLHI9aVtwXVsxXTtsZXQgcz1pbnRlcnBvbGF0ZShNYXRoLm1pbihNYXRoLm1heChlW3QrcF0sYSksciksYSxyLGRbcF1bMF0sZFtwXVsxXSk7Y29uc3Qgbz1sW3BdO3M9TWF0aC5taW4oTWF0aC5tYXgocywwKSxvLTEpO2NvbnN0IGM9czxvLTE/TWF0aC5mbG9vcihzKTpzLTEsZj1jKzEtcyxnPXMtYyx3PWMqYixTPXcrYjtmb3IobT0wO208bjttKyspaWYobSZ5KXtoW21dKj1nO3VbbV0rPVN9ZWxzZXtoW21dKj1mO3VbbV0rPXd9Yio9bzt5PDw9MX1mb3IobT0wO208YzsrK20pe2xldCBlPTA7Zm9yKHA9MDtwPG47cCsrKWUrPWdbdVtwXSttXSpoW3BdO2U9aW50ZXJwb2xhdGUoZSwwLDEsZlttXVswXSxmW21dWzFdKTthW3IrbV09TWF0aC5taW4oTWF0aC5tYXgoZSxzW21dWzBdKSxzW21dWzFdKX19fXN0YXRpYyBjb25zdHJ1Y3RJbnRlcnBvbGF0ZWQoe3hyZWY6ZSxpc0V2YWxTdXBwb3J0ZWQ6dCxkaWN0OmF9KXtjb25zdCByPXRvTnVtYmVyQXJyYXkoYS5nZXRBcnJheSgiQzAiKSl8fFswXSxuPXRvTnVtYmVyQXJyYXkoYS5nZXRBcnJheSgiQzEiKSl8fFsxXSxpPWEuZ2V0KCJOIikscz1bXTtmb3IobGV0IGU9MCx0PXIubGVuZ3RoO2U8dDsrK2Upcy5wdXNoKG5bZV0tcltlXSk7Y29uc3Qgbz1zLmxlbmd0aDtyZXR1cm4gZnVuY3Rpb24gY29uc3RydWN0SW50ZXJwb2xhdGVkRm4oZSx0LGEsbil7Y29uc3QgYz0xPT09aT9lW3RdOmVbdF0qKmk7Zm9yKGxldCBlPTA7ZTxvOysrZSlhW24rZV09cltlXStjKnNbZV19fXN0YXRpYyBjb25zdHJ1Y3RTdGljaGVkKHt4cmVmOmUsaXNFdmFsU3VwcG9ydGVkOnQsZGljdDphfSl7Y29uc3Qgcj10b051bWJlckFycmF5KGEuZ2V0QXJyYXkoIkRvbWFpbiIpKTtpZighcil0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiTm8gZG9tYWluIik7aWYoMSE9PXIubGVuZ3RoLzIpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIkJhZCBkb21haW4gZm9yIHN0aWNoZWQgZnVuY3Rpb24iKTtjb25zdCBpPVtdO2Zvcihjb25zdCByIG9mIGEuZ2V0KCJGdW5jdGlvbnMiKSlpLnB1c2godGhpcy5wYXJzZSh7eHJlZjplLGlzRXZhbFN1cHBvcnRlZDp0LGZuOmUuZmV0Y2hJZlJlZihyKX0pKTtjb25zdCBzPXRvTnVtYmVyQXJyYXkoYS5nZXRBcnJheSgiQm91bmRzIikpLG89dG9OdW1iZXJBcnJheShhLmdldEFycmF5KCJFbmNvZGUiKSksYz1uZXcgRmxvYXQzMkFycmF5KDEpO3JldHVybiBmdW5jdGlvbiBjb25zdHJ1Y3RTdGljaGVkRm4oZSx0LGEsbil7Y29uc3QgbD1mdW5jdGlvbiBjb25zdHJ1Y3RTdGljaGVkRnJvbUlSQ2xpcChlLHQsYSl7ZT5hP2U9YTplPHQmJihlPXQpO3JldHVybiBlfShlW3RdLHJbMF0sclsxXSksaD1zLmxlbmd0aDtsZXQgdTtmb3IodT0wO3U8aCYmIShsPHNbdV0pOysrdSk7bGV0IGQ9clswXTt1PjAmJihkPXNbdS0xXSk7bGV0IGY9clsxXTt1PHMubGVuZ3RoJiYoZj1zW3VdKTtjb25zdCBnPW9bMip1XSxwPW9bMip1KzFdO2NbMF09ZD09PWY/ZzpnKyhsLWQpKihwLWcpLyhmLWQpO2lbdV0oYywwLGEsbil9fXN0YXRpYyBjb25zdHJ1Y3RQb3N0U2NyaXB0KHt4cmVmOmUsaXNFdmFsU3VwcG9ydGVkOnQsZm46YSxkaWN0OnJ9KXtjb25zdCBzPXRvTnVtYmVyQXJyYXkoci5nZXRBcnJheSgiRG9tYWluIikpLG89dG9OdW1iZXJBcnJheShyLmdldEFycmF5KCJSYW5nZSIpKTtpZighcyl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiTm8gZG9tYWluLiIpO2lmKCFvKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJObyByYW5nZS4iKTtjb25zdCBjPW5ldyBpLlBvc3RTY3JpcHRMZXhlcihhKSxsPW5ldyBpLlBvc3RTY3JpcHRQYXJzZXIoYykucGFyc2UoKTtpZih0JiZuLkZlYXR1cmVUZXN0LmlzRXZhbFN1cHBvcnRlZCl7Y29uc3QgZT0obmV3IFBvc3RTY3JpcHRDb21waWxlcikuY29tcGlsZShsLHMsbyk7aWYoZSlyZXR1cm4gbmV3IEZ1bmN0aW9uKCJzcmMiLCJzcmNPZmZzZXQiLCJkZXN0IiwiZGVzdE9mZnNldCIsZSl9KDAsbi5pbmZvKSgiVW5hYmxlIHRvIGNvbXBpbGUgUFMgZnVuY3Rpb24iKTtjb25zdCBoPW8ubGVuZ3RoPj4xLHU9cy5sZW5ndGg+PjEsZD1uZXcgUG9zdFNjcmlwdEV2YWx1YXRvcihsKSxmPU9iamVjdC5jcmVhdGUobnVsbCk7bGV0IGc9ODE5Mjtjb25zdCBwPW5ldyBGbG9hdDMyQXJyYXkodSk7cmV0dXJuIGZ1bmN0aW9uIGNvbnN0cnVjdFBvc3RTY3JpcHRGbihlLHQsYSxyKXtsZXQgbixpLHM9IiI7Y29uc3QgYz1wO2ZvcihuPTA7bjx1O24rKyl7aT1lW3Qrbl07Y1tuXT1pO3MrPWkrIl8ifWNvbnN0IGw9ZltzXTtpZih2b2lkIDAhPT1sKXthLnNldChsLHIpO3JldHVybn1jb25zdCBtPW5ldyBGbG9hdDMyQXJyYXkoaCksYj1kLmV4ZWN1dGUoYykseT1iLmxlbmd0aC1oO2ZvcihuPTA7bjxoO24rKyl7aT1iW3krbl07bGV0IGU9b1syKm5dO2lmKGk8ZSlpPWU7ZWxzZXtlPW9bMipuKzFdO2k+ZSYmKGk9ZSl9bVtuXT1pfWlmKGc+MCl7Zy0tO2Zbc109bX1hLnNldChtLHIpfX19Y2xhc3MgUG9zdFNjcmlwdFN0YWNre3N0YXRpYyBNQVhfU1RBQ0tfU0laRT0xMDA7Y29uc3RydWN0b3IoZSl7dGhpcy5zdGFjaz1lP0FycmF5LmZyb20oZSk6W119cHVzaChlKXtpZih0aGlzLnN0YWNrLmxlbmd0aD49UG9zdFNjcmlwdFN0YWNrLk1BWF9TVEFDS19TSVpFKXRocm93IG5ldyBFcnJvcigiUG9zdFNjcmlwdCBmdW5jdGlvbiBzdGFjayBvdmVyZmxvdy4iKTt0aGlzLnN0YWNrLnB1c2goZSl9cG9wKCl7aWYodGhpcy5zdGFjay5sZW5ndGg8PTApdGhyb3cgbmV3IEVycm9yKCJQb3N0U2NyaXB0IGZ1bmN0aW9uIHN0YWNrIHVuZGVyZmxvdy4iKTtyZXR1cm4gdGhpcy5zdGFjay5wb3AoKX1jb3B5KGUpe2lmKHRoaXMuc3RhY2subGVuZ3RoK2U+PVBvc3RTY3JpcHRTdGFjay5NQVhfU1RBQ0tfU0laRSl0aHJvdyBuZXcgRXJyb3IoIlBvc3RTY3JpcHQgZnVuY3Rpb24gc3RhY2sgb3ZlcmZsb3cuIik7Y29uc3QgdD10aGlzLnN0YWNrO2ZvcihsZXQgYT10Lmxlbmd0aC1lLHI9ZS0xO3I+PTA7ci0tLGErKyl0LnB1c2godFthXSl9aW5kZXgoZSl7dGhpcy5wdXNoKHRoaXMuc3RhY2tbdGhpcy5zdGFjay5sZW5ndGgtZS0xXSl9cm9sbChlLHQpe2NvbnN0IGE9dGhpcy5zdGFjayxyPWEubGVuZ3RoLWUsbj1hLmxlbmd0aC0xLGk9cisodC1NYXRoLmZsb29yKHQvZSkqZSk7Zm9yKGxldCBlPXIsdD1uO2U8dDtlKyssdC0tKXtjb25zdCByPWFbZV07YVtlXT1hW3RdO2FbdF09cn1mb3IobGV0IGU9cix0PWktMTtlPHQ7ZSsrLHQtLSl7Y29uc3Qgcj1hW2VdO2FbZV09YVt0XTthW3RdPXJ9Zm9yKGxldCBlPWksdD1uO2U8dDtlKyssdC0tKXtjb25zdCByPWFbZV07YVtlXT1hW3RdO2FbdF09cn19fWNsYXNzIFBvc3RTY3JpcHRFdmFsdWF0b3J7Y29uc3RydWN0b3IoZSl7dGhpcy5vcGVyYXRvcnM9ZX1leGVjdXRlKGUpe2NvbnN0IHQ9bmV3IFBvc3RTY3JpcHRTdGFjayhlKTtsZXQgYT0wO2NvbnN0IHI9dGhpcy5vcGVyYXRvcnMsaT1yLmxlbmd0aDtsZXQgcyxvLGM7Zm9yKDthPGk7KXtzPXJbYSsrXTtpZigibnVtYmVyIiE9dHlwZW9mIHMpc3dpdGNoKHMpe2Nhc2UianoiOmM9dC5wb3AoKTtvPXQucG9wKCk7b3x8KGE9Yyk7YnJlYWs7Y2FzZSJqIjpvPXQucG9wKCk7YT1vO2JyZWFrO2Nhc2UiYWJzIjpvPXQucG9wKCk7dC5wdXNoKE1hdGguYWJzKG8pKTticmVhaztjYXNlImFkZCI6Yz10LnBvcCgpO289dC5wb3AoKTt0LnB1c2gobytjKTticmVhaztjYXNlImFuZCI6Yz10LnBvcCgpO289dC5wb3AoKTsiYm9vbGVhbiI9PXR5cGVvZiBvJiYiYm9vbGVhbiI9PXR5cGVvZiBjP3QucHVzaChvJiZjKTp0LnB1c2gobyZjKTticmVhaztjYXNlImF0YW4iOmM9dC5wb3AoKTtvPXQucG9wKCk7bz1NYXRoLmF0YW4yKG8sYykvTWF0aC5QSSoxODA7bzwwJiYobys9MzYwKTt0LnB1c2gobyk7YnJlYWs7Y2FzZSJiaXRzaGlmdCI6Yz10LnBvcCgpO289dC5wb3AoKTtvPjA/dC5wdXNoKG88PGMpOnQucHVzaChvPj5jKTticmVhaztjYXNlImNlaWxpbmciOm89dC5wb3AoKTt0LnB1c2goTWF0aC5jZWlsKG8pKTticmVhaztjYXNlImNvcHkiOm89dC5wb3AoKTt0LmNvcHkobyk7YnJlYWs7Y2FzZSJjb3MiOm89dC5wb3AoKTt0LnB1c2goTWF0aC5jb3MobyUzNjAvMTgwKk1hdGguUEkpKTticmVhaztjYXNlImN2aSI6bz0wfHQucG9wKCk7dC5wdXNoKG8pO2JyZWFrO2Nhc2UiY3ZyIjpicmVhaztjYXNlImRpdiI6Yz10LnBvcCgpO289dC5wb3AoKTt0LnB1c2goby9jKTticmVhaztjYXNlImR1cCI6dC5jb3B5KDEpO2JyZWFrO2Nhc2UiZXEiOmM9dC5wb3AoKTtvPXQucG9wKCk7dC5wdXNoKG89PT1jKTticmVhaztjYXNlImV4Y2giOnQucm9sbCgyLDEpO2JyZWFrO2Nhc2UiZXhwIjpjPXQucG9wKCk7bz10LnBvcCgpO3QucHVzaChvKipjKTticmVhaztjYXNlImZhbHNlIjp0LnB1c2goITEpO2JyZWFrO2Nhc2UiZmxvb3IiOm89dC5wb3AoKTt0LnB1c2goTWF0aC5mbG9vcihvKSk7YnJlYWs7Y2FzZSJnZSI6Yz10LnBvcCgpO289dC5wb3AoKTt0LnB1c2gobz49Yyk7YnJlYWs7Y2FzZSJndCI6Yz10LnBvcCgpO289dC5wb3AoKTt0LnB1c2gobz5jKTticmVhaztjYXNlImlkaXYiOmM9dC5wb3AoKTtvPXQucG9wKCk7dC5wdXNoKG8vY3wwKTticmVhaztjYXNlImluZGV4IjpvPXQucG9wKCk7dC5pbmRleChvKTticmVhaztjYXNlImxlIjpjPXQucG9wKCk7bz10LnBvcCgpO3QucHVzaChvPD1jKTticmVhaztjYXNlImxuIjpvPXQucG9wKCk7dC5wdXNoKE1hdGgubG9nKG8pKTticmVhaztjYXNlImxvZyI6bz10LnBvcCgpO3QucHVzaChNYXRoLmxvZzEwKG8pKTticmVhaztjYXNlImx0IjpjPXQucG9wKCk7bz10LnBvcCgpO3QucHVzaChvPGMpO2JyZWFrO2Nhc2UibW9kIjpjPXQucG9wKCk7bz10LnBvcCgpO3QucHVzaChvJWMpO2JyZWFrO2Nhc2UibXVsIjpjPXQucG9wKCk7bz10LnBvcCgpO3QucHVzaChvKmMpO2JyZWFrO2Nhc2UibmUiOmM9dC5wb3AoKTtvPXQucG9wKCk7dC5wdXNoKG8hPT1jKTticmVhaztjYXNlIm5lZyI6bz10LnBvcCgpO3QucHVzaCgtbyk7YnJlYWs7Y2FzZSJub3QiOm89dC5wb3AoKTsiYm9vbGVhbiI9PXR5cGVvZiBvP3QucHVzaCghbyk6dC5wdXNoKH5vKTticmVhaztjYXNlIm9yIjpjPXQucG9wKCk7bz10LnBvcCgpOyJib29sZWFuIj09dHlwZW9mIG8mJiJib29sZWFuIj09dHlwZW9mIGM/dC5wdXNoKG98fGMpOnQucHVzaChvfGMpO2JyZWFrO2Nhc2UicG9wIjp0LnBvcCgpO2JyZWFrO2Nhc2Uicm9sbCI6Yz10LnBvcCgpO289dC5wb3AoKTt0LnJvbGwobyxjKTticmVhaztjYXNlInJvdW5kIjpvPXQucG9wKCk7dC5wdXNoKE1hdGgucm91bmQobykpO2JyZWFrO2Nhc2Uic2luIjpvPXQucG9wKCk7dC5wdXNoKE1hdGguc2luKG8lMzYwLzE4MCpNYXRoLlBJKSk7YnJlYWs7Y2FzZSJzcXJ0IjpvPXQucG9wKCk7dC5wdXNoKE1hdGguc3FydChvKSk7YnJlYWs7Y2FzZSJzdWIiOmM9dC5wb3AoKTtvPXQucG9wKCk7dC5wdXNoKG8tYyk7YnJlYWs7Y2FzZSJ0cnVlIjp0LnB1c2goITApO2JyZWFrO2Nhc2UidHJ1bmNhdGUiOm89dC5wb3AoKTtvPW88MD9NYXRoLmNlaWwobyk6TWF0aC5mbG9vcihvKTt0LnB1c2gobyk7YnJlYWs7Y2FzZSJ4b3IiOmM9dC5wb3AoKTtvPXQucG9wKCk7ImJvb2xlYW4iPT10eXBlb2YgbyYmImJvb2xlYW4iPT10eXBlb2YgYz90LnB1c2gobyE9PWMpOnQucHVzaChvXmMpO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoYFVua25vd24gb3BlcmF0b3IgJHtzfWApfWVsc2UgdC5wdXNoKHMpfXJldHVybiB0LnN0YWNrfX10LlBvc3RTY3JpcHRFdmFsdWF0b3I9UG9zdFNjcmlwdEV2YWx1YXRvcjtjbGFzcyBBc3ROb2Rle2NvbnN0cnVjdG9yKGUpe3RoaXMudHlwZT1lfXZpc2l0KGUpeygwLG4udW5yZWFjaGFibGUpKCJhYnN0cmFjdCBtZXRob2QiKX19Y2xhc3MgQXN0QXJndW1lbnQgZXh0ZW5kcyBBc3ROb2Rle2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcigiYXJncyIpO3RoaXMuaW5kZXg9ZTt0aGlzLm1pbj10O3RoaXMubWF4PWF9dmlzaXQoZSl7ZS52aXNpdEFyZ3VtZW50KHRoaXMpfX1jbGFzcyBBc3RMaXRlcmFsIGV4dGVuZHMgQXN0Tm9kZXtjb25zdHJ1Y3RvcihlKXtzdXBlcigibGl0ZXJhbCIpO3RoaXMubnVtYmVyPWU7dGhpcy5taW49ZTt0aGlzLm1heD1lfXZpc2l0KGUpe2UudmlzaXRMaXRlcmFsKHRoaXMpfX1jbGFzcyBBc3RCaW5hcnlPcGVyYXRpb24gZXh0ZW5kcyBBc3ROb2Rle2NvbnN0cnVjdG9yKGUsdCxhLHIsbil7c3VwZXIoImJpbmFyeSIpO3RoaXMub3A9ZTt0aGlzLmFyZzE9dDt0aGlzLmFyZzI9YTt0aGlzLm1pbj1yO3RoaXMubWF4PW59dmlzaXQoZSl7ZS52aXNpdEJpbmFyeU9wZXJhdGlvbih0aGlzKX19Y2xhc3MgQXN0TWluIGV4dGVuZHMgQXN0Tm9kZXtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKCJtYXgiKTt0aGlzLmFyZz1lO3RoaXMubWluPWUubWluO3RoaXMubWF4PXR9dmlzaXQoZSl7ZS52aXNpdE1pbih0aGlzKX19Y2xhc3MgQXN0VmFyaWFibGUgZXh0ZW5kcyBBc3ROb2Rle2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcigidmFyIik7dGhpcy5pbmRleD1lO3RoaXMubWluPXQ7dGhpcy5tYXg9YX12aXNpdChlKXtlLnZpc2l0VmFyaWFibGUodGhpcyl9fWNsYXNzIEFzdFZhcmlhYmxlRGVmaW5pdGlvbiBleHRlbmRzIEFzdE5vZGV7Y29uc3RydWN0b3IoZSx0KXtzdXBlcigiZGVmaW5pdGlvbiIpO3RoaXMudmFyaWFibGU9ZTt0aGlzLmFyZz10fXZpc2l0KGUpe2UudmlzaXRWYXJpYWJsZURlZmluaXRpb24odGhpcyl9fWNsYXNzIEV4cHJlc3Npb25CdWlsZGVyVmlzaXRvcntjb25zdHJ1Y3Rvcigpe3RoaXMucGFydHM9W119dmlzaXRBcmd1bWVudChlKXt0aGlzLnBhcnRzLnB1c2goIk1hdGgubWF4KCIsZS5taW4sIiwgTWF0aC5taW4oIixlLm1heCwiLCBzcmNbc3JjT2Zmc2V0ICsgIixlLmluZGV4LCJdKSkiKX12aXNpdFZhcmlhYmxlKGUpe3RoaXMucGFydHMucHVzaCgidiIsZS5pbmRleCl9dmlzaXRMaXRlcmFsKGUpe3RoaXMucGFydHMucHVzaChlLm51bWJlcil9dmlzaXRCaW5hcnlPcGVyYXRpb24oZSl7dGhpcy5wYXJ0cy5wdXNoKCIoIik7ZS5hcmcxLnZpc2l0KHRoaXMpO3RoaXMucGFydHMucHVzaCgiICIsZS5vcCwiICIpO2UuYXJnMi52aXNpdCh0aGlzKTt0aGlzLnBhcnRzLnB1c2goIikiKX12aXNpdFZhcmlhYmxlRGVmaW5pdGlvbihlKXt0aGlzLnBhcnRzLnB1c2goInZhciAiKTtlLnZhcmlhYmxlLnZpc2l0KHRoaXMpO3RoaXMucGFydHMucHVzaCgiID0gIik7ZS5hcmcudmlzaXQodGhpcyk7dGhpcy5wYXJ0cy5wdXNoKCI7Iil9dmlzaXRNaW4oZSl7dGhpcy5wYXJ0cy5wdXNoKCJNYXRoLm1pbigiKTtlLmFyZy52aXNpdCh0aGlzKTt0aGlzLnBhcnRzLnB1c2goIiwgIixlLm1heCwiKSIpfXRvU3RyaW5nKCl7cmV0dXJuIHRoaXMucGFydHMuam9pbigiIil9fWZ1bmN0aW9uIGJ1aWxkQWRkT3BlcmF0aW9uKGUsdCl7cmV0dXJuImxpdGVyYWwiPT09dC50eXBlJiYwPT09dC5udW1iZXI/ZToibGl0ZXJhbCI9PT1lLnR5cGUmJjA9PT1lLm51bWJlcj90OiJsaXRlcmFsIj09PXQudHlwZSYmImxpdGVyYWwiPT09ZS50eXBlP25ldyBBc3RMaXRlcmFsKGUubnVtYmVyK3QubnVtYmVyKTpuZXcgQXN0QmluYXJ5T3BlcmF0aW9uKCIrIixlLHQsZS5taW4rdC5taW4sZS5tYXgrdC5tYXgpfWZ1bmN0aW9uIGJ1aWxkTXVsT3BlcmF0aW9uKGUsdCl7aWYoImxpdGVyYWwiPT09dC50eXBlKXtpZigwPT09dC5udW1iZXIpcmV0dXJuIG5ldyBBc3RMaXRlcmFsKDApO2lmKDE9PT10Lm51bWJlcilyZXR1cm4gZTtpZigibGl0ZXJhbCI9PT1lLnR5cGUpcmV0dXJuIG5ldyBBc3RMaXRlcmFsKGUubnVtYmVyKnQubnVtYmVyKX1pZigibGl0ZXJhbCI9PT1lLnR5cGUpe2lmKDA9PT1lLm51bWJlcilyZXR1cm4gbmV3IEFzdExpdGVyYWwoMCk7aWYoMT09PWUubnVtYmVyKXJldHVybiB0fWNvbnN0IGE9TWF0aC5taW4oZS5taW4qdC5taW4sZS5taW4qdC5tYXgsZS5tYXgqdC5taW4sZS5tYXgqdC5tYXgpLHI9TWF0aC5tYXgoZS5taW4qdC5taW4sZS5taW4qdC5tYXgsZS5tYXgqdC5taW4sZS5tYXgqdC5tYXgpO3JldHVybiBuZXcgQXN0QmluYXJ5T3BlcmF0aW9uKCIqIixlLHQsYSxyKX1mdW5jdGlvbiBidWlsZFN1Yk9wZXJhdGlvbihlLHQpe2lmKCJsaXRlcmFsIj09PXQudHlwZSl7aWYoMD09PXQubnVtYmVyKXJldHVybiBlO2lmKCJsaXRlcmFsIj09PWUudHlwZSlyZXR1cm4gbmV3IEFzdExpdGVyYWwoZS5udW1iZXItdC5udW1iZXIpfXJldHVybiJiaW5hcnkiPT09dC50eXBlJiYiLSI9PT10Lm9wJiYibGl0ZXJhbCI9PT1lLnR5cGUmJjE9PT1lLm51bWJlciYmImxpdGVyYWwiPT09dC5hcmcxLnR5cGUmJjE9PT10LmFyZzEubnVtYmVyP3QuYXJnMjpuZXcgQXN0QmluYXJ5T3BlcmF0aW9uKCItIixlLHQsZS5taW4tdC5tYXgsZS5tYXgtdC5taW4pfWZ1bmN0aW9uIGJ1aWxkTWluT3BlcmF0aW9uKGUsdCl7cmV0dXJuIGUubWluPj10P25ldyBBc3RMaXRlcmFsKHQpOmUubWF4PD10P2U6bmV3IEFzdE1pbihlLHQpfWNsYXNzIFBvc3RTY3JpcHRDb21waWxlcntjb21waWxlKGUsdCxhKXtjb25zdCByPVtdLG49W10saT10Lmxlbmd0aD4+MSxzPWEubGVuZ3RoPj4xO2xldCBvLGMsbCxoLHUsZCxmLGcscD0wO2ZvcihsZXQgZT0wO2U8aTtlKyspci5wdXNoKG5ldyBBc3RBcmd1bWVudChlLHRbMiplXSx0WzIqZSsxXSkpO2ZvcihsZXQgdD0wLGE9ZS5sZW5ndGg7dDxhO3QrKyl7Zz1lW3RdO2lmKCJudW1iZXIiIT10eXBlb2YgZylzd2l0Y2goZyl7Y2FzZSJhZGQiOmlmKHIubGVuZ3RoPDIpcmV0dXJuIG51bGw7aD1yLnBvcCgpO2w9ci5wb3AoKTtyLnB1c2goYnVpbGRBZGRPcGVyYXRpb24obCxoKSk7YnJlYWs7Y2FzZSJjdnIiOmlmKHIubGVuZ3RoPDEpcmV0dXJuIG51bGw7YnJlYWs7Y2FzZSJtdWwiOmlmKHIubGVuZ3RoPDIpcmV0dXJuIG51bGw7aD1yLnBvcCgpO2w9ci5wb3AoKTtyLnB1c2goYnVpbGRNdWxPcGVyYXRpb24obCxoKSk7YnJlYWs7Y2FzZSJzdWIiOmlmKHIubGVuZ3RoPDIpcmV0dXJuIG51bGw7aD1yLnBvcCgpO2w9ci5wb3AoKTtyLnB1c2goYnVpbGRTdWJPcGVyYXRpb24obCxoKSk7YnJlYWs7Y2FzZSJleGNoIjppZihyLmxlbmd0aDwyKXJldHVybiBudWxsO3U9ci5wb3AoKTtkPXIucG9wKCk7ci5wdXNoKHUsZCk7YnJlYWs7Y2FzZSJwb3AiOmlmKHIubGVuZ3RoPDEpcmV0dXJuIG51bGw7ci5wb3AoKTticmVhaztjYXNlImluZGV4IjppZihyLmxlbmd0aDwxKXJldHVybiBudWxsO2w9ci5wb3AoKTtpZigibGl0ZXJhbCIhPT1sLnR5cGUpcmV0dXJuIG51bGw7bz1sLm51bWJlcjtpZihvPDB8fCFOdW1iZXIuaXNJbnRlZ2VyKG8pfHxyLmxlbmd0aDxvKXJldHVybiBudWxsO3U9cltyLmxlbmd0aC1vLTFdO2lmKCJsaXRlcmFsIj09PXUudHlwZXx8InZhciI9PT11LnR5cGUpe3IucHVzaCh1KTticmVha31mPW5ldyBBc3RWYXJpYWJsZShwKyssdS5taW4sdS5tYXgpO3Jbci5sZW5ndGgtby0xXT1mO3IucHVzaChmKTtuLnB1c2gobmV3IEFzdFZhcmlhYmxlRGVmaW5pdGlvbihmLHUpKTticmVhaztjYXNlImR1cCI6aWYoci5sZW5ndGg8MSlyZXR1cm4gbnVsbDtpZigibnVtYmVyIj09dHlwZW9mIGVbdCsxXSYmImd0Ij09PWVbdCsyXSYmZVt0KzNdPT09dCs3JiYianoiPT09ZVt0KzRdJiYicG9wIj09PWVbdCs1XSYmZVt0KzZdPT09ZVt0KzFdKXtsPXIucG9wKCk7ci5wdXNoKGJ1aWxkTWluT3BlcmF0aW9uKGwsZVt0KzFdKSk7dCs9NjticmVha311PXIuYXQoLTEpO2lmKCJsaXRlcmFsIj09PXUudHlwZXx8InZhciI9PT11LnR5cGUpe3IucHVzaCh1KTticmVha31mPW5ldyBBc3RWYXJpYWJsZShwKyssdS5taW4sdS5tYXgpO3Jbci5sZW5ndGgtMV09ZjtyLnB1c2goZik7bi5wdXNoKG5ldyBBc3RWYXJpYWJsZURlZmluaXRpb24oZix1KSk7YnJlYWs7Y2FzZSJyb2xsIjppZihyLmxlbmd0aDwyKXJldHVybiBudWxsO2g9ci5wb3AoKTtsPXIucG9wKCk7aWYoImxpdGVyYWwiIT09aC50eXBlfHwibGl0ZXJhbCIhPT1sLnR5cGUpcmV0dXJuIG51bGw7Yz1oLm51bWJlcjtvPWwubnVtYmVyO2lmKG88PTB8fCFOdW1iZXIuaXNJbnRlZ2VyKG8pfHwhTnVtYmVyLmlzSW50ZWdlcihjKXx8ci5sZW5ndGg8bylyZXR1cm4gbnVsbDtjPShjJW8rbyklbztpZigwPT09YylicmVhaztyLnB1c2goLi4uci5zcGxpY2Uoci5sZW5ndGgtbyxvLWMpKTticmVhaztkZWZhdWx0OnJldHVybiBudWxsfWVsc2Ugci5wdXNoKG5ldyBBc3RMaXRlcmFsKGcpKX1pZihyLmxlbmd0aCE9PXMpcmV0dXJuIG51bGw7Y29uc3QgbT1bXTtmb3IoY29uc3QgZSBvZiBuKXtjb25zdCB0PW5ldyBFeHByZXNzaW9uQnVpbGRlclZpc2l0b3I7ZS52aXNpdCh0KTttLnB1c2godC50b1N0cmluZygpKX1mb3IobGV0IGU9MCx0PXIubGVuZ3RoO2U8dDtlKyspe2NvbnN0IHQ9cltlXSxuPW5ldyBFeHByZXNzaW9uQnVpbGRlclZpc2l0b3I7dC52aXNpdChuKTtjb25zdCBpPWFbMiplXSxzPWFbMiplKzFdLG89W24udG9TdHJpbmcoKV07aWYoaT50Lm1pbil7by51bnNoaWZ0KCJNYXRoLm1heCgiLGksIiwgIik7by5wdXNoKCIpIil9aWYoczx0Lm1heCl7by51bnNoaWZ0KCJNYXRoLm1pbigiLHMsIiwgIik7by5wdXNoKCIpIil9by51bnNoaWZ0KCJkZXN0W2Rlc3RPZmZzZXQgKyAiLGUsIl0gPSAiKTtvLnB1c2goIjsiKTttLnB1c2goby5qb2luKCIiKSl9cmV0dXJuIG0uam9pbigiXG4iKX19dC5Qb3N0U2NyaXB0Q29tcGlsZXI9UG9zdFNjcmlwdENvbXBpbGVyfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuUG9zdFNjcmlwdFBhcnNlcj10LlBvc3RTY3JpcHRMZXhlcj12b2lkIDA7dmFyIHI9YSgyKSxuPWEoNCksaT1hKDMpO3QuUG9zdFNjcmlwdFBhcnNlcj1jbGFzcyBQb3N0U2NyaXB0UGFyc2Vye2NvbnN0cnVjdG9yKGUpe3RoaXMubGV4ZXI9ZTt0aGlzLm9wZXJhdG9ycz1bXTt0aGlzLnRva2VuPW51bGw7dGhpcy5wcmV2PW51bGx9bmV4dFRva2VuKCl7dGhpcy5wcmV2PXRoaXMudG9rZW47dGhpcy50b2tlbj10aGlzLmxleGVyLmdldFRva2VuKCl9YWNjZXB0KGUpe2lmKHRoaXMudG9rZW4udHlwZT09PWUpe3RoaXMubmV4dFRva2VuKCk7cmV0dXJuITB9cmV0dXJuITF9ZXhwZWN0KGUpe2lmKHRoaXMuYWNjZXB0KGUpKXJldHVybiEwO3Rocm93IG5ldyByLkZvcm1hdEVycm9yKGBVbmV4cGVjdGVkIHN5bWJvbDogZm91bmQgJHt0aGlzLnRva2VuLnR5cGV9IGV4cGVjdGVkICR7ZX0uYCl9cGFyc2UoKXt0aGlzLm5leHRUb2tlbigpO3RoaXMuZXhwZWN0KHMuTEJSQUNFKTt0aGlzLnBhcnNlQmxvY2soKTt0aGlzLmV4cGVjdChzLlJCUkFDRSk7cmV0dXJuIHRoaXMub3BlcmF0b3JzfXBhcnNlQmxvY2soKXtmb3IoOzspaWYodGhpcy5hY2NlcHQocy5OVU1CRVIpKXRoaXMub3BlcmF0b3JzLnB1c2godGhpcy5wcmV2LnZhbHVlKTtlbHNlIGlmKHRoaXMuYWNjZXB0KHMuT1BFUkFUT1IpKXRoaXMub3BlcmF0b3JzLnB1c2godGhpcy5wcmV2LnZhbHVlKTtlbHNle2lmKCF0aGlzLmFjY2VwdChzLkxCUkFDRSkpcmV0dXJuO3RoaXMucGFyc2VDb25kaXRpb24oKX19cGFyc2VDb25kaXRpb24oKXtjb25zdCBlPXRoaXMub3BlcmF0b3JzLmxlbmd0aDt0aGlzLm9wZXJhdG9ycy5wdXNoKG51bGwsbnVsbCk7dGhpcy5wYXJzZUJsb2NrKCk7dGhpcy5leHBlY3Qocy5SQlJBQ0UpO2lmKHRoaXMuYWNjZXB0KHMuSUYpKXt0aGlzLm9wZXJhdG9yc1tlXT10aGlzLm9wZXJhdG9ycy5sZW5ndGg7dGhpcy5vcGVyYXRvcnNbZSsxXT0ianoifWVsc2V7aWYoIXRoaXMuYWNjZXB0KHMuTEJSQUNFKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiUFMgRnVuY3Rpb246IGVycm9yIHBhcnNpbmcgY29uZGl0aW9uYWwuIik7e2NvbnN0IHQ9dGhpcy5vcGVyYXRvcnMubGVuZ3RoO3RoaXMub3BlcmF0b3JzLnB1c2gobnVsbCxudWxsKTtjb25zdCBhPXRoaXMub3BlcmF0b3JzLmxlbmd0aDt0aGlzLnBhcnNlQmxvY2soKTt0aGlzLmV4cGVjdChzLlJCUkFDRSk7dGhpcy5leHBlY3Qocy5JRkVMU0UpO3RoaXMub3BlcmF0b3JzW3RdPXRoaXMub3BlcmF0b3JzLmxlbmd0aDt0aGlzLm9wZXJhdG9yc1t0KzFdPSJqIjt0aGlzLm9wZXJhdG9yc1tlXT1hO3RoaXMub3BlcmF0b3JzW2UrMV09Imp6In19fX07Y29uc3Qgcz17TEJSQUNFOjAsUkJSQUNFOjEsTlVNQkVSOjIsT1BFUkFUT1I6MyxJRjo0LElGRUxTRTo1fTtjbGFzcyBQb3N0U2NyaXB0VG9rZW57c3RhdGljIGdldCBvcENhY2hlKCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsIm9wQ2FjaGUiLE9iamVjdC5jcmVhdGUobnVsbCkpfWNvbnN0cnVjdG9yKGUsdCl7dGhpcy50eXBlPWU7dGhpcy52YWx1ZT10fXN0YXRpYyBnZXRPcGVyYXRvcihlKXtyZXR1cm4gUG9zdFNjcmlwdFRva2VuLm9wQ2FjaGVbZV18fD1uZXcgUG9zdFNjcmlwdFRva2VuKHMuT1BFUkFUT1IsZSl9c3RhdGljIGdldCBMQlJBQ0UoKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiTEJSQUNFIixuZXcgUG9zdFNjcmlwdFRva2VuKHMuTEJSQUNFLCJ7IikpfXN0YXRpYyBnZXQgUkJSQUNFKCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsIlJCUkFDRSIsbmV3IFBvc3RTY3JpcHRUb2tlbihzLlJCUkFDRSwifSIpKX1zdGF0aWMgZ2V0IElGKCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsIklGIixuZXcgUG9zdFNjcmlwdFRva2VuKHMuSUYsIklGIikpfXN0YXRpYyBnZXQgSUZFTFNFKCl7cmV0dXJuKDAsci5zaGFkb3cpKHRoaXMsIklGRUxTRSIsbmV3IFBvc3RTY3JpcHRUb2tlbihzLklGRUxTRSwiSUZFTFNFIikpfX10LlBvc3RTY3JpcHRMZXhlcj1jbGFzcyBQb3N0U2NyaXB0TGV4ZXJ7Y29uc3RydWN0b3IoZSl7dGhpcy5zdHJlYW09ZTt0aGlzLm5leHRDaGFyKCk7dGhpcy5zdHJCdWY9W119bmV4dENoYXIoKXtyZXR1cm4gdGhpcy5jdXJyZW50Q2hhcj10aGlzLnN0cmVhbS5nZXRCeXRlKCl9Z2V0VG9rZW4oKXtsZXQgZT0hMSx0PXRoaXMuY3VycmVudENoYXI7Zm9yKDs7KXtpZih0PDApcmV0dXJuIG4uRU9GO2lmKGUpMTAhPT10JiYxMyE9PXR8fChlPSExKTtlbHNlIGlmKDM3PT09dCllPSEwO2Vsc2UgaWYoISgwLGkuaXNXaGl0ZVNwYWNlKSh0KSlicmVhazt0PXRoaXMubmV4dENoYXIoKX1zd2l0Y2goMHx0KXtjYXNlIDQ4OmNhc2UgNDk6Y2FzZSA1MDpjYXNlIDUxOmNhc2UgNTI6Y2FzZSA1MzpjYXNlIDU0OmNhc2UgNTU6Y2FzZSA1NjpjYXNlIDU3OmNhc2UgNDM6Y2FzZSA0NTpjYXNlIDQ2OnJldHVybiBuZXcgUG9zdFNjcmlwdFRva2VuKHMuTlVNQkVSLHRoaXMuZ2V0TnVtYmVyKCkpO2Nhc2UgMTIzOnRoaXMubmV4dENoYXIoKTtyZXR1cm4gUG9zdFNjcmlwdFRva2VuLkxCUkFDRTtjYXNlIDEyNTp0aGlzLm5leHRDaGFyKCk7cmV0dXJuIFBvc3RTY3JpcHRUb2tlbi5SQlJBQ0V9Y29uc3QgYT10aGlzLnN0ckJ1ZjthLmxlbmd0aD0wO2FbMF09U3RyaW5nLmZyb21DaGFyQ29kZSh0KTtmb3IoOyh0PXRoaXMubmV4dENoYXIoKSk+PTAmJih0Pj02NSYmdDw9OTB8fHQ+PTk3JiZ0PD0xMjIpOylhLnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZSh0KSk7Y29uc3Qgcj1hLmpvaW4oIiIpO3N3aXRjaChyLnRvTG93ZXJDYXNlKCkpe2Nhc2UiaWYiOnJldHVybiBQb3N0U2NyaXB0VG9rZW4uSUY7Y2FzZSJpZmVsc2UiOnJldHVybiBQb3N0U2NyaXB0VG9rZW4uSUZFTFNFO2RlZmF1bHQ6cmV0dXJuIFBvc3RTY3JpcHRUb2tlbi5nZXRPcGVyYXRvcihyKX19Z2V0TnVtYmVyKCl7bGV0IGU9dGhpcy5jdXJyZW50Q2hhcjtjb25zdCB0PXRoaXMuc3RyQnVmO3QubGVuZ3RoPTA7dFswXT1TdHJpbmcuZnJvbUNoYXJDb2RlKGUpO2Zvcig7KGU9dGhpcy5uZXh0Q2hhcigpKT49MCYmKGU+PTQ4JiZlPD01N3x8NDU9PT1lfHw0Nj09PWUpOyl0LnB1c2goU3RyaW5nLmZyb21DaGFyQ29kZShlKSk7Y29uc3QgYT1wYXJzZUZsb2F0KHQuam9pbigiIikpO2lmKGlzTmFOKGEpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBJbnZhbGlkIGZsb2F0aW5nIHBvaW50IG51bWJlcjogJHthfWApO3JldHVybiBhfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5SZWdpb25hbEltYWdlQ2FjaGU9dC5Mb2NhbFRpbGluZ1BhdHRlcm5DYWNoZT10LkxvY2FsSW1hZ2VDYWNoZT10LkxvY2FsR1N0YXRlQ2FjaGU9dC5Mb2NhbEZ1bmN0aW9uQ2FjaGU9dC5Mb2NhbENvbG9yU3BhY2VDYWNoZT10Lkdsb2JhbEltYWdlQ2FjaGU9dm9pZCAwO3ZhciByPWEoMiksbj1hKDQpO2NsYXNzIEJhc2VMb2NhbENhY2hle2NvbnN0cnVjdG9yKGUpe3RoaXMuY29uc3RydWN0b3I9PT1CYXNlTG9jYWxDYWNoZSYmKDAsci51bnJlYWNoYWJsZSkoIkNhbm5vdCBpbml0aWFsaXplIEJhc2VMb2NhbENhY2hlLiIpO3RoaXMuX29ubHlSZWZzPSEwPT09ZT8ub25seVJlZnM7aWYoIXRoaXMuX29ubHlSZWZzKXt0aGlzLl9uYW1lUmVmTWFwPW5ldyBNYXA7dGhpcy5faW1hZ2VNYXA9bmV3IE1hcH10aGlzLl9pbWFnZUNhY2hlPW5ldyBuLlJlZlNldENhY2hlfWdldEJ5TmFtZShlKXt0aGlzLl9vbmx5UmVmcyYmKDAsci51bnJlYWNoYWJsZSkoIlNob3VsZCBub3QgY2FsbCBgZ2V0QnlOYW1lYCBtZXRob2QuIik7Y29uc3QgdD10aGlzLl9uYW1lUmVmTWFwLmdldChlKTtyZXR1cm4gdD90aGlzLmdldEJ5UmVmKHQpOnRoaXMuX2ltYWdlTWFwLmdldChlKXx8bnVsbH1nZXRCeVJlZihlKXtyZXR1cm4gdGhpcy5faW1hZ2VDYWNoZS5nZXQoZSl8fG51bGx9c2V0KGUsdCxhKXsoMCxyLnVucmVhY2hhYmxlKSgiQWJzdHJhY3QgbWV0aG9kIGBzZXRgIGNhbGxlZC4iKX19dC5Mb2NhbEltYWdlQ2FjaGU9Y2xhc3MgTG9jYWxJbWFnZUNhY2hlIGV4dGVuZHMgQmFzZUxvY2FsQ2FjaGV7c2V0KGUsdD1udWxsLGEpe2lmKCJzdHJpbmciIT10eXBlb2YgZSl0aHJvdyBuZXcgRXJyb3IoJ0xvY2FsSW1hZ2VDYWNoZS5zZXQgLSBleHBlY3RlZCAibmFtZSIgYXJndW1lbnQuJyk7aWYodCl7aWYodGhpcy5faW1hZ2VDYWNoZS5oYXModCkpcmV0dXJuO3RoaXMuX25hbWVSZWZNYXAuc2V0KGUsdCk7dGhpcy5faW1hZ2VDYWNoZS5wdXQodCxhKX1lbHNlIHRoaXMuX2ltYWdlTWFwLmhhcyhlKXx8dGhpcy5faW1hZ2VNYXAuc2V0KGUsYSl9fTt0LkxvY2FsQ29sb3JTcGFjZUNhY2hlPWNsYXNzIExvY2FsQ29sb3JTcGFjZUNhY2hlIGV4dGVuZHMgQmFzZUxvY2FsQ2FjaGV7c2V0KGU9bnVsbCx0PW51bGwsYSl7aWYoInN0cmluZyIhPXR5cGVvZiBlJiYhdCl0aHJvdyBuZXcgRXJyb3IoJ0xvY2FsQ29sb3JTcGFjZUNhY2hlLnNldCAtIGV4cGVjdGVkICJuYW1lIiBhbmQvb3IgInJlZiIgYXJndW1lbnQuJyk7aWYodCl7aWYodGhpcy5faW1hZ2VDYWNoZS5oYXModCkpcmV0dXJuO251bGwhPT1lJiZ0aGlzLl9uYW1lUmVmTWFwLnNldChlLHQpO3RoaXMuX2ltYWdlQ2FjaGUucHV0KHQsYSl9ZWxzZSB0aGlzLl9pbWFnZU1hcC5oYXMoZSl8fHRoaXMuX2ltYWdlTWFwLnNldChlLGEpfX07dC5Mb2NhbEZ1bmN0aW9uQ2FjaGU9Y2xhc3MgTG9jYWxGdW5jdGlvbkNhY2hlIGV4dGVuZHMgQmFzZUxvY2FsQ2FjaGV7Y29uc3RydWN0b3IoZSl7c3VwZXIoe29ubHlSZWZzOiEwfSl9c2V0KGU9bnVsbCx0LGEpe2lmKCF0KXRocm93IG5ldyBFcnJvcignTG9jYWxGdW5jdGlvbkNhY2hlLnNldCAtIGV4cGVjdGVkICJyZWYiIGFyZ3VtZW50LicpO3RoaXMuX2ltYWdlQ2FjaGUuaGFzKHQpfHx0aGlzLl9pbWFnZUNhY2hlLnB1dCh0LGEpfX07dC5Mb2NhbEdTdGF0ZUNhY2hlPWNsYXNzIExvY2FsR1N0YXRlQ2FjaGUgZXh0ZW5kcyBCYXNlTG9jYWxDYWNoZXtzZXQoZSx0PW51bGwsYSl7aWYoInN0cmluZyIhPXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcignTG9jYWxHU3RhdGVDYWNoZS5zZXQgLSBleHBlY3RlZCAibmFtZSIgYXJndW1lbnQuJyk7aWYodCl7aWYodGhpcy5faW1hZ2VDYWNoZS5oYXModCkpcmV0dXJuO3RoaXMuX25hbWVSZWZNYXAuc2V0KGUsdCk7dGhpcy5faW1hZ2VDYWNoZS5wdXQodCxhKX1lbHNlIHRoaXMuX2ltYWdlTWFwLmhhcyhlKXx8dGhpcy5faW1hZ2VNYXAuc2V0KGUsYSl9fTt0LkxvY2FsVGlsaW5nUGF0dGVybkNhY2hlPWNsYXNzIExvY2FsVGlsaW5nUGF0dGVybkNhY2hlIGV4dGVuZHMgQmFzZUxvY2FsQ2FjaGV7Y29uc3RydWN0b3IoZSl7c3VwZXIoe29ubHlSZWZzOiEwfSl9c2V0KGU9bnVsbCx0LGEpe2lmKCF0KXRocm93IG5ldyBFcnJvcignTG9jYWxUaWxpbmdQYXR0ZXJuQ2FjaGUuc2V0IC0gZXhwZWN0ZWQgInJlZiIgYXJndW1lbnQuJyk7dGhpcy5faW1hZ2VDYWNoZS5oYXModCl8fHRoaXMuX2ltYWdlQ2FjaGUucHV0KHQsYSl9fTt0LlJlZ2lvbmFsSW1hZ2VDYWNoZT1jbGFzcyBSZWdpb25hbEltYWdlQ2FjaGUgZXh0ZW5kcyBCYXNlTG9jYWxDYWNoZXtjb25zdHJ1Y3RvcihlKXtzdXBlcih7b25seVJlZnM6ITB9KX1zZXQoZT1udWxsLHQsYSl7aWYoIXQpdGhyb3cgbmV3IEVycm9yKCdSZWdpb25hbEltYWdlQ2FjaGUuc2V0IC0gZXhwZWN0ZWQgInJlZiIgYXJndW1lbnQuJyk7dGhpcy5faW1hZ2VDYWNoZS5oYXModCl8fHRoaXMuX2ltYWdlQ2FjaGUucHV0KHQsYSl9fTtjbGFzcyBHbG9iYWxJbWFnZUNhY2hle3N0YXRpYyBOVU1fUEFHRVNfVEhSRVNIT0xEPTI7c3RhdGljIE1JTl9JTUFHRVNfVE9fQ0FDSEU9MTA7c3RhdGljIE1BWF9CWVRFX1NJWkU9NSpyLk1BWF9JTUFHRV9TSVpFX1RPX0NBQ0hFO2NvbnN0cnVjdG9yKCl7dGhpcy5fcmVmQ2FjaGU9bmV3IG4uUmVmU2V0Q2FjaGU7dGhpcy5faW1hZ2VDYWNoZT1uZXcgbi5SZWZTZXRDYWNoZX1nZXQgX2J5dGVTaXplKCl7bGV0IGU9MDtmb3IoY29uc3QgdCBvZiB0aGlzLl9pbWFnZUNhY2hlKWUrPXQuYnl0ZVNpemU7cmV0dXJuIGV9Z2V0IF9jYWNoZUxpbWl0UmVhY2hlZCgpe3JldHVybiEodGhpcy5faW1hZ2VDYWNoZS5zaXplPEdsb2JhbEltYWdlQ2FjaGUuTUlOX0lNQUdFU19UT19DQUNIRSkmJiEodGhpcy5fYnl0ZVNpemU8R2xvYmFsSW1hZ2VDYWNoZS5NQVhfQllURV9TSVpFKX1zaG91bGRDYWNoZShlLHQpe2xldCBhPXRoaXMuX3JlZkNhY2hlLmdldChlKTtpZighYSl7YT1uZXcgU2V0O3RoaXMuX3JlZkNhY2hlLnB1dChlLGEpfWEuYWRkKHQpO3JldHVybiEoYS5zaXplPEdsb2JhbEltYWdlQ2FjaGUuTlVNX1BBR0VTX1RIUkVTSE9MRCkmJiEoIXRoaXMuX2ltYWdlQ2FjaGUuaGFzKGUpJiZ0aGlzLl9jYWNoZUxpbWl0UmVhY2hlZCl9YWRkQnl0ZVNpemUoZSx0KXtjb25zdCBhPXRoaXMuX2ltYWdlQ2FjaGUuZ2V0KGUpO2EmJihhLmJ5dGVTaXplfHwoYS5ieXRlU2l6ZT10KSl9Z2V0RGF0YShlLHQpe2NvbnN0IGE9dGhpcy5fcmVmQ2FjaGUuZ2V0KGUpO2lmKCFhKXJldHVybiBudWxsO2lmKGEuc2l6ZTxHbG9iYWxJbWFnZUNhY2hlLk5VTV9QQUdFU19USFJFU0hPTEQpcmV0dXJuIG51bGw7Y29uc3Qgcj10aGlzLl9pbWFnZUNhY2hlLmdldChlKTtpZighcilyZXR1cm4gbnVsbDthLmFkZCh0KTtyZXR1cm4gcn1zZXREYXRhKGUsdCl7aWYoIXRoaXMuX3JlZkNhY2hlLmhhcyhlKSl0aHJvdyBuZXcgRXJyb3IoJ0dsb2JhbEltYWdlQ2FjaGUuc2V0RGF0YSAtIGV4cGVjdGVkICJzaG91bGRDYWNoZSIgdG8gaGF2ZSBiZWVuIGNhbGxlZC4nKTt0aGlzLl9pbWFnZUNhY2hlLmhhcyhlKXx8KHRoaXMuX2NhY2hlTGltaXRSZWFjaGVkPygwLHIud2FybikoIkdsb2JhbEltYWdlQ2FjaGUuc2V0RGF0YSAtIGNhY2hlIGxpbWl0IHJlYWNoZWQuIik6dGhpcy5faW1hZ2VDYWNoZS5wdXQoZSx0KSl9Y2xlYXIoZT0hMSl7ZXx8dGhpcy5fcmVmQ2FjaGUuY2xlYXIoKTt0aGlzLl9pbWFnZUNhY2hlLmNsZWFyKCl9fXQuR2xvYmFsSW1hZ2VDYWNoZT1HbG9iYWxJbWFnZUNhY2hlfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuYmlkaT1mdW5jdGlvbiBiaWRpKGUsdD0tMSxhPSExKXtsZXQgYz0hMDtjb25zdCBsPWUubGVuZ3RoO2lmKDA9PT1sfHxhKXJldHVybiBjcmVhdGVCaWRpVGV4dChlLGMsYSk7cy5sZW5ndGg9bDtvLmxlbmd0aD1sO2xldCBoLHUsZD0wO2ZvcihoPTA7aDxsOysraCl7c1toXT1lLmNoYXJBdChoKTtjb25zdCB0PWUuY2hhckNvZGVBdChoKTtsZXQgYT0iTCI7aWYodDw9MjU1KWE9blt0XTtlbHNlIGlmKDE0MjQ8PXQmJnQ8PTE1MjQpYT0iUiI7ZWxzZSBpZigxNTM2PD10JiZ0PD0xNzkxKXthPWlbMjU1JnRdO2F8fCgwLHIud2FybikoIkJpZGk6IGludmFsaWQgVW5pY29kZSBjaGFyYWN0ZXIgIit0LnRvU3RyaW5nKDE2KSl9ZWxzZSgxNzkyPD10JiZ0PD0yMjIwfHw2NDMzNjw9dCYmdDw9NjUwMjN8fDY1MTM2PD10JiZ0PD02NTI3OSkmJihhPSJBTCIpOyJSIiE9PWEmJiJBTCIhPT1hJiYiQU4iIT09YXx8ZCsrO29baF09YX1pZigwPT09ZCl7Yz0hMDtyZXR1cm4gY3JlYXRlQmlkaVRleHQoZSxjKX1pZigtMT09PXQpaWYoZC9sPC4zJiZsPjQpe2M9ITA7dD0wfWVsc2V7Yz0hMTt0PTF9Y29uc3QgZj1bXTtmb3IoaD0wO2g8bDsrK2gpZltoXT10O2NvbnN0IGc9aXNPZGQodCk/IlIiOiJMIixwPWcsbT1wO2xldCBiLHk9cDtmb3IoaD0wO2g8bDsrK2gpIk5TTSI9PT1vW2hdP29baF09eTp5PW9baF07eT1wO2ZvcihoPTA7aDxsOysraCl7Yj1vW2hdOyJFTiI9PT1iP29baF09IkFMIj09PXk/IkFOIjoiRU4iOiJSIiE9PWImJiJMIiE9PWImJiJBTCIhPT1ifHwoeT1iKX1mb3IoaD0wO2g8bDsrK2gpe2I9b1toXTsiQUwiPT09YiYmKG9baF09IlIiKX1mb3IoaD0xO2g8bC0xOysraCl7IkVTIj09PW9baF0mJiJFTiI9PT1vW2gtMV0mJiJFTiI9PT1vW2grMV0mJihvW2hdPSJFTiIpOyJDUyIhPT1vW2hdfHwiRU4iIT09b1toLTFdJiYiQU4iIT09b1toLTFdfHxvW2grMV0hPT1vW2gtMV18fChvW2hdPW9baC0xXSl9Zm9yKGg9MDtoPGw7KytoKWlmKCJFTiI9PT1vW2hdKXtmb3IobGV0IGU9aC0xO2U+PTAmJiJFVCI9PT1vW2VdOy0tZSlvW2VdPSJFTiI7Zm9yKGxldCBlPWgrMTtlPGwmJiJFVCI9PT1vW2VdOysrZSlvW2VdPSJFTiJ9Zm9yKGg9MDtoPGw7KytoKXtiPW9baF07IldTIiE9PWImJiJFUyIhPT1iJiYiRVQiIT09YiYmIkNTIiE9PWJ8fChvW2hdPSJPTiIpfXk9cDtmb3IoaD0wO2g8bDsrK2gpe2I9b1toXTsiRU4iPT09Yj9vW2hdPSJMIj09PXk/IkwiOiJFTiI6IlIiIT09YiYmIkwiIT09Ynx8KHk9Yil9Zm9yKGg9MDtoPGw7KytoKWlmKCJPTiI9PT1vW2hdKXtjb25zdCBlPWZpbmRVbmVxdWFsKG8saCsxLCJPTiIpO2xldCB0PXA7aD4wJiYodD1vW2gtMV0pO2xldCBhPW07ZSsxPGwmJihhPW9bZSsxXSk7IkwiIT09dCYmKHQ9IlIiKTsiTCIhPT1hJiYoYT0iUiIpO3Q9PT1hJiZzZXRWYWx1ZXMobyxoLGUsdCk7aD1lLTF9Zm9yKGg9MDtoPGw7KytoKSJPTiI9PT1vW2hdJiYob1toXT1nKTtmb3IoaD0wO2g8bDsrK2gpe2I9b1toXTtpc0V2ZW4oZltoXSk/IlIiPT09Yj9mW2hdKz0xOiJBTiIhPT1iJiYiRU4iIT09Ynx8KGZbaF0rPTIpOiJMIiE9PWImJiJBTiIhPT1iJiYiRU4iIT09Ynx8KGZbaF0rPTEpfWxldCB3LFM9LTEseD05OTtmb3IoaD0wLHU9Zi5sZW5ndGg7aDx1OysraCl7dz1mW2hdO1M8dyYmKFM9dyk7eD53JiZpc09kZCh3KSYmKHg9dyl9Zm9yKHc9Uzt3Pj14Oy0tdyl7bGV0IGU9LTE7Zm9yKGg9MCx1PWYubGVuZ3RoO2g8dTsrK2gpaWYoZltoXTx3KXtpZihlPj0wKXtyZXZlcnNlVmFsdWVzKHMsZSxoKTtlPS0xfX1lbHNlIGU8MCYmKGU9aCk7ZT49MCYmcmV2ZXJzZVZhbHVlcyhzLGUsZi5sZW5ndGgpfWZvcihoPTAsdT1zLmxlbmd0aDtoPHU7KytoKXtjb25zdCBlPXNbaF07IjwiIT09ZSYmIj4iIT09ZXx8KHNbaF09IiIpfXJldHVybiBjcmVhdGVCaWRpVGV4dChzLmpvaW4oIiIpLGMpfTt2YXIgcj1hKDIpO2NvbnN0IG49WyJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJTIiwiQiIsIlMiLCJXUyIsIkIiLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQiIsIkIiLCJCIiwiUyIsIldTIiwiT04iLCJPTiIsIkVUIiwiRVQiLCJFVCIsIk9OIiwiT04iLCJPTiIsIk9OIiwiT04iLCJFUyIsIkNTIiwiRVMiLCJDUyIsIkNTIiwiRU4iLCJFTiIsIkVOIiwiRU4iLCJFTiIsIkVOIiwiRU4iLCJFTiIsIkVOIiwiRU4iLCJDUyIsIk9OIiwiT04iLCJPTiIsIk9OIiwiT04iLCJPTiIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiT04iLCJPTiIsIk9OIiwiT04iLCJPTiIsIk9OIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJPTiIsIk9OIiwiT04iLCJPTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkIiLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQk4iLCJCTiIsIkJOIiwiQ1MiLCJPTiIsIkVUIiwiRVQiLCJFVCIsIkVUIiwiT04iLCJPTiIsIk9OIiwiT04iLCJMIiwiT04iLCJPTiIsIkJOIiwiT04iLCJPTiIsIkVUIiwiRVQiLCJFTiIsIkVOIiwiT04iLCJMIiwiT04iLCJPTiIsIk9OIiwiRU4iLCJMIiwiT04iLCJPTiIsIk9OIiwiT04iLCJPTiIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiT04iLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiT04iLCJMIiwiTCIsIkwiLCJMIiwiTCIsIkwiLCJMIiwiTCJdLGk9WyJBTiIsIkFOIiwiQU4iLCJBTiIsIkFOIiwiQU4iLCJPTiIsIk9OIiwiQUwiLCJFVCIsIkVUIiwiQUwiLCJDUyIsIkFMIiwiT04iLCJPTiIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIk5TTSIsIkFMIiwiQUwiLCIiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJBTiIsIkFOIiwiQU4iLCJBTiIsIkFOIiwiQU4iLCJBTiIsIkFOIiwiQU4iLCJBTiIsIkVUIiwiQU4iLCJBTiIsIkFMIiwiQUwiLCJBTCIsIk5TTSIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJOU00iLCJBTiIsIk9OIiwiTlNNIiwiTlNNIiwiTlNNIiwiTlNNIiwiTlNNIiwiTlNNIiwiQUwiLCJBTCIsIk5TTSIsIk5TTSIsIk9OIiwiTlNNIiwiTlNNIiwiTlNNIiwiTlNNIiwiQUwiLCJBTCIsIkVOIiwiRU4iLCJFTiIsIkVOIiwiRU4iLCJFTiIsIkVOIiwiRU4iLCJFTiIsIkVOIiwiQUwiLCJBTCIsIkFMIiwiQUwiLCJBTCIsIkFMIl07ZnVuY3Rpb24gaXNPZGQoZSl7cmV0dXJuIDAhPSgxJmUpfWZ1bmN0aW9uIGlzRXZlbihlKXtyZXR1cm4gMD09KDEmZSl9ZnVuY3Rpb24gZmluZFVuZXF1YWwoZSx0LGEpe2xldCByLG47Zm9yKHI9dCxuPWUubGVuZ3RoO3I8bjsrK3IpaWYoZVtyXSE9PWEpcmV0dXJuIHI7cmV0dXJuIHJ9ZnVuY3Rpb24gc2V0VmFsdWVzKGUsdCxhLHIpe2ZvcihsZXQgbj10O248YTsrK24pZVtuXT1yfWZ1bmN0aW9uIHJldmVyc2VWYWx1ZXMoZSx0LGEpe2ZvcihsZXQgcj10LG49YS0xO3I8bjsrK3IsLS1uKXtjb25zdCB0PWVbcl07ZVtyXT1lW25dO2Vbbl09dH19ZnVuY3Rpb24gY3JlYXRlQmlkaVRleHQoZSx0LGE9ITEpe2xldCByPSJsdHIiO2E/cj0idHRiIjp0fHwocj0icnRsIik7cmV0dXJue3N0cjplLGRpcjpyfX1jb25zdCBzPVtdLG89W119LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5nZXRGb250U3Vic3RpdHV0aW9uPWZ1bmN0aW9uIGdldEZvbnRTdWJzdGl0dXRpb24oZSx0LGEsdSxkKXtjb25zdCBmPXU9KDAsci5ub3JtYWxpemVGb250TmFtZSkodSk7bGV0IGc9ZS5nZXQoZik7aWYoZylyZXR1cm4gZztsZXQgcD1sLmdldCh1KTtpZighcClmb3IoY29uc3RbZSx0XW9mIGgpaWYodS5zdGFydHNXaXRoKGUpKXt1PWAke3R9JHt1LnN1YnN0cmluZyhlLmxlbmd0aCl9YDtwPWwuZ2V0KHUpO2JyZWFrfWxldCBtPSExO2lmKCFwKXtwPWwuZ2V0KGQpO209ITB9Y29uc3QgYj1gJHt0LmdldERvY0lkKCl9X3Mke3QuY3JlYXRlRm9udElkKCl9YDtpZighcCl7aWYoISgwLG4udmFsaWRhdGVGb250TmFtZSkodSkpe2Uuc2V0KGYsbnVsbCk7cmV0dXJuIG51bGx9Y29uc3QgdD0vYm9sZC9naS50ZXN0KHUpLGE9L29ibGlxdWV8aXRhbGljL2dpLnRlc3QodSk7Zz17Y3NzOmIsZ3Vlc3NGYWxsYmFjazohMCxsb2FkZWROYW1lOmIsYmFzZUZvbnROYW1lOnUsc3JjOmBsb2NhbCgke3V9KWAsc3R5bGU6dCYmYSYmY3x8dCYmc3x8YSYmb3x8aX07ZS5zZXQoZixnKTtyZXR1cm4gZ31jb25zdCB5PVtdO20mJigwLG4udmFsaWRhdGVGb250TmFtZSkodSkmJnkucHVzaChgbG9jYWwoJHt1fSlgKTtjb25zdHtzdHlsZTp3LHVsdGltYXRlOlN9PWdlbmVyYXRlRm9udChwLHksYSkseD1udWxsPT09UztnPXtjc3M6YCR7Yn0ke3g/IiI6YCwke1N9YH1gLGd1ZXNzRmFsbGJhY2s6eCxsb2FkZWROYW1lOmIsYmFzZUZvbnROYW1lOnUsc3JjOnkuam9pbigiLCIpLHN0eWxlOnd9O2Uuc2V0KGYsZyk7cmV0dXJuIGd9O3ZhciByPWEoMzgpLG49YSgzKTtjb25zdCBpPXtzdHlsZToibm9ybWFsIix3ZWlnaHQ6Im5vcm1hbCJ9LHM9e3N0eWxlOiJub3JtYWwiLHdlaWdodDoiYm9sZCJ9LG89e3N0eWxlOiJpdGFsaWMiLHdlaWdodDoibm9ybWFsIn0sYz17c3R5bGU6Iml0YWxpYyIsd2VpZ2h0OiJib2xkIn0sbD1uZXcgTWFwKFtbIlRpbWVzLVJvbWFuIix7bG9jYWw6WyJUaW1lcyBOZXcgUm9tYW4iLCJUaW1lcy1Sb21hbiIsIlRpbWVzIiwiTGliZXJhdGlvbiBTZXJpZiIsIk5pbWJ1cyBSb21hbiIsIk5pbWJ1cyBSb21hbiBMIiwiVGlub3MiLCJUaG9ybmRhbGUiLCJUZVggR3lyZSBUZXJtZXMiLCJGcmVlU2VyaWYiLCJEZWphVnUgU2VyaWYiLCJCaXRzdHJlYW0gVmVyYSBTZXJpZiIsIlVidW50dSJdLHN0eWxlOmksdWx0aW1hdGU6InNlcmlmIn1dLFsiVGltZXMtQm9sZCIse2FsaWFzOiJUaW1lcy1Sb21hbiIsc3R5bGU6cyx1bHRpbWF0ZToic2VyaWYifV0sWyJUaW1lcy1JdGFsaWMiLHthbGlhczoiVGltZXMtUm9tYW4iLHN0eWxlOm8sdWx0aW1hdGU6InNlcmlmIn1dLFsiVGltZXMtQm9sZEl0YWxpYyIse2FsaWFzOiJUaW1lcy1Sb21hbiIsc3R5bGU6Yyx1bHRpbWF0ZToic2VyaWYifV0sWyJIZWx2ZXRpY2EiLHtsb2NhbDpbIkhlbHZldGljYSIsIkhlbHZldGljYSBOZXVlIiwiQXJpYWwiLCJBcmlhbCBOb3ZhIiwiTGliZXJhdGlvbiBTYW5zIiwiQXJpbW8iLCJOaW1idXMgU2FucyIsIk5pbWJ1cyBTYW5zIEwiLCJBMDMwIiwiVGVYIEd5cmUgSGVyb3MiLCJGcmVlU2FucyIsIkRlamFWdSBTYW5zIiwiQWxiYW55IiwiQml0c3RyZWFtIFZlcmEgU2FucyIsIkFyaWFsIFVuaWNvZGUgTVMiLCJNaWNyb3NvZnQgU2FucyBTZXJpZiIsIkFwcGxlIFN5bWJvbHMiLCJDYW50YXJlbGwiXSxwYXRoOiJMaWJlcmF0aW9uU2Fucy1SZWd1bGFyLnR0ZiIsc3R5bGU6aSx1bHRpbWF0ZToic2Fucy1zZXJpZiJ9XSxbIkhlbHZldGljYS1Cb2xkIix7YWxpYXM6IkhlbHZldGljYSIscGF0aDoiTGliZXJhdGlvblNhbnMtQm9sZC50dGYiLHN0eWxlOnMsdWx0aW1hdGU6InNhbnMtc2VyaWYifV0sWyJIZWx2ZXRpY2EtT2JsaXF1ZSIse2FsaWFzOiJIZWx2ZXRpY2EiLHBhdGg6IkxpYmVyYXRpb25TYW5zLUl0YWxpYy50dGYiLHN0eWxlOm8sdWx0aW1hdGU6InNhbnMtc2VyaWYifV0sWyJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUiLHthbGlhczoiSGVsdmV0aWNhIixwYXRoOiJMaWJlcmF0aW9uU2Fucy1Cb2xkSXRhbGljLnR0ZiIsc3R5bGU6Yyx1bHRpbWF0ZToic2Fucy1zZXJpZiJ9XSxbIkNvdXJpZXIiLHtsb2NhbDpbIkNvdXJpZXIiLCJDb3VyaWVyIE5ldyIsIkxpYmVyYXRpb24gTW9ubyIsIk5pbWJ1cyBNb25vIiwiTmltYnVzIE1vbm8gTCIsIkNvdXNpbmUiLCJDdW1iZXJsYW5kIiwiVGVYIEd5cmUgQ3Vyc29yIiwiRnJlZU1vbm8iXSxzdHlsZTppLHVsdGltYXRlOiJtb25vc3BhY2UifV0sWyJDb3VyaWVyLUJvbGQiLHthbGlhczoiQ291cmllciIsc3R5bGU6cyx1bHRpbWF0ZToibW9ub3NwYWNlIn1dLFsiQ291cmllci1PYmxpcXVlIix7YWxpYXM6IkNvdXJpZXIiLHN0eWxlOm8sdWx0aW1hdGU6Im1vbm9zcGFjZSJ9XSxbIkNvdXJpZXItQm9sZE9ibGlxdWUiLHthbGlhczoiQ291cmllciIsc3R5bGU6Yyx1bHRpbWF0ZToibW9ub3NwYWNlIn1dLFsiQXJpYWxCbGFjayIse2xvY2FsOlsiQXJpYWwgQmxhY2siXSxzdHlsZTp7c3R5bGU6Im5vcm1hbCIsd2VpZ2h0OiI5MDAifSxmYWxsYmFjazoiSGVsdmV0aWNhLUJvbGQifV0sWyJBcmlhbEJsYWNrLUJvbGQiLHthbGlhczoiQXJpYWxCbGFjayJ9XSxbIkFyaWFsQmxhY2stSXRhbGljIix7YWxpYXM6IkFyaWFsQmxhY2siLHN0eWxlOntzdHlsZToiaXRhbGljIix3ZWlnaHQ6IjkwMCJ9LGZhbGxiYWNrOiJIZWx2ZXRpY2EtQm9sZE9ibGlxdWUifV0sWyJBcmlhbEJsYWNrLUJvbGRJdGFsaWMiLHthbGlhczoiQXJpYWxCbGFjay1JdGFsaWMifV0sWyJBcmlhbE5hcnJvdyIse2xvY2FsOlsiQXJpYWwgTmFycm93IiwiTGliZXJhdGlvbiBTYW5zIE5hcnJvdyIsIkhlbHZldGljYSBDb25kZW5zZWQiLCJOaW1idXMgU2FucyBOYXJyb3ciLCJUZVggR3lyZSBIZXJvcyBDbiJdLHN0eWxlOmksZmFsbGJhY2s6IkhlbHZldGljYSJ9XSxbIkFyaWFsTmFycm93LUJvbGQiLHthbGlhczoiQXJpYWxOYXJyb3ciLHN0eWxlOnMsZmFsbGJhY2s6IkhlbHZldGljYS1Cb2xkIn1dLFsiQXJpYWxOYXJyb3ctSXRhbGljIix7YWxpYXM6IkFyaWFsTmFycm93IixzdHlsZTpvLGZhbGxiYWNrOiJIZWx2ZXRpY2EtT2JsaXF1ZSJ9XSxbIkFyaWFsTmFycm93LUJvbGRJdGFsaWMiLHthbGlhczoiQXJpYWxOYXJyb3ciLHN0eWxlOmMsZmFsbGJhY2s6IkhlbHZldGljYS1Cb2xkT2JsaXF1ZSJ9XSxbIkNhbGlicmkiLHtsb2NhbDpbIkNhbGlicmkiLCJDYXJsaXRvIl0sc3R5bGU6aSxmYWxsYmFjazoiSGVsdmV0aWNhIn1dLFsiQ2FsaWJyaS1Cb2xkIix7YWxpYXM6IkNhbGlicmkiLHN0eWxlOnMsZmFsbGJhY2s6IkhlbHZldGljYS1Cb2xkIn1dLFsiQ2FsaWJyaS1JdGFsaWMiLHthbGlhczoiQ2FsaWJyaSIsc3R5bGU6byxmYWxsYmFjazoiSGVsdmV0aWNhLU9ibGlxdWUifV0sWyJDYWxpYnJpLUJvbGRJdGFsaWMiLHthbGlhczoiQ2FsaWJyaSIsc3R5bGU6YyxmYWxsYmFjazoiSGVsdmV0aWNhLUJvbGRPYmxpcXVlIn1dLFsiV2luZ2RpbmdzIix7bG9jYWw6WyJXaW5nZGluZ3MiLCJVUlcgRGluZ2JhdHMiXSxzdHlsZTppfV0sWyJXaW5nZGluZ3MtUmVndWxhciIse2FsaWFzOiJXaW5nZGluZ3MifV0sWyJXaW5nZGluZ3MtQm9sZCIse2FsaWFzOiJXaW5nZGluZ3MifV1dKSxoPW5ldyBNYXAoW1siQXJpYWwtQmxhY2siLCJBcmlhbEJsYWNrIl1dKTtmdW5jdGlvbiBnZW5lcmF0ZUZvbnQoe2FsaWFzOmUsbG9jYWw6dCxwYXRoOmEsZmFsbGJhY2s6cixzdHlsZTpuLHVsdGltYXRlOml9LGgsdSxkPSEwLGY9ITAsZz0iIil7Y29uc3QgcD17c3R5bGU6bnVsbCx1bHRpbWF0ZTpudWxsfTtpZih0KXtjb25zdCBlPWc/YCAke2d9YDoiIjtmb3IoY29uc3QgYSBvZiB0KWgucHVzaChgbG9jYWwoJHthfSR7ZX0pYCl9aWYoZSl7Y29uc3QgdD1sLmdldChlKSxpPWd8fGZ1bmN0aW9uIGdldFN0eWxlVG9BcHBlbmQoZSl7c3dpdGNoKGUpe2Nhc2UgczpyZXR1cm4iQm9sZCI7Y2FzZSBvOnJldHVybiJJdGFsaWMiO2Nhc2UgYzpyZXR1cm4iQm9sZCBJdGFsaWMiO2RlZmF1bHQ6aWYoImJvbGQiPT09ZT8ud2VpZ2h0KXJldHVybiJCb2xkIjtpZigiaXRhbGljIj09PWU/LnN0eWxlKXJldHVybiJJdGFsaWMifXJldHVybiIifShuKTtPYmplY3QuYXNzaWduKHAsZ2VuZXJhdGVGb250KHQsaCx1LGQmJiFyLGYmJiFhLGkpKX1uJiYocC5zdHlsZT1uKTtpJiYocC51bHRpbWF0ZT1pKTtpZihkJiZyKXtjb25zdCBlPWwuZ2V0KHIpLHt1bHRpbWF0ZTp0fT1nZW5lcmF0ZUZvbnQoZSxoLHUsZCxmJiYhYSxnKTtwLnVsdGltYXRlfHw9dH1mJiZhJiZ1JiZoLnB1c2goYHVybCgke3V9JHthfSlgKTtyZXR1cm4gcH19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5JbWFnZVJlc2l6ZXI9dm9pZCAwO3ZhciByPWEoMik7Y2xhc3MgSW1hZ2VSZXNpemVye2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5faW1nRGF0YT1lO3RoaXMuX2lzTWFzaz10fXN0YXRpYyBuZWVkc1RvQmVSZXNpemVkKGUsdCl7aWYoZTw9dGhpcy5fZ29vZFNxdWFyZUxlbmd0aCYmdDw9dGhpcy5fZ29vZFNxdWFyZUxlbmd0aClyZXR1cm4hMTtjb25zdHtNQVhfRElNOmF9PXRoaXM7aWYoZT5hfHx0PmEpcmV0dXJuITA7Y29uc3Qgcj1lKnQ7aWYodGhpcy5faGFzTWF4QXJlYSlyZXR1cm4gcj50aGlzLk1BWF9BUkVBO2lmKHI8dGhpcy5fZ29vZFNxdWFyZUxlbmd0aCoqMilyZXR1cm4hMTtpZih0aGlzLl9hcmVHb29kRGltcyhlLHQpKXt0aGlzLl9nb29kU3F1YXJlTGVuZ3RoPU1hdGgubWF4KHRoaXMuX2dvb2RTcXVhcmVMZW5ndGgsTWF0aC5mbG9vcihNYXRoLnNxcnQoZSp0KSkpO3JldHVybiExfXRoaXMuX2dvb2RTcXVhcmVMZW5ndGg9dGhpcy5fZ3Vlc3NNYXgodGhpcy5fZ29vZFNxdWFyZUxlbmd0aCxhLDEyOCwwKTtyZXR1cm4gcj4odGhpcy5NQVhfQVJFQT10aGlzLl9nb29kU3F1YXJlTGVuZ3RoKioyKX1zdGF0aWMgZ2V0IE1BWF9ESU0oKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiTUFYX0RJTSIsdGhpcy5fZ3Vlc3NNYXgoMjA0OCw2NTUzNywwLDEpKX1zdGF0aWMgZ2V0IE1BWF9BUkVBKCl7dGhpcy5faGFzTWF4QXJlYT0hMDtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiTUFYX0FSRUEiLHRoaXMuX2d1ZXNzTWF4KEltYWdlUmVzaXplci5fZ29vZFNxdWFyZUxlbmd0aCx0aGlzLk1BWF9ESU0sMTI4LDApKioyKX1zdGF0aWMgc2V0IE1BWF9BUkVBKGUpe2lmKGU+PTApe3RoaXMuX2hhc01heEFyZWE9ITA7KDAsci5zaGFkb3cpKHRoaXMsIk1BWF9BUkVBIixlKX19c3RhdGljIHNldE1heEFyZWEoZSl7dGhpcy5faGFzTWF4QXJlYXx8KHRoaXMuTUFYX0FSRUE9ZT4+Mil9c3RhdGljIF9hcmVHb29kRGltcyhlLHQpe3RyeXtjb25zdCBhPW5ldyBPZmZzY3JlZW5DYW52YXMoZSx0KSxyPWEuZ2V0Q29udGV4dCgiMmQiKTtyLmZpbGxSZWN0KDAsMCwxLDEpO2NvbnN0IG49ci5nZXRJbWFnZURhdGEoMCwwLDEsMSkuZGF0YVszXTthLndpZHRoPWEuaGVpZ2h0PTE7cmV0dXJuIDAhPT1ufWNhdGNoe3JldHVybiExfX1zdGF0aWMgX2d1ZXNzTWF4KGUsdCxhLHIpe2Zvcig7ZSthKzE8dDspe2NvbnN0IGE9TWF0aC5mbG9vcigoZSt0KS8yKSxuPXJ8fGE7dGhpcy5fYXJlR29vZERpbXMoYSxuKT9lPWE6dD1hfXJldHVybiBlfXN0YXRpYyBhc3luYyBjcmVhdGVJbWFnZShlLHQ9ITEpe3JldHVybiBuZXcgSW1hZ2VSZXNpemVyKGUsdCkuX2NyZWF0ZUltYWdlKCl9YXN5bmMgX2NyZWF0ZUltYWdlKCl7Y29uc3QgZT10aGlzLl9lbmNvZGVCTVAoKSx0PW5ldyBCbG9iKFtlLmJ1ZmZlcl0se3R5cGU6ImltYWdlL2JtcCJ9KSxhPWNyZWF0ZUltYWdlQml0bWFwKHQpLHtNQVhfQVJFQTpyLE1BWF9ESU06bn09SW1hZ2VSZXNpemVyLHtfaW1nRGF0YTppfT10aGlzLHt3aWR0aDpzLGhlaWdodDpvfT1pLGM9TWF0aC5tYXgocy9uLG8vbixNYXRoLnNxcnQocypvL3IpKSxsPU1hdGgubWF4KGMsMiksaD1NYXRoLnJvdW5kKDEwKihjKzEuMjUpKS8xMC9sLHU9TWF0aC5mbG9vcihNYXRoLmxvZzIoaCkpLGQ9bmV3IEFycmF5KHUrMikuZmlsbCgyKTtkWzBdPWw7ZC5zcGxpY2UoLTEsMSxoLygxPDx1KSk7bGV0IGY9cyxnPW8scD1hd2FpdCBhO2Zvcihjb25zdCBlIG9mIGQpe2NvbnN0IHQ9ZixhPWc7Zj1NYXRoLmZsb29yKGYvZSktMTtnPU1hdGguZmxvb3IoZy9lKS0xO2NvbnN0IHI9bmV3IE9mZnNjcmVlbkNhbnZhcyhmLGcpO3IuZ2V0Q29udGV4dCgiMmQiKS5kcmF3SW1hZ2UocCwwLDAsdCxhLDAsMCxmLGcpO3A9ci50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKX1pLmRhdGE9bnVsbDtpLmJpdG1hcD1wO2kud2lkdGg9ZjtpLmhlaWdodD1nO3JldHVybiBpfV9lbmNvZGVCTVAoKXtjb25zdHt3aWR0aDplLGhlaWdodDp0LGtpbmQ6YX09dGhpcy5faW1nRGF0YTtsZXQgbixpPXRoaXMuX2ltZ0RhdGEuZGF0YSxzPW5ldyBVaW50OEFycmF5KDApLG89cyxjPTA7c3dpdGNoKGEpe2Nhc2Ugci5JbWFnZUtpbmQuR1JBWVNDQUxFXzFCUFA6e249MTtzPW5ldyBVaW50OEFycmF5KHRoaXMuX2lzTWFzaz9bMjU1LDI1NSwyNTUsMjU1LDAsMCwwLDBdOlswLDAsMCwwLDI1NSwyNTUsMjU1LDI1NV0pO2NvbnN0IGE9ZSs3Pj4zLHI9YSszJi00O2lmKGEhPT1yKXtjb25zdCBlPW5ldyBVaW50OEFycmF5KHIqdCk7bGV0IG49MDtmb3IobGV0IHM9MCxvPXQqYTtzPG87cys9YSxuKz1yKWUuc2V0KGkuc3ViYXJyYXkocyxzK2EpLG4pO2k9ZX1icmVha31jYXNlIHIuSW1hZ2VLaW5kLlJHQl8yNEJQUDpuPTI0O2lmKDMmZSl7Y29uc3QgYT0zKmUscj1hKzMmLTQsbj1yLWEscz1uZXcgVWludDhBcnJheShyKnQpO2xldCBvPTA7Zm9yKGxldCBlPTAscj10KmE7ZTxyO2UrPWEpe2NvbnN0IHQ9aS5zdWJhcnJheShlLGUrYSk7Zm9yKGxldCBlPTA7ZTxhO2UrPTMpe3NbbysrXT10W2UrMl07c1tvKytdPXRbZSsxXTtzW28rK109dFtlXX1vKz1ufWk9c31lbHNlIGZvcihsZXQgZT0wLHQ9aS5sZW5ndGg7ZTx0O2UrPTMpe2NvbnN0IHQ9aVtlXTtpW2VdPWlbZSsyXTtpW2UrMl09dH1icmVhaztjYXNlIHIuSW1hZ2VLaW5kLlJHQkFfMzJCUFA6bj0zMjtjPTM7bz1uZXcgVWludDhBcnJheSg2OCk7Y29uc3QgYT1uZXcgRGF0YVZpZXcoby5idWZmZXIpO2lmKHIuRmVhdHVyZVRlc3QuaXNMaXR0bGVFbmRpYW4pe2Euc2V0VWludDMyKDAsMjU1LCEwKTthLnNldFVpbnQzMig0LDY1MjgwLCEwKTthLnNldFVpbnQzMig4LDE2NzExNjgwLCEwKTthLnNldFVpbnQzMigxMiw0Mjc4MTkwMDgwLCEwKX1lbHNle2Euc2V0VWludDMyKDAsNDI3ODE5MDA4MCwhMCk7YS5zZXRVaW50MzIoNCwxNjcxMTY4MCwhMCk7YS5zZXRVaW50MzIoOCw2NTI4MCwhMCk7YS5zZXRVaW50MzIoMTIsMjU1LCEwKX1icmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcigiaW52YWxpZCBmb3JtYXQiKX1sZXQgbD0wO2NvbnN0IGg9NDArby5sZW5ndGgsdT0xNCtoK3MubGVuZ3RoK2kubGVuZ3RoLGQ9bmV3IFVpbnQ4QXJyYXkodSksZj1uZXcgRGF0YVZpZXcoZC5idWZmZXIpO2Yuc2V0VWludDE2KGwsMTk3NzgsITApO2wrPTI7Zi5zZXRVaW50MzIobCx1LCEwKTtsKz00O2Yuc2V0VWludDMyKGwsMCwhMCk7bCs9NDtmLnNldFVpbnQzMihsLDE0K2grcy5sZW5ndGgsITApO2wrPTQ7Zi5zZXRVaW50MzIobCxoLCEwKTtsKz00O2Yuc2V0SW50MzIobCxlLCEwKTtsKz00O2Yuc2V0SW50MzIobCwtdCwhMCk7bCs9NDtmLnNldFVpbnQxNihsLDEsITApO2wrPTI7Zi5zZXRVaW50MTYobCxuLCEwKTtsKz0yO2Yuc2V0VWludDMyKGwsYywhMCk7bCs9NDtmLnNldFVpbnQzMihsLDAsITApO2wrPTQ7Zi5zZXRJbnQzMihsLDAsITApO2wrPTQ7Zi5zZXRJbnQzMihsLDAsITApO2wrPTQ7Zi5zZXRVaW50MzIobCxzLmxlbmd0aC80LCEwKTtsKz00O2Yuc2V0VWludDMyKGwsMCwhMCk7bCs9NDtkLnNldChvLGwpO2wrPW8ubGVuZ3RoO2Quc2V0KHMsbCk7bCs9cy5sZW5ndGg7ZC5zZXQoaSxsKTtyZXR1cm4gZH19dC5JbWFnZVJlc2l6ZXI9SW1hZ2VSZXNpemVyO0ltYWdlUmVzaXplci5fZ29vZFNxdWFyZUxlbmd0aD0yMDQ4fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuTXVybXVySGFzaDNfNjQ9dm9pZCAwO3ZhciByPWEoMik7Y29uc3Qgbj0zMjg1Mzc3NTIwLGk9NDI5NDkwMTc2MCxzPTY1NTM1O3QuTXVybXVySGFzaDNfNjQ9Y2xhc3MgTXVybXVySGFzaDNfNjR7Y29uc3RydWN0b3IoZSl7dGhpcy5oMT1lPzQyOTQ5NjcyOTUmZTpuO3RoaXMuaDI9ZT80Mjk0OTY3Mjk1JmU6bn11cGRhdGUoZSl7bGV0IHQsYTtpZigic3RyaW5nIj09dHlwZW9mIGUpe3Q9bmV3IFVpbnQ4QXJyYXkoMiplLmxlbmd0aCk7YT0wO2ZvcihsZXQgcj0wLG49ZS5sZW5ndGg7cjxuO3IrKyl7Y29uc3Qgbj1lLmNoYXJDb2RlQXQocik7aWYobjw9MjU1KXRbYSsrXT1uO2Vsc2V7dFthKytdPW4+Pj44O3RbYSsrXT0yNTUmbn19fWVsc2V7aWYoISgwLHIuaXNBcnJheUJ1ZmZlcikoZSkpdGhyb3cgbmV3IEVycm9yKCJXcm9uZyBkYXRhIGZvcm1hdCBpbiBNdXJtdXJIYXNoM182NF91cGRhdGUuIElucHV0IG11c3QgYmUgYSBzdHJpbmcgb3IgYXJyYXkuIik7dD1lLnNsaWNlKCk7YT10LmJ5dGVMZW5ndGh9Y29uc3Qgbj1hPj4yLG89YS00Km4sYz1uZXcgVWludDMyQXJyYXkodC5idWZmZXIsMCxuKTtsZXQgbD0wLGg9MCx1PXRoaXMuaDEsZD10aGlzLmgyO2NvbnN0IGY9MzQzMjkxODM1MyxnPTQ2MTg0NTkwNyxwPTExNjAxLG09MTM3MTU7Zm9yKGxldCBlPTA7ZTxuO2UrKylpZigxJmUpe2w9Y1tlXTtsPWwqZiZpfGwqcCZzO2w9bDw8MTV8bD4+PjE3O2w9bCpnJml8bCptJnM7dV49bDt1PXU8PDEzfHU+Pj4xOTt1PTUqdSszODY0MjkyMTk2fWVsc2V7aD1jW2VdO2g9aCpmJml8aCpwJnM7aD1oPDwxNXxoPj4+MTc7aD1oKmcmaXxoKm0mcztkXj1oO2Q9ZDw8MTN8ZD4+PjE5O2Q9NSpkKzM4NjQyOTIxOTZ9bD0wO3N3aXRjaChvKXtjYXNlIDM6bF49dFs0Km4rMl08PDE2O2Nhc2UgMjpsXj10WzQqbisxXTw8ODtjYXNlIDE6bF49dFs0Km5dO2w9bCpmJml8bCpwJnM7bD1sPDwxNXxsPj4+MTc7bD1sKmcmaXxsKm0mczsxJm4/dV49bDpkXj1sfXRoaXMuaDE9dTt0aGlzLmgyPWR9aGV4ZGlnZXN0KCl7bGV0IGU9dGhpcy5oMSx0PXRoaXMuaDI7ZV49dD4+PjE7ZT0zOTgxODA2Nzk3KmUmaXwzNjA0NSplJnM7dD00MjgzNTQzNTExKnQmaXwoMjk1MDE2Mzc5NyoodDw8MTZ8ZT4+PjE2KSZpKT4+PjE2O2VePXQ+Pj4xO2U9NDQ0OTg0NDAzKmUmaXw2MDQ5OSplJnM7dD0zMzAxODgyMzY2KnQmaXwoMzEyMDQzNzg5MyoodDw8MTZ8ZT4+PjE2KSZpKT4+PjE2O2VePXQ+Pj4xO3JldHVybihlPj4+MCkudG9TdHJpbmcoMTYpLnBhZFN0YXJ0KDgsIjAiKSsodD4+PjApLnRvU3RyaW5nKDE2KS5wYWRTdGFydCg4LCIwIil9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0Lk9wZXJhdG9yTGlzdD12b2lkIDA7dmFyIHI9YSgyKTtmdW5jdGlvbiBhZGRTdGF0ZShlLHQsYSxyLG4pe2xldCBpPWU7Zm9yKGxldCBlPTAsYT10Lmxlbmd0aC0xO2U8YTtlKyspe2NvbnN0IGE9dFtlXTtpPWlbYV18fD1bXX1pW3QuYXQoLTEpXT17Y2hlY2tGbjphLGl0ZXJhdGVGbjpyLHByb2Nlc3NGbjpufX1jb25zdCBuPVtdO2FkZFN0YXRlKG4sW3IuT1BTLnNhdmUsci5PUFMudHJhbnNmb3JtLHIuT1BTLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0LHIuT1BTLnJlc3RvcmVdLG51bGwsKGZ1bmN0aW9uIGl0ZXJhdGVJbmxpbmVJbWFnZUdyb3VwKGUsdCl7Y29uc3QgYT1lLmZuQXJyYXksbj0odC0oZS5pQ3Vyci0zKSklNDtzd2l0Y2gobil7Y2FzZSAwOnJldHVybiBhW3RdPT09ci5PUFMuc2F2ZTtjYXNlIDE6cmV0dXJuIGFbdF09PT1yLk9QUy50cmFuc2Zvcm07Y2FzZSAyOnJldHVybiBhW3RdPT09ci5PUFMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3Q7Y2FzZSAzOnJldHVybiBhW3RdPT09ci5PUFMucmVzdG9yZX10aHJvdyBuZXcgRXJyb3IoYGl0ZXJhdGVJbmxpbmVJbWFnZUdyb3VwIC0gaW52YWxpZCBwb3M6ICR7bn1gKX0pLChmdW5jdGlvbiBmb3VuZElubGluZUltYWdlR3JvdXAoZSx0KXtjb25zdCBhPWUuZm5BcnJheSxuPWUuYXJnc0FycmF5LGk9ZS5pQ3VycixzPWktMyxvPWktMixjPWktMSxsPU1hdGgubWluKE1hdGguZmxvb3IoKHQtcykvNCksMjAwKTtpZihsPDEwKXJldHVybiB0LSh0LXMpJTQ7bGV0IGg9MDtjb25zdCB1PVtdO2xldCBkPTAsZj0xLGc9MTtmb3IobGV0IGU9MDtlPGw7ZSsrKXtjb25zdCB0PW5bbysoZTw8MildLGE9bltjKyhlPDwyKV1bMF07aWYoZithLndpZHRoPjFlMyl7aD1NYXRoLm1heChoLGYpO2crPWQrMjtmPTA7ZD0wfXUucHVzaCh7dHJhbnNmb3JtOnQseDpmLHk6Zyx3OmEud2lkdGgsaDphLmhlaWdodH0pO2YrPWEud2lkdGgrMjtkPU1hdGgubWF4KGQsYS5oZWlnaHQpfWNvbnN0IHA9TWF0aC5tYXgoaCxmKSsxLG09ZytkKzEsYj1uZXcgVWludDhBcnJheShwKm0qNCkseT1wPDwyO2ZvcihsZXQgZT0wO2U8bDtlKyspe2NvbnN0IHQ9bltjKyhlPDwyKV1bMF0uZGF0YSxhPXVbZV0udzw8MjtsZXQgcj0wLGk9dVtlXS54K3VbZV0ueSpwPDwyO2Iuc2V0KHQuc3ViYXJyYXkoMCxhKSxpLXkpO2ZvcihsZXQgbj0wLHM9dVtlXS5oO248cztuKyspe2Iuc2V0KHQuc3ViYXJyYXkocixyK2EpLGkpO3IrPWE7aSs9eX1iLnNldCh0LnN1YmFycmF5KHItYSxyKSxpKTtmb3IoO2k+PTA7KXt0W2ktNF09dFtpXTt0W2ktM109dFtpKzFdO3RbaS0yXT10W2krMl07dFtpLTFdPXRbaSszXTt0W2krYV09dFtpK2EtNF07dFtpK2ErMV09dFtpK2EtM107dFtpK2ErMl09dFtpK2EtMl07dFtpK2ErM109dFtpK2EtMV07aS09eX19Y29uc3Qgdz17d2lkdGg6cCxoZWlnaHQ6bX07aWYoZS5pc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZCl7Y29uc3QgZT1uZXcgT2Zmc2NyZWVuQ2FudmFzKHAsbSk7ZS5nZXRDb250ZXh0KCIyZCIpLnB1dEltYWdlRGF0YShuZXcgSW1hZ2VEYXRhKG5ldyBVaW50OENsYW1wZWRBcnJheShiLmJ1ZmZlcikscCxtKSwwLDApO3cuYml0bWFwPWUudHJhbnNmZXJUb0ltYWdlQml0bWFwKCk7dy5kYXRhPW51bGx9ZWxzZXt3LmtpbmQ9ci5JbWFnZUtpbmQuUkdCQV8zMkJQUDt3LmRhdGE9Yn1hLnNwbGljZShzLDQqbCxyLk9QUy5wYWludElubGluZUltYWdlWE9iamVjdEdyb3VwKTtuLnNwbGljZShzLDQqbCxbdyx1XSk7cmV0dXJuIHMrMX0pKTthZGRTdGF0ZShuLFtyLk9QUy5zYXZlLHIuT1BTLnRyYW5zZm9ybSxyLk9QUy5wYWludEltYWdlTWFza1hPYmplY3Qsci5PUFMucmVzdG9yZV0sbnVsbCwoZnVuY3Rpb24gaXRlcmF0ZUltYWdlTWFza0dyb3VwKGUsdCl7Y29uc3QgYT1lLmZuQXJyYXksbj0odC0oZS5pQ3Vyci0zKSklNDtzd2l0Y2gobil7Y2FzZSAwOnJldHVybiBhW3RdPT09ci5PUFMuc2F2ZTtjYXNlIDE6cmV0dXJuIGFbdF09PT1yLk9QUy50cmFuc2Zvcm07Y2FzZSAyOnJldHVybiBhW3RdPT09ci5PUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0O2Nhc2UgMzpyZXR1cm4gYVt0XT09PXIuT1BTLnJlc3RvcmV9dGhyb3cgbmV3IEVycm9yKGBpdGVyYXRlSW1hZ2VNYXNrR3JvdXAgLSBpbnZhbGlkIHBvczogJHtufWApfSksKGZ1bmN0aW9uIGZvdW5kSW1hZ2VNYXNrR3JvdXAoZSx0KXtjb25zdCBhPWUuZm5BcnJheSxuPWUuYXJnc0FycmF5LGk9ZS5pQ3VycixzPWktMyxvPWktMixjPWktMTtsZXQgbD1NYXRoLmZsb29yKCh0LXMpLzQpO2lmKGw8MTApcmV0dXJuIHQtKHQtcyklNDtsZXQgaCx1LGQ9ITE7Y29uc3QgZj1uW2NdWzBdLGc9bltvXVswXSxwPW5bb11bMV0sbT1uW29dWzJdLGI9bltvXVszXTtpZihwPT09bSl7ZD0hMDtoPW8rNDtsZXQgZT1jKzQ7Zm9yKGxldCB0PTE7dDxsO3QrKyxoKz00LGUrPTQpe3U9bltoXTtpZihuW2VdWzBdIT09Znx8dVswXSE9PWd8fHVbMV0hPT1wfHx1WzJdIT09bXx8dVszXSE9PWIpe3Q8MTA/ZD0hMTpsPXQ7YnJlYWt9fX1pZihkKXtsPU1hdGgubWluKGwsMWUzKTtjb25zdCBlPW5ldyBGbG9hdDMyQXJyYXkoMipsKTtoPW87Zm9yKGxldCB0PTA7dDxsO3QrKyxoKz00KXt1PW5baF07ZVt0PDwxXT11WzRdO2VbMSsodDw8MSldPXVbNV19YS5zcGxpY2Uocyw0Kmwsci5PUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0UmVwZWF0KTtuLnNwbGljZShzLDQqbCxbZixnLHAsbSxiLGVdKX1lbHNle2w9TWF0aC5taW4obCwxMDApO2NvbnN0IGU9W107Zm9yKGxldCB0PTA7dDxsO3QrKyl7dT1uW28rKHQ8PDIpXTtjb25zdCBhPW5bYysodDw8MildWzBdO2UucHVzaCh7ZGF0YTphLmRhdGEsd2lkdGg6YS53aWR0aCxoZWlnaHQ6YS5oZWlnaHQsaW50ZXJwb2xhdGU6YS5pbnRlcnBvbGF0ZSxjb3VudDphLmNvdW50LHRyYW5zZm9ybTp1fSl9YS5zcGxpY2Uocyw0Kmwsci5PUFMucGFpbnRJbWFnZU1hc2tYT2JqZWN0R3JvdXApO24uc3BsaWNlKHMsNCpsLFtlXSl9cmV0dXJuIHMrMX0pKTthZGRTdGF0ZShuLFtyLk9QUy5zYXZlLHIuT1BTLnRyYW5zZm9ybSxyLk9QUy5wYWludEltYWdlWE9iamVjdCxyLk9QUy5yZXN0b3JlXSwoZnVuY3Rpb24oZSl7Y29uc3QgdD1lLmFyZ3NBcnJheSxhPWUuaUN1cnItMjtyZXR1cm4gMD09PXRbYV1bMV0mJjA9PT10W2FdWzJdfSksKGZ1bmN0aW9uIGl0ZXJhdGVJbWFnZUdyb3VwKGUsdCl7Y29uc3QgYT1lLmZuQXJyYXksbj1lLmFyZ3NBcnJheSxpPSh0LShlLmlDdXJyLTMpKSU0O3N3aXRjaChpKXtjYXNlIDA6cmV0dXJuIGFbdF09PT1yLk9QUy5zYXZlO2Nhc2UgMTppZihhW3RdIT09ci5PUFMudHJhbnNmb3JtKXJldHVybiExO2NvbnN0IGk9ZS5pQ3Vyci0yLHM9bltpXVswXSxvPW5baV1bM107cmV0dXJuIG5bdF1bMF09PT1zJiYwPT09blt0XVsxXSYmMD09PW5bdF1bMl0mJm5bdF1bM109PT1vO2Nhc2UgMjppZihhW3RdIT09ci5PUFMucGFpbnRJbWFnZVhPYmplY3QpcmV0dXJuITE7Y29uc3QgYz1uW2UuaUN1cnItMV1bMF07cmV0dXJuIG5bdF1bMF09PT1jO2Nhc2UgMzpyZXR1cm4gYVt0XT09PXIuT1BTLnJlc3RvcmV9dGhyb3cgbmV3IEVycm9yKGBpdGVyYXRlSW1hZ2VHcm91cCAtIGludmFsaWQgcG9zOiAke2l9YCl9KSwoZnVuY3Rpb24oZSx0KXtjb25zdCBhPWUuZm5BcnJheSxuPWUuYXJnc0FycmF5LGk9ZS5pQ3VycixzPWktMyxvPWktMixjPW5baS0xXVswXSxsPW5bb11bMF0saD1uW29dWzNdLHU9TWF0aC5taW4oTWF0aC5mbG9vcigodC1zKS80KSwxZTMpO2lmKHU8MylyZXR1cm4gdC0odC1zKSU0O2NvbnN0IGQ9bmV3IEZsb2F0MzJBcnJheSgyKnUpO2xldCBmPW87Zm9yKGxldCBlPTA7ZTx1O2UrKyxmKz00KXtjb25zdCB0PW5bZl07ZFtlPDwxXT10WzRdO2RbMSsoZTw8MSldPXRbNV19Y29uc3QgZz1bYyxsLGgsZF07YS5zcGxpY2Uocyw0KnUsci5PUFMucGFpbnRJbWFnZVhPYmplY3RSZXBlYXQpO24uc3BsaWNlKHMsNCp1LGcpO3JldHVybiBzKzF9KSk7YWRkU3RhdGUobixbci5PUFMuYmVnaW5UZXh0LHIuT1BTLnNldEZvbnQsci5PUFMuc2V0VGV4dE1hdHJpeCxyLk9QUy5zaG93VGV4dCxyLk9QUy5lbmRUZXh0XSxudWxsLChmdW5jdGlvbiBpdGVyYXRlU2hvd1RleHRHcm91cChlLHQpe2NvbnN0IGE9ZS5mbkFycmF5LG49ZS5hcmdzQXJyYXksaT0odC0oZS5pQ3Vyci00KSklNTtzd2l0Y2goaSl7Y2FzZSAwOnJldHVybiBhW3RdPT09ci5PUFMuYmVnaW5UZXh0O2Nhc2UgMTpyZXR1cm4gYVt0XT09PXIuT1BTLnNldEZvbnQ7Y2FzZSAyOnJldHVybiBhW3RdPT09ci5PUFMuc2V0VGV4dE1hdHJpeDtjYXNlIDM6aWYoYVt0XSE9PXIuT1BTLnNob3dUZXh0KXJldHVybiExO2NvbnN0IGk9ZS5pQ3Vyci0zLHM9bltpXVswXSxvPW5baV1bMV07cmV0dXJuIG5bdF1bMF09PT1zJiZuW3RdWzFdPT09bztjYXNlIDQ6cmV0dXJuIGFbdF09PT1yLk9QUy5lbmRUZXh0fXRocm93IG5ldyBFcnJvcihgaXRlcmF0ZVNob3dUZXh0R3JvdXAgLSBpbnZhbGlkIHBvczogJHtpfWApfSksKGZ1bmN0aW9uKGUsdCl7Y29uc3QgYT1lLmZuQXJyYXkscj1lLmFyZ3NBcnJheSxuPWUuaUN1cnIsaT1uLTQscz1uLTMsbz1uLTIsYz1uLTEsbD1uLGg9cltzXVswXSx1PXJbc11bMV07bGV0IGQ9TWF0aC5taW4oTWF0aC5mbG9vcigodC1pKS81KSwxZTMpO2lmKGQ8MylyZXR1cm4gdC0odC1pKSU1O2xldCBmPWk7aWYoaT49NCYmYVtpLTRdPT09YVtzXSYmYVtpLTNdPT09YVtvXSYmYVtpLTJdPT09YVtjXSYmYVtpLTFdPT09YVtsXSYmcltpLTRdWzBdPT09aCYmcltpLTRdWzFdPT09dSl7ZCsrO2YtPTV9bGV0IGc9Zis0O2ZvcihsZXQgZT0xO2U8ZDtlKyspe2Euc3BsaWNlKGcsMyk7ci5zcGxpY2UoZywzKTtnKz0yfXJldHVybiBnKzF9KSk7Y2xhc3MgTnVsbE9wdGltaXplcntjb25zdHJ1Y3RvcihlKXt0aGlzLnF1ZXVlPWV9X29wdGltaXplKCl7fXB1c2goZSx0KXt0aGlzLnF1ZXVlLmZuQXJyYXkucHVzaChlKTt0aGlzLnF1ZXVlLmFyZ3NBcnJheS5wdXNoKHQpO3RoaXMuX29wdGltaXplKCl9Zmx1c2goKXt9cmVzZXQoKXt9fWNsYXNzIFF1ZXVlT3B0aW1pemVyIGV4dGVuZHMgTnVsbE9wdGltaXplcntjb25zdHJ1Y3RvcihlKXtzdXBlcihlKTt0aGlzLnN0YXRlPW51bGw7dGhpcy5jb250ZXh0PXtpQ3VycjowLGZuQXJyYXk6ZS5mbkFycmF5LGFyZ3NBcnJheTplLmFyZ3NBcnJheSxpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDohMX07dGhpcy5tYXRjaD1udWxsO3RoaXMubGFzdFByb2Nlc3NlZD0wfXNldCBpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZChlKXt0aGlzLmNvbnRleHQuaXNPZmZzY3JlZW5DYW52YXNTdXBwb3J0ZWQ9ZX1fb3B0aW1pemUoKXtjb25zdCBlPXRoaXMucXVldWUuZm5BcnJheTtsZXQgdD10aGlzLmxhc3RQcm9jZXNzZWQsYT1lLmxlbmd0aCxyPXRoaXMuc3RhdGUsaT10aGlzLm1hdGNoO2lmKCFyJiYhaSYmdCsxPT09YSYmIW5bZVt0XV0pe3RoaXMubGFzdFByb2Nlc3NlZD1hO3JldHVybn1jb25zdCBzPXRoaXMuY29udGV4dDtmb3IoO3Q8YTspe2lmKGkpe2lmKCgwLGkuaXRlcmF0ZUZuKShzLHQpKXt0Kys7Y29udGludWV9dD0oMCxpLnByb2Nlc3NGbikocyx0KzEpO2E9ZS5sZW5ndGg7aT1udWxsO3I9bnVsbDtpZih0Pj1hKWJyZWFrfXI9KHJ8fG4pW2VbdF1dO2lmKHImJiFBcnJheS5pc0FycmF5KHIpKXtzLmlDdXJyPXQ7dCsrO2lmKCFyLmNoZWNrRm58fCgwLHIuY2hlY2tGbikocykpe2k9cjtyPW51bGx9ZWxzZSByPW51bGx9ZWxzZSB0Kyt9dGhpcy5zdGF0ZT1yO3RoaXMubWF0Y2g9aTt0aGlzLmxhc3RQcm9jZXNzZWQ9dH1mbHVzaCgpe2Zvcig7dGhpcy5tYXRjaDspe2NvbnN0IGU9dGhpcy5xdWV1ZS5mbkFycmF5Lmxlbmd0aDt0aGlzLmxhc3RQcm9jZXNzZWQ9KDAsdGhpcy5tYXRjaC5wcm9jZXNzRm4pKHRoaXMuY29udGV4dCxlKTt0aGlzLm1hdGNoPW51bGw7dGhpcy5zdGF0ZT1udWxsO3RoaXMuX29wdGltaXplKCl9fXJlc2V0KCl7dGhpcy5zdGF0ZT1udWxsO3RoaXMubWF0Y2g9bnVsbDt0aGlzLmxhc3RQcm9jZXNzZWQ9MH19Y2xhc3MgT3BlcmF0b3JMaXN0e3N0YXRpYyBDSFVOS19TSVpFPTFlMztzdGF0aWMgQ0hVTktfU0laRV9BQk9VVD10aGlzLkNIVU5LX1NJWkUtNTtjb25zdHJ1Y3RvcihlPTAsdCl7dGhpcy5fc3RyZWFtU2luaz10O3RoaXMuZm5BcnJheT1bXTt0aGlzLmFyZ3NBcnJheT1bXTt0aGlzLm9wdGltaXplcj0hdHx8ZSZyLlJlbmRlcmluZ0ludGVudEZsYWcuT1BMSVNUP25ldyBOdWxsT3B0aW1pemVyKHRoaXMpOm5ldyBRdWV1ZU9wdGltaXplcih0aGlzKTt0aGlzLmRlcGVuZGVuY2llcz1uZXcgU2V0O3RoaXMuX3RvdGFsTGVuZ3RoPTA7dGhpcy53ZWlnaHQ9MDt0aGlzLl9yZXNvbHZlZD10P251bGw6UHJvbWlzZS5yZXNvbHZlKCl9c2V0IGlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkKGUpe3RoaXMub3B0aW1pemVyLmlzT2Zmc2NyZWVuQ2FudmFzU3VwcG9ydGVkPWV9Z2V0IGxlbmd0aCgpe3JldHVybiB0aGlzLmFyZ3NBcnJheS5sZW5ndGh9Z2V0IHJlYWR5KCl7cmV0dXJuIHRoaXMuX3Jlc29sdmVkfHx0aGlzLl9zdHJlYW1TaW5rLnJlYWR5fWdldCB0b3RhbExlbmd0aCgpe3JldHVybiB0aGlzLl90b3RhbExlbmd0aCt0aGlzLmxlbmd0aH1hZGRPcChlLHQpe3RoaXMub3B0aW1pemVyLnB1c2goZSx0KTt0aGlzLndlaWdodCsrO3RoaXMuX3N0cmVhbVNpbmsmJih0aGlzLndlaWdodD49T3BlcmF0b3JMaXN0LkNIVU5LX1NJWkV8fHRoaXMud2VpZ2h0Pj1PcGVyYXRvckxpc3QuQ0hVTktfU0laRV9BQk9VVCYmKGU9PT1yLk9QUy5yZXN0b3JlfHxlPT09ci5PUFMuZW5kVGV4dCkpJiZ0aGlzLmZsdXNoKCl9YWRkSW1hZ2VPcHMoZSx0LGEpe3ZvaWQgMCE9PWEmJnRoaXMuYWRkT3Aoci5PUFMuYmVnaW5NYXJrZWRDb250ZW50UHJvcHMsWyJPQyIsYV0pO3RoaXMuYWRkT3AoZSx0KTt2b2lkIDAhPT1hJiZ0aGlzLmFkZE9wKHIuT1BTLmVuZE1hcmtlZENvbnRlbnQsW10pfWFkZERlcGVuZGVuY3koZSl7aWYoIXRoaXMuZGVwZW5kZW5jaWVzLmhhcyhlKSl7dGhpcy5kZXBlbmRlbmNpZXMuYWRkKGUpO3RoaXMuYWRkT3Aoci5PUFMuZGVwZW5kZW5jeSxbZV0pfX1hZGREZXBlbmRlbmNpZXMoZSl7Zm9yKGNvbnN0IHQgb2YgZSl0aGlzLmFkZERlcGVuZGVuY3kodCl9YWRkT3BMaXN0KGUpe2lmKGUgaW5zdGFuY2VvZiBPcGVyYXRvckxpc3Qpe2Zvcihjb25zdCB0IG9mIGUuZGVwZW5kZW5jaWVzKXRoaXMuZGVwZW5kZW5jaWVzLmFkZCh0KTtmb3IobGV0IHQ9MCxhPWUubGVuZ3RoO3Q8YTt0KyspdGhpcy5hZGRPcChlLmZuQXJyYXlbdF0sZS5hcmdzQXJyYXlbdF0pfWVsc2UoMCxyLndhcm4pKCdhZGRPcExpc3QgLSBpZ25vcmluZyBpbnZhbGlkICJvcExpc3QiIHBhcmFtZXRlci4nKX1nZXRJUigpe3JldHVybntmbkFycmF5OnRoaXMuZm5BcnJheSxhcmdzQXJyYXk6dGhpcy5hcmdzQXJyYXksbGVuZ3RoOnRoaXMubGVuZ3RofX1nZXQgX3RyYW5zZmVycygpe2NvbnN0IGU9W10se2ZuQXJyYXk6dCxhcmdzQXJyYXk6YSxsZW5ndGg6bn09dGhpcztmb3IobGV0IGk9MDtpPG47aSsrKXN3aXRjaCh0W2ldKXtjYXNlIHIuT1BTLnBhaW50SW5saW5lSW1hZ2VYT2JqZWN0OmNhc2Ugci5PUFMucGFpbnRJbmxpbmVJbWFnZVhPYmplY3RHcm91cDpjYXNlIHIuT1BTLnBhaW50SW1hZ2VNYXNrWE9iamVjdDpjb25zdCB0PWFbaV1bMF07IXQuY2FjaGVkJiZ0LmRhdGE/LmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyJiZlLnB1c2godC5kYXRhLmJ1ZmZlcil9cmV0dXJuIGV9Zmx1c2goZT0hMSx0PW51bGwpe3RoaXMub3B0aW1pemVyLmZsdXNoKCk7Y29uc3QgYT10aGlzLmxlbmd0aDt0aGlzLl90b3RhbExlbmd0aCs9YTt0aGlzLl9zdHJlYW1TaW5rLmVucXVldWUoe2ZuQXJyYXk6dGhpcy5mbkFycmF5LGFyZ3NBcnJheTp0aGlzLmFyZ3NBcnJheSxsYXN0Q2h1bms6ZSxzZXBhcmF0ZUFubm90czp0LGxlbmd0aDphfSwxLHRoaXMuX3RyYW5zZmVycyk7dGhpcy5kZXBlbmRlbmNpZXMuY2xlYXIoKTt0aGlzLmZuQXJyYXkubGVuZ3RoPTA7dGhpcy5hcmdzQXJyYXkubGVuZ3RoPTA7dGhpcy53ZWlnaHQ9MDt0aGlzLm9wdGltaXplci5yZXNldCgpfX10Lk9wZXJhdG9yTGlzdD1PcGVyYXRvckxpc3R9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5QREZJbWFnZT12b2lkIDA7dmFyIHI9YSgyKSxuPWEoMjgpLGk9YSg1KSxzPWEoMTIpLG89YSgxOCksYz1hKDYyKSxsPWEoMjYpLGg9YSgzMCksdT1hKDQpO2Z1bmN0aW9uIGRlY29kZUFuZENsYW1wKGUsdCxhLHIpeyhlPXQrZSphKTwwP2U9MDplPnImJihlPXIpO3JldHVybiBlfWZ1bmN0aW9uIHJlc2l6ZUltYWdlTWFzayhlLHQsYSxyLG4saSl7Y29uc3Qgcz1uKmk7bGV0IG87bz10PD04P25ldyBVaW50OEFycmF5KHMpOnQ8PTE2P25ldyBVaW50MTZBcnJheShzKTpuZXcgVWludDMyQXJyYXkocyk7Y29uc3QgYz1hL24sbD1yL2k7bGV0IGgsdSxkLGYsZz0wO2NvbnN0IHA9bmV3IFVpbnQxNkFycmF5KG4pLG09YTtmb3IoaD0wO2g8bjtoKyspcFtoXT1NYXRoLmZsb29yKGgqYyk7Zm9yKGg9MDtoPGk7aCsrKXtkPU1hdGguZmxvb3IoaCpsKSptO2Zvcih1PTA7dTxuO3UrKyl7Zj1kK3BbdV07b1tnKytdPWVbZl19fXJldHVybiBvfWNsYXNzIFBERkltYWdle2NvbnN0cnVjdG9yKHt4cmVmOmUscmVzOnQsaW1hZ2U6YSxpc0lubGluZTpuPSExLHNtYXNrOm89bnVsbCxtYXNrOmM9bnVsbCxpc01hc2s6bD0hMSxwZGZGdW5jdGlvbkZhY3Rvcnk6ZCxsb2NhbENvbG9yU3BhY2VDYWNoZTpmfSl7dGhpcy5pbWFnZT1hO2NvbnN0IGc9YS5kaWN0LHA9Zy5nZXQoIkYiLCJGaWx0ZXIiKTtsZXQgbTtpZihwIGluc3RhbmNlb2YgdS5OYW1lKW09cC5uYW1lO2Vsc2UgaWYoQXJyYXkuaXNBcnJheShwKSl7Y29uc3QgdD1lLmZldGNoSWZSZWYocFswXSk7dCBpbnN0YW5jZW9mIHUuTmFtZSYmKG09dC5uYW1lKX1zd2l0Y2gobSl7Y2FzZSJKUFhEZWNvZGUiOmNvbnN0IGU9bmV3IGguSnB4SW1hZ2U7ZS5wYXJzZUltYWdlUHJvcGVydGllcyhhLnN0cmVhbSk7YS5zdHJlYW0ucmVzZXQoKTthLndpZHRoPWUud2lkdGg7YS5oZWlnaHQ9ZS5oZWlnaHQ7YS5iaXRzUGVyQ29tcG9uZW50PWUuYml0c1BlckNvbXBvbmVudDthLm51bUNvbXBzPWUuY29tcG9uZW50c0NvdW50O2JyZWFrO2Nhc2UiSkJJRzJEZWNvZGUiOmEuYml0c1BlckNvbXBvbmVudD0xO2EubnVtQ29tcHM9MX1sZXQgYj1nLmdldCgiVyIsIldpZHRoIikseT1nLmdldCgiSCIsIkhlaWdodCIpO2lmKE51bWJlci5pc0ludGVnZXIoYS53aWR0aCkmJmEud2lkdGg+MCYmTnVtYmVyLmlzSW50ZWdlcihhLmhlaWdodCkmJmEuaGVpZ2h0PjAmJihhLndpZHRoIT09Ynx8YS5oZWlnaHQhPT15KSl7KDAsci53YXJuKSgiUERGSW1hZ2UgLSB1c2luZyB0aGUgV2lkdGgvSGVpZ2h0IG9mIHRoZSBpbWFnZSBkYXRhLCByYXRoZXIgdGhhbiB0aGUgaW1hZ2UgZGljdGlvbmFyeS4iKTtiPWEud2lkdGg7eT1hLmhlaWdodH1pZihiPDF8fHk8MSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgSW52YWxpZCBpbWFnZSB3aWR0aDogJHtifSBvciBoZWlnaHQ6ICR7eX1gKTt0aGlzLndpZHRoPWI7dGhpcy5oZWlnaHQ9eTt0aGlzLmludGVycG9sYXRlPWcuZ2V0KCJJIiwiSW50ZXJwb2xhdGUiKTt0aGlzLmltYWdlTWFzaz1nLmdldCgiSU0iLCJJbWFnZU1hc2siKXx8ITE7dGhpcy5tYXR0ZT1nLmdldCgiTWF0dGUiKXx8ITE7bGV0IHc9YS5iaXRzUGVyQ29tcG9uZW50O2lmKCF3KXt3PWcuZ2V0KCJCUEMiLCJCaXRzUGVyQ29tcG9uZW50Iik7aWYoIXcpe2lmKCF0aGlzLmltYWdlTWFzayl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgQml0cyBwZXIgY29tcG9uZW50IG1pc3NpbmcgaW4gaW1hZ2U6ICR7dGhpcy5pbWFnZU1hc2t9YCk7dz0xfX10aGlzLmJwYz13O2lmKCF0aGlzLmltYWdlTWFzayl7bGV0IGk9Zy5nZXRSYXcoIkNTIil8fGcuZ2V0UmF3KCJDb2xvclNwYWNlIik7aWYoIWkpeygwLHIuaW5mbykoIkpQWCBpbWFnZXMgKHdoaWNoIGRvIG5vdCByZXF1aXJlIGNvbG9yIHNwYWNlcykiKTtzd2l0Y2goYS5udW1Db21wcyl7Y2FzZSAxOmk9dS5OYW1lLmdldCgiRGV2aWNlR3JheSIpO2JyZWFrO2Nhc2UgMzppPXUuTmFtZS5nZXQoIkRldmljZVJHQiIpO2JyZWFrO2Nhc2UgNDppPXUuTmFtZS5nZXQoIkRldmljZUNNWUsiKTticmVhaztkZWZhdWx0OnRocm93IG5ldyBFcnJvcihgSlBYIGltYWdlcyB3aXRoICR7YS5udW1Db21wc30gY29sb3IgY29tcG9uZW50cyBub3Qgc3VwcG9ydGVkLmApfX10aGlzLmNvbG9yU3BhY2U9cy5Db2xvclNwYWNlLnBhcnNlKHtjczppLHhyZWY6ZSxyZXNvdXJjZXM6bj90Om51bGwscGRmRnVuY3Rpb25GYWN0b3J5OmQsbG9jYWxDb2xvclNwYWNlQ2FjaGU6Zn0pO3RoaXMubnVtQ29tcHM9dGhpcy5jb2xvclNwYWNlLm51bUNvbXBzfXRoaXMuZGVjb2RlPWcuZ2V0QXJyYXkoIkQiLCJEZWNvZGUiKTt0aGlzLm5lZWRzRGVjb2RlPSExO2lmKHRoaXMuZGVjb2RlJiYodGhpcy5jb2xvclNwYWNlJiYhdGhpcy5jb2xvclNwYWNlLmlzRGVmYXVsdERlY29kZSh0aGlzLmRlY29kZSx3KXx8bCYmIXMuQ29sb3JTcGFjZS5pc0RlZmF1bHREZWNvZGUodGhpcy5kZWNvZGUsMSkpKXt0aGlzLm5lZWRzRGVjb2RlPSEwO2NvbnN0IGU9KDE8PHcpLTE7dGhpcy5kZWNvZGVDb2VmZmljaWVudHM9W107dGhpcy5kZWNvZGVBZGRlbmRzPVtdO2NvbnN0IHQ9IkluZGV4ZWQiPT09dGhpcy5jb2xvclNwYWNlPy5uYW1lO2ZvcihsZXQgYT0wLHI9MDthPHRoaXMuZGVjb2RlLmxlbmd0aDthKz0yLCsrcil7Y29uc3Qgbj10aGlzLmRlY29kZVthXSxpPXRoaXMuZGVjb2RlW2ErMV07dGhpcy5kZWNvZGVDb2VmZmljaWVudHNbcl09dD8oaS1uKS9lOmktbjt0aGlzLmRlY29kZUFkZGVuZHNbcl09dD9uOmUqbn19aWYobyl0aGlzLnNtYXNrPW5ldyBQREZJbWFnZSh7eHJlZjplLHJlczp0LGltYWdlOm8saXNJbmxpbmU6bixwZGZGdW5jdGlvbkZhY3Rvcnk6ZCxsb2NhbENvbG9yU3BhY2VDYWNoZTpmfSk7ZWxzZSBpZihjKWlmKGMgaW5zdGFuY2VvZiBpLkJhc2VTdHJlYW0pe2MuZGljdC5nZXQoIklNIiwiSW1hZ2VNYXNrIik/dGhpcy5tYXNrPW5ldyBQREZJbWFnZSh7eHJlZjplLHJlczp0LGltYWdlOmMsaXNJbmxpbmU6bixpc01hc2s6ITAscGRmRnVuY3Rpb25GYWN0b3J5OmQsbG9jYWxDb2xvclNwYWNlQ2FjaGU6Zn0pOigwLHIud2FybikoIklnbm9yaW5nIC9NYXNrIGluIGltYWdlIHdpdGhvdXQgL0ltYWdlTWFzay4iKX1lbHNlIHRoaXMubWFzaz1jfXN0YXRpYyBhc3luYyBidWlsZEltYWdlKHt4cmVmOmUscmVzOnQsaW1hZ2U6YSxpc0lubGluZTpuPSExLHBkZkZ1bmN0aW9uRmFjdG9yeTpzLGxvY2FsQ29sb3JTcGFjZUNhY2hlOm99KXtjb25zdCBjPWE7bGV0IGw9bnVsbCxoPW51bGw7Y29uc3QgdT1hLmRpY3QuZ2V0KCJTTWFzayIpLGQ9YS5kaWN0LmdldCgiTWFzayIpO3U/dSBpbnN0YW5jZW9mIGkuQmFzZVN0cmVhbT9sPXU6KDAsci53YXJuKSgiVW5zdXBwb3J0ZWQgL1NNYXNrIGZvcm1hdC4iKTpkJiYoZCBpbnN0YW5jZW9mIGkuQmFzZVN0cmVhbXx8QXJyYXkuaXNBcnJheShkKT9oPWQ6KDAsci53YXJuKSgiVW5zdXBwb3J0ZWQgL01hc2sgZm9ybWF0LiIpKTtyZXR1cm4gbmV3IFBERkltYWdlKHt4cmVmOmUscmVzOnQsaW1hZ2U6Yyxpc0lubGluZTpuLHNtYXNrOmwsbWFzazpoLHBkZkZ1bmN0aW9uRmFjdG9yeTpzLGxvY2FsQ29sb3JTcGFjZUNhY2hlOm99KX1zdGF0aWMgY3JlYXRlUmF3TWFzayh7aW1nQXJyYXk6ZSx3aWR0aDp0LGhlaWdodDphLGltYWdlSXNGcm9tRGVjb2RlU3RyZWFtOnIsaW52ZXJzZURlY29kZTpuLGludGVycG9sYXRlOml9KXtjb25zdCBzPSh0Kzc+PjMpKmEsbz1lLmJ5dGVMZW5ndGg7bGV0IGMsbDtpZighcnx8biYmIShzPT09bykpaWYobil7Yz1uZXcgVWludDhBcnJheShzKTtjLnNldChlKTtjLmZpbGwoMjU1LG8pfWVsc2UgYz1uZXcgVWludDhBcnJheShlKTtlbHNlIGM9ZTtpZihuKWZvcihsPTA7bDxvO2wrKyljW2xdXj0yNTU7cmV0dXJue2RhdGE6Yyx3aWR0aDp0LGhlaWdodDphLGludGVycG9sYXRlOml9fXN0YXRpYyBhc3luYyBjcmVhdGVNYXNrKHtpbWdBcnJheTplLHdpZHRoOnQsaGVpZ2h0OmEsaW1hZ2VJc0Zyb21EZWNvZGVTdHJlYW06aSxpbnZlcnNlRGVjb2RlOnMsaW50ZXJwb2xhdGU6byxpc09mZnNjcmVlbkNhbnZhc1N1cHBvcnRlZDpsPSExfSl7Y29uc3QgaD0xPT09dCYmMT09PWEmJnM9PT0oMD09PWUubGVuZ3RofHwhISgxMjgmZVswXSkpO2lmKGgpcmV0dXJue2lzU2luZ2xlT3BhcXVlUGl4ZWw6aH07aWYobCl7aWYoYy5JbWFnZVJlc2l6ZXIubmVlZHNUb0JlUmVzaXplZCh0LGEpKXtjb25zdCBpPW5ldyBVaW50OENsYW1wZWRBcnJheSh0KmEqNCk7KDAsbi5jb252ZXJ0QmxhY2tBbmRXaGl0ZVRvUkdCQSkoe3NyYzplLGRlc3Q6aSx3aWR0aDp0LGhlaWdodDphLG5vbkJsYWNrQ29sb3I6MCxpbnZlcnNlRGVjb2RlOnN9KTtyZXR1cm4gYy5JbWFnZVJlc2l6ZXIuY3JlYXRlSW1hZ2Uoe2tpbmQ6ci5JbWFnZUtpbmQuUkdCQV8zMkJQUCxkYXRhOmksd2lkdGg6dCxoZWlnaHQ6YSxpbnRlcnBvbGF0ZTpvfSl9Y29uc3QgaT1uZXcgT2Zmc2NyZWVuQ2FudmFzKHQsYSksbD1pLmdldENvbnRleHQoIjJkIiksaD1sLmNyZWF0ZUltYWdlRGF0YSh0LGEpOygwLG4uY29udmVydEJsYWNrQW5kV2hpdGVUb1JHQkEpKHtzcmM6ZSxkZXN0OmguZGF0YSx3aWR0aDp0LGhlaWdodDphLG5vbkJsYWNrQ29sb3I6MCxpbnZlcnNlRGVjb2RlOnN9KTtsLnB1dEltYWdlRGF0YShoLDAsMCk7cmV0dXJue2RhdGE6bnVsbCx3aWR0aDp0LGhlaWdodDphLGludGVycG9sYXRlOm8sYml0bWFwOmkudHJhbnNmZXJUb0ltYWdlQml0bWFwKCl9fXJldHVybiB0aGlzLmNyZWF0ZVJhd01hc2soe2ltZ0FycmF5OmUsd2lkdGg6dCxoZWlnaHQ6YSxpbnZlcnNlRGVjb2RlOnMsaW1hZ2VJc0Zyb21EZWNvZGVTdHJlYW06aSxpbnRlcnBvbGF0ZTpvfSl9Z2V0IGRyYXdXaWR0aCgpe3JldHVybiBNYXRoLm1heCh0aGlzLndpZHRoLHRoaXMuc21hc2s/LndpZHRofHwwLHRoaXMubWFzaz8ud2lkdGh8fDApfWdldCBkcmF3SGVpZ2h0KCl7cmV0dXJuIE1hdGgubWF4KHRoaXMuaGVpZ2h0LHRoaXMuc21hc2s/LmhlaWdodHx8MCx0aGlzLm1hc2s/LmhlaWdodHx8MCl9ZGVjb2RlQnVmZmVyKGUpe2NvbnN0IHQ9dGhpcy5icGMsYT10aGlzLm51bUNvbXBzLHI9dGhpcy5kZWNvZGVBZGRlbmRzLG49dGhpcy5kZWNvZGVDb2VmZmljaWVudHMsaT0oMTw8dCktMTtsZXQgcyxvO2lmKDE9PT10KXtmb3Iocz0wLG89ZS5sZW5ndGg7czxvO3MrKyllW3NdPSshZVtzXTtyZXR1cm59bGV0IGM9MDtmb3Iocz0wLG89dGhpcy53aWR0aCp0aGlzLmhlaWdodDtzPG87cysrKWZvcihsZXQgdD0wO3Q8YTt0Kyspe2VbY109ZGVjb2RlQW5kQ2xhbXAoZVtjXSxyW3RdLG5bdF0saSk7YysrfX1nZXRDb21wb25lbnRzKGUpe2NvbnN0IHQ9dGhpcy5icGM7aWYoOD09PXQpcmV0dXJuIGU7Y29uc3QgYT10aGlzLndpZHRoLHI9dGhpcy5oZWlnaHQsbj10aGlzLm51bUNvbXBzLGk9YSpyKm47bGV0IHMsbz0wO3M9dDw9OD9uZXcgVWludDhBcnJheShpKTp0PD0xNj9uZXcgVWludDE2QXJyYXkoaSk6bmV3IFVpbnQzMkFycmF5KGkpO2NvbnN0IGM9YSpuLGw9KDE8PHQpLTE7bGV0IGgsdSxkPTA7aWYoMT09PXQpe2xldCB0LGEsbjtmb3IobGV0IGk9MDtpPHI7aSsrKXthPWQrKC04JmMpO249ZCtjO2Zvcig7ZDxhOyl7dT1lW28rK107c1tkXT11Pj43JjE7c1tkKzFdPXU+PjYmMTtzW2QrMl09dT4+NSYxO3NbZCszXT11Pj40JjE7c1tkKzRdPXU+PjMmMTtzW2QrNV09dT4+MiYxO3NbZCs2XT11Pj4xJjE7c1tkKzddPTEmdTtkKz04fWlmKGQ8bil7dT1lW28rK107dD0xMjg7Zm9yKDtkPG47KXtzW2QrK109KyEhKHUmdCk7dD4+PTF9fX19ZWxzZXtsZXQgYT0wO3U9MDtmb3IoZD0wLGg9aTtkPGg7KytkKXtpZihkJWM9PTApe3U9MDthPTB9Zm9yKDthPHQ7KXt1PXU8PDh8ZVtvKytdO2ErPTh9Y29uc3Qgcj1hLXQ7bGV0IG49dT4+cjtuPDA/bj0wOm4+bCYmKG49bCk7c1tkXT1uO3UmPSgxPDxyKS0xO2E9cn19cmV0dXJuIHN9ZmlsbE9wYWNpdHkoZSx0LGEsbixpKXtjb25zdCBzPXRoaXMuc21hc2ssbz10aGlzLm1hc2s7bGV0IGMsbCxoLHUsZCxmO2lmKHMpe2w9cy53aWR0aDtoPXMuaGVpZ2h0O2M9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGwqaCk7cy5maWxsR3JheUJ1ZmZlcihjKTtsPT09dCYmaD09PWF8fChjPXJlc2l6ZUltYWdlTWFzayhjLHMuYnBjLGwsaCx0LGEpKX1lbHNlIGlmKG8paWYobyBpbnN0YW5jZW9mIFBERkltYWdlKXtsPW8ud2lkdGg7aD1vLmhlaWdodDtjPW5ldyBVaW50OENsYW1wZWRBcnJheShsKmgpO28ubnVtQ29tcHM9MTtvLmZpbGxHcmF5QnVmZmVyKGMpO2Zvcih1PTAsZD1sKmg7dTxkOysrdSljW3VdPTI1NS1jW3VdO2w9PT10JiZoPT09YXx8KGM9cmVzaXplSW1hZ2VNYXNrKGMsby5icGMsbCxoLHQsYSkpfWVsc2V7aWYoIUFycmF5LmlzQXJyYXkobykpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIlVua25vd24gbWFzayBmb3JtYXQuIik7e2M9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KHQqYSk7Y29uc3QgZT10aGlzLm51bUNvbXBzO2Zvcih1PTAsZD10KmE7dTxkOysrdSl7bGV0IHQ9MDtjb25zdCBhPXUqZTtmb3IoZj0wO2Y8ZTsrK2Ype2NvbnN0IGU9aVthK2ZdLHI9MipmO2lmKGU8b1tyXXx8ZT5vW3IrMV0pe3Q9MjU1O2JyZWFrfX1jW3VdPXR9fX1pZihjKWZvcih1PTAsZj0zLGQ9dCpuO3U8ZDsrK3UsZis9NCllW2ZdPWNbdV07ZWxzZSBmb3IodT0wLGY9MyxkPXQqbjt1PGQ7Kyt1LGYrPTQpZVtmXT0yNTV9dW5kb1ByZWJsZW5kKGUsdCxhKXtjb25zdCByPXRoaXMuc21hc2s/Lm1hdHRlO2lmKCFyKXJldHVybjtjb25zdCBuPXRoaXMuY29sb3JTcGFjZS5nZXRSZ2IociwwKSxpPW5bMF0scz1uWzFdLG89blsyXSxjPXQqYSo0O2ZvcihsZXQgdD0wO3Q8Yzt0Kz00KXtjb25zdCBhPWVbdCszXTtpZigwPT09YSl7ZVt0XT0yNTU7ZVt0KzFdPTI1NTtlW3QrMl09MjU1O2NvbnRpbnVlfWNvbnN0IHI9MjU1L2E7ZVt0XT0oZVt0XS1pKSpyK2k7ZVt0KzFdPShlW3QrMV0tcykqcitzO2VbdCsyXT0oZVt0KzJdLW8pKnIrb319YXN5bmMgY3JlYXRlSW1hZ2VEYXRhKGU9ITEsdD0hMSl7Y29uc3QgYT10aGlzLmRyYXdXaWR0aCxuPXRoaXMuZHJhd0hlaWdodCxpPXt3aWR0aDphLGhlaWdodDpuLGludGVycG9sYXRlOnRoaXMuaW50ZXJwb2xhdGUsa2luZDowLGRhdGE6bnVsbH0scz10aGlzLm51bUNvbXBzLG89dGhpcy53aWR0aCxoPXRoaXMuaGVpZ2h0LHU9dGhpcy5icGMsZD1vKnMqdSs3Pj4zLGY9dCYmYy5JbWFnZVJlc2l6ZXIubmVlZHNUb0JlUmVzaXplZChhLG4pO2lmKCFlKXtsZXQgZTsiRGV2aWNlR3JheSI9PT10aGlzLmNvbG9yU3BhY2UubmFtZSYmMT09PXU/ZT1yLkltYWdlS2luZC5HUkFZU0NBTEVfMUJQUDoiRGV2aWNlUkdCIiE9PXRoaXMuY29sb3JTcGFjZS5uYW1lfHw4IT09dXx8dGhpcy5uZWVkc0RlY29kZXx8KGU9ci5JbWFnZUtpbmQuUkdCXzI0QlBQKTtpZihlJiYhdGhpcy5zbWFzayYmIXRoaXMubWFzayYmYT09PW8mJm49PT1oKXtjb25zdCBzPXRoaXMuZ2V0SW1hZ2VCeXRlcyhoKmQse30pO2lmKHQpcmV0dXJuIGY/Yy5JbWFnZVJlc2l6ZXIuY3JlYXRlSW1hZ2Uoe2RhdGE6cyxraW5kOmUsd2lkdGg6YSxoZWlnaHQ6bixpbnRlcnBvbGF0ZTp0aGlzLmludGVycG9sYXRlfSx0aGlzLm5lZWRzRGVjb2RlKTp0aGlzLmNyZWF0ZUJpdG1hcChlLG8saCxzKTtpLmtpbmQ9ZTtpLmRhdGE9cztpZih0aGlzLm5lZWRzRGVjb2RlKXsoMCxyLmFzc2VydCkoZT09PXIuSW1hZ2VLaW5kLkdSQVlTQ0FMRV8xQlBQLCJQREZJbWFnZS5jcmVhdGVJbWFnZURhdGE6IFRoZSBpbWFnZSBtdXN0IGJlIGdyYXlzY2FsZS4iKTtjb25zdCB0PWkuZGF0YTtmb3IobGV0IGU9MCxhPXQubGVuZ3RoO2U8YTtlKyspdFtlXV49MjU1fXJldHVybiBpfWlmKHRoaXMuaW1hZ2UgaW5zdGFuY2VvZiBsLkpwZWdTdHJlYW0mJiF0aGlzLnNtYXNrJiYhdGhpcy5tYXNrJiYhdGhpcy5uZWVkc0RlY29kZSl7bGV0IGU9aCpkO2lmKHQmJiFmKXtsZXQgdD0hMTtzd2l0Y2godGhpcy5jb2xvclNwYWNlLm5hbWUpe2Nhc2UiRGV2aWNlR3JheSI6ZSo9NDt0PSEwO2JyZWFrO2Nhc2UiRGV2aWNlUkdCIjplPWUvMyo0O3Q9ITA7YnJlYWs7Y2FzZSJEZXZpY2VDTVlLIjp0PSEwfWlmKHQpe2NvbnN0IHQ9dGhpcy5nZXRJbWFnZUJ5dGVzKGUse2RyYXdXaWR0aDphLGRyYXdIZWlnaHQ6bixmb3JjZVJHQkE6ITB9KTtyZXR1cm4gdGhpcy5jcmVhdGVCaXRtYXAoci5JbWFnZUtpbmQuUkdCQV8zMkJQUCxhLG4sdCl9fWVsc2Ugc3dpdGNoKHRoaXMuY29sb3JTcGFjZS5uYW1lKXtjYXNlIkRldmljZUdyYXkiOmUqPTM7Y2FzZSJEZXZpY2VSR0IiOmNhc2UiRGV2aWNlQ01ZSyI6aS5raW5kPXIuSW1hZ2VLaW5kLlJHQl8yNEJQUDtpLmRhdGE9dGhpcy5nZXRJbWFnZUJ5dGVzKGUse2RyYXdXaWR0aDphLGRyYXdIZWlnaHQ6bixmb3JjZVJHQjohMH0pO3JldHVybiBmP2MuSW1hZ2VSZXNpemVyLmNyZWF0ZUltYWdlKGkpOml9fX1jb25zdCBnPXRoaXMuZ2V0SW1hZ2VCeXRlcyhoKmQse2ludGVybmFsOiEwfSkscD0wfGcubGVuZ3RoL2Qqbi9oLG09dGhpcy5nZXRDb21wb25lbnRzKGcpO2xldCBiLHksdyxTLHgsQztpZih0JiYhZil7dz1uZXcgT2Zmc2NyZWVuQ2FudmFzKGEsbik7Uz13LmdldENvbnRleHQoIjJkIik7eD1TLmNyZWF0ZUltYWdlRGF0YShhLG4pO0M9eC5kYXRhfWkua2luZD1yLkltYWdlS2luZC5SR0JBXzMyQlBQO2lmKGV8fHRoaXMuc21hc2t8fHRoaXMubWFzayl7dCYmIWZ8fChDPW5ldyBVaW50OENsYW1wZWRBcnJheShhKm4qNCkpO2I9MTt5PSEwO3RoaXMuZmlsbE9wYWNpdHkoQyxhLG4scCxtKX1lbHNle2lmKCF0fHxmKXtpLmtpbmQ9ci5JbWFnZUtpbmQuUkdCXzI0QlBQO0M9bmV3IFVpbnQ4Q2xhbXBlZEFycmF5KGEqbiozKTtiPTB9ZWxzZXtuZXcgVWludDMyQXJyYXkoQy5idWZmZXIpLmZpbGwoci5GZWF0dXJlVGVzdC5pc0xpdHRsZUVuZGlhbj80Mjc4MTkwMDgwOjI1NSk7Yj0xfXk9ITF9dGhpcy5uZWVkc0RlY29kZSYmdGhpcy5kZWNvZGVCdWZmZXIobSk7dGhpcy5jb2xvclNwYWNlLmZpbGxSZ2IoQyxvLGgsYSxuLHAsdSxtLGIpO3kmJnRoaXMudW5kb1ByZWJsZW5kKEMsYSxwKTtpZih0JiYhZil7Uy5wdXRJbWFnZURhdGEoeCwwLDApO3JldHVybntkYXRhOm51bGwsd2lkdGg6YSxoZWlnaHQ6bixiaXRtYXA6dy50cmFuc2ZlclRvSW1hZ2VCaXRtYXAoKSxpbnRlcnBvbGF0ZTp0aGlzLmludGVycG9sYXRlfX1pLmRhdGE9QztyZXR1cm4gZj9jLkltYWdlUmVzaXplci5jcmVhdGVJbWFnZShpKTppfWZpbGxHcmF5QnVmZmVyKGUpe2NvbnN0IHQ9dGhpcy5udW1Db21wcztpZigxIT09dCl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgUmVhZGluZyBncmF5IHNjYWxlIGZyb20gYSBjb2xvciBpbWFnZTogJHt0fWApO2NvbnN0IGE9dGhpcy53aWR0aCxuPXRoaXMuaGVpZ2h0LGk9dGhpcy5icGMscz1hKnQqaSs3Pj4zLG89dGhpcy5nZXRJbWFnZUJ5dGVzKG4qcyx7aW50ZXJuYWw6ITB9KSxjPXRoaXMuZ2V0Q29tcG9uZW50cyhvKTtsZXQgbCxoO2lmKDE9PT1pKXtoPWEqbjtpZih0aGlzLm5lZWRzRGVjb2RlKWZvcihsPTA7bDxoOysrbCllW2xdPWNbbF0tMSYyNTU7ZWxzZSBmb3IobD0wO2w8aDsrK2wpZVtsXT0yNTUmLWNbbF07cmV0dXJufXRoaXMubmVlZHNEZWNvZGUmJnRoaXMuZGVjb2RlQnVmZmVyKGMpO2g9YSpuO2NvbnN0IHU9MjU1LygoMTw8aSktMSk7Zm9yKGw9MDtsPGg7KytsKWVbbF09dSpjW2xdfWNyZWF0ZUJpdG1hcChlLHQsYSxpKXtjb25zdCBzPW5ldyBPZmZzY3JlZW5DYW52YXModCxhKSxvPXMuZ2V0Q29udGV4dCgiMmQiKTtsZXQgYztpZihlPT09ci5JbWFnZUtpbmQuUkdCQV8zMkJQUCljPW5ldyBJbWFnZURhdGEoaSx0LGEpO2Vsc2V7Yz1vLmNyZWF0ZUltYWdlRGF0YSh0LGEpOygwLG4uY29udmVydFRvUkdCQSkoe2tpbmQ6ZSxzcmM6aSxkZXN0Om5ldyBVaW50MzJBcnJheShjLmRhdGEuYnVmZmVyKSx3aWR0aDp0LGhlaWdodDphLGludmVyc2VEZWNvZGU6dGhpcy5uZWVkc0RlY29kZX0pfW8ucHV0SW1hZ2VEYXRhKGMsMCwwKTtyZXR1cm57ZGF0YTpudWxsLHdpZHRoOnQsaGVpZ2h0OmEsYml0bWFwOnMudHJhbnNmZXJUb0ltYWdlQml0bWFwKCksaW50ZXJwb2xhdGU6dGhpcy5pbnRlcnBvbGF0ZX19Z2V0SW1hZ2VCeXRlcyhlLHtkcmF3V2lkdGg6dCxkcmF3SGVpZ2h0OmEsZm9yY2VSR0JBOm49ITEsZm9yY2VSR0I6aT0hMSxpbnRlcm5hbDpzPSExfSl7dGhpcy5pbWFnZS5yZXNldCgpO3RoaXMuaW1hZ2UuZHJhd1dpZHRoPXR8fHRoaXMud2lkdGg7dGhpcy5pbWFnZS5kcmF3SGVpZ2h0PWF8fHRoaXMuaGVpZ2h0O3RoaXMuaW1hZ2UuZm9yY2VSR0JBPSEhbjt0aGlzLmltYWdlLmZvcmNlUkdCPSEhaTtjb25zdCBjPXRoaXMuaW1hZ2UuZ2V0Qnl0ZXMoZSk7aWYoc3x8dGhpcy5pbWFnZSBpbnN0YW5jZW9mIG8uRGVjb2RlU3RyZWFtKXJldHVybiBjOygwLHIuYXNzZXJ0KShjIGluc3RhbmNlb2YgVWludDhBcnJheSwnUERGSW1hZ2UuZ2V0SW1hZ2VCeXRlczogVW5zdXBwb3J0ZWQgImltYWdlQnl0ZXMiIHR5cGUuJyk7cmV0dXJuIG5ldyBVaW50OEFycmF5KGMpfX10LlBERkltYWdlPVBERkltYWdlfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuQ2F0YWxvZz12b2lkIDA7dmFyIHI9YSgzKSxuPWEoMiksaT1hKDQpLHM9YSg2Nyksbz1hKDUpLGM9YSg2OCksbD1hKDEyKSxoPWEoNjkpLHU9YSg1OSksZD1hKDcwKSxmPWEoNzIpO2Z1bmN0aW9uIGZldGNoRGVzdGluYXRpb24oZSl7ZSBpbnN0YW5jZW9mIGkuRGljdCYmKGU9ZS5nZXQoIkQiKSk7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZTpudWxsfWNsYXNzIENhdGFsb2d7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnBkZk1hbmFnZXI9ZTt0aGlzLnhyZWY9dDt0aGlzLl9jYXREaWN0PXQuZ2V0Q2F0YWxvZ09iaigpO2lmKCEodGhpcy5fY2F0RGljdCBpbnN0YW5jZW9mIGkuRGljdCkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIkNhdGFsb2cgb2JqZWN0IGlzIG5vdCBhIGRpY3Rpb25hcnkuIik7dGhpcy50b3BsZXZlbFBhZ2VzRGljdDt0aGlzLl9hY3R1YWxOdW1QYWdlcz1udWxsO3RoaXMuZm9udENhY2hlPW5ldyBpLlJlZlNldENhY2hlO3RoaXMuYnVpbHRJbkNNYXBDYWNoZT1uZXcgTWFwO3RoaXMuc3RhbmRhcmRGb250RGF0YUNhY2hlPW5ldyBNYXA7dGhpcy5nbG9iYWxJbWFnZUNhY2hlPW5ldyB1Lkdsb2JhbEltYWdlQ2FjaGU7dGhpcy5wYWdlS2lkc0NvdW50Q2FjaGU9bmV3IGkuUmVmU2V0Q2FjaGU7dGhpcy5wYWdlSW5kZXhDYWNoZT1uZXcgaS5SZWZTZXRDYWNoZTt0aGlzLm5vbkJsZW5kTW9kZXNTZXQ9bmV3IGkuUmVmU2V0O3RoaXMuc3lzdGVtRm9udENhY2hlPW5ldyBNYXB9Y2xvbmVEaWN0KCl7cmV0dXJuIHRoaXMuX2NhdERpY3QuY2xvbmUoKX1nZXQgdmVyc2lvbigpe2NvbnN0IGU9dGhpcy5fY2F0RGljdC5nZXQoIlZlcnNpb24iKTtpZihlIGluc3RhbmNlb2YgaS5OYW1lKXtpZihyLlBERl9WRVJTSU9OX1JFR0VYUC50ZXN0KGUubmFtZSkpcmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsInZlcnNpb24iLGUubmFtZSk7KDAsbi53YXJuKShgSW52YWxpZCBQREYgY2F0YWxvZyB2ZXJzaW9uOiAke2UubmFtZX1gKX1yZXR1cm4oMCxuLnNoYWRvdykodGhpcywidmVyc2lvbiIsbnVsbCl9Z2V0IGxhbmcoKXtjb25zdCBlPXRoaXMuX2NhdERpY3QuZ2V0KCJMYW5nIik7cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsImxhbmciLCJzdHJpbmciPT10eXBlb2YgZT8oMCxuLnN0cmluZ1RvUERGU3RyaW5nKShlKTpudWxsKX1nZXQgbmVlZHNSZW5kZXJpbmcoKXtjb25zdCBlPXRoaXMuX2NhdERpY3QuZ2V0KCJOZWVkc1JlbmRlcmluZyIpO3JldHVybigwLG4uc2hhZG93KSh0aGlzLCJuZWVkc1JlbmRlcmluZyIsImJvb2xlYW4iPT10eXBlb2YgZSYmZSl9Z2V0IGNvbGxlY3Rpb24oKXtsZXQgZT1udWxsO3RyeXtjb25zdCB0PXRoaXMuX2NhdERpY3QuZ2V0KCJDb2xsZWN0aW9uIik7dCBpbnN0YW5jZW9mIGkuRGljdCYmdC5zaXplPjAmJihlPXQpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiByLk1pc3NpbmdEYXRhRXhjZXB0aW9uKXRocm93IGU7KDAsbi5pbmZvKSgiQ2Fubm90IGZldGNoIENvbGxlY3Rpb24gZW50cnk7IGFzc3VtaW5nIG5vIGNvbGxlY3Rpb24gaXMgcHJlc2VudC4iKX1yZXR1cm4oMCxuLnNoYWRvdykodGhpcywiY29sbGVjdGlvbiIsZSl9Z2V0IGFjcm9Gb3JtKCl7bGV0IGU9bnVsbDt0cnl7Y29uc3QgdD10aGlzLl9jYXREaWN0LmdldCgiQWNyb0Zvcm0iKTt0IGluc3RhbmNlb2YgaS5EaWN0JiZ0LnNpemU+MCYmKGU9dCl9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIHIuTWlzc2luZ0RhdGFFeGNlcHRpb24pdGhyb3cgZTsoMCxuLmluZm8pKCJDYW5ub3QgZmV0Y2ggQWNyb0Zvcm0gZW50cnk7IGFzc3VtaW5nIG5vIGZvcm1zIGFyZSBwcmVzZW50LiIpfXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJhY3JvRm9ybSIsZSl9Z2V0IGFjcm9Gb3JtUmVmKCl7Y29uc3QgZT10aGlzLl9jYXREaWN0LmdldFJhdygiQWNyb0Zvcm0iKTtyZXR1cm4oMCxuLnNoYWRvdykodGhpcywiYWNyb0Zvcm1SZWYiLGUgaW5zdGFuY2VvZiBpLlJlZj9lOm51bGwpfWdldCBtZXRhZGF0YSgpe2NvbnN0IGU9dGhpcy5fY2F0RGljdC5nZXRSYXcoIk1ldGFkYXRhIik7aWYoIShlIGluc3RhbmNlb2YgaS5SZWYpKXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJtZXRhZGF0YSIsbnVsbCk7bGV0IHQ9bnVsbDt0cnl7Y29uc3QgYT10aGlzLnhyZWYuZmV0Y2goZSwhdGhpcy54cmVmLmVuY3J5cHQ/LmVuY3J5cHRNZXRhZGF0YSk7aWYoYSBpbnN0YW5jZW9mIG8uQmFzZVN0cmVhbSYmYS5kaWN0IGluc3RhbmNlb2YgaS5EaWN0KXtjb25zdCBlPWEuZGljdC5nZXQoIlR5cGUiKSxyPWEuZGljdC5nZXQoIlN1YnR5cGUiKTtpZigoMCxpLmlzTmFtZSkoZSwiTWV0YWRhdGEiKSYmKDAsaS5pc05hbWUpKHIsIlhNTCIpKXtjb25zdCBlPSgwLG4uc3RyaW5nVG9VVEY4U3RyaW5nKShhLmdldFN0cmluZygpKTtlJiYodD1uZXcgZC5NZXRhZGF0YVBhcnNlcihlKS5zZXJpYWxpemFibGUpfX19Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIHIuTWlzc2luZ0RhdGFFeGNlcHRpb24pdGhyb3cgZTsoMCxuLmluZm8pKGBTa2lwcGluZyBpbnZhbGlkIE1ldGFkYXRhOiAiJHtlfSIuYCl9cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsIm1ldGFkYXRhIix0KX1nZXQgbWFya0luZm8oKXtsZXQgZT1udWxsO3RyeXtlPXRoaXMuX3JlYWRNYXJrSW5mbygpfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiByLk1pc3NpbmdEYXRhRXhjZXB0aW9uKXRocm93IGU7KDAsbi53YXJuKSgiVW5hYmxlIHRvIHJlYWQgbWFyayBpbmZvLiIpfXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJtYXJrSW5mbyIsZSl9X3JlYWRNYXJrSW5mbygpe2NvbnN0IGU9dGhpcy5fY2F0RGljdC5nZXQoIk1hcmtJbmZvIik7aWYoIShlIGluc3RhbmNlb2YgaS5EaWN0KSlyZXR1cm4gbnVsbDtjb25zdCB0PXtNYXJrZWQ6ITEsVXNlclByb3BlcnRpZXM6ITEsU3VzcGVjdHM6ITF9O2Zvcihjb25zdCBhIGluIHQpe2NvbnN0IHI9ZS5nZXQoYSk7ImJvb2xlYW4iPT10eXBlb2YgciYmKHRbYV09cil9cmV0dXJuIHR9Z2V0IHN0cnVjdFRyZWVSb290KCl7bGV0IGU9bnVsbDt0cnl7ZT10aGlzLl9yZWFkU3RydWN0VHJlZVJvb3QoKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2Ygci5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLG4ud2FybikoIlVuYWJsZSByZWFkIHRvIHN0cnVjdFRyZWVSb290IGluZm8uIil9cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsInN0cnVjdFRyZWVSb290IixlKX1fcmVhZFN0cnVjdFRyZWVSb290KCl7Y29uc3QgZT10aGlzLl9jYXREaWN0LmdldFJhdygiU3RydWN0VHJlZVJvb3QiKSx0PXRoaXMueHJlZi5mZXRjaElmUmVmKGUpO2lmKCEodCBpbnN0YW5jZW9mIGkuRGljdCkpcmV0dXJuIG51bGw7Y29uc3QgYT1uZXcgZi5TdHJ1Y3RUcmVlUm9vdCh0LGUpO2EuaW5pdCgpO3JldHVybiBhfWdldCB0b3BsZXZlbFBhZ2VzRGljdCgpe2NvbnN0IGU9dGhpcy5fY2F0RGljdC5nZXQoIlBhZ2VzIik7aWYoIShlIGluc3RhbmNlb2YgaS5EaWN0KSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiSW52YWxpZCB0b3AtbGV2ZWwgcGFnZXMgZGljdGlvbmFyeS4iKTtyZXR1cm4oMCxuLnNoYWRvdykodGhpcywidG9wbGV2ZWxQYWdlc0RpY3QiLGUpfWdldCBkb2N1bWVudE91dGxpbmUoKXtsZXQgZT1udWxsO3RyeXtlPXRoaXMuX3JlYWREb2N1bWVudE91dGxpbmUoKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2Ygci5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLG4ud2FybikoIlVuYWJsZSB0byByZWFkIGRvY3VtZW50IG91dGxpbmUuIil9cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsImRvY3VtZW50T3V0bGluZSIsZSl9X3JlYWREb2N1bWVudE91dGxpbmUoKXtsZXQgZT10aGlzLl9jYXREaWN0LmdldCgiT3V0bGluZXMiKTtpZighKGUgaW5zdGFuY2VvZiBpLkRpY3QpKXJldHVybiBudWxsO2U9ZS5nZXRSYXcoIkZpcnN0Iik7aWYoIShlIGluc3RhbmNlb2YgaS5SZWYpKXJldHVybiBudWxsO2NvbnN0IHQ9e2l0ZW1zOltdfSxhPVt7b2JqOmUscGFyZW50OnR9XSxyPW5ldyBpLlJlZlNldDtyLnB1dChlKTtjb25zdCBzPXRoaXMueHJlZixvPW5ldyBVaW50OENsYW1wZWRBcnJheSgzKTtmb3IoO2EubGVuZ3RoPjA7KXtjb25zdCB0PWEuc2hpZnQoKSxjPXMuZmV0Y2hJZlJlZih0Lm9iaik7aWYobnVsbD09PWMpY29udGludWU7aWYoIWMuaGFzKCJUaXRsZSIpKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJJbnZhbGlkIG91dGxpbmUgaXRlbSBlbmNvdW50ZXJlZC4iKTtjb25zdCBoPXt1cmw6bnVsbCxkZXN0Om51bGwsYWN0aW9uOm51bGx9O0NhdGFsb2cucGFyc2VEZXN0RGljdGlvbmFyeSh7ZGVzdERpY3Q6YyxyZXN1bHRPYmo6aCxkb2NCYXNlVXJsOnRoaXMuYmFzZVVybCxkb2NBdHRhY2htZW50czp0aGlzLmF0dGFjaG1lbnRzfSk7Y29uc3QgdT1jLmdldCgiVGl0bGUiKSxkPWMuZ2V0KCJGIil8fDAsZj1jLmdldEFycmF5KCJDIiksZz1jLmdldCgiQ291bnQiKTtsZXQgcD1vOyFBcnJheS5pc0FycmF5KGYpfHwzIT09Zi5sZW5ndGh8fDA9PT1mWzBdJiYwPT09ZlsxXSYmMD09PWZbMl18fChwPWwuQ29sb3JTcGFjZS5zaW5nbGV0b25zLnJnYi5nZXRSZ2IoZiwwKSk7Y29uc3QgbT17YWN0aW9uOmguYWN0aW9uLGF0dGFjaG1lbnQ6aC5hdHRhY2htZW50LGRlc3Q6aC5kZXN0LHVybDpoLnVybCx1bnNhZmVVcmw6aC51bnNhZmVVcmwsbmV3V2luZG93OmgubmV3V2luZG93LHNldE9DR1N0YXRlOmguc2V0T0NHU3RhdGUsdGl0bGU6KDAsbi5zdHJpbmdUb1BERlN0cmluZykodSksY29sb3I6cCxjb3VudDpOdW1iZXIuaXNJbnRlZ2VyKGcpP2c6dm9pZCAwLGJvbGQ6ISEoMiZkKSxpdGFsaWM6ISEoMSZkKSxpdGVtczpbXX07dC5wYXJlbnQuaXRlbXMucHVzaChtKTtlPWMuZ2V0UmF3KCJGaXJzdCIpO2lmKGUgaW5zdGFuY2VvZiBpLlJlZiYmIXIuaGFzKGUpKXthLnB1c2goe29iajplLHBhcmVudDptfSk7ci5wdXQoZSl9ZT1jLmdldFJhdygiTmV4dCIpO2lmKGUgaW5zdGFuY2VvZiBpLlJlZiYmIXIuaGFzKGUpKXthLnB1c2goe29iajplLHBhcmVudDp0LnBhcmVudH0pO3IucHV0KGUpfX1yZXR1cm4gdC5pdGVtcy5sZW5ndGg+MD90Lml0ZW1zOm51bGx9Z2V0IHBlcm1pc3Npb25zKCl7bGV0IGU9bnVsbDt0cnl7ZT10aGlzLl9yZWFkUGVybWlzc2lvbnMoKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2Ygci5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLG4ud2FybikoIlVuYWJsZSB0byByZWFkIHBlcm1pc3Npb25zLiIpfXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJwZXJtaXNzaW9ucyIsZSl9X3JlYWRQZXJtaXNzaW9ucygpe2NvbnN0IGU9dGhpcy54cmVmLnRyYWlsZXIuZ2V0KCJFbmNyeXB0Iik7aWYoIShlIGluc3RhbmNlb2YgaS5EaWN0KSlyZXR1cm4gbnVsbDtsZXQgdD1lLmdldCgiUCIpO2lmKCJudW1iZXIiIT10eXBlb2YgdClyZXR1cm4gbnVsbDt0Kz0yKiozMjtjb25zdCBhPVtdO2Zvcihjb25zdCBlIGluIG4uUGVybWlzc2lvbkZsYWcpe2NvbnN0IHI9bi5QZXJtaXNzaW9uRmxhZ1tlXTt0JnImJmEucHVzaChyKX1yZXR1cm4gYX1nZXQgb3B0aW9uYWxDb250ZW50Q29uZmlnKCl7bGV0IGU9bnVsbDt0cnl7Y29uc3QgdD10aGlzLl9jYXREaWN0LmdldCgiT0NQcm9wZXJ0aWVzIik7aWYoIXQpcmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsIm9wdGlvbmFsQ29udGVudENvbmZpZyIsbnVsbCk7Y29uc3QgYT10LmdldCgiRCIpO2lmKCFhKXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJvcHRpb25hbENvbnRlbnRDb25maWciLG51bGwpO2NvbnN0IHI9dC5nZXQoIk9DR3MiKTtpZighQXJyYXkuaXNBcnJheShyKSlyZXR1cm4oMCxuLnNoYWRvdykodGhpcywib3B0aW9uYWxDb250ZW50Q29uZmlnIixudWxsKTtjb25zdCBzPVtdLG89W107Zm9yKGNvbnN0IGUgb2Ygcil7aWYoIShlIGluc3RhbmNlb2YgaS5SZWYpKWNvbnRpbnVlO28ucHVzaChlKTtjb25zdCB0PXRoaXMueHJlZi5mZXRjaElmUmVmKGUpO3MucHVzaCh7aWQ6ZS50b1N0cmluZygpLG5hbWU6InN0cmluZyI9PXR5cGVvZiB0LmdldCgiTmFtZSIpPygwLG4uc3RyaW5nVG9QREZTdHJpbmcpKHQuZ2V0KCJOYW1lIikpOm51bGwsaW50ZW50OiJzdHJpbmciPT10eXBlb2YgdC5nZXQoIkludGVudCIpPygwLG4uc3RyaW5nVG9QREZTdHJpbmcpKHQuZ2V0KCJJbnRlbnQiKSk6bnVsbH0pfWU9dGhpcy5fcmVhZE9wdGlvbmFsQ29udGVudENvbmZpZyhhLG8pO2UuZ3JvdXBzPXN9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIHIuTWlzc2luZ0RhdGFFeGNlcHRpb24pdGhyb3cgZTsoMCxuLndhcm4pKGBVbmFibGUgdG8gcmVhZCBvcHRpb25hbCBjb250ZW50IGNvbmZpZzogJHtlfWApfXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJvcHRpb25hbENvbnRlbnRDb25maWciLGUpfV9yZWFkT3B0aW9uYWxDb250ZW50Q29uZmlnKGUsdCl7ZnVuY3Rpb24gcGFyc2VPbk9mZihlKXtjb25zdCBhPVtdO2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKGNvbnN0IHIgb2YgZSlyIGluc3RhbmNlb2YgaS5SZWYmJnQuaW5jbHVkZXMocikmJmEucHVzaChyLnRvU3RyaW5nKCkpO3JldHVybiBhfWZ1bmN0aW9uIHBhcnNlT3JkZXIoZSxhPTApe2lmKCFBcnJheS5pc0FycmF5KGUpKXJldHVybiBudWxsO2NvbnN0IG49W107Zm9yKGNvbnN0IHMgb2YgZSl7aWYocyBpbnN0YW5jZW9mIGkuUmVmJiZ0LmluY2x1ZGVzKHMpKXtyLnB1dChzKTtuLnB1c2gocy50b1N0cmluZygpKTtjb250aW51ZX1jb25zdCBlPXBhcnNlTmVzdGVkT3JkZXIocyxhKTtlJiZuLnB1c2goZSl9aWYoYT4wKXJldHVybiBuO2NvbnN0IHM9W107Zm9yKGNvbnN0IGUgb2YgdClyLmhhcyhlKXx8cy5wdXNoKGUudG9TdHJpbmcoKSk7cy5sZW5ndGgmJm4ucHVzaCh7bmFtZTpudWxsLG9yZGVyOnN9KTtyZXR1cm4gbn1mdW5jdGlvbiBwYXJzZU5lc3RlZE9yZGVyKGUsdCl7aWYoKyt0PnMpeygwLG4ud2FybikoInBhcnNlTmVzdGVkT3JkZXIgLSByZWFjaGVkIE1BWF9ORVNURURfTEVWRUxTLiIpO3JldHVybiBudWxsfWNvbnN0IHI9YS5mZXRjaElmUmVmKGUpO2lmKCFBcnJheS5pc0FycmF5KHIpKXJldHVybiBudWxsO2NvbnN0IGk9YS5mZXRjaElmUmVmKHJbMF0pO2lmKCJzdHJpbmciIT10eXBlb2YgaSlyZXR1cm4gbnVsbDtjb25zdCBvPXBhcnNlT3JkZXIoci5zbGljZSgxKSx0KTtyZXR1cm4gbyYmby5sZW5ndGg/e25hbWU6KDAsbi5zdHJpbmdUb1BERlN0cmluZykoaSksb3JkZXI6b306bnVsbH1jb25zdCBhPXRoaXMueHJlZixyPW5ldyBpLlJlZlNldCxzPTEwO3JldHVybntuYW1lOiJzdHJpbmciPT10eXBlb2YgZS5nZXQoIk5hbWUiKT8oMCxuLnN0cmluZ1RvUERGU3RyaW5nKShlLmdldCgiTmFtZSIpKTpudWxsLGNyZWF0b3I6InN0cmluZyI9PXR5cGVvZiBlLmdldCgiQ3JlYXRvciIpPygwLG4uc3RyaW5nVG9QREZTdHJpbmcpKGUuZ2V0KCJDcmVhdG9yIikpOm51bGwsYmFzZVN0YXRlOmUuZ2V0KCJCYXNlU3RhdGUiKWluc3RhbmNlb2YgaS5OYW1lP2UuZ2V0KCJCYXNlU3RhdGUiKS5uYW1lOm51bGwsb246cGFyc2VPbk9mZihlLmdldCgiT04iKSksb2ZmOnBhcnNlT25PZmYoZS5nZXQoIk9GRiIpKSxvcmRlcjpwYXJzZU9yZGVyKGUuZ2V0KCJPcmRlciIpKSxncm91cHM6bnVsbH19c2V0QWN0dWFsTnVtUGFnZXMoZT1udWxsKXt0aGlzLl9hY3R1YWxOdW1QYWdlcz1lfWdldCBoYXNBY3R1YWxOdW1QYWdlcygpe3JldHVybiBudWxsIT09dGhpcy5fYWN0dWFsTnVtUGFnZXN9Z2V0IF9wYWdlc0NvdW50KCl7Y29uc3QgZT10aGlzLnRvcGxldmVsUGFnZXNEaWN0LmdldCgiQ291bnQiKTtpZighTnVtYmVyLmlzSW50ZWdlcihlKSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiUGFnZSBjb3VudCBpbiB0b3AtbGV2ZWwgcGFnZXMgZGljdGlvbmFyeSBpcyBub3QgYW4gaW50ZWdlci4iKTtyZXR1cm4oMCxuLnNoYWRvdykodGhpcywiX3BhZ2VzQ291bnQiLGUpfWdldCBudW1QYWdlcygpe3JldHVybiB0aGlzLmhhc0FjdHVhbE51bVBhZ2VzP3RoaXMuX2FjdHVhbE51bVBhZ2VzOnRoaXMuX3BhZ2VzQ291bnR9Z2V0IGRlc3RpbmF0aW9ucygpe2NvbnN0IGU9dGhpcy5fcmVhZERlc3RzKCksdD1PYmplY3QuY3JlYXRlKG51bGwpO2lmKGUgaW5zdGFuY2VvZiBzLk5hbWVUcmVlKWZvcihjb25zdFthLHJdb2YgZS5nZXRBbGwoKSl7Y29uc3QgZT1mZXRjaERlc3RpbmF0aW9uKHIpO2UmJih0WygwLG4uc3RyaW5nVG9QREZTdHJpbmcpKGEpXT1lKX1lbHNlIGUgaW5zdGFuY2VvZiBpLkRpY3QmJmUuZm9yRWFjaCgoZnVuY3Rpb24oZSxhKXtjb25zdCByPWZldGNoRGVzdGluYXRpb24oYSk7ciYmKHRbZV09cil9KSk7cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsImRlc3RpbmF0aW9ucyIsdCl9Z2V0RGVzdGluYXRpb24oZSl7Y29uc3QgdD10aGlzLl9yZWFkRGVzdHMoKTtpZih0IGluc3RhbmNlb2Ygcy5OYW1lVHJlZSl7Y29uc3QgYT1mZXRjaERlc3RpbmF0aW9uKHQuZ2V0KGUpKTtpZihhKXJldHVybiBhO2NvbnN0IHI9dGhpcy5kZXN0aW5hdGlvbnNbZV07aWYocil7KDAsbi53YXJuKShgRm91bmQgIiR7ZX0iIGF0IGFuIGluY29ycmVjdCBwb3NpdGlvbiBpbiB0aGUgTmFtZVRyZWUuYCk7cmV0dXJuIHJ9fWVsc2UgaWYodCBpbnN0YW5jZW9mIGkuRGljdCl7Y29uc3QgYT1mZXRjaERlc3RpbmF0aW9uKHQuZ2V0KGUpKTtpZihhKXJldHVybiBhfXJldHVybiBudWxsfV9yZWFkRGVzdHMoKXtjb25zdCBlPXRoaXMuX2NhdERpY3QuZ2V0KCJOYW1lcyIpO3JldHVybiBlPy5oYXMoIkRlc3RzIik/bmV3IHMuTmFtZVRyZWUoZS5nZXRSYXcoIkRlc3RzIiksdGhpcy54cmVmKTp0aGlzLl9jYXREaWN0LmhhcygiRGVzdHMiKT90aGlzLl9jYXREaWN0LmdldCgiRGVzdHMiKTp2b2lkIDB9Z2V0IHBhZ2VMYWJlbHMoKXtsZXQgZT1udWxsO3RyeXtlPXRoaXMuX3JlYWRQYWdlTGFiZWxzKCl9Y2F0Y2goZSl7aWYoZSBpbnN0YW5jZW9mIHIuTWlzc2luZ0RhdGFFeGNlcHRpb24pdGhyb3cgZTsoMCxuLndhcm4pKCJVbmFibGUgdG8gcmVhZCBwYWdlIGxhYmVscy4iKX1yZXR1cm4oMCxuLnNoYWRvdykodGhpcywicGFnZUxhYmVscyIsZSl9X3JlYWRQYWdlTGFiZWxzKCl7Y29uc3QgZT10aGlzLl9jYXREaWN0LmdldFJhdygiUGFnZUxhYmVscyIpO2lmKCFlKXJldHVybiBudWxsO2NvbnN0IHQ9bmV3IEFycmF5KHRoaXMubnVtUGFnZXMpO2xldCBhPW51bGwsbz0iIjtjb25zdCBjPW5ldyBzLk51bWJlclRyZWUoZSx0aGlzLnhyZWYpLmdldEFsbCgpO2xldCBsPSIiLGg9MTtmb3IobGV0IGU9MCxzPXRoaXMubnVtUGFnZXM7ZTxzO2UrKyl7Y29uc3Qgcz1jLmdldChlKTtpZih2b2lkIDAhPT1zKXtpZighKHMgaW5zdGFuY2VvZiBpLkRpY3QpKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJQYWdlTGFiZWwgaXMgbm90IGEgZGljdGlvbmFyeS4iKTtpZihzLmhhcygiVHlwZSIpJiYhKDAsaS5pc05hbWUpKHMuZ2V0KCJUeXBlIiksIlBhZ2VMYWJlbCIpKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJJbnZhbGlkIHR5cGUgaW4gUGFnZUxhYmVsIGRpY3Rpb25hcnkuIik7aWYocy5oYXMoIlMiKSl7Y29uc3QgZT1zLmdldCgiUyIpO2lmKCEoZSBpbnN0YW5jZW9mIGkuTmFtZSkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIkludmFsaWQgc3R5bGUgaW4gUGFnZUxhYmVsIGRpY3Rpb25hcnkuIik7YT1lLm5hbWV9ZWxzZSBhPW51bGw7aWYocy5oYXMoIlAiKSl7Y29uc3QgZT1zLmdldCgiUCIpO2lmKCJzdHJpbmciIT10eXBlb2YgZSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiSW52YWxpZCBwcmVmaXggaW4gUGFnZUxhYmVsIGRpY3Rpb25hcnkuIik7bz0oMCxuLnN0cmluZ1RvUERGU3RyaW5nKShlKX1lbHNlIG89IiI7aWYocy5oYXMoIlN0Iikpe2NvbnN0IGU9cy5nZXQoIlN0Iik7aWYoIShOdW1iZXIuaXNJbnRlZ2VyKGUpJiZlPj0xKSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiSW52YWxpZCBzdGFydCBpbiBQYWdlTGFiZWwgZGljdGlvbmFyeS4iKTtoPWV9ZWxzZSBoPTF9c3dpdGNoKGEpe2Nhc2UiRCI6bD1oO2JyZWFrO2Nhc2UiUiI6Y2FzZSJyIjpsPSgwLHIudG9Sb21hbk51bWVyYWxzKShoLCJyIj09PWEpO2JyZWFrO2Nhc2UiQSI6Y2FzZSJhIjpjb25zdCBlPTI2LHQ9ImEiPT09YT85Nzo2NSxpPWgtMTtsPVN0cmluZy5mcm9tQ2hhckNvZGUodCtpJWUpLnJlcGVhdChNYXRoLmZsb29yKGkvZSkrMSk7YnJlYWs7ZGVmYXVsdDppZihhKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKGBJbnZhbGlkIHN0eWxlICIke2F9IiBpbiBQYWdlTGFiZWwgZGljdGlvbmFyeS5gKTtsPSIifXRbZV09bytsO2grK31yZXR1cm4gdH1nZXQgcGFnZUxheW91dCgpe2NvbnN0IGU9dGhpcy5fY2F0RGljdC5nZXQoIlBhZ2VMYXlvdXQiKTtsZXQgdD0iIjtpZihlIGluc3RhbmNlb2YgaS5OYW1lKXN3aXRjaChlLm5hbWUpe2Nhc2UiU2luZ2xlUGFnZSI6Y2FzZSJPbmVDb2x1bW4iOmNhc2UiVHdvQ29sdW1uTGVmdCI6Y2FzZSJUd29Db2x1bW5SaWdodCI6Y2FzZSJUd29QYWdlTGVmdCI6Y2FzZSJUd29QYWdlUmlnaHQiOnQ9ZS5uYW1lfXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJwYWdlTGF5b3V0Iix0KX1nZXQgcGFnZU1vZGUoKXtjb25zdCBlPXRoaXMuX2NhdERpY3QuZ2V0KCJQYWdlTW9kZSIpO2xldCB0PSJVc2VOb25lIjtpZihlIGluc3RhbmNlb2YgaS5OYW1lKXN3aXRjaChlLm5hbWUpe2Nhc2UiVXNlTm9uZSI6Y2FzZSJVc2VPdXRsaW5lcyI6Y2FzZSJVc2VUaHVtYnMiOmNhc2UiRnVsbFNjcmVlbiI6Y2FzZSJVc2VPQyI6Y2FzZSJVc2VBdHRhY2htZW50cyI6dD1lLm5hbWV9cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsInBhZ2VNb2RlIix0KX1nZXQgdmlld2VyUHJlZmVyZW5jZXMoKXtjb25zdCBlPXRoaXMuX2NhdERpY3QuZ2V0KCJWaWV3ZXJQcmVmZXJlbmNlcyIpO2lmKCEoZSBpbnN0YW5jZW9mIGkuRGljdCkpcmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsInZpZXdlclByZWZlcmVuY2VzIixudWxsKTtsZXQgdD1udWxsO2Zvcihjb25zdCBhIG9mIGUuZ2V0S2V5cygpKXtjb25zdCByPWUuZ2V0KGEpO2xldCBzO3N3aXRjaChhKXtjYXNlIkhpZGVUb29sYmFyIjpjYXNlIkhpZGVNZW51YmFyIjpjYXNlIkhpZGVXaW5kb3dVSSI6Y2FzZSJGaXRXaW5kb3ciOmNhc2UiQ2VudGVyV2luZG93IjpjYXNlIkRpc3BsYXlEb2NUaXRsZSI6Y2FzZSJQaWNrVHJheUJ5UERGU2l6ZSI6ImJvb2xlYW4iPT10eXBlb2YgciYmKHM9cik7YnJlYWs7Y2FzZSJOb25GdWxsU2NyZWVuUGFnZU1vZGUiOmlmKHIgaW5zdGFuY2VvZiBpLk5hbWUpc3dpdGNoKHIubmFtZSl7Y2FzZSJVc2VOb25lIjpjYXNlIlVzZU91dGxpbmVzIjpjYXNlIlVzZVRodW1icyI6Y2FzZSJVc2VPQyI6cz1yLm5hbWU7YnJlYWs7ZGVmYXVsdDpzPSJVc2VOb25lIn1icmVhaztjYXNlIkRpcmVjdGlvbiI6aWYociBpbnN0YW5jZW9mIGkuTmFtZSlzd2l0Y2goci5uYW1lKXtjYXNlIkwyUiI6Y2FzZSJSMkwiOnM9ci5uYW1lO2JyZWFrO2RlZmF1bHQ6cz0iTDJSIn1icmVhaztjYXNlIlZpZXdBcmVhIjpjYXNlIlZpZXdDbGlwIjpjYXNlIlByaW50QXJlYSI6Y2FzZSJQcmludENsaXAiOmlmKHIgaW5zdGFuY2VvZiBpLk5hbWUpc3dpdGNoKHIubmFtZSl7Y2FzZSJNZWRpYUJveCI6Y2FzZSJDcm9wQm94IjpjYXNlIkJsZWVkQm94IjpjYXNlIlRyaW1Cb3giOmNhc2UiQXJ0Qm94IjpzPXIubmFtZTticmVhaztkZWZhdWx0OnM9IkNyb3BCb3gifWJyZWFrO2Nhc2UiUHJpbnRTY2FsaW5nIjppZihyIGluc3RhbmNlb2YgaS5OYW1lKXN3aXRjaChyLm5hbWUpe2Nhc2UiTm9uZSI6Y2FzZSJBcHBEZWZhdWx0IjpzPXIubmFtZTticmVhaztkZWZhdWx0OnM9IkFwcERlZmF1bHQifWJyZWFrO2Nhc2UiRHVwbGV4IjppZihyIGluc3RhbmNlb2YgaS5OYW1lKXN3aXRjaChyLm5hbWUpe2Nhc2UiU2ltcGxleCI6Y2FzZSJEdXBsZXhGbGlwU2hvcnRFZGdlIjpjYXNlIkR1cGxleEZsaXBMb25nRWRnZSI6cz1yLm5hbWU7YnJlYWs7ZGVmYXVsdDpzPSJOb25lIn1icmVhaztjYXNlIlByaW50UGFnZVJhbmdlIjppZihBcnJheS5pc0FycmF5KHIpJiZyLmxlbmd0aCUyPT0wKXtyLmV2ZXJ5KCgoZSx0LGEpPT5OdW1iZXIuaXNJbnRlZ2VyKGUpJiZlPjAmJigwPT09dHx8ZT49YVt0LTFdKSYmZTw9dGhpcy5udW1QYWdlcykpJiYocz1yKX1icmVhaztjYXNlIk51bUNvcGllcyI6TnVtYmVyLmlzSW50ZWdlcihyKSYmcj4wJiYocz1yKTticmVhaztkZWZhdWx0OigwLG4ud2FybikoYElnbm9yaW5nIG5vbi1zdGFuZGFyZCBrZXkgaW4gVmlld2VyUHJlZmVyZW5jZXM6ICR7YX0uYCk7Y29udGludWV9aWYodm9pZCAwIT09cyl7dHx8KHQ9T2JqZWN0LmNyZWF0ZShudWxsKSk7dFthXT1zfWVsc2UoMCxuLndhcm4pKGBCYWQgdmFsdWUsIGZvciBrZXkgIiR7YX0iLCBpbiBWaWV3ZXJQcmVmZXJlbmNlczogJHtyfS5gKX1yZXR1cm4oMCxuLnNoYWRvdykodGhpcywidmlld2VyUHJlZmVyZW5jZXMiLHQpfWdldCBvcGVuQWN0aW9uKCl7Y29uc3QgZT10aGlzLl9jYXREaWN0LmdldCgiT3BlbkFjdGlvbiIpLHQ9T2JqZWN0LmNyZWF0ZShudWxsKTtpZihlIGluc3RhbmNlb2YgaS5EaWN0KXtjb25zdCBhPW5ldyBpLkRpY3QodGhpcy54cmVmKTthLnNldCgiQSIsZSk7Y29uc3Qgcj17dXJsOm51bGwsZGVzdDpudWxsLGFjdGlvbjpudWxsfTtDYXRhbG9nLnBhcnNlRGVzdERpY3Rpb25hcnkoe2Rlc3REaWN0OmEscmVzdWx0T2JqOnJ9KTtBcnJheS5pc0FycmF5KHIuZGVzdCk/dC5kZXN0PXIuZGVzdDpyLmFjdGlvbiYmKHQuYWN0aW9uPXIuYWN0aW9uKX1lbHNlIEFycmF5LmlzQXJyYXkoZSkmJih0LmRlc3Q9ZSk7cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsIm9wZW5BY3Rpb24iLCgwLG4ub2JqZWN0U2l6ZSkodCk+MD90Om51bGwpfWdldCBhdHRhY2htZW50cygpe2NvbnN0IGU9dGhpcy5fY2F0RGljdC5nZXQoIk5hbWVzIik7bGV0IHQ9bnVsbDtpZihlIGluc3RhbmNlb2YgaS5EaWN0JiZlLmhhcygiRW1iZWRkZWRGaWxlcyIpKXtjb25zdCBhPW5ldyBzLk5hbWVUcmVlKGUuZ2V0UmF3KCJFbWJlZGRlZEZpbGVzIiksdGhpcy54cmVmKTtmb3IoY29uc3RbZSxyXW9mIGEuZ2V0QWxsKCkpe2NvbnN0IGE9bmV3IGguRmlsZVNwZWMocix0aGlzLnhyZWYpO3R8fCh0PU9iamVjdC5jcmVhdGUobnVsbCkpO3RbKDAsbi5zdHJpbmdUb1BERlN0cmluZykoZSldPWEuc2VyaWFsaXphYmxlfX1yZXR1cm4oMCxuLnNoYWRvdykodGhpcywiYXR0YWNobWVudHMiLHQpfWdldCB4ZmFJbWFnZXMoKXtjb25zdCBlPXRoaXMuX2NhdERpY3QuZ2V0KCJOYW1lcyIpO2xldCB0PW51bGw7aWYoZSBpbnN0YW5jZW9mIGkuRGljdCYmZS5oYXMoIlhGQUltYWdlcyIpKXtjb25zdCBhPW5ldyBzLk5hbWVUcmVlKGUuZ2V0UmF3KCJYRkFJbWFnZXMiKSx0aGlzLnhyZWYpO2Zvcihjb25zdFtlLHJdb2YgYS5nZXRBbGwoKSl7dHx8KHQ9bmV3IGkuRGljdCh0aGlzLnhyZWYpKTt0LnNldCgoMCxuLnN0cmluZ1RvUERGU3RyaW5nKShlKSxyKX19cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsInhmYUltYWdlcyIsdCl9X2NvbGxlY3RKYXZhU2NyaXB0KCl7Y29uc3QgZT10aGlzLl9jYXREaWN0LmdldCgiTmFtZXMiKTtsZXQgdD1udWxsO2Z1bmN0aW9uIGFwcGVuZElmSmF2YVNjcmlwdERpY3QoZSxhKXtpZighKGEgaW5zdGFuY2VvZiBpLkRpY3QpKXJldHVybjtpZighKDAsaS5pc05hbWUpKGEuZ2V0KCJTIiksIkphdmFTY3JpcHQiKSlyZXR1cm47bGV0IHI9YS5nZXQoIkpTIik7aWYociBpbnN0YW5jZW9mIG8uQmFzZVN0cmVhbSlyPXIuZ2V0U3RyaW5nKCk7ZWxzZSBpZigic3RyaW5nIiE9dHlwZW9mIHIpcmV0dXJuO3I9KDAsbi5zdHJpbmdUb1BERlN0cmluZykocikucmVwbGFjZUFsbCgiXDAiLCIiKTtyJiYodHx8PW5ldyBNYXApLnNldChlLHIpfWlmKGUgaW5zdGFuY2VvZiBpLkRpY3QmJmUuaGFzKCJKYXZhU2NyaXB0Iikpe2NvbnN0IHQ9bmV3IHMuTmFtZVRyZWUoZS5nZXRSYXcoIkphdmFTY3JpcHQiKSx0aGlzLnhyZWYpO2Zvcihjb25zdFtlLGFdb2YgdC5nZXRBbGwoKSlhcHBlbmRJZkphdmFTY3JpcHREaWN0KCgwLG4uc3RyaW5nVG9QREZTdHJpbmcpKGUpLGEpfWNvbnN0IGE9dGhpcy5fY2F0RGljdC5nZXQoIk9wZW5BY3Rpb24iKTthJiZhcHBlbmRJZkphdmFTY3JpcHREaWN0KCJPcGVuQWN0aW9uIixhKTtyZXR1cm4gdH1nZXQganNBY3Rpb25zKCl7Y29uc3QgZT10aGlzLl9jb2xsZWN0SmF2YVNjcmlwdCgpO2xldCB0PSgwLHIuY29sbGVjdEFjdGlvbnMpKHRoaXMueHJlZix0aGlzLl9jYXREaWN0LG4uRG9jdW1lbnRBY3Rpb25FdmVudFR5cGUpO2lmKGUpe3R8fD1PYmplY3QuY3JlYXRlKG51bGwpO2Zvcihjb25zdFthLHJdb2YgZSlhIGluIHQ/dFthXS5wdXNoKHIpOnRbYV09W3JdfXJldHVybigwLG4uc2hhZG93KSh0aGlzLCJqc0FjdGlvbnMiLHQpfWFzeW5jIGZvbnRGYWxsYmFjayhlLHQpe2NvbnN0IGE9YXdhaXQgUHJvbWlzZS5hbGwodGhpcy5mb250Q2FjaGUpO2Zvcihjb25zdCByIG9mIGEpaWYoci5sb2FkZWROYW1lPT09ZSl7ci5mYWxsYmFjayh0KTtyZXR1cm59fWFzeW5jIGNsZWFudXAoZT0hMSl7KDAsYy5jbGVhckdsb2JhbENhY2hlcykoKTt0aGlzLmdsb2JhbEltYWdlQ2FjaGUuY2xlYXIoZSk7dGhpcy5wYWdlS2lkc0NvdW50Q2FjaGUuY2xlYXIoKTt0aGlzLnBhZ2VJbmRleENhY2hlLmNsZWFyKCk7dGhpcy5ub25CbGVuZE1vZGVzU2V0LmNsZWFyKCk7Y29uc3QgdD1hd2FpdCBQcm9taXNlLmFsbCh0aGlzLmZvbnRDYWNoZSk7Zm9yKGNvbnN0e2RpY3Q6ZX1vZiB0KWRlbGV0ZSBlLmNhY2hlS2V5O3RoaXMuZm9udENhY2hlLmNsZWFyKCk7dGhpcy5idWlsdEluQ01hcENhY2hlLmNsZWFyKCk7dGhpcy5zdGFuZGFyZEZvbnREYXRhQ2FjaGUuY2xlYXIoKTt0aGlzLnN5c3RlbUZvbnRDYWNoZS5jbGVhcigpfWFzeW5jIGdldFBhZ2VEaWN0KGUpe2NvbnN0IHQ9W3RoaXMudG9wbGV2ZWxQYWdlc0RpY3RdLGE9bmV3IGkuUmVmU2V0LHI9dGhpcy5fY2F0RGljdC5nZXRSYXcoIlBhZ2VzIik7ciBpbnN0YW5jZW9mIGkuUmVmJiZhLnB1dChyKTtjb25zdCBzPXRoaXMueHJlZixvPXRoaXMucGFnZUtpZHNDb3VudENhY2hlLGM9dGhpcy5wYWdlSW5kZXhDYWNoZTtsZXQgbD0wO2Zvcig7dC5sZW5ndGg7KXtjb25zdCByPXQucG9wKCk7aWYociBpbnN0YW5jZW9mIGkuUmVmKXtjb25zdCBoPW8uZ2V0KHIpO2lmKGg+PTAmJmwraDw9ZSl7bCs9aDtjb250aW51ZX1pZihhLmhhcyhyKSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiUGFnZXMgdHJlZSBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2UuIik7YS5wdXQocik7Y29uc3QgdT1hd2FpdCBzLmZldGNoQXN5bmMocik7aWYodSBpbnN0YW5jZW9mIGkuRGljdCl7bGV0IHQ9dS5nZXRSYXcoIlR5cGUiKTt0IGluc3RhbmNlb2YgaS5SZWYmJih0PWF3YWl0IHMuZmV0Y2hBc3luYyh0KSk7aWYoKDAsaS5pc05hbWUpKHQsIlBhZ2UiKXx8IXUuaGFzKCJLaWRzIikpe28uaGFzKHIpfHxvLnB1dChyLDEpO2MuaGFzKHIpfHxjLnB1dChyLGwpO2lmKGw9PT1lKXJldHVyblt1LHJdO2wrKztjb250aW51ZX19dC5wdXNoKHUpO2NvbnRpbnVlfWlmKCEociBpbnN0YW5jZW9mIGkuRGljdCkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIlBhZ2UgZGljdGlvbmFyeSBraWQgcmVmZXJlbmNlIHBvaW50cyB0byB3cm9uZyB0eXBlIG9mIG9iamVjdC4iKTtjb25zdHtvYmpJZDpofT1yO2xldCB1PXIuZ2V0UmF3KCJDb3VudCIpO3UgaW5zdGFuY2VvZiBpLlJlZiYmKHU9YXdhaXQgcy5mZXRjaEFzeW5jKHUpKTtpZihOdW1iZXIuaXNJbnRlZ2VyKHUpJiZ1Pj0wKXtoJiYhby5oYXMoaCkmJm8ucHV0KGgsdSk7aWYobCt1PD1lKXtsKz11O2NvbnRpbnVlfX1sZXQgZD1yLmdldFJhdygiS2lkcyIpO2QgaW5zdGFuY2VvZiBpLlJlZiYmKGQ9YXdhaXQgcy5mZXRjaEFzeW5jKGQpKTtpZighQXJyYXkuaXNBcnJheShkKSl7bGV0IHQ9ci5nZXRSYXcoIlR5cGUiKTt0IGluc3RhbmNlb2YgaS5SZWYmJih0PWF3YWl0IHMuZmV0Y2hBc3luYyh0KSk7aWYoKDAsaS5pc05hbWUpKHQsIlBhZ2UiKXx8IXIuaGFzKCJLaWRzIikpe2lmKGw9PT1lKXJldHVybltyLG51bGxdO2wrKztjb250aW51ZX10aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiUGFnZSBkaWN0aW9uYXJ5IGtpZHMgb2JqZWN0IGlzIG5vdCBhbiBhcnJheS4iKX1mb3IobGV0IGU9ZC5sZW5ndGgtMTtlPj0wO2UtLSl0LnB1c2goZFtlXSl9dGhyb3cgbmV3IEVycm9yKGBQYWdlIGluZGV4ICR7ZX0gbm90IGZvdW5kLmApfWFzeW5jIGdldEFsbFBhZ2VEaWN0cyhlPSExKXtjb25zdHtpZ25vcmVFcnJvcnM6dH09dGhpcy5wZGZNYW5hZ2VyLmV2YWx1YXRvck9wdGlvbnMsYT1be2N1cnJlbnROb2RlOnRoaXMudG9wbGV2ZWxQYWdlc0RpY3QscG9zSW5LaWRzOjB9XSxzPW5ldyBpLlJlZlNldCxvPXRoaXMuX2NhdERpY3QuZ2V0UmF3KCJQYWdlcyIpO28gaW5zdGFuY2VvZiBpLlJlZiYmcy5wdXQobyk7Y29uc3QgYz1uZXcgTWFwLGw9dGhpcy54cmVmLGg9dGhpcy5wYWdlSW5kZXhDYWNoZTtsZXQgdT0wO2Z1bmN0aW9uIGFkZFBhZ2VEaWN0KGUsdCl7dCYmIWguaGFzKHQpJiZoLnB1dCh0LHUpO2Muc2V0KHUrKyxbZSx0XSl9ZnVuY3Rpb24gYWRkUGFnZUVycm9yKGEpe2lmKGEgaW5zdGFuY2VvZiByLlhSZWZFbnRyeUV4Y2VwdGlvbiYmIWUpdGhyb3cgYTtpZihlJiZ0JiYwPT09dSl7KDAsbi53YXJuKShgZ2V0QWxsUGFnZURpY3RzIC0gU2tpcHBpbmcgaW52YWxpZCBmaXJzdCBwYWdlOiAiJHthfSIuYCk7YT1pLkRpY3QuZW1wdHl9Yy5zZXQodSsrLFthLG51bGxdKX1mb3IoO2EubGVuZ3RoPjA7KXtjb25zdCBlPWEuYXQoLTEpLHtjdXJyZW50Tm9kZTp0LHBvc0luS2lkczpyfT1lO2xldCBvPXQuZ2V0UmF3KCJLaWRzIik7aWYobyBpbnN0YW5jZW9mIGkuUmVmKXRyeXtvPWF3YWl0IGwuZmV0Y2hBc3luYyhvKX1jYXRjaChlKXthZGRQYWdlRXJyb3IoZSk7YnJlYWt9aWYoIUFycmF5LmlzQXJyYXkobykpe2FkZFBhZ2VFcnJvcihuZXcgbi5Gb3JtYXRFcnJvcigiUGFnZSBkaWN0aW9uYXJ5IGtpZHMgb2JqZWN0IGlzIG5vdCBhbiBhcnJheS4iKSk7YnJlYWt9aWYocj49by5sZW5ndGgpe2EucG9wKCk7Y29udGludWV9Y29uc3QgYz1vW3JdO2xldCBoO2lmKGMgaW5zdGFuY2VvZiBpLlJlZil7aWYocy5oYXMoYykpe2FkZFBhZ2VFcnJvcihuZXcgbi5Gb3JtYXRFcnJvcigiUGFnZXMgdHJlZSBjb250YWlucyBjaXJjdWxhciByZWZlcmVuY2UuIikpO2JyZWFrfXMucHV0KGMpO3RyeXtoPWF3YWl0IGwuZmV0Y2hBc3luYyhjKX1jYXRjaChlKXthZGRQYWdlRXJyb3IoZSk7YnJlYWt9fWVsc2UgaD1jO2lmKCEoaCBpbnN0YW5jZW9mIGkuRGljdCkpe2FkZFBhZ2VFcnJvcihuZXcgbi5Gb3JtYXRFcnJvcigiUGFnZSBkaWN0aW9uYXJ5IGtpZCByZWZlcmVuY2UgcG9pbnRzIHRvIHdyb25nIHR5cGUgb2Ygb2JqZWN0LiIpKTticmVha31sZXQgdT1oLmdldFJhdygiVHlwZSIpO2lmKHUgaW5zdGFuY2VvZiBpLlJlZil0cnl7dT1hd2FpdCBsLmZldGNoQXN5bmModSl9Y2F0Y2goZSl7YWRkUGFnZUVycm9yKGUpO2JyZWFrfSgwLGkuaXNOYW1lKSh1LCJQYWdlIil8fCFoLmhhcygiS2lkcyIpP2FkZFBhZ2VEaWN0KGgsYyBpbnN0YW5jZW9mIGkuUmVmP2M6bnVsbCk6YS5wdXNoKHtjdXJyZW50Tm9kZTpoLHBvc0luS2lkczowfSk7ZS5wb3NJbktpZHMrK31yZXR1cm4gY31nZXRQYWdlSW5kZXgoZSl7Y29uc3QgdD10aGlzLnBhZ2VJbmRleENhY2hlLmdldChlKTtpZih2b2lkIDAhPT10KXJldHVybiBQcm9taXNlLnJlc29sdmUodCk7Y29uc3QgYT10aGlzLnhyZWY7bGV0IHI9MDtjb25zdCBuZXh0PXQ9PmZ1bmN0aW9uIHBhZ2VzQmVmb3JlUmVmKHQpe2xldCByLHM9MDtyZXR1cm4gYS5mZXRjaEFzeW5jKHQpLnRoZW4oKGZ1bmN0aW9uKGEpe2lmKCgwLGkuaXNSZWZzRXF1YWwpKHQsZSkmJiEoMCxpLmlzRGljdCkoYSwiUGFnZSIpJiYhKGEgaW5zdGFuY2VvZiBpLkRpY3QmJiFhLmhhcygiVHlwZSIpJiZhLmhhcygiQ29udGVudHMiKSkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIlRoZSByZWZlcmVuY2UgZG9lcyBub3QgcG9pbnQgdG8gYSAvUGFnZSBkaWN0aW9uYXJ5LiIpO2lmKCFhKXJldHVybiBudWxsO2lmKCEoYSBpbnN0YW5jZW9mIGkuRGljdCkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIk5vZGUgbXVzdCBiZSBhIGRpY3Rpb25hcnkuIik7cj1hLmdldFJhdygiUGFyZW50Iik7cmV0dXJuIGEuZ2V0QXN5bmMoIlBhcmVudCIpfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBudWxsO2lmKCEoZSBpbnN0YW5jZW9mIGkuRGljdCkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoIlBhcmVudCBtdXN0IGJlIGEgZGljdGlvbmFyeS4iKTtyZXR1cm4gZS5nZXRBc3luYygiS2lkcyIpfSkpLnRoZW4oKGZ1bmN0aW9uKGUpe2lmKCFlKXJldHVybiBudWxsO2NvbnN0IG89W107bGV0IGM9ITE7Zm9yKGNvbnN0IHIgb2YgZSl7aWYoIShyIGluc3RhbmNlb2YgaS5SZWYpKXRocm93IG5ldyBuLkZvcm1hdEVycm9yKCJLaWQgbXVzdCBiZSBhIHJlZmVyZW5jZS4iKTtpZigoMCxpLmlzUmVmc0VxdWFsKShyLHQpKXtjPSEwO2JyZWFrfW8ucHVzaChhLmZldGNoQXN5bmMocikudGhlbigoZnVuY3Rpb24oZSl7aWYoIShlIGluc3RhbmNlb2YgaS5EaWN0KSl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiS2lkIG5vZGUgbXVzdCBiZSBhIGRpY3Rpb25hcnkuIik7ZS5oYXMoIkNvdW50Iik/cys9ZS5nZXQoIkNvdW50Iik6cysrfSkpKX1pZighYyl0aHJvdyBuZXcgbi5Gb3JtYXRFcnJvcigiS2lkIHJlZmVyZW5jZSBub3QgZm91bmQgaW4gcGFyZW50J3Mga2lkcy4iKTtyZXR1cm4gUHJvbWlzZS5hbGwobykudGhlbigoZnVuY3Rpb24oKXtyZXR1cm5bcyxyXX0pKX0pKX0odCkudGhlbigodD0+e2lmKCF0KXt0aGlzLnBhZ2VJbmRleENhY2hlLnB1dChlLHIpO3JldHVybiByfWNvbnN0W2Esbl09dDtyKz1hO3JldHVybiBuZXh0KG4pfSkpO3JldHVybiBuZXh0KGUpfWdldCBiYXNlVXJsKCl7Y29uc3QgZT10aGlzLl9jYXREaWN0LmdldCgiVVJJIik7aWYoZSBpbnN0YW5jZW9mIGkuRGljdCl7Y29uc3QgdD1lLmdldCgiQmFzZSIpO2lmKCJzdHJpbmciPT10eXBlb2YgdCl7Y29uc3QgZT0oMCxuLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwpKHQsbnVsbCx7dHJ5Q29udmVydEVuY29kaW5nOiEwfSk7aWYoZSlyZXR1cm4oMCxuLnNoYWRvdykodGhpcywiYmFzZVVybCIsZS5ocmVmKX19cmV0dXJuKDAsbi5zaGFkb3cpKHRoaXMsImJhc2VVcmwiLHRoaXMucGRmTWFuYWdlci5kb2NCYXNlVXJsKX1zdGF0aWMgcGFyc2VEZXN0RGljdGlvbmFyeSh7ZGVzdERpY3Q6ZSxyZXN1bHRPYmo6dCxkb2NCYXNlVXJsOmE9bnVsbCxkb2NBdHRhY2htZW50czpzPW51bGx9KXtpZighKGUgaW5zdGFuY2VvZiBpLkRpY3QpKXsoMCxuLndhcm4pKCJwYXJzZURlc3REaWN0aW9uYXJ5OiBgZGVzdERpY3RgIG11c3QgYmUgYSBkaWN0aW9uYXJ5LiIpO3JldHVybn1sZXQgYyxsLGg9ZS5nZXQoIkEiKTtpZighKGggaW5zdGFuY2VvZiBpLkRpY3QpKWlmKGUuaGFzKCJEZXN0IikpaD1lLmdldCgiRGVzdCIpO2Vsc2V7aD1lLmdldCgiQUEiKTtoIGluc3RhbmNlb2YgaS5EaWN0JiYoaC5oYXMoIkQiKT9oPWguZ2V0KCJEIik6aC5oYXMoIlUiKSYmKGg9aC5nZXQoIlUiKSkpfWlmKGggaW5zdGFuY2VvZiBpLkRpY3Qpe2NvbnN0IGU9aC5nZXQoIlMiKTtpZighKGUgaW5zdGFuY2VvZiBpLk5hbWUpKXsoMCxuLndhcm4pKCJwYXJzZURlc3REaWN0aW9uYXJ5OiBJbnZhbGlkIHR5cGUgaW4gQWN0aW9uIGRpY3Rpb25hcnkuIik7cmV0dXJufWNvbnN0IGE9ZS5uYW1lO3N3aXRjaChhKXtjYXNlIlJlc2V0Rm9ybSI6Y29uc3QgZT1oLmdldCgiRmxhZ3MiKSx1PTA9PSgxJigibnVtYmVyIj09dHlwZW9mIGU/ZTowKSksZD1bXSxmPVtdO2Zvcihjb25zdCBlIG9mIGguZ2V0KCJGaWVsZHMiKXx8W10pZSBpbnN0YW5jZW9mIGkuUmVmP2YucHVzaChlLnRvU3RyaW5nKCkpOiJzdHJpbmciPT10eXBlb2YgZSYmZC5wdXNoKCgwLG4uc3RyaW5nVG9QREZTdHJpbmcpKGUpKTt0LnJlc2V0Rm9ybT17ZmllbGRzOmQscmVmczpmLGluY2x1ZGU6dX07YnJlYWs7Y2FzZSJVUkkiOmM9aC5nZXQoIlVSSSIpO2MgaW5zdGFuY2VvZiBpLk5hbWUmJihjPSIvIitjLm5hbWUpO2JyZWFrO2Nhc2UiR29UbyI6bD1oLmdldCgiRCIpO2JyZWFrO2Nhc2UiTGF1bmNoIjpjYXNlIkdvVG9SIjpjb25zdCBnPWguZ2V0KCJGIik7ZyBpbnN0YW5jZW9mIGkuRGljdD9jPWcuZ2V0KCJGIil8fG51bGw6InN0cmluZyI9PXR5cGVvZiBnJiYoYz1nKTtsZXQgcD1oLmdldCgiRCIpO2lmKHApe3AgaW5zdGFuY2VvZiBpLk5hbWUmJihwPXAubmFtZSk7aWYoInN0cmluZyI9PXR5cGVvZiBjKXtjb25zdCBlPWMuc3BsaXQoIiMiKVswXTsic3RyaW5nIj09dHlwZW9mIHA/Yz1lKyIjIitwOkFycmF5LmlzQXJyYXkocCkmJihjPWUrIiMiK0pTT04uc3RyaW5naWZ5KHApKX19Y29uc3QgbT1oLmdldCgiTmV3V2luZG93Iik7ImJvb2xlYW4iPT10eXBlb2YgbSYmKHQubmV3V2luZG93PW0pO2JyZWFrO2Nhc2UiR29Ub0UiOmNvbnN0IGI9aC5nZXQoIlQiKTtsZXQgeTtpZihzJiZiIGluc3RhbmNlb2YgaS5EaWN0KXtjb25zdCBlPWIuZ2V0KCJSIiksdD1iLmdldCgiTiIpOygwLGkuaXNOYW1lKShlLCJDIikmJiJzdHJpbmciPT10eXBlb2YgdCYmKHk9c1soMCxuLnN0cmluZ1RvUERGU3RyaW5nKSh0KV0pfXk/dC5hdHRhY2htZW50PXk6KDAsbi53YXJuKSgncGFyc2VEZXN0RGljdGlvbmFyeSAtIHVuaW1wbGVtZW50ZWQgIkdvVG9FIiBhY3Rpb24uJyk7YnJlYWs7Y2FzZSJOYW1lZCI6Y29uc3Qgdz1oLmdldCgiTiIpO3cgaW5zdGFuY2VvZiBpLk5hbWUmJih0LmFjdGlvbj13Lm5hbWUpO2JyZWFrO2Nhc2UiU2V0T0NHU3RhdGUiOmNvbnN0IFM9aC5nZXQoIlN0YXRlIikseD1oLmdldCgiUHJlc2VydmVSQiIpO2lmKCFBcnJheS5pc0FycmF5KFMpfHwwPT09Uy5sZW5ndGgpYnJlYWs7Y29uc3QgQz1bXTtmb3IoY29uc3QgZSBvZiBTKWlmKGUgaW5zdGFuY2VvZiBpLk5hbWUpc3dpdGNoKGUubmFtZSl7Y2FzZSJPTiI6Y2FzZSJPRkYiOmNhc2UiVG9nZ2xlIjpDLnB1c2goZS5uYW1lKX1lbHNlIGUgaW5zdGFuY2VvZiBpLlJlZiYmQy5wdXNoKGUudG9TdHJpbmcoKSk7aWYoQy5sZW5ndGghPT1TLmxlbmd0aClicmVhazt0LnNldE9DR1N0YXRlPXtzdGF0ZTpDLHByZXNlcnZlUkI6ImJvb2xlYW4iIT10eXBlb2YgeHx8eH07YnJlYWs7Y2FzZSJKYXZhU2NyaXB0Ijpjb25zdCBrPWguZ2V0KCJKUyIpO2xldCB2O2sgaW5zdGFuY2VvZiBvLkJhc2VTdHJlYW0/dj1rLmdldFN0cmluZygpOiJzdHJpbmciPT10eXBlb2YgayYmKHY9ayk7Y29uc3QgRj12JiYoMCxyLnJlY292ZXJKc1VSTCkoKDAsbi5zdHJpbmdUb1BERlN0cmluZykodikpO2lmKEYpe2M9Ri51cmw7dC5uZXdXaW5kb3c9Ri5uZXdXaW5kb3c7YnJlYWt9ZGVmYXVsdDppZigiSmF2YVNjcmlwdCI9PT1hfHwiU3VibWl0Rm9ybSI9PT1hKWJyZWFrOygwLG4ud2FybikoYHBhcnNlRGVzdERpY3Rpb25hcnkgLSB1bnN1cHBvcnRlZCBhY3Rpb246ICIke2F9Ii5gKX19ZWxzZSBlLmhhcygiRGVzdCIpJiYobD1lLmdldCgiRGVzdCIpKTtpZigic3RyaW5nIj09dHlwZW9mIGMpe2NvbnN0IGU9KDAsbi5jcmVhdGVWYWxpZEFic29sdXRlVXJsKShjLGEse2FkZERlZmF1bHRQcm90b2NvbDohMCx0cnlDb252ZXJ0RW5jb2Rpbmc6ITB9KTtlJiYodC51cmw9ZS5ocmVmKTt0LnVuc2FmZVVybD1jfWlmKGwpe2wgaW5zdGFuY2VvZiBpLk5hbWUmJihsPWwubmFtZSk7InN0cmluZyI9PXR5cGVvZiBsP3QuZGVzdD0oMCxuLnN0cmluZ1RvUERGU3RyaW5nKShsKTpBcnJheS5pc0FycmF5KGwpJiYodC5kZXN0PWwpfX19dC5DYXRhbG9nPUNhdGFsb2d9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5OdW1iZXJUcmVlPXQuTmFtZVRyZWU9dm9pZCAwO3ZhciByPWEoNCksbj1hKDIpO2NsYXNzIE5hbWVPck51bWJlclRyZWV7Y29uc3RydWN0b3IoZSx0LGEpe3RoaXMuY29uc3RydWN0b3I9PT1OYW1lT3JOdW1iZXJUcmVlJiYoMCxuLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgTmFtZU9yTnVtYmVyVHJlZS4iKTt0aGlzLnJvb3Q9ZTt0aGlzLnhyZWY9dDt0aGlzLl90eXBlPWF9Z2V0QWxsKCl7Y29uc3QgZT1uZXcgTWFwO2lmKCF0aGlzLnJvb3QpcmV0dXJuIGU7Y29uc3QgdD10aGlzLnhyZWYsYT1uZXcgci5SZWZTZXQ7YS5wdXQodGhpcy5yb290KTtjb25zdCBpPVt0aGlzLnJvb3RdO2Zvcig7aS5sZW5ndGg+MDspe2NvbnN0IHM9dC5mZXRjaElmUmVmKGkuc2hpZnQoKSk7aWYoIShzIGluc3RhbmNlb2Ygci5EaWN0KSljb250aW51ZTtpZihzLmhhcygiS2lkcyIpKXtjb25zdCBlPXMuZ2V0KCJLaWRzIik7aWYoIUFycmF5LmlzQXJyYXkoZSkpY29udGludWU7Zm9yKGNvbnN0IHQgb2YgZSl7aWYoYS5oYXModCkpdGhyb3cgbmV3IG4uRm9ybWF0RXJyb3IoYER1cGxpY2F0ZSBlbnRyeSBpbiAiJHt0aGlzLl90eXBlfSIgdHJlZS5gKTtpLnB1c2godCk7YS5wdXQodCl9Y29udGludWV9Y29uc3Qgbz1zLmdldCh0aGlzLl90eXBlKTtpZihBcnJheS5pc0FycmF5KG8pKWZvcihsZXQgYT0wLHI9by5sZW5ndGg7YTxyO2ErPTIpZS5zZXQodC5mZXRjaElmUmVmKG9bYV0pLHQuZmV0Y2hJZlJlZihvW2ErMV0pKX1yZXR1cm4gZX1nZXQoZSl7aWYoIXRoaXMucm9vdClyZXR1cm4gbnVsbDtjb25zdCB0PXRoaXMueHJlZjtsZXQgYT10LmZldGNoSWZSZWYodGhpcy5yb290KSxyPTA7Zm9yKDthLmhhcygiS2lkcyIpOyl7aWYoKytyPjEwKXsoMCxuLndhcm4pKGBTZWFyY2ggZGVwdGggbGltaXQgcmVhY2hlZCBmb3IgIiR7dGhpcy5fdHlwZX0iIHRyZWUuYCk7cmV0dXJuIG51bGx9Y29uc3QgaT1hLmdldCgiS2lkcyIpO2lmKCFBcnJheS5pc0FycmF5KGkpKXJldHVybiBudWxsO2xldCBzPTAsbz1pLmxlbmd0aC0xO2Zvcig7czw9bzspe2NvbnN0IHI9cytvPj4xLG49dC5mZXRjaElmUmVmKGlbcl0pLGM9bi5nZXQoIkxpbWl0cyIpO2lmKGU8dC5mZXRjaElmUmVmKGNbMF0pKW89ci0xO2Vsc2V7aWYoIShlPnQuZmV0Y2hJZlJlZihjWzFdKSkpe2E9bjticmVha31zPXIrMX19aWYocz5vKXJldHVybiBudWxsfWNvbnN0IGk9YS5nZXQodGhpcy5fdHlwZSk7aWYoQXJyYXkuaXNBcnJheShpKSl7bGV0IGE9MCxyPWkubGVuZ3RoLTI7Zm9yKDthPD1yOyl7Y29uc3Qgbj1hK3I+PjEscz1uKygxJm4pLG89dC5mZXRjaElmUmVmKGlbc10pO2lmKGU8bylyPXMtMjtlbHNle2lmKCEoZT5vKSlyZXR1cm4gdC5mZXRjaElmUmVmKGlbcysxXSk7YT1zKzJ9fX1yZXR1cm4gbnVsbH19dC5OYW1lVHJlZT1jbGFzcyBOYW1lVHJlZSBleHRlbmRzIE5hbWVPck51bWJlclRyZWV7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlLHQsIk5hbWVzIil9fTt0Lk51bWJlclRyZWU9Y2xhc3MgTnVtYmVyVHJlZSBleHRlbmRzIE5hbWVPck51bWJlclRyZWV7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlLHQsIk51bXMiKX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuY2xlYXJHbG9iYWxDYWNoZXM9ZnVuY3Rpb24gY2xlYXJHbG9iYWxDYWNoZXMoKXsoMCxyLmNsZWFyUGF0dGVybkNhY2hlcykoKTsoMCxuLmNsZWFyUHJpbWl0aXZlQ2FjaGVzKSgpOygwLGkuY2xlYXJVbmljb2RlQ2FjaGVzKSgpfTt2YXIgcj1hKDUwKSxuPWEoNCksaT1hKDQwKX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkZpbGVTcGVjPXZvaWQgMDt2YXIgcj1hKDIpLG49YSg1KSxpPWEoNCk7ZnVuY3Rpb24gcGlja1BsYXRmb3JtSXRlbShlKXtyZXR1cm4gZS5oYXMoIlVGIik/ZS5nZXQoIlVGIik6ZS5oYXMoIkYiKT9lLmdldCgiRiIpOmUuaGFzKCJVbml4Iik/ZS5nZXQoIlVuaXgiKTplLmhhcygiTWFjIik/ZS5nZXQoIk1hYyIpOmUuaGFzKCJET1MiKT9lLmdldCgiRE9TIik6bnVsbH10LkZpbGVTcGVjPWNsYXNzIEZpbGVTcGVje2NvbnN0cnVjdG9yKGUsdCl7aWYoZSBpbnN0YW5jZW9mIGkuRGljdCl7dGhpcy54cmVmPXQ7dGhpcy5yb290PWU7ZS5oYXMoIkZTIikmJih0aGlzLmZzPWUuZ2V0KCJGUyIpKTt0aGlzLmRlc2NyaXB0aW9uPWUuaGFzKCJEZXNjIik/KDAsci5zdHJpbmdUb1BERlN0cmluZykoZS5nZXQoIkRlc2MiKSk6IiI7ZS5oYXMoIlJGIikmJigwLHIud2FybikoIlJlbGF0ZWQgZmlsZSBzcGVjaWZpY2F0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCIpO3RoaXMuY29udGVudEF2YWlsYWJsZT0hMDtpZighZS5oYXMoIkVGIikpe3RoaXMuY29udGVudEF2YWlsYWJsZT0hMTsoMCxyLndhcm4pKCJOb24tZW1iZWRkZWQgZmlsZSBzcGVjaWZpY2F0aW9ucyBhcmUgbm90IHN1cHBvcnRlZCIpfX19Z2V0IGZpbGVuYW1lKCl7aWYoIXRoaXMuX2ZpbGVuYW1lJiZ0aGlzLnJvb3Qpe2NvbnN0IGU9cGlja1BsYXRmb3JtSXRlbSh0aGlzLnJvb3QpfHwidW5uYW1lZCI7dGhpcy5fZmlsZW5hbWU9KDAsci5zdHJpbmdUb1BERlN0cmluZykoZSkucmVwbGFjZUFsbCgiXFxcXCIsIlxcIikucmVwbGFjZUFsbCgiXFwvIiwiLyIpLnJlcGxhY2VBbGwoIlxcIiwiLyIpfXJldHVybiB0aGlzLl9maWxlbmFtZX1nZXQgY29udGVudCgpe2lmKCF0aGlzLmNvbnRlbnRBdmFpbGFibGUpcmV0dXJuIG51bGw7IXRoaXMuY29udGVudFJlZiYmdGhpcy5yb290JiYodGhpcy5jb250ZW50UmVmPXBpY2tQbGF0Zm9ybUl0ZW0odGhpcy5yb290LmdldCgiRUYiKSkpO2xldCBlPW51bGw7aWYodGhpcy5jb250ZW50UmVmKXtjb25zdCB0PXRoaXMueHJlZi5mZXRjaElmUmVmKHRoaXMuY29udGVudFJlZik7dCBpbnN0YW5jZW9mIG4uQmFzZVN0cmVhbT9lPXQuZ2V0Qnl0ZXMoKTooMCxyLndhcm4pKCJFbWJlZGRlZCBmaWxlIHNwZWNpZmljYXRpb24gcG9pbnRzIHRvIG5vbi1leGlzdGluZy9pbnZhbGlkIGNvbnRlbnQiKX1lbHNlKDAsci53YXJuKSgiRW1iZWRkZWQgZmlsZSBzcGVjaWZpY2F0aW9uIGRvZXMgbm90IGhhdmUgYSBjb250ZW50Iik7cmV0dXJuIGV9Z2V0IHNlcmlhbGl6YWJsZSgpe3JldHVybntmaWxlbmFtZTp0aGlzLmZpbGVuYW1lLGNvbnRlbnQ6dGhpcy5jb250ZW50fX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuTWV0YWRhdGFQYXJzZXI9dm9pZCAwO3ZhciByPWEoNzEpO3QuTWV0YWRhdGFQYXJzZXI9Y2xhc3MgTWV0YWRhdGFQYXJzZXJ7Y29uc3RydWN0b3IoZSl7ZT10aGlzLl9yZXBhaXIoZSk7Y29uc3QgdD1uZXcgci5TaW1wbGVYTUxQYXJzZXIoe2xvd2VyQ2FzZU5hbWU6ITB9KS5wYXJzZUZyb21TdHJpbmcoZSk7dGhpcy5fbWV0YWRhdGFNYXA9bmV3IE1hcDt0aGlzLl9kYXRhPWU7dCYmdGhpcy5fcGFyc2UodCl9X3JlcGFpcihlKXtyZXR1cm4gZS5yZXBsYWNlKC9eW148XSsvLCIiKS5yZXBsYWNlQWxsKC8+XFwzNzZcXDM3NyhbXjxdKykvZywoZnVuY3Rpb24oZSx0KXtjb25zdCBhPXQucmVwbGFjZUFsbCgvXFwoWzAtM10pKFswLTddKShbMC03XSkvZywoZnVuY3Rpb24oZSx0LGEscil7cmV0dXJuIFN0cmluZy5mcm9tQ2hhckNvZGUoNjQqdCs4KmErMSpyKX0pKS5yZXBsYWNlQWxsKC8mKGFtcHxhcG9zfGd0fGx0fHF1b3QpOy9nLChmdW5jdGlvbihlLHQpe3N3aXRjaCh0KXtjYXNlImFtcCI6cmV0dXJuIiYiO2Nhc2UiYXBvcyI6cmV0dXJuIiciO2Nhc2UiZ3QiOnJldHVybiI+IjtjYXNlImx0IjpyZXR1cm4iPCI7Y2FzZSJxdW90IjpyZXR1cm4nIid9dGhyb3cgbmV3IEVycm9yKGBfcmVwYWlyOiAke3R9IGlzbid0IGRlZmluZWQuYCl9KSkscj1bIj4iXTtmb3IobGV0IGU9MCx0PWEubGVuZ3RoO2U8dDtlKz0yKXtjb25zdCB0PTI1NiphLmNoYXJDb2RlQXQoZSkrYS5jaGFyQ29kZUF0KGUrMSk7dD49MzImJnQ8MTI3JiY2MCE9PXQmJjYyIT09dCYmMzghPT10P3IucHVzaChTdHJpbmcuZnJvbUNoYXJDb2RlKHQpKTpyLnB1c2goIiYjeCIrKDY1NTM2K3QpLnRvU3RyaW5nKDE2KS5zdWJzdHJpbmcoMSkrIjsiKX1yZXR1cm4gci5qb2luKCIiKX0pKX1fZ2V0U2VxdWVuY2UoZSl7Y29uc3QgdD1lLm5vZGVOYW1lO3JldHVybiJyZGY6YmFnIiE9PXQmJiJyZGY6c2VxIiE9PXQmJiJyZGY6YWx0IiE9PXQ/bnVsbDplLmNoaWxkTm9kZXMuZmlsdGVyKChlPT4icmRmOmxpIj09PWUubm9kZU5hbWUpKX1fcGFyc2VBcnJheShlKXtpZighZS5oYXNDaGlsZE5vZGVzKCkpcmV0dXJuO2NvbnN0W3RdPWUuY2hpbGROb2RlcyxhPXRoaXMuX2dldFNlcXVlbmNlKHQpfHxbXTt0aGlzLl9tZXRhZGF0YU1hcC5zZXQoZS5ub2RlTmFtZSxhLm1hcCgoZT0+ZS50ZXh0Q29udGVudC50cmltKCkpKSl9X3BhcnNlKGUpe2xldCB0PWUuZG9jdW1lbnRFbGVtZW50O2lmKCJyZGY6cmRmIiE9PXQubm9kZU5hbWUpe3Q9dC5maXJzdENoaWxkO2Zvcig7dCYmInJkZjpyZGYiIT09dC5ub2RlTmFtZTspdD10Lm5leHRTaWJsaW5nfWlmKHQmJiJyZGY6cmRmIj09PXQubm9kZU5hbWUmJnQuaGFzQ2hpbGROb2RlcygpKWZvcihjb25zdCBlIG9mIHQuY2hpbGROb2RlcylpZigicmRmOmRlc2NyaXB0aW9uIj09PWUubm9kZU5hbWUpZm9yKGNvbnN0IHQgb2YgZS5jaGlsZE5vZGVzKXtjb25zdCBlPXQubm9kZU5hbWU7c3dpdGNoKGUpe2Nhc2UiI3RleHQiOmNvbnRpbnVlO2Nhc2UiZGM6Y3JlYXRvciI6Y2FzZSJkYzpzdWJqZWN0Ijp0aGlzLl9wYXJzZUFycmF5KHQpO2NvbnRpbnVlfXRoaXMuX21ldGFkYXRhTWFwLnNldChlLHQudGV4dENvbnRlbnQudHJpbSgpKX19Z2V0IHNlcmlhbGl6YWJsZSgpe3JldHVybntwYXJzZWREYXRhOnRoaXMuX21ldGFkYXRhTWFwLHJhd0RhdGE6dGhpcy5fZGF0YX19fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlhNTFBhcnNlckVycm9yQ29kZT10LlhNTFBhcnNlckJhc2U9dC5TaW1wbGVYTUxQYXJzZXI9dC5TaW1wbGVET01Ob2RlPXZvaWQgMDt2YXIgcj1hKDMpO2NvbnN0IG49e05vRXJyb3I6MCxFbmRPZkRvY3VtZW50Oi0xLFVudGVybWluYXRlZENkYXQ6LTIsVW50ZXJtaW5hdGVkWG1sRGVjbGFyYXRpb246LTMsVW50ZXJtaW5hdGVkRG9jdHlwZURlY2xhcmF0aW9uOi00LFVudGVybWluYXRlZENvbW1lbnQ6LTUsTWFsZm9ybWVkRWxlbWVudDotNixPdXRPZk1lbW9yeTotNyxVbnRlcm1pbmF0ZWRBdHRyaWJ1dGVWYWx1ZTotOCxVbnRlcm1pbmF0ZWRFbGVtZW50Oi05LEVsZW1lbnROZXZlckJlZ3VuOi0xMH07dC5YTUxQYXJzZXJFcnJvckNvZGU9bjtmdW5jdGlvbiBpc1doaXRlc3BhY2UoZSx0KXtjb25zdCBhPWVbdF07cmV0dXJuIiAiPT09YXx8IlxuIj09PWF8fCJcciI9PT1hfHwiXHQiPT09YX1jbGFzcyBYTUxQYXJzZXJCYXNle19yZXNvbHZlRW50aXRpZXMoZSl7cmV0dXJuIGUucmVwbGFjZUFsbCgvJihbXjtdKyk7L2csKChlLHQpPT57aWYoIiN4Ij09PXQuc3Vic3RyaW5nKDAsMikpcmV0dXJuIFN0cmluZy5mcm9tQ29kZVBvaW50KHBhcnNlSW50KHQuc3Vic3RyaW5nKDIpLDE2KSk7aWYoIiMiPT09dC5zdWJzdHJpbmcoMCwxKSlyZXR1cm4gU3RyaW5nLmZyb21Db2RlUG9pbnQocGFyc2VJbnQodC5zdWJzdHJpbmcoMSksMTApKTtzd2l0Y2godCl7Y2FzZSJsdCI6cmV0dXJuIjwiO2Nhc2UiZ3QiOnJldHVybiI+IjtjYXNlImFtcCI6cmV0dXJuIiYiO2Nhc2UicXVvdCI6cmV0dXJuJyInO2Nhc2UiYXBvcyI6cmV0dXJuIicifXJldHVybiB0aGlzLm9uUmVzb2x2ZUVudGl0eSh0KX0pKX1fcGFyc2VDb250ZW50KGUsdCl7Y29uc3QgYT1bXTtsZXQgcj10O2Z1bmN0aW9uIHNraXBXcygpe2Zvcig7cjxlLmxlbmd0aCYmaXNXaGl0ZXNwYWNlKGUscik7KSsrcn1mb3IoO3I8ZS5sZW5ndGgmJiFpc1doaXRlc3BhY2UoZSxyKSYmIj4iIT09ZVtyXSYmIi8iIT09ZVtyXTspKytyO2NvbnN0IG49ZS5zdWJzdHJpbmcodCxyKTtza2lwV3MoKTtmb3IoO3I8ZS5sZW5ndGgmJiI+IiE9PWVbcl0mJiIvIiE9PWVbcl0mJiI/IiE9PWVbcl07KXtza2lwV3MoKTtsZXQgdD0iIixuPSIiO2Zvcig7cjxlLmxlbmd0aCYmIWlzV2hpdGVzcGFjZShlLHIpJiYiPSIhPT1lW3JdOyl7dCs9ZVtyXTsrK3J9c2tpcFdzKCk7aWYoIj0iIT09ZVtyXSlyZXR1cm4gbnVsbDsrK3I7c2tpcFdzKCk7Y29uc3QgaT1lW3JdO2lmKCciJyE9PWkmJiInIiE9PWkpcmV0dXJuIG51bGw7Y29uc3Qgcz1lLmluZGV4T2YoaSwrK3IpO2lmKHM8MClyZXR1cm4gbnVsbDtuPWUuc3Vic3RyaW5nKHIscyk7YS5wdXNoKHtuYW1lOnQsdmFsdWU6dGhpcy5fcmVzb2x2ZUVudGl0aWVzKG4pfSk7cj1zKzE7c2tpcFdzKCl9cmV0dXJue25hbWU6bixhdHRyaWJ1dGVzOmEscGFyc2VkOnItdH19X3BhcnNlUHJvY2Vzc2luZ0luc3RydWN0aW9uKGUsdCl7bGV0IGE9dDtmb3IoO2E8ZS5sZW5ndGgmJiFpc1doaXRlc3BhY2UoZSxhKSYmIj4iIT09ZVthXSYmIj8iIT09ZVthXSYmIi8iIT09ZVthXTspKythO2NvbnN0IHI9ZS5zdWJzdHJpbmcodCxhKTshZnVuY3Rpb24gc2tpcFdzKCl7Zm9yKDthPGUubGVuZ3RoJiZpc1doaXRlc3BhY2UoZSxhKTspKythfSgpO2NvbnN0IG49YTtmb3IoO2E8ZS5sZW5ndGgmJigiPyIhPT1lW2FdfHwiPiIhPT1lW2ErMV0pOykrK2E7cmV0dXJue25hbWU6cix2YWx1ZTplLnN1YnN0cmluZyhuLGEpLHBhcnNlZDphLXR9fXBhcnNlWG1sKGUpe2xldCB0PTA7Zm9yKDt0PGUubGVuZ3RoOyl7bGV0IGE9dDtpZigiPCI9PT1lW3RdKXsrK2E7bGV0IHQ7c3dpdGNoKGVbYV0pe2Nhc2UiLyI6KythO3Q9ZS5pbmRleE9mKCI+IixhKTtpZih0PDApe3RoaXMub25FcnJvcihuLlVudGVybWluYXRlZEVsZW1lbnQpO3JldHVybn10aGlzLm9uRW5kRWxlbWVudChlLnN1YnN0cmluZyhhLHQpKTthPXQrMTticmVhaztjYXNlIj8iOisrYTtjb25zdCByPXRoaXMuX3BhcnNlUHJvY2Vzc2luZ0luc3RydWN0aW9uKGUsYSk7aWYoIj8+IiE9PWUuc3Vic3RyaW5nKGErci5wYXJzZWQsYStyLnBhcnNlZCsyKSl7dGhpcy5vbkVycm9yKG4uVW50ZXJtaW5hdGVkWG1sRGVjbGFyYXRpb24pO3JldHVybn10aGlzLm9uUGkoci5uYW1lLHIudmFsdWUpO2ErPXIucGFyc2VkKzI7YnJlYWs7Y2FzZSIhIjppZigiLS0iPT09ZS5zdWJzdHJpbmcoYSsxLGErMykpe3Q9ZS5pbmRleE9mKCItLVx4M2UiLGErMyk7aWYodDwwKXt0aGlzLm9uRXJyb3Iobi5VbnRlcm1pbmF0ZWRDb21tZW50KTtyZXR1cm59dGhpcy5vbkNvbW1lbnQoZS5zdWJzdHJpbmcoYSszLHQpKTthPXQrM31lbHNlIGlmKCJbQ0RBVEFbIj09PWUuc3Vic3RyaW5nKGErMSxhKzgpKXt0PWUuaW5kZXhPZigiXV0+IixhKzgpO2lmKHQ8MCl7dGhpcy5vbkVycm9yKG4uVW50ZXJtaW5hdGVkQ2RhdCk7cmV0dXJufXRoaXMub25DZGF0YShlLnN1YnN0cmluZyhhKzgsdCkpO2E9dCszfWVsc2V7aWYoIkRPQ1RZUEUiIT09ZS5zdWJzdHJpbmcoYSsxLGErOCkpe3RoaXMub25FcnJvcihuLk1hbGZvcm1lZEVsZW1lbnQpO3JldHVybn17Y29uc3Qgcj1lLmluZGV4T2YoIlsiLGErOCk7bGV0IGk9ITE7dD1lLmluZGV4T2YoIj4iLGErOCk7aWYodDwwKXt0aGlzLm9uRXJyb3Iobi5VbnRlcm1pbmF0ZWREb2N0eXBlRGVjbGFyYXRpb24pO3JldHVybn1pZihyPjAmJnQ+cil7dD1lLmluZGV4T2YoIl0+IixhKzgpO2lmKHQ8MCl7dGhpcy5vbkVycm9yKG4uVW50ZXJtaW5hdGVkRG9jdHlwZURlY2xhcmF0aW9uKTtyZXR1cm59aT0hMH1jb25zdCBzPWUuc3Vic3RyaW5nKGErOCx0KyhpPzE6MCkpO3RoaXMub25Eb2N0eXBlKHMpO2E9dCsoaT8yOjEpfX1icmVhaztkZWZhdWx0OmNvbnN0IGk9dGhpcy5fcGFyc2VDb250ZW50KGUsYSk7aWYobnVsbD09PWkpe3RoaXMub25FcnJvcihuLk1hbGZvcm1lZEVsZW1lbnQpO3JldHVybn1sZXQgcz0hMTtpZigiLz4iPT09ZS5zdWJzdHJpbmcoYStpLnBhcnNlZCxhK2kucGFyc2VkKzIpKXM9ITA7ZWxzZSBpZigiPiIhPT1lLnN1YnN0cmluZyhhK2kucGFyc2VkLGEraS5wYXJzZWQrMSkpe3RoaXMub25FcnJvcihuLlVudGVybWluYXRlZEVsZW1lbnQpO3JldHVybn10aGlzLm9uQmVnaW5FbGVtZW50KGkubmFtZSxpLmF0dHJpYnV0ZXMscyk7YSs9aS5wYXJzZWQrKHM/MjoxKX19ZWxzZXtmb3IoO2E8ZS5sZW5ndGgmJiI8IiE9PWVbYV07KWErKztjb25zdCByPWUuc3Vic3RyaW5nKHQsYSk7dGhpcy5vblRleHQodGhpcy5fcmVzb2x2ZUVudGl0aWVzKHIpKX10PWF9fW9uUmVzb2x2ZUVudGl0eShlKXtyZXR1cm5gJiR7ZX07YH1vblBpKGUsdCl7fW9uQ29tbWVudChlKXt9b25DZGF0YShlKXt9b25Eb2N0eXBlKGUpe31vblRleHQoZSl7fW9uQmVnaW5FbGVtZW50KGUsdCxhKXt9b25FbmRFbGVtZW50KGUpe31vbkVycm9yKGUpe319dC5YTUxQYXJzZXJCYXNlPVhNTFBhcnNlckJhc2U7Y2xhc3MgU2ltcGxlRE9NTm9kZXtjb25zdHJ1Y3RvcihlLHQpe3RoaXMubm9kZU5hbWU9ZTt0aGlzLm5vZGVWYWx1ZT10O09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0aGlzLCJwYXJlbnROb2RlIix7dmFsdWU6bnVsbCx3cml0YWJsZTohMH0pfWdldCBmaXJzdENoaWxkKCl7cmV0dXJuIHRoaXMuY2hpbGROb2Rlcz8uWzBdfWdldCBuZXh0U2libGluZygpe2NvbnN0IGU9dGhpcy5wYXJlbnROb2RlLmNoaWxkTm9kZXM7aWYoIWUpcmV0dXJuO2NvbnN0IHQ9ZS5pbmRleE9mKHRoaXMpO3JldHVybi0xIT09dD9lW3QrMV06dm9pZCAwfWdldCB0ZXh0Q29udGVudCgpe3JldHVybiB0aGlzLmNoaWxkTm9kZXM/dGhpcy5jaGlsZE5vZGVzLm1hcCgoZnVuY3Rpb24oZSl7cmV0dXJuIGUudGV4dENvbnRlbnR9KSkuam9pbigiIik6dGhpcy5ub2RlVmFsdWV8fCIifWdldCBjaGlsZHJlbigpe3JldHVybiB0aGlzLmNoaWxkTm9kZXN8fFtdfWhhc0NoaWxkTm9kZXMoKXtyZXR1cm4gdGhpcy5jaGlsZE5vZGVzPy5sZW5ndGg+MH1zZWFyY2hOb2RlKGUsdCl7aWYodD49ZS5sZW5ndGgpcmV0dXJuIHRoaXM7Y29uc3QgYT1lW3RdO2lmKGEubmFtZS5zdGFydHNXaXRoKCIjIikmJnQ8ZS5sZW5ndGgtMSlyZXR1cm4gdGhpcy5zZWFyY2hOb2RlKGUsdCsxKTtjb25zdCByPVtdO2xldCBuPXRoaXM7Zm9yKDs7KXtpZihhLm5hbWU9PT1uLm5vZGVOYW1lKXtpZigwIT09YS5wb3Mpe2lmKDA9PT1yLmxlbmd0aClyZXR1cm4gbnVsbDt7Y29uc3RbaV09ci5wb3AoKTtsZXQgcz0wO2Zvcihjb25zdCByIG9mIGkuY2hpbGROb2RlcylpZihhLm5hbWU9PT1yLm5vZGVOYW1lKXtpZihzPT09YS5wb3MpcmV0dXJuIHIuc2VhcmNoTm9kZShlLHQrMSk7cysrfXJldHVybiBuLnNlYXJjaE5vZGUoZSx0KzEpfX17Y29uc3QgYT1uLnNlYXJjaE5vZGUoZSx0KzEpO2lmKG51bGwhPT1hKXJldHVybiBhfX1pZihuLmNoaWxkTm9kZXM/Lmxlbmd0aD4wKXtyLnB1c2goW24sMF0pO249bi5jaGlsZE5vZGVzWzBdfWVsc2V7aWYoMD09PXIubGVuZ3RoKXJldHVybiBudWxsO2Zvcig7MCE9PXIubGVuZ3RoOyl7Y29uc3RbZSx0XT1yLnBvcCgpLGE9dCsxO2lmKGE8ZS5jaGlsZE5vZGVzLmxlbmd0aCl7ci5wdXNoKFtlLGFdKTtuPWUuY2hpbGROb2Rlc1thXTticmVha319aWYoMD09PXIubGVuZ3RoKXJldHVybiBudWxsfX19ZHVtcChlKXtpZigiI3RleHQiIT09dGhpcy5ub2RlTmFtZSl7ZS5wdXNoKGA8JHt0aGlzLm5vZGVOYW1lfWApO2lmKHRoaXMuYXR0cmlidXRlcylmb3IoY29uc3QgdCBvZiB0aGlzLmF0dHJpYnV0ZXMpZS5wdXNoKGAgJHt0Lm5hbWV9PSIkeygwLHIuZW5jb2RlVG9YbWxTdHJpbmcpKHQudmFsdWUpfSJgKTtpZih0aGlzLmhhc0NoaWxkTm9kZXMoKSl7ZS5wdXNoKCI+Iik7Zm9yKGNvbnN0IHQgb2YgdGhpcy5jaGlsZE5vZGVzKXQuZHVtcChlKTtlLnB1c2goYDwvJHt0aGlzLm5vZGVOYW1lfT5gKX1lbHNlIHRoaXMubm9kZVZhbHVlP2UucHVzaChgPiR7KDAsci5lbmNvZGVUb1htbFN0cmluZykodGhpcy5ub2RlVmFsdWUpfTwvJHt0aGlzLm5vZGVOYW1lfT5gKTplLnB1c2goIi8+Iil9ZWxzZSBlLnB1c2goKDAsci5lbmNvZGVUb1htbFN0cmluZykodGhpcy5ub2RlVmFsdWUpKX19dC5TaW1wbGVET01Ob2RlPVNpbXBsZURPTU5vZGU7dC5TaW1wbGVYTUxQYXJzZXI9Y2xhc3MgU2ltcGxlWE1MUGFyc2VyIGV4dGVuZHMgWE1MUGFyc2VyQmFzZXtjb25zdHJ1Y3Rvcih7aGFzQXR0cmlidXRlczplPSExLGxvd2VyQ2FzZU5hbWU6dD0hMX0pe3N1cGVyKCk7dGhpcy5fY3VycmVudEZyYWdtZW50PW51bGw7dGhpcy5fc3RhY2s9bnVsbDt0aGlzLl9lcnJvckNvZGU9bi5Ob0Vycm9yO3RoaXMuX2hhc0F0dHJpYnV0ZXM9ZTt0aGlzLl9sb3dlckNhc2VOYW1lPXR9cGFyc2VGcm9tU3RyaW5nKGUpe3RoaXMuX2N1cnJlbnRGcmFnbWVudD1bXTt0aGlzLl9zdGFjaz1bXTt0aGlzLl9lcnJvckNvZGU9bi5Ob0Vycm9yO3RoaXMucGFyc2VYbWwoZSk7aWYodGhpcy5fZXJyb3JDb2RlIT09bi5Ob0Vycm9yKXJldHVybjtjb25zdFt0XT10aGlzLl9jdXJyZW50RnJhZ21lbnQ7cmV0dXJuIHQ/e2RvY3VtZW50RWxlbWVudDp0fTp2b2lkIDB9b25UZXh0KGUpe2lmKGZ1bmN0aW9uIGlzV2hpdGVzcGFjZVN0cmluZyhlKXtmb3IobGV0IHQ9MCxhPWUubGVuZ3RoO3Q8YTt0KyspaWYoIWlzV2hpdGVzcGFjZShlLHQpKXJldHVybiExO3JldHVybiEwfShlKSlyZXR1cm47Y29uc3QgdD1uZXcgU2ltcGxlRE9NTm9kZSgiI3RleHQiLGUpO3RoaXMuX2N1cnJlbnRGcmFnbWVudC5wdXNoKHQpfW9uQ2RhdGEoZSl7Y29uc3QgdD1uZXcgU2ltcGxlRE9NTm9kZSgiI3RleHQiLGUpO3RoaXMuX2N1cnJlbnRGcmFnbWVudC5wdXNoKHQpfW9uQmVnaW5FbGVtZW50KGUsdCxhKXt0aGlzLl9sb3dlckNhc2VOYW1lJiYoZT1lLnRvTG93ZXJDYXNlKCkpO2NvbnN0IHI9bmV3IFNpbXBsZURPTU5vZGUoZSk7ci5jaGlsZE5vZGVzPVtdO3RoaXMuX2hhc0F0dHJpYnV0ZXMmJihyLmF0dHJpYnV0ZXM9dCk7dGhpcy5fY3VycmVudEZyYWdtZW50LnB1c2gocik7aWYoIWEpe3RoaXMuX3N0YWNrLnB1c2godGhpcy5fY3VycmVudEZyYWdtZW50KTt0aGlzLl9jdXJyZW50RnJhZ21lbnQ9ci5jaGlsZE5vZGVzfX1vbkVuZEVsZW1lbnQoZSl7dGhpcy5fY3VycmVudEZyYWdtZW50PXRoaXMuX3N0YWNrLnBvcCgpfHxbXTtjb25zdCB0PXRoaXMuX2N1cnJlbnRGcmFnbWVudC5hdCgtMSk7aWYoIXQpcmV0dXJuIG51bGw7Zm9yKGNvbnN0IGUgb2YgdC5jaGlsZE5vZGVzKWUucGFyZW50Tm9kZT10O3JldHVybiB0fW9uRXJyb3IoZSl7dGhpcy5fZXJyb3JDb2RlPWV9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlN0cnVjdFRyZWVSb290PXQuU3RydWN0VHJlZVBhZ2U9dm9pZCAwO3ZhciByPWEoMiksbj1hKDQpLGk9YSg2Nykscz1hKDczKTtjb25zdCBvPTEsYz0yLGw9MyxoPTQsdT01O2NsYXNzIFN0cnVjdFRyZWVSb290e2NvbnN0cnVjdG9yKGUsdCl7dGhpcy5kaWN0PWU7dGhpcy5yZWY9dCBpbnN0YW5jZW9mIG4uUmVmP3Q6bnVsbDt0aGlzLnJvbGVNYXA9bmV3IE1hcDt0aGlzLnN0cnVjdFBhcmVudElkcz1udWxsfWluaXQoKXt0aGlzLnJlYWRSb2xlTWFwKCl9I0MoZSx0LGEpe2lmKCEoZSBpbnN0YW5jZW9mIG4uUmVmKXx8dDwwKXJldHVybjt0aGlzLnN0cnVjdFBhcmVudElkc3x8PW5ldyBuLlJlZlNldENhY2hlO2xldCByPXRoaXMuc3RydWN0UGFyZW50SWRzLmdldChlKTtpZighcil7cj1bXTt0aGlzLnN0cnVjdFBhcmVudElkcy5wdXQoZSxyKX1yLnB1c2goW3QsYV0pfWFkZEFubm90YXRpb25JZFRvUGFnZShlLHQpe3RoaXMuI0MoZSx0LGgpfXJlYWRSb2xlTWFwKCl7Y29uc3QgZT10aGlzLmRpY3QuZ2V0KCJSb2xlTWFwIik7ZSBpbnN0YW5jZW9mIG4uRGljdCYmZS5mb3JFYWNoKCgoZSx0KT0+e3QgaW5zdGFuY2VvZiBuLk5hbWUmJnRoaXMucm9sZU1hcC5zZXQoZSx0Lm5hbWUpfSkpfXN0YXRpYyBhc3luYyBjYW5DcmVhdGVTdHJ1Y3R1cmVUcmVlKHtjYXRhbG9nUmVmOmUscGRmTWFuYWdlcjp0LG5ld0Fubm90YXRpb25zQnlQYWdlOmF9KXtpZighKGUgaW5zdGFuY2VvZiBuLlJlZikpeygwLHIud2FybikoIkNhbm5vdCBzYXZlIHRoZSBzdHJ1Y3QgdHJlZTogbm8gY2F0YWxvZyByZWZlcmVuY2UuIik7cmV0dXJuITF9bGV0IGk9MCxzPSEwO2Zvcihjb25zdFtlLG9db2YgYSl7Y29uc3R7cmVmOmF9PWF3YWl0IHQuZ2V0UGFnZShlKTtpZighKGEgaW5zdGFuY2VvZiBuLlJlZikpeygwLHIud2FybikoYENhbm5vdCBzYXZlIHRoZSBzdHJ1Y3QgdHJlZTogcGFnZSAke2V9IGhhcyBubyByZWYuYCk7cz0hMDticmVha31mb3IoY29uc3QgZSBvZiBvKWlmKGUuYWNjZXNzaWJpbGl0eURhdGE/LnR5cGUpe2UucGFyZW50VHJlZUlkPWkrKztzPSExfX1pZihzKXtmb3IoY29uc3QgZSBvZiBhLnZhbHVlcygpKWZvcihjb25zdCB0IG9mIGUpZGVsZXRlIHQucGFyZW50VHJlZUlkO3JldHVybiExfXJldHVybiEwfXN0YXRpYyBhc3luYyBjcmVhdGVTdHJ1Y3R1cmVUcmVlKHtuZXdBbm5vdGF0aW9uc0J5UGFnZTplLHhyZWY6dCxjYXRhbG9nUmVmOmEscGRmTWFuYWdlcjpyLG5ld1JlZnM6aX0pe2NvbnN0IG89ci5jYXRhbG9nLmNsb25lRGljdCgpLGM9dC5nZXROZXdUZW1wb3JhcnlSZWYoKTtvLnNldCgiU3RydWN0VHJlZVJvb3QiLGMpO2NvbnN0IGw9W107YXdhaXQoMCxzLndyaXRlT2JqZWN0KShhLG8sbCx0KTtpLnB1c2goe3JlZjphLGRhdGE6bC5qb2luKCIiKX0pO2NvbnN0IGg9bmV3IG4uRGljdCh0KTtoLnNldCgiVHlwZSIsbi5OYW1lLmdldCgiU3RydWN0VHJlZVJvb3QiKSk7Y29uc3QgdT10LmdldE5ld1RlbXBvcmFyeVJlZigpO2guc2V0KCJQYXJlbnRUcmVlIix1KTtjb25zdCBkPVtdO2guc2V0KCJLIixkKTtjb25zdCBmPW5ldyBuLkRpY3QodCksZz1bXTtmLnNldCgiTnVtcyIsZyk7Y29uc3QgcD1hd2FpdCB0aGlzLiNrKHtuZXdBbm5vdGF0aW9uc0J5UGFnZTplLHN0cnVjdFRyZWVSb290UmVmOmMsa2lkczpkLG51bXM6Zyx4cmVmOnQscGRmTWFuYWdlcjpyLG5ld1JlZnM6aSxidWZmZXI6bH0pO2guc2V0KCJQYXJlbnRUcmVlTmV4dEtleSIscCk7bC5sZW5ndGg9MDthd2FpdCgwLHMud3JpdGVPYmplY3QpKHUsZixsLHQpO2kucHVzaCh7cmVmOnUsZGF0YTpsLmpvaW4oIiIpfSk7bC5sZW5ndGg9MDthd2FpdCgwLHMud3JpdGVPYmplY3QpKGMsaCxsLHQpO2kucHVzaCh7cmVmOmMsZGF0YTpsLmpvaW4oIiIpfSl9YXN5bmMgY2FuVXBkYXRlU3RydWN0VHJlZSh7cGRmTWFuYWdlcjplLG5ld0Fubm90YXRpb25zQnlQYWdlOnR9KXtpZighdGhpcy5yZWYpeygwLHIud2FybikoIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBubyByb290IHJlZmVyZW5jZS4iKTtyZXR1cm4hMX1sZXQgYT10aGlzLmRpY3QuZ2V0KCJQYXJlbnRUcmVlTmV4dEtleSIpO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKGEpfHxhPDApeygwLHIud2FybikoIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBpbnZhbGlkIG5leHQga2V5LiIpO3JldHVybiExfWNvbnN0IGk9dGhpcy5kaWN0LmdldCgiUGFyZW50VHJlZSIpO2lmKCEoaSBpbnN0YW5jZW9mIG4uRGljdCkpeygwLHIud2FybikoIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBQYXJlbnRUcmVlIGlzbid0IGEgZGljdC4iKTtyZXR1cm4hMX1jb25zdCBzPWkuZ2V0KCJOdW1zIik7aWYoIUFycmF5LmlzQXJyYXkocykpeygwLHIud2FybikoIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBudW1zIGlzbid0IGFuIGFycmF5LiIpO3JldHVybiExfWNvbnN0e251bVBhZ2VzOm99PWUuY2F0YWxvZztmb3IoY29uc3QgYSBvZiB0LmtleXMoKSl7Y29uc3R7cGFnZURpY3Q6dCxyZWY6aX09YXdhaXQgZS5nZXRQYWdlKGEpO2lmKCEoaSBpbnN0YW5jZW9mIG4uUmVmKSl7KDAsci53YXJuKShgQ2Fubm90IHNhdmUgdGhlIHN0cnVjdCB0cmVlOiBwYWdlICR7YX0gaGFzIG5vIHJlZi5gKTtyZXR1cm4hMX1jb25zdCBzPXQuZ2V0KCJTdHJ1Y3RQYXJlbnRzIik7aWYoIU51bWJlci5pc0ludGVnZXIocyl8fHM8MHx8cz49byl7KDAsci53YXJuKShgQ2Fubm90IHNhdmUgdGhlIHN0cnVjdCB0cmVlOiBwYWdlICR7YX0gaGFzIG5vIGlkLmApO3JldHVybiExfX1sZXQgYz0hMDtmb3IoY29uc3RbcixuXW9mIHQpe2NvbnN0e3BhZ2VEaWN0OnR9PWF3YWl0IGUuZ2V0UGFnZShyKTtTdHJ1Y3RUcmVlUm9vdC4jdih7ZWxlbWVudHM6bix4cmVmOnRoaXMuZGljdC54cmVmLHBhZ2VEaWN0OnQscGFyZW50VHJlZTppfSk7Zm9yKGNvbnN0IGUgb2YgbilpZihlLmFjY2Vzc2liaWxpdHlEYXRhPy50eXBlKXtlLnBhcmVudFRyZWVJZD1hKys7Yz0hMX19aWYoYyl7Zm9yKGNvbnN0IGUgb2YgdC52YWx1ZXMoKSlmb3IoY29uc3QgdCBvZiBlKXtkZWxldGUgdC5wYXJlbnRUcmVlSWQ7ZGVsZXRlIHQuc3RydWN0VHJlZVBhcmVudH1yZXR1cm4hMX1yZXR1cm4hMH1hc3luYyB1cGRhdGVTdHJ1Y3R1cmVUcmVlKHtuZXdBbm5vdGF0aW9uc0J5UGFnZTplLHBkZk1hbmFnZXI6dCxuZXdSZWZzOmF9KXtjb25zdCByPXRoaXMuZGljdC54cmVmLGk9dGhpcy5kaWN0LmNsb25lKCksbz10aGlzLnJlZjtsZXQgYyxsPWkuZ2V0UmF3KCJQYXJlbnRUcmVlIik7aWYobCBpbnN0YW5jZW9mIG4uUmVmKWM9ci5mZXRjaChsKTtlbHNle2M9bDtsPXIuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7aS5zZXQoIlBhcmVudFRyZWUiLGwpfWM9Yy5jbG9uZSgpO2xldCBoPWMuZ2V0UmF3KCJOdW1zIiksdT1udWxsO2lmKGggaW5zdGFuY2VvZiBuLlJlZil7dT1oO2g9ci5mZXRjaCh1KX1oPWguc2xpY2UoKTt1fHxjLnNldCgiTnVtcyIsaCk7bGV0IGQ9aS5nZXRSYXcoIksiKSxmPW51bGw7aWYoZCBpbnN0YW5jZW9mIG4uUmVmKXtmPWQ7ZD1yLmZldGNoKGYpfWVsc2V7Zj1yLmdldE5ld1RlbXBvcmFyeVJlZigpO2kuc2V0KCJLIixmKX1kPUFycmF5LmlzQXJyYXkoZCk/ZC5zbGljZSgpOltkXTtjb25zdCBnPVtdLHA9YXdhaXQgU3RydWN0VHJlZVJvb3QuI2soe25ld0Fubm90YXRpb25zQnlQYWdlOmUsc3RydWN0VHJlZVJvb3RSZWY6byxraWRzOmQsbnVtczpoLHhyZWY6cixwZGZNYW5hZ2VyOnQsbmV3UmVmczphLGJ1ZmZlcjpnfSk7aS5zZXQoIlBhcmVudFRyZWVOZXh0S2V5IixwKTtnLmxlbmd0aD0wO2F3YWl0KDAscy53cml0ZU9iamVjdCkoZixkLGcscik7YS5wdXNoKHtyZWY6ZixkYXRhOmcuam9pbigiIil9KTtpZih1KXtnLmxlbmd0aD0wO2F3YWl0KDAscy53cml0ZU9iamVjdCkodSxoLGcscik7YS5wdXNoKHtyZWY6dSxkYXRhOmcuam9pbigiIil9KX1nLmxlbmd0aD0wO2F3YWl0KDAscy53cml0ZU9iamVjdCkobCxjLGcscik7YS5wdXNoKHtyZWY6bCxkYXRhOmcuam9pbigiIil9KTtnLmxlbmd0aD0wO2F3YWl0KDAscy53cml0ZU9iamVjdCkobyxpLGcscik7YS5wdXNoKHtyZWY6byxkYXRhOmcuam9pbigiIil9KX1zdGF0aWMgYXN5bmMjayh7bmV3QW5ub3RhdGlvbnNCeVBhZ2U6ZSxzdHJ1Y3RUcmVlUm9vdFJlZjp0LGtpZHM6YSxudW1zOnIseHJlZjppLHBkZk1hbmFnZXI6byxuZXdSZWZzOmMsYnVmZmVyOmx9KXtjb25zdCBoPW4uTmFtZS5nZXQoIk9CSlIiKTtsZXQgdT0tMS8wO2Zvcihjb25zdFtkLGZdb2YgZSl7Y29uc3R7cmVmOmV9PWF3YWl0IG8uZ2V0UGFnZShkKTtmb3IoY29uc3R7YWNjZXNzaWJpbGl0eURhdGE6e3R5cGU6byx0aXRsZTpkLGxhbmc6ZyxhbHQ6cCxleHBhbmRlZDptLGFjdHVhbFRleHQ6Yn0scmVmOnkscGFyZW50VHJlZUlkOncsc3RydWN0VHJlZVBhcmVudDpTfW9mIGYpe3U9TWF0aC5tYXgodSx3KTtjb25zdCBmPWkuZ2V0TmV3VGVtcG9yYXJ5UmVmKCkseD1uZXcgbi5EaWN0KGkpO3guc2V0KCJTIixuLk5hbWUuZ2V0KG8pKTtkJiZ4LnNldCgiVCIsZCk7ZyYmeC5zZXQoIkxhbmciLGcpO3AmJnguc2V0KCJBbHQiLHApO20mJnguc2V0KCJFIixtKTtiJiZ4LnNldCgiQWN0dWFsVGV4dCIsYik7Uz9hd2FpdCB0aGlzLiNGKHtzdHJ1Y3RUcmVlUGFyZW50OlMsdGFnRGljdDp4LG5ld1RhZ1JlZjpmLGZhbGxiYWNrUmVmOnQseHJlZjppLG5ld1JlZnM6YyxidWZmZXI6bH0pOnguc2V0KCJQIix0KTtjb25zdCBDPW5ldyBuLkRpY3QoaSk7eC5zZXQoIksiLEMpO0Muc2V0KCJUeXBlIixoKTtDLnNldCgiUGciLGUpO0Muc2V0KCJPYmoiLHkpO2wubGVuZ3RoPTA7YXdhaXQoMCxzLndyaXRlT2JqZWN0KShmLHgsbCxpKTtjLnB1c2goe3JlZjpmLGRhdGE6bC5qb2luKCIiKX0pO3IucHVzaCh3LGYpO2EucHVzaChmKX19cmV0dXJuIHUrMX1zdGF0aWMjdih7ZWxlbWVudHM6ZSx4cmVmOnQscGFnZURpY3Q6YSxwYXJlbnRUcmVlOnJ9KXtjb25zdCBzPW5ldyBNYXA7Zm9yKGNvbnN0IHQgb2YgZSlpZih0LnN0cnVjdFRyZWVQYXJlbnRJZCl7Y29uc3QgZT1wYXJzZUludCh0LnN0cnVjdFRyZWVQYXJlbnRJZC5zcGxpdCgiX21jIilbMV0sMTApO3Muc2V0KGUsdCl9Y29uc3Qgbz1hLmdldCgiU3RydWN0UGFyZW50cyIpLGM9bmV3IGkuTnVtYmVyVHJlZShyLHQpLmdldChvKTtpZighQXJyYXkuaXNBcnJheShjKSlyZXR1cm47Y29uc3QgdXBkYXRlRWxlbWVudD0oZSxhLHIpPT57Y29uc3QgaT1zLmdldChlKTtpZihpKXtjb25zdCBlPWEuZ2V0UmF3KCJQIikscz10LmZldGNoSWZSZWYoZSk7ZSBpbnN0YW5jZW9mIG4uUmVmJiZzIGluc3RhbmNlb2Ygbi5EaWN0JiYoaS5zdHJ1Y3RUcmVlUGFyZW50PXtyZWY6cixkaWN0OmF9KTtyZXR1cm4hMH1yZXR1cm4hMX07Zm9yKGNvbnN0IGUgb2YgYyl7aWYoIShlIGluc3RhbmNlb2Ygbi5SZWYpKWNvbnRpbnVlO2NvbnN0IGE9dC5mZXRjaChlKSxyPWEuZ2V0KCJLIik7aWYoTnVtYmVyLmlzSW50ZWdlcihyKSl1cGRhdGVFbGVtZW50KHIsYSxlKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkocikpZm9yKGxldCBuIG9mIHIpe249dC5mZXRjaElmUmVmKG4pO2lmKE51bWJlci5pc0ludGVnZXIobikmJnVwZGF0ZUVsZW1lbnQobixhLGUpKWJyZWFrfX19c3RhdGljIGFzeW5jI0Yoe3N0cnVjdFRyZWVQYXJlbnQ6e3JlZjplLGRpY3Q6dH0sdGFnRGljdDphLG5ld1RhZ1JlZjppLGZhbGxiYWNrUmVmOm8seHJlZjpjLG5ld1JlZnM6bCxidWZmZXI6aH0pe2NvbnN0IHU9dC5nZXRSYXcoIlAiKTtsZXQgZD1jLmZldGNoSWZSZWYodSk7YS5zZXQoIlAiLHUpO2xldCBmLGc9ITEscD1kLmdldFJhdygiSyIpO2lmKHAgaW5zdGFuY2VvZiBuLlJlZilmPWMuZmV0Y2gocCk7ZWxzZXtmPXA7cD1jLmdldE5ld1RlbXBvcmFyeVJlZigpO2Q9ZC5jbG9uZSgpO2Quc2V0KCJLIixwKTtnPSEwfWlmKEFycmF5LmlzQXJyYXkoZikpe2NvbnN0IHQ9Zi5pbmRleE9mKGUpO2lmKCEodD49MCkpeygwLHIud2FybikoIkNhbm5vdCB1cGRhdGUgdGhlIHN0cnVjdCB0cmVlOiBwYXJlbnQga2lkIG5vdCBmb3VuZC4iKTthLnNldCgiUCIsbyk7cmV0dXJufWY9Zi5zbGljZSgpO2Yuc3BsaWNlKHQrMSwwLGkpfWVsc2UgaWYoZiBpbnN0YW5jZW9mIG4uRGljdCl7Zj1bcCxpXTtwPWMuZ2V0TmV3VGVtcG9yYXJ5UmVmKCk7ZC5zZXQoIksiLHApO2c9ITB9aC5sZW5ndGg9MDthd2FpdCgwLHMud3JpdGVPYmplY3QpKHAsZixoLGMpO2wucHVzaCh7cmVmOnAsZGF0YTpoLmpvaW4oIiIpfSk7aWYoZyl7aC5sZW5ndGg9MDthd2FpdCgwLHMud3JpdGVPYmplY3QpKHUsZCxoLGMpO2wucHVzaCh7cmVmOnUsZGF0YTpoLmpvaW4oIiIpfSl9fX10LlN0cnVjdFRyZWVSb290PVN0cnVjdFRyZWVSb290O2NsYXNzIFN0cnVjdEVsZW1lbnROb2Rle2NvbnN0cnVjdG9yKGUsdCl7dGhpcy50cmVlPWU7dGhpcy5kaWN0PXQ7dGhpcy5raWRzPVtdO3RoaXMucGFyc2VLaWRzKCl9Z2V0IHJvbGUoKXtjb25zdCBlPXRoaXMuZGljdC5nZXQoIlMiKSx0PWUgaW5zdGFuY2VvZiBuLk5hbWU/ZS5uYW1lOiIiLHtyb290OmF9PXRoaXMudHJlZTtyZXR1cm4gYS5yb2xlTWFwLmhhcyh0KT9hLnJvbGVNYXAuZ2V0KHQpOnR9cGFyc2VLaWRzKCl7bGV0IGU9bnVsbDtjb25zdCB0PXRoaXMuZGljdC5nZXRSYXcoIlBnIik7dCBpbnN0YW5jZW9mIG4uUmVmJiYoZT10LnRvU3RyaW5nKCkpO2NvbnN0IGE9dGhpcy5kaWN0LmdldCgiSyIpO2lmKEFycmF5LmlzQXJyYXkoYSkpZm9yKGNvbnN0IHQgb2YgYSl7Y29uc3QgYT10aGlzLnBhcnNlS2lkKGUsdCk7YSYmdGhpcy5raWRzLnB1c2goYSl9ZWxzZXtjb25zdCB0PXRoaXMucGFyc2VLaWQoZSxhKTt0JiZ0aGlzLmtpZHMucHVzaCh0KX19cGFyc2VLaWQoZSx0KXtpZihOdW1iZXIuaXNJbnRlZ2VyKHQpKXJldHVybiB0aGlzLnRyZWUucGFnZURpY3Qub2JqSWQhPT1lP251bGw6bmV3IFN0cnVjdEVsZW1lbnQoe3R5cGU6byxtY2lkOnQscGFnZU9iaklkOmV9KTtsZXQgYT1udWxsO3QgaW5zdGFuY2VvZiBuLlJlZj9hPXRoaXMuZGljdC54cmVmLmZldGNoKHQpOnQgaW5zdGFuY2VvZiBuLkRpY3QmJihhPXQpO2lmKCFhKXJldHVybiBudWxsO2NvbnN0IHI9YS5nZXRSYXcoIlBnIik7ciBpbnN0YW5jZW9mIG4uUmVmJiYoZT1yLnRvU3RyaW5nKCkpO2NvbnN0IGk9YS5nZXQoIlR5cGUiKWluc3RhbmNlb2Ygbi5OYW1lP2EuZ2V0KCJUeXBlIikubmFtZTpudWxsO2lmKCJNQ1IiPT09aSl7aWYodGhpcy50cmVlLnBhZ2VEaWN0Lm9iaklkIT09ZSlyZXR1cm4gbnVsbDtjb25zdCB0PWEuZ2V0UmF3KCJTdG0iKTtyZXR1cm4gbmV3IFN0cnVjdEVsZW1lbnQoe3R5cGU6YyxyZWZPYmpJZDp0IGluc3RhbmNlb2Ygbi5SZWY/dC50b1N0cmluZygpOm51bGwscGFnZU9iaklkOmUsbWNpZDphLmdldCgiTUNJRCIpfSl9aWYoIk9CSlIiPT09aSl7aWYodGhpcy50cmVlLnBhZ2VEaWN0Lm9iaklkIT09ZSlyZXR1cm4gbnVsbDtjb25zdCB0PWEuZ2V0UmF3KCJPYmoiKTtyZXR1cm4gbmV3IFN0cnVjdEVsZW1lbnQoe3R5cGU6bCxyZWZPYmpJZDp0IGluc3RhbmNlb2Ygbi5SZWY/dC50b1N0cmluZygpOm51bGwscGFnZU9iaklkOmV9KX1yZXR1cm4gbmV3IFN0cnVjdEVsZW1lbnQoe3R5cGU6dSxkaWN0OmF9KX19Y2xhc3MgU3RydWN0RWxlbWVudHtjb25zdHJ1Y3Rvcih7dHlwZTplLGRpY3Q6dD1udWxsLG1jaWQ6YT1udWxsLHBhZ2VPYmpJZDpyPW51bGwscmVmT2JqSWQ6bj1udWxsfSl7dGhpcy50eXBlPWU7dGhpcy5kaWN0PXQ7dGhpcy5tY2lkPWE7dGhpcy5wYWdlT2JqSWQ9cjt0aGlzLnJlZk9iaklkPW47dGhpcy5wYXJlbnROb2RlPW51bGx9fXQuU3RydWN0VHJlZVBhZ2U9Y2xhc3MgU3RydWN0VHJlZVBhZ2V7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnJvb3Q9ZTt0aGlzLnJvb3REaWN0PWU/ZS5kaWN0Om51bGw7dGhpcy5wYWdlRGljdD10O3RoaXMubm9kZXM9W119cGFyc2UoZSl7aWYoIXRoaXMucm9vdHx8IXRoaXMucm9vdERpY3QpcmV0dXJuO2NvbnN0IHQ9dGhpcy5yb290RGljdC5nZXQoIlBhcmVudFRyZWUiKTtpZighdClyZXR1cm47Y29uc3QgYT10aGlzLnBhZ2VEaWN0LmdldCgiU3RydWN0UGFyZW50cyIpLHI9ZSBpbnN0YW5jZW9mIG4uUmVmJiZ0aGlzLnJvb3Quc3RydWN0UGFyZW50SWRzPy5nZXQoZSk7aWYoIU51bWJlci5pc0ludGVnZXIoYSkmJiFyKXJldHVybjtjb25zdCBzPW5ldyBNYXAsbz1uZXcgaS5OdW1iZXJUcmVlKHQsdGhpcy5yb290RGljdC54cmVmKTtpZihOdW1iZXIuaXNJbnRlZ2VyKGEpKXtjb25zdCBlPW8uZ2V0KGEpO2lmKEFycmF5LmlzQXJyYXkoZSkpZm9yKGNvbnN0IHQgb2YgZSl0IGluc3RhbmNlb2Ygbi5SZWYmJnRoaXMuYWRkTm9kZSh0aGlzLnJvb3REaWN0LnhyZWYuZmV0Y2godCkscyl9aWYocilmb3IoY29uc3RbZSx0XW9mIHIpe2NvbnN0IGE9by5nZXQoZSk7aWYoYSl7Y29uc3QgZT10aGlzLmFkZE5vZGUodGhpcy5yb290RGljdC54cmVmLmZldGNoSWZSZWYoYSkscyk7MT09PWU/LmtpZHM/Lmxlbmd0aCYmZS5raWRzWzBdLnR5cGU9PT1sJiYoZS5raWRzWzBdLnR5cGU9dCl9fX1hZGROb2RlKGUsdCxhPTApe2lmKGE+NDApeygwLHIud2FybikoIlN0cnVjdFRyZWUgTUFYX0RFUFRIIHJlYWNoZWQuIik7cmV0dXJuIG51bGx9aWYodC5oYXMoZSkpcmV0dXJuIHQuZ2V0KGUpO2NvbnN0IGk9bmV3IFN0cnVjdEVsZW1lbnROb2RlKHRoaXMsZSk7dC5zZXQoZSxpKTtjb25zdCBzPWUuZ2V0KCJQIik7aWYoIXN8fCgwLG4uaXNOYW1lKShzLmdldCgiVHlwZSIpLCJTdHJ1Y3RUcmVlUm9vdCIpKXt0aGlzLmFkZFRvcExldmVsTm9kZShlLGkpfHx0LmRlbGV0ZShlKTtyZXR1cm4gaX1jb25zdCBvPXRoaXMuYWRkTm9kZShzLHQsYSsxKTtpZighbylyZXR1cm4gaTtsZXQgYz0hMTtmb3IoY29uc3QgdCBvZiBvLmtpZHMpaWYodC50eXBlPT09dSYmdC5kaWN0PT09ZSl7dC5wYXJlbnROb2RlPWk7Yz0hMH1jfHx0LmRlbGV0ZShlKTtyZXR1cm4gaX1hZGRUb3BMZXZlbE5vZGUoZSx0KXtjb25zdCBhPXRoaXMucm9vdERpY3QuZ2V0KCJLIik7aWYoIWEpcmV0dXJuITE7aWYoYSBpbnN0YW5jZW9mIG4uRGljdCl7aWYoYS5vYmpJZCE9PWUub2JqSWQpcmV0dXJuITE7dGhpcy5ub2Rlc1swXT10O3JldHVybiEwfWlmKCFBcnJheS5pc0FycmF5KGEpKXJldHVybiEwO2xldCByPSExO2ZvcihsZXQgbj0wO248YS5sZW5ndGg7bisrKXtjb25zdCBpPWFbbl07aWYoaT8udG9TdHJpbmcoKT09PWUub2JqSWQpe3RoaXMubm9kZXNbbl09dDtyPSEwfX1yZXR1cm4gcn1nZXQgc2VyaWFsaXphYmxlKCl7ZnVuY3Rpb24gbm9kZVRvU2VyaWFsaXphYmxlKGUsdCxhPTApe2lmKGE+NDApeygwLHIud2FybikoIlN0cnVjdFRyZWUgdG9vIGRlZXAgdG8gYmUgZnVsbHkgc2VyaWFsaXplZC4iKTtyZXR1cm59Y29uc3Qgbj1PYmplY3QuY3JlYXRlKG51bGwpO24ucm9sZT1lLnJvbGU7bi5jaGlsZHJlbj1bXTt0LmNoaWxkcmVuLnB1c2gobik7Y29uc3QgaT1lLmRpY3QuZ2V0KCJBbHQiKTsic3RyaW5nIj09dHlwZW9mIGkmJihuLmFsdD0oMCxyLnN0cmluZ1RvUERGU3RyaW5nKShpKSk7Y29uc3Qgcz1lLmRpY3QuZ2V0KCJMYW5nIik7InN0cmluZyI9PXR5cGVvZiBzJiYobi5sYW5nPSgwLHIuc3RyaW5nVG9QREZTdHJpbmcpKHMpKTtmb3IoY29uc3QgdCBvZiBlLmtpZHMpe2NvbnN0IGU9dC50eXBlPT09dT90LnBhcmVudE5vZGU6bnVsbDtlP25vZGVUb1NlcmlhbGl6YWJsZShlLG4sYSsxKTp0LnR5cGU9PT1vfHx0LnR5cGU9PT1jP24uY2hpbGRyZW4ucHVzaCh7dHlwZToiY29udGVudCIsaWQ6YHAke3QucGFnZU9iaklkfV9tYyR7dC5tY2lkfWB9KTp0LnR5cGU9PT1sP24uY2hpbGRyZW4ucHVzaCh7dHlwZToib2JqZWN0IixpZDp0LnJlZk9iaklkfSk6dC50eXBlPT09aCYmbi5jaGlsZHJlbi5wdXNoKHt0eXBlOiJhbm5vdGF0aW9uIixpZDpgJHtyLkFubm90YXRpb25QcmVmaXh9JHt0LnJlZk9iaklkfWB9KX19Y29uc3QgZT1PYmplY3QuY3JlYXRlKG51bGwpO2UuY2hpbGRyZW49W107ZS5yb2xlPSJSb290Ijtmb3IoY29uc3QgdCBvZiB0aGlzLm5vZGVzKXQmJm5vZGVUb1NlcmlhbGl6YWJsZSh0LGUpO3JldHVybiBlfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5pbmNyZW1lbnRhbFVwZGF0ZT1hc3luYyBmdW5jdGlvbiBpbmNyZW1lbnRhbFVwZGF0ZSh7b3JpZ2luYWxEYXRhOmUseHJlZkluZm86dCxuZXdSZWZzOmEseHJlZjpvPW51bGwsaGFzWGZhOmw9ITEseGZhRGF0YXNldHNSZWY6aD1udWxsLGhhc1hmYURhdGFzZXRzRW50cnk6dT0hMSxuZWVkQXBwZWFyYW5jZXM6ZCxhY3JvRm9ybVJlZjpmPW51bGwsYWNyb0Zvcm06Zz1udWxsLHhmYURhdGE6cD1udWxsfSl7YXdhaXQgYXN5bmMgZnVuY3Rpb24gdXBkYXRlQWNyb2Zvcm0oe3hyZWY6ZSxhY3JvRm9ybTp0LGFjcm9Gb3JtUmVmOmEsaGFzWGZhOm4saGFzWGZhRGF0YXNldHNFbnRyeTppLHhmYURhdGFzZXRzUmVmOnMsbmVlZEFwcGVhcmFuY2VzOm8sbmV3UmVmczpjfSl7IW58fGl8fHN8fCgwLHIud2FybikoIlhGQSAtIENhbm5vdCBzYXZlIGl0Iik7aWYoIW8mJighbnx8IXN8fGkpKXJldHVybjtjb25zdCBsPXQuY2xvbmUoKTtpZihuJiYhaSl7Y29uc3QgZT10LmdldCgiWEZBIikuc2xpY2UoKTtlLnNwbGljZSgyLDAsImRhdGFzZXRzIik7ZS5zcGxpY2UoMywwLHMpO2wuc2V0KCJYRkEiLGUpfW8mJmwuc2V0KCJOZWVkQXBwZWFyYW5jZXMiLCEwKTtjb25zdCBoPVtdO2F3YWl0IHdyaXRlT2JqZWN0KGEsbCxoLGUpO2MucHVzaCh7cmVmOmEsZGF0YTpoLmpvaW4oIiIpfSl9KHt4cmVmOm8sYWNyb0Zvcm06ZyxhY3JvRm9ybVJlZjpmLGhhc1hmYTpsLGhhc1hmYURhdGFzZXRzRW50cnk6dSx4ZmFEYXRhc2V0c1JlZjpoLG5lZWRBcHBlYXJhbmNlczpkLG5ld1JlZnM6YX0pO2wmJmZ1bmN0aW9uIHVwZGF0ZVhGQSh7eGZhRGF0YTplLHhmYURhdGFzZXRzUmVmOnQsbmV3UmVmczphLHhyZWY6bn0pe2lmKG51bGw9PT1lKXtlPWZ1bmN0aW9uIHdyaXRlWEZBRGF0YUZvckFjcm9mb3JtKGUsdCl7Y29uc3QgYT1uZXcgcy5TaW1wbGVYTUxQYXJzZXIoe2hhc0F0dHJpYnV0ZXM6ITB9KS5wYXJzZUZyb21TdHJpbmcoZSk7Zm9yKGNvbnN0e3hmYTplfW9mIHQpe2lmKCFlKWNvbnRpbnVlO2NvbnN0e3BhdGg6dCx2YWx1ZTpufT1lO2lmKCF0KWNvbnRpbnVlO2NvbnN0IG89KDAsaS5wYXJzZVhGQVBhdGgpKHQpO2xldCBjPWEuZG9jdW1lbnRFbGVtZW50LnNlYXJjaE5vZGUobywwKTshYyYmby5sZW5ndGg+MSYmKGM9YS5kb2N1bWVudEVsZW1lbnQuc2VhcmNoTm9kZShbby5hdCgtMSldLDApKTtjP2MuY2hpbGROb2Rlcz1BcnJheS5pc0FycmF5KG4pP24ubWFwKChlPT5uZXcgcy5TaW1wbGVET01Ob2RlKCJ2YWx1ZSIsZSkpKTpbbmV3IHMuU2ltcGxlRE9NTm9kZSgiI3RleHQiLG4pXTooMCxyLndhcm4pKGBOb2RlIG5vdCBmb3VuZCBmb3IgcGF0aDogJHt0fWApfWNvbnN0IG49W107YS5kb2N1bWVudEVsZW1lbnQuZHVtcChuKTtyZXR1cm4gbi5qb2luKCIiKX0obi5mZXRjaElmUmVmKHQpLmdldFN0cmluZygpLGEpfWNvbnN0IG89bi5lbmNyeXB0O2lmKG8pe2U9by5jcmVhdGVDaXBoZXJUcmFuc2Zvcm0odC5udW0sdC5nZW4pLmVuY3J5cHRTdHJpbmcoZSl9Y29uc3QgYz1gJHt0Lm51bX0gJHt0Lmdlbn0gb2JqXG48PCAvVHlwZSAvRW1iZWRkZWRGaWxlIC9MZW5ndGggJHtlLmxlbmd0aH0+Plxuc3RyZWFtXG5gK2UrIlxuZW5kc3RyZWFtXG5lbmRvYmpcbiI7YS5wdXNoKHtyZWY6dCxkYXRhOmN9KX0oe3hmYURhdGE6cCx4ZmFEYXRhc2V0c1JlZjpoLG5ld1JlZnM6YSx4cmVmOm99KTtjb25zdCBtPW5ldyBuLkRpY3QobnVsbCksYj10Lm5ld1JlZjtsZXQgeSx3O2NvbnN0IFM9ZS5hdCgtMSk7aWYoMTA9PT1TfHwxMz09PVMpe3k9W107dz1lLmxlbmd0aH1lbHNle3k9WyJcbiJdO3c9ZS5sZW5ndGgrMX1tLnNldCgiU2l6ZSIsYi5udW0rMSk7bS5zZXQoIlByZXYiLHQuc3RhcnRYUmVmKTttLnNldCgiVHlwZSIsbi5OYW1lLmdldCgiWFJlZiIpKTtudWxsIT09dC5yb290UmVmJiZtLnNldCgiUm9vdCIsdC5yb290UmVmKTtudWxsIT09dC5pbmZvUmVmJiZtLnNldCgiSW5mbyIsdC5pbmZvUmVmKTtudWxsIT09dC5lbmNyeXB0UmVmJiZtLnNldCgiRW5jcnlwdCIsdC5lbmNyeXB0UmVmKTthLnB1c2goe3JlZjpiLGRhdGE6IiJ9KTthPWEuc29ydCgoKGUsdCk9PmUucmVmLm51bS10LnJlZi5udW0pKTtjb25zdCB4PVtbMCwxLDY1NTM1XV0sQz1bMCwxXTtsZXQgaz0wO2Zvcihjb25zdHtyZWY6ZSxkYXRhOnR9b2YgYSl7az1NYXRoLm1heChrLHcpO3gucHVzaChbMSx3LE1hdGgubWluKGUuZ2VuLDY1NTM1KV0pO3crPXQubGVuZ3RoO0MucHVzaChlLm51bSwxKTt5LnB1c2godCl9bS5zZXQoIkluZGV4IixDKTtpZihBcnJheS5pc0FycmF5KHQuZmlsZUlkcykmJnQuZmlsZUlkcy5sZW5ndGg+MCl7Y29uc3QgZT1mdW5jdGlvbiBjb21wdXRlTUQ1KGUsdCl7Y29uc3QgYT1NYXRoLmZsb29yKERhdGUubm93KCkvMWUzKSxuPXQuZmlsZW5hbWV8fCIiLGk9W2EudG9TdHJpbmcoKSxuLGUudG9TdHJpbmcoKV07bGV0IHM9aS5yZWR1Y2UoKChlLHQpPT5lK3QubGVuZ3RoKSwwKTtmb3IoY29uc3QgZSBvZiBPYmplY3QudmFsdWVzKHQuaW5mbykpe2kucHVzaChlKTtzKz1lLmxlbmd0aH1jb25zdCBvPW5ldyBVaW50OEFycmF5KHMpO2xldCBsPTA7Zm9yKGNvbnN0IGUgb2YgaSl7d3JpdGVTdHJpbmcoZSxsLG8pO2wrPWUubGVuZ3RofXJldHVybigwLHIuYnl0ZXNUb1N0cmluZykoKDAsYy5jYWxjdWxhdGVNRDUpKG8pKX0odyx0KTttLnNldCgiSUQiLFt0LmZpbGVJZHNbMF0sZV0pfWNvbnN0IHY9WzEsTWF0aC5jZWlsKE1hdGgubG9nMihrKS84KSwyXSxGPSh2WzBdK3ZbMV0rdlsyXSkqeC5sZW5ndGg7bS5zZXQoIlciLHYpO20uc2V0KCJMZW5ndGgiLEYpO3kucHVzaChgJHtiLm51bX0gJHtiLmdlbn0gb2JqXG5gKTthd2FpdCB3cml0ZURpY3QobSx5LG51bGwpO3kucHVzaCgiIHN0cmVhbVxuIik7Y29uc3QgTz15LnJlZHVjZSgoKGUsdCk9PmUrdC5sZW5ndGgpLDApLFQ9YFxuZW5kc3RyZWFtXG5lbmRvYmpcbnN0YXJ0eHJlZlxuJHt3fVxuJSVFT0ZcbmAsTT1uZXcgVWludDhBcnJheShlLmxlbmd0aCtPK0YrVC5sZW5ndGgpO00uc2V0KGUpO2xldCBEPWUubGVuZ3RoO2Zvcihjb25zdCBlIG9mIHkpe3dyaXRlU3RyaW5nKGUsRCxNKTtEKz1lLmxlbmd0aH1mb3IoY29uc3RbZSx0LGFdb2YgeCl7RD13cml0ZUludChlLHZbMF0sRCxNKTtEPXdyaXRlSW50KHQsdlsxXSxELE0pO0Q9d3JpdGVJbnQoYSx2WzJdLEQsTSl9d3JpdGVTdHJpbmcoVCxELE0pO3JldHVybiBNfTt0LndyaXRlRGljdD13cml0ZURpY3Q7dC53cml0ZU9iamVjdD13cml0ZU9iamVjdDt2YXIgcj1hKDIpLG49YSg0KSxpPWEoMykscz1hKDcxKSxvPWEoNSksYz1hKDc0KTthc3luYyBmdW5jdGlvbiB3cml0ZU9iamVjdChlLHQsYSx7ZW5jcnlwdDpyPW51bGx9KXtjb25zdCBpPXI/LmNyZWF0ZUNpcGhlclRyYW5zZm9ybShlLm51bSxlLmdlbik7YS5wdXNoKGAke2UubnVtfSAke2UuZ2VufSBvYmpcbmApO3QgaW5zdGFuY2VvZiBuLkRpY3Q/YXdhaXQgd3JpdGVEaWN0KHQsYSxpKTp0IGluc3RhbmNlb2Ygby5CYXNlU3RyZWFtP2F3YWl0IHdyaXRlU3RyZWFtKHQsYSxpKTpBcnJheS5pc0FycmF5KHQpJiZhd2FpdCB3cml0ZUFycmF5KHQsYSxpKTthLnB1c2goIlxuZW5kb2JqXG4iKX1hc3luYyBmdW5jdGlvbiB3cml0ZURpY3QoZSx0LGEpe3QucHVzaCgiPDwiKTtmb3IoY29uc3QgciBvZiBlLmdldEtleXMoKSl7dC5wdXNoKGAgLyR7KDAsaS5lc2NhcGVQREZOYW1lKShyKX0gYCk7YXdhaXQgd3JpdGVWYWx1ZShlLmdldFJhdyhyKSx0LGEpfXQucHVzaCgiPj4iKX1hc3luYyBmdW5jdGlvbiB3cml0ZVN0cmVhbShlLHQsYSl7bGV0IGk9ZS5nZXRTdHJpbmcoKTtjb25zdHtkaWN0OnN9PWUsW28sY109YXdhaXQgUHJvbWlzZS5hbGwoW3MuZ2V0QXN5bmMoIkZpbHRlciIpLHMuZ2V0QXN5bmMoIkRlY29kZVBhcm1zIildKSxsPUFycmF5LmlzQXJyYXkobyk/YXdhaXQgcy54cmVmLmZldGNoSWZSZWZBc3luYyhvWzBdKTpvLGg9KDAsbi5pc05hbWUpKGwsIkZsYXRlRGVjb2RlIik7aWYoInVuZGVmaW5lZCIhPXR5cGVvZiBDb21wcmVzc2lvblN0cmVhbSYmKGkubGVuZ3RoPj0yNTZ8fGgpKXRyeXtjb25zdCBlPSgwLHIuc3RyaW5nVG9CeXRlcykoaSksdD1uZXcgQ29tcHJlc3Npb25TdHJlYW0oImRlZmxhdGUiKSxhPXQud3JpdGFibGUuZ2V0V3JpdGVyKCk7YS53cml0ZShlKTthLmNsb3NlKCk7Y29uc3QgbD1hd2FpdCBuZXcgUmVzcG9uc2UodC5yZWFkYWJsZSkuYXJyYXlCdWZmZXIoKTtpPSgwLHIuYnl0ZXNUb1N0cmluZykobmV3IFVpbnQ4QXJyYXkobCkpO2xldCB1LGQ7aWYobyl7aWYoIWgpe3U9QXJyYXkuaXNBcnJheShvKT9bbi5OYW1lLmdldCgiRmxhdGVEZWNvZGUiKSwuLi5vXTpbbi5OYW1lLmdldCgiRmxhdGVEZWNvZGUiKSxvXTtjJiYoZD1BcnJheS5pc0FycmF5KGMpP1tudWxsLC4uLmNdOltudWxsLGNdKX19ZWxzZSB1PW4uTmFtZS5nZXQoIkZsYXRlRGVjb2RlIik7dSYmcy5zZXQoIkZpbHRlciIsdSk7ZCYmcy5zZXQoIkRlY29kZVBhcm1zIixkKX1jYXRjaChlKXsoMCxyLmluZm8pKGB3cml0ZVN0cmVhbSAtIGNhbm5vdCBjb21wcmVzcyBkYXRhOiAiJHtlfSIuYCl9YSYmKGk9YS5lbmNyeXB0U3RyaW5nKGkpKTtzLnNldCgiTGVuZ3RoIixpLmxlbmd0aCk7YXdhaXQgd3JpdGVEaWN0KHMsdCxhKTt0LnB1c2goIiBzdHJlYW1cbiIsaSwiXG5lbmRzdHJlYW0iKX1hc3luYyBmdW5jdGlvbiB3cml0ZUFycmF5KGUsdCxhKXt0LnB1c2goIlsiKTtsZXQgcj0hMDtmb3IoY29uc3QgbiBvZiBlKXtyP3I9ITE6dC5wdXNoKCIgIik7YXdhaXQgd3JpdGVWYWx1ZShuLHQsYSl9dC5wdXNoKCJdIil9YXN5bmMgZnVuY3Rpb24gd3JpdGVWYWx1ZShlLHQsYSl7aWYoZSBpbnN0YW5jZW9mIG4uTmFtZSl0LnB1c2goYC8keygwLGkuZXNjYXBlUERGTmFtZSkoZS5uYW1lKX1gKTtlbHNlIGlmKGUgaW5zdGFuY2VvZiBuLlJlZil0LnB1c2goYCR7ZS5udW19ICR7ZS5nZW59IFJgKTtlbHNlIGlmKEFycmF5LmlzQXJyYXkoZSkpYXdhaXQgd3JpdGVBcnJheShlLHQsYSk7ZWxzZSBpZigic3RyaW5nIj09dHlwZW9mIGUpe2EmJihlPWEuZW5jcnlwdFN0cmluZyhlKSk7dC5wdXNoKGAoJHsoMCxpLmVzY2FwZVN0cmluZykoZSl9KWApfWVsc2UibnVtYmVyIj09dHlwZW9mIGU/dC5wdXNoKCgwLGkubnVtYmVyVG9TdHJpbmcpKGUpKToiYm9vbGVhbiI9PXR5cGVvZiBlP3QucHVzaChlLnRvU3RyaW5nKCkpOmUgaW5zdGFuY2VvZiBuLkRpY3Q/YXdhaXQgd3JpdGVEaWN0KGUsdCxhKTplIGluc3RhbmNlb2Ygby5CYXNlU3RyZWFtP2F3YWl0IHdyaXRlU3RyZWFtKGUsdCxhKTpudWxsPT09ZT90LnB1c2goIm51bGwiKTooMCxyLndhcm4pKGBVbmhhbmRsZWQgdmFsdWUgaW4gd3JpdGVyOiAke3R5cGVvZiBlfSwgcGxlYXNlIGZpbGUgYSBidWcuYCl9ZnVuY3Rpb24gd3JpdGVJbnQoZSx0LGEscil7Zm9yKGxldCBuPXQrYS0xO24+YS0xO24tLSl7cltuXT0yNTUmZTtlPj49OH1yZXR1cm4gYSt0fWZ1bmN0aW9uIHdyaXRlU3RyaW5nKGUsdCxhKXtmb3IobGV0IHI9MCxuPWUubGVuZ3RoO3I8bjtyKyspYVt0K3JdPTI1NSZlLmNoYXJDb2RlQXQocil9fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuY2FsY3VsYXRlU0hBMjU2PXQuY2FsY3VsYXRlTUQ1PXQuUERGMjA9dC5QREYxNz10LkNpcGhlclRyYW5zZm9ybUZhY3Rvcnk9dC5BUkNGb3VyQ2lwaGVyPXQuQUVTMjU2Q2lwaGVyPXQuQUVTMTI4Q2lwaGVyPXZvaWQgMDt0LmNhbGN1bGF0ZVNIQTM4ND1jYWxjdWxhdGVTSEEzODQ7dC5jYWxjdWxhdGVTSEE1MTI9dm9pZCAwO3ZhciByPWEoMiksbj1hKDQpLGk9YSg3NSk7Y2xhc3MgQVJDRm91ckNpcGhlcntjb25zdHJ1Y3RvcihlKXt0aGlzLmE9MDt0aGlzLmI9MDtjb25zdCB0PW5ldyBVaW50OEFycmF5KDI1NiksYT1lLmxlbmd0aDtmb3IobGV0IGU9MDtlPDI1NjsrK2UpdFtlXT1lO2ZvcihsZXQgcj0wLG49MDtyPDI1NjsrK3Ipe2NvbnN0IGk9dFtyXTtuPW4raStlW3IlYV0mMjU1O3Rbcl09dFtuXTt0W25dPWl9dGhpcy5zPXR9ZW5jcnlwdEJsb2NrKGUpe2xldCB0PXRoaXMuYSxhPXRoaXMuYjtjb25zdCByPXRoaXMucyxuPWUubGVuZ3RoLGk9bmV3IFVpbnQ4QXJyYXkobik7Zm9yKGxldCBzPTA7czxuOysrcyl7dD10KzEmMjU1O2NvbnN0IG49clt0XTthPWErbiYyNTU7Y29uc3Qgbz1yW2FdO3JbdF09bztyW2FdPW47aVtzXT1lW3NdXnJbbitvJjI1NV19dGhpcy5hPXQ7dGhpcy5iPWE7cmV0dXJuIGl9ZGVjcnlwdEJsb2NrKGUpe3JldHVybiB0aGlzLmVuY3J5cHRCbG9jayhlKX1lbmNyeXB0KGUpe3JldHVybiB0aGlzLmVuY3J5cHRCbG9jayhlKX19dC5BUkNGb3VyQ2lwaGVyPUFSQ0ZvdXJDaXBoZXI7Y29uc3Qgcz1mdW5jdGlvbiBjYWxjdWxhdGVNRDVDbG9zdXJlKCl7Y29uc3QgZT1uZXcgVWludDhBcnJheShbNywxMiwxNywyMiw3LDEyLDE3LDIyLDcsMTIsMTcsMjIsNywxMiwxNywyMiw1LDksMTQsMjAsNSw5LDE0LDIwLDUsOSwxNCwyMCw1LDksMTQsMjAsNCwxMSwxNiwyMyw0LDExLDE2LDIzLDQsMTEsMTYsMjMsNCwxMSwxNiwyMyw2LDEwLDE1LDIxLDYsMTAsMTUsMjEsNiwxMCwxNSwyMSw2LDEwLDE1LDIxXSksdD1uZXcgSW50MzJBcnJheShbLTY4MDg3NjkzNiwtMzg5NTY0NTg2LDYwNjEwNTgxOSwtMTA0NDUyNTMzMCwtMTc2NDE4ODk3LDEyMDAwODA0MjYsLTE0NzMyMzEzNDEsLTQ1NzA1OTgzLDE3NzAwMzU0MTYsLTE5NTg0MTQ0MTcsLTQyMDYzLC0xOTkwNDA0MTYyLDE4MDQ2MDM2ODIsLTQwMzQxMTAxLC0xNTAyMDAyMjkwLDEyMzY1MzUzMjksLTE2NTc5NjUxMCwtMTA2OTUwMTYzMiw2NDM3MTc3MTMsLTM3Mzg5NzMwMiwtNzAxNTU4NjkxLDM4MDE2MDgzLC02NjA0NzgzMzUsLTQwNTUzNzg0OCw1Njg0NDY0MzgsLTEwMTk4MDM2OTAsLTE4NzM2Mzk2MSwxMTYzNTMxNTAxLC0xNDQ0NjgxNDY3LC01MTQwMzc4NCwxNzM1MzI4NDczLC0xOTI2NjA3NzM0LC0zNzg1NTgsLTIwMjI1NzQ0NjMsMTgzOTAzMDU2MiwtMzUzMDk1NTYsLTE1MzA5OTIwNjAsMTI3Mjg5MzM1MywtMTU1NDk3NjMyLC0xMDk0NzMwNjQwLDY4MTI3OTE3NCwtMzU4NTM3MjIyLC03MjI1MjE5NzksNzYwMjkxODksLTY0MDM2NDQ4NywtNDIxODE1ODM1LDUzMDc0MjUyMCwtOTk1MzM4NjUxLC0xOTg2MzA4NDQsMTEyNjg5MTQxNSwtMTQxNjM1NDkwNSwtNTc0MzQwNTUsMTcwMDQ4NTU3MSwtMTg5NDk4NjYwNiwtMTA1MTUyMywtMjA1NDkyMjc5OSwxODczMzEzMzU5LC0zMDYxMTc0NCwtMTU2MDE5ODM4MCwxMzA5MTUxNjQ5LC0xNDU1MjMwNzAsLTExMjAyMTAzNzksNzE4Nzg3MjU5LC0zNDM0ODU1NTFdKTtyZXR1cm4gZnVuY3Rpb24gaGFzaChhLHIsbil7bGV0IGk9MTczMjU4NDE5MyxzPS0yNzE3MzM4Nzksbz0tMTczMjU4NDE5NCxjPTI3MTczMzg3ODtjb25zdCBsPW4rNzImLTY0LGg9bmV3IFVpbnQ4QXJyYXkobCk7bGV0IHUsZDtmb3IodT0wO3U8bjsrK3UpaFt1XT1hW3IrK107aFt1KytdPTEyODtjb25zdCBmPWwtODtmb3IoO3U8ZjspaFt1KytdPTA7aFt1KytdPW48PDMmMjU1O2hbdSsrXT1uPj41JjI1NTtoW3UrK109bj4+MTMmMjU1O2hbdSsrXT1uPj4yMSYyNTU7aFt1KytdPW4+Pj4yOSYyNTU7aFt1KytdPTA7aFt1KytdPTA7aFt1KytdPTA7Y29uc3QgZz1uZXcgSW50MzJBcnJheSgxNik7Zm9yKHU9MDt1PGw7KXtmb3IoZD0wO2Q8MTY7KytkLHUrPTQpZ1tkXT1oW3VdfGhbdSsxXTw8OHxoW3UrMl08PDE2fGhbdSszXTw8MjQ7bGV0IGEscixuPWksbD1zLGY9byxwPWM7Zm9yKGQ9MDtkPDY0OysrZCl7aWYoZDwxNil7YT1sJmZ8fmwmcDtyPWR9ZWxzZSBpZihkPDMyKXthPXAmbHx+cCZmO3I9NSpkKzEmMTV9ZWxzZSBpZihkPDQ4KXthPWxeZl5wO3I9MypkKzUmMTV9ZWxzZXthPWZeKGx8fnApO3I9NypkJjE1fWNvbnN0IGk9cCxzPW4rYSt0W2RdK2dbcl18MCxvPWVbZF07cD1mO2Y9bDtsPWwrKHM8PG98cz4+PjMyLW8pfDA7bj1pfWk9aStufDA7cz1zK2x8MDtvPW8rZnwwO2M9YytwfDB9cmV0dXJuIG5ldyBVaW50OEFycmF5KFsyNTUmaSxpPj44JjI1NSxpPj4xNiYyNTUsaT4+PjI0JjI1NSwyNTUmcyxzPj44JjI1NSxzPj4xNiYyNTUscz4+PjI0JjI1NSwyNTUmbyxvPj44JjI1NSxvPj4xNiYyNTUsbz4+PjI0JjI1NSwyNTUmYyxjPj44JjI1NSxjPj4xNiYyNTUsYz4+PjI0JjI1NV0pfX0oKTt0LmNhbGN1bGF0ZU1ENT1zO2NsYXNzIFdvcmQ2NHtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuaGlnaD0wfGU7dGhpcy5sb3c9MHx0fWFuZChlKXt0aGlzLmhpZ2gmPWUuaGlnaDt0aGlzLmxvdyY9ZS5sb3d9eG9yKGUpe3RoaXMuaGlnaF49ZS5oaWdoO3RoaXMubG93Xj1lLmxvd31vcihlKXt0aGlzLmhpZ2h8PWUuaGlnaDt0aGlzLmxvd3w9ZS5sb3d9c2hpZnRSaWdodChlKXtpZihlPj0zMil7dGhpcy5sb3c9dGhpcy5oaWdoPj4+ZS0zMnwwO3RoaXMuaGlnaD0wfWVsc2V7dGhpcy5sb3c9dGhpcy5sb3c+Pj5lfHRoaXMuaGlnaDw8MzItZTt0aGlzLmhpZ2g9dGhpcy5oaWdoPj4+ZXwwfX1zaGlmdExlZnQoZSl7aWYoZT49MzIpe3RoaXMuaGlnaD10aGlzLmxvdzw8ZS0zMjt0aGlzLmxvdz0wfWVsc2V7dGhpcy5oaWdoPXRoaXMuaGlnaDw8ZXx0aGlzLmxvdz4+PjMyLWU7dGhpcy5sb3c8PD1lfX1yb3RhdGVSaWdodChlKXtsZXQgdCxhO2lmKDMyJmUpe2E9dGhpcy5sb3c7dD10aGlzLmhpZ2h9ZWxzZXt0PXRoaXMubG93O2E9dGhpcy5oaWdofWUmPTMxO3RoaXMubG93PXQ+Pj5lfGE8PDMyLWU7dGhpcy5oaWdoPWE+Pj5lfHQ8PDMyLWV9bm90KCl7dGhpcy5oaWdoPX50aGlzLmhpZ2g7dGhpcy5sb3c9fnRoaXMubG93fWFkZChlKXtjb25zdCB0PSh0aGlzLmxvdz4+PjApKyhlLmxvdz4+PjApO2xldCBhPSh0aGlzLmhpZ2g+Pj4wKSsoZS5oaWdoPj4+MCk7dD40Mjk0OTY3Mjk1JiYoYSs9MSk7dGhpcy5sb3c9MHx0O3RoaXMuaGlnaD0wfGF9Y29weVRvKGUsdCl7ZVt0XT10aGlzLmhpZ2g+Pj4yNCYyNTU7ZVt0KzFdPXRoaXMuaGlnaD4+MTYmMjU1O2VbdCsyXT10aGlzLmhpZ2g+PjgmMjU1O2VbdCszXT0yNTUmdGhpcy5oaWdoO2VbdCs0XT10aGlzLmxvdz4+PjI0JjI1NTtlW3QrNV09dGhpcy5sb3c+PjE2JjI1NTtlW3QrNl09dGhpcy5sb3c+PjgmMjU1O2VbdCs3XT0yNTUmdGhpcy5sb3d9YXNzaWduKGUpe3RoaXMuaGlnaD1lLmhpZ2g7dGhpcy5sb3c9ZS5sb3d9fWNvbnN0IG89ZnVuY3Rpb24gY2FsY3VsYXRlU0hBMjU2Q2xvc3VyZSgpe2Z1bmN0aW9uIHJvdHIoZSx0KXtyZXR1cm4gZT4+PnR8ZTw8MzItdH1mdW5jdGlvbiBjaChlLHQsYSl7cmV0dXJuIGUmdF5+ZSZhfWZ1bmN0aW9uIG1haihlLHQsYSl7cmV0dXJuIGUmdF5lJmFedCZhfWZ1bmN0aW9uIHNpZ21hKGUpe3JldHVybiByb3RyKGUsMilecm90cihlLDEzKV5yb3RyKGUsMjIpfWZ1bmN0aW9uIHNpZ21hUHJpbWUoZSl7cmV0dXJuIHJvdHIoZSw2KV5yb3RyKGUsMTEpXnJvdHIoZSwyNSl9ZnVuY3Rpb24gbGl0dGxlU2lnbWEoZSl7cmV0dXJuIHJvdHIoZSw3KV5yb3RyKGUsMTgpXmU+Pj4zfWNvbnN0IGU9WzExMTYzNTI0MDgsMTg5OTQ0NzQ0MSwzMDQ5MzIzNDcxLDM5MjEwMDk1NzMsOTYxOTg3MTYzLDE1MDg5NzA5OTMsMjQ1MzYzNTc0OCwyODcwNzYzMjIxLDM2MjQzODEwODAsMzEwNTk4NDAxLDYwNzIyNTI3OCwxNDI2ODgxOTg3LDE5MjUwNzgzODgsMjE2MjA3ODIwNiwyNjE0ODg4MTAzLDMyNDgyMjI1ODAsMzgzNTM5MDQwMSw0MDIyMjI0Nzc0LDI2NDM0NzA3OCw2MDQ4MDc2MjgsNzcwMjU1OTgzLDEyNDkxNTAxMjIsMTU1NTA4MTY5MiwxOTk2MDY0OTg2LDI1NTQyMjA4ODIsMjgyMTgzNDM0OSwyOTUyOTk2ODA4LDMyMTAzMTM2NzEsMzMzNjU3MTg5MSwzNTg0NTI4NzExLDExMzkyNjk5MywzMzgyNDE4OTUsNjY2MzA3MjA1LDc3MzUyOTkxMiwxMjk0NzU3MzcyLDEzOTYxODIyOTEsMTY5NTE4MzcwMCwxOTg2NjYxMDUxLDIxNzcwMjYzNTAsMjQ1Njk1NjAzNywyNzMwNDg1OTIxLDI4MjAzMDI0MTEsMzI1OTczMDgwMCwzMzQ1NzY0NzcxLDM1MTYwNjU4MTcsMzYwMDM1MjgwNCw0MDk0NTcxOTA5LDI3NTQyMzM0NCw0MzAyMjc3MzQsNTA2OTQ4NjE2LDY1OTA2MDU1Niw4ODM5OTc4NzcsOTU4MTM5NTcxLDEzMjI4MjIyMTgsMTUzNzAwMjA2MywxNzQ3ODczNzc5LDE5NTU1NjIyMjIsMjAyNDEwNDgxNSwyMjI3NzMwNDUyLDIzNjE4NTI0MjQsMjQyODQzNjQ3NCwyNzU2NzM0MTg3LDMyMDQwMzE0NzksMzMyOTMyNTI5OF07cmV0dXJuIGZ1bmN0aW9uIGhhc2godCxhLHIpe2xldCBuPTE3NzkwMzM3MDMsaT0zMTQ0MTM0Mjc3LHM9MTAxMzkwNDI0MixvPTI3NzM0ODA3NjIsYz0xMzU5ODkzMTE5LGw9MjYwMDgyMjkyNCxoPTUyODczNDYzNSx1PTE1NDE0NTkyMjU7Y29uc3QgZD02NCpNYXRoLmNlaWwoKHIrOSkvNjQpLGY9bmV3IFVpbnQ4QXJyYXkoZCk7bGV0IGcscDtmb3IoZz0wO2c8cjsrK2cpZltnXT10W2ErK107ZltnKytdPTEyODtjb25zdCBtPWQtODtmb3IoO2c8bTspZltnKytdPTA7ZltnKytdPTA7ZltnKytdPTA7ZltnKytdPTA7ZltnKytdPXI+Pj4yOSYyNTU7ZltnKytdPXI+PjIxJjI1NTtmW2crK109cj4+MTMmMjU1O2ZbZysrXT1yPj41JjI1NTtmW2crK109cjw8MyYyNTU7Y29uc3QgYj1uZXcgVWludDMyQXJyYXkoNjQpO2ZvcihnPTA7ZzxkOyl7Zm9yKHA9MDtwPDE2OysrcCl7YltwXT1mW2ddPDwyNHxmW2crMV08PDE2fGZbZysyXTw8OHxmW2crM107Zys9NH1mb3IocD0xNjtwPDY0OysrcCliW3BdPShyb3RyKHk9YltwLTJdLDE3KV5yb3RyKHksMTkpXnk+Pj4xMCkrYltwLTddK2xpdHRsZVNpZ21hKGJbcC0xNV0pK2JbcC0xNl18MDtsZXQgdCxhLHI9bixkPWksbT1zLHc9byxTPWMseD1sLEM9aCxrPXU7Zm9yKHA9MDtwPDY0OysrcCl7dD1rK3NpZ21hUHJpbWUoUykrY2goUyx4LEMpK2VbcF0rYltwXTthPXNpZ21hKHIpK21haihyLGQsbSk7az1DO0M9eDt4PVM7Uz13K3R8MDt3PW07bT1kO2Q9cjtyPXQrYXwwfW49bityfDA7aT1pK2R8MDtzPXMrbXwwO289byt3fDA7Yz1jK1N8MDtsPWwreHwwO2g9aCtDfDA7dT11K2t8MH12YXIgeTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoW24+PjI0JjI1NSxuPj4xNiYyNTUsbj4+OCYyNTUsMjU1Jm4saT4+MjQmMjU1LGk+PjE2JjI1NSxpPj44JjI1NSwyNTUmaSxzPj4yNCYyNTUscz4+MTYmMjU1LHM+PjgmMjU1LDI1NSZzLG8+PjI0JjI1NSxvPj4xNiYyNTUsbz4+OCYyNTUsMjU1Jm8sYz4+MjQmMjU1LGM+PjE2JjI1NSxjPj44JjI1NSwyNTUmYyxsPj4yNCYyNTUsbD4+MTYmMjU1LGw+PjgmMjU1LDI1NSZsLGg+PjI0JjI1NSxoPj4xNiYyNTUsaD4+OCYyNTUsMjU1JmgsdT4+MjQmMjU1LHU+PjE2JjI1NSx1Pj44JjI1NSwyNTUmdV0pfX0oKTt0LmNhbGN1bGF0ZVNIQTI1Nj1vO2NvbnN0IGM9ZnVuY3Rpb24gY2FsY3VsYXRlU0hBNTEyQ2xvc3VyZSgpe2Z1bmN0aW9uIGNoKGUsdCxhLHIsbil7ZS5hc3NpZ24odCk7ZS5hbmQoYSk7bi5hc3NpZ24odCk7bi5ub3QoKTtuLmFuZChyKTtlLnhvcihuKX1mdW5jdGlvbiBtYWooZSx0LGEscixuKXtlLmFzc2lnbih0KTtlLmFuZChhKTtuLmFzc2lnbih0KTtuLmFuZChyKTtlLnhvcihuKTtuLmFzc2lnbihhKTtuLmFuZChyKTtlLnhvcihuKX1mdW5jdGlvbiBzaWdtYShlLHQsYSl7ZS5hc3NpZ24odCk7ZS5yb3RhdGVSaWdodCgyOCk7YS5hc3NpZ24odCk7YS5yb3RhdGVSaWdodCgzNCk7ZS54b3IoYSk7YS5hc3NpZ24odCk7YS5yb3RhdGVSaWdodCgzOSk7ZS54b3IoYSl9ZnVuY3Rpb24gc2lnbWFQcmltZShlLHQsYSl7ZS5hc3NpZ24odCk7ZS5yb3RhdGVSaWdodCgxNCk7YS5hc3NpZ24odCk7YS5yb3RhdGVSaWdodCgxOCk7ZS54b3IoYSk7YS5hc3NpZ24odCk7YS5yb3RhdGVSaWdodCg0MSk7ZS54b3IoYSl9ZnVuY3Rpb24gbGl0dGxlU2lnbWEoZSx0LGEpe2UuYXNzaWduKHQpO2Uucm90YXRlUmlnaHQoMSk7YS5hc3NpZ24odCk7YS5yb3RhdGVSaWdodCg4KTtlLnhvcihhKTthLmFzc2lnbih0KTthLnNoaWZ0UmlnaHQoNyk7ZS54b3IoYSl9ZnVuY3Rpb24gbGl0dGxlU2lnbWFQcmltZShlLHQsYSl7ZS5hc3NpZ24odCk7ZS5yb3RhdGVSaWdodCgxOSk7YS5hc3NpZ24odCk7YS5yb3RhdGVSaWdodCg2MSk7ZS54b3IoYSk7YS5hc3NpZ24odCk7YS5zaGlmdFJpZ2h0KDYpO2UueG9yKGEpfWNvbnN0IGU9W25ldyBXb3JkNjQoMTExNjM1MjQwOCwzNjA5NzY3NDU4KSxuZXcgV29yZDY0KDE4OTk0NDc0NDEsNjAyODkxNzI1KSxuZXcgV29yZDY0KDMwNDkzMjM0NzEsMzk2NDQ4NDM5OSksbmV3IFdvcmQ2NCgzOTIxMDA5NTczLDIxNzMyOTU1NDgpLG5ldyBXb3JkNjQoOTYxOTg3MTYzLDQwODE2Mjg0NzIpLG5ldyBXb3JkNjQoMTUwODk3MDk5MywzMDUzODM0MjY1KSxuZXcgV29yZDY0KDI0NTM2MzU3NDgsMjkzNzY3MTU3OSksbmV3IFdvcmQ2NCgyODcwNzYzMjIxLDM2NjQ2MDk1NjApLG5ldyBXb3JkNjQoMzYyNDM4MTA4MCwyNzM0ODgzMzk0KSxuZXcgV29yZDY0KDMxMDU5ODQwMSwxMTY0OTk2NTQyKSxuZXcgV29yZDY0KDYwNzIyNTI3OCwxMzIzNjEwNzY0KSxuZXcgV29yZDY0KDE0MjY4ODE5ODcsMzU5MDMwNDk5NCksbmV3IFdvcmQ2NCgxOTI1MDc4Mzg4LDQwNjgxODIzODMpLG5ldyBXb3JkNjQoMjE2MjA3ODIwNiw5OTEzMzYxMTMpLG5ldyBXb3JkNjQoMjYxNDg4ODEwMyw2MzM4MDMzMTcpLG5ldyBXb3JkNjQoMzI0ODIyMjU4MCwzNDc5Nzc0ODY4KSxuZXcgV29yZDY0KDM4MzUzOTA0MDEsMjY2NjYxMzQ1OCksbmV3IFdvcmQ2NCg0MDIyMjI0Nzc0LDk0NDcxMTEzOSksbmV3IFdvcmQ2NCgyNjQzNDcwNzgsMjM0MTI2Mjc3MyksbmV3IFdvcmQ2NCg2MDQ4MDc2MjgsMjAwNzgwMDkzMyksbmV3IFdvcmQ2NCg3NzAyNTU5ODMsMTQ5NTk5MDkwMSksbmV3IFdvcmQ2NCgxMjQ5MTUwMTIyLDE4NTY0MzEyMzUpLG5ldyBXb3JkNjQoMTU1NTA4MTY5MiwzMTc1MjE4MTMyKSxuZXcgV29yZDY0KDE5OTYwNjQ5ODYsMjE5ODk1MDgzNyksbmV3IFdvcmQ2NCgyNTU0MjIwODgyLDM5OTk3MTkzMzkpLG5ldyBXb3JkNjQoMjgyMTgzNDM0OSw3NjY3ODQwMTYpLG5ldyBXb3JkNjQoMjk1Mjk5NjgwOCwyNTY2NTk0ODc5KSxuZXcgV29yZDY0KDMyMTAzMTM2NzEsMzIwMzMzNzk1NiksbmV3IFdvcmQ2NCgzMzM2NTcxODkxLDEwMzQ0NTcwMjYpLG5ldyBXb3JkNjQoMzU4NDUyODcxMSwyNDY2OTQ4OTAxKSxuZXcgV29yZDY0KDExMzkyNjk5MywzNzU4MzI2MzgzKSxuZXcgV29yZDY0KDMzODI0MTg5NSwxNjg3MTc5MzYpLG5ldyBXb3JkNjQoNjY2MzA3MjA1LDExODgxNzk5NjQpLG5ldyBXb3JkNjQoNzczNTI5OTEyLDE1NDYwNDU3MzQpLG5ldyBXb3JkNjQoMTI5NDc1NzM3MiwxNTIyODA1NDg1KSxuZXcgV29yZDY0KDEzOTYxODIyOTEsMjY0MzgzMzgyMyksbmV3IFdvcmQ2NCgxNjk1MTgzNzAwLDIzNDM1MjczOTApLG5ldyBXb3JkNjQoMTk4NjY2MTA1MSwxMDE0NDc3NDgwKSxuZXcgV29yZDY0KDIxNzcwMjYzNTAsMTIwNjc1OTE0MiksbmV3IFdvcmQ2NCgyNDU2OTU2MDM3LDM0NDA3NzYyNyksbmV3IFdvcmQ2NCgyNzMwNDg1OTIxLDEyOTA4NjM0NjApLG5ldyBXb3JkNjQoMjgyMDMwMjQxMSwzMTU4NDU0MjczKSxuZXcgV29yZDY0KDMyNTk3MzA4MDAsMzUwNTk1MjY1NyksbmV3IFdvcmQ2NCgzMzQ1NzY0NzcxLDEwNjIxNzAwOCksbmV3IFdvcmQ2NCgzNTE2MDY1ODE3LDM2MDYwMDgzNDQpLG5ldyBXb3JkNjQoMzYwMDM1MjgwNCwxNDMyNzI1Nzc2KSxuZXcgV29yZDY0KDQwOTQ1NzE5MDksMTQ2NzAzMTU5NCksbmV3IFdvcmQ2NCgyNzU0MjMzNDQsODUxMTY5NzIwKSxuZXcgV29yZDY0KDQzMDIyNzczNCwzMTAwODIzNzUyKSxuZXcgV29yZDY0KDUwNjk0ODYxNiwxMzYzMjU4MTk1KSxuZXcgV29yZDY0KDY1OTA2MDU1NiwzNzUwNjg1NTkzKSxuZXcgV29yZDY0KDg4Mzk5Nzg3NywzNzg1MDUwMjgwKSxuZXcgV29yZDY0KDk1ODEzOTU3MSwzMzE4MzA3NDI3KSxuZXcgV29yZDY0KDEzMjI4MjIyMTgsMzgxMjcyMzQwMyksbmV3IFdvcmQ2NCgxNTM3MDAyMDYzLDIwMDMwMzQ5OTUpLG5ldyBXb3JkNjQoMTc0Nzg3Mzc3OSwzNjAyMDM2ODk5KSxuZXcgV29yZDY0KDE5NTU1NjIyMjIsMTU3NTk5MDAxMiksbmV3IFdvcmQ2NCgyMDI0MTA0ODE1LDExMjU1OTI5MjgpLG5ldyBXb3JkNjQoMjIyNzczMDQ1MiwyNzE2OTA0MzA2KSxuZXcgV29yZDY0KDIzNjE4NTI0MjQsNDQyNzc2MDQ0KSxuZXcgV29yZDY0KDI0Mjg0MzY0NzQsNTkzNjk4MzQ0KSxuZXcgV29yZDY0KDI3NTY3MzQxODcsMzczMzExMDI0OSksbmV3IFdvcmQ2NCgzMjA0MDMxNDc5LDI5OTkzNTE1NzMpLG5ldyBXb3JkNjQoMzMyOTMyNTI5OCwzODE1OTIwNDI3KSxuZXcgV29yZDY0KDMzOTE1Njk2MTQsMzkyODM4MzkwMCksbmV3IFdvcmQ2NCgzNTE1MjY3MjcxLDU2NjI4MDcxMSksbmV3IFdvcmQ2NCgzOTQwMTg3NjA2LDM0NTQwNjk1MzQpLG5ldyBXb3JkNjQoNDExODYzMDI3MSw0MDAwMjM5OTkyKSxuZXcgV29yZDY0KDExNjQxODQ3NCwxOTE0MTM4NTU0KSxuZXcgV29yZDY0KDE3NDI5MjQyMSwyNzMxMDU1MjcwKSxuZXcgV29yZDY0KDI4OTM4MDM1NiwzMjAzOTkzMDA2KSxuZXcgV29yZDY0KDQ2MDM5MzI2OSwzMjA2MjAzMTUpLG5ldyBXb3JkNjQoNjg1NDcxNzMzLDU4NzQ5NjgzNiksbmV3IFdvcmQ2NCg4NTIxNDI5NzEsMTA4Njc5Mjg1MSksbmV3IFdvcmQ2NCgxMDE3MDM2Mjk4LDM2NTU0MzEwMCksbmV3IFdvcmQ2NCgxMTI2MDAwNTgwLDI2MTgyOTc2NzYpLG5ldyBXb3JkNjQoMTI4ODAzMzQ3MCwzNDA5ODU1MTU4KSxuZXcgV29yZDY0KDE1MDE1MDU5NDgsNDIzNDUwOTg2NiksbmV3IFdvcmQ2NCgxNjA3MTY3OTE1LDk4NzE2NzQ2OCksbmV3IFdvcmQ2NCgxODE2NDAyMzE2LDEyNDYxODk1OTEpXTtyZXR1cm4gZnVuY3Rpb24gaGFzaCh0LGEscixuPSExKXtsZXQgaSxzLG8sYyxsLGgsdSxkO2lmKG4pe2k9bmV3IFdvcmQ2NCgzNDE4MDcwMzY1LDMyMzgzNzEwMzIpO3M9bmV3IFdvcmQ2NCgxNjU0MjcwMjUwLDkxNDE1MDY2Myk7bz1uZXcgV29yZDY0KDI0Mzg1MjkzNzAsODEyNzAyOTk5KTtjPW5ldyBXb3JkNjQoMzU1NDYyMzYwLDQxNDQ5MTI2OTcpO2w9bmV3IFdvcmQ2NCgxNzMxNDA1NDE1LDQyOTA3NzU4NTcpO2g9bmV3IFdvcmQ2NCgyMzk0MTgwMjMxLDE3NTA2MDMwMjUpO3U9bmV3IFdvcmQ2NCgzNjc1MDA4NTI1LDE2OTQwNzY4MzkpO2Q9bmV3IFdvcmQ2NCgxMjAzMDYyODEzLDMyMDQwNzU0MjgpfWVsc2V7aT1uZXcgV29yZDY0KDE3NzkwMzM3MDMsNDA4OTIzNTcyMCk7cz1uZXcgV29yZDY0KDMxNDQxMzQyNzcsMjIyNzg3MzU5NSk7bz1uZXcgV29yZDY0KDEwMTM5MDQyNDIsNDI3MTE3NTcyMyk7Yz1uZXcgV29yZDY0KDI3NzM0ODA3NjIsMTU5NTc1MDEyOSk7bD1uZXcgV29yZDY0KDEzNTk4OTMxMTksMjkxNzU2NTEzNyk7aD1uZXcgV29yZDY0KDI2MDA4MjI5MjQsNzI1NTExMTk5KTt1PW5ldyBXb3JkNjQoNTI4NzM0NjM1LDQyMTUzODk1NDcpO2Q9bmV3IFdvcmQ2NCgxNTQxNDU5MjI1LDMyNzAzMzIwOSl9Y29uc3QgZj0xMjgqTWF0aC5jZWlsKChyKzE3KS8xMjgpLGc9bmV3IFVpbnQ4QXJyYXkoZik7bGV0IHAsbTtmb3IocD0wO3A8cjsrK3ApZ1twXT10W2ErK107Z1twKytdPTEyODtjb25zdCBiPWYtMTY7Zm9yKDtwPGI7KWdbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT0wO2dbcCsrXT1yPj4+MjkmMjU1O2dbcCsrXT1yPj4yMSYyNTU7Z1twKytdPXI+PjEzJjI1NTtnW3ArK109cj4+NSYyNTU7Z1twKytdPXI8PDMmMjU1O2NvbnN0IHk9bmV3IEFycmF5KDgwKTtmb3IocD0wO3A8ODA7cCsrKXlbcF09bmV3IFdvcmQ2NCgwLDApO2xldCB3PW5ldyBXb3JkNjQoMCwwKSxTPW5ldyBXb3JkNjQoMCwwKSx4PW5ldyBXb3JkNjQoMCwwKSxDPW5ldyBXb3JkNjQoMCwwKSxrPW5ldyBXb3JkNjQoMCwwKSx2PW5ldyBXb3JkNjQoMCwwKSxGPW5ldyBXb3JkNjQoMCwwKSxPPW5ldyBXb3JkNjQoMCwwKTtjb25zdCBUPW5ldyBXb3JkNjQoMCwwKSxNPW5ldyBXb3JkNjQoMCwwKSxEPW5ldyBXb3JkNjQoMCwwKSxFPW5ldyBXb3JkNjQoMCwwKTtsZXQgTixSO2ZvcihwPTA7cDxmOyl7Zm9yKG09MDttPDE2OysrbSl7eVttXS5oaWdoPWdbcF08PDI0fGdbcCsxXTw8MTZ8Z1twKzJdPDw4fGdbcCszXTt5W21dLmxvdz1nW3ArNF08PDI0fGdbcCs1XTw8MTZ8Z1twKzZdPDw4fGdbcCs3XTtwKz04fWZvcihtPTE2O208ODA7KyttKXtOPXlbbV07bGl0dGxlU2lnbWFQcmltZShOLHlbbS0yXSxFKTtOLmFkZCh5W20tN10pO2xpdHRsZVNpZ21hKEQseVttLTE1XSxFKTtOLmFkZChEKTtOLmFkZCh5W20tMTZdKX13LmFzc2lnbihpKTtTLmFzc2lnbihzKTt4LmFzc2lnbihvKTtDLmFzc2lnbihjKTtrLmFzc2lnbihsKTt2LmFzc2lnbihoKTtGLmFzc2lnbih1KTtPLmFzc2lnbihkKTtmb3IobT0wO208ODA7KyttKXtULmFzc2lnbihPKTtzaWdtYVByaW1lKEQsayxFKTtULmFkZChEKTtjaChELGssdixGLEUpO1QuYWRkKEQpO1QuYWRkKGVbbV0pO1QuYWRkKHlbbV0pO3NpZ21hKE0sdyxFKTttYWooRCx3LFMseCxFKTtNLmFkZChEKTtOPU87Tz1GO0Y9djt2PWs7Qy5hZGQoVCk7az1DO0M9eDt4PVM7Uz13O04uYXNzaWduKFQpO04uYWRkKE0pO3c9Tn1pLmFkZCh3KTtzLmFkZChTKTtvLmFkZCh4KTtjLmFkZChDKTtsLmFkZChrKTtoLmFkZCh2KTt1LmFkZChGKTtkLmFkZChPKX1pZihuKXtSPW5ldyBVaW50OEFycmF5KDQ4KTtpLmNvcHlUbyhSLDApO3MuY29weVRvKFIsOCk7by5jb3B5VG8oUiwxNik7Yy5jb3B5VG8oUiwyNCk7bC5jb3B5VG8oUiwzMik7aC5jb3B5VG8oUiw0MCl9ZWxzZXtSPW5ldyBVaW50OEFycmF5KDY0KTtpLmNvcHlUbyhSLDApO3MuY29weVRvKFIsOCk7by5jb3B5VG8oUiwxNik7Yy5jb3B5VG8oUiwyNCk7bC5jb3B5VG8oUiwzMik7aC5jb3B5VG8oUiw0MCk7dS5jb3B5VG8oUiw0OCk7ZC5jb3B5VG8oUiw1Nil9cmV0dXJuIFJ9fSgpO3QuY2FsY3VsYXRlU0hBNTEyPWM7ZnVuY3Rpb24gY2FsY3VsYXRlU0hBMzg0KGUsdCxhKXtyZXR1cm4gYyhlLHQsYSwhMCl9Y2xhc3MgTnVsbENpcGhlcntkZWNyeXB0QmxvY2soZSl7cmV0dXJuIGV9ZW5jcnlwdChlKXtyZXR1cm4gZX19Y2xhc3MgQUVTQmFzZUNpcGhlcntjb25zdHJ1Y3Rvcigpe3RoaXMuY29uc3RydWN0b3I9PT1BRVNCYXNlQ2lwaGVyJiYoMCxyLnVucmVhY2hhYmxlKSgiQ2Fubm90IGluaXRpYWxpemUgQUVTQmFzZUNpcGhlci4iKTt0aGlzLl9zPW5ldyBVaW50OEFycmF5KFs5OSwxMjQsMTE5LDEyMywyNDIsMTA3LDExMSwxOTcsNDgsMSwxMDMsNDMsMjU0LDIxNSwxNzEsMTE4LDIwMiwxMzAsMjAxLDEyNSwyNTAsODksNzEsMjQwLDE3MywyMTIsMTYyLDE3NSwxNTYsMTY0LDExNCwxOTIsMTgzLDI1MywxNDcsMzgsNTQsNjMsMjQ3LDIwNCw1MiwxNjUsMjI5LDI0MSwxMTMsMjE2LDQ5LDIxLDQsMTk5LDM1LDE5NSwyNCwxNTAsNSwxNTQsNywxOCwxMjgsMjI2LDIzNSwzOSwxNzgsMTE3LDksMTMxLDQ0LDI2LDI3LDExMCw5MCwxNjAsODIsNTksMjE0LDE3OSw0MSwyMjcsNDcsMTMyLDgzLDIwOSwwLDIzNywzMiwyNTIsMTc3LDkxLDEwNiwyMDMsMTkwLDU3LDc0LDc2LDg4LDIwNywyMDgsMjM5LDE3MCwyNTEsNjcsNzcsNTEsMTMzLDY5LDI0OSwyLDEyNyw4MCw2MCwxNTksMTY4LDgxLDE2Myw2NCwxNDMsMTQ2LDE1Nyw1NiwyNDUsMTg4LDE4MiwyMTgsMzMsMTYsMjU1LDI0MywyMTAsMjA1LDEyLDE5LDIzNiw5NSwxNTEsNjgsMjMsMTk2LDE2NywxMjYsNjEsMTAwLDkzLDI1LDExNSw5NiwxMjksNzksMjIwLDM0LDQyLDE0NCwxMzYsNzAsMjM4LDE4NCwyMCwyMjIsOTQsMTEsMjE5LDIyNCw1MCw1OCwxMCw3Myw2LDM2LDkyLDE5NCwyMTEsMTcyLDk4LDE0NSwxNDksMjI4LDEyMSwyMzEsMjAwLDU1LDEwOSwxNDEsMjEzLDc4LDE2OSwxMDgsODYsMjQ0LDIzNCwxMDEsMTIyLDE3NCw4LDE4NiwxMjAsMzcsNDYsMjgsMTY2LDE4MCwxOTgsMjMyLDIyMSwxMTYsMzEsNzUsMTg5LDEzOSwxMzgsMTEyLDYyLDE4MSwxMDIsNzIsMywyNDYsMTQsOTcsNTMsODcsMTg1LDEzNCwxOTMsMjksMTU4LDIyNSwyNDgsMTUyLDE3LDEwNSwyMTcsMTQyLDE0OCwxNTUsMzAsMTM1LDIzMywyMDYsODUsNDAsMjIzLDE0MCwxNjEsMTM3LDEzLDE5MSwyMzAsNjYsMTA0LDY1LDE1Myw0NSwxNSwxNzYsODQsMTg3LDIyXSk7dGhpcy5faW52X3M9bmV3IFVpbnQ4QXJyYXkoWzgyLDksMTA2LDIxMyw0OCw1NCwxNjUsNTYsMTkxLDY0LDE2MywxNTgsMTI5LDI0MywyMTUsMjUxLDEyNCwyMjcsNTcsMTMwLDE1NSw0NywyNTUsMTM1LDUyLDE0Miw2Nyw2OCwxOTYsMjIyLDIzMywyMDMsODQsMTIzLDE0OCw1MCwxNjYsMTk0LDM1LDYxLDIzOCw3NiwxNDksMTEsNjYsMjUwLDE5NSw3OCw4LDQ2LDE2MSwxMDIsNDAsMjE3LDM2LDE3OCwxMTgsOTEsMTYyLDczLDEwOSwxMzksMjA5LDM3LDExNCwyNDgsMjQ2LDEwMCwxMzQsMTA0LDE1MiwyMiwyMTIsMTY0LDkyLDIwNCw5MywxMDEsMTgyLDE0NiwxMDgsMTEyLDcyLDgwLDI1MywyMzcsMTg1LDIxOCw5NCwyMSw3MCw4NywxNjcsMTQxLDE1NywxMzIsMTQ0LDIxNiwxNzEsMCwxNDAsMTg4LDIxMSwxMCwyNDcsMjI4LDg4LDUsMTg0LDE3OSw2OSw2LDIwOCw0NCwzMCwxNDMsMjAyLDYzLDE1LDIsMTkzLDE3NSwxODksMywxLDE5LDEzOCwxMDcsNTgsMTQ1LDE3LDY1LDc5LDEwMywyMjAsMjM0LDE1MSwyNDIsMjA3LDIwNiwyNDAsMTgwLDIzMCwxMTUsMTUwLDE3MiwxMTYsMzQsMjMxLDE3Myw1MywxMzMsMjI2LDI0OSw1NSwyMzIsMjgsMTE3LDIyMywxMTAsNzEsMjQxLDI2LDExMywyOSw0MSwxOTcsMTM3LDExMSwxODMsOTgsMTQsMTcwLDI0LDE5MCwyNywyNTIsODYsNjIsNzUsMTk4LDIxMCwxMjEsMzIsMTU0LDIxOSwxOTIsMjU0LDEyMCwyMDUsOTAsMjQ0LDMxLDIyMSwxNjgsNTEsMTM2LDcsMTk5LDQ5LDE3NywxOCwxNiw4OSwzOSwxMjgsMjM2LDk1LDk2LDgxLDEyNywxNjksMjUsMTgxLDc0LDEzLDQ1LDIyOSwxMjIsMTU5LDE0NywyMDEsMTU2LDIzOSwxNjAsMjI0LDU5LDc3LDE3NCw0MiwyNDUsMTc2LDIwMCwyMzUsMTg3LDYwLDEzMSw4MywxNTMsOTcsMjMsNDMsNCwxMjYsMTg2LDExOSwyMTQsMzgsMjI1LDEwNSwyMCw5OSw4NSwzMywxMiwxMjVdKTt0aGlzLl9taXg9bmV3IFVpbnQzMkFycmF5KFswLDIzNTQ3NDE4Nyw0NzA5NDgzNzQsMzAzNzY1Mjc3LDk0MTg5Njc0OCw5MDg5MzM0MTUsNjA3NTMwNTU0LDcwODc4MDg0OSwxODgzNzkzNDk2LDIxMTgyMTQ5OTUsMTgxNzg2NjgzMCwxNjQ5NjM5MjM3LDEyMTUwNjExMDgsMTE4MTA0NTExOSwxNDE3NTYxNjk4LDE1MTc3Njc1MjksMzc2NzU4Njk5Miw0MDAzMDYxMTc5LDQyMzY0Mjk5OTAsNDA2OTI0Njg5MywzNjM1NzMzNjYwLDM2MDI3NzAzMjcsMzI5OTI3ODQ3NCwzNDAwNTI4NzY5LDI0MzAxMjIyMTYsMjY2NDU0MzcxNSwyMzYyMDkwMjM4LDIxOTM4NjI2NDUsMjgzNTEyMzM5NiwyODAxMTA3NDA3LDMwMzU1MzUwNTgsMzEzNTc0MDg4OSwzNjc4MTI0OTIzLDM1NzY4NzA1MTIsMzM0MTM5NDI4NSwzMzc0MzYxNzAyLDM4MTA0OTYzNDMsMzk3NzY3NTM1Niw0Mjc5MDgwMjU3LDQwNDM2MTAxODYsMjg3NjQ5NDYyNywyNzc2MjkyOTA0LDMwNzY2MzkwMjksMzExMDY1MDk0MiwyNDcyMDExNTM1LDI2NDAyNDMyMDQsMjQwMzcyODY2NSwyMTY5MzAzMDU4LDEwMDEwODk5OTUsODk5ODM1NTg0LDY2NjQ2NDczMyw2OTk0MzIxNTAsNTk3Mjc4NDcsMjI2OTA2ODYwLDUzMDQwMDc1MywyOTQ5MzA2ODIsMTI3MzE2ODc4NywxMTcyOTY3MDY0LDE0NzU0MTg1MDEsMTUwOTQzMDQxNCwxOTQyNDM1Nzc1LDIxMTA2Njc0NDQsMTg3NjI0MTgzMywxNjQxODE2MjI2LDI5MTAyMTk3NjYsMjc0MzAzNDEwOSwyOTc2MTUxNTIwLDMyMTE2MjMxNDcsMjUwNTIwMjEzOCwyNjA2NDUzOTY5LDIzMDI2OTAyNTIsMjI2OTcyODQ1NSwzNzExODI5NDIyLDM1NDM1OTkyNjksMzI0MDg5NDM5MiwzNDc1MzEzMzMxLDM4NDM2OTkwNzQsMzk0MzkwNjQ0MSw0MTc4MDYyMjI4LDQxNDQwNDc3NzUsMTMwNjk2NzM2NiwxMTM5NzgxNzA5LDEzNzQ5ODgxMTIsMTYxMDQ1OTczOSwxOTc1NjgzNDM0LDIwNzY5MzUyNjUsMTc3NTI3NjkyNCwxNzQyMzE1MTI3LDEwMzQ4Njc5OTgsODY2NjM3ODQ1LDU2NjAyMTg5Niw4MDA0NDA4MzUsOTI5ODc2OTgsMTkzMTk1MDY1LDQyOTQ1NjE2NCwzOTU0NDE3MTEsMTk4NDgxMjY4NSwyMDE3Nzc4NTY2LDE3ODQ2NjMxOTUsMTY4MzQwNzI0OCwxMzE1NTYyMTQ1LDEwODAwOTQ2MzQsMTM4Mzg1NjMxMSwxNTUxMDM3ODg0LDEwMTAzOTgyOSwxMzUwNTAyMDYsNDM3NzU3MTIzLDMzNzU1Mzg2NCwxMDQyMzg1NjU3LDgwNzk2MjYxMCw1NzM4MDQ3ODMsNzQyMDM5MDEyLDI1MzEwNjc0NTMsMjU2NDAzMzMzNCwyMzI4ODI4OTcxLDIyMjc1NzMwMjQsMjkzNTU2Njg2NSwyNzAwMDk5MzU0LDMwMDE3NTU2NTUsMzE2ODkzNzIyOCwzODY4NTUyODA1LDM5MDI1NjMxODIsNDIwMzE4MTE3MSw0MTAyOTc3OTEyLDM3MzYxNjQ5MzcsMzUwMTc0MTg5MCwzMjY1NDc4NzUxLDM0MzM3MTI5ODAsMTEwNjA0MTU5MSwxMzQwNDYzMTAwLDE1NzY5NzY2MDksMTQwODc0OTAzNCwyMDQzMjExNDgzLDIwMDkxOTU0NzIsMTcwODg0ODMzMywxODA5MDU0MTUwLDgzMjg3NzIzMSwxMDY4MzUxMzk2LDc2Njk0NTQ2NSw1OTk3NjIzNTQsMTU5NDE3OTg3LDEyNjQ1NDY2NCwzNjE5Mjk4NzcsNDYzMTgwMTkwLDI3MDkyNjA4NzEsMjk0MzY4MjM4MCwzMTc4MTA2OTYxLDMwMDk4NzkzODYsMjU3MjY5NzE5NSwyNTM4NjgxMTg0LDIyMzYyMjg3MzMsMjMzNjQzNDU1MCwzNTA5ODcxMTM1LDM3NDUzNDUzMDAsMzQ0MTg1MDM3NywzMjc0NjY3MjY2LDM5MTAxNjE5NzEsMzg3NzE5ODY0OCw0MTEwNTY4NDg1LDQyMTE4MTg3OTgsMjU5NzgwNjQ3NiwyNDk3NjA0NzQzLDIyNjEwODkxNzgsMjI5NTEwMTA3MywyNzMzODU2MTYwLDI5MDIwODc4NTEsMzIwMjQzNzA0NiwyOTY4MDExNDUzLDM5MzYyOTEyODQsMzgzNTAzNjg5NSw0MTM2NDQwNzcwLDQxNjk0MDgyMDEsMzUzNTQ4NjQ1NiwzNzAyNjY1NDU5LDM0NjcxOTIzMDIsMzIzMTcyMjIxMywyMDUxNTE4NzgwLDE5NTEzMTcwNDcsMTcxNjg5MDQxMCwxNzUwOTAyMzA1LDExMTM4MTgzODQsMTI4MjA1MDA3NSwxNTg0NTA0NTgyLDEzNTAwNzg5ODksMTY4ODEwODUyLDY3NTU2NDYzLDM3MTA0OTMzMCw0MDQwMTY3NjEsODQxNzM5NTkyLDEwMDg5MTg1OTUsNzc1NTUwODE0LDU0MDA4MDcyNSwzOTY5NTYyMzY5LDM4MDEzMzIyMzQsNDAzNTQ4OTA0Nyw0MjY5OTA3OTk2LDM1NjkyNTUyMTMsMzY2OTQ2MjU2NiwzMzY2NzU0NjE5LDMzMzI3NDAxNDQsMjYzMTA2NTQzMywyNDYzODc5NzYyLDIxNjAxMTcwNzEsMjM5NTU4ODY3NiwyNzY3NjQ1NTU3LDI4Njg4OTc0MDYsMzEwMjAxMTc0NywzMDY5MDQ5OTYwLDIwMjAwODQ5NywzMzc3ODM2MiwyNzAwNDA0ODcsNTA0NDU5NDM2LDg3NTQ1MTI5Myw5NzU2NTg2NDYsNjc1MDM5NjI3LDY0MTAyNTE1MiwyMDg0NzA0MjMzLDE5MTc1MTg1NjIsMTYxNTg2MTI0NywxODUxMzMyODUyLDExNDc1NTA2NjEsMTI0ODgwMjUxMCwxNDg0MDA1ODQzLDE0NTEwNDQwNTYsOTMzMzAxMzcwLDk2NzMxMTcyOSw3MzMxNTY5NzIsNjMyOTUzNzAzLDI2MDM4ODk1MCwyNTk2NTkxNywzMjg2NzE4MDgsNDk2OTA2MDU5LDEyMDY0Nzc4NTgsMTIzOTQ0Mzc1MywxNTQzMjA4NTAwLDE0NDE5NTI1NzUsMjE0NDE2MTgwNiwxOTA4Njk0Mjc3LDE2NzU1Nzc4ODAsMTg0Mjc1OTQ0MywzNjEwMzY5MjI2LDM2NDQzNzk1ODUsMzQwODExOTUxNiwzMzA3OTE2MjQ3LDQwMTExOTA1MDIsMzc3Njc2NzQ2OSw0MDc3Mzg0NDMyLDQyNDU2MTg2ODMsMjgwOTc3MTE1NCwyODQyNzM3MDQ5LDMxNDQzOTY0MjAsMzA0MzE0MDQ5NSwyNjczNzA1MTUwLDI0MzgyMzc2MjEsMjIwMzAzMjIzMiwyMzcwMjEzNzk1XSk7dGhpcy5fbWl4Q29sPW5ldyBVaW50OEFycmF5KDI1Nik7Zm9yKGxldCBlPTA7ZTwyNTY7ZSsrKXRoaXMuX21peENvbFtlXT1lPDEyOD9lPDwxOmU8PDFeMjc7dGhpcy5idWZmZXI9bmV3IFVpbnQ4QXJyYXkoMTYpO3RoaXMuYnVmZmVyUG9zaXRpb249MH1fZXhwYW5kS2V5KGUpeygwLHIudW5yZWFjaGFibGUpKCJDYW5ub3QgY2FsbCBgX2V4cGFuZEtleWAgb24gdGhlIGJhc2UgY2xhc3MiKX1fZGVjcnlwdChlLHQpe2xldCBhLHIsbjtjb25zdCBpPW5ldyBVaW50OEFycmF5KDE2KTtpLnNldChlKTtmb3IobGV0IGU9MCxhPXRoaXMuX2tleVNpemU7ZTwxNjsrK2UsKythKWlbZV1ePXRbYV07Zm9yKGxldCBlPXRoaXMuX2N5Y2xlc09mUmVwZXRpdGlvbi0xO2U+PTE7LS1lKXthPWlbMTNdO2lbMTNdPWlbOV07aVs5XT1pWzVdO2lbNV09aVsxXTtpWzFdPWE7YT1pWzE0XTtyPWlbMTBdO2lbMTRdPWlbNl07aVsxMF09aVsyXTtpWzZdPWE7aVsyXT1yO2E9aVsxNV07cj1pWzExXTtuPWlbN107aVsxNV09aVszXTtpWzExXT1hO2lbN109cjtpWzNdPW47Zm9yKGxldCBlPTA7ZTwxNjsrK2UpaVtlXT10aGlzLl9pbnZfc1tpW2VdXTtmb3IobGV0IGE9MCxyPTE2KmU7YTwxNjsrK2EsKytyKWlbYV1ePXRbcl07Zm9yKGxldCBlPTA7ZTwxNjtlKz00KXtjb25zdCB0PXRoaXMuX21peFtpW2VdXSxyPXRoaXMuX21peFtpW2UrMV1dLG49dGhpcy5fbWl4W2lbZSsyXV0scz10aGlzLl9taXhbaVtlKzNdXTthPXRecj4+Pjhecjw8MjRebj4+PjE2Xm48PDE2XnM+Pj4yNF5zPDw4O2lbZV09YT4+PjI0JjI1NTtpW2UrMV09YT4+MTYmMjU1O2lbZSsyXT1hPj44JjI1NTtpW2UrM109MjU1JmF9fWE9aVsxM107aVsxM109aVs5XTtpWzldPWlbNV07aVs1XT1pWzFdO2lbMV09YTthPWlbMTRdO3I9aVsxMF07aVsxNF09aVs2XTtpWzEwXT1pWzJdO2lbNl09YTtpWzJdPXI7YT1pWzE1XTtyPWlbMTFdO249aVs3XTtpWzE1XT1pWzNdO2lbMTFdPWE7aVs3XT1yO2lbM109bjtmb3IobGV0IGU9MDtlPDE2OysrZSl7aVtlXT10aGlzLl9pbnZfc1tpW2VdXTtpW2VdXj10W2VdfXJldHVybiBpfV9lbmNyeXB0KGUsdCl7Y29uc3QgYT10aGlzLl9zO2xldCByLG4saTtjb25zdCBzPW5ldyBVaW50OEFycmF5KDE2KTtzLnNldChlKTtmb3IobGV0IGU9MDtlPDE2OysrZSlzW2VdXj10W2VdO2ZvcihsZXQgZT0xO2U8dGhpcy5fY3ljbGVzT2ZSZXBldGl0aW9uO2UrKyl7Zm9yKGxldCBlPTA7ZTwxNjsrK2Upc1tlXT1hW3NbZV1dO2k9c1sxXTtzWzFdPXNbNV07c1s1XT1zWzldO3NbOV09c1sxM107c1sxM109aTtpPXNbMl07bj1zWzZdO3NbMl09c1sxMF07c1s2XT1zWzE0XTtzWzEwXT1pO3NbMTRdPW47aT1zWzNdO249c1s3XTtyPXNbMTFdO3NbM109c1sxNV07c1s3XT1pO3NbMTFdPW47c1sxNV09cjtmb3IobGV0IGU9MDtlPDE2O2UrPTQpe2NvbnN0IHQ9c1tlKzBdLGE9c1tlKzFdLG49c1tlKzJdLGk9c1tlKzNdO3I9dF5hXm5eaTtzW2UrMF1ePXJedGhpcy5fbWl4Q29sW3ReYV07c1tlKzFdXj1yXnRoaXMuX21peENvbFthXm5dO3NbZSsyXV49cl50aGlzLl9taXhDb2xbbl5pXTtzW2UrM11ePXJedGhpcy5fbWl4Q29sW2ledF19Zm9yKGxldCBhPTAscj0xNiplO2E8MTY7KythLCsrcilzW2FdXj10W3JdfWZvcihsZXQgZT0wO2U8MTY7KytlKXNbZV09YVtzW2VdXTtpPXNbMV07c1sxXT1zWzVdO3NbNV09c1s5XTtzWzldPXNbMTNdO3NbMTNdPWk7aT1zWzJdO249c1s2XTtzWzJdPXNbMTBdO3NbNl09c1sxNF07c1sxMF09aTtzWzE0XT1uO2k9c1szXTtuPXNbN107cj1zWzExXTtzWzNdPXNbMTVdO3NbN109aTtzWzExXT1uO3NbMTVdPXI7Zm9yKGxldCBlPTAsYT10aGlzLl9rZXlTaXplO2U8MTY7KytlLCsrYSlzW2VdXj10W2FdO3JldHVybiBzfV9kZWNyeXB0QmxvY2syKGUsdCl7Y29uc3QgYT1lLmxlbmd0aDtsZXQgcj10aGlzLmJ1ZmZlcixuPXRoaXMuYnVmZmVyUG9zaXRpb247Y29uc3QgaT1bXTtsZXQgcz10aGlzLml2O2ZvcihsZXQgdD0wO3Q8YTsrK3Qpe3Jbbl09ZVt0XTsrK247aWYobjwxNiljb250aW51ZTtjb25zdCBhPXRoaXMuX2RlY3J5cHQocix0aGlzLl9rZXkpO2ZvcihsZXQgZT0wO2U8MTY7KytlKWFbZV1ePXNbZV07cz1yO2kucHVzaChhKTtyPW5ldyBVaW50OEFycmF5KDE2KTtuPTB9dGhpcy5idWZmZXI9cjt0aGlzLmJ1ZmZlckxlbmd0aD1uO3RoaXMuaXY9cztpZigwPT09aS5sZW5ndGgpcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO2xldCBvPTE2KmkubGVuZ3RoO2lmKHQpe2NvbnN0IGU9aS5hdCgtMSk7bGV0IHQ9ZVsxNV07aWYodDw9MTYpe2ZvcihsZXQgYT0xNSxyPTE2LXQ7YT49cjstLWEpaWYoZVthXSE9PXQpe3Q9MDticmVha31vLT10O2lbaS5sZW5ndGgtMV09ZS5zdWJhcnJheSgwLDE2LXQpfX1jb25zdCBjPW5ldyBVaW50OEFycmF5KG8pO2ZvcihsZXQgZT0wLHQ9MCxhPWkubGVuZ3RoO2U8YTsrK2UsdCs9MTYpYy5zZXQoaVtlXSx0KTtyZXR1cm4gY31kZWNyeXB0QmxvY2soZSx0LGE9bnVsbCl7Y29uc3Qgcj1lLmxlbmd0aCxuPXRoaXMuYnVmZmVyO2xldCBpPXRoaXMuYnVmZmVyUG9zaXRpb247aWYoYSl0aGlzLml2PWE7ZWxzZXtmb3IobGV0IHQ9MDtpPDE2JiZ0PHI7Kyt0LCsraSluW2ldPWVbdF07aWYoaTwxNil7dGhpcy5idWZmZXJMZW5ndGg9aTtyZXR1cm4gbmV3IFVpbnQ4QXJyYXkoMCl9dGhpcy5pdj1uO2U9ZS5zdWJhcnJheSgxNil9dGhpcy5idWZmZXI9bmV3IFVpbnQ4QXJyYXkoMTYpO3RoaXMuYnVmZmVyTGVuZ3RoPTA7dGhpcy5kZWNyeXB0QmxvY2s9dGhpcy5fZGVjcnlwdEJsb2NrMjtyZXR1cm4gdGhpcy5kZWNyeXB0QmxvY2soZSx0KX1lbmNyeXB0KGUsdCl7Y29uc3QgYT1lLmxlbmd0aDtsZXQgcj10aGlzLmJ1ZmZlcixuPXRoaXMuYnVmZmVyUG9zaXRpb247Y29uc3QgaT1bXTt0fHwodD1uZXcgVWludDhBcnJheSgxNikpO2ZvcihsZXQgcz0wO3M8YTsrK3Mpe3Jbbl09ZVtzXTsrK247aWYobjwxNiljb250aW51ZTtmb3IobGV0IGU9MDtlPDE2OysrZSlyW2VdXj10W2VdO2NvbnN0IGE9dGhpcy5fZW5jcnlwdChyLHRoaXMuX2tleSk7dD1hO2kucHVzaChhKTtyPW5ldyBVaW50OEFycmF5KDE2KTtuPTB9dGhpcy5idWZmZXI9cjt0aGlzLmJ1ZmZlckxlbmd0aD1uO3RoaXMuaXY9dDtpZigwPT09aS5sZW5ndGgpcmV0dXJuIG5ldyBVaW50OEFycmF5KDApO2NvbnN0IHM9MTYqaS5sZW5ndGgsbz1uZXcgVWludDhBcnJheShzKTtmb3IobGV0IGU9MCx0PTAsYT1pLmxlbmd0aDtlPGE7KytlLHQrPTE2KW8uc2V0KGlbZV0sdCk7cmV0dXJuIG99fWNsYXNzIEFFUzEyOENpcGhlciBleHRlbmRzIEFFU0Jhc2VDaXBoZXJ7Y29uc3RydWN0b3IoZSl7c3VwZXIoKTt0aGlzLl9jeWNsZXNPZlJlcGV0aXRpb249MTA7dGhpcy5fa2V5U2l6ZT0xNjA7dGhpcy5fcmNvbj1uZXcgVWludDhBcnJheShbMTQxLDEsMiw0LDgsMTYsMzIsNjQsMTI4LDI3LDU0LDEwOCwyMTYsMTcxLDc3LDE1NCw0Nyw5NCwxODgsOTksMTk4LDE1MSw1MywxMDYsMjEyLDE3OSwxMjUsMjUwLDIzOSwxOTcsMTQ1LDU3LDExNCwyMjgsMjExLDE4OSw5NywxOTQsMTU5LDM3LDc0LDE0OCw1MSwxMDIsMjA0LDEzMSwyOSw1OCwxMTYsMjMyLDIwMywxNDEsMSwyLDQsOCwxNiwzMiw2NCwxMjgsMjcsNTQsMTA4LDIxNiwxNzEsNzcsMTU0LDQ3LDk0LDE4OCw5OSwxOTgsMTUxLDUzLDEwNiwyMTIsMTc5LDEyNSwyNTAsMjM5LDE5NywxNDUsNTcsMTE0LDIyOCwyMTEsMTg5LDk3LDE5NCwxNTksMzcsNzQsMTQ4LDUxLDEwMiwyMDQsMTMxLDI5LDU4LDExNiwyMzIsMjAzLDE0MSwxLDIsNCw4LDE2LDMyLDY0LDEyOCwyNyw1NCwxMDgsMjE2LDE3MSw3NywxNTQsNDcsOTQsMTg4LDk5LDE5OCwxNTEsNTMsMTA2LDIxMiwxNzksMTI1LDI1MCwyMzksMTk3LDE0NSw1NywxMTQsMjI4LDIxMSwxODksOTcsMTk0LDE1OSwzNyw3NCwxNDgsNTEsMTAyLDIwNCwxMzEsMjksNTgsMTE2LDIzMiwyMDMsMTQxLDEsMiw0LDgsMTYsMzIsNjQsMTI4LDI3LDU0LDEwOCwyMTYsMTcxLDc3LDE1NCw0Nyw5NCwxODgsOTksMTk4LDE1MSw1MywxMDYsMjEyLDE3OSwxMjUsMjUwLDIzOSwxOTcsMTQ1LDU3LDExNCwyMjgsMjExLDE4OSw5NywxOTQsMTU5LDM3LDc0LDE0OCw1MSwxMDIsMjA0LDEzMSwyOSw1OCwxMTYsMjMyLDIwMywxNDEsMSwyLDQsOCwxNiwzMiw2NCwxMjgsMjcsNTQsMTA4LDIxNiwxNzEsNzcsMTU0LDQ3LDk0LDE4OCw5OSwxOTgsMTUxLDUzLDEwNiwyMTIsMTc5LDEyNSwyNTAsMjM5LDE5NywxNDUsNTcsMTE0LDIyOCwyMTEsMTg5LDk3LDE5NCwxNTksMzcsNzQsMTQ4LDUxLDEwMiwyMDQsMTMxLDI5LDU4LDExNiwyMzIsMjAzLDE0MV0pO3RoaXMuX2tleT10aGlzLl9leHBhbmRLZXkoZSl9X2V4cGFuZEtleShlKXtjb25zdCB0PXRoaXMuX3MsYT10aGlzLl9yY29uLHI9bmV3IFVpbnQ4QXJyYXkoMTc2KTtyLnNldChlKTtmb3IobGV0IGU9MTYsbj0xO2U8MTc2Oysrbil7bGV0IGk9cltlLTNdLHM9cltlLTJdLG89cltlLTFdLGM9cltlLTRdO2k9dFtpXTtzPXRbc107bz10W29dO2M9dFtjXTtpXj1hW25dO2ZvcihsZXQgdD0wO3Q8NDsrK3Qpe3JbZV09aV49cltlLTE2XTtlKys7cltlXT1zXj1yW2UtMTZdO2UrKztyW2VdPW9ePXJbZS0xNl07ZSsrO3JbZV09Y149cltlLTE2XTtlKyt9fXJldHVybiByfX10LkFFUzEyOENpcGhlcj1BRVMxMjhDaXBoZXI7Y2xhc3MgQUVTMjU2Q2lwaGVyIGV4dGVuZHMgQUVTQmFzZUNpcGhlcntjb25zdHJ1Y3RvcihlKXtzdXBlcigpO3RoaXMuX2N5Y2xlc09mUmVwZXRpdGlvbj0xNDt0aGlzLl9rZXlTaXplPTIyNDt0aGlzLl9rZXk9dGhpcy5fZXhwYW5kS2V5KGUpfV9leHBhbmRLZXkoZSl7Y29uc3QgdD10aGlzLl9zLGE9bmV3IFVpbnQ4QXJyYXkoMjQwKTthLnNldChlKTtsZXQgcixuLGkscyxvPTE7Zm9yKGxldCBlPTMyLGM9MTtlPDI0MDsrK2Mpe2lmKGUlMzI9PTE2KXtyPXRbcl07bj10W25dO2k9dFtpXTtzPXRbc119ZWxzZSBpZihlJTMyPT0wKXtyPWFbZS0zXTtuPWFbZS0yXTtpPWFbZS0xXTtzPWFbZS00XTtyPXRbcl07bj10W25dO2k9dFtpXTtzPXRbc107cl49bzsobzw8PTEpPj0yNTYmJihvPTI1NSYoMjdebykpfWZvcihsZXQgdD0wO3Q8NDsrK3Qpe2FbZV09cl49YVtlLTMyXTtlKys7YVtlXT1uXj1hW2UtMzJdO2UrKzthW2VdPWlePWFbZS0zMl07ZSsrO2FbZV09c149YVtlLTMyXTtlKyt9fXJldHVybiBhfX10LkFFUzI1NkNpcGhlcj1BRVMyNTZDaXBoZXI7Y2xhc3MgUERGMTd7Y2hlY2tPd25lclBhc3N3b3JkKGUsdCxhLG4pe2NvbnN0IGk9bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgrNTYpO2kuc2V0KGUsMCk7aS5zZXQodCxlLmxlbmd0aCk7aS5zZXQoYSxlLmxlbmd0aCt0Lmxlbmd0aCk7Y29uc3Qgcz1vKGksMCxpLmxlbmd0aCk7cmV0dXJuKDAsci5pc0FycmF5RXF1YWwpKHMsbil9Y2hlY2tVc2VyUGFzc3dvcmQoZSx0LGEpe2NvbnN0IG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgrOCk7bi5zZXQoZSwwKTtuLnNldCh0LGUubGVuZ3RoKTtjb25zdCBpPW8obiwwLG4ubGVuZ3RoKTtyZXR1cm4oMCxyLmlzQXJyYXlFcXVhbCkoaSxhKX1nZXRPd25lcktleShlLHQsYSxyKXtjb25zdCBuPW5ldyBVaW50OEFycmF5KGUubGVuZ3RoKzU2KTtuLnNldChlLDApO24uc2V0KHQsZS5sZW5ndGgpO24uc2V0KGEsZS5sZW5ndGgrdC5sZW5ndGgpO2NvbnN0IGk9byhuLDAsbi5sZW5ndGgpO3JldHVybiBuZXcgQUVTMjU2Q2lwaGVyKGkpLmRlY3J5cHRCbG9jayhyLCExLG5ldyBVaW50OEFycmF5KDE2KSl9Z2V0VXNlcktleShlLHQsYSl7Y29uc3Qgcj1uZXcgVWludDhBcnJheShlLmxlbmd0aCs4KTtyLnNldChlLDApO3Iuc2V0KHQsZS5sZW5ndGgpO2NvbnN0IG49byhyLDAsci5sZW5ndGgpO3JldHVybiBuZXcgQUVTMjU2Q2lwaGVyKG4pLmRlY3J5cHRCbG9jayhhLCExLG5ldyBVaW50OEFycmF5KDE2KSl9fXQuUERGMTc9UERGMTc7Y2xhc3MgUERGMjB7X2hhc2goZSx0LGEpe2xldCByPW8odCwwLHQubGVuZ3RoKS5zdWJhcnJheSgwLDMyKSxuPVswXSxpPTA7Zm9yKDtpPDY0fHxuLmF0KC0xKT5pLTMyOyl7Y29uc3QgdD1lLmxlbmd0aCtyLmxlbmd0aCthLmxlbmd0aCxzPW5ldyBVaW50OEFycmF5KHQpO2xldCBsPTA7cy5zZXQoZSxsKTtsKz1lLmxlbmd0aDtzLnNldChyLGwpO2wrPXIubGVuZ3RoO3Muc2V0KGEsbCk7Y29uc3QgaD1uZXcgVWludDhBcnJheSg2NCp0KTtmb3IobGV0IGU9MCxhPTA7ZTw2NDtlKyssYSs9dCloLnNldChzLGEpO249bmV3IEFFUzEyOENpcGhlcihyLnN1YmFycmF5KDAsMTYpKS5lbmNyeXB0KGgsci5zdWJhcnJheSgxNiwzMikpO2NvbnN0IHU9bi5zbGljZSgwLDE2KS5yZWR1Y2UoKChlLHQpPT5lK3QpLDApJTM7MD09PXU/cj1vKG4sMCxuLmxlbmd0aCk6MT09PXU/cj1jYWxjdWxhdGVTSEEzODQobiwwLG4ubGVuZ3RoKToyPT09dSYmKHI9YyhuLDAsbi5sZW5ndGgpKTtpKyt9cmV0dXJuIHIuc3ViYXJyYXkoMCwzMil9Y2hlY2tPd25lclBhc3N3b3JkKGUsdCxhLG4pe2NvbnN0IGk9bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgrNTYpO2kuc2V0KGUsMCk7aS5zZXQodCxlLmxlbmd0aCk7aS5zZXQoYSxlLmxlbmd0aCt0Lmxlbmd0aCk7Y29uc3Qgcz10aGlzLl9oYXNoKGUsaSxhKTtyZXR1cm4oMCxyLmlzQXJyYXlFcXVhbCkocyxuKX1jaGVja1VzZXJQYXNzd29yZChlLHQsYSl7Y29uc3Qgbj1uZXcgVWludDhBcnJheShlLmxlbmd0aCs4KTtuLnNldChlLDApO24uc2V0KHQsZS5sZW5ndGgpO2NvbnN0IGk9dGhpcy5faGFzaChlLG4sW10pO3JldHVybigwLHIuaXNBcnJheUVxdWFsKShpLGEpfWdldE93bmVyS2V5KGUsdCxhLHIpe2NvbnN0IG49bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgrNTYpO24uc2V0KGUsMCk7bi5zZXQodCxlLmxlbmd0aCk7bi5zZXQoYSxlLmxlbmd0aCt0Lmxlbmd0aCk7Y29uc3QgaT10aGlzLl9oYXNoKGUsbixhKTtyZXR1cm4gbmV3IEFFUzI1NkNpcGhlcihpKS5kZWNyeXB0QmxvY2sociwhMSxuZXcgVWludDhBcnJheSgxNikpfWdldFVzZXJLZXkoZSx0LGEpe2NvbnN0IHI9bmV3IFVpbnQ4QXJyYXkoZS5sZW5ndGgrOCk7ci5zZXQoZSwwKTtyLnNldCh0LGUubGVuZ3RoKTtjb25zdCBuPXRoaXMuX2hhc2goZSxyLFtdKTtyZXR1cm4gbmV3IEFFUzI1NkNpcGhlcihuKS5kZWNyeXB0QmxvY2soYSwhMSxuZXcgVWludDhBcnJheSgxNikpfX10LlBERjIwPVBERjIwO2NsYXNzIENpcGhlclRyYW5zZm9ybXtjb25zdHJ1Y3RvcihlLHQpe3RoaXMuU3RyaW5nQ2lwaGVyQ29uc3RydWN0b3I9ZTt0aGlzLlN0cmVhbUNpcGhlckNvbnN0cnVjdG9yPXR9Y3JlYXRlU3RyZWFtKGUsdCl7Y29uc3QgYT1uZXcgdGhpcy5TdHJlYW1DaXBoZXJDb25zdHJ1Y3RvcjtyZXR1cm4gbmV3IGkuRGVjcnlwdFN0cmVhbShlLHQsKGZ1bmN0aW9uIGNpcGhlclRyYW5zZm9ybURlY3J5cHRTdHJlYW0oZSx0KXtyZXR1cm4gYS5kZWNyeXB0QmxvY2soZSx0KX0pKX1kZWNyeXB0U3RyaW5nKGUpe2NvbnN0IHQ9bmV3IHRoaXMuU3RyaW5nQ2lwaGVyQ29uc3RydWN0b3I7bGV0IGE9KDAsci5zdHJpbmdUb0J5dGVzKShlKTthPXQuZGVjcnlwdEJsb2NrKGEsITApO3JldHVybigwLHIuYnl0ZXNUb1N0cmluZykoYSl9ZW5jcnlwdFN0cmluZyhlKXtjb25zdCB0PW5ldyB0aGlzLlN0cmluZ0NpcGhlckNvbnN0cnVjdG9yO2lmKHQgaW5zdGFuY2VvZiBBRVNCYXNlQ2lwaGVyKXtjb25zdCBhPTE2LWUubGVuZ3RoJTE2O2UrPVN0cmluZy5mcm9tQ2hhckNvZGUoYSkucmVwZWF0KGEpO2NvbnN0IG49bmV3IFVpbnQ4QXJyYXkoMTYpO2lmKCJ1bmRlZmluZWQiIT10eXBlb2YgY3J5cHRvKWNyeXB0by5nZXRSYW5kb21WYWx1ZXMobik7ZWxzZSBmb3IobGV0IGU9MDtlPDE2O2UrKyluW2VdPU1hdGguZmxvb3IoMjU2Kk1hdGgucmFuZG9tKCkpO2xldCBpPSgwLHIuc3RyaW5nVG9CeXRlcykoZSk7aT10LmVuY3J5cHQoaSxuKTtjb25zdCBzPW5ldyBVaW50OEFycmF5KDE2K2kubGVuZ3RoKTtzLnNldChuKTtzLnNldChpLDE2KTtyZXR1cm4oMCxyLmJ5dGVzVG9TdHJpbmcpKHMpfWxldCBhPSgwLHIuc3RyaW5nVG9CeXRlcykoZSk7YT10LmVuY3J5cHQoYSk7cmV0dXJuKDAsci5ieXRlc1RvU3RyaW5nKShhKX19Y2xhc3MgQ2lwaGVyVHJhbnNmb3JtRmFjdG9yeXtzdGF0aWMjTz1uZXcgVWludDhBcnJheShbNDAsMTkxLDc4LDk0LDc4LDExNywxMzgsNjUsMTAwLDAsNzgsODYsMjU1LDI1MCwxLDgsNDYsNDYsMCwxODIsMjA4LDEwNCw2MiwxMjgsNDcsMTIsMTY5LDI1NCwxMDAsODMsMTA1LDEyMl0pOyNJKGUsdCxhLHIsbixpLHMsbyxjLGwsaCx1KXtpZih0KXtjb25zdCBlPU1hdGgubWluKDEyNyx0Lmxlbmd0aCk7dD10LnN1YmFycmF5KDAsZSl9ZWxzZSB0PVtdO2NvbnN0IGQ9Nj09PWU/bmV3IFBERjIwOm5ldyBQREYxNztyZXR1cm4gZC5jaGVja1VzZXJQYXNzd29yZCh0LG8scyk/ZC5nZXRVc2VyS2V5KHQsYyxoKTp0Lmxlbmd0aCYmZC5jaGVja093bmVyUGFzc3dvcmQodCxyLGksYSk/ZC5nZXRPd25lcktleSh0LG4saSxsKTpudWxsfSNUKGUsdCxhLHIsbixpLG8sYyl7Y29uc3QgbD00MCthLmxlbmd0aCtlLmxlbmd0aCxoPW5ldyBVaW50OEFycmF5KGwpO2xldCB1LGQsZj0wO2lmKHQpe2Q9TWF0aC5taW4oMzIsdC5sZW5ndGgpO2Zvcig7ZjxkOysrZiloW2ZdPXRbZl19dT0wO2Zvcig7ZjwzMjspaFtmKytdPUNpcGhlclRyYW5zZm9ybUZhY3RvcnkuI09bdSsrXTtmb3IodT0wLGQ9YS5sZW5ndGg7dTxkOysrdSloW2YrK109YVt1XTtoW2YrK109MjU1Jm47aFtmKytdPW4+PjgmMjU1O2hbZisrXT1uPj4xNiYyNTU7aFtmKytdPW4+Pj4yNCYyNTU7Zm9yKHU9MCxkPWUubGVuZ3RoO3U8ZDsrK3UpaFtmKytdPWVbdV07aWYoaT49NCYmIWMpe2hbZisrXT0yNTU7aFtmKytdPTI1NTtoW2YrK109MjU1O2hbZisrXT0yNTV9bGV0IGc9cyhoLDAsZik7Y29uc3QgcD1vPj4zO2lmKGk+PTMpZm9yKHU9MDt1PDUwOysrdSlnPXMoZywwLHApO2NvbnN0IG09Zy5zdWJhcnJheSgwLHApO2xldCBiLHk7aWYoaT49Myl7Zm9yKGY9MDtmPDMyOysrZiloW2ZdPUNpcGhlclRyYW5zZm9ybUZhY3RvcnkuI09bZl07Zm9yKHU9MCxkPWUubGVuZ3RoO3U8ZDsrK3UpaFtmKytdPWVbdV07Yj1uZXcgQVJDRm91ckNpcGhlcihtKTt5PWIuZW5jcnlwdEJsb2NrKHMoaCwwLGYpKTtkPW0ubGVuZ3RoO2NvbnN0IHQ9bmV3IFVpbnQ4QXJyYXkoZCk7Zm9yKHU9MTt1PD0xOTsrK3Upe2ZvcihsZXQgZT0wO2U8ZDsrK2UpdFtlXT1tW2VdXnU7Yj1uZXcgQVJDRm91ckNpcGhlcih0KTt5PWIuZW5jcnlwdEJsb2NrKHkpfWZvcih1PTAsZD15Lmxlbmd0aDt1PGQ7Kyt1KWlmKHJbdV0hPT15W3VdKXJldHVybiBudWxsfWVsc2V7Yj1uZXcgQVJDRm91ckNpcGhlcihtKTt5PWIuZW5jcnlwdEJsb2NrKENpcGhlclRyYW5zZm9ybUZhY3RvcnkuI08pO2Zvcih1PTAsZD15Lmxlbmd0aDt1PGQ7Kyt1KWlmKHJbdV0hPT15W3VdKXJldHVybiBudWxsfXJldHVybiBtfSNNKGUsdCxhLHIpe2NvbnN0IG49bmV3IFVpbnQ4QXJyYXkoMzIpO2xldCBpPTA7Y29uc3Qgbz1NYXRoLm1pbigzMixlLmxlbmd0aCk7Zm9yKDtpPG87KytpKW5baV09ZVtpXTtsZXQgYz0wO2Zvcig7aTwzMjspbltpKytdPUNpcGhlclRyYW5zZm9ybUZhY3RvcnkuI09bYysrXTtsZXQgbD1zKG4sMCxpKTtjb25zdCBoPXI+PjM7aWYoYT49Mylmb3IoYz0wO2M8NTA7KytjKWw9cyhsLDAsbC5sZW5ndGgpO2xldCB1LGQ7aWYoYT49Myl7ZD10O2NvbnN0IGU9bmV3IFVpbnQ4QXJyYXkoaCk7Zm9yKGM9MTk7Yz49MDtjLS0pe2ZvcihsZXQgdD0wO3Q8aDsrK3QpZVt0XT1sW3RdXmM7dT1uZXcgQVJDRm91ckNpcGhlcihlKTtkPXUuZW5jcnlwdEJsb2NrKGQpfX1lbHNle3U9bmV3IEFSQ0ZvdXJDaXBoZXIobC5zdWJhcnJheSgwLGgpKTtkPXUuZW5jcnlwdEJsb2NrKHQpfXJldHVybiBkfSNQKGUsdCxhLHI9ITEpe2NvbnN0IG49bmV3IFVpbnQ4QXJyYXkoYS5sZW5ndGgrOSksaT1hLmxlbmd0aDtsZXQgbztmb3Iobz0wO288aTsrK28pbltvXT1hW29dO25bbysrXT0yNTUmZTtuW28rK109ZT4+OCYyNTU7bltvKytdPWU+PjE2JjI1NTtuW28rK109MjU1JnQ7bltvKytdPXQ+PjgmMjU1O2lmKHIpe25bbysrXT0xMTU7bltvKytdPTY1O25bbysrXT0xMDg7bltvKytdPTg0fXJldHVybiBzKG4sMCxvKS5zdWJhcnJheSgwLE1hdGgubWluKGEubGVuZ3RoKzUsMTYpKX0jRChlLHQsYSxpLHMpe2lmKCEodCBpbnN0YW5jZW9mIG4uTmFtZSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgY3J5cHQgZmlsdGVyIG5hbWUuIik7Y29uc3Qgbz10aGlzLGM9ZS5nZXQodC5uYW1lKSxsPWM/LmdldCgiQ0ZNIik7aWYoIWx8fCJOb25lIj09PWwubmFtZSlyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IE51bGxDaXBoZXJ9O2lmKCJWMiI9PT1sLm5hbWUpcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBUkNGb3VyQ2lwaGVyKG8uI1AoYSxpLHMsITEpKX07aWYoIkFFU1YyIj09PWwubmFtZSlyZXR1cm4gZnVuY3Rpb24oKXtyZXR1cm4gbmV3IEFFUzEyOENpcGhlcihvLiNQKGEsaSxzLCEwKSl9O2lmKCJBRVNWMyI9PT1sLm5hbWUpcmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBRVMyNTZDaXBoZXIocyl9O3Rocm93IG5ldyByLkZvcm1hdEVycm9yKCJVbmtub3duIGNyeXB0byBtZXRob2QiKX1jb25zdHJ1Y3RvcihlLHQsYSl7Y29uc3QgaT1lLmdldCgiRmlsdGVyIik7aWYoISgwLG4uaXNOYW1lKShpLCJTdGFuZGFyZCIpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJ1bmtub3duIGVuY3J5cHRpb24gbWV0aG9kIik7dGhpcy5maWx0ZXJOYW1lPWkubmFtZTt0aGlzLmRpY3Q9ZTtjb25zdCBzPWUuZ2V0KCJWIik7aWYoIU51bWJlci5pc0ludGVnZXIocyl8fDEhPT1zJiYyIT09cyYmNCE9PXMmJjUhPT1zKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJ1bnN1cHBvcnRlZCBlbmNyeXB0aW9uIGFsZ29yaXRobSIpO3RoaXMuYWxnb3JpdGhtPXM7bGV0IG89ZS5nZXQoIkxlbmd0aCIpO2lmKCFvKWlmKHM8PTMpbz00MDtlbHNle2NvbnN0IHQ9ZS5nZXQoIkNGIiksYT1lLmdldCgiU3RtRiIpO2lmKHQgaW5zdGFuY2VvZiBuLkRpY3QmJmEgaW5zdGFuY2VvZiBuLk5hbWUpe3Quc3VwcHJlc3NFbmNyeXB0aW9uPSEwO2NvbnN0IGU9dC5nZXQoYS5uYW1lKTtvPWU/LmdldCgiTGVuZ3RoIil8fDEyODtvPDQwJiYobzw8PTMpfX1pZighTnVtYmVyLmlzSW50ZWdlcihvKXx8bzw0MHx8byU4IT0wKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJpbnZhbGlkIGtleSBsZW5ndGgiKTtjb25zdCBjPSgwLHIuc3RyaW5nVG9CeXRlcykoZS5nZXQoIk8iKSksbD0oMCxyLnN0cmluZ1RvQnl0ZXMpKGUuZ2V0KCJVIikpLGg9Yy5zdWJhcnJheSgwLDMyKSx1PWwuc3ViYXJyYXkoMCwzMiksZD1lLmdldCgiUCIpLGY9ZS5nZXQoIlIiKSxnPSg0PT09c3x8NT09PXMpJiYhMSE9PWUuZ2V0KCJFbmNyeXB0TWV0YWRhdGEiKTt0aGlzLmVuY3J5cHRNZXRhZGF0YT1nO2NvbnN0IHA9KDAsci5zdHJpbmdUb0J5dGVzKSh0KTtsZXQgbSxiO2lmKGEpe2lmKDY9PT1mKXRyeXthPSgwLHIudXRmOFN0cmluZ1RvU3RyaW5nKShhKX1jYXRjaHsoMCxyLndhcm4pKCJDaXBoZXJUcmFuc2Zvcm1GYWN0b3J5OiBVbmFibGUgdG8gY29udmVydCBVVEY4IGVuY29kZWQgcGFzc3dvcmQuIil9bT0oMCxyLnN0cmluZ1RvQnl0ZXMpKGEpfWlmKDUhPT1zKWI9dGhpcy4jVChwLG0saCx1LGQsZixvLGcpO2Vsc2V7Y29uc3QgdD1jLnN1YmFycmF5KDMyLDQwKSxhPWMuc3ViYXJyYXkoNDAsNDgpLG49bC5zdWJhcnJheSgwLDQ4KSxpPWwuc3ViYXJyYXkoMzIsNDApLHM9bC5zdWJhcnJheSg0MCw0OCksbz0oMCxyLnN0cmluZ1RvQnl0ZXMpKGUuZ2V0KCJPRSIpKSxkPSgwLHIuc3RyaW5nVG9CeXRlcykoZS5nZXQoIlVFIikpLGc9KDAsci5zdHJpbmdUb0J5dGVzKShlLmdldCgiUGVybXMiKSk7Yj10aGlzLiNJKGYsbSxoLHQsYSxuLHUsaSxzLG8sZCxnKX1pZighYiYmIWEpdGhyb3cgbmV3IHIuUGFzc3dvcmRFeGNlcHRpb24oIk5vIHBhc3N3b3JkIGdpdmVuIixyLlBhc3N3b3JkUmVzcG9uc2VzLk5FRURfUEFTU1dPUkQpO2lmKCFiJiZhKXtjb25zdCBlPXRoaXMuI00obSxoLGYsbyk7Yj10aGlzLiNUKHAsZSxoLHUsZCxmLG8sZyl9aWYoIWIpdGhyb3cgbmV3IHIuUGFzc3dvcmRFeGNlcHRpb24oIkluY29ycmVjdCBQYXNzd29yZCIsci5QYXNzd29yZFJlc3BvbnNlcy5JTkNPUlJFQ1RfUEFTU1dPUkQpO3RoaXMuZW5jcnlwdGlvbktleT1iO2lmKHM+PTQpe2NvbnN0IHQ9ZS5nZXQoIkNGIik7dCBpbnN0YW5jZW9mIG4uRGljdCYmKHQuc3VwcHJlc3NFbmNyeXB0aW9uPSEwKTt0aGlzLmNmPXQ7dGhpcy5zdG1mPWUuZ2V0KCJTdG1GIil8fG4uTmFtZS5nZXQoIklkZW50aXR5Iik7dGhpcy5zdHJmPWUuZ2V0KCJTdHJGIil8fG4uTmFtZS5nZXQoIklkZW50aXR5Iik7dGhpcy5lZmY9ZS5nZXQoIkVGRiIpfHx0aGlzLnN0bWZ9fWNyZWF0ZUNpcGhlclRyYW5zZm9ybShlLHQpe2lmKDQ9PT10aGlzLmFsZ29yaXRobXx8NT09PXRoaXMuYWxnb3JpdGhtKXJldHVybiBuZXcgQ2lwaGVyVHJhbnNmb3JtKHRoaXMuI0QodGhpcy5jZix0aGlzLnN0cmYsZSx0LHRoaXMuZW5jcnlwdGlvbktleSksdGhpcy4jRCh0aGlzLmNmLHRoaXMuc3RtZixlLHQsdGhpcy5lbmNyeXB0aW9uS2V5KSk7Y29uc3QgYT10aGlzLiNQKGUsdCx0aGlzLmVuY3J5cHRpb25LZXksITEpLGNpcGhlckNvbnN0cnVjdG9yPWZ1bmN0aW9uKCl7cmV0dXJuIG5ldyBBUkNGb3VyQ2lwaGVyKGEpfTtyZXR1cm4gbmV3IENpcGhlclRyYW5zZm9ybShjaXBoZXJDb25zdHJ1Y3RvcixjaXBoZXJDb25zdHJ1Y3Rvcil9fXQuQ2lwaGVyVHJhbnNmb3JtRmFjdG9yeT1DaXBoZXJUcmFuc2Zvcm1GYWN0b3J5fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuRGVjcnlwdFN0cmVhbT12b2lkIDA7dmFyIHI9YSgxOCk7Y2xhc3MgRGVjcnlwdFN0cmVhbSBleHRlbmRzIHIuRGVjb2RlU3RyZWFte2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcih0KTt0aGlzLnN0cj1lO3RoaXMuZGljdD1lLmRpY3Q7dGhpcy5kZWNyeXB0PWE7dGhpcy5uZXh0Q2h1bms9bnVsbDt0aGlzLmluaXRpYWxpemVkPSExfXJlYWRCbG9jaygpe2xldCBlO2lmKHRoaXMuaW5pdGlhbGl6ZWQpZT10aGlzLm5leHRDaHVuaztlbHNle2U9dGhpcy5zdHIuZ2V0Qnl0ZXMoNTEyKTt0aGlzLmluaXRpYWxpemVkPSEwfWlmKCFlfHwwPT09ZS5sZW5ndGgpe3RoaXMuZW9mPSEwO3JldHVybn10aGlzLm5leHRDaHVuaz10aGlzLnN0ci5nZXRCeXRlcyg1MTIpO2NvbnN0IHQ9dGhpcy5uZXh0Q2h1bms/Lmxlbmd0aD4wO2U9KDAsdGhpcy5kZWNyeXB0KShlLCF0KTtjb25zdCBhPXRoaXMuYnVmZmVyTGVuZ3RoLHI9YStlLmxlbmd0aDt0aGlzLmVuc3VyZUJ1ZmZlcihyKS5zZXQoZSxhKTt0aGlzLmJ1ZmZlckxlbmd0aD1yfX10LkRlY3J5cHRTdHJlYW09RGVjcnlwdFN0cmVhbX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0Lk9iamVjdExvYWRlcj12b2lkIDA7dmFyIHI9YSg0KSxuPWEoNSksaT1hKDMpLHM9YSgyKTtmdW5jdGlvbiBhZGRDaGlsZHJlbihlLHQpe2lmKGUgaW5zdGFuY2VvZiByLkRpY3QpZT1lLmdldFJhd1ZhbHVlcygpO2Vsc2UgaWYoZSBpbnN0YW5jZW9mIG4uQmFzZVN0cmVhbSllPWUuZGljdC5nZXRSYXdWYWx1ZXMoKTtlbHNlIGlmKCFBcnJheS5pc0FycmF5KGUpKXJldHVybjtmb3IoY29uc3QgaSBvZiBlKSgoYT1pKWluc3RhbmNlb2Ygci5SZWZ8fGEgaW5zdGFuY2VvZiByLkRpY3R8fGEgaW5zdGFuY2VvZiBuLkJhc2VTdHJlYW18fEFycmF5LmlzQXJyYXkoYSkpJiZ0LnB1c2goaSk7dmFyIGF9dC5PYmplY3RMb2FkZXI9Y2xhc3MgT2JqZWN0TG9hZGVye2NvbnN0cnVjdG9yKGUsdCxhKXt0aGlzLmRpY3Q9ZTt0aGlzLmtleXM9dDt0aGlzLnhyZWY9YTt0aGlzLnJlZlNldD1udWxsfWFzeW5jIGxvYWQoKXtpZih0aGlzLnhyZWYuc3RyZWFtLmlzRGF0YUxvYWRlZClyZXR1cm47Y29uc3R7a2V5czplLGRpY3Q6dH09dGhpczt0aGlzLnJlZlNldD1uZXcgci5SZWZTZXQ7Y29uc3QgYT1bXTtmb3IoY29uc3QgciBvZiBlKXtjb25zdCBlPXQuZ2V0UmF3KHIpO3ZvaWQgMCE9PWUmJmEucHVzaChlKX1yZXR1cm4gdGhpcy5fd2FsayhhKX1hc3luYyBfd2FsayhlKXtjb25zdCB0PVtdLGE9W107Zm9yKDtlLmxlbmd0aDspe2xldCBvPWUucG9wKCk7aWYobyBpbnN0YW5jZW9mIHIuUmVmKXtpZih0aGlzLnJlZlNldC5oYXMobykpY29udGludWU7dHJ5e3RoaXMucmVmU2V0LnB1dChvKTtvPXRoaXMueHJlZi5mZXRjaChvKX1jYXRjaChlKXtpZighKGUgaW5zdGFuY2VvZiBpLk1pc3NpbmdEYXRhRXhjZXB0aW9uKSl7KDAscy53YXJuKShgT2JqZWN0TG9hZGVyLl93YWxrIC0gcmVxdWVzdGluZyBhbGwgZGF0YTogIiR7ZX0iLmApO3RoaXMucmVmU2V0PW51bGw7Y29uc3R7bWFuYWdlcjp0fT10aGlzLnhyZWYuc3RyZWFtO3JldHVybiB0LnJlcXVlc3RBbGxDaHVua3MoKX10LnB1c2gobyk7YS5wdXNoKHtiZWdpbjplLmJlZ2luLGVuZDplLmVuZH0pfX1pZihvIGluc3RhbmNlb2Ygbi5CYXNlU3RyZWFtKXtjb25zdCBlPW8uZ2V0QmFzZVN0cmVhbXMoKTtpZihlKXtsZXQgcj0hMTtmb3IoY29uc3QgdCBvZiBlKWlmKCF0LmlzRGF0YUxvYWRlZCl7cj0hMDthLnB1c2goe2JlZ2luOnQuc3RhcnQsZW5kOnQuZW5kfSl9ciYmdC5wdXNoKG8pfX1hZGRDaGlsZHJlbihvLGUpfWlmKGEubGVuZ3RoKXthd2FpdCB0aGlzLnhyZWYuc3RyZWFtLm1hbmFnZXIucmVxdWVzdFJhbmdlcyhhKTtmb3IoY29uc3QgZSBvZiB0KWUgaW5zdGFuY2VvZiByLlJlZiYmdGhpcy5yZWZTZXQucmVtb3ZlKGUpO3JldHVybiB0aGlzLl93YWxrKHQpfXRoaXMucmVmU2V0PW51bGx9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlhGQUZhY3Rvcnk9dm9pZCAwO3ZhciByPWEoNzgpLG49YSg3OSksaT1hKDg5KSxzPWEoODUpLG89YSg4NCksYz1hKDIpLGw9YSg5MCksaD1hKDEwMCk7Y2xhc3MgWEZBRmFjdG9yeXtjb25zdHJ1Y3RvcihlKXt0cnl7dGhpcy5yb290PShuZXcgbC5YRkFQYXJzZXIpLnBhcnNlKFhGQUZhY3RvcnkuX2NyZWF0ZURvY3VtZW50KGUpKTtjb25zdCB0PW5ldyBuLkJpbmRlcih0aGlzLnJvb3QpO3RoaXMuZm9ybT10LmJpbmQoKTt0aGlzLmRhdGFIYW5kbGVyPW5ldyBpLkRhdGFIYW5kbGVyKHRoaXMucm9vdCx0LmdldERhdGEoKSk7dGhpcy5mb3JtW3IuJGdsb2JhbERhdGFdLnRlbXBsYXRlPXRoaXMuZm9ybX1jYXRjaChlKXsoMCxjLndhcm4pKGBYRkEgLSBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgcGFyc2luZyBhbmQgYmluZGluZzogJHtlfWApfX1pc1ZhbGlkKCl7cmV0dXJuIHRoaXMucm9vdCYmdGhpcy5mb3JtfV9jcmVhdGVQYWdlc0hlbHBlcigpe2NvbnN0IGU9dGhpcy5mb3JtW3IuJHRvUGFnZXNdKCk7cmV0dXJuIG5ldyBQcm9taXNlKCgodCxhKT0+e2NvbnN0IG5leHRJdGVyYXRpb249KCk9Pnt0cnl7Y29uc3QgYT1lLm5leHQoKTthLmRvbmU/dChhLnZhbHVlKTpzZXRUaW1lb3V0KG5leHRJdGVyYXRpb24sMCl9Y2F0Y2goZSl7YShlKX19O3NldFRpbWVvdXQobmV4dEl0ZXJhdGlvbiwwKX0pKX1hc3luYyBfY3JlYXRlUGFnZXMoKXt0cnl7dGhpcy5wYWdlcz1hd2FpdCB0aGlzLl9jcmVhdGVQYWdlc0hlbHBlcigpO3RoaXMuZGltcz10aGlzLnBhZ2VzLmNoaWxkcmVuLm1hcCgoZT0+e2NvbnN0e3dpZHRoOnQsaGVpZ2h0OmF9PWUuYXR0cmlidXRlcy5zdHlsZTtyZXR1cm5bMCwwLHBhcnNlSW50KHQpLHBhcnNlSW50KGEpXX0pKX1jYXRjaChlKXsoMCxjLndhcm4pKGBYRkEgLSBhbiBlcnJvciBvY2N1cnJlZCBkdXJpbmcgbGF5b3V0OiAke2V9YCl9fWdldEJvdW5kaW5nQm94KGUpe3JldHVybiB0aGlzLmRpbXNbZV19YXN5bmMgZ2V0TnVtUGFnZXMoKXt0aGlzLnBhZ2VzfHxhd2FpdCB0aGlzLl9jcmVhdGVQYWdlcygpO3JldHVybiB0aGlzLmRpbXMubGVuZ3RofXNldEltYWdlcyhlKXt0aGlzLmZvcm1bci4kZ2xvYmFsRGF0YV0uaW1hZ2VzPWV9c2V0Rm9udHMoZSl7dGhpcy5mb3JtW3IuJGdsb2JhbERhdGFdLmZvbnRGaW5kZXI9bmV3IHMuRm9udEZpbmRlcihlKTtjb25zdCB0PVtdO2ZvcihsZXQgZSBvZiB0aGlzLmZvcm1bci4kZ2xvYmFsRGF0YV0udXNlZFR5cGVmYWNlcyl7ZT0oMCxvLnN0cmlwUXVvdGVzKShlKTt0aGlzLmZvcm1bci4kZ2xvYmFsRGF0YV0uZm9udEZpbmRlci5maW5kKGUpfHx0LnB1c2goZSl9cmV0dXJuIHQubGVuZ3RoPjA/dDpudWxsfWFwcGVuZEZvbnRzKGUsdCl7dGhpcy5mb3JtW3IuJGdsb2JhbERhdGFdLmZvbnRGaW5kZXIuYWRkKGUsdCl9YXN5bmMgZ2V0UGFnZXMoKXt0aGlzLnBhZ2VzfHxhd2FpdCB0aGlzLl9jcmVhdGVQYWdlcygpO2NvbnN0IGU9dGhpcy5wYWdlczt0aGlzLnBhZ2VzPW51bGw7cmV0dXJuIGV9c2VyaWFsaXplRGF0YShlKXtyZXR1cm4gdGhpcy5kYXRhSGFuZGxlci5zZXJpYWxpemUoZSl9c3RhdGljIF9jcmVhdGVEb2N1bWVudChlKXtyZXR1cm4gZVsiL3hkcDp4ZHAiXT9PYmplY3QudmFsdWVzKGUpLmpvaW4oIiIpOmVbInhkcDp4ZHAiXX1zdGF0aWMgZ2V0UmljaFRleHRBc0h0bWwoZSl7aWYoIWV8fCJzdHJpbmciIT10eXBlb2YgZSlyZXR1cm4gbnVsbDt0cnl7bGV0IHQ9bmV3IGwuWEZBUGFyc2VyKGguWGh0bWxOYW1lc3BhY2UsITApLnBhcnNlKGUpO2lmKCFbImJvZHkiLCJ4aHRtbCJdLmluY2x1ZGVzKHRbci4kbm9kZU5hbWVdKSl7Y29uc3QgZT1oLlhodG1sTmFtZXNwYWNlLmJvZHkoe30pO2Vbci4kYXBwZW5kQ2hpbGRdKHQpO3Q9ZX1jb25zdCBhPXRbci4kdG9IVE1MXSgpO2lmKCFhLnN1Y2Nlc3MpcmV0dXJuIG51bGw7Y29uc3R7aHRtbDpufT1hLHthdHRyaWJ1dGVzOml9PW47aWYoaSl7aS5jbGFzcyYmKGkuY2xhc3M9aS5jbGFzcy5maWx0ZXIoKGU9PiFlLnN0YXJ0c1dpdGgoInhmYSIpKSkpO2kuZGlyPSJhdXRvIn1yZXR1cm57aHRtbDpuLHN0cjp0W3IuJHRleHRdKCl9fWNhdGNoKGUpeygwLGMud2FybikoYFhGQSAtIGFuIGVycm9yIG9jY3VycmVkIGR1cmluZyBwYXJzaW5nIG9mIHJpY2ggdGV4dDogJHtlfWApfXJldHVybiBudWxsfX10LlhGQUZhY3Rvcnk9WEZBRmFjdG9yeX0sKGUsdCk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC4kdWlkPXQuJHRvU3R5bGU9dC4kdG9TdHJpbmc9dC4kdG9QYWdlcz10LiR0b0hUTUw9dC4kdGV4dD10LiR0YWJJbmRleD10LiRzZXRWYWx1ZT10LiRzZXRTZXRBdHRyaWJ1dGVzPXQuJHNldElkPXQuJHNlYXJjaE5vZGU9dC4kcm9vdD10LiRyZXNvbHZlUHJvdG90eXBlcz10LiRyZW1vdmVDaGlsZD10LiRwdXNoUGFyYT10LiRwdXNoR2x5cGhzPXQuJHBvcFBhcmE9dC4kb25UZXh0PXQuJG9uQ2hpbGRDaGVjaz10LiRvbkNoaWxkPXQuJG5zQXR0cmlidXRlcz10LiRub2RlTmFtZT10LiRuYW1lc3BhY2VJZD10LiRsYXN0QXR0cmlidXRlPXQuJGlzVXNhYmxlPXQuJGlzVHJhbnNwYXJlbnQ9dC4kaXNUaGVyZU1vcmVXaWR0aD10LiRpc1NwbGl0dGFibGU9dC4kaXNOc0Fnbm9zdGljPXQuJGlzRGVzY2VuZGVudD10LiRpc0RhdGFWYWx1ZT10LiRpc0NEQVRBWG1sPXQuJGlzQmluZGFibGU9dC4kaW5zZXJ0QXQ9dC4kaW5kZXhPZj10LiRpZHM9dC4kaGFzU2V0dGFibGVWYWx1ZT10LiRnbG9iYWxEYXRhPXQuJGdldFRlbXBsYXRlUm9vdD10LiRnZXRTdWJmb3JtUGFyZW50PXQuJGdldFJlYWxDaGlsZHJlbkJ5TmFtZUl0PXQuJGdldFBhcmVudD10LiRnZXROZXh0UGFnZT10LiRnZXRFeHRyYT10LiRnZXREYXRhVmFsdWU9dC4kZ2V0Q29udGFpbmVkQ2hpbGRyZW49dC4kZ2V0Q2hpbGRyZW5CeU5hbWVJdD10LiRnZXRDaGlsZHJlbkJ5TmFtZT10LiRnZXRDaGlsZHJlbkJ5Q2xhc3M9dC4kZ2V0Q2hpbGRyZW49dC4kZ2V0QXZhaWxhYmxlU3BhY2U9dC4kZ2V0QXR0cmlidXRlcz10LiRnZXRBdHRyaWJ1dGVJdD10LiRmbHVzaEhUTUw9dC4kZmluYWxpemU9dC4kZXh0cmE9dC4kZHVtcD10LiRkYXRhPXQuJGNvbnRlbnQ9dC4kY29uc3VtZWQ9dC4kY2xvbmU9dC4kY2xlYW51cD10LiRjbGVhblBhZ2U9dC4kY2xlYW49dC4kY2hpbGRyZW5Ub0hUTUw9dC4kYXBwZW5kQ2hpbGQ9dC4kYWRkSFRNTD10LiRhY2NlcHRXaGl0ZXNwYWNlPXZvaWQgMDtjb25zdCBhPVN5bWJvbCgpO3QuJGFjY2VwdFdoaXRlc3BhY2U9YTtjb25zdCByPVN5bWJvbCgpO3QuJGFkZEhUTUw9cjtjb25zdCBuPVN5bWJvbCgpO3QuJGFwcGVuZENoaWxkPW47Y29uc3QgaT1TeW1ib2woKTt0LiRjaGlsZHJlblRvSFRNTD1pO2NvbnN0IHM9U3ltYm9sKCk7dC4kY2xlYW49cztjb25zdCBvPVN5bWJvbCgpO3QuJGNsZWFuUGFnZT1vO2NvbnN0IGM9U3ltYm9sKCk7dC4kY2xlYW51cD1jO2NvbnN0IGw9U3ltYm9sKCk7dC4kY2xvbmU9bDtjb25zdCBoPVN5bWJvbCgpO3QuJGNvbnN1bWVkPWg7Y29uc3QgdT1TeW1ib2woImNvbnRlbnQiKTt0LiRjb250ZW50PXU7Y29uc3QgZD1TeW1ib2woImRhdGEiKTt0LiRkYXRhPWQ7Y29uc3QgZj1TeW1ib2woKTt0LiRkdW1wPWY7Y29uc3QgZz1TeW1ib2woImV4dHJhIik7dC4kZXh0cmE9Zztjb25zdCBwPVN5bWJvbCgpO3QuJGZpbmFsaXplPXA7Y29uc3QgbT1TeW1ib2woKTt0LiRmbHVzaEhUTUw9bTtjb25zdCBiPVN5bWJvbCgpO3QuJGdldEF0dHJpYnV0ZUl0PWI7Y29uc3QgeT1TeW1ib2woKTt0LiRnZXRBdHRyaWJ1dGVzPXk7Y29uc3Qgdz1TeW1ib2woKTt0LiRnZXRBdmFpbGFibGVTcGFjZT13O2NvbnN0IFM9U3ltYm9sKCk7dC4kZ2V0Q2hpbGRyZW5CeUNsYXNzPVM7Y29uc3QgeD1TeW1ib2woKTt0LiRnZXRDaGlsZHJlbkJ5TmFtZT14O2NvbnN0IEM9U3ltYm9sKCk7dC4kZ2V0Q2hpbGRyZW5CeU5hbWVJdD1DO2NvbnN0IGs9U3ltYm9sKCk7dC4kZ2V0RGF0YVZhbHVlPWs7Y29uc3Qgdj1TeW1ib2woKTt0LiRnZXRFeHRyYT12O2NvbnN0IEY9U3ltYm9sKCk7dC4kZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXQ9Rjtjb25zdCBPPVN5bWJvbCgpO3QuJGdldENoaWxkcmVuPU87Y29uc3QgVD1TeW1ib2woKTt0LiRnZXRDb250YWluZWRDaGlsZHJlbj1UO2NvbnN0IE09U3ltYm9sKCk7dC4kZ2V0TmV4dFBhZ2U9TTtjb25zdCBEPVN5bWJvbCgpO3QuJGdldFN1YmZvcm1QYXJlbnQ9RDtjb25zdCBFPVN5bWJvbCgpO3QuJGdldFBhcmVudD1FO2NvbnN0IE49U3ltYm9sKCk7dC4kZ2V0VGVtcGxhdGVSb290PU47Y29uc3QgUj1TeW1ib2woKTt0LiRnbG9iYWxEYXRhPVI7Y29uc3QgTD1TeW1ib2woKTt0LiRoYXNTZXR0YWJsZVZhbHVlPUw7Y29uc3QgJD1TeW1ib2woKTt0LiRpZHM9JDtjb25zdCBfPVN5bWJvbCgpO3QuJGluZGV4T2Y9Xztjb25zdCBqPVN5bWJvbCgpO3QuJGluc2VydEF0PWo7Y29uc3QgVT1TeW1ib2woKTt0LiRpc0NEQVRBWG1sPVU7Y29uc3QgWD1TeW1ib2woKTt0LiRpc0JpbmRhYmxlPVg7Y29uc3QgSD1TeW1ib2woKTt0LiRpc0RhdGFWYWx1ZT1IO2NvbnN0IHE9U3ltYm9sKCk7dC4kaXNEZXNjZW5kZW50PXE7Y29uc3Qgej1TeW1ib2woKTt0LiRpc05zQWdub3N0aWM9ejtjb25zdCBXPVN5bWJvbCgpO3QuJGlzU3BsaXR0YWJsZT1XO2NvbnN0IEc9U3ltYm9sKCk7dC4kaXNUaGVyZU1vcmVXaWR0aD1HO2NvbnN0IFY9U3ltYm9sKCk7dC4kaXNUcmFuc3BhcmVudD1WO2NvbnN0IEs9U3ltYm9sKCk7dC4kaXNVc2FibGU9Sztjb25zdCBKPVN5bWJvbCgpO3QuJGxhc3RBdHRyaWJ1dGU9Sjtjb25zdCBZPVN5bWJvbCgibmFtZXNwYWNlSWQiKTt0LiRuYW1lc3BhY2VJZD1ZO2NvbnN0IFo9U3ltYm9sKCJub2RlTmFtZSIpO3QuJG5vZGVOYW1lPVo7Y29uc3QgUT1TeW1ib2woKTt0LiRuc0F0dHJpYnV0ZXM9UTtjb25zdCBlZT1TeW1ib2woKTt0LiRvbkNoaWxkPWVlO2NvbnN0IHRlPVN5bWJvbCgpO3QuJG9uQ2hpbGRDaGVjaz10ZTtjb25zdCBhZT1TeW1ib2woKTt0LiRvblRleHQ9YWU7Y29uc3QgcmU9U3ltYm9sKCk7dC4kcHVzaEdseXBocz1yZTtjb25zdCBuZT1TeW1ib2woKTt0LiRwb3BQYXJhPW5lO2NvbnN0IGllPVN5bWJvbCgpO3QuJHB1c2hQYXJhPWllO2NvbnN0IHNlPVN5bWJvbCgpO3QuJHJlbW92ZUNoaWxkPXNlO2NvbnN0IG9lPVN5bWJvbCgicm9vdCIpO3QuJHJvb3Q9b2U7Y29uc3QgY2U9U3ltYm9sKCk7dC4kcmVzb2x2ZVByb3RvdHlwZXM9Y2U7Y29uc3QgbGU9U3ltYm9sKCk7dC4kc2VhcmNoTm9kZT1sZTtjb25zdCBoZT1TeW1ib2woKTt0LiRzZXRJZD1oZTtjb25zdCB1ZT1TeW1ib2woKTt0LiRzZXRTZXRBdHRyaWJ1dGVzPXVlO2NvbnN0IGRlPVN5bWJvbCgpO3QuJHNldFZhbHVlPWRlO2NvbnN0IGZlPVN5bWJvbCgpO3QuJHRhYkluZGV4PWZlO2NvbnN0IGdlPVN5bWJvbCgpO3QuJHRleHQ9Z2U7Y29uc3QgcGU9U3ltYm9sKCk7dC4kdG9QYWdlcz1wZTtjb25zdCBtZT1TeW1ib2woKTt0LiR0b0hUTUw9bWU7Y29uc3QgYmU9U3ltYm9sKCk7dC4kdG9TdHJpbmc9YmU7Y29uc3QgeWU9U3ltYm9sKCk7dC4kdG9TdHlsZT15ZTtjb25zdCB3ZT1TeW1ib2woInVpZCIpO3QuJHVpZD13ZX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkJpbmRlcj12b2lkIDA7dmFyIHI9YSg3OCksbj1hKDgwKSxpPWEoODgpLHM9YSg4Nyksbz1hKDgxKSxjPWEoMik7Y29uc3QgbD1vLk5hbWVzcGFjZUlkcy5kYXRhc2V0cy5pZDtmdW5jdGlvbiBjcmVhdGVUZXh0KGUpe2NvbnN0IHQ9bmV3IG4uVGV4dCh7fSk7dFtyLiRjb250ZW50XT1lO3JldHVybiB0fXQuQmluZGVyPWNsYXNzIEJpbmRlcntjb25zdHJ1Y3RvcihlKXt0aGlzLnJvb3Q9ZTt0aGlzLmRhdGFzZXRzPWUuZGF0YXNldHM7dGhpcy5kYXRhPWUuZGF0YXNldHM/LmRhdGF8fG5ldyBzLlhtbE9iamVjdChvLk5hbWVzcGFjZUlkcy5kYXRhc2V0cy5pZCwiZGF0YSIpO3RoaXMuZW1wdHlNZXJnZT0wPT09dGhpcy5kYXRhW3IuJGdldENoaWxkcmVuXSgpLmxlbmd0aDt0aGlzLnJvb3QuZm9ybT10aGlzLmZvcm09ZS50ZW1wbGF0ZVtyLiRjbG9uZV0oKX1faXNDb25zdW1lRGF0YSgpe3JldHVybiF0aGlzLmVtcHR5TWVyZ2UmJnRoaXMuX21lcmdlTW9kZX1faXNNYXRjaFRlbXBsYXRlKCl7cmV0dXJuIXRoaXMuX2lzQ29uc3VtZURhdGEoKX1iaW5kKCl7dGhpcy5fYmluZEVsZW1lbnQodGhpcy5mb3JtLHRoaXMuZGF0YSk7cmV0dXJuIHRoaXMuZm9ybX1nZXREYXRhKCl7cmV0dXJuIHRoaXMuZGF0YX1fYmluZFZhbHVlKGUsdCxhKXtlW3IuJGRhdGFdPXQ7aWYoZVtyLiRoYXNTZXR0YWJsZVZhbHVlXSgpKWlmKHRbci4kaXNEYXRhVmFsdWVdKCkpe2NvbnN0IGE9dFtyLiRnZXREYXRhVmFsdWVdKCk7ZVtyLiRzZXRWYWx1ZV0oY3JlYXRlVGV4dChhKSl9ZWxzZSBpZihlIGluc3RhbmNlb2Ygbi5GaWVsZCYmIm11bHRpU2VsZWN0Ij09PWUudWk/LmNob2ljZUxpc3Q/Lm9wZW4pe2NvbnN0IGE9dFtyLiRnZXRDaGlsZHJlbl0oKS5tYXAoKGU9PmVbci4kY29udGVudF0udHJpbSgpKSkuam9pbigiXG4iKTtlW3IuJHNldFZhbHVlXShjcmVhdGVUZXh0KGEpKX1lbHNlIHRoaXMuX2lzQ29uc3VtZURhdGEoKSYmKDAsYy53YXJuKSgiWEZBIC0gTm9kZXMgaGF2ZW4ndCB0aGUgc2FtZSB0eXBlLiIpO2Vsc2UhdFtyLiRpc0RhdGFWYWx1ZV0oKXx8dGhpcy5faXNNYXRjaFRlbXBsYXRlKCk/dGhpcy5fYmluZEVsZW1lbnQoZSx0KTooMCxjLndhcm4pKCJYRkEgLSBOb2RlcyBoYXZlbid0IHRoZSBzYW1lIHR5cGUuIil9X2ZpbmREYXRhQnlOYW1lVG9Db25zdW1lKGUsdCxhLG4pe2lmKCFlKXJldHVybiBudWxsO2xldCBpLHM7Zm9yKGxldCBuPTA7bjwzO24rKyl7aT1hW3IuJGdldFJlYWxDaGlsZHJlbkJ5TmFtZUl0XShlLCExLCEwKTtmb3IoOzspe3M9aS5uZXh0KCkudmFsdWU7aWYoIXMpYnJlYWs7aWYodD09PXNbci4kaXNEYXRhVmFsdWVdKCkpcmV0dXJuIHN9aWYoYVtyLiRuYW1lc3BhY2VJZF09PT1vLk5hbWVzcGFjZUlkcy5kYXRhc2V0cy5pZCYmImRhdGEiPT09YVtyLiRub2RlTmFtZV0pYnJlYWs7YT1hW3IuJGdldFBhcmVudF0oKX1pZighbilyZXR1cm4gbnVsbDtpPXRoaXMuZGF0YVtyLiRnZXRSZWFsQ2hpbGRyZW5CeU5hbWVJdF0oZSwhMCwhMSk7cz1pLm5leHQoKS52YWx1ZTtpZihzKXJldHVybiBzO2k9dGhpcy5kYXRhW3IuJGdldEF0dHJpYnV0ZUl0XShlLCEwKTtzPWkubmV4dCgpLnZhbHVlO3JldHVybiBzPy5bci4kaXNEYXRhVmFsdWVdKCk/czpudWxsfV9zZXRQcm9wZXJ0aWVzKGUsdCl7aWYoZS5oYXNPd25Qcm9wZXJ0eSgic2V0UHJvcGVydHkiKSlmb3IoY29uc3R7cmVmOmEsdGFyZ2V0Om8sY29ubmVjdGlvbjpsfW9mIGUuc2V0UHJvcGVydHkuY2hpbGRyZW4pe2lmKGwpY29udGludWU7aWYoIWEpY29udGludWU7Y29uc3QgaD0oMCxpLnNlYXJjaE5vZGUpKHRoaXMucm9vdCx0LGEsITEsITEpO2lmKCFoKXsoMCxjLndhcm4pKGBYRkEgLSBJbnZhbGlkIHJlZmVyZW5jZTogJHthfS5gKTtjb250aW51ZX1jb25zdFt1XT1oO2lmKCF1W3IuJGlzRGVzY2VuZGVudF0odGhpcy5kYXRhKSl7KDAsYy53YXJuKSgiWEZBIC0gSW52YWxpZCBub2RlOiBtdXN0IGJlIGEgZGF0YSBub2RlLiIpO2NvbnRpbnVlfWNvbnN0IGQ9KDAsaS5zZWFyY2hOb2RlKSh0aGlzLnJvb3QsZSxvLCExLCExKTtpZighZCl7KDAsYy53YXJuKShgWEZBIC0gSW52YWxpZCB0YXJnZXQ6ICR7b30uYCk7Y29udGludWV9Y29uc3RbZl09ZDtpZighZltyLiRpc0Rlc2NlbmRlbnRdKGUpKXsoMCxjLndhcm4pKCJYRkEgLSBJbnZhbGlkIHRhcmdldDogbXVzdCBiZSBhIHByb3BlcnR5IG9yIHN1YnByb3BlcnR5LiIpO2NvbnRpbnVlfWNvbnN0IGc9ZltyLiRnZXRQYXJlbnRdKCk7aWYoZiBpbnN0YW5jZW9mIG4uU2V0UHJvcGVydHl8fGcgaW5zdGFuY2VvZiBuLlNldFByb3BlcnR5KXsoMCxjLndhcm4pKCJYRkEgLSBJbnZhbGlkIHRhcmdldDogY2Fubm90IGJlIGEgc2V0UHJvcGVydHkgb3Igb25lIG9mIGl0cyBwcm9wZXJ0aWVzLiIpO2NvbnRpbnVlfWlmKGYgaW5zdGFuY2VvZiBuLkJpbmRJdGVtc3x8ZyBpbnN0YW5jZW9mIG4uQmluZEl0ZW1zKXsoMCxjLndhcm4pKCJYRkEgLSBJbnZhbGlkIHRhcmdldDogY2Fubm90IGJlIGEgYmluZEl0ZW1zIG9yIG9uZSBvZiBpdHMgcHJvcGVydGllcy4iKTtjb250aW51ZX1jb25zdCBwPXVbci4kdGV4dF0oKSxtPWZbci4kbm9kZU5hbWVdO2lmKGYgaW5zdGFuY2VvZiBzLlhGQUF0dHJpYnV0ZSl7Y29uc3QgZT1PYmplY3QuY3JlYXRlKG51bGwpO2VbbV09cDtjb25zdCB0PVJlZmxlY3QuY29uc3RydWN0KE9iamVjdC5nZXRQcm90b3R5cGVPZihnKS5jb25zdHJ1Y3RvcixbZV0pO2dbbV09dFttXX1lbHNlIGlmKGYuaGFzT3duUHJvcGVydHkoci4kY29udGVudCkpe2Zbci4kZGF0YV09dTtmW3IuJGNvbnRlbnRdPXA7ZltyLiRmaW5hbGl6ZV0oKX1lbHNlKDAsYy53YXJuKSgiWEZBIC0gSW52YWxpZCBub2RlIHRvIHVzZSBpbiBzZXRQcm9wZXJ0eSIpfX1fYmluZEl0ZW1zKGUsdCl7aWYoIWUuaGFzT3duUHJvcGVydHkoIml0ZW1zIil8fCFlLmhhc093blByb3BlcnR5KCJiaW5kSXRlbXMiKXx8ZS5iaW5kSXRlbXMuaXNFbXB0eSgpKXJldHVybjtmb3IoY29uc3QgdCBvZiBlLml0ZW1zLmNoaWxkcmVuKWVbci4kcmVtb3ZlQ2hpbGRdKHQpO2UuaXRlbXMuY2xlYXIoKTtjb25zdCBhPW5ldyBuLkl0ZW1zKHt9KSxzPW5ldyBuLkl0ZW1zKHt9KTtlW3IuJGFwcGVuZENoaWxkXShhKTtlLml0ZW1zLnB1c2goYSk7ZVtyLiRhcHBlbmRDaGlsZF0ocyk7ZS5pdGVtcy5wdXNoKHMpO2Zvcihjb25zdHtyZWY6bixsYWJlbFJlZjpvLHZhbHVlUmVmOmwsY29ubmVjdGlvbjpofW9mIGUuYmluZEl0ZW1zLmNoaWxkcmVuKXtpZihoKWNvbnRpbnVlO2lmKCFuKWNvbnRpbnVlO2NvbnN0IGU9KDAsaS5zZWFyY2hOb2RlKSh0aGlzLnJvb3QsdCxuLCExLCExKTtpZihlKWZvcihjb25zdCB0IG9mIGUpe2lmKCF0W3IuJGlzRGVzY2VuZGVudF0odGhpcy5kYXRhc2V0cykpeygwLGMud2FybikoYFhGQSAtIEludmFsaWQgcmVmICgke259KTogbXVzdCBiZSBhIGRhdGFzZXRzIGNoaWxkLmApO2NvbnRpbnVlfWNvbnN0IGU9KDAsaS5zZWFyY2hOb2RlKSh0aGlzLnJvb3QsdCxvLCEwLCExKTtpZighZSl7KDAsYy53YXJuKShgWEZBIC0gSW52YWxpZCBsYWJlbDogJHtvfS5gKTtjb250aW51ZX1jb25zdFtoXT1lO2lmKCFoW3IuJGlzRGVzY2VuZGVudF0odGhpcy5kYXRhc2V0cykpeygwLGMud2FybikoIlhGQSAtIEludmFsaWQgbGFiZWw6IG11c3QgYmUgYSBkYXRhc2V0cyBjaGlsZC4iKTtjb250aW51ZX1jb25zdCB1PSgwLGkuc2VhcmNoTm9kZSkodGhpcy5yb290LHQsbCwhMCwhMSk7aWYoIXUpeygwLGMud2FybikoYFhGQSAtIEludmFsaWQgdmFsdWU6ICR7bH0uYCk7Y29udGludWV9Y29uc3RbZF09dTtpZighZFtyLiRpc0Rlc2NlbmRlbnRdKHRoaXMuZGF0YXNldHMpKXsoMCxjLndhcm4pKCJYRkEgLSBJbnZhbGlkIHZhbHVlOiBtdXN0IGJlIGEgZGF0YXNldHMgY2hpbGQuIik7Y29udGludWV9Y29uc3QgZj1jcmVhdGVUZXh0KGhbci4kdGV4dF0oKSksZz1jcmVhdGVUZXh0KGRbci4kdGV4dF0oKSk7YVtyLiRhcHBlbmRDaGlsZF0oZik7YS50ZXh0LnB1c2goZik7c1tyLiRhcHBlbmRDaGlsZF0oZyk7cy50ZXh0LnB1c2goZyl9ZWxzZSgwLGMud2FybikoYFhGQSAtIEludmFsaWQgcmVmZXJlbmNlOiAke259LmApfX1fYmluZE9jY3VycmVuY2VzKGUsdCxhKXtsZXQgbjtpZih0Lmxlbmd0aD4xKXtuPWVbci4kY2xvbmVdKCk7bltyLiRyZW1vdmVDaGlsZF0obi5vY2N1cik7bi5vY2N1cj1udWxsfXRoaXMuX2JpbmRWYWx1ZShlLHRbMF0sYSk7dGhpcy5fc2V0UHJvcGVydGllcyhlLHRbMF0pO3RoaXMuX2JpbmRJdGVtcyhlLHRbMF0pO2lmKDE9PT10Lmxlbmd0aClyZXR1cm47Y29uc3QgaT1lW3IuJGdldFBhcmVudF0oKSxzPWVbci4kbm9kZU5hbWVdLG89aVtyLiRpbmRleE9mXShlKTtmb3IobGV0IGU9MSxjPXQubGVuZ3RoO2U8YztlKyspe2NvbnN0IGM9dFtlXSxsPW5bci4kY2xvbmVdKCk7aVtzXS5wdXNoKGwpO2lbci4kaW5zZXJ0QXRdKG8rZSxsKTt0aGlzLl9iaW5kVmFsdWUobCxjLGEpO3RoaXMuX3NldFByb3BlcnRpZXMobCxjKTt0aGlzLl9iaW5kSXRlbXMobCxjKX19X2NyZWF0ZU9jY3VycmVuY2VzKGUpe2lmKCF0aGlzLmVtcHR5TWVyZ2UpcmV0dXJuO2NvbnN0e29jY3VyOnR9PWU7aWYoIXR8fHQuaW5pdGlhbDw9MSlyZXR1cm47Y29uc3QgYT1lW3IuJGdldFBhcmVudF0oKSxuPWVbci4kbm9kZU5hbWVdO2lmKCEoYVtuXWluc3RhbmNlb2Ygcy5YRkFPYmplY3RBcnJheSkpcmV0dXJuO2xldCBpO2k9ZS5uYW1lP2Fbbl0uY2hpbGRyZW4uZmlsdGVyKCh0PT50Lm5hbWU9PT1lLm5hbWUpKS5sZW5ndGg6YVtuXS5jaGlsZHJlbi5sZW5ndGg7Y29uc3Qgbz1hW3IuJGluZGV4T2ZdKGUpKzEsYz10LmluaXRpYWwtaTtpZihjKXtjb25zdCB0PWVbci4kY2xvbmVdKCk7dFtyLiRyZW1vdmVDaGlsZF0odC5vY2N1cik7dC5vY2N1cj1udWxsO2Fbbl0ucHVzaCh0KTthW3IuJGluc2VydEF0XShvLHQpO2ZvcihsZXQgZT0xO2U8YztlKyspe2NvbnN0IGk9dFtyLiRjbG9uZV0oKTthW25dLnB1c2goaSk7YVtyLiRpbnNlcnRBdF0obytlLGkpfX19X2dldE9jY3VySW5mbyhlKXtjb25zdHtuYW1lOnQsb2NjdXI6YX09ZTtpZighYXx8IXQpcmV0dXJuWzEsMV07Y29uc3Qgcj0tMT09PWEubWF4PzEvMDphLm1heDtyZXR1cm5bYS5taW4scl19X3NldEFuZEJpbmQoZSx0KXt0aGlzLl9zZXRQcm9wZXJ0aWVzKGUsdCk7dGhpcy5fYmluZEl0ZW1zKGUsdCk7dGhpcy5fYmluZEVsZW1lbnQoZSx0KX1fYmluZEVsZW1lbnQoZSx0KXtjb25zdCBhPVtdO3RoaXMuX2NyZWF0ZU9jY3VycmVuY2VzKGUpO2Zvcihjb25zdCBuIG9mIGVbci4kZ2V0Q2hpbGRyZW5dKCkpe2lmKG5bci4kZGF0YV0pY29udGludWU7aWYodm9pZCAwPT09dGhpcy5fbWVyZ2VNb2RlJiYic3ViZm9ybSI9PT1uW3IuJG5vZGVOYW1lXSl7dGhpcy5fbWVyZ2VNb2RlPSJjb25zdW1lRGF0YSI9PT1uLm1lcmdlTW9kZTtjb25zdCBlPXRbci4kZ2V0Q2hpbGRyZW5dKCk7aWYoZS5sZW5ndGg+MCl0aGlzLl9iaW5kT2NjdXJyZW5jZXMobixbZVswXV0sbnVsbCk7ZWxzZSBpZih0aGlzLmVtcHR5TWVyZ2Upe2NvbnN0IGU9dFtyLiRuYW1lc3BhY2VJZF09PT1sPy0xOnRbci4kbmFtZXNwYWNlSWRdLGE9bltyLiRkYXRhXT1uZXcgcy5YbWxPYmplY3QoZSxuLm5hbWV8fCJyb290Iik7dFtyLiRhcHBlbmRDaGlsZF0oYSk7dGhpcy5fYmluZEVsZW1lbnQobixhKX1jb250aW51ZX1pZighbltyLiRpc0JpbmRhYmxlXSgpKWNvbnRpbnVlO2xldCBlPSExLG89bnVsbCxoPW51bGwsdT1udWxsO2lmKG4uYmluZCl7c3dpdGNoKG4uYmluZC5tYXRjaCl7Y2FzZSJub25lIjp0aGlzLl9zZXRBbmRCaW5kKG4sdCk7Y29udGludWU7Y2FzZSJnbG9iYWwiOmU9ITA7YnJlYWs7Y2FzZSJkYXRhUmVmIjppZighbi5iaW5kLnJlZil7KDAsYy53YXJuKShgWEZBIC0gcmVmIGlzIGVtcHR5IGluIG5vZGUgJHtuW3IuJG5vZGVOYW1lXX0uYCk7dGhpcy5fc2V0QW5kQmluZChuLHQpO2NvbnRpbnVlfWg9bi5iaW5kLnJlZn1uLmJpbmQucGljdHVyZSYmKG89bi5iaW5kLnBpY3R1cmVbci4kY29udGVudF0pfWNvbnN0W2QsZl09dGhpcy5fZ2V0T2NjdXJJbmZvKG4pO2lmKGgpe3U9KDAsaS5zZWFyY2hOb2RlKSh0aGlzLnJvb3QsdCxoLCEwLCExKTtpZihudWxsPT09dSl7dT0oMCxpLmNyZWF0ZURhdGFOb2RlKSh0aGlzLmRhdGEsdCxoKTtpZighdSljb250aW51ZTt0aGlzLl9pc0NvbnN1bWVEYXRhKCkmJih1W3IuJGNvbnN1bWVkXT0hMCk7dGhpcy5fc2V0QW5kQmluZChuLHUpO2NvbnRpbnVlfXRoaXMuX2lzQ29uc3VtZURhdGEoKSYmKHU9dS5maWx0ZXIoKGU9PiFlW3IuJGNvbnN1bWVkXSkpKTt1Lmxlbmd0aD5mP3U9dS5zbGljZSgwLGYpOjA9PT11Lmxlbmd0aCYmKHU9bnVsbCk7dSYmdGhpcy5faXNDb25zdW1lRGF0YSgpJiZ1LmZvckVhY2goKGU9PntlW3IuJGNvbnN1bWVkXT0hMH0pKX1lbHNle2lmKCFuLm5hbWUpe3RoaXMuX3NldEFuZEJpbmQobix0KTtjb250aW51ZX1pZih0aGlzLl9pc0NvbnN1bWVEYXRhKCkpe2NvbnN0IGE9W107Zm9yKDthLmxlbmd0aDxmOyl7Y29uc3QgaT10aGlzLl9maW5kRGF0YUJ5TmFtZVRvQ29uc3VtZShuLm5hbWUsbltyLiRoYXNTZXR0YWJsZVZhbHVlXSgpLHQsZSk7aWYoIWkpYnJlYWs7aVtyLiRjb25zdW1lZF09ITA7YS5wdXNoKGkpfXU9YS5sZW5ndGg+MD9hOm51bGx9ZWxzZXt1PXRbci4kZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXRdKG4ubmFtZSwhMSx0aGlzLmVtcHR5TWVyZ2UpLm5leHQoKS52YWx1ZTtpZighdSl7aWYoMD09PWQpe2EucHVzaChuKTtjb250aW51ZX1jb25zdCBlPXRbci4kbmFtZXNwYWNlSWRdPT09bD8tMTp0W3IuJG5hbWVzcGFjZUlkXTt1PW5bci4kZGF0YV09bmV3IHMuWG1sT2JqZWN0KGUsbi5uYW1lKTt0aGlzLmVtcHR5TWVyZ2UmJih1W3IuJGNvbnN1bWVkXT0hMCk7dFtyLiRhcHBlbmRDaGlsZF0odSk7dGhpcy5fc2V0QW5kQmluZChuLHUpO2NvbnRpbnVlfXRoaXMuZW1wdHlNZXJnZSYmKHVbci4kY29uc3VtZWRdPSEwKTt1PVt1XX19dT90aGlzLl9iaW5kT2NjdXJyZW5jZXMobix1LG8pOmQ+MD90aGlzLl9zZXRBbmRCaW5kKG4sdCk6YS5wdXNoKG4pfWEuZm9yRWFjaCgoZT0+ZVtyLiRnZXRQYXJlbnRdKClbci4kcmVtb3ZlQ2hpbGRdKGUpKSl9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlZhbHVlPXQuVGV4dD10LlRlbXBsYXRlTmFtZXNwYWNlPXQuVGVtcGxhdGU9dC5TZXRQcm9wZXJ0eT10Lkl0ZW1zPXQuRmllbGQ9dC5CaW5kSXRlbXM9dm9pZCAwO3ZhciByPWEoNzgpLG49YSg4MSksaT1hKDgyKSxzPWEoODMpLG89YSg4NyksYz1hKDg0KSxsPWEoMiksaD1hKDg1KSx1PWEoMyksZD1hKDg4KTtjb25zdCBmPW4uTmFtZXNwYWNlSWRzLnRlbXBsYXRlLmlkLGc9Imh0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnIixwPS9eSChcZCspJC8sbT1uZXcgU2V0KFsiaW1hZ2UvZ2lmIiwiaW1hZ2UvanBlZyIsImltYWdlL2pwZyIsImltYWdlL3BqcGVnIiwiaW1hZ2UvcG5nIiwiaW1hZ2UvYXBuZyIsImltYWdlL3gtcG5nIiwiaW1hZ2UvYm1wIiwiaW1hZ2UveC1tcy1ibXAiLCJpbWFnZS90aWZmIiwiaW1hZ2UvdGlmIiwiYXBwbGljYXRpb24vb2N0ZXQtc3RyZWFtIl0pLGI9W1tbNjYsNzddLCJpbWFnZS9ibXAiXSxbWzI1NSwyMTYsMjU1XSwiaW1hZ2UvanBlZyJdLFtbNzMsNzMsNDIsMF0sImltYWdlL3RpZmYiXSxbWzc3LDc3LDAsNDJdLCJpbWFnZS90aWZmIl0sW1s3MSw3Myw3MCw1Niw1Nyw5N10sImltYWdlL2dpZiJdLFtbMTM3LDgwLDc4LDcxLDEzLDEwLDI2LDEwXSwiaW1hZ2UvcG5nIl1dO2Z1bmN0aW9uIGdldEJvcmRlckRpbXMoZSl7aWYoIWV8fCFlLmJvcmRlcilyZXR1cm57dzowLGg6MH07Y29uc3QgdD1lLmJvcmRlcltyLiRnZXRFeHRyYV0oKTtyZXR1cm4gdD97dzp0LndpZHRoc1swXSt0LndpZHRoc1syXSt0Lmluc2V0c1swXSt0Lmluc2V0c1syXSxoOnQud2lkdGhzWzFdK3Qud2lkdGhzWzNdK3QuaW5zZXRzWzFdK3QuaW5zZXRzWzNdfTp7dzowLGg6MH19ZnVuY3Rpb24gaGFzTWFyZ2luKGUpe3JldHVybiBlLm1hcmdpbiYmKGUubWFyZ2luLnRvcEluc2V0fHxlLm1hcmdpbi5yaWdodEluc2V0fHxlLm1hcmdpbi5ib3R0b21JbnNldHx8ZS5tYXJnaW4ubGVmdEluc2V0KX1mdW5jdGlvbiBfc2V0VmFsdWUoZSx0KXtpZighZS52YWx1ZSl7Y29uc3QgdD1uZXcgVmFsdWUoe30pO2Vbci4kYXBwZW5kQ2hpbGRdKHQpO2UudmFsdWU9dH1lLnZhbHVlW3IuJHNldFZhbHVlXSh0KX1mdW5jdGlvbipnZXRDb250YWluZWRDaGlsZHJlbihlKXtmb3IoY29uc3QgdCBvZiBlW3IuJGdldENoaWxkcmVuXSgpKXQgaW5zdGFuY2VvZiBTdWJmb3JtU2V0P3lpZWxkKnRbci4kZ2V0Q29udGFpbmVkQ2hpbGRyZW5dKCk6eWllbGQgdH1mdW5jdGlvbiBpc1JlcXVpcmVkKGUpe3JldHVybiJlcnJvciI9PT1lLnZhbGlkYXRlPy5udWxsVGVzdH1mdW5jdGlvbiBzZXRUYWJJbmRleChlKXtmb3IoO2U7KXtpZighZS50cmF2ZXJzYWwpe2Vbci4kdGFiSW5kZXhdPWVbci4kZ2V0UGFyZW50XSgpW3IuJHRhYkluZGV4XTtyZXR1cm59aWYoZVtyLiR0YWJJbmRleF0pcmV0dXJuO2xldCB0PW51bGw7Zm9yKGNvbnN0IGEgb2YgZS50cmF2ZXJzYWxbci4kZ2V0Q2hpbGRyZW5dKCkpaWYoIm5leHQiPT09YS5vcGVyYXRpb24pe3Q9YTticmVha31pZighdHx8IXQucmVmKXtlW3IuJHRhYkluZGV4XT1lW3IuJGdldFBhcmVudF0oKVtyLiR0YWJJbmRleF07cmV0dXJufWNvbnN0IGE9ZVtyLiRnZXRUZW1wbGF0ZVJvb3RdKCk7ZVtyLiR0YWJJbmRleF09KythW3IuJHRhYkluZGV4XTtjb25zdCBuPWFbci4kc2VhcmNoTm9kZV0odC5yZWYsZSk7aWYoIW4pcmV0dXJuO2U9blswXX19ZnVuY3Rpb24gYXBwbHlBc3Npc3QoZSx0KXtjb25zdCBhPWUuYXNzaXN0O2lmKGEpe2NvbnN0IGU9YVtyLiR0b0hUTUxdKCk7ZSYmKHQudGl0bGU9ZSk7Y29uc3Qgbj1hLnJvbGUubWF0Y2gocCk7aWYobil7Y29uc3QgZT0iaGVhZGluZyIsYT1uWzFdO3Qucm9sZT1lO3RbImFyaWEtbGV2ZWwiXT1hfX1pZigidGFibGUiPT09ZS5sYXlvdXQpdC5yb2xlPSJ0YWJsZSI7ZWxzZSBpZigicm93Ij09PWUubGF5b3V0KXQucm9sZT0icm93IjtlbHNle2NvbnN0IGE9ZVtyLiRnZXRQYXJlbnRdKCk7InJvdyI9PT1hLmxheW91dCYmKHQucm9sZT0iVEgiPT09YS5hc3Npc3Q/LnJvbGU/ImNvbHVtbmhlYWRlciI6ImNlbGwiKX19ZnVuY3Rpb24gYXJpYUxhYmVsKGUpe2lmKCFlLmFzc2lzdClyZXR1cm4gbnVsbDtjb25zdCB0PWUuYXNzaXN0O3JldHVybiB0LnNwZWFrJiYiIiE9PXQuc3BlYWtbci4kY29udGVudF0/dC5zcGVha1tyLiRjb250ZW50XTp0LnRvb2xUaXA/dC50b29sVGlwW3IuJGNvbnRlbnRdOm51bGx9ZnVuY3Rpb24gdmFsdWVUb0h0bWwoZSl7cmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKHtuYW1lOiJkaXYiLGF0dHJpYnV0ZXM6e2NsYXNzOlsieGZhUmljaCJdLHN0eWxlOk9iamVjdC5jcmVhdGUobnVsbCl9LGNoaWxkcmVuOlt7bmFtZToic3BhbiIsYXR0cmlidXRlczp7c3R5bGU6T2JqZWN0LmNyZWF0ZShudWxsKX0sdmFsdWU6ZX1dfSl9ZnVuY3Rpb24gc2V0Rmlyc3RVbnNwbGl0dGFibGUoZSl7Y29uc3QgdD1lW3IuJGdldFRlbXBsYXRlUm9vdF0oKTtpZihudWxsPT09dFtyLiRleHRyYV0uZmlyc3RVbnNwbGl0dGFibGUpe3Rbci4kZXh0cmFdLmZpcnN0VW5zcGxpdHRhYmxlPWU7dFtyLiRleHRyYV0ubm9MYXlvdXRGYWlsdXJlPSEwfX1mdW5jdGlvbiB1bnNldEZpcnN0VW5zcGxpdHRhYmxlKGUpe2NvbnN0IHQ9ZVtyLiRnZXRUZW1wbGF0ZVJvb3RdKCk7dFtyLiRleHRyYV0uZmlyc3RVbnNwbGl0dGFibGU9PT1lJiYodFtyLiRleHRyYV0ubm9MYXlvdXRGYWlsdXJlPSExKX1mdW5jdGlvbiBoYW5kbGVCcmVhayhlKXtpZihlW3IuJGV4dHJhXSlyZXR1cm4hMTtlW3IuJGV4dHJhXT1PYmplY3QuY3JlYXRlKG51bGwpO2lmKCJhdXRvIj09PWUudGFyZ2V0VHlwZSlyZXR1cm4hMTtjb25zdCB0PWVbci4kZ2V0VGVtcGxhdGVSb290XSgpO2xldCBhPW51bGw7aWYoZS50YXJnZXQpe2E9dFtyLiRzZWFyY2hOb2RlXShlLnRhcmdldCxlW3IuJGdldFBhcmVudF0oKSk7aWYoIWEpcmV0dXJuITE7YT1hWzBdfWNvbnN0e2N1cnJlbnRQYWdlQXJlYTpuLGN1cnJlbnRDb250ZW50QXJlYTppfT10W3IuJGV4dHJhXTtpZigicGFnZUFyZWEiPT09ZS50YXJnZXRUeXBlKXthIGluc3RhbmNlb2YgUGFnZUFyZWF8fChhPW51bGwpO2lmKGUuc3RhcnROZXcpe2Vbci4kZXh0cmFdLnRhcmdldD1hfHxuO3JldHVybiEwfWlmKGEmJmEhPT1uKXtlW3IuJGV4dHJhXS50YXJnZXQ9YTtyZXR1cm4hMH1yZXR1cm4hMX1hIGluc3RhbmNlb2YgQ29udGVudEFyZWF8fChhPW51bGwpO2NvbnN0IHM9YSYmYVtyLiRnZXRQYXJlbnRdKCk7bGV0IG8sYz1zO2lmKGUuc3RhcnROZXcpaWYoYSl7Y29uc3QgZT1zLmNvbnRlbnRBcmVhLmNoaWxkcmVuLHQ9ZS5pbmRleE9mKGkpLHI9ZS5pbmRleE9mKGEpOy0xIT09dCYmdDxyJiYoYz1udWxsKTtvPXItMX1lbHNlIG89bi5jb250ZW50QXJlYS5jaGlsZHJlbi5pbmRleE9mKGkpO2Vsc2V7aWYoIWF8fGE9PT1pKXJldHVybiExO289cy5jb250ZW50QXJlYS5jaGlsZHJlbi5pbmRleE9mKGEpLTE7Yz1zPT09bj9udWxsOnN9ZVtyLiRleHRyYV0udGFyZ2V0PWM7ZVtyLiRleHRyYV0uaW5kZXg9bztyZXR1cm4hMH1mdW5jdGlvbiBoYW5kbGVPdmVyZmxvdyhlLHQsYSl7Y29uc3Qgbj1lW3IuJGdldFRlbXBsYXRlUm9vdF0oKSxpPW5bci4kZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSxzPXRbci4kZ2V0U3ViZm9ybVBhcmVudF07dFtyLiRnZXRTdWJmb3JtUGFyZW50XT0oKT0+ZTtuW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmU9ITA7Y29uc3Qgbz10W3IuJHRvSFRNTF0oYSk7ZVtyLiRhZGRIVE1MXShvLmh0bWwsby5iYm94KTtuW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmU9aTt0W3IuJGdldFN1YmZvcm1QYXJlbnRdPXN9Y2xhc3MgQXBwZWFyYW5jZUZpbHRlciBleHRlbmRzIG8uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImFwcGVhcmFuY2VGaWx0ZXIiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50eXBlLFsib3B0aW9uYWwiLCJyZXF1aXJlZCJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIEFyYyBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImFyYyIsITApO3RoaXMuY2lyY3VsYXI9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmNpcmN1bGFyLGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy5oYW5kPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmhhbmQsWyJldmVuIiwibGVmdCIsInJpZ2h0Il0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5zdGFydEFuZ2xlPSgwLGMuZ2V0RmxvYXQpKHtkYXRhOmUuc3RhcnRBbmdsZSxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4hMH0pO3RoaXMuc3dlZXBBbmdsZT0oMCxjLmdldEZsb2F0KSh7ZGF0YTplLnN3ZWVwQW5nbGUsZGVmYXVsdFZhbHVlOjM2MCx2YWxpZGF0ZTplPT4hMH0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmVkZ2U9bnVsbDt0aGlzLmZpbGw9bnVsbH1bci4kdG9IVE1MXSgpe2NvbnN0IGU9dGhpcy5lZGdlfHxuZXcgRWRnZSh7fSksdD1lW3IuJHRvU3R5bGVdKCksYT1PYmplY3QuY3JlYXRlKG51bGwpOyJ2aXNpYmxlIj09PXRoaXMuZmlsbD8ucHJlc2VuY2U/T2JqZWN0LmFzc2lnbihhLHRoaXMuZmlsbFtyLiR0b1N0eWxlXSgpKTphLmZpbGw9InRyYW5zcGFyZW50IjthLnN0cm9rZVdpZHRoPSgwLHMubWVhc3VyZVRvU3RyaW5nKSgidmlzaWJsZSI9PT1lLnByZXNlbmNlP2UudGhpY2tuZXNzOjApO2Euc3Ryb2tlPXQuY29sb3I7bGV0IG47Y29uc3QgaT17eG1sbnM6ZyxzdHlsZTp7d2lkdGg6IjEwMCUiLGhlaWdodDoiMTAwJSIsb3ZlcmZsb3c6InZpc2libGUifX07aWYoMzYwPT09dGhpcy5zd2VlcEFuZ2xlKW49e25hbWU6ImVsbGlwc2UiLGF0dHJpYnV0ZXM6e3htbG5zOmcsY3g6IjUwJSIsY3k6IjUwJSIscng6IjUwJSIscnk6IjUwJSIsc3R5bGU6YX19O2Vsc2V7Y29uc3QgZT10aGlzLnN0YXJ0QW5nbGUqTWF0aC5QSS8xODAsdD10aGlzLnN3ZWVwQW5nbGUqTWF0aC5QSS8xODAscj10aGlzLnN3ZWVwQW5nbGU+MTgwPzE6MCxbcyxvLGMsbF09WzUwKigxK01hdGguY29zKGUpKSw1MCooMS1NYXRoLnNpbihlKSksNTAqKDErTWF0aC5jb3MoZSt0KSksNTAqKDEtTWF0aC5zaW4oZSt0KSldO249e25hbWU6InBhdGgiLGF0dHJpYnV0ZXM6e3htbG5zOmcsZDpgTSAke3N9ICR7b30gQSA1MCA1MCAwICR7cn0gMCAke2N9ICR7bH1gLHZlY3RvckVmZmVjdDoibm9uLXNjYWxpbmctc3Ryb2tlIixzdHlsZTphfX07T2JqZWN0LmFzc2lnbihpLHt2aWV3Qm94OiIwIDAgMTAwIDEwMCIscHJlc2VydmVBc3BlY3RSYXRpbzoibm9uZSJ9KX1jb25zdCBvPXtuYW1lOiJzdmciLGNoaWxkcmVuOltuXSxhdHRyaWJ1dGVzOml9O2lmKGhhc01hcmdpbih0aGlzW3IuJGdldFBhcmVudF0oKVtyLiRnZXRQYXJlbnRdKCkpKXJldHVybiBjLkhUTUxSZXN1bHQuc3VjY2Vzcyh7bmFtZToiZGl2IixhdHRyaWJ1dGVzOntzdHlsZTp7ZGlzcGxheToiaW5saW5lIix3aWR0aDoiMTAwJSIsaGVpZ2h0OiIxMDAlIn19LGNoaWxkcmVuOltvXX0pO28uYXR0cmlidXRlcy5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiO3JldHVybiBjLkhUTUxSZXN1bHQuc3VjY2VzcyhvKX19Y2xhc3MgQXJlYSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImFyZWEiLCEwKTt0aGlzLmNvbFNwYW49KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmNvbFNwYW4sZGVmYXVsdFZhbHVlOjEsdmFsaWRhdGU6ZT0+ZT49MXx8LTE9PT1lfSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnJlbGV2YW50PSgwLGMuZ2V0UmVsZXZhbnQpKGUucmVsZXZhbnQpO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLng9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS54LCIwcHQiKTt0aGlzLnk9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS55LCIwcHQiKTt0aGlzLmRlc2M9bnVsbDt0aGlzLmV4dHJhcz1udWxsO3RoaXMuYXJlYT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRyYXc9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5leE9iamVjdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV4Y2xHcm91cD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmZpZWxkPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc3ViZm9ybT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnN1YmZvcm1TZXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXl9KltyLiRnZXRDb250YWluZWRDaGlsZHJlbl0oKXt5aWVsZCpnZXRDb250YWluZWRDaGlsZHJlbih0aGlzKX1bci4kaXNUcmFuc3BhcmVudF0oKXtyZXR1cm4hMH1bci4kaXNCaW5kYWJsZV0oKXtyZXR1cm4hMH1bci4kYWRkSFRNTF0oZSx0KXtjb25zdFthLG4saSxzXT10O3RoaXNbci4kZXh0cmFdLndpZHRoPU1hdGgubWF4KHRoaXNbci4kZXh0cmFdLndpZHRoLGEraSk7dGhpc1tyLiRleHRyYV0uaGVpZ2h0PU1hdGgubWF4KHRoaXNbci4kZXh0cmFdLmhlaWdodCxuK3MpO3RoaXNbci4kZXh0cmFdLmNoaWxkcmVuLnB1c2goZSl9W3IuJGdldEF2YWlsYWJsZVNwYWNlXSgpe3JldHVybiB0aGlzW3IuJGV4dHJhXS5hdmFpbGFibGVTcGFjZX1bci4kdG9IVE1MXShlKXtjb25zdCB0PSgwLHMudG9TdHlsZSkodGhpcywicG9zaXRpb24iKSxhPXtzdHlsZTp0LGlkOnRoaXNbci4kdWlkXSxjbGFzczpbInhmYUFyZWEiXX07KDAscy5pc1ByaW50T25seSkodGhpcykmJmEuY2xhc3MucHVzaCgieGZhUHJpbnRPbmx5Iik7dGhpcy5uYW1lJiYoYS54ZmFOYW1lPXRoaXMubmFtZSk7Y29uc3Qgbj1bXTt0aGlzW3IuJGV4dHJhXT17Y2hpbGRyZW46bix3aWR0aDowLGhlaWdodDowLGF2YWlsYWJsZVNwYWNlOmV9O2NvbnN0IGk9dGhpc1tyLiRjaGlsZHJlblRvSFRNTF0oe2ZpbHRlcjpuZXcgU2V0KFsiYXJlYSIsImRyYXciLCJmaWVsZCIsImV4Y2xHcm91cCIsInN1YmZvcm0iLCJzdWJmb3JtU2V0Il0pLGluY2x1ZGU6ITB9KTtpZighaS5zdWNjZXNzKXtpZihpLmlzQnJlYWsoKSlyZXR1cm4gaTtkZWxldGUgdGhpc1tyLiRleHRyYV07cmV0dXJuIGMuSFRNTFJlc3VsdC5GQUlMVVJFfXQud2lkdGg9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXNbci4kZXh0cmFdLndpZHRoKTt0LmhlaWdodD0oMCxzLm1lYXN1cmVUb1N0cmluZykodGhpc1tyLiRleHRyYV0uaGVpZ2h0KTtjb25zdCBvPXtuYW1lOiJkaXYiLGF0dHJpYnV0ZXM6YSxjaGlsZHJlbjpufSxsPVt0aGlzLngsdGhpcy55LHRoaXNbci4kZXh0cmFdLndpZHRoLHRoaXNbci4kZXh0cmFdLmhlaWdodF07ZGVsZXRlIHRoaXNbci4kZXh0cmFdO3JldHVybiBjLkhUTUxSZXN1bHQuc3VjY2VzcyhvLGwpfX1jbGFzcyBBc3Npc3QgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJhc3Npc3QiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMucm9sZT1lLnJvbGV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLnNwZWFrPW51bGw7dGhpcy50b29sVGlwPW51bGx9W3IuJHRvSFRNTF0oKXtyZXR1cm4gdGhpcy50b29sVGlwPy5bci4kY29udGVudF18fG51bGx9fWNsYXNzIEJhcmNvZGUgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJiYXJjb2RlIiwhMCk7dGhpcy5jaGFyRW5jb2Rpbmc9KDAsYy5nZXRLZXl3b3JkKSh7ZGF0YTplLmNoYXJFbmNvZGluZz9lLmNoYXJFbmNvZGluZy50b0xvd2VyQ2FzZSgpOiIiLGRlZmF1bHRWYWx1ZToiIix2YWxpZGF0ZTplPT5bInV0Zi04IiwiYmlnLWZpdmUiLCJmb250c3BlY2lmaWMiLCJnYmsiLCJnYi0xODAzMCIsImdiLTIzMTIiLCJrc2MtNTYwMSIsIm5vbmUiLCJzaGlmdC1qaXMiLCJ1Y3MtMiIsInV0Zi0xNiJdLmluY2x1ZGVzKGUpfHxlLm1hdGNoKC9pc28tODg1OS1cZHsyfS8pfSk7dGhpcy5jaGVja3N1bT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5jaGVja3N1bSxbIm5vbmUiLCIxbW9kMTAiLCIxbW9kMTBfMW1vZDExIiwiMm1vZDEwIiwiYXV0byJdKTt0aGlzLmRhdGFDb2x1bW5Db3VudD0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUuZGF0YUNvbHVtbkNvdW50LGRlZmF1bHRWYWx1ZTotMSx2YWxpZGF0ZTplPT5lPj0wfSk7dGhpcy5kYXRhTGVuZ3RoPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5kYXRhTGVuZ3RoLGRlZmF1bHRWYWx1ZTotMSx2YWxpZGF0ZTplPT5lPj0wfSk7dGhpcy5kYXRhUHJlcD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5kYXRhUHJlcCxbIm5vbmUiLCJmbGF0ZUNvbXByZXNzIl0pO3RoaXMuZGF0YVJvd0NvdW50PSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5kYXRhUm93Q291bnQsZGVmYXVsdFZhbHVlOi0xLHZhbGlkYXRlOmU9PmU+PTB9KTt0aGlzLmVuZENoYXI9ZS5lbmRDaGFyfHwiIjt0aGlzLmVycm9yQ29ycmVjdGlvbkxldmVsPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5lcnJvckNvcnJlY3Rpb25MZXZlbCxkZWZhdWx0VmFsdWU6LTEsdmFsaWRhdGU6ZT0+ZT49MCYmZTw9OH0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5tb2R1bGVIZWlnaHQ9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5tb2R1bGVIZWlnaHQsIjVtbSIpO3RoaXMubW9kdWxlV2lkdGg9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5tb2R1bGVXaWR0aCwiMC4yNW1tIik7dGhpcy5wcmludENoZWNrRGlnaXQ9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnByaW50Q2hlY2tEaWdpdCxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZX0pO3RoaXMucm93Q29sdW1uUmF0aW89KDAsYy5nZXRSYXRpbykoZS5yb3dDb2x1bW5SYXRpbyk7dGhpcy5zdGFydENoYXI9ZS5zdGFydENoYXJ8fCIiO3RoaXMudGV4dExvY2F0aW9uPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnRleHRMb2NhdGlvbixbImJlbG93IiwiYWJvdmUiLCJhYm92ZUVtYmVkZGVkIiwiYmVsb3dFbWJlZGRlZCIsIm5vbmUiXSk7dGhpcy50cnVuY2F0ZT0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUudHJ1bmNhdGUsZGVmYXVsdFZhbHVlOjAsdmFsaWRhdGU6ZT0+MT09PWV9KTt0aGlzLnR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHlwZT9lLnR5cGUudG9Mb3dlckNhc2UoKToiIixbImF6dGVjIiwiY29kYWJhciIsImNvZGUyb2Y1aW5kdXN0cmlhbCIsImNvZGUyb2Y1aW50ZXJsZWF2ZWQiLCJjb2RlMm9mNW1hdHJpeCIsImNvZGUyb2Y1c3RhbmRhcmQiLCJjb2RlM29mOSIsImNvZGUzb2Y5ZXh0ZW5kZWQiLCJjb2RlMTEiLCJjb2RlNDkiLCJjb2RlOTMiLCJjb2RlMTI4IiwiY29kZTEyOGEiLCJjb2RlMTI4YiIsImNvZGUxMjhjIiwiY29kZTEyOHNzY2MiLCJkYXRhbWF0cml4IiwiZWFuOCIsImVhbjhhZGQyIiwiZWFuOGFkZDUiLCJlYW4xMyIsImVhbjEzYWRkMiIsImVhbjEzYWRkNSIsImVhbjEzcHdjZCIsImZpbSIsImxvZ21hcnMiLCJtYXhpY29kZSIsIm1zaSIsInBkZjQxNyIsInBkZjQxN21hY3JvIiwicGxlc3NleSIsInBvc3RhdXNjdXN0MiIsInBvc3RhdXNjdXN0MyIsInBvc3RhdXNyZXBseXBhaWQiLCJwb3N0YXVzc3RhbmRhcmQiLCJwb3N0dWtybTRzY2MiLCJwb3N0dXNkcGJjIiwicG9zdHVzaW1iIiwicG9zdHVzc3RhbmRhcmQiLCJwb3N0dXM1emlwIiwicXJjb2RlIiwicmZpZCIsInJzczE0IiwicnNzMTRleHBhbmRlZCIsInJzczE0bGltaXRlZCIsInJzczE0c3RhY2tlZCIsInJzczE0c3RhY2tlZG9tbmkiLCJyc3MxNHRydW5jYXRlZCIsInRlbGVwZW4iLCJ1Y2MxMjgiLCJ1Y2MxMjhyYW5kb20iLCJ1Y2MxMjhzc2NjIiwidXBjYSIsInVwY2FhZGQyIiwidXBjYWFkZDUiLCJ1cGNhcHdjZCIsInVwY2UiLCJ1cGNlYWRkMiIsInVwY2VhZGQ1IiwidXBjZWFuMiIsInVwY2VhbjUiLCJ1cHNtYXhpY29kZSJdKTt0aGlzLnVwc01vZGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudXBzTW9kZSxbInVzQ2FycmllciIsImludGVybmF0aW9uYWxDYXJyaWVyIiwic2VjdXJlU3ltYm9sIiwic3RhbmRhcmRTeW1ib2wiXSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMud2lkZU5hcnJvd1JhdGlvPSgwLGMuZ2V0UmF0aW8pKGUud2lkZU5hcnJvd1JhdGlvKTt0aGlzLmVuY3J5cHQ9bnVsbDt0aGlzLmV4dHJhcz1udWxsfX1jbGFzcyBCaW5kIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiYmluZCIsITApO3RoaXMubWF0Y2g9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUubWF0Y2gsWyJvbmNlIiwiZGF0YVJlZiIsImdsb2JhbCIsIm5vbmUiXSk7dGhpcy5yZWY9ZS5yZWZ8fCIiO3RoaXMucGljdHVyZT1udWxsfX1jbGFzcyBCaW5kSXRlbXMgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJiaW5kSXRlbXMiKTt0aGlzLmNvbm5lY3Rpb249ZS5jb25uZWN0aW9ufHwiIjt0aGlzLmxhYmVsUmVmPWUubGFiZWxSZWZ8fCIiO3RoaXMucmVmPWUucmVmfHwiIjt0aGlzLnZhbHVlUmVmPWUudmFsdWVSZWZ8fCIifX10LkJpbmRJdGVtcz1CaW5kSXRlbXM7Y2xhc3MgQm9va2VuZCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImJvb2tlbmQiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubGVhZGVyPWUubGVhZGVyfHwiIjt0aGlzLnRyYWlsZXI9ZS50cmFpbGVyfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIEJvb2xlYW5FbGVtZW50IGV4dGVuZHMgby5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJib29sZWFuIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9W3IuJHRvSFRNTF0oZSl7cmV0dXJuIHZhbHVlVG9IdG1sKDE9PT10aGlzW3IuJGNvbnRlbnRdPyIxIjoiMCIpfX1jbGFzcyBCb3JkZXIgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJib3JkZXIiLCEwKTt0aGlzLmJyZWFrPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmJyZWFrLFsiY2xvc2UiLCJvcGVuIl0pO3RoaXMuaGFuZD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5oYW5kLFsiZXZlbiIsImxlZnQiLCJyaWdodCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMucHJlc2VuY2U9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUucHJlc2VuY2UsWyJ2aXNpYmxlIiwiaGlkZGVuIiwiaW5hY3RpdmUiLCJpbnZpc2libGUiXSk7dGhpcy5yZWxldmFudD0oMCxjLmdldFJlbGV2YW50KShlLnJlbGV2YW50KTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jb3JuZXI9bmV3IG8uWEZBT2JqZWN0QXJyYXkoNCk7dGhpcy5lZGdlPW5ldyBvLlhGQU9iamVjdEFycmF5KDQpO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5maWxsPW51bGw7dGhpcy5tYXJnaW49bnVsbH1bci4kZ2V0RXh0cmFdKCl7aWYoIXRoaXNbci4kZXh0cmFdKXtjb25zdCBlPXRoaXMuZWRnZS5jaGlsZHJlbi5zbGljZSgpO2lmKGUubGVuZ3RoPDQpe2NvbnN0IHQ9ZS5hdCgtMSl8fG5ldyBFZGdlKHt9KTtmb3IobGV0IGE9ZS5sZW5ndGg7YTw0O2ErKyllLnB1c2godCl9Y29uc3QgdD1lLm1hcCgoZT0+ZS50aGlja25lc3MpKSxhPVswLDAsMCwwXTtpZih0aGlzLm1hcmdpbil7YVswXT10aGlzLm1hcmdpbi50b3BJbnNldDthWzFdPXRoaXMubWFyZ2luLnJpZ2h0SW5zZXQ7YVsyXT10aGlzLm1hcmdpbi5ib3R0b21JbnNldDthWzNdPXRoaXMubWFyZ2luLmxlZnRJbnNldH10aGlzW3IuJGV4dHJhXT17d2lkdGhzOnQsaW5zZXRzOmEsZWRnZXM6ZX19cmV0dXJuIHRoaXNbci4kZXh0cmFdfVtyLiR0b1N0eWxlXSgpe2NvbnN0e2VkZ2VzOmV9PXRoaXNbci4kZ2V0RXh0cmFdKCksdD1lLm1hcCgoZT0+e2NvbnN0IHQ9ZVtyLiR0b1N0eWxlXSgpO3QuY29sb3J8fD0iIzAwMDAwMCI7cmV0dXJuIHR9KSksYT1PYmplY3QuY3JlYXRlKG51bGwpO3RoaXMubWFyZ2luJiZPYmplY3QuYXNzaWduKGEsdGhpcy5tYXJnaW5bci4kdG9TdHlsZV0oKSk7InZpc2libGUiPT09dGhpcy5maWxsPy5wcmVzZW5jZSYmT2JqZWN0LmFzc2lnbihhLHRoaXMuZmlsbFtyLiR0b1N0eWxlXSgpKTtpZih0aGlzLmNvcm5lci5jaGlsZHJlbi5zb21lKChlPT4wIT09ZS5yYWRpdXMpKSl7Y29uc3QgZT10aGlzLmNvcm5lci5jaGlsZHJlbi5tYXAoKGU9PmVbci4kdG9TdHlsZV0oKSkpO2lmKDI9PT1lLmxlbmd0aHx8Mz09PWUubGVuZ3RoKXtjb25zdCB0PWUuYXQoLTEpO2ZvcihsZXQgYT1lLmxlbmd0aDthPDQ7YSsrKWUucHVzaCh0KX1hLmJvcmRlclJhZGl1cz1lLm1hcCgoZT0+ZS5yYWRpdXMpKS5qb2luKCIgIil9c3dpdGNoKHRoaXMucHJlc2VuY2Upe2Nhc2UiaW52aXNpYmxlIjpjYXNlImhpZGRlbiI6YS5ib3JkZXJTdHlsZT0iIjticmVhaztjYXNlImluYWN0aXZlIjphLmJvcmRlclN0eWxlPSJub25lIjticmVhaztkZWZhdWx0OmEuYm9yZGVyU3R5bGU9dC5tYXAoKGU9PmUuc3R5bGUpKS5qb2luKCIgIil9YS5ib3JkZXJXaWR0aD10Lm1hcCgoZT0+ZS53aWR0aCkpLmpvaW4oIiAiKTthLmJvcmRlckNvbG9yPXQubWFwKChlPT5lLmNvbG9yKSkuam9pbigiICIpO3JldHVybiBhfX1jbGFzcyBCcmVhayBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImJyZWFrIiwhMCk7dGhpcy5hZnRlcj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5hZnRlcixbImF1dG8iLCJjb250ZW50QXJlYSIsInBhZ2VBcmVhIiwicGFnZUV2ZW4iLCJwYWdlT2RkIl0pO3RoaXMuYWZ0ZXJUYXJnZXQ9ZS5hZnRlclRhcmdldHx8IiI7dGhpcy5iZWZvcmU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuYmVmb3JlLFsiYXV0byIsImNvbnRlbnRBcmVhIiwicGFnZUFyZWEiLCJwYWdlRXZlbiIsInBhZ2VPZGQiXSk7dGhpcy5iZWZvcmVUYXJnZXQ9ZS5iZWZvcmVUYXJnZXR8fCIiO3RoaXMuYm9va2VuZExlYWRlcj1lLmJvb2tlbmRMZWFkZXJ8fCIiO3RoaXMuYm9va2VuZFRyYWlsZXI9ZS5ib29rZW5kVHJhaWxlcnx8IiI7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm92ZXJmbG93TGVhZGVyPWUub3ZlcmZsb3dMZWFkZXJ8fCIiO3RoaXMub3ZlcmZsb3dUYXJnZXQ9ZS5vdmVyZmxvd1RhcmdldHx8IiI7dGhpcy5vdmVyZmxvd1RyYWlsZXI9ZS5vdmVyZmxvd1RyYWlsZXJ8fCIiO3RoaXMuc3RhcnROZXc9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnN0YXJ0TmV3LGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGx9fWNsYXNzIEJyZWFrQWZ0ZXIgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJicmVha0FmdGVyIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLmxlYWRlcj1lLmxlYWRlcnx8IiI7dGhpcy5zdGFydE5ldz0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUuc3RhcnROZXcsZGVmYXVsdFZhbHVlOjAsdmFsaWRhdGU6ZT0+MT09PWV9KTt0aGlzLnRhcmdldD1lLnRhcmdldHx8IiI7dGhpcy50YXJnZXRUeXBlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnRhcmdldFR5cGUsWyJhdXRvIiwiY29udGVudEFyZWEiLCJwYWdlQXJlYSJdKTt0aGlzLnRyYWlsZXI9ZS50cmFpbGVyfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5zY3JpcHQ9bnVsbH19Y2xhc3MgQnJlYWtCZWZvcmUgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJicmVha0JlZm9yZSIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5sZWFkZXI9ZS5sZWFkZXJ8fCIiO3RoaXMuc3RhcnROZXc9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnN0YXJ0TmV3LGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy50YXJnZXQ9ZS50YXJnZXR8fCIiO3RoaXMudGFyZ2V0VHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50YXJnZXRUeXBlLFsiYXV0byIsImNvbnRlbnRBcmVhIiwicGFnZUFyZWEiXSk7dGhpcy50cmFpbGVyPWUudHJhaWxlcnx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuc2NyaXB0PW51bGx9W3IuJHRvSFRNTF0oZSl7dGhpc1tyLiRleHRyYV09e307cmV0dXJuIGMuSFRNTFJlc3VsdC5GQUlMVVJFfX1jbGFzcyBCdXR0b24gZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJidXR0b24iLCEwKTt0aGlzLmhpZ2hsaWdodD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5oaWdobGlnaHQsWyJpbnZlcnRlZCIsIm5vbmUiLCJvdXRsaW5lIiwicHVzaCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmV4dHJhcz1udWxsfVtyLiR0b0hUTUxdKGUpe2NvbnN0IHQ9dGhpc1tyLiRnZXRQYXJlbnRdKClbci4kZ2V0UGFyZW50XSgpLGE9e25hbWU6ImJ1dHRvbiIsYXR0cmlidXRlczp7aWQ6dGhpc1tyLiR1aWRdLGNsYXNzOlsieGZhQnV0dG9uIl0sc3R5bGU6e319LGNoaWxkcmVuOltdfTtmb3IoY29uc3QgZSBvZiB0LmV2ZW50LmNoaWxkcmVuKXtpZigiY2xpY2siIT09ZS5hY3Rpdml0eXx8IWUuc2NyaXB0KWNvbnRpbnVlO2NvbnN0IHQ9KDAsdS5yZWNvdmVySnNVUkwpKGUuc2NyaXB0W3IuJGNvbnRlbnRdKTtpZighdCljb250aW51ZTtjb25zdCBuPSgwLHMuZml4VVJMKSh0LnVybCk7biYmYS5jaGlsZHJlbi5wdXNoKHtuYW1lOiJhIixhdHRyaWJ1dGVzOntpZDoibGluayIrdGhpc1tyLiR1aWRdLGhyZWY6bixuZXdXaW5kb3c6dC5uZXdXaW5kb3csY2xhc3M6WyJ4ZmFMaW5rIl0sc3R5bGU6e319LGNoaWxkcmVuOltdfSl9cmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKGEpfX1jbGFzcyBDYWxjdWxhdGUgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJjYWxjdWxhdGUiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMub3ZlcnJpZGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUub3ZlcnJpZGUsWyJkaXNhYmxlZCIsImVycm9yIiwiaWdub3JlIiwid2FybmluZyJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5leHRyYXM9bnVsbDt0aGlzLm1lc3NhZ2U9bnVsbDt0aGlzLnNjcmlwdD1udWxsfX1jbGFzcyBDYXB0aW9uIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiY2FwdGlvbiIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5wbGFjZW1lbnQ9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUucGxhY2VtZW50LFsibGVmdCIsImJvdHRvbSIsImlubGluZSIsInJpZ2h0IiwidG9wIl0pO3RoaXMucHJlc2VuY2U9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUucHJlc2VuY2UsWyJ2aXNpYmxlIiwiaGlkZGVuIiwiaW5hY3RpdmUiLCJpbnZpc2libGUiXSk7dGhpcy5yZXNlcnZlPU1hdGguY2VpbCgoMCxjLmdldE1lYXN1cmVtZW50KShlLnJlc2VydmUpKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5leHRyYXM9bnVsbDt0aGlzLmZvbnQ9bnVsbDt0aGlzLm1hcmdpbj1udWxsO3RoaXMucGFyYT1udWxsO3RoaXMudmFsdWU9bnVsbH1bci4kc2V0VmFsdWVdKGUpe19zZXRWYWx1ZSh0aGlzLGUpfVtyLiRnZXRFeHRyYV0oZSl7aWYoIXRoaXNbci4kZXh0cmFdKXtsZXR7d2lkdGg6dCxoZWlnaHQ6YX09ZTtzd2l0Y2godGhpcy5wbGFjZW1lbnQpe2Nhc2UibGVmdCI6Y2FzZSJyaWdodCI6Y2FzZSJpbmxpbmUiOnQ9dGhpcy5yZXNlcnZlPD0wP3Q6dGhpcy5yZXNlcnZlO2JyZWFrO2Nhc2UidG9wIjpjYXNlImJvdHRvbSI6YT10aGlzLnJlc2VydmU8PTA/YTp0aGlzLnJlc2VydmV9dGhpc1tyLiRleHRyYV09KDAscy5sYXlvdXROb2RlKSh0aGlzLHt3aWR0aDp0LGhlaWdodDphfSl9cmV0dXJuIHRoaXNbci4kZXh0cmFdfVtyLiR0b0hUTUxdKGUpe2lmKCF0aGlzLnZhbHVlKXJldHVybiBjLkhUTUxSZXN1bHQuRU1QVFk7dGhpc1tyLiRwdXNoUGFyYV0oKTtjb25zdCB0PXRoaXMudmFsdWVbci4kdG9IVE1MXShlKS5odG1sO2lmKCF0KXt0aGlzW3IuJHBvcFBhcmFdKCk7cmV0dXJuIGMuSFRNTFJlc3VsdC5FTVBUWX1jb25zdCBhPXRoaXMucmVzZXJ2ZTtpZih0aGlzLnJlc2VydmU8PTApe2NvbnN0e3c6dCxoOmF9PXRoaXNbci4kZ2V0RXh0cmFdKGUpO3N3aXRjaCh0aGlzLnBsYWNlbWVudCl7Y2FzZSJsZWZ0IjpjYXNlInJpZ2h0IjpjYXNlImlubGluZSI6dGhpcy5yZXNlcnZlPXQ7YnJlYWs7Y2FzZSJ0b3AiOmNhc2UiYm90dG9tIjp0aGlzLnJlc2VydmU9YX19Y29uc3Qgbj1bXTsic3RyaW5nIj09dHlwZW9mIHQ/bi5wdXNoKHtuYW1lOiIjdGV4dCIsdmFsdWU6dH0pOm4ucHVzaCh0KTtjb25zdCBpPSgwLHMudG9TdHlsZSkodGhpcywiZm9udCIsIm1hcmdpbiIsInZpc2liaWxpdHkiKTtzd2l0Y2godGhpcy5wbGFjZW1lbnQpe2Nhc2UibGVmdCI6Y2FzZSJyaWdodCI6dGhpcy5yZXNlcnZlPjAmJihpLndpZHRoPSgwLHMubWVhc3VyZVRvU3RyaW5nKSh0aGlzLnJlc2VydmUpKTticmVhaztjYXNlInRvcCI6Y2FzZSJib3R0b20iOnRoaXMucmVzZXJ2ZT4wJiYoaS5oZWlnaHQ9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMucmVzZXJ2ZSkpfSgwLHMuc2V0UGFyYSkodGhpcyxudWxsLHQpO3RoaXNbci4kcG9wUGFyYV0oKTt0aGlzLnJlc2VydmU9YTtyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImRpdiIsYXR0cmlidXRlczp7c3R5bGU6aSxjbGFzczpbInhmYUNhcHRpb24iXX0sY2hpbGRyZW46bn0pfX1jbGFzcyBDZXJ0aWZpY2F0ZSBleHRlbmRzIG8uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImNlcnRpZmljYXRlIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIENlcnRpZmljYXRlcyBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImNlcnRpZmljYXRlcyIsITApO3RoaXMuY3JlZGVudGlhbFNlcnZlclBvbGljeT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5jcmVkZW50aWFsU2VydmVyUG9saWN5LFsib3B0aW9uYWwiLCJyZXF1aXJlZCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXJsPWUudXJsfHwiIjt0aGlzLnVybFBvbGljeT1lLnVybFBvbGljeXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZW5jcnlwdGlvbj1udWxsO3RoaXMuaXNzdWVycz1udWxsO3RoaXMua2V5VXNhZ2U9bnVsbDt0aGlzLm9pZHM9bnVsbDt0aGlzLnNpZ25pbmc9bnVsbDt0aGlzLnN1YmplY3RETnM9bnVsbH19Y2xhc3MgQ2hlY2tCdXR0b24gZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJjaGVja0J1dHRvbiIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5tYXJrPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLm1hcmssWyJkZWZhdWx0IiwiY2hlY2siLCJjaXJjbGUiLCJjcm9zcyIsImRpYW1vbmQiLCJzcXVhcmUiLCJzdGFyIl0pO3RoaXMuc2hhcGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuc2hhcGUsWyJzcXVhcmUiLCJyb3VuZCJdKTt0aGlzLnNpemU9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5zaXplLCIxMHB0Iik7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuYm9yZGVyPW51bGw7dGhpcy5leHRyYXM9bnVsbDt0aGlzLm1hcmdpbj1udWxsfVtyLiR0b0hUTUxdKGUpe2NvbnN0IHQ9KDAscy50b1N0eWxlKSgibWFyZ2luIiksYT0oMCxzLm1lYXN1cmVUb1N0cmluZykodGhpcy5zaXplKTt0LndpZHRoPXQuaGVpZ2h0PWE7bGV0IG4saSxvO2NvbnN0IGw9dGhpc1tyLiRnZXRQYXJlbnRdKClbci4kZ2V0UGFyZW50XSgpLGg9bC5pdGVtcy5jaGlsZHJlbi5sZW5ndGgmJmwuaXRlbXMuY2hpbGRyZW5bMF1bci4kdG9IVE1MXSgpLmh0bWx8fFtdLHU9e29uOih2b2lkIDAhPT1oWzBdP2hbMF06Im9uIikudG9TdHJpbmcoKSxvZmY6KHZvaWQgMCE9PWhbMV0/aFsxXToib2ZmIikudG9TdHJpbmcoKX0sZD0obC52YWx1ZT8uW3IuJHRleHRdKCl8fCJvZmYiKT09PXUub258fHZvaWQgMCxmPWxbci4kZ2V0U3ViZm9ybVBhcmVudF0oKSxnPWxbci4kdWlkXTtsZXQgcDtpZihmIGluc3RhbmNlb2YgRXhjbEdyb3VwKXtvPWZbci4kdWlkXTtuPSJyYWRpbyI7aT0ieGZhUmFkaW8iO3A9ZltyLiRkYXRhXT8uW3IuJHVpZF18fGZbci4kdWlkXX1lbHNle249ImNoZWNrYm94IjtpPSJ4ZmFDaGVja2JveCI7cD1sW3IuJGRhdGFdPy5bci4kdWlkXXx8bFtyLiR1aWRdfWNvbnN0IG09e25hbWU6ImlucHV0IixhdHRyaWJ1dGVzOntjbGFzczpbaV0sc3R5bGU6dCxmaWVsZElkOmcsZGF0YUlkOnAsdHlwZTpuLGNoZWNrZWQ6ZCx4ZmFPbjp1Lm9uLHhmYU9mZjp1Lm9mZiwiYXJpYS1sYWJlbCI6YXJpYUxhYmVsKGwpLCJhcmlhLXJlcXVpcmVkIjohMX19O28mJihtLmF0dHJpYnV0ZXMubmFtZT1vKTtpZihpc1JlcXVpcmVkKGwpKXttLmF0dHJpYnV0ZXNbImFyaWEtcmVxdWlyZWQiXT0hMDttLmF0dHJpYnV0ZXMucmVxdWlyZWQ9ITB9cmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKHtuYW1lOiJsYWJlbCIsYXR0cmlidXRlczp7Y2xhc3M6WyJ4ZmFMYWJlbCJdfSxjaGlsZHJlbjpbbV19KX19Y2xhc3MgQ2hvaWNlTGlzdCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImNob2ljZUxpc3QiLCEwKTt0aGlzLmNvbW1pdE9uPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmNvbW1pdE9uLFsic2VsZWN0IiwiZXhpdCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMub3Blbj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5vcGVuLFsidXNlckNvbnRyb2wiLCJhbHdheXMiLCJtdWx0aVNlbGVjdCIsIm9uRW50cnkiXSk7dGhpcy50ZXh0RW50cnk9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnRleHRFbnRyeSxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZX0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmJvcmRlcj1udWxsO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5tYXJnaW49bnVsbH1bci4kdG9IVE1MXShlKXtjb25zdCB0PSgwLHMudG9TdHlsZSkodGhpcywiYm9yZGVyIiwibWFyZ2luIiksYT10aGlzW3IuJGdldFBhcmVudF0oKVtyLiRnZXRQYXJlbnRdKCksbj17Zm9udFNpemU6YGNhbGMoJHthLmZvbnQ/LnNpemV8fDEwfXB4ICogdmFyKC0tc2NhbGUtZmFjdG9yKSlgfSxpPVtdO2lmKGEuaXRlbXMuY2hpbGRyZW4ubGVuZ3RoPjApe2NvbnN0IGU9YS5pdGVtcztsZXQgdD0wLHM9MDtpZigyPT09ZS5jaGlsZHJlbi5sZW5ndGgpe3Q9ZS5jaGlsZHJlblswXS5zYXZlO3M9MS10fWNvbnN0IG89ZS5jaGlsZHJlblt0XVtyLiR0b0hUTUxdKCkuaHRtbCxjPWUuY2hpbGRyZW5bc11bci4kdG9IVE1MXSgpLmh0bWw7bGV0IGw9ITE7Y29uc3QgaD1hLnZhbHVlPy5bci4kdGV4dF0oKXx8IiI7Zm9yKGxldCBlPTAsdD1vLmxlbmd0aDtlPHQ7ZSsrKXtjb25zdCB0PXtuYW1lOiJvcHRpb24iLGF0dHJpYnV0ZXM6e3ZhbHVlOmNbZV18fG9bZV0sc3R5bGU6bn0sdmFsdWU6b1tlXX07Y1tlXT09PWgmJih0LmF0dHJpYnV0ZXMuc2VsZWN0ZWQ9bD0hMCk7aS5wdXNoKHQpfWx8fGkuc3BsaWNlKDAsMCx7bmFtZToib3B0aW9uIixhdHRyaWJ1dGVzOntoaWRkZW46ITAsc2VsZWN0ZWQ6ITB9LHZhbHVlOiIgIn0pfWNvbnN0IG89e2NsYXNzOlsieGZhU2VsZWN0Il0sZmllbGRJZDphW3IuJHVpZF0sZGF0YUlkOmFbci4kZGF0YV0/LltyLiR1aWRdfHxhW3IuJHVpZF0sc3R5bGU6dCwiYXJpYS1sYWJlbCI6YXJpYUxhYmVsKGEpLCJhcmlhLXJlcXVpcmVkIjohMX07aWYoaXNSZXF1aXJlZChhKSl7b1siYXJpYS1yZXF1aXJlZCJdPSEwO28ucmVxdWlyZWQ9ITB9Im11bHRpU2VsZWN0Ij09PXRoaXMub3BlbiYmKG8ubXVsdGlwbGU9ITApO3JldHVybiBjLkhUTUxSZXN1bHQuc3VjY2Vzcyh7bmFtZToibGFiZWwiLGF0dHJpYnV0ZXM6e2NsYXNzOlsieGZhTGFiZWwiXX0sY2hpbGRyZW46W3tuYW1lOiJzZWxlY3QiLGNoaWxkcmVuOmksYXR0cmlidXRlczpvfV19KX19Y2xhc3MgQ29sb3IgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJjb2xvciIsITApO3RoaXMuY1NwYWNlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmNTcGFjZSxbIlNSR0IiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy52YWx1ZT1lLnZhbHVlPygwLGMuZ2V0Q29sb3IpKGUudmFsdWUpOiIiO3RoaXMuZXh0cmFzPW51bGx9W3IuJGhhc1NldHRhYmxlVmFsdWVdKCl7cmV0dXJuITF9W3IuJHRvU3R5bGVdKCl7cmV0dXJuIHRoaXMudmFsdWU/bC5VdGlsLm1ha2VIZXhDb2xvcih0aGlzLnZhbHVlLnIsdGhpcy52YWx1ZS5nLHRoaXMudmFsdWUuYik6bnVsbH19Y2xhc3MgQ29tYiBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImNvbWIiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubnVtYmVyT2ZDZWxscz0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUubnVtYmVyT2ZDZWxscyxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT5lPj0wfSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifX1jbGFzcyBDb25uZWN0IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiY29ubmVjdCIsITApO3RoaXMuY29ubmVjdGlvbj1lLmNvbm5lY3Rpb258fCIiO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5yZWY9ZS5yZWZ8fCIiO3RoaXMudXNhZ2U9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudXNhZ2UsWyJleHBvcnRBbmRJbXBvcnQiLCJleHBvcnRPbmx5IiwiaW1wb3J0T25seSJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5waWN0dXJlPW51bGx9fWNsYXNzIENvbnRlbnRBcmVhIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiY29udGVudEFyZWEiLCEwKTt0aGlzLmg9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5oKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMucmVsZXZhbnQ9KDAsYy5nZXRSZWxldmFudCkoZS5yZWxldmFudCk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMudz0oMCxjLmdldE1lYXN1cmVtZW50KShlLncpO3RoaXMueD0oMCxjLmdldE1lYXN1cmVtZW50KShlLngsIjBwdCIpO3RoaXMueT0oMCxjLmdldE1lYXN1cmVtZW50KShlLnksIjBwdCIpO3RoaXMuZGVzYz1udWxsO3RoaXMuZXh0cmFzPW51bGx9W3IuJHRvSFRNTF0oZSl7Y29uc3QgdD17bGVmdDooMCxzLm1lYXN1cmVUb1N0cmluZykodGhpcy54KSx0b3A6KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMueSksd2lkdGg6KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMudyksaGVpZ2h0OigwLHMubWVhc3VyZVRvU3RyaW5nKSh0aGlzLmgpfSxhPVsieGZhQ29udGVudGFyZWEiXTsoMCxzLmlzUHJpbnRPbmx5KSh0aGlzKSYmYS5wdXNoKCJ4ZmFQcmludE9ubHkiKTtyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImRpdiIsY2hpbGRyZW46W10sYXR0cmlidXRlczp7c3R5bGU6dCxjbGFzczphLGlkOnRoaXNbci4kdWlkXX19KX19Y2xhc3MgQ29ybmVyIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiY29ybmVyIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLmludmVydGVkPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5pbnZlcnRlZCxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZX0pO3RoaXMuam9pbj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5qb2luLFsic3F1YXJlIiwicm91bmQiXSk7dGhpcy5wcmVzZW5jZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5wcmVzZW5jZSxbInZpc2libGUiLCJoaWRkZW4iLCJpbmFjdGl2ZSIsImludmlzaWJsZSJdKTt0aGlzLnJhZGl1cz0oMCxjLmdldE1lYXN1cmVtZW50KShlLnJhZGl1cyk7dGhpcy5zdHJva2U9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuc3Ryb2tlLFsic29saWQiLCJkYXNoRG90IiwiZGFzaERvdERvdCIsImRhc2hlZCIsImRvdHRlZCIsImVtYm9zc2VkIiwiZXRjaGVkIiwibG93ZXJlZCIsInJhaXNlZCJdKTt0aGlzLnRoaWNrbmVzcz0oMCxjLmdldE1lYXN1cmVtZW50KShlLnRoaWNrbmVzcywiMC41cHQiKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jb2xvcj1udWxsO3RoaXMuZXh0cmFzPW51bGx9W3IuJHRvU3R5bGVdKCl7Y29uc3QgZT0oMCxzLnRvU3R5bGUpKHRoaXMsInZpc2liaWxpdHkiKTtlLnJhZGl1cz0oMCxzLm1lYXN1cmVUb1N0cmluZykoInNxdWFyZSI9PT10aGlzLmpvaW4/MDp0aGlzLnJhZGl1cyk7cmV0dXJuIGV9fWNsYXNzIERhdGVFbGVtZW50IGV4dGVuZHMgby5Db250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImRhdGUiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn1bci4kZmluYWxpemVdKCl7Y29uc3QgZT10aGlzW3IuJGNvbnRlbnRdLnRyaW0oKTt0aGlzW3IuJGNvbnRlbnRdPWU/bmV3IERhdGUoZSk6bnVsbH1bci4kdG9IVE1MXShlKXtyZXR1cm4gdmFsdWVUb0h0bWwodGhpc1tyLiRjb250ZW50XT90aGlzW3IuJGNvbnRlbnRdLnRvU3RyaW5nKCk6IiIpfX1jbGFzcyBEYXRlVGltZSBleHRlbmRzIG8uQ29udGVudE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJkYXRlVGltZSIpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifVtyLiRmaW5hbGl6ZV0oKXtjb25zdCBlPXRoaXNbci4kY29udGVudF0udHJpbSgpO3RoaXNbci4kY29udGVudF09ZT9uZXcgRGF0ZShlKTpudWxsfVtyLiR0b0hUTUxdKGUpe3JldHVybiB2YWx1ZVRvSHRtbCh0aGlzW3IuJGNvbnRlbnRdP3RoaXNbci4kY29udGVudF0udG9TdHJpbmcoKToiIil9fWNsYXNzIERhdGVUaW1lRWRpdCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImRhdGVUaW1lRWRpdCIsITApO3RoaXMuaFNjcm9sbFBvbGljeT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5oU2Nyb2xsUG9saWN5LFsiYXV0byIsIm9mZiIsIm9uIl0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5waWNrZXI9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUucGlja2VyLFsiaG9zdCIsIm5vbmUiXSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuYm9yZGVyPW51bGw7dGhpcy5jb21iPW51bGw7dGhpcy5leHRyYXM9bnVsbDt0aGlzLm1hcmdpbj1udWxsfVtyLiR0b0hUTUxdKGUpe2NvbnN0IHQ9KDAscy50b1N0eWxlKSh0aGlzLCJib3JkZXIiLCJmb250IiwibWFyZ2luIiksYT10aGlzW3IuJGdldFBhcmVudF0oKVtyLiRnZXRQYXJlbnRdKCksbj17bmFtZToiaW5wdXQiLGF0dHJpYnV0ZXM6e3R5cGU6InRleHQiLGZpZWxkSWQ6YVtyLiR1aWRdLGRhdGFJZDphW3IuJGRhdGFdPy5bci4kdWlkXXx8YVtyLiR1aWRdLGNsYXNzOlsieGZhVGV4dGZpZWxkIl0sc3R5bGU6dCwiYXJpYS1sYWJlbCI6YXJpYUxhYmVsKGEpLCJhcmlhLXJlcXVpcmVkIjohMX19O2lmKGlzUmVxdWlyZWQoYSkpe24uYXR0cmlidXRlc1siYXJpYS1yZXF1aXJlZCJdPSEwO24uYXR0cmlidXRlcy5yZXF1aXJlZD0hMH1yZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImxhYmVsIixhdHRyaWJ1dGVzOntjbGFzczpbInhmYUxhYmVsIl19LGNoaWxkcmVuOltuXX0pfX1jbGFzcyBEZWNpbWFsIGV4dGVuZHMgby5Db250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImRlY2ltYWwiKTt0aGlzLmZyYWNEaWdpdHM9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmZyYWNEaWdpdHMsZGVmYXVsdFZhbHVlOjIsdmFsaWRhdGU6ZT0+ITB9KTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubGVhZERpZ2l0cz0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUubGVhZERpZ2l0cyxkZWZhdWx0VmFsdWU6LTEsdmFsaWRhdGU6ZT0+ITB9KTt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9W3IuJGZpbmFsaXplXSgpe2NvbnN0IGU9cGFyc2VGbG9hdCh0aGlzW3IuJGNvbnRlbnRdLnRyaW0oKSk7dGhpc1tyLiRjb250ZW50XT1pc05hTihlKT9udWxsOmV9W3IuJHRvSFRNTF0oZSl7cmV0dXJuIHZhbHVlVG9IdG1sKG51bGwhPT10aGlzW3IuJGNvbnRlbnRdP3RoaXNbci4kY29udGVudF0udG9TdHJpbmcoKToiIil9fWNsYXNzIERlZmF1bHRVaSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImRlZmF1bHRVaSIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGx9fWNsYXNzIERlc2MgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJkZXNjIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5ib29sZWFuPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGF0ZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRhdGVUaW1lPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGVjaW1hbD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV4RGF0YT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmZsb2F0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuaW1hZ2U9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5pbnRlZ2VyPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMudGV4dD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnRpbWU9bmV3IG8uWEZBT2JqZWN0QXJyYXl9fWNsYXNzIERpZ2VzdE1ldGhvZCBleHRlbmRzIG8uT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImRpZ2VzdE1ldGhvZCIsWyIiLCJTSEExIiwiU0hBMjU2IiwiU0hBNTEyIiwiUklQRU1EMTYwIl0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifX1jbGFzcyBEaWdlc3RNZXRob2RzIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZGlnZXN0TWV0aG9kcyIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy50eXBlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnR5cGUsWyJvcHRpb25hbCIsInJlcXVpcmVkIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmRpZ2VzdE1ldGhvZD1uZXcgby5YRkFPYmplY3RBcnJheX19Y2xhc3MgRHJhdyBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImRyYXciLCEwKTt0aGlzLmFuY2hvclR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuYW5jaG9yVHlwZSxbInRvcExlZnQiLCJib3R0b21DZW50ZXIiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJtaWRkbGVDZW50ZXIiLCJtaWRkbGVMZWZ0IiwibWlkZGxlUmlnaHQiLCJ0b3BDZW50ZXIiLCJ0b3BSaWdodCJdKTt0aGlzLmNvbFNwYW49KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmNvbFNwYW4sZGVmYXVsdFZhbHVlOjEsdmFsaWRhdGU6ZT0+ZT49MXx8LTE9PT1lfSk7dGhpcy5oPWUuaD8oMCxjLmdldE1lYXN1cmVtZW50KShlLmgpOiIiO3RoaXMuaEFsaWduPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmhBbGlnbixbImxlZnQiLCJjZW50ZXIiLCJqdXN0aWZ5IiwianVzdGlmeUFsbCIsInJhZGl4IiwicmlnaHQiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLmxvY2FsZT1lLmxvY2FsZXx8IiI7dGhpcy5tYXhIPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWF4SCwiMHB0Iik7dGhpcy5tYXhXPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWF4VywiMHB0Iik7dGhpcy5taW5IPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWluSCwiMHB0Iik7dGhpcy5taW5XPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWluVywiMHB0Iik7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy5wcmVzZW5jZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5wcmVzZW5jZSxbInZpc2libGUiLCJoaWRkZW4iLCJpbmFjdGl2ZSIsImludmlzaWJsZSJdKTt0aGlzLnJlbGV2YW50PSgwLGMuZ2V0UmVsZXZhbnQpKGUucmVsZXZhbnQpO3RoaXMucm90YXRlPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5yb3RhdGUsZGVmYXVsdFZhbHVlOjAsdmFsaWRhdGU6ZT0+ZSU5MD09MH0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLnc9ZS53PygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUudyk6IiI7dGhpcy54PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUueCwiMHB0Iik7dGhpcy55PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUueSwiMHB0Iik7dGhpcy5hc3Npc3Q9bnVsbDt0aGlzLmJvcmRlcj1udWxsO3RoaXMuY2FwdGlvbj1udWxsO3RoaXMuZGVzYz1udWxsO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5mb250PW51bGw7dGhpcy5rZWVwPW51bGw7dGhpcy5tYXJnaW49bnVsbDt0aGlzLnBhcmE9bnVsbDt0aGlzLnRyYXZlcnNhbD1udWxsO3RoaXMudWk9bnVsbDt0aGlzLnZhbHVlPW51bGw7dGhpcy5zZXRQcm9wZXJ0eT1uZXcgby5YRkFPYmplY3RBcnJheX1bci4kc2V0VmFsdWVdKGUpe19zZXRWYWx1ZSh0aGlzLGUpfVtyLiR0b0hUTUxdKGUpe3NldFRhYkluZGV4KHRoaXMpO2lmKCJoaWRkZW4iPT09dGhpcy5wcmVzZW5jZXx8ImluYWN0aXZlIj09PXRoaXMucHJlc2VuY2UpcmV0dXJuIGMuSFRNTFJlc3VsdC5FTVBUWTsoMCxzLmZpeERpbWVuc2lvbnMpKHRoaXMpO3RoaXNbci4kcHVzaFBhcmFdKCk7Y29uc3QgdD10aGlzLncsYT10aGlzLmgse3c6bixoOm8saXNCcm9rZW46bH09KDAscy5sYXlvdXROb2RlKSh0aGlzLGUpO2lmKG4mJiIiPT09dGhpcy53KXtpZihsJiZ0aGlzW3IuJGdldFN1YmZvcm1QYXJlbnRdKClbci4kaXNUaGVyZU1vcmVXaWR0aF0oKSl7dGhpc1tyLiRwb3BQYXJhXSgpO3JldHVybiBjLkhUTUxSZXN1bHQuRkFJTFVSRX10aGlzLnc9bn1vJiYiIj09PXRoaXMuaCYmKHRoaXMuaD1vKTtzZXRGaXJzdFVuc3BsaXR0YWJsZSh0aGlzKTtpZighKDAsaS5jaGVja0RpbWVuc2lvbnMpKHRoaXMsZSkpe3RoaXMudz10O3RoaXMuaD1hO3RoaXNbci4kcG9wUGFyYV0oKTtyZXR1cm4gYy5IVE1MUmVzdWx0LkZBSUxVUkV9dW5zZXRGaXJzdFVuc3BsaXR0YWJsZSh0aGlzKTtjb25zdCBoPSgwLHMudG9TdHlsZSkodGhpcywiZm9udCIsImhBbGlnbiIsImRpbWVuc2lvbnMiLCJwb3NpdGlvbiIsInByZXNlbmNlIiwicm90YXRlIiwiYW5jaG9yVHlwZSIsImJvcmRlciIsIm1hcmdpbiIpOygwLHMuc2V0TWluTWF4RGltZW5zaW9ucykodGhpcyxoKTtpZihoLm1hcmdpbil7aC5wYWRkaW5nPWgubWFyZ2luO2RlbGV0ZSBoLm1hcmdpbn1jb25zdCB1PVsieGZhRHJhdyJdO3RoaXMuZm9udCYmdS5wdXNoKCJ4ZmFGb250Iik7KDAscy5pc1ByaW50T25seSkodGhpcykmJnUucHVzaCgieGZhUHJpbnRPbmx5Iik7Y29uc3QgZD17c3R5bGU6aCxpZDp0aGlzW3IuJHVpZF0sY2xhc3M6dX07dGhpcy5uYW1lJiYoZC54ZmFOYW1lPXRoaXMubmFtZSk7Y29uc3QgZj17bmFtZToiZGl2IixhdHRyaWJ1dGVzOmQsY2hpbGRyZW46W119O2FwcGx5QXNzaXN0KHRoaXMsZCk7Y29uc3QgZz0oMCxzLmNvbXB1dGVCYm94KSh0aGlzLGYsZSkscD10aGlzLnZhbHVlP3RoaXMudmFsdWVbci4kdG9IVE1MXShlKS5odG1sOm51bGw7aWYobnVsbD09PXApe3RoaXMudz10O3RoaXMuaD1hO3RoaXNbci4kcG9wUGFyYV0oKTtyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3MoKDAscy5jcmVhdGVXcmFwcGVyKSh0aGlzLGYpLGcpfWYuY2hpbGRyZW4ucHVzaChwKTsoMCxzLnNldFBhcmEpKHRoaXMsaCxwKTt0aGlzLnc9dDt0aGlzLmg9YTt0aGlzW3IuJHBvcFBhcmFdKCk7cmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKCgwLHMuY3JlYXRlV3JhcHBlcikodGhpcyxmKSxnKX19Y2xhc3MgRWRnZSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImVkZ2UiLCEwKTt0aGlzLmNhcD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5jYXAsWyJzcXVhcmUiLCJidXR0Iiwicm91bmQiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnByZXNlbmNlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnByZXNlbmNlLFsidmlzaWJsZSIsImhpZGRlbiIsImluYWN0aXZlIiwiaW52aXNpYmxlIl0pO3RoaXMuc3Ryb2tlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnN0cm9rZSxbInNvbGlkIiwiZGFzaERvdCIsImRhc2hEb3REb3QiLCJkYXNoZWQiLCJkb3R0ZWQiLCJlbWJvc3NlZCIsImV0Y2hlZCIsImxvd2VyZWQiLCJyYWlzZWQiXSk7dGhpcy50aGlja25lc3M9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS50aGlja25lc3MsIjAuNXB0Iik7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuY29sb3I9bnVsbDt0aGlzLmV4dHJhcz1udWxsfVtyLiR0b1N0eWxlXSgpe2NvbnN0IGU9KDAscy50b1N0eWxlKSh0aGlzLCJ2aXNpYmlsaXR5Iik7T2JqZWN0LmFzc2lnbihlLHtsaW5lY2FwOnRoaXMuY2FwLHdpZHRoOigwLHMubWVhc3VyZVRvU3RyaW5nKSh0aGlzLnRoaWNrbmVzcyksY29sb3I6dGhpcy5jb2xvcj90aGlzLmNvbG9yW3IuJHRvU3R5bGVdKCk6IiMwMDAwMDAiLHN0eWxlOiIifSk7aWYoInZpc2libGUiIT09dGhpcy5wcmVzZW5jZSllLnN0eWxlPSJub25lIjtlbHNlIHN3aXRjaCh0aGlzLnN0cm9rZSl7Y2FzZSJzb2xpZCI6ZS5zdHlsZT0ic29saWQiO2JyZWFrO2Nhc2UiZGFzaERvdCI6Y2FzZSJkYXNoRG90RG90IjpjYXNlImRhc2hlZCI6ZS5zdHlsZT0iZGFzaGVkIjticmVhaztjYXNlImRvdHRlZCI6ZS5zdHlsZT0iZG90dGVkIjticmVhaztjYXNlImVtYm9zc2VkIjplLnN0eWxlPSJyaWRnZSI7YnJlYWs7Y2FzZSJldGNoZWQiOmUuc3R5bGU9Imdyb292ZSI7YnJlYWs7Y2FzZSJsb3dlcmVkIjplLnN0eWxlPSJpbnNldCI7YnJlYWs7Y2FzZSJyYWlzZWQiOmUuc3R5bGU9Im91dHNldCJ9cmV0dXJuIGV9fWNsYXNzIEVuY29kaW5nIGV4dGVuZHMgby5PcHRpb25PYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZW5jb2RpbmciLFsiYWRiZS54NTA5LnJzYV9zaGExIiwiYWRiZS5wa2NzNy5kZXRhY2hlZCIsImFkYmUucGtjczcuc2hhMSJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgRW5jb2RpbmdzIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZW5jb2RpbmdzIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHlwZSxbIm9wdGlvbmFsIiwicmVxdWlyZWQiXSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZW5jb2Rpbmc9bmV3IG8uWEZBT2JqZWN0QXJyYXl9fWNsYXNzIEVuY3J5cHQgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJlbmNyeXB0IiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jZXJ0aWZpY2F0ZT1udWxsfX1jbGFzcyBFbmNyeXB0RGF0YSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImVuY3J5cHREYXRhIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm9wZXJhdGlvbj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5vcGVyYXRpb24sWyJlbmNyeXB0IiwiZGVjcnlwdCJdKTt0aGlzLnRhcmdldD1lLnRhcmdldHx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZmlsdGVyPW51bGw7dGhpcy5tYW5pZmVzdD1udWxsfX1jbGFzcyBFbmNyeXB0aW9uIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZW5jcnlwdGlvbiIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy50eXBlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnR5cGUsWyJvcHRpb25hbCIsInJlcXVpcmVkIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmNlcnRpZmljYXRlPW5ldyBvLlhGQU9iamVjdEFycmF5fX1jbGFzcyBFbmNyeXB0aW9uTWV0aG9kIGV4dGVuZHMgby5PcHRpb25PYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZW5jcnlwdGlvbk1ldGhvZCIsWyIiLCJBRVMyNTYtQ0JDIiwiVFJJUExFREVTLUNCQyIsIkFFUzEyOC1DQkMiLCJBRVMxOTItQ0JDIl0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifX1jbGFzcyBFbmNyeXB0aW9uTWV0aG9kcyBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImVuY3J5cHRpb25NZXRob2RzIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHlwZSxbIm9wdGlvbmFsIiwicmVxdWlyZWQiXSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZW5jcnlwdGlvbk1ldGhvZD1uZXcgby5YRkFPYmplY3RBcnJheX19Y2xhc3MgRXZlbnQgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJldmVudCIsITApO3RoaXMuYWN0aXZpdHk9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuYWN0aXZpdHksWyJjbGljayIsImNoYW5nZSIsImRvY0Nsb3NlIiwiZG9jUmVhZHkiLCJlbnRlciIsImV4aXQiLCJmdWxsIiwiaW5kZXhDaGFuZ2UiLCJpbml0aWFsaXplIiwibW91c2VEb3duIiwibW91c2VFbnRlciIsIm1vdXNlRXhpdCIsIm1vdXNlVXAiLCJwb3N0RXhlY3V0ZSIsInBvc3RPcGVuIiwicG9zdFByaW50IiwicG9zdFNhdmUiLCJwb3N0U2lnbiIsInBvc3RTdWJtaXQiLCJwcmVFeGVjdXRlIiwicHJlT3BlbiIsInByZVByaW50IiwicHJlU2F2ZSIsInByZVNpZ24iLCJwcmVTdWJtaXQiLCJyZWFkeSIsInZhbGlkYXRpb25TdGF0ZSJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubGlzdGVuPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmxpc3RlbixbInJlZk9ubHkiLCJyZWZBbmREZXNjZW5kZW50cyJdKTt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnJlZj1lLnJlZnx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5lbmNyeXB0RGF0YT1udWxsO3RoaXMuZXhlY3V0ZT1udWxsO3RoaXMuc2NyaXB0PW51bGw7dGhpcy5zaWduRGF0YT1udWxsO3RoaXMuc3VibWl0PW51bGx9fWNsYXNzIEV4RGF0YSBleHRlbmRzIG8uQ29udGVudE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJleERhdGEiKTt0aGlzLmNvbnRlbnRUeXBlPWUuY29udGVudFR5cGV8fCIiO3RoaXMuaHJlZj1lLmhyZWZ8fCIiO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5tYXhMZW5ndGg9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLm1heExlbmd0aCxkZWZhdWx0VmFsdWU6LTEsdmFsaWRhdGU6ZT0+ZT49LTF9KTt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnJpZD1lLnJpZHx8IiI7dGhpcy50cmFuc2ZlckVuY29kaW5nPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnRyYW5zZmVyRW5jb2RpbmcsWyJub25lIiwiYmFzZTY0IiwicGFja2FnZSJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9W3IuJGlzQ0RBVEFYbWxdKCl7cmV0dXJuInRleHQvaHRtbCI9PT10aGlzLmNvbnRlbnRUeXBlfVtyLiRvbkNoaWxkXShlKXtpZigidGV4dC9odG1sIj09PXRoaXMuY29udGVudFR5cGUmJmVbci4kbmFtZXNwYWNlSWRdPT09bi5OYW1lc3BhY2VJZHMueGh0bWwuaWQpe3RoaXNbci4kY29udGVudF09ZTtyZXR1cm4hMH1pZigidGV4dC94bWwiPT09dGhpcy5jb250ZW50VHlwZSl7dGhpc1tyLiRjb250ZW50XT1lO3JldHVybiEwfXJldHVybiExfVtyLiR0b0hUTUxdKGUpe3JldHVybiJ0ZXh0L2h0bWwiPT09dGhpcy5jb250ZW50VHlwZSYmdGhpc1tyLiRjb250ZW50XT90aGlzW3IuJGNvbnRlbnRdW3IuJHRvSFRNTF0oZSk6Yy5IVE1MUmVzdWx0LkVNUFRZfX1jbGFzcyBFeE9iamVjdCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImV4T2JqZWN0IiwhMCk7dGhpcy5hcmNoaXZlPWUuYXJjaGl2ZXx8IiI7dGhpcy5jbGFzc0lkPWUuY2xhc3NJZHx8IiI7dGhpcy5jb2RlQmFzZT1lLmNvZGVCYXNlfHwiIjt0aGlzLmNvZGVUeXBlPWUuY29kZVR5cGV8fCIiO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5ib29sZWFuPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGF0ZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRhdGVUaW1lPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGVjaW1hbD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV4RGF0YT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV4T2JqZWN0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZmxvYXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5pbWFnZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmludGVnZXI9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy50ZXh0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMudGltZT1uZXcgby5YRkFPYmplY3RBcnJheX19Y2xhc3MgRXhjbEdyb3VwIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZXhjbEdyb3VwIiwhMCk7dGhpcy5hY2Nlc3M9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuYWNjZXNzLFsib3BlbiIsIm5vbkludGVyYWN0aXZlIiwicHJvdGVjdGVkIiwicmVhZE9ubHkiXSk7dGhpcy5hY2Nlc3NLZXk9ZS5hY2Nlc3NLZXl8fCIiO3RoaXMuYW5jaG9yVHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5hbmNob3JUeXBlLFsidG9wTGVmdCIsImJvdHRvbUNlbnRlciIsImJvdHRvbUxlZnQiLCJib3R0b21SaWdodCIsIm1pZGRsZUNlbnRlciIsIm1pZGRsZUxlZnQiLCJtaWRkbGVSaWdodCIsInRvcENlbnRlciIsInRvcFJpZ2h0Il0pO3RoaXMuY29sU3Bhbj0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUuY29sU3BhbixkZWZhdWx0VmFsdWU6MSx2YWxpZGF0ZTplPT5lPj0xfHwtMT09PWV9KTt0aGlzLmg9ZS5oPygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUuaCk6IiI7dGhpcy5oQWxpZ249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuaEFsaWduLFsibGVmdCIsImNlbnRlciIsImp1c3RpZnkiLCJqdXN0aWZ5QWxsIiwicmFkaXgiLCJyaWdodCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubGF5b3V0PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmxheW91dCxbInBvc2l0aW9uIiwibHItdGIiLCJybC1yb3ciLCJybC10YiIsInJvdyIsInRhYmxlIiwidGIiXSk7dGhpcy5tYXhIPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWF4SCwiMHB0Iik7dGhpcy5tYXhXPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWF4VywiMHB0Iik7dGhpcy5taW5IPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWluSCwiMHB0Iik7dGhpcy5taW5XPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWluVywiMHB0Iik7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy5wcmVzZW5jZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5wcmVzZW5jZSxbInZpc2libGUiLCJoaWRkZW4iLCJpbmFjdGl2ZSIsImludmlzaWJsZSJdKTt0aGlzLnJlbGV2YW50PSgwLGMuZ2V0UmVsZXZhbnQpKGUucmVsZXZhbnQpO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLnc9ZS53PygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUudyk6IiI7dGhpcy54PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUueCwiMHB0Iik7dGhpcy55PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUueSwiMHB0Iik7dGhpcy5hc3Npc3Q9bnVsbDt0aGlzLmJpbmQ9bnVsbDt0aGlzLmJvcmRlcj1udWxsO3RoaXMuY2FsY3VsYXRlPW51bGw7dGhpcy5jYXB0aW9uPW51bGw7dGhpcy5kZXNjPW51bGw7dGhpcy5leHRyYXM9bnVsbDt0aGlzLm1hcmdpbj1udWxsO3RoaXMucGFyYT1udWxsO3RoaXMudHJhdmVyc2FsPW51bGw7dGhpcy52YWxpZGF0ZT1udWxsO3RoaXMuY29ubmVjdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV2ZW50PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZmllbGQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5zZXRQcm9wZXJ0eT1uZXcgby5YRkFPYmplY3RBcnJheX1bci4kaXNCaW5kYWJsZV0oKXtyZXR1cm4hMH1bci4kaGFzU2V0dGFibGVWYWx1ZV0oKXtyZXR1cm4hMH1bci4kc2V0VmFsdWVdKGUpe2Zvcihjb25zdCB0IG9mIHRoaXMuZmllbGQuY2hpbGRyZW4pe2lmKCF0LnZhbHVlKXtjb25zdCBlPW5ldyBWYWx1ZSh7fSk7dFtyLiRhcHBlbmRDaGlsZF0oZSk7dC52YWx1ZT1lfXQudmFsdWVbci4kc2V0VmFsdWVdKGUpfX1bci4kaXNUaGVyZU1vcmVXaWR0aF0oKXtyZXR1cm4gdGhpcy5sYXlvdXQuZW5kc1dpdGgoIi10YiIpJiYwPT09dGhpc1tyLiRleHRyYV0uYXR0ZW1wdCYmdGhpc1tyLiRleHRyYV0ubnVtYmVySW5MaW5lPjB8fHRoaXNbci4kZ2V0UGFyZW50XSgpW3IuJGlzVGhlcmVNb3JlV2lkdGhdKCl9W3IuJGlzU3BsaXR0YWJsZV0oKXtjb25zdCBlPXRoaXNbci4kZ2V0U3ViZm9ybVBhcmVudF0oKTtpZighZVtyLiRpc1NwbGl0dGFibGVdKCkpcmV0dXJuITE7aWYodm9pZCAwIT09dGhpc1tyLiRleHRyYV0uX2lzU3BsaXR0YWJsZSlyZXR1cm4gdGhpc1tyLiRleHRyYV0uX2lzU3BsaXR0YWJsZTtpZigicG9zaXRpb24iPT09dGhpcy5sYXlvdXR8fHRoaXMubGF5b3V0LmluY2x1ZGVzKCJyb3ciKSl7dGhpc1tyLiRleHRyYV0uX2lzU3BsaXR0YWJsZT0hMTtyZXR1cm4hMX1pZihlLmxheW91dD8uZW5kc1dpdGgoIi10YiIpJiYwIT09ZVtyLiRleHRyYV0ubnVtYmVySW5MaW5lKXJldHVybiExO3RoaXNbci4kZXh0cmFdLl9pc1NwbGl0dGFibGU9ITA7cmV0dXJuITB9W3IuJGZsdXNoSFRNTF0oKXtyZXR1cm4oMCxpLmZsdXNoSFRNTCkodGhpcyl9W3IuJGFkZEhUTUxdKGUsdCl7KDAsaS5hZGRIVE1MKSh0aGlzLGUsdCl9W3IuJGdldEF2YWlsYWJsZVNwYWNlXSgpe3JldHVybigwLGkuZ2V0QXZhaWxhYmxlU3BhY2UpKHRoaXMpfVtyLiR0b0hUTUxdKGUpe3NldFRhYkluZGV4KHRoaXMpO2lmKCJoaWRkZW4iPT09dGhpcy5wcmVzZW5jZXx8ImluYWN0aXZlIj09PXRoaXMucHJlc2VuY2V8fDA9PT10aGlzLmh8fDA9PT10aGlzLncpcmV0dXJuIGMuSFRNTFJlc3VsdC5FTVBUWTsoMCxzLmZpeERpbWVuc2lvbnMpKHRoaXMpO2NvbnN0IHQ9W10sYT17aWQ6dGhpc1tyLiR1aWRdLGNsYXNzOltdfTsoMCxzLnNldEFjY2VzcykodGhpcyxhLmNsYXNzKTt0aGlzW3IuJGV4dHJhXXx8KHRoaXNbci4kZXh0cmFdPU9iamVjdC5jcmVhdGUobnVsbCkpO09iamVjdC5hc3NpZ24odGhpc1tyLiRleHRyYV0se2NoaWxkcmVuOnQsYXR0cmlidXRlczphLGF0dGVtcHQ6MCxsaW5lOm51bGwsbnVtYmVySW5MaW5lOjAsYXZhaWxhYmxlU3BhY2U6e3dpZHRoOk1hdGgubWluKHRoaXMud3x8MS8wLGUud2lkdGgpLGhlaWdodDpNYXRoLm1pbih0aGlzLmh8fDEvMCxlLmhlaWdodCl9LHdpZHRoOjAsaGVpZ2h0OjAscHJldkhlaWdodDowLGN1cnJlbnRXaWR0aDowfSk7Y29uc3Qgbj10aGlzW3IuJGlzU3BsaXR0YWJsZV0oKTtufHxzZXRGaXJzdFVuc3BsaXR0YWJsZSh0aGlzKTtpZighKDAsaS5jaGVja0RpbWVuc2lvbnMpKHRoaXMsZSkpcmV0dXJuIGMuSFRNTFJlc3VsdC5GQUlMVVJFO2NvbnN0IG89bmV3IFNldChbImZpZWxkIl0pO2lmKHRoaXMubGF5b3V0LmluY2x1ZGVzKCJyb3ciKSl7Y29uc3QgZT10aGlzW3IuJGdldFN1YmZvcm1QYXJlbnRdKCkuY29sdW1uV2lkdGhzO2lmKEFycmF5LmlzQXJyYXkoZSkmJmUubGVuZ3RoPjApe3RoaXNbci4kZXh0cmFdLmNvbHVtbldpZHRocz1lO3RoaXNbci4kZXh0cmFdLmN1cnJlbnRDb2x1bW49MH19Y29uc3QgbD0oMCxzLnRvU3R5bGUpKHRoaXMsImFuY2hvclR5cGUiLCJkaW1lbnNpb25zIiwicG9zaXRpb24iLCJwcmVzZW5jZSIsImJvcmRlciIsIm1hcmdpbiIsImhBbGlnbiIpLGg9WyJ4ZmFFeGNsZ3JvdXAiXSx1PSgwLHMubGF5b3V0Q2xhc3MpKHRoaXMpO3UmJmgucHVzaCh1KTsoMCxzLmlzUHJpbnRPbmx5KSh0aGlzKSYmaC5wdXNoKCJ4ZmFQcmludE9ubHkiKTthLnN0eWxlPWw7YS5jbGFzcz1oO3RoaXMubmFtZSYmKGEueGZhTmFtZT10aGlzLm5hbWUpO3RoaXNbci4kcHVzaFBhcmFdKCk7Y29uc3QgZD0ibHItdGIiPT09dGhpcy5sYXlvdXR8fCJybC10YiI9PT10aGlzLmxheW91dCxmPWQ/MjoxO2Zvcig7dGhpc1tyLiRleHRyYV0uYXR0ZW1wdDxmO3RoaXNbci4kZXh0cmFdLmF0dGVtcHQrKyl7ZCYmMT09PXRoaXNbci4kZXh0cmFdLmF0dGVtcHQmJih0aGlzW3IuJGV4dHJhXS5udW1iZXJJbkxpbmU9MCk7Y29uc3QgZT10aGlzW3IuJGNoaWxkcmVuVG9IVE1MXSh7ZmlsdGVyOm8saW5jbHVkZTohMH0pO2lmKGUuc3VjY2VzcylicmVhaztpZihlLmlzQnJlYWsoKSl7dGhpc1tyLiRwb3BQYXJhXSgpO3JldHVybiBlfWlmKGQmJjA9PT10aGlzW3IuJGV4dHJhXS5hdHRlbXB0JiYwPT09dGhpc1tyLiRleHRyYV0ubnVtYmVySW5MaW5lJiYhdGhpc1tyLiRnZXRUZW1wbGF0ZVJvb3RdKClbci4kZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSl7dGhpc1tyLiRleHRyYV0uYXR0ZW1wdD1mO2JyZWFrfX10aGlzW3IuJHBvcFBhcmFdKCk7bnx8dW5zZXRGaXJzdFVuc3BsaXR0YWJsZSh0aGlzKTtpZih0aGlzW3IuJGV4dHJhXS5hdHRlbXB0PT09Zil7bnx8ZGVsZXRlIHRoaXNbci4kZXh0cmFdO3JldHVybiBjLkhUTUxSZXN1bHQuRkFJTFVSRX1sZXQgZz0wLHA9MDtpZih0aGlzLm1hcmdpbil7Zz10aGlzLm1hcmdpbi5sZWZ0SW5zZXQrdGhpcy5tYXJnaW4ucmlnaHRJbnNldDtwPXRoaXMubWFyZ2luLnRvcEluc2V0K3RoaXMubWFyZ2luLmJvdHRvbUluc2V0fWNvbnN0IG09TWF0aC5tYXgodGhpc1tyLiRleHRyYV0ud2lkdGgrZyx0aGlzLnd8fDApLGI9TWF0aC5tYXgodGhpc1tyLiRleHRyYV0uaGVpZ2h0K3AsdGhpcy5ofHwwKSx5PVt0aGlzLngsdGhpcy55LG0sYl07IiI9PT10aGlzLncmJihsLndpZHRoPSgwLHMubWVhc3VyZVRvU3RyaW5nKShtKSk7IiI9PT10aGlzLmgmJihsLmhlaWdodD0oMCxzLm1lYXN1cmVUb1N0cmluZykoYikpO2NvbnN0IHc9e25hbWU6ImRpdiIsYXR0cmlidXRlczphLGNoaWxkcmVuOnR9O2FwcGx5QXNzaXN0KHRoaXMsYSk7ZGVsZXRlIHRoaXNbci4kZXh0cmFdO3JldHVybiBjLkhUTUxSZXN1bHQuc3VjY2VzcygoMCxzLmNyZWF0ZVdyYXBwZXIpKHRoaXMsdykseSl9fWNsYXNzIEV4ZWN1dGUgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJleGVjdXRlIik7dGhpcy5jb25uZWN0aW9uPWUuY29ubmVjdGlvbnx8IiI7dGhpcy5leGVjdXRlVHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5leGVjdXRlVHlwZSxbImltcG9ydCIsInJlbWVyZ2UiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnJ1bkF0PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnJ1bkF0LFsiY2xpZW50IiwiYm90aCIsInNlcnZlciJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIEV4dHJhcyBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImV4dHJhcyIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuYm9vbGVhbj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRhdGU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kYXRlVGltZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRlY2ltYWw9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5leERhdGE9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5leHRyYXM9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5mbG9hdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmltYWdlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuaW50ZWdlcj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnRleHQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy50aW1lPW5ldyBvLlhGQU9iamVjdEFycmF5fX1jbGFzcyBGaWVsZCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImZpZWxkIiwhMCk7dGhpcy5hY2Nlc3M9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuYWNjZXNzLFsib3BlbiIsIm5vbkludGVyYWN0aXZlIiwicHJvdGVjdGVkIiwicmVhZE9ubHkiXSk7dGhpcy5hY2Nlc3NLZXk9ZS5hY2Nlc3NLZXl8fCIiO3RoaXMuYW5jaG9yVHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5hbmNob3JUeXBlLFsidG9wTGVmdCIsImJvdHRvbUNlbnRlciIsImJvdHRvbUxlZnQiLCJib3R0b21SaWdodCIsIm1pZGRsZUNlbnRlciIsIm1pZGRsZUxlZnQiLCJtaWRkbGVSaWdodCIsInRvcENlbnRlciIsInRvcFJpZ2h0Il0pO3RoaXMuY29sU3Bhbj0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUuY29sU3BhbixkZWZhdWx0VmFsdWU6MSx2YWxpZGF0ZTplPT5lPj0xfHwtMT09PWV9KTt0aGlzLmg9ZS5oPygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUuaCk6IiI7dGhpcy5oQWxpZ249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuaEFsaWduLFsibGVmdCIsImNlbnRlciIsImp1c3RpZnkiLCJqdXN0aWZ5QWxsIiwicmFkaXgiLCJyaWdodCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubG9jYWxlPWUubG9jYWxlfHwiIjt0aGlzLm1heEg9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5tYXhILCIwcHQiKTt0aGlzLm1heFc9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5tYXhXLCIwcHQiKTt0aGlzLm1pbkg9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5taW5ILCIwcHQiKTt0aGlzLm1pblc9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5taW5XLCIwcHQiKTt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnByZXNlbmNlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnByZXNlbmNlLFsidmlzaWJsZSIsImhpZGRlbiIsImluYWN0aXZlIiwiaW52aXNpYmxlIl0pO3RoaXMucmVsZXZhbnQ9KDAsYy5nZXRSZWxldmFudCkoZS5yZWxldmFudCk7dGhpcy5yb3RhdGU9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnJvdGF0ZSxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT5lJTkwPT0wfSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMudz1lLnc/KDAsYy5nZXRNZWFzdXJlbWVudCkoZS53KToiIjt0aGlzLng9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS54LCIwcHQiKTt0aGlzLnk9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS55LCIwcHQiKTt0aGlzLmFzc2lzdD1udWxsO3RoaXMuYmluZD1udWxsO3RoaXMuYm9yZGVyPW51bGw7dGhpcy5jYWxjdWxhdGU9bnVsbDt0aGlzLmNhcHRpb249bnVsbDt0aGlzLmRlc2M9bnVsbDt0aGlzLmV4dHJhcz1udWxsO3RoaXMuZm9udD1udWxsO3RoaXMuZm9ybWF0PW51bGw7dGhpcy5pdGVtcz1uZXcgby5YRkFPYmplY3RBcnJheSgyKTt0aGlzLmtlZXA9bnVsbDt0aGlzLm1hcmdpbj1udWxsO3RoaXMucGFyYT1udWxsO3RoaXMudHJhdmVyc2FsPW51bGw7dGhpcy51aT1udWxsO3RoaXMudmFsaWRhdGU9bnVsbDt0aGlzLnZhbHVlPW51bGw7dGhpcy5iaW5kSXRlbXM9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jb25uZWN0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZXZlbnQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5zZXRQcm9wZXJ0eT1uZXcgby5YRkFPYmplY3RBcnJheX1bci4kaXNCaW5kYWJsZV0oKXtyZXR1cm4hMH1bci4kc2V0VmFsdWVdKGUpe19zZXRWYWx1ZSh0aGlzLGUpfVtyLiR0b0hUTUxdKGUpe3NldFRhYkluZGV4KHRoaXMpO2lmKCF0aGlzLnVpKXt0aGlzLnVpPW5ldyBVaSh7fSk7dGhpcy51aVtyLiRnbG9iYWxEYXRhXT10aGlzW3IuJGdsb2JhbERhdGFdO3RoaXNbci4kYXBwZW5kQ2hpbGRdKHRoaXMudWkpO2xldCBlO3N3aXRjaCh0aGlzLml0ZW1zLmNoaWxkcmVuLmxlbmd0aCl7Y2FzZSAwOmU9bmV3IFRleHRFZGl0KHt9KTt0aGlzLnVpLnRleHRFZGl0PWU7YnJlYWs7Y2FzZSAxOmU9bmV3IENoZWNrQnV0dG9uKHt9KTt0aGlzLnVpLmNoZWNrQnV0dG9uPWU7YnJlYWs7Y2FzZSAyOmU9bmV3IENob2ljZUxpc3Qoe30pO3RoaXMudWkuY2hvaWNlTGlzdD1lfXRoaXMudWlbci4kYXBwZW5kQ2hpbGRdKGUpfWlmKCF0aGlzLnVpfHwiaGlkZGVuIj09PXRoaXMucHJlc2VuY2V8fCJpbmFjdGl2ZSI9PT10aGlzLnByZXNlbmNlfHwwPT09dGhpcy5ofHwwPT09dGhpcy53KXJldHVybiBjLkhUTUxSZXN1bHQuRU1QVFk7dGhpcy5jYXB0aW9uJiZkZWxldGUgdGhpcy5jYXB0aW9uW3IuJGV4dHJhXTt0aGlzW3IuJHB1c2hQYXJhXSgpO2NvbnN0IHQ9dGhpcy5jYXB0aW9uP3RoaXMuY2FwdGlvbltyLiR0b0hUTUxdKGUpLmh0bWw6bnVsbCxhPXRoaXMudyxuPXRoaXMuaDtsZXQgbz0wLGw9MDtpZih0aGlzLm1hcmdpbil7bz10aGlzLm1hcmdpbi5sZWZ0SW5zZXQrdGhpcy5tYXJnaW4ucmlnaHRJbnNldDtsPXRoaXMubWFyZ2luLnRvcEluc2V0K3RoaXMubWFyZ2luLmJvdHRvbUluc2V0fWxldCB1PW51bGw7aWYoIiI9PT10aGlzLnd8fCIiPT09dGhpcy5oKXtsZXQgdD1udWxsLGE9bnVsbCxuPTAsaT0wO2lmKHRoaXMudWkuY2hlY2tCdXR0b24pbj1pPXRoaXMudWkuY2hlY2tCdXR0b24uc2l6ZTtlbHNle2NvbnN0e3c6dCxoOmF9PSgwLHMubGF5b3V0Tm9kZSkodGhpcyxlKTtpZihudWxsIT09dCl7bj10O2k9YX1lbHNlIGk9KDAsaC5nZXRNZXRyaWNzKSh0aGlzLmZvbnQsITApLmxpbmVOb0dhcH11PWdldEJvcmRlckRpbXModGhpcy51aVtyLiRnZXRFeHRyYV0oKSk7bis9dS53O2krPXUuaDtpZih0aGlzLmNhcHRpb24pe2NvbnN0e3c6cyxoOm8saXNCcm9rZW46bH09dGhpcy5jYXB0aW9uW3IuJGdldEV4dHJhXShlKTtpZihsJiZ0aGlzW3IuJGdldFN1YmZvcm1QYXJlbnRdKClbci4kaXNUaGVyZU1vcmVXaWR0aF0oKSl7dGhpc1tyLiRwb3BQYXJhXSgpO3JldHVybiBjLkhUTUxSZXN1bHQuRkFJTFVSRX10PXM7YT1vO3N3aXRjaCh0aGlzLmNhcHRpb24ucGxhY2VtZW50KXtjYXNlImxlZnQiOmNhc2UicmlnaHQiOmNhc2UiaW5saW5lIjp0Kz1uO2JyZWFrO2Nhc2UidG9wIjpjYXNlImJvdHRvbSI6YSs9aX19ZWxzZXt0PW47YT1pfWlmKHQmJiIiPT09dGhpcy53KXt0Kz1vO3RoaXMudz1NYXRoLm1pbih0aGlzLm1heFc8PTA/MS8wOnRoaXMubWF4Vyx0aGlzLm1pblcrMTx0P3Q6dGhpcy5taW5XKX1pZihhJiYiIj09PXRoaXMuaCl7YSs9bDt0aGlzLmg9TWF0aC5taW4odGhpcy5tYXhIPD0wPzEvMDp0aGlzLm1heEgsdGhpcy5taW5IKzE8YT9hOnRoaXMubWluSCl9fXRoaXNbci4kcG9wUGFyYV0oKTsoMCxzLmZpeERpbWVuc2lvbnMpKHRoaXMpO3NldEZpcnN0VW5zcGxpdHRhYmxlKHRoaXMpO2lmKCEoMCxpLmNoZWNrRGltZW5zaW9ucykodGhpcyxlKSl7dGhpcy53PWE7dGhpcy5oPW47dGhpc1tyLiRwb3BQYXJhXSgpO3JldHVybiBjLkhUTUxSZXN1bHQuRkFJTFVSRX11bnNldEZpcnN0VW5zcGxpdHRhYmxlKHRoaXMpO2NvbnN0IGQ9KDAscy50b1N0eWxlKSh0aGlzLCJmb250IiwiZGltZW5zaW9ucyIsInBvc2l0aW9uIiwicm90YXRlIiwiYW5jaG9yVHlwZSIsInByZXNlbmNlIiwibWFyZ2luIiwiaEFsaWduIik7KDAscy5zZXRNaW5NYXhEaW1lbnNpb25zKSh0aGlzLGQpO2NvbnN0IGY9WyJ4ZmFGaWVsZCJdO3RoaXMuZm9udCYmZi5wdXNoKCJ4ZmFGb250Iik7KDAscy5pc1ByaW50T25seSkodGhpcykmJmYucHVzaCgieGZhUHJpbnRPbmx5Iik7Y29uc3QgZz17c3R5bGU6ZCxpZDp0aGlzW3IuJHVpZF0sY2xhc3M6Zn07aWYoZC5tYXJnaW4pe2QucGFkZGluZz1kLm1hcmdpbjtkZWxldGUgZC5tYXJnaW59KDAscy5zZXRBY2Nlc3MpKHRoaXMsZik7dGhpcy5uYW1lJiYoZy54ZmFOYW1lPXRoaXMubmFtZSk7Y29uc3QgcD1bXSxtPXtuYW1lOiJkaXYiLGF0dHJpYnV0ZXM6ZyxjaGlsZHJlbjpwfTthcHBseUFzc2lzdCh0aGlzLGcpO2NvbnN0IGI9dGhpcy5ib3JkZXI/dGhpcy5ib3JkZXJbci4kdG9TdHlsZV0oKTpudWxsLHk9KDAscy5jb21wdXRlQmJveCkodGhpcyxtLGUpLHc9dGhpcy51aVtyLiR0b0hUTUxdKCkuaHRtbDtpZighdyl7T2JqZWN0LmFzc2lnbihkLGIpO3JldHVybiBjLkhUTUxSZXN1bHQuc3VjY2VzcygoMCxzLmNyZWF0ZVdyYXBwZXIpKHRoaXMsbSkseSl9dGhpc1tyLiR0YWJJbmRleF0mJih3LmNoaWxkcmVuPy5bMF0/dy5jaGlsZHJlblswXS5hdHRyaWJ1dGVzLnRhYmluZGV4PXRoaXNbci4kdGFiSW5kZXhdOncuYXR0cmlidXRlcy50YWJpbmRleD10aGlzW3IuJHRhYkluZGV4XSk7dy5hdHRyaWJ1dGVzLnN0eWxlfHwody5hdHRyaWJ1dGVzLnN0eWxlPU9iamVjdC5jcmVhdGUobnVsbCkpO2xldCBTPW51bGw7aWYodGhpcy51aS5idXR0b24pezE9PT13LmNoaWxkcmVuLmxlbmd0aCYmKFtTXT13LmNoaWxkcmVuLnNwbGljZSgwLDEpKTtPYmplY3QuYXNzaWduKHcuYXR0cmlidXRlcy5zdHlsZSxiKX1lbHNlIE9iamVjdC5hc3NpZ24oZCxiKTtwLnB1c2godyk7aWYodGhpcy52YWx1ZSlpZih0aGlzLnVpLmltYWdlRWRpdCl3LmNoaWxkcmVuLnB1c2godGhpcy52YWx1ZVtyLiR0b0hUTUxdKCkuaHRtbCk7ZWxzZSBpZighdGhpcy51aS5idXR0b24pe2xldCBlPSIiO2lmKHRoaXMudmFsdWUuZXhEYXRhKWU9dGhpcy52YWx1ZS5leERhdGFbci4kdGV4dF0oKTtlbHNlIGlmKHRoaXMudmFsdWUudGV4dCllPXRoaXMudmFsdWUudGV4dFtyLiRnZXRFeHRyYV0oKTtlbHNle2NvbnN0IHQ9dGhpcy52YWx1ZVtyLiR0b0hUTUxdKCkuaHRtbDtudWxsIT09dCYmKGU9dC5jaGlsZHJlblswXS52YWx1ZSl9dGhpcy51aS50ZXh0RWRpdCYmdGhpcy52YWx1ZS50ZXh0Py5tYXhDaGFycyYmKHcuY2hpbGRyZW5bMF0uYXR0cmlidXRlcy5tYXhMZW5ndGg9dGhpcy52YWx1ZS50ZXh0Lm1heENoYXJzKTtpZihlKXtpZih0aGlzLnVpLm51bWVyaWNFZGl0KXtlPXBhcnNlRmxvYXQoZSk7ZT1pc05hTihlKT8iIjplLnRvU3RyaW5nKCl9InRleHRhcmVhIj09PXcuY2hpbGRyZW5bMF0ubmFtZT93LmNoaWxkcmVuWzBdLmF0dHJpYnV0ZXMudGV4dENvbnRlbnQ9ZTp3LmNoaWxkcmVuWzBdLmF0dHJpYnV0ZXMudmFsdWU9ZX19aWYoIXRoaXMudWkuaW1hZ2VFZGl0JiZ3LmNoaWxkcmVuPy5bMF0mJnRoaXMuaCl7dT11fHxnZXRCb3JkZXJEaW1zKHRoaXMudWlbci4kZ2V0RXh0cmFdKCkpO2xldCB0PTA7aWYodGhpcy5jYXB0aW9uJiZbInRvcCIsImJvdHRvbSJdLmluY2x1ZGVzKHRoaXMuY2FwdGlvbi5wbGFjZW1lbnQpKXt0PXRoaXMuY2FwdGlvbi5yZXNlcnZlO3Q8PTAmJih0PXRoaXMuY2FwdGlvbltyLiRnZXRFeHRyYV0oZSkuaCk7Y29uc3QgYT10aGlzLmgtdC1sLXUuaDt3LmNoaWxkcmVuWzBdLmF0dHJpYnV0ZXMuc3R5bGUuaGVpZ2h0PSgwLHMubWVhc3VyZVRvU3RyaW5nKShhKX1lbHNlIHcuY2hpbGRyZW5bMF0uYXR0cmlidXRlcy5zdHlsZS5oZWlnaHQ9IjEwMCUifVMmJncuY2hpbGRyZW4ucHVzaChTKTtpZighdCl7dy5hdHRyaWJ1dGVzLmNsYXNzJiZ3LmF0dHJpYnV0ZXMuY2xhc3MucHVzaCgieGZhTGVmdCIpO3RoaXMudz1hO3RoaXMuaD1uO3JldHVybiBjLkhUTUxSZXN1bHQuc3VjY2VzcygoMCxzLmNyZWF0ZVdyYXBwZXIpKHRoaXMsbSkseSl9aWYodGhpcy51aS5idXR0b24pe2QucGFkZGluZyYmZGVsZXRlIGQucGFkZGluZzsiZGl2Ij09PXQubmFtZSYmKHQubmFtZT0ic3BhbiIpO3cuY2hpbGRyZW4ucHVzaCh0KTtyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3MobSx5KX10aGlzLnVpLmNoZWNrQnV0dG9uJiYodC5hdHRyaWJ1dGVzLmNsYXNzWzBdPSJ4ZmFDYXB0aW9uRm9yQ2hlY2tCdXR0b24iKTt3LmF0dHJpYnV0ZXMuY2xhc3N8fCh3LmF0dHJpYnV0ZXMuY2xhc3M9W10pO3cuY2hpbGRyZW4uc3BsaWNlKDAsMCx0KTtzd2l0Y2godGhpcy5jYXB0aW9uLnBsYWNlbWVudCl7Y2FzZSJsZWZ0IjpjYXNlImlubGluZSI6dy5hdHRyaWJ1dGVzLmNsYXNzLnB1c2goInhmYUxlZnQiKTticmVhaztjYXNlInJpZ2h0Ijp3LmF0dHJpYnV0ZXMuY2xhc3MucHVzaCgieGZhUmlnaHQiKTticmVhaztjYXNlInRvcCI6dy5hdHRyaWJ1dGVzLmNsYXNzLnB1c2goInhmYVRvcCIpO2JyZWFrO2Nhc2UiYm90dG9tIjp3LmF0dHJpYnV0ZXMuY2xhc3MucHVzaCgieGZhQm90dG9tIil9dGhpcy53PWE7dGhpcy5oPW47cmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKCgwLHMuY3JlYXRlV3JhcHBlcikodGhpcyxtKSx5KX19dC5GaWVsZD1GaWVsZDtjbGFzcyBGaWxsIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZmlsbCIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5wcmVzZW5jZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5wcmVzZW5jZSxbInZpc2libGUiLCJoaWRkZW4iLCJpbmFjdGl2ZSIsImludmlzaWJsZSJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jb2xvcj1udWxsO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5saW5lYXI9bnVsbDt0aGlzLnBhdHRlcm49bnVsbDt0aGlzLnJhZGlhbD1udWxsO3RoaXMuc29saWQ9bnVsbDt0aGlzLnN0aXBwbGU9bnVsbH1bci4kdG9TdHlsZV0oKXtjb25zdCBlPXRoaXNbci4kZ2V0UGFyZW50XSgpLHQ9ZVtyLiRnZXRQYXJlbnRdKClbci4kZ2V0UGFyZW50XSgpLGE9T2JqZWN0LmNyZWF0ZShudWxsKTtsZXQgbj0iY29sb3IiLGk9bjtpZihlIGluc3RhbmNlb2YgQm9yZGVyKXtuPSJiYWNrZ3JvdW5kLWNvbG9yIjtpPSJiYWNrZ3JvdW5kIjt0IGluc3RhbmNlb2YgVWkmJihhLmJhY2tncm91bmRDb2xvcj0id2hpdGUiKX1pZihlIGluc3RhbmNlb2YgUmVjdGFuZ2xlfHxlIGluc3RhbmNlb2YgQXJjKXtuPWk9ImZpbGwiO2EuZmlsbD0id2hpdGUifWZvcihjb25zdCBlIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKXtpZigiZXh0cmFzIj09PWV8fCJjb2xvciI9PT1lKWNvbnRpbnVlO2NvbnN0IHQ9dGhpc1tlXTtpZighKHQgaW5zdGFuY2VvZiBvLlhGQU9iamVjdCkpY29udGludWU7Y29uc3Qgcz10W3IuJHRvU3R5bGVdKHRoaXMuY29sb3IpO3MmJihhW3Muc3RhcnRzV2l0aCgiIyIpP246aV09cyk7cmV0dXJuIGF9aWYodGhpcy5jb2xvcj8udmFsdWUpe2NvbnN0IGU9dGhpcy5jb2xvcltyLiR0b1N0eWxlXSgpO2FbZS5zdGFydHNXaXRoKCIjIik/bjppXT1lfXJldHVybiBhfX1jbGFzcyBGaWx0ZXIgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJmaWx0ZXIiLCEwKTt0aGlzLmFkZFJldm9jYXRpb25JbmZvPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmFkZFJldm9jYXRpb25JbmZvLFsiIiwicmVxdWlyZWQiLCJvcHRpb25hbCIsIm5vbmUiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy52ZXJzaW9uPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6dGhpcy52ZXJzaW9uLGRlZmF1bHRWYWx1ZTo1LHZhbGlkYXRlOmU9PmU+PTEmJmU8PTV9KTt0aGlzLmFwcGVhcmFuY2VGaWx0ZXI9bnVsbDt0aGlzLmNlcnRpZmljYXRlcz1udWxsO3RoaXMuZGlnZXN0TWV0aG9kcz1udWxsO3RoaXMuZW5jb2RpbmdzPW51bGw7dGhpcy5lbmNyeXB0aW9uTWV0aG9kcz1udWxsO3RoaXMuaGFuZGxlcj1udWxsO3RoaXMubG9ja0RvY3VtZW50PW51bGw7dGhpcy5tZHA9bnVsbDt0aGlzLnJlYXNvbnM9bnVsbDt0aGlzLnRpbWVTdGFtcD1udWxsfX1jbGFzcyBGbG9hdCBleHRlbmRzIG8uQ29udGVudE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJmbG9hdCIpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifVtyLiRmaW5hbGl6ZV0oKXtjb25zdCBlPXBhcnNlRmxvYXQodGhpc1tyLiRjb250ZW50XS50cmltKCkpO3RoaXNbci4kY29udGVudF09aXNOYU4oZSk/bnVsbDplfVtyLiR0b0hUTUxdKGUpe3JldHVybiB2YWx1ZVRvSHRtbChudWxsIT09dGhpc1tyLiRjb250ZW50XT90aGlzW3IuJGNvbnRlbnRdLnRvU3RyaW5nKCk6IiIpfX1jbGFzcyBGb250IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZm9udCIsITApO3RoaXMuYmFzZWxpbmVTaGlmdD0oMCxjLmdldE1lYXN1cmVtZW50KShlLmJhc2VsaW5lU2hpZnQpO3RoaXMuZm9udEhvcml6b250YWxTY2FsZT0oMCxjLmdldEZsb2F0KSh7ZGF0YTplLmZvbnRIb3Jpem9udGFsU2NhbGUsZGVmYXVsdFZhbHVlOjEwMCx2YWxpZGF0ZTplPT5lPj0wfSk7dGhpcy5mb250VmVydGljYWxTY2FsZT0oMCxjLmdldEZsb2F0KSh7ZGF0YTplLmZvbnRWZXJ0aWNhbFNjYWxlLGRlZmF1bHRWYWx1ZToxMDAsdmFsaWRhdGU6ZT0+ZT49MH0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5rZXJuaW5nTW9kZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5rZXJuaW5nTW9kZSxbIm5vbmUiLCJwYWlyIl0pO3RoaXMubGV0dGVyU3BhY2luZz0oMCxjLmdldE1lYXN1cmVtZW50KShlLmxldHRlclNwYWNpbmcsIjAiKTt0aGlzLmxpbmVUaHJvdWdoPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5saW5lVGhyb3VnaCxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZXx8Mj09PWV9KTt0aGlzLmxpbmVUaHJvdWdoUGVyaW9kPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmxpbmVUaHJvdWdoUGVyaW9kLFsiYWxsIiwid29yZCJdKTt0aGlzLm92ZXJsaW5lPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5vdmVybGluZSxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZXx8Mj09PWV9KTt0aGlzLm92ZXJsaW5lUGVyaW9kPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLm92ZXJsaW5lUGVyaW9kLFsiYWxsIiwid29yZCJdKTt0aGlzLnBvc3R1cmU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUucG9zdHVyZSxbIm5vcm1hbCIsIml0YWxpYyJdKTt0aGlzLnNpemU9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5zaXplLCIxMHB0Iik7dGhpcy50eXBlZmFjZT1lLnR5cGVmYWNlfHwiQ291cmllciI7dGhpcy51bmRlcmxpbmU9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnVuZGVybGluZSxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZXx8Mj09PWV9KTt0aGlzLnVuZGVybGluZVBlcmlvZD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS51bmRlcmxpbmVQZXJpb2QsWyJhbGwiLCJ3b3JkIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLndlaWdodD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS53ZWlnaHQsWyJub3JtYWwiLCJib2xkIl0pO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5maWxsPW51bGx9W3IuJGNsZWFuXShlKXtzdXBlcltyLiRjbGVhbl0oZSk7dGhpc1tyLiRnbG9iYWxEYXRhXS51c2VkVHlwZWZhY2VzLmFkZCh0aGlzLnR5cGVmYWNlKX1bci4kdG9TdHlsZV0oKXtjb25zdCBlPSgwLHMudG9TdHlsZSkodGhpcywiZmlsbCIpLHQ9ZS5jb2xvcjtpZih0KWlmKCIjMDAwMDAwIj09PXQpZGVsZXRlIGUuY29sb3I7ZWxzZSBpZighdC5zdGFydHNXaXRoKCIjIikpe2UuYmFja2dyb3VuZD10O2UuYmFja2dyb3VuZENsaXA9InRleHQiO2UuY29sb3I9InRyYW5zcGFyZW50In10aGlzLmJhc2VsaW5lU2hpZnQmJihlLnZlcnRpY2FsQWxpZ249KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMuYmFzZWxpbmVTaGlmdCkpO2UuZm9udEtlcm5pbmc9Im5vbmUiPT09dGhpcy5rZXJuaW5nTW9kZT8ibm9uZSI6Im5vcm1hbCI7ZS5sZXR0ZXJTcGFjaW5nPSgwLHMubWVhc3VyZVRvU3RyaW5nKSh0aGlzLmxldHRlclNwYWNpbmcpO2lmKDAhPT10aGlzLmxpbmVUaHJvdWdoKXtlLnRleHREZWNvcmF0aW9uPSJsaW5lLXRocm91Z2giOzI9PT10aGlzLmxpbmVUaHJvdWdoJiYoZS50ZXh0RGVjb3JhdGlvblN0eWxlPSJkb3VibGUiKX1pZigwIT09dGhpcy5vdmVybGluZSl7ZS50ZXh0RGVjb3JhdGlvbj0ib3ZlcmxpbmUiOzI9PT10aGlzLm92ZXJsaW5lJiYoZS50ZXh0RGVjb3JhdGlvblN0eWxlPSJkb3VibGUiKX1lLmZvbnRTdHlsZT10aGlzLnBvc3R1cmU7ZS5mb250U2l6ZT0oMCxzLm1lYXN1cmVUb1N0cmluZykoLjk5KnRoaXMuc2l6ZSk7KDAscy5zZXRGb250RmFtaWx5KSh0aGlzLHRoaXMsdGhpc1tyLiRnbG9iYWxEYXRhXS5mb250RmluZGVyLGUpO2lmKDAhPT10aGlzLnVuZGVybGluZSl7ZS50ZXh0RGVjb3JhdGlvbj0idW5kZXJsaW5lIjsyPT09dGhpcy51bmRlcmxpbmUmJihlLnRleHREZWNvcmF0aW9uU3R5bGU9ImRvdWJsZSIpfWUuZm9udFdlaWdodD10aGlzLndlaWdodDtyZXR1cm4gZX19Y2xhc3MgRm9ybWF0IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiZm9ybWF0IiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5leHRyYXM9bnVsbDt0aGlzLnBpY3R1cmU9bnVsbH19Y2xhc3MgSGFuZGxlciBleHRlbmRzIG8uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImhhbmRsZXIiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50eXBlLFsib3B0aW9uYWwiLCJyZXF1aXJlZCJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIEh5cGhlbmF0aW9uIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiaHlwaGVuYXRpb24iKTt0aGlzLmV4Y2x1ZGVBbGxDYXBzPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5leGNsdWRlQWxsQ2FwcyxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZX0pO3RoaXMuZXhjbHVkZUluaXRpYWxDYXA9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmV4Y2x1ZGVJbml0aWFsQ2FwLGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy5oeXBoZW5hdGU9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmh5cGhlbmF0ZSxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZX0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5wdXNoQ2hhcmFjdGVyQ291bnQ9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnB1c2hDaGFyYWN0ZXJDb3VudCxkZWZhdWx0VmFsdWU6Myx2YWxpZGF0ZTplPT5lPj0wfSk7dGhpcy5yZW1haW5DaGFyYWN0ZXJDb3VudD0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUucmVtYWluQ2hhcmFjdGVyQ291bnQsZGVmYXVsdFZhbHVlOjMsdmFsaWRhdGU6ZT0+ZT49MH0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLndvcmRDaGFyYWN0ZXJDb3VudD0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUud29yZENoYXJhY3RlckNvdW50LGRlZmF1bHRWYWx1ZTo3LHZhbGlkYXRlOmU9PmU+PTB9KX19Y2xhc3MgSW1hZ2UgZXh0ZW5kcyBvLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJpbWFnZSIpO3RoaXMuYXNwZWN0PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmFzcGVjdCxbImZpdCIsImFjdHVhbCIsImhlaWdodCIsIm5vbmUiLCJ3aWR0aCJdKTt0aGlzLmNvbnRlbnRUeXBlPWUuY29udGVudFR5cGV8fCIiO3RoaXMuaHJlZj1lLmhyZWZ8fCIiO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy50cmFuc2ZlckVuY29kaW5nPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnRyYW5zZmVyRW5jb2RpbmcsWyJiYXNlNjQiLCJub25lIiwicGFja2FnZSJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9W3IuJHRvSFRNTF0oKXtpZih0aGlzLmNvbnRlbnRUeXBlJiYhbS5oYXModGhpcy5jb250ZW50VHlwZS50b0xvd2VyQ2FzZSgpKSlyZXR1cm4gYy5IVE1MUmVzdWx0LkVNUFRZO2xldCBlPXRoaXNbci4kZ2xvYmFsRGF0YV0uaW1hZ2VzJiZ0aGlzW3IuJGdsb2JhbERhdGFdLmltYWdlcy5nZXQodGhpcy5ocmVmKTtpZighZSYmKHRoaXMuaHJlZnx8IXRoaXNbci4kY29udGVudF0pKXJldHVybiBjLkhUTUxSZXN1bHQuRU1QVFk7ZXx8ImJhc2U2NCIhPT10aGlzLnRyYW5zZmVyRW5jb2Rpbmd8fChlPSgwLGwuc3RyaW5nVG9CeXRlcykoYXRvYih0aGlzW3IuJGNvbnRlbnRdKSkpO2lmKCFlKXJldHVybiBjLkhUTUxSZXN1bHQuRU1QVFk7aWYoIXRoaXMuY29udGVudFR5cGUpe2Zvcihjb25zdFt0LGFdb2YgYilpZihlLmxlbmd0aD50Lmxlbmd0aCYmdC5ldmVyeSgoKHQsYSk9PnQ9PT1lW2FdKSkpe3RoaXMuY29udGVudFR5cGU9YTticmVha31pZighdGhpcy5jb250ZW50VHlwZSlyZXR1cm4gYy5IVE1MUmVzdWx0LkVNUFRZfWNvbnN0IHQ9bmV3IEJsb2IoW2VdLHt0eXBlOnRoaXMuY29udGVudFR5cGV9KTtsZXQgYTtzd2l0Y2godGhpcy5hc3BlY3Qpe2Nhc2UiZml0IjpjYXNlImFjdHVhbCI6YnJlYWs7Y2FzZSJoZWlnaHQiOmE9e2hlaWdodDoiMTAwJSIsb2JqZWN0Rml0OiJmaWxsIn07YnJlYWs7Y2FzZSJub25lIjphPXt3aWR0aDoiMTAwJSIsaGVpZ2h0OiIxMDAlIixvYmplY3RGaXQ6ImZpbGwifTticmVhaztjYXNlIndpZHRoIjphPXt3aWR0aDoiMTAwJSIsb2JqZWN0Rml0OiJmaWxsIn19Y29uc3Qgbj10aGlzW3IuJGdldFBhcmVudF0oKTtyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImltZyIsYXR0cmlidXRlczp7Y2xhc3M6WyJ4ZmFJbWFnZSJdLHN0eWxlOmEsc3JjOlVSTC5jcmVhdGVPYmplY3RVUkwodCksYWx0Om4/YXJpYUxhYmVsKG5bci4kZ2V0UGFyZW50XSgpKTpudWxsfX0pfX1jbGFzcyBJbWFnZUVkaXQgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJpbWFnZUVkaXQiLCEwKTt0aGlzLmRhdGE9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuZGF0YSxbImxpbmsiLCJlbWJlZCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmJvcmRlcj1udWxsO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5tYXJnaW49bnVsbH1bci4kdG9IVE1MXShlKXtyZXR1cm4iZW1iZWQiPT09dGhpcy5kYXRhP2MuSFRNTFJlc3VsdC5zdWNjZXNzKHtuYW1lOiJkaXYiLGNoaWxkcmVuOltdLGF0dHJpYnV0ZXM6e319KTpjLkhUTUxSZXN1bHQuRU1QVFl9fWNsYXNzIEludGVnZXIgZXh0ZW5kcyBvLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwiaW50ZWdlciIpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifVtyLiRmaW5hbGl6ZV0oKXtjb25zdCBlPXBhcnNlSW50KHRoaXNbci4kY29udGVudF0udHJpbSgpLDEwKTt0aGlzW3IuJGNvbnRlbnRdPWlzTmFOKGUpP251bGw6ZX1bci4kdG9IVE1MXShlKXtyZXR1cm4gdmFsdWVUb0h0bWwobnVsbCE9PXRoaXNbci4kY29udGVudF0/dGhpc1tyLiRjb250ZW50XS50b1N0cmluZygpOiIiKX19Y2xhc3MgSXNzdWVycyBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImlzc3VlcnMiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50eXBlLFsib3B0aW9uYWwiLCJyZXF1aXJlZCJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jZXJ0aWZpY2F0ZT1uZXcgby5YRkFPYmplY3RBcnJheX19Y2xhc3MgSXRlbXMgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJpdGVtcyIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy5wcmVzZW5jZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5wcmVzZW5jZSxbInZpc2libGUiLCJoaWRkZW4iLCJpbmFjdGl2ZSIsImludmlzaWJsZSJdKTt0aGlzLnJlZj1lLnJlZnx8IiI7dGhpcy5zYXZlPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5zYXZlLGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuYm9vbGVhbj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRhdGU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kYXRlVGltZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRlY2ltYWw9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5leERhdGE9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5mbG9hdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmltYWdlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuaW50ZWdlcj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnRleHQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy50aW1lPW5ldyBvLlhGQU9iamVjdEFycmF5fVtyLiR0b0hUTUxdKCl7Y29uc3QgZT1bXTtmb3IoY29uc3QgdCBvZiB0aGlzW3IuJGdldENoaWxkcmVuXSgpKWUucHVzaCh0W3IuJHRleHRdKCkpO3JldHVybiBjLkhUTUxSZXN1bHQuc3VjY2VzcyhlKX19dC5JdGVtcz1JdGVtcztjbGFzcyBLZWVwIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwia2VlcCIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7Y29uc3QgdD1bIm5vbmUiLCJjb250ZW50QXJlYSIsInBhZ2VBcmVhIl07dGhpcy5pbnRhY3Q9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuaW50YWN0LHQpO3RoaXMubmV4dD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5uZXh0LHQpO3RoaXMucHJldmlvdXM9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUucHJldmlvdXMsdCk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGx9fWNsYXNzIEtleVVzYWdlIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwia2V5VXNhZ2UiKTtjb25zdCB0PVsiIiwieWVzIiwibm8iXTt0aGlzLmNybFNpZ249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuY3JsU2lnbix0KTt0aGlzLmRhdGFFbmNpcGhlcm1lbnQ9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuZGF0YUVuY2lwaGVybWVudCx0KTt0aGlzLmRlY2lwaGVyT25seT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5kZWNpcGhlck9ubHksdCk7dGhpcy5kaWdpdGFsU2lnbmF0dXJlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmRpZ2l0YWxTaWduYXR1cmUsdCk7dGhpcy5lbmNpcGhlck9ubHk9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuZW5jaXBoZXJPbmx5LHQpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5rZXlBZ3JlZW1lbnQ9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUua2V5QWdyZWVtZW50LHQpO3RoaXMua2V5Q2VydFNpZ249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUua2V5Q2VydFNpZ24sdCk7dGhpcy5rZXlFbmNpcGhlcm1lbnQ9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUua2V5RW5jaXBoZXJtZW50LHQpO3RoaXMubm9uUmVwdWRpYXRpb249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUubm9uUmVwdWRpYXRpb24sdCk7dGhpcy50eXBlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnR5cGUsWyJvcHRpb25hbCIsInJlcXVpcmVkIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgTGluZSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImxpbmUiLCEwKTt0aGlzLmhhbmQ9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuaGFuZCxbImV2ZW4iLCJsZWZ0IiwicmlnaHQiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnNsb3BlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnNsb3BlLFsiXFwiLCIvIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmVkZ2U9bnVsbH1bci4kdG9IVE1MXSgpe2NvbnN0IGU9dGhpc1tyLiRnZXRQYXJlbnRdKClbci4kZ2V0UGFyZW50XSgpLHQ9dGhpcy5lZGdlfHxuZXcgRWRnZSh7fSksYT10W3IuJHRvU3R5bGVdKCksbj1PYmplY3QuY3JlYXRlKG51bGwpLGk9InZpc2libGUiPT09dC5wcmVzZW5jZT90LnRoaWNrbmVzczowO24uc3Ryb2tlV2lkdGg9KDAscy5tZWFzdXJlVG9TdHJpbmcpKGkpO24uc3Ryb2tlPWEuY29sb3I7bGV0IG8sbCxoLHUsZD0iMTAwJSIsZj0iMTAwJSI7aWYoZS53PD1pKXtbbyxsLGgsdV09WyI1MCUiLDAsIjUwJSIsIjEwMCUiXTtkPW4uc3Ryb2tlV2lkdGh9ZWxzZSBpZihlLmg8PWkpe1tvLGwsaCx1XT1bMCwiNTAlIiwiMTAwJSIsIjUwJSJdO2Y9bi5zdHJva2VXaWR0aH1lbHNlIlxcIj09PXRoaXMuc2xvcGU/W28sbCxoLHVdPVswLDAsIjEwMCUiLCIxMDAlIl06W28sbCxoLHVdPVswLCIxMDAlIiwiMTAwJSIsMF07Y29uc3QgcD17bmFtZToic3ZnIixjaGlsZHJlbjpbe25hbWU6ImxpbmUiLGF0dHJpYnV0ZXM6e3htbG5zOmcseDE6byx5MTpsLHgyOmgseTI6dSxzdHlsZTpufX1dLGF0dHJpYnV0ZXM6e3htbG5zOmcsd2lkdGg6ZCxoZWlnaHQ6ZixzdHlsZTp7b3ZlcmZsb3c6InZpc2libGUifX19O2lmKGhhc01hcmdpbihlKSlyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImRpdiIsYXR0cmlidXRlczp7c3R5bGU6e2Rpc3BsYXk6ImlubGluZSIsd2lkdGg6IjEwMCUiLGhlaWdodDoiMTAwJSJ9fSxjaGlsZHJlbjpbcF19KTtwLmF0dHJpYnV0ZXMuc3R5bGUucG9zaXRpb249ImFic29sdXRlIjtyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3MocCl9fWNsYXNzIExpbmVhciBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsImxpbmVhciIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy50eXBlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnR5cGUsWyJ0b1JpZ2h0IiwidG9Cb3R0b20iLCJ0b0xlZnQiLCJ0b1RvcCJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jb2xvcj1udWxsO3RoaXMuZXh0cmFzPW51bGx9W3IuJHRvU3R5bGVdKGUpe2U9ZT9lW3IuJHRvU3R5bGVdKCk6IiNGRkZGRkYiO3JldHVybmBsaW5lYXItZ3JhZGllbnQoJHt0aGlzLnR5cGUucmVwbGFjZSgvKFtSQkxUXSkvLCIgJDEiKS50b0xvd2VyQ2FzZSgpfSwgJHtlfSwgJHt0aGlzLmNvbG9yP3RoaXMuY29sb3Jbci4kdG9TdHlsZV0oKToiIzAwMDAwMCJ9KWB9fWNsYXNzIExvY2tEb2N1bWVudCBleHRlbmRzIG8uQ29udGVudE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJsb2NrRG9jdW1lbnQiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50eXBlLFsib3B0aW9uYWwiLCJyZXF1aXJlZCJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9W3IuJGZpbmFsaXplXSgpe3RoaXNbci4kY29udGVudF09KDAsYy5nZXRTdHJpbmdPcHRpb24pKHRoaXNbci4kY29udGVudF0sWyJhdXRvIiwiMCIsIjEiXSl9fWNsYXNzIE1hbmlmZXN0IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwibWFuaWZlc3QiLCEwKTt0aGlzLmFjdGlvbj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5hY3Rpb24sWyJpbmNsdWRlIiwiYWxsIiwiZXhjbHVkZSJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmV4dHJhcz1udWxsO3RoaXMucmVmPW5ldyBvLlhGQU9iamVjdEFycmF5fX1jbGFzcyBNYXJnaW4gZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJtYXJnaW4iLCEwKTt0aGlzLmJvdHRvbUluc2V0PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUuYm90dG9tSW5zZXQsIjAiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubGVmdEluc2V0PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubGVmdEluc2V0LCIwIik7dGhpcy5yaWdodEluc2V0PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUucmlnaHRJbnNldCwiMCIpO3RoaXMudG9wSW5zZXQ9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS50b3BJbnNldCwiMCIpO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmV4dHJhcz1udWxsfVtyLiR0b1N0eWxlXSgpe3JldHVybnttYXJnaW46KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMudG9wSW5zZXQpKyIgIisoMCxzLm1lYXN1cmVUb1N0cmluZykodGhpcy5yaWdodEluc2V0KSsiICIrKDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMuYm90dG9tSW5zZXQpKyIgIisoMCxzLm1lYXN1cmVUb1N0cmluZykodGhpcy5sZWZ0SW5zZXQpfX19Y2xhc3MgTWRwIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwibWRwIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnBlcm1pc3Npb25zPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5wZXJtaXNzaW9ucyxkZWZhdWx0VmFsdWU6Mix2YWxpZGF0ZTplPT4xPT09ZXx8Mz09PWV9KTt0aGlzLnNpZ25hdHVyZVR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuc2lnbmF0dXJlVHlwZSxbImZpbGxlciIsImF1dGhvciJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIE1lZGl1bSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsIm1lZGl1bSIpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5pbWFnaW5nQkJveD0oMCxjLmdldEJCb3gpKGUuaW1hZ2luZ0JCb3gpO3RoaXMubG9uZz0oMCxjLmdldE1lYXN1cmVtZW50KShlLmxvbmcpO3RoaXMub3JpZW50YXRpb249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUub3JpZW50YXRpb24sWyJwb3J0cmFpdCIsImxhbmRzY2FwZSJdKTt0aGlzLnNob3J0PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUuc2hvcnQpO3RoaXMuc3RvY2s9ZS5zdG9ja3x8IiI7dGhpcy50cmF5SW49KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHJheUluLFsiYXV0byIsImRlbGVnYXRlIiwicGFnZUZyb250Il0pO3RoaXMudHJheU91dD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50cmF5T3V0LFsiYXV0byIsImRlbGVnYXRlIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgTWVzc2FnZSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsIm1lc3NhZ2UiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLnRleHQ9bmV3IG8uWEZBT2JqZWN0QXJyYXl9fWNsYXNzIE51bWVyaWNFZGl0IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwibnVtZXJpY0VkaXQiLCEwKTt0aGlzLmhTY3JvbGxQb2xpY3k9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuaFNjcm9sbFBvbGljeSxbImF1dG8iLCJvZmYiLCJvbiJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmJvcmRlcj1udWxsO3RoaXMuY29tYj1udWxsO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5tYXJnaW49bnVsbH1bci4kdG9IVE1MXShlKXtjb25zdCB0PSgwLHMudG9TdHlsZSkodGhpcywiYm9yZGVyIiwiZm9udCIsIm1hcmdpbiIpLGE9dGhpc1tyLiRnZXRQYXJlbnRdKClbci4kZ2V0UGFyZW50XSgpLG49e25hbWU6ImlucHV0IixhdHRyaWJ1dGVzOnt0eXBlOiJ0ZXh0IixmaWVsZElkOmFbci4kdWlkXSxkYXRhSWQ6YVtyLiRkYXRhXT8uW3IuJHVpZF18fGFbci4kdWlkXSxjbGFzczpbInhmYVRleHRmaWVsZCJdLHN0eWxlOnQsImFyaWEtbGFiZWwiOmFyaWFMYWJlbChhKSwiYXJpYS1yZXF1aXJlZCI6ITF9fTtpZihpc1JlcXVpcmVkKGEpKXtuLmF0dHJpYnV0ZXNbImFyaWEtcmVxdWlyZWQiXT0hMDtuLmF0dHJpYnV0ZXMucmVxdWlyZWQ9ITB9cmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKHtuYW1lOiJsYWJlbCIsYXR0cmlidXRlczp7Y2xhc3M6WyJ4ZmFMYWJlbCJdfSxjaGlsZHJlbjpbbl19KX19Y2xhc3MgT2NjdXIgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJvY2N1ciIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5pbml0aWFsPSIiIT09ZS5pbml0aWFsPygwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5pbml0aWFsLGRlZmF1bHRWYWx1ZToiIix2YWxpZGF0ZTplPT4hMH0pOiIiO3RoaXMubWF4PSIiIT09ZS5tYXg/KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLm1heCxkZWZhdWx0VmFsdWU6MSx2YWxpZGF0ZTplPT4hMH0pOiIiO3RoaXMubWluPSIiIT09ZS5taW4/KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLm1pbixkZWZhdWx0VmFsdWU6MSx2YWxpZGF0ZTplPT4hMH0pOiIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmV4dHJhcz1udWxsfVtyLiRjbGVhbl0oKXtjb25zdCBlPXRoaXNbci4kZ2V0UGFyZW50XSgpLHQ9dGhpcy5taW47IiI9PT10aGlzLm1pbiYmKHRoaXMubWluPWUgaW5zdGFuY2VvZiBQYWdlQXJlYXx8ZSBpbnN0YW5jZW9mIFBhZ2VTZXQ/MDoxKTsiIj09PXRoaXMubWF4JiYodGhpcy5tYXg9IiI9PT10P2UgaW5zdGFuY2VvZiBQYWdlQXJlYXx8ZSBpbnN0YW5jZW9mIFBhZ2VTZXQ/LTE6MTp0aGlzLm1pbik7LTEhPT10aGlzLm1heCYmdGhpcy5tYXg8dGhpcy5taW4mJih0aGlzLm1heD10aGlzLm1pbik7IiI9PT10aGlzLmluaXRpYWwmJih0aGlzLmluaXRpYWw9ZSBpbnN0YW5jZW9mIFRlbXBsYXRlPzE6dGhpcy5taW4pfX1jbGFzcyBPaWQgZXh0ZW5kcyBvLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJvaWQiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgT2lkcyBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsIm9pZHMiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50eXBlLFsib3B0aW9uYWwiLCJyZXF1aXJlZCJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5vaWQ9bmV3IG8uWEZBT2JqZWN0QXJyYXl9fWNsYXNzIE92ZXJmbG93IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwib3ZlcmZsb3ciKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubGVhZGVyPWUubGVhZGVyfHwiIjt0aGlzLnRhcmdldD1lLnRhcmdldHx8IiI7dGhpcy50cmFpbGVyPWUudHJhaWxlcnx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifVtyLiRnZXRFeHRyYV0oKXtpZighdGhpc1tyLiRleHRyYV0pe2NvbnN0IGU9dGhpc1tyLiRnZXRQYXJlbnRdKCksdD10aGlzW3IuJGdldFRlbXBsYXRlUm9vdF0oKSxhPXRbci4kc2VhcmNoTm9kZV0odGhpcy50YXJnZXQsZSksbj10W3IuJHNlYXJjaE5vZGVdKHRoaXMubGVhZGVyLGUpLGk9dFtyLiRzZWFyY2hOb2RlXSh0aGlzLnRyYWlsZXIsZSk7dGhpc1tyLiRleHRyYV09e3RhcmdldDphPy5bMF18fG51bGwsbGVhZGVyOm4/LlswXXx8bnVsbCx0cmFpbGVyOmk/LlswXXx8bnVsbCxhZGRMZWFkZXI6ITEsYWRkVHJhaWxlcjohMX19cmV0dXJuIHRoaXNbci4kZXh0cmFdfX1jbGFzcyBQYWdlQXJlYSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInBhZ2VBcmVhIiwhMCk7dGhpcy5ibGFua09yTm90Qmxhbms9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuYmxhbmtPck5vdEJsYW5rLFsiYW55IiwiYmxhbmsiLCJub3RCbGFuayJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMuaW5pdGlhbE51bWJlcj0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUuaW5pdGlhbE51bWJlcixkZWZhdWx0VmFsdWU6MSx2YWxpZGF0ZTplPT4hMH0pO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMubnVtYmVyZWQ9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLm51bWJlcmVkLGRlZmF1bHRWYWx1ZToxLHZhbGlkYXRlOmU9PiEwfSk7dGhpcy5vZGRPckV2ZW49KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUub2RkT3JFdmVuLFsiYW55IiwiZXZlbiIsIm9kZCJdKTt0aGlzLnBhZ2VQb3NpdGlvbj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5wYWdlUG9zaXRpb24sWyJhbnkiLCJmaXJzdCIsImxhc3QiLCJvbmx5IiwicmVzdCJdKTt0aGlzLnJlbGV2YW50PSgwLGMuZ2V0UmVsZXZhbnQpKGUucmVsZXZhbnQpO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmRlc2M9bnVsbDt0aGlzLmV4dHJhcz1udWxsO3RoaXMubWVkaXVtPW51bGw7dGhpcy5vY2N1cj1udWxsO3RoaXMuYXJlYT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmNvbnRlbnRBcmVhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZHJhdz1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV4Y2xHcm91cD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmZpZWxkPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc3ViZm9ybT1uZXcgby5YRkFPYmplY3RBcnJheX1bci4kaXNVc2FibGVdKCl7aWYoIXRoaXNbci4kZXh0cmFdKXt0aGlzW3IuJGV4dHJhXT17bnVtYmVyT2ZVc2U6MH07cmV0dXJuITB9cmV0dXJuIXRoaXMub2NjdXJ8fC0xPT09dGhpcy5vY2N1ci5tYXh8fHRoaXNbci4kZXh0cmFdLm51bWJlck9mVXNlPHRoaXMub2NjdXIubWF4fVtyLiRjbGVhblBhZ2VdKCl7ZGVsZXRlIHRoaXNbci4kZXh0cmFdfVtyLiRnZXROZXh0UGFnZV0oKXt0aGlzW3IuJGV4dHJhXXx8KHRoaXNbci4kZXh0cmFdPXtudW1iZXJPZlVzZTowfSk7Y29uc3QgZT10aGlzW3IuJGdldFBhcmVudF0oKTtpZigib3JkZXJlZE9jY3VycmVuY2UiPT09ZS5yZWxhdGlvbiYmdGhpc1tyLiRpc1VzYWJsZV0oKSl7dGhpc1tyLiRleHRyYV0ubnVtYmVyT2ZVc2UrPTE7cmV0dXJuIHRoaXN9cmV0dXJuIGVbci4kZ2V0TmV4dFBhZ2VdKCl9W3IuJGdldEF2YWlsYWJsZVNwYWNlXSgpe3JldHVybiB0aGlzW3IuJGV4dHJhXS5zcGFjZXx8e3dpZHRoOjAsaGVpZ2h0OjB9fVtyLiR0b0hUTUxdKCl7dGhpc1tyLiRleHRyYV18fCh0aGlzW3IuJGV4dHJhXT17bnVtYmVyT2ZVc2U6MX0pO2NvbnN0IGU9W107dGhpc1tyLiRleHRyYV0uY2hpbGRyZW49ZTtjb25zdCB0PU9iamVjdC5jcmVhdGUobnVsbCk7aWYodGhpcy5tZWRpdW0mJnRoaXMubWVkaXVtLnNob3J0JiZ0aGlzLm1lZGl1bS5sb25nKXt0LndpZHRoPSgwLHMubWVhc3VyZVRvU3RyaW5nKSh0aGlzLm1lZGl1bS5zaG9ydCk7dC5oZWlnaHQ9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMubWVkaXVtLmxvbmcpO3RoaXNbci4kZXh0cmFdLnNwYWNlPXt3aWR0aDp0aGlzLm1lZGl1bS5zaG9ydCxoZWlnaHQ6dGhpcy5tZWRpdW0ubG9uZ307aWYoImxhbmRzY2FwZSI9PT10aGlzLm1lZGl1bS5vcmllbnRhdGlvbil7Y29uc3QgZT10LndpZHRoO3Qud2lkdGg9dC5oZWlnaHQ7dC5oZWlnaHQ9ZTt0aGlzW3IuJGV4dHJhXS5zcGFjZT17d2lkdGg6dGhpcy5tZWRpdW0ubG9uZyxoZWlnaHQ6dGhpcy5tZWRpdW0uc2hvcnR9fX1lbHNlKDAsbC53YXJuKSgiWEZBIC0gTm8gbWVkaXVtIHNwZWNpZmllZCBpbiBwYWdlQXJlYTogcGxlYXNlIGZpbGUgYSBidWcuIik7dGhpc1tyLiRjaGlsZHJlblRvSFRNTF0oe2ZpbHRlcjpuZXcgU2V0KFsiYXJlYSIsImRyYXciLCJmaWVsZCIsInN1YmZvcm0iXSksaW5jbHVkZTohMH0pO3RoaXNbci4kY2hpbGRyZW5Ub0hUTUxdKHtmaWx0ZXI6bmV3IFNldChbImNvbnRlbnRBcmVhIl0pLGluY2x1ZGU6ITB9KTtyZXR1cm4gYy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImRpdiIsY2hpbGRyZW46ZSxhdHRyaWJ1dGVzOntjbGFzczpbInhmYVBhZ2UiXSxpZDp0aGlzW3IuJHVpZF0sc3R5bGU6dCx4ZmFOYW1lOnRoaXMubmFtZX19KX19Y2xhc3MgUGFnZVNldCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInBhZ2VTZXQiLCEwKTt0aGlzLmR1cGxleEltcG9zaXRpb249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuZHVwbGV4SW1wb3NpdGlvbixbImxvbmdFZGdlIiwic2hvcnRFZGdlIl0pO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy5yZWxhdGlvbj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5yZWxhdGlvbixbIm9yZGVyZWRPY2N1cnJlbmNlIiwiZHVwbGV4UGFnaW5hdGVkIiwic2ltcGxleFBhZ2luYXRlZCJdKTt0aGlzLnJlbGV2YW50PSgwLGMuZ2V0UmVsZXZhbnQpKGUucmVsZXZhbnQpO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmV4dHJhcz1udWxsO3RoaXMub2NjdXI9bnVsbDt0aGlzLnBhZ2VBcmVhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMucGFnZVNldD1uZXcgby5YRkFPYmplY3RBcnJheX1bci4kY2xlYW5QYWdlXSgpe2Zvcihjb25zdCBlIG9mIHRoaXMucGFnZUFyZWEuY2hpbGRyZW4pZVtyLiRjbGVhblBhZ2VdKCk7Zm9yKGNvbnN0IGUgb2YgdGhpcy5wYWdlU2V0LmNoaWxkcmVuKWVbci4kY2xlYW5QYWdlXSgpfVtyLiRpc1VzYWJsZV0oKXtyZXR1cm4hdGhpcy5vY2N1cnx8LTE9PT10aGlzLm9jY3VyLm1heHx8dGhpc1tyLiRleHRyYV0ubnVtYmVyT2ZVc2U8dGhpcy5vY2N1ci5tYXh9W3IuJGdldE5leHRQYWdlXSgpe3RoaXNbci4kZXh0cmFdfHwodGhpc1tyLiRleHRyYV09e251bWJlck9mVXNlOjEscGFnZUluZGV4Oi0xLHBhZ2VTZXRJbmRleDotMX0pO2lmKCJvcmRlcmVkT2NjdXJyZW5jZSI9PT10aGlzLnJlbGF0aW9uKXtpZih0aGlzW3IuJGV4dHJhXS5wYWdlSW5kZXgrMTx0aGlzLnBhZ2VBcmVhLmNoaWxkcmVuLmxlbmd0aCl7dGhpc1tyLiRleHRyYV0ucGFnZUluZGV4Kz0xO3JldHVybiB0aGlzLnBhZ2VBcmVhLmNoaWxkcmVuW3RoaXNbci4kZXh0cmFdLnBhZ2VJbmRleF1bci4kZ2V0TmV4dFBhZ2VdKCl9aWYodGhpc1tyLiRleHRyYV0ucGFnZVNldEluZGV4KzE8dGhpcy5wYWdlU2V0LmNoaWxkcmVuLmxlbmd0aCl7dGhpc1tyLiRleHRyYV0ucGFnZVNldEluZGV4Kz0xO3JldHVybiB0aGlzLnBhZ2VTZXQuY2hpbGRyZW5bdGhpc1tyLiRleHRyYV0ucGFnZVNldEluZGV4XVtyLiRnZXROZXh0UGFnZV0oKX1pZih0aGlzW3IuJGlzVXNhYmxlXSgpKXt0aGlzW3IuJGV4dHJhXS5udW1iZXJPZlVzZSs9MTt0aGlzW3IuJGV4dHJhXS5wYWdlSW5kZXg9LTE7dGhpc1tyLiRleHRyYV0ucGFnZVNldEluZGV4PS0xO3JldHVybiB0aGlzW3IuJGdldE5leHRQYWdlXSgpfWNvbnN0IGU9dGhpc1tyLiRnZXRQYXJlbnRdKCk7aWYoZSBpbnN0YW5jZW9mIFBhZ2VTZXQpcmV0dXJuIGVbci4kZ2V0TmV4dFBhZ2VdKCk7dGhpc1tyLiRjbGVhblBhZ2VdKCk7cmV0dXJuIHRoaXNbci4kZ2V0TmV4dFBhZ2VdKCl9Y29uc3QgZT10aGlzW3IuJGdldFRlbXBsYXRlUm9vdF0oKVtyLiRleHRyYV0ucGFnZU51bWJlcix0PWUlMj09MD8iZXZlbiI6Im9kZCIsYT0wPT09ZT8iZmlyc3QiOiJyZXN0IjtsZXQgbj10aGlzLnBhZ2VBcmVhLmNoaWxkcmVuLmZpbmQoKGU9PmUub2RkT3JFdmVuPT09dCYmZS5wYWdlUG9zaXRpb249PT1hKSk7aWYobilyZXR1cm4gbjtuPXRoaXMucGFnZUFyZWEuY2hpbGRyZW4uZmluZCgoZT0+ImFueSI9PT1lLm9kZE9yRXZlbiYmZS5wYWdlUG9zaXRpb249PT1hKSk7aWYobilyZXR1cm4gbjtuPXRoaXMucGFnZUFyZWEuY2hpbGRyZW4uZmluZCgoZT0+ImFueSI9PT1lLm9kZE9yRXZlbiYmImFueSI9PT1lLnBhZ2VQb3NpdGlvbikpO3JldHVybiBufHx0aGlzLnBhZ2VBcmVhLmNoaWxkcmVuWzBdfX1jbGFzcyBQYXJhIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwicGFyYSIsITApO3RoaXMuaEFsaWduPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmhBbGlnbixbImxlZnQiLCJjZW50ZXIiLCJqdXN0aWZ5IiwianVzdGlmeUFsbCIsInJhZGl4IiwicmlnaHQiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLmxpbmVIZWlnaHQ9ZS5saW5lSGVpZ2h0PygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubGluZUhlaWdodCwiMHB0Iik6IiI7dGhpcy5tYXJnaW5MZWZ0PWUubWFyZ2luTGVmdD8oMCxjLmdldE1lYXN1cmVtZW50KShlLm1hcmdpbkxlZnQsIjBwdCIpOiIiO3RoaXMubWFyZ2luUmlnaHQ9ZS5tYXJnaW5SaWdodD8oMCxjLmdldE1lYXN1cmVtZW50KShlLm1hcmdpblJpZ2h0LCIwcHQiKToiIjt0aGlzLm9ycGhhbnM9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLm9ycGhhbnMsZGVmYXVsdFZhbHVlOjAsdmFsaWRhdGU6ZT0+ZT49MH0pO3RoaXMucHJlc2VydmU9ZS5wcmVzZXJ2ZXx8IiI7dGhpcy5yYWRpeE9mZnNldD1lLnJhZGl4T2Zmc2V0PygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUucmFkaXhPZmZzZXQsIjBwdCIpOiIiO3RoaXMuc3BhY2VBYm92ZT1lLnNwYWNlQWJvdmU/KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5zcGFjZUFib3ZlLCIwcHQiKToiIjt0aGlzLnNwYWNlQmVsb3c9ZS5zcGFjZUJlbG93PygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUuc3BhY2VCZWxvdywiMHB0Iik6IiI7dGhpcy50YWJEZWZhdWx0PWUudGFiRGVmYXVsdD8oMCxjLmdldE1lYXN1cmVtZW50KSh0aGlzLnRhYkRlZmF1bHQpOiIiO3RoaXMudGFiU3RvcHM9KGUudGFiU3RvcHN8fCIiKS50cmltKCkuc3BsaXQoL1xzKy8pLm1hcCgoKGUsdCk9PnQlMj09MT8oMCxjLmdldE1lYXN1cmVtZW50KShlKTplKSk7dGhpcy50ZXh0SW5kZW50PWUudGV4dEluZGVudD8oMCxjLmdldE1lYXN1cmVtZW50KShlLnRleHRJbmRlbnQsIjBwdCIpOiIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLnZBbGlnbj0oMCxjLmdldFN0cmluZ09wdGlvbikoZS52QWxpZ24sWyJ0b3AiLCJib3R0b20iLCJtaWRkbGUiXSk7dGhpcy53aWRvd3M9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLndpZG93cyxkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT5lPj0wfSk7dGhpcy5oeXBoZW5hdGlvbj1udWxsfVtyLiR0b1N0eWxlXSgpe2NvbnN0IGU9KDAscy50b1N0eWxlKSh0aGlzLCJoQWxpZ24iKTsiIiE9PXRoaXMubWFyZ2luTGVmdCYmKGUucGFkZGluZ0xlZnQ9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMubWFyZ2luTGVmdCkpOyIiIT09dGhpcy5tYXJnaW5SaWdodCYmKGUucGFkZGluZ2lnaHQ9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMubWFyZ2luUmlnaHQpKTsiIiE9PXRoaXMuc3BhY2VBYm92ZSYmKGUucGFkZGluZ1RvcD0oMCxzLm1lYXN1cmVUb1N0cmluZykodGhpcy5zcGFjZUFib3ZlKSk7IiIhPT10aGlzLnNwYWNlQmVsb3cmJihlLnBhZGRpbmdCb3R0b209KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMuc3BhY2VCZWxvdykpO2lmKCIiIT09dGhpcy50ZXh0SW5kZW50KXtlLnRleHRJbmRlbnQ9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMudGV4dEluZGVudCk7KDAscy5maXhUZXh0SW5kZW50KShlKX10aGlzLmxpbmVIZWlnaHQ+MCYmKGUubGluZUhlaWdodD0oMCxzLm1lYXN1cmVUb1N0cmluZykodGhpcy5saW5lSGVpZ2h0KSk7IiIhPT10aGlzLnRhYkRlZmF1bHQmJihlLnRhYlNpemU9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHRoaXMudGFiRGVmYXVsdCkpO3RoaXMudGFiU3RvcHMubGVuZ3RoO3RoaXMuaHlwaGVuYXRhdGlvbiYmT2JqZWN0LmFzc2lnbihlLHRoaXMuaHlwaGVuYXRhdGlvbltyLiR0b1N0eWxlXSgpKTtyZXR1cm4gZX19Y2xhc3MgUGFzc3dvcmRFZGl0IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwicGFzc3dvcmRFZGl0IiwhMCk7dGhpcy5oU2Nyb2xsUG9saWN5PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmhTY3JvbGxQb2xpY3ksWyJhdXRvIiwib2ZmIiwib24iXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnBhc3N3b3JkQ2hhcj1lLnBhc3N3b3JkQ2hhcnx8IioiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmJvcmRlcj1udWxsO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5tYXJnaW49bnVsbH19Y2xhc3MgUGF0dGVybiBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInBhdHRlcm4iLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudHlwZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS50eXBlLFsiY3Jvc3NIYXRjaCIsImNyb3NzRGlhZ29uYWwiLCJkaWFnb25hbExlZnQiLCJkaWFnb25hbFJpZ2h0IiwiaG9yaXpvbnRhbCIsInZlcnRpY2FsIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmNvbG9yPW51bGw7dGhpcy5leHRyYXM9bnVsbH1bci4kdG9TdHlsZV0oZSl7ZT1lP2Vbci4kdG9TdHlsZV0oKToiI0ZGRkZGRiI7Y29uc3QgdD10aGlzLmNvbG9yP3RoaXMuY29sb3Jbci4kdG9TdHlsZV0oKToiIzAwMDAwMCIsYT0icmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudCIsbj1gJHtlfSwke2V9IDVweCwke3R9IDVweCwke3R9IDEwcHhgO3N3aXRjaCh0aGlzLnR5cGUpe2Nhc2UiY3Jvc3NIYXRjaCI6cmV0dXJuYCR7YX0odG8gdG9wLCR7bn0pICR7YX0odG8gcmlnaHQsJHtufSlgO2Nhc2UiY3Jvc3NEaWFnb25hbCI6cmV0dXJuYCR7YX0oNDVkZWcsJHtufSkgJHthfSgtNDVkZWcsJHtufSlgO2Nhc2UiZGlhZ29uYWxMZWZ0IjpyZXR1cm5gJHthfSg0NWRlZywke259KWA7Y2FzZSJkaWFnb25hbFJpZ2h0IjpyZXR1cm5gJHthfSgtNDVkZWcsJHtufSlgO2Nhc2UiaG9yaXpvbnRhbCI6cmV0dXJuYCR7YX0odG8gdG9wLCR7bn0pYDtjYXNlInZlcnRpY2FsIjpyZXR1cm5gJHthfSh0byByaWdodCwke259KWB9cmV0dXJuIiJ9fWNsYXNzIFBpY3R1cmUgZXh0ZW5kcyBvLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJwaWN0dXJlIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIFByb3RvIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwicHJvdG8iLCEwKTt0aGlzLmFwcGVhcmFuY2VGaWx0ZXI9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5hcmM9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5hcmVhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuYXNzaXN0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuYmFyY29kZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmJpbmRJdGVtcz1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmJvb2tlbmQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5ib29sZWFuPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuYm9yZGVyPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuYnJlYWs9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5icmVha0FmdGVyPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuYnJlYWtCZWZvcmU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5idXR0b249bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jYWxjdWxhdGU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jYXB0aW9uPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuY2VydGlmaWNhdGU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jZXJ0aWZpY2F0ZXM9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jaGVja0J1dHRvbj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmNob2ljZUxpc3Q9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jb2xvcj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmNvbWI9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jb25uZWN0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuY29udGVudEFyZWE9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5jb3JuZXI9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kYXRlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGF0ZVRpbWU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kYXRlVGltZUVkaXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kZWNpbWFsPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGVmYXVsdFVpPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGVzYz1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRpZ2VzdE1ldGhvZD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRpZ2VzdE1ldGhvZHM9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kcmF3PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZWRnZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmVuY29kaW5nPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZW5jb2RpbmdzPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZW5jcnlwdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmVuY3J5cHREYXRhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZW5jcnlwdGlvbj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmVuY3J5cHRpb25NZXRob2Q9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5lbmNyeXB0aW9uTWV0aG9kcz1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV2ZW50PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZXhEYXRhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZXhPYmplY3Q9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5leGNsR3JvdXA9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5leGVjdXRlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZXh0cmFzPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZmllbGQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5maWxsPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZmlsdGVyPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZmxvYXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5mb250PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZm9ybWF0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuaGFuZGxlcj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmh5cGhlbmF0aW9uPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuaW1hZ2U9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5pbWFnZUVkaXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5pbnRlZ2VyPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuaXNzdWVycz1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLml0ZW1zPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMua2VlcD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmtleVVzYWdlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMubGluZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmxpbmVhcj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmxvY2tEb2N1bWVudD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLm1hbmlmZXN0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMubWFyZ2luPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMubWRwPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMubWVkaXVtPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMubWVzc2FnZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLm51bWVyaWNFZGl0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMub2NjdXI9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5vaWQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5vaWRzPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMub3ZlcmZsb3c9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5wYWdlQXJlYT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnBhZ2VTZXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5wYXJhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMucGFzc3dvcmRFZGl0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMucGF0dGVybj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnBpY3R1cmU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5yYWRpYWw9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5yZWFzb249bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5yZWFzb25zPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMucmVjdGFuZ2xlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMucmVmPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc2NyaXB0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc2V0UHJvcGVydHk9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5zaWduRGF0YT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnNpZ25hdHVyZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnNpZ25pbmc9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5zb2xpZD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnNwZWFrPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc3RpcHBsZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnN1YmZvcm09bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5zdWJmb3JtU2V0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc3ViamVjdEROPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc3ViamVjdEROcz1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnN1Ym1pdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnRleHQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy50ZXh0RWRpdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnRpbWU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy50aW1lU3RhbXA9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy50b29sVGlwPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMudHJhdmVyc2FsPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMudHJhdmVyc2U9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy51aT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnZhbGlkYXRlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMudmFsdWU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy52YXJpYWJsZXM9bmV3IG8uWEZBT2JqZWN0QXJyYXl9fWNsYXNzIFJhZGlhbCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInJhZGlhbCIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy50eXBlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnR5cGUsWyJ0b0VkZ2UiLCJ0b0NlbnRlciJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jb2xvcj1udWxsO3RoaXMuZXh0cmFzPW51bGx9W3IuJHRvU3R5bGVdKGUpe2U9ZT9lW3IuJHRvU3R5bGVdKCk6IiNGRkZGRkYiO2NvbnN0IHQ9dGhpcy5jb2xvcj90aGlzLmNvbG9yW3IuJHRvU3R5bGVdKCk6IiMwMDAwMDAiO3JldHVybmByYWRpYWwtZ3JhZGllbnQoY2lyY2xlIGF0IGNlbnRlciwgJHsidG9FZGdlIj09PXRoaXMudHlwZT9gJHtlfSwke3R9YDpgJHt0fSwke2V9YH0pYH19Y2xhc3MgUmVhc29uIGV4dGVuZHMgby5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwicmVhc29uIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIFJlYXNvbnMgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJyZWFzb25zIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHlwZSxbIm9wdGlvbmFsIiwicmVxdWlyZWQiXSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMucmVhc29uPW5ldyBvLlhGQU9iamVjdEFycmF5fX1jbGFzcyBSZWN0YW5nbGUgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJyZWN0YW5nbGUiLCEwKTt0aGlzLmhhbmQ9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuaGFuZCxbImV2ZW4iLCJsZWZ0IiwicmlnaHQiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5jb3JuZXI9bmV3IG8uWEZBT2JqZWN0QXJyYXkoNCk7dGhpcy5lZGdlPW5ldyBvLlhGQU9iamVjdEFycmF5KDQpO3RoaXMuZmlsbD1udWxsfVtyLiR0b0hUTUxdKCl7Y29uc3QgZT10aGlzLmVkZ2UuY2hpbGRyZW4ubGVuZ3RoP3RoaXMuZWRnZS5jaGlsZHJlblswXTpuZXcgRWRnZSh7fSksdD1lW3IuJHRvU3R5bGVdKCksYT1PYmplY3QuY3JlYXRlKG51bGwpOyJ2aXNpYmxlIj09PXRoaXMuZmlsbD8ucHJlc2VuY2U/T2JqZWN0LmFzc2lnbihhLHRoaXMuZmlsbFtyLiR0b1N0eWxlXSgpKTphLmZpbGw9InRyYW5zcGFyZW50IjthLnN0cm9rZVdpZHRoPSgwLHMubWVhc3VyZVRvU3RyaW5nKSgidmlzaWJsZSI9PT1lLnByZXNlbmNlP2UudGhpY2tuZXNzOjApO2Euc3Ryb2tlPXQuY29sb3I7Y29uc3Qgbj0odGhpcy5jb3JuZXIuY2hpbGRyZW4ubGVuZ3RoP3RoaXMuY29ybmVyLmNoaWxkcmVuWzBdOm5ldyBDb3JuZXIoe30pKVtyLiR0b1N0eWxlXSgpLGk9e25hbWU6InN2ZyIsY2hpbGRyZW46W3tuYW1lOiJyZWN0IixhdHRyaWJ1dGVzOnt4bWxuczpnLHdpZHRoOiIxMDAlIixoZWlnaHQ6IjEwMCUiLHg6MCx5OjAscng6bi5yYWRpdXMscnk6bi5yYWRpdXMsc3R5bGU6YX19XSxhdHRyaWJ1dGVzOnt4bWxuczpnLHN0eWxlOntvdmVyZmxvdzoidmlzaWJsZSJ9LHdpZHRoOiIxMDAlIixoZWlnaHQ6IjEwMCUifX07aWYoaGFzTWFyZ2luKHRoaXNbci4kZ2V0UGFyZW50XSgpW3IuJGdldFBhcmVudF0oKSkpcmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKHtuYW1lOiJkaXYiLGF0dHJpYnV0ZXM6e3N0eWxlOntkaXNwbGF5OiJpbmxpbmUiLHdpZHRoOiIxMDAlIixoZWlnaHQ6IjEwMCUifX0sY2hpbGRyZW46W2ldfSk7aS5hdHRyaWJ1dGVzLnN0eWxlLnBvc2l0aW9uPSJhYnNvbHV0ZSI7cmV0dXJuIGMuSFRNTFJlc3VsdC5zdWNjZXNzKGkpfX1jbGFzcyBSZWZFbGVtZW50IGV4dGVuZHMgby5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwicmVmIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIFNjcmlwdCBleHRlbmRzIG8uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInNjcmlwdCIpO3RoaXMuYmluZGluZz1lLmJpbmRpbmd8fCIiO3RoaXMuY29udGVudFR5cGU9ZS5jb250ZW50VHlwZXx8IiI7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnJ1bkF0PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnJ1bkF0LFsiY2xpZW50IiwiYm90aCIsInNlcnZlciJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIFNldFByb3BlcnR5IGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwic2V0UHJvcGVydHkiKTt0aGlzLmNvbm5lY3Rpb249ZS5jb25uZWN0aW9ufHwiIjt0aGlzLnJlZj1lLnJlZnx8IiI7dGhpcy50YXJnZXQ9ZS50YXJnZXR8fCIifX10LlNldFByb3BlcnR5PVNldFByb3BlcnR5O2NsYXNzIFNpZ25EYXRhIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwic2lnbkRhdGEiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMub3BlcmF0aW9uPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLm9wZXJhdGlvbixbInNpZ24iLCJjbGVhciIsInZlcmlmeSJdKTt0aGlzLnJlZj1lLnJlZnx8IiI7dGhpcy50YXJnZXQ9ZS50YXJnZXR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmZpbHRlcj1udWxsO3RoaXMubWFuaWZlc3Q9bnVsbH19Y2xhc3MgU2lnbmF0dXJlIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwic2lnbmF0dXJlIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHlwZSxbIlBERjEuMyIsIlBERjEuNiJdKTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5ib3JkZXI9bnVsbDt0aGlzLmV4dHJhcz1udWxsO3RoaXMuZmlsdGVyPW51bGw7dGhpcy5tYW5pZmVzdD1udWxsO3RoaXMubWFyZ2luPW51bGx9fWNsYXNzIFNpZ25pbmcgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJzaWduaW5nIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHlwZSxbIm9wdGlvbmFsIiwicmVxdWlyZWQiXSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuY2VydGlmaWNhdGU9bmV3IG8uWEZBT2JqZWN0QXJyYXl9fWNsYXNzIFNvbGlkIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwic29saWQiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmV4dHJhcz1udWxsfVtyLiR0b1N0eWxlXShlKXtyZXR1cm4gZT9lW3IuJHRvU3R5bGVdKCk6IiNGRkZGRkYifX1jbGFzcyBTcGVhayBleHRlbmRzIG8uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInNwZWFrIik7dGhpcy5kaXNhYmxlPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5kaXNhYmxlLGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnByaW9yaXR5PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnByaW9yaXR5LFsiY3VzdG9tIiwiY2FwdGlvbiIsIm5hbWUiLCJ0b29sVGlwIl0pO3RoaXMucmlkPWUucmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIFN0aXBwbGUgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJzdGlwcGxlIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnJhdGU9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnJhdGUsZGVmYXVsdFZhbHVlOjUwLHZhbGlkYXRlOmU9PmU+PTAmJmU8PTEwMH0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmNvbG9yPW51bGw7dGhpcy5leHRyYXM9bnVsbH1bci4kdG9TdHlsZV0oZSl7Y29uc3QgdD10aGlzLnJhdGUvMTAwO3JldHVybiBsLlV0aWwubWFrZUhleENvbG9yKE1hdGgucm91bmQoZS52YWx1ZS5yKigxLXQpK3RoaXMudmFsdWUucip0KSxNYXRoLnJvdW5kKGUudmFsdWUuZyooMS10KSt0aGlzLnZhbHVlLmcqdCksTWF0aC5yb3VuZChlLnZhbHVlLmIqKDEtdCkrdGhpcy52YWx1ZS5iKnQpKX19Y2xhc3MgU3ViZm9ybSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInN1YmZvcm0iLCEwKTt0aGlzLmFjY2Vzcz0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5hY2Nlc3MsWyJvcGVuIiwibm9uSW50ZXJhY3RpdmUiLCJwcm90ZWN0ZWQiLCJyZWFkT25seSJdKTt0aGlzLmFsbG93TWFjcm89KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmFsbG93TWFjcm8sZGVmYXVsdFZhbHVlOjAsdmFsaWRhdGU6ZT0+MT09PWV9KTt0aGlzLmFuY2hvclR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuYW5jaG9yVHlwZSxbInRvcExlZnQiLCJib3R0b21DZW50ZXIiLCJib3R0b21MZWZ0IiwiYm90dG9tUmlnaHQiLCJtaWRkbGVDZW50ZXIiLCJtaWRkbGVMZWZ0IiwibWlkZGxlUmlnaHQiLCJ0b3BDZW50ZXIiLCJ0b3BSaWdodCJdKTt0aGlzLmNvbFNwYW49KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLmNvbFNwYW4sZGVmYXVsdFZhbHVlOjEsdmFsaWRhdGU6ZT0+ZT49MXx8LTE9PT1lfSk7dGhpcy5jb2x1bW5XaWR0aHM9KGUuY29sdW1uV2lkdGhzfHwiIikudHJpbSgpLnNwbGl0KC9ccysvKS5tYXAoKGU9PiItMSI9PT1lPy0xOigwLGMuZ2V0TWVhc3VyZW1lbnQpKGUpKSk7dGhpcy5oPWUuaD8oMCxjLmdldE1lYXN1cmVtZW50KShlLmgpOiIiO3RoaXMuaEFsaWduPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmhBbGlnbixbImxlZnQiLCJjZW50ZXIiLCJqdXN0aWZ5IiwianVzdGlmeUFsbCIsInJhZGl4IiwicmlnaHQiXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLmxheW91dD0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5sYXlvdXQsWyJwb3NpdGlvbiIsImxyLXRiIiwicmwtcm93IiwicmwtdGIiLCJyb3ciLCJ0YWJsZSIsInRiIl0pO3RoaXMubG9jYWxlPWUubG9jYWxlfHwiIjt0aGlzLm1heEg9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5tYXhILCIwcHQiKTt0aGlzLm1heFc9KDAsYy5nZXRNZWFzdXJlbWVudCkoZS5tYXhXLCIwcHQiKTt0aGlzLm1lcmdlTW9kZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5tZXJnZU1vZGUsWyJjb25zdW1lRGF0YSIsIm1hdGNoVGVtcGxhdGUiXSk7dGhpcy5taW5IPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWluSCwiMHB0Iik7dGhpcy5taW5XPSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUubWluVywiMHB0Iik7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy5wcmVzZW5jZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5wcmVzZW5jZSxbInZpc2libGUiLCJoaWRkZW4iLCJpbmFjdGl2ZSIsImludmlzaWJsZSJdKTt0aGlzLnJlbGV2YW50PSgwLGMuZ2V0UmVsZXZhbnQpKGUucmVsZXZhbnQpO3RoaXMucmVzdG9yZVN0YXRlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnJlc3RvcmVTdGF0ZSxbIm1hbnVhbCIsImF1dG8iXSk7dGhpcy5zY29wZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5zY29wZSxbIm5hbWUiLCJub25lIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLnc9ZS53PygwLGMuZ2V0TWVhc3VyZW1lbnQpKGUudyk6IiI7dGhpcy54PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUueCwiMHB0Iik7dGhpcy55PSgwLGMuZ2V0TWVhc3VyZW1lbnQpKGUueSwiMHB0Iik7dGhpcy5hc3Npc3Q9bnVsbDt0aGlzLmJpbmQ9bnVsbDt0aGlzLmJvb2tlbmQ9bnVsbDt0aGlzLmJvcmRlcj1udWxsO3RoaXMuYnJlYWs9bnVsbDt0aGlzLmNhbGN1bGF0ZT1udWxsO3RoaXMuZGVzYz1udWxsO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5rZWVwPW51bGw7dGhpcy5tYXJnaW49bnVsbDt0aGlzLm9jY3VyPW51bGw7dGhpcy5vdmVyZmxvdz1udWxsO3RoaXMucGFnZVNldD1udWxsO3RoaXMucGFyYT1udWxsO3RoaXMudHJhdmVyc2FsPW51bGw7dGhpcy52YWxpZGF0ZT1udWxsO3RoaXMudmFyaWFibGVzPW51bGw7dGhpcy5hcmVhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuYnJlYWtBZnRlcj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmJyZWFrQmVmb3JlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuY29ubmVjdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmRyYXc9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5ldmVudD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmV4T2JqZWN0PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZXhjbEdyb3VwPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZmllbGQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5wcm90bz1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnNldFByb3BlcnR5PW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc3ViZm9ybT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnN1YmZvcm1TZXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXl9W3IuJGdldFN1YmZvcm1QYXJlbnRdKCl7Y29uc3QgZT10aGlzW3IuJGdldFBhcmVudF0oKTtyZXR1cm4gZSBpbnN0YW5jZW9mIFN1YmZvcm1TZXQ/ZVtyLiRnZXRTdWJmb3JtUGFyZW50XSgpOmV9W3IuJGlzQmluZGFibGVdKCl7cmV0dXJuITB9W3IuJGlzVGhlcmVNb3JlV2lkdGhdKCl7cmV0dXJuIHRoaXMubGF5b3V0LmVuZHNXaXRoKCItdGIiKSYmMD09PXRoaXNbci4kZXh0cmFdLmF0dGVtcHQmJnRoaXNbci4kZXh0cmFdLm51bWJlckluTGluZT4wfHx0aGlzW3IuJGdldFBhcmVudF0oKVtyLiRpc1RoZXJlTW9yZVdpZHRoXSgpfSpbci4kZ2V0Q29udGFpbmVkQ2hpbGRyZW5dKCl7eWllbGQqZ2V0Q29udGFpbmVkQ2hpbGRyZW4odGhpcyl9W3IuJGZsdXNoSFRNTF0oKXtyZXR1cm4oMCxpLmZsdXNoSFRNTCkodGhpcyl9W3IuJGFkZEhUTUxdKGUsdCl7KDAsaS5hZGRIVE1MKSh0aGlzLGUsdCl9W3IuJGdldEF2YWlsYWJsZVNwYWNlXSgpe3JldHVybigwLGkuZ2V0QXZhaWxhYmxlU3BhY2UpKHRoaXMpfVtyLiRpc1NwbGl0dGFibGVdKCl7Y29uc3QgZT10aGlzW3IuJGdldFN1YmZvcm1QYXJlbnRdKCk7aWYoIWVbci4kaXNTcGxpdHRhYmxlXSgpKXJldHVybiExO2lmKHZvaWQgMCE9PXRoaXNbci4kZXh0cmFdLl9pc1NwbGl0dGFibGUpcmV0dXJuIHRoaXNbci4kZXh0cmFdLl9pc1NwbGl0dGFibGU7aWYoInBvc2l0aW9uIj09PXRoaXMubGF5b3V0fHx0aGlzLmxheW91dC5pbmNsdWRlcygicm93Iikpe3RoaXNbci4kZXh0cmFdLl9pc1NwbGl0dGFibGU9ITE7cmV0dXJuITF9aWYodGhpcy5rZWVwJiYibm9uZSIhPT10aGlzLmtlZXAuaW50YWN0KXt0aGlzW3IuJGV4dHJhXS5faXNTcGxpdHRhYmxlPSExO3JldHVybiExfWlmKGUubGF5b3V0Py5lbmRzV2l0aCgiLXRiIikmJjAhPT1lW3IuJGV4dHJhXS5udW1iZXJJbkxpbmUpcmV0dXJuITE7dGhpc1tyLiRleHRyYV0uX2lzU3BsaXR0YWJsZT0hMDtyZXR1cm4hMH1bci4kdG9IVE1MXShlKXtzZXRUYWJJbmRleCh0aGlzKTtpZih0aGlzLmJyZWFrKXtpZigiYXV0byIhPT10aGlzLmJyZWFrLmFmdGVyfHwiIiE9PXRoaXMuYnJlYWsuYWZ0ZXJUYXJnZXQpe2NvbnN0IGU9bmV3IEJyZWFrQWZ0ZXIoe3RhcmdldFR5cGU6dGhpcy5icmVhay5hZnRlcix0YXJnZXQ6dGhpcy5icmVhay5hZnRlclRhcmdldCxzdGFydE5ldzp0aGlzLmJyZWFrLnN0YXJ0TmV3LnRvU3RyaW5nKCl9KTtlW3IuJGdsb2JhbERhdGFdPXRoaXNbci4kZ2xvYmFsRGF0YV07dGhpc1tyLiRhcHBlbmRDaGlsZF0oZSk7dGhpcy5icmVha0FmdGVyLnB1c2goZSl9aWYoImF1dG8iIT09dGhpcy5icmVhay5iZWZvcmV8fCIiIT09dGhpcy5icmVhay5iZWZvcmVUYXJnZXQpe2NvbnN0IGU9bmV3IEJyZWFrQmVmb3JlKHt0YXJnZXRUeXBlOnRoaXMuYnJlYWsuYmVmb3JlLHRhcmdldDp0aGlzLmJyZWFrLmJlZm9yZVRhcmdldCxzdGFydE5ldzp0aGlzLmJyZWFrLnN0YXJ0TmV3LnRvU3RyaW5nKCl9KTtlW3IuJGdsb2JhbERhdGFdPXRoaXNbci4kZ2xvYmFsRGF0YV07dGhpc1tyLiRhcHBlbmRDaGlsZF0oZSk7dGhpcy5icmVha0JlZm9yZS5wdXNoKGUpfWlmKCIiIT09dGhpcy5icmVhay5vdmVyZmxvd1RhcmdldCl7Y29uc3QgZT1uZXcgT3ZlcmZsb3coe3RhcmdldDp0aGlzLmJyZWFrLm92ZXJmbG93VGFyZ2V0LGxlYWRlcjp0aGlzLmJyZWFrLm92ZXJmbG93TGVhZGVyLHRyYWlsZXI6dGhpcy5icmVhay5vdmVyZmxvd1RyYWlsZXJ9KTtlW3IuJGdsb2JhbERhdGFdPXRoaXNbci4kZ2xvYmFsRGF0YV07dGhpc1tyLiRhcHBlbmRDaGlsZF0oZSk7dGhpcy5vdmVyZmxvdy5wdXNoKGUpfXRoaXNbci4kcmVtb3ZlQ2hpbGRdKHRoaXMuYnJlYWspO3RoaXMuYnJlYWs9bnVsbH1pZigiaGlkZGVuIj09PXRoaXMucHJlc2VuY2V8fCJpbmFjdGl2ZSI9PT10aGlzLnByZXNlbmNlKXJldHVybiBjLkhUTUxSZXN1bHQuRU1QVFk7KHRoaXMuYnJlYWtCZWZvcmUuY2hpbGRyZW4ubGVuZ3RoPjF8fHRoaXMuYnJlYWtBZnRlci5jaGlsZHJlbi5sZW5ndGg+MSkmJigwLGwud2FybikoIlhGQSAtIFNldmVyYWwgYnJlYWtCZWZvcmUgb3IgYnJlYWtBZnRlciBpbiBzdWJmb3JtczogcGxlYXNlIGZpbGUgYSBidWcuIik7aWYodGhpcy5icmVha0JlZm9yZS5jaGlsZHJlbi5sZW5ndGg+PTEpe2NvbnN0IGU9dGhpcy5icmVha0JlZm9yZS5jaGlsZHJlblswXTtpZihoYW5kbGVCcmVhayhlKSlyZXR1cm4gYy5IVE1MUmVzdWx0LmJyZWFrTm9kZShlKX1pZih0aGlzW3IuJGV4dHJhXT8uYWZ0ZXJCcmVha0FmdGVyKXJldHVybiBjLkhUTUxSZXN1bHQuRU1QVFk7KDAscy5maXhEaW1lbnNpb25zKSh0aGlzKTtjb25zdCB0PVtdLGE9e2lkOnRoaXNbci4kdWlkXSxjbGFzczpbXX07KDAscy5zZXRBY2Nlc3MpKHRoaXMsYS5jbGFzcyk7dGhpc1tyLiRleHRyYV18fCh0aGlzW3IuJGV4dHJhXT1PYmplY3QuY3JlYXRlKG51bGwpKTtPYmplY3QuYXNzaWduKHRoaXNbci4kZXh0cmFdLHtjaGlsZHJlbjp0LGxpbmU6bnVsbCxhdHRyaWJ1dGVzOmEsYXR0ZW1wdDowLG51bWJlckluTGluZTowLGF2YWlsYWJsZVNwYWNlOnt3aWR0aDpNYXRoLm1pbih0aGlzLnd8fDEvMCxlLndpZHRoKSxoZWlnaHQ6TWF0aC5taW4odGhpcy5ofHwxLzAsZS5oZWlnaHQpfSx3aWR0aDowLGhlaWdodDowLHByZXZIZWlnaHQ6MCxjdXJyZW50V2lkdGg6MH0pO2NvbnN0IG49dGhpc1tyLiRnZXRUZW1wbGF0ZVJvb3RdKCksbz1uW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmUsaD10aGlzW3IuJGlzU3BsaXR0YWJsZV0oKTtofHxzZXRGaXJzdFVuc3BsaXR0YWJsZSh0aGlzKTtpZighKDAsaS5jaGVja0RpbWVuc2lvbnMpKHRoaXMsZSkpcmV0dXJuIGMuSFRNTFJlc3VsdC5GQUlMVVJFO2NvbnN0IHU9bmV3IFNldChbImFyZWEiLCJkcmF3IiwiZXhjbEdyb3VwIiwiZmllbGQiLCJzdWJmb3JtIiwic3ViZm9ybVNldCJdKTtpZih0aGlzLmxheW91dC5pbmNsdWRlcygicm93Iikpe2NvbnN0IGU9dGhpc1tyLiRnZXRTdWJmb3JtUGFyZW50XSgpLmNvbHVtbldpZHRocztpZihBcnJheS5pc0FycmF5KGUpJiZlLmxlbmd0aD4wKXt0aGlzW3IuJGV4dHJhXS5jb2x1bW5XaWR0aHM9ZTt0aGlzW3IuJGV4dHJhXS5jdXJyZW50Q29sdW1uPTB9fWNvbnN0IGQ9KDAscy50b1N0eWxlKSh0aGlzLCJhbmNob3JUeXBlIiwiZGltZW5zaW9ucyIsInBvc2l0aW9uIiwicHJlc2VuY2UiLCJib3JkZXIiLCJtYXJnaW4iLCJoQWxpZ24iKSxmPVsieGZhU3ViZm9ybSJdLGc9KDAscy5sYXlvdXRDbGFzcykodGhpcyk7ZyYmZi5wdXNoKGcpO2Euc3R5bGU9ZDthLmNsYXNzPWY7dGhpcy5uYW1lJiYoYS54ZmFOYW1lPXRoaXMubmFtZSk7aWYodGhpcy5vdmVyZmxvdyl7Y29uc3QgdD10aGlzLm92ZXJmbG93W3IuJGdldEV4dHJhXSgpO2lmKHQuYWRkTGVhZGVyKXt0LmFkZExlYWRlcj0hMTtoYW5kbGVPdmVyZmxvdyh0aGlzLHQubGVhZGVyLGUpfX10aGlzW3IuJHB1c2hQYXJhXSgpO2NvbnN0IHA9ImxyLXRiIj09PXRoaXMubGF5b3V0fHwicmwtdGIiPT09dGhpcy5sYXlvdXQsbT1wPzI6MTtmb3IoO3RoaXNbci4kZXh0cmFdLmF0dGVtcHQ8bTt0aGlzW3IuJGV4dHJhXS5hdHRlbXB0Kyspe3AmJjE9PT10aGlzW3IuJGV4dHJhXS5hdHRlbXB0JiYodGhpc1tyLiRleHRyYV0ubnVtYmVySW5MaW5lPTApO2NvbnN0IGU9dGhpc1tyLiRjaGlsZHJlblRvSFRNTF0oe2ZpbHRlcjp1LGluY2x1ZGU6ITB9KTtpZihlLnN1Y2Nlc3MpYnJlYWs7aWYoZS5pc0JyZWFrKCkpe3RoaXNbci4kcG9wUGFyYV0oKTtyZXR1cm4gZX1pZihwJiYwPT09dGhpc1tyLiRleHRyYV0uYXR0ZW1wdCYmMD09PXRoaXNbci4kZXh0cmFdLm51bWJlckluTGluZSYmIW5bci4kZXh0cmFdLm5vTGF5b3V0RmFpbHVyZSl7dGhpc1tyLiRleHRyYV0uYXR0ZW1wdD1tO2JyZWFrfX10aGlzW3IuJHBvcFBhcmFdKCk7aHx8dW5zZXRGaXJzdFVuc3BsaXR0YWJsZSh0aGlzKTtuW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmU9bztpZih0aGlzW3IuJGV4dHJhXS5hdHRlbXB0PT09bSl7dGhpcy5vdmVyZmxvdyYmKHRoaXNbci4kZ2V0VGVtcGxhdGVSb290XSgpW3IuJGV4dHJhXS5vdmVyZmxvd05vZGU9dGhpcy5vdmVyZmxvdyk7aHx8ZGVsZXRlIHRoaXNbci4kZXh0cmFdO3JldHVybiBjLkhUTUxSZXN1bHQuRkFJTFVSRX1pZih0aGlzLm92ZXJmbG93KXtjb25zdCB0PXRoaXMub3ZlcmZsb3dbci4kZ2V0RXh0cmFdKCk7aWYodC5hZGRUcmFpbGVyKXt0LmFkZFRyYWlsZXI9ITE7aGFuZGxlT3ZlcmZsb3codGhpcyx0LnRyYWlsZXIsZSl9fWxldCBiPTAseT0wO2lmKHRoaXMubWFyZ2luKXtiPXRoaXMubWFyZ2luLmxlZnRJbnNldCt0aGlzLm1hcmdpbi5yaWdodEluc2V0O3k9dGhpcy5tYXJnaW4udG9wSW5zZXQrdGhpcy5tYXJnaW4uYm90dG9tSW5zZXR9Y29uc3Qgdz1NYXRoLm1heCh0aGlzW3IuJGV4dHJhXS53aWR0aCtiLHRoaXMud3x8MCksUz1NYXRoLm1heCh0aGlzW3IuJGV4dHJhXS5oZWlnaHQreSx0aGlzLmh8fDApLHg9W3RoaXMueCx0aGlzLnksdyxTXTsiIj09PXRoaXMudyYmKGQud2lkdGg9KDAscy5tZWFzdXJlVG9TdHJpbmcpKHcpKTsiIj09PXRoaXMuaCYmKGQuaGVpZ2h0PSgwLHMubWVhc3VyZVRvU3RyaW5nKShTKSk7aWYoKCIwcHgiPT09ZC53aWR0aHx8IjBweCI9PT1kLmhlaWdodCkmJjA9PT10Lmxlbmd0aClyZXR1cm4gYy5IVE1MUmVzdWx0LkVNUFRZO2NvbnN0IEM9e25hbWU6ImRpdiIsYXR0cmlidXRlczphLGNoaWxkcmVuOnR9O2FwcGx5QXNzaXN0KHRoaXMsYSk7Y29uc3Qgaz1jLkhUTUxSZXN1bHQuc3VjY2VzcygoMCxzLmNyZWF0ZVdyYXBwZXIpKHRoaXMsQykseCk7aWYodGhpcy5icmVha0FmdGVyLmNoaWxkcmVuLmxlbmd0aD49MSl7Y29uc3QgZT10aGlzLmJyZWFrQWZ0ZXIuY2hpbGRyZW5bMF07aWYoaGFuZGxlQnJlYWsoZSkpe3RoaXNbci4kZXh0cmFdLmFmdGVyQnJlYWtBZnRlcj1rO3JldHVybiBjLkhUTUxSZXN1bHQuYnJlYWtOb2RlKGUpfX1kZWxldGUgdGhpc1tyLiRleHRyYV07cmV0dXJuIGt9fWNsYXNzIFN1YmZvcm1TZXQgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJzdWJmb3JtU2V0IiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnJlbGF0aW9uPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnJlbGF0aW9uLFsib3JkZXJlZCIsImNob2ljZSIsInVub3JkZXJlZCJdKTt0aGlzLnJlbGV2YW50PSgwLGMuZ2V0UmVsZXZhbnQpKGUucmVsZXZhbnQpO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmJvb2tlbmQ9bnVsbDt0aGlzLmJyZWFrPW51bGw7dGhpcy5kZXNjPW51bGw7dGhpcy5leHRyYXM9bnVsbDt0aGlzLm9jY3VyPW51bGw7dGhpcy5vdmVyZmxvdz1udWxsO3RoaXMuYnJlYWtBZnRlcj1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmJyZWFrQmVmb3JlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuc3ViZm9ybT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnN1YmZvcm1TZXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXl9KltyLiRnZXRDb250YWluZWRDaGlsZHJlbl0oKXt5aWVsZCpnZXRDb250YWluZWRDaGlsZHJlbih0aGlzKX1bci4kZ2V0U3ViZm9ybVBhcmVudF0oKXtsZXQgZT10aGlzW3IuJGdldFBhcmVudF0oKTtmb3IoOyEoZSBpbnN0YW5jZW9mIFN1YmZvcm0pOyllPWVbci4kZ2V0UGFyZW50XSgpO3JldHVybiBlfVtyLiRpc0JpbmRhYmxlXSgpe3JldHVybiEwfX1jbGFzcyBTdWJqZWN0RE4gZXh0ZW5kcyBvLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwic3ViamVjdEROIik7dGhpcy5kZWxpbWl0ZXI9ZS5kZWxpbWl0ZXJ8fCIsIjt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn1bci4kZmluYWxpemVdKCl7dGhpc1tyLiRjb250ZW50XT1uZXcgTWFwKHRoaXNbci4kY29udGVudF0uc3BsaXQodGhpcy5kZWxpbWl0ZXIpLm1hcCgoZT0+eyhlPWUuc3BsaXQoIj0iLDIpKVswXT1lWzBdLnRyaW0oKTtyZXR1cm4gZX0pKSl9fWNsYXNzIFN1YmplY3RETnMgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJzdWJqZWN0RE5zIiwhMCk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnR5cGU9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUudHlwZSxbIm9wdGlvbmFsIiwicmVxdWlyZWQiXSk7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuc3ViamVjdEROPW5ldyBvLlhGQU9iamVjdEFycmF5fX1jbGFzcyBTdWJtaXQgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJzdWJtaXQiLCEwKTt0aGlzLmVtYmVkUERGPSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5lbWJlZFBERixkZWZhdWx0VmFsdWU6MCx2YWxpZGF0ZTplPT4xPT09ZX0pO3RoaXMuZm9ybWF0PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmZvcm1hdCxbInhkcCIsImZvcm1kYXRhIiwicGRmIiwidXJsZW5jb2RlZCIsInhmZCIsInhtbCJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudGFyZ2V0PWUudGFyZ2V0fHwiIjt0aGlzLnRleHRFbmNvZGluZz0oMCxjLmdldEtleXdvcmQpKHtkYXRhOmUudGV4dEVuY29kaW5nP2UudGV4dEVuY29kaW5nLnRvTG93ZXJDYXNlKCk6IiIsZGVmYXVsdFZhbHVlOiIiLHZhbGlkYXRlOmU9PlsidXRmLTgiLCJiaWctZml2ZSIsImZvbnRzcGVjaWZpYyIsImdiayIsImdiLTE4MDMwIiwiZ2ItMjMxMiIsImtzYy01NjAxIiwibm9uZSIsInNoaWZ0LWppcyIsInVjcy0yIiwidXRmLTE2Il0uaW5jbHVkZXMoZSl8fGUubWF0Y2goL2lzby04ODU5LVxkezJ9Lyl9KTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy54ZHBDb250ZW50PWUueGRwQ29udGVudHx8IiI7dGhpcy5lbmNyeXB0PW51bGw7dGhpcy5lbmNyeXB0RGF0YT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnNpZ25EYXRhPW5ldyBvLlhGQU9iamVjdEFycmF5fX1jbGFzcyBUZW1wbGF0ZSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInRlbXBsYXRlIiwhMCk7dGhpcy5iYXNlUHJvZmlsZT0oMCxjLmdldFN0cmluZ09wdGlvbikoZS5iYXNlUHJvZmlsZSxbImZ1bGwiLCJpbnRlcmFjdGl2ZUZvcm1zIl0pO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5zdWJmb3JtPW5ldyBvLlhGQU9iamVjdEFycmF5fVtyLiRmaW5hbGl6ZV0oKXswPT09dGhpcy5zdWJmb3JtLmNoaWxkcmVuLmxlbmd0aCYmKDAsbC53YXJuKSgiWEZBIC0gTm8gc3ViZm9ybXMgaW4gdGVtcGxhdGUgbm9kZS4iKTt0aGlzLnN1YmZvcm0uY2hpbGRyZW4ubGVuZ3RoPj0yJiYoMCxsLndhcm4pKCJYRkEgLSBTZXZlcmFsIHN1YmZvcm1zIGluIHRlbXBsYXRlIG5vZGU6IHBsZWFzZSBmaWxlIGEgYnVnLiIpO3RoaXNbci4kdGFiSW5kZXhdPTVlM31bci4kaXNTcGxpdHRhYmxlXSgpe3JldHVybiEwfVtyLiRzZWFyY2hOb2RlXShlLHQpe3JldHVybiBlLnN0YXJ0c1dpdGgoIiMiKT9bdGhpc1tyLiRpZHNdLmdldChlLnNsaWNlKDEpKV06KDAsZC5zZWFyY2hOb2RlKSh0aGlzLHQsZSwhMCwhMCl9KltyLiR0b1BhZ2VzXSgpe2lmKCF0aGlzLnN1YmZvcm0uY2hpbGRyZW4ubGVuZ3RoKXJldHVybiBjLkhUTUxSZXN1bHQuc3VjY2Vzcyh7bmFtZToiZGl2IixjaGlsZHJlbjpbXX0pO3RoaXNbci4kZXh0cmFdPXtvdmVyZmxvd05vZGU6bnVsbCxmaXJzdFVuc3BsaXR0YWJsZTpudWxsLGN1cnJlbnRDb250ZW50QXJlYTpudWxsLGN1cnJlbnRQYWdlQXJlYTpudWxsLG5vTGF5b3V0RmFpbHVyZTohMSxwYWdlTnVtYmVyOjEscGFnZVBvc2l0aW9uOiJmaXJzdCIsb2RkT3JFdmVuOiJvZGQiLGJsYW5rT3JOb3RCbGFuazoibm9uQmxhbmsiLHBhcmFTdGFjazpbXX07Y29uc3QgZT10aGlzLnN1YmZvcm0uY2hpbGRyZW5bMF07ZS5wYWdlU2V0W3IuJGNsZWFuUGFnZV0oKTtjb25zdCB0PWUucGFnZVNldC5wYWdlQXJlYS5jaGlsZHJlbixhPXtuYW1lOiJkaXYiLGNoaWxkcmVuOltdfTtsZXQgbj1udWxsLGk9bnVsbCxzPW51bGw7aWYoZS5icmVha0JlZm9yZS5jaGlsZHJlbi5sZW5ndGg+PTEpe2k9ZS5icmVha0JlZm9yZS5jaGlsZHJlblswXTtzPWkudGFyZ2V0fWVsc2UgaWYoZS5zdWJmb3JtLmNoaWxkcmVuLmxlbmd0aD49MSYmZS5zdWJmb3JtLmNoaWxkcmVuWzBdLmJyZWFrQmVmb3JlLmNoaWxkcmVuLmxlbmd0aD49MSl7aT1lLnN1YmZvcm0uY2hpbGRyZW5bMF0uYnJlYWtCZWZvcmUuY2hpbGRyZW5bMF07cz1pLnRhcmdldH1lbHNlIGlmKGUuYnJlYWs/LmJlZm9yZVRhcmdldCl7aT1lLmJyZWFrO3M9aS5iZWZvcmVUYXJnZXR9ZWxzZSBpZihlLnN1YmZvcm0uY2hpbGRyZW4ubGVuZ3RoPj0xJiZlLnN1YmZvcm0uY2hpbGRyZW5bMF0uYnJlYWs/LmJlZm9yZVRhcmdldCl7aT1lLnN1YmZvcm0uY2hpbGRyZW5bMF0uYnJlYWs7cz1pLmJlZm9yZVRhcmdldH1pZihpKXtjb25zdCBlPXRoaXNbci4kc2VhcmNoTm9kZV0ocyxpW3IuJGdldFBhcmVudF0oKSk7aWYoZSBpbnN0YW5jZW9mIFBhZ2VBcmVhKXtuPWU7aVtyLiRleHRyYV09e319fW58fChuPXRbMF0pO25bci4kZXh0cmFdPXtudW1iZXJPZlVzZToxfTtjb25zdCBvPW5bci4kZ2V0UGFyZW50XSgpO29bci4kZXh0cmFdPXtudW1iZXJPZlVzZToxLHBhZ2VJbmRleDpvLnBhZ2VBcmVhLmNoaWxkcmVuLmluZGV4T2YobikscGFnZVNldEluZGV4OjB9O2xldCBoLHU9bnVsbCxkPW51bGwsZj0hMCxnPTAscD0wO2Zvcig7Oyl7aWYoZilnPTA7ZWxzZXthLmNoaWxkcmVuLnBvcCgpO2lmKDM9PSsrZyl7KDAsbC53YXJuKSgiWEZBIC0gU29tZXRoaW5nIGdvZXMgd3Jvbmc6IHBsZWFzZSBmaWxlIGEgYnVnLiIpO3JldHVybiBhfX1oPW51bGw7dGhpc1tyLiRleHRyYV0uY3VycmVudFBhZ2VBcmVhPW47Y29uc3QgdD1uW3IuJHRvSFRNTF0oKS5odG1sO2EuY2hpbGRyZW4ucHVzaCh0KTtpZih1KXt0aGlzW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmU9ITA7dC5jaGlsZHJlbi5wdXNoKHVbci4kdG9IVE1MXShuW3IuJGV4dHJhXS5zcGFjZSkuaHRtbCk7dT1udWxsfWlmKGQpe3RoaXNbci4kZXh0cmFdLm5vTGF5b3V0RmFpbHVyZT0hMDt0LmNoaWxkcmVuLnB1c2goZFtyLiR0b0hUTUxdKG5bci4kZXh0cmFdLnNwYWNlKS5odG1sKTtkPW51bGx9Y29uc3QgaT1uLmNvbnRlbnRBcmVhLmNoaWxkcmVuLHM9dC5jaGlsZHJlbi5maWx0ZXIoKGU9PmUuYXR0cmlidXRlcy5jbGFzcy5pbmNsdWRlcygieGZhQ29udGVudGFyZWEiKSkpO2Y9ITE7dGhpc1tyLiRleHRyYV0uZmlyc3RVbnNwbGl0dGFibGU9bnVsbDt0aGlzW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmU9ITE7Y29uc3QgZmx1c2g9dD0+e2NvbnN0IGE9ZVtyLiRmbHVzaEhUTUxdKCk7aWYoYSl7Znx8PWEuY2hpbGRyZW4/Lmxlbmd0aD4wO3NbdF0uY2hpbGRyZW4ucHVzaChhKX19O2ZvcihsZXQgdD1wLG49aS5sZW5ndGg7dDxuO3QrKyl7Y29uc3Qgbj10aGlzW3IuJGV4dHJhXS5jdXJyZW50Q29udGVudEFyZWE9aVt0XSxvPXt3aWR0aDpuLncsaGVpZ2h0Om4uaH07cD0wO2lmKHUpe3NbdF0uY2hpbGRyZW4ucHVzaCh1W3IuJHRvSFRNTF0obykuaHRtbCk7dT1udWxsfWlmKGQpe3NbdF0uY2hpbGRyZW4ucHVzaChkW3IuJHRvSFRNTF0obykuaHRtbCk7ZD1udWxsfWNvbnN0IGM9ZVtyLiR0b0hUTUxdKG8pO2lmKGMuc3VjY2Vzcyl7aWYoYy5odG1sKXtmfHw9Yy5odG1sLmNoaWxkcmVuPy5sZW5ndGg+MDtzW3RdLmNoaWxkcmVuLnB1c2goYy5odG1sKX1lbHNlIWYmJmEuY2hpbGRyZW4ubGVuZ3RoPjEmJmEuY2hpbGRyZW4ucG9wKCk7cmV0dXJuIGF9aWYoYy5pc0JyZWFrKCkpe2NvbnN0IGU9Yy5icmVha05vZGU7Zmx1c2godCk7aWYoImF1dG8iPT09ZS50YXJnZXRUeXBlKWNvbnRpbnVlO2lmKGUubGVhZGVyKXt1PXRoaXNbci4kc2VhcmNoTm9kZV0oZS5sZWFkZXIsZVtyLiRnZXRQYXJlbnRdKCkpO3U9dT91WzBdOm51bGx9aWYoZS50cmFpbGVyKXtkPXRoaXNbci4kc2VhcmNoTm9kZV0oZS50cmFpbGVyLGVbci4kZ2V0UGFyZW50XSgpKTtkPWQ/ZFswXTpudWxsfWlmKCJwYWdlQXJlYSI9PT1lLnRhcmdldFR5cGUpe2g9ZVtyLiRleHRyYV0udGFyZ2V0O3Q9MS8wfWVsc2UgaWYoZVtyLiRleHRyYV0udGFyZ2V0KXtoPWVbci4kZXh0cmFdLnRhcmdldDtwPWVbci4kZXh0cmFdLmluZGV4KzE7dD0xLzB9ZWxzZSB0PWVbci4kZXh0cmFdLmluZGV4fWVsc2UgaWYodGhpc1tyLiRleHRyYV0ub3ZlcmZsb3dOb2RlKXtjb25zdCBlPXRoaXNbci4kZXh0cmFdLm92ZXJmbG93Tm9kZTt0aGlzW3IuJGV4dHJhXS5vdmVyZmxvd05vZGU9bnVsbDtjb25zdCBhPWVbci4kZ2V0RXh0cmFdKCksbj1hLnRhcmdldDthLmFkZExlYWRlcj1udWxsIT09YS5sZWFkZXI7YS5hZGRUcmFpbGVyPW51bGwhPT1hLnRyYWlsZXI7Zmx1c2godCk7Y29uc3Qgcz10O3Q9MS8wO2lmKG4gaW5zdGFuY2VvZiBQYWdlQXJlYSloPW47ZWxzZSBpZihuIGluc3RhbmNlb2YgQ29udGVudEFyZWEpe2NvbnN0IGU9aS5pbmRleE9mKG4pO2lmKC0xIT09ZSllPnM/dD1lLTE6cD1lO2Vsc2V7aD1uW3IuJGdldFBhcmVudF0oKTtwPWguY29udGVudEFyZWEuY2hpbGRyZW4uaW5kZXhPZihuKX19fWVsc2UgZmx1c2godCl9dGhpc1tyLiRleHRyYV0ucGFnZU51bWJlcis9MTtoJiYoaFtyLiRpc1VzYWJsZV0oKT9oW3IuJGV4dHJhXS5udW1iZXJPZlVzZSs9MTpoPW51bGwpO249aHx8bltyLiRnZXROZXh0UGFnZV0oKTt5aWVsZCBudWxsfX19dC5UZW1wbGF0ZT1UZW1wbGF0ZTtjbGFzcyBUZXh0IGV4dGVuZHMgby5Db250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInRleHQiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubWF4Q2hhcnM9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLm1heENoYXJzLGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PmU+PTB9KTt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnJpZD1lLnJpZHx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifVtyLiRhY2NlcHRXaGl0ZXNwYWNlXSgpe3JldHVybiEwfVtyLiRvbkNoaWxkXShlKXtpZihlW3IuJG5hbWVzcGFjZUlkXT09PW4uTmFtZXNwYWNlSWRzLnhodG1sLmlkKXt0aGlzW3IuJGNvbnRlbnRdPWU7cmV0dXJuITB9KDAsbC53YXJuKShgWEZBIC0gSW52YWxpZCBjb250ZW50IGluIFRleHQ6ICR7ZVtyLiRub2RlTmFtZV19LmApO3JldHVybiExfVtyLiRvblRleHRdKGUpe3RoaXNbci4kY29udGVudF1pbnN0YW5jZW9mIG8uWEZBT2JqZWN0fHxzdXBlcltyLiRvblRleHRdKGUpfVtyLiRmaW5hbGl6ZV0oKXsic3RyaW5nIj09dHlwZW9mIHRoaXNbci4kY29udGVudF0mJih0aGlzW3IuJGNvbnRlbnRdPXRoaXNbci4kY29udGVudF0ucmVwbGFjZUFsbCgiXHJcbiIsIlxuIikpfVtyLiRnZXRFeHRyYV0oKXtyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHRoaXNbci4kY29udGVudF0/dGhpc1tyLiRjb250ZW50XS5zcGxpdCgvW1x1MjAyOVx1MjAyOFxuXS8pLnJlZHVjZSgoKGUsdCk9Pnt0JiZlLnB1c2godCk7cmV0dXJuIGV9KSxbXSkuam9pbigiXG4iKTp0aGlzW3IuJGNvbnRlbnRdW3IuJHRleHRdKCl9W3IuJHRvSFRNTF0oZSl7aWYoInN0cmluZyI9PXR5cGVvZiB0aGlzW3IuJGNvbnRlbnRdKXtjb25zdCBlPXZhbHVlVG9IdG1sKHRoaXNbci4kY29udGVudF0pLmh0bWw7aWYodGhpc1tyLiRjb250ZW50XS5pbmNsdWRlcygiXHUyMDI5Iikpe2UubmFtZT0iZGl2IjtlLmNoaWxkcmVuPVtdO3RoaXNbci4kY29udGVudF0uc3BsaXQoIlx1MjAyOSIpLm1hcCgoZT0+ZS5zcGxpdCgvW1x1MjAyOFxuXS8pLnJlZHVjZSgoKGUsdCk9PntlLnB1c2goe25hbWU6InNwYW4iLHZhbHVlOnR9LHtuYW1lOiJiciJ9KTtyZXR1cm4gZX0pLFtdKSkpLmZvckVhY2goKHQ9PntlLmNoaWxkcmVuLnB1c2goe25hbWU6InAiLGNoaWxkcmVuOnR9KX0pKX1lbHNlIGlmKC9bXHUyMDI4XG5dLy50ZXN0KHRoaXNbci4kY29udGVudF0pKXtlLm5hbWU9ImRpdiI7ZS5jaGlsZHJlbj1bXTt0aGlzW3IuJGNvbnRlbnRdLnNwbGl0KC9bXHUyMDI4XG5dLykuZm9yRWFjaCgodD0+e2UuY2hpbGRyZW4ucHVzaCh7bmFtZToic3BhbiIsdmFsdWU6dH0se25hbWU6ImJyIn0pfSkpfXJldHVybiBjLkhUTUxSZXN1bHQuc3VjY2VzcyhlKX1yZXR1cm4gdGhpc1tyLiRjb250ZW50XVtyLiR0b0hUTUxdKGUpfX10LlRleHQ9VGV4dDtjbGFzcyBUZXh0RWRpdCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInRleHRFZGl0IiwhMCk7dGhpcy5hbGxvd1JpY2hUZXh0PSgwLGMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5hbGxvd1JpY2hUZXh0LGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy5oU2Nyb2xsUG9saWN5PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmhTY3JvbGxQb2xpY3ksWyJhdXRvIiwib2ZmIiwib24iXSk7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm11bHRpTGluZT0oMCxjLmdldEludGVnZXIpKHtkYXRhOmUubXVsdGlMaW5lLGRlZmF1bHRWYWx1ZToiIix2YWxpZGF0ZTplPT4wPT09ZXx8MT09PWV9KTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy52U2Nyb2xsUG9saWN5PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnZTY3JvbGxQb2xpY3ksWyJhdXRvIiwib2ZmIiwib24iXSk7dGhpcy5ib3JkZXI9bnVsbDt0aGlzLmNvbWI9bnVsbDt0aGlzLmV4dHJhcz1udWxsO3RoaXMubWFyZ2luPW51bGx9W3IuJHRvSFRNTF0oZSl7Y29uc3QgdD0oMCxzLnRvU3R5bGUpKHRoaXMsImJvcmRlciIsImZvbnQiLCJtYXJnaW4iKTtsZXQgYTtjb25zdCBuPXRoaXNbci4kZ2V0UGFyZW50XSgpW3IuJGdldFBhcmVudF0oKTsiIj09PXRoaXMubXVsdGlMaW5lJiYodGhpcy5tdWx0aUxpbmU9biBpbnN0YW5jZW9mIERyYXc/MTowKTthPTE9PT10aGlzLm11bHRpTGluZT97bmFtZToidGV4dGFyZWEiLGF0dHJpYnV0ZXM6e2RhdGFJZDpuW3IuJGRhdGFdPy5bci4kdWlkXXx8bltyLiR1aWRdLGZpZWxkSWQ6bltyLiR1aWRdLGNsYXNzOlsieGZhVGV4dGZpZWxkIl0sc3R5bGU6dCwiYXJpYS1sYWJlbCI6YXJpYUxhYmVsKG4pLCJhcmlhLXJlcXVpcmVkIjohMX19OntuYW1lOiJpbnB1dCIsYXR0cmlidXRlczp7dHlwZToidGV4dCIsZGF0YUlkOm5bci4kZGF0YV0/LltyLiR1aWRdfHxuW3IuJHVpZF0sZmllbGRJZDpuW3IuJHVpZF0sY2xhc3M6WyJ4ZmFUZXh0ZmllbGQiXSxzdHlsZTp0LCJhcmlhLWxhYmVsIjphcmlhTGFiZWwobiksImFyaWEtcmVxdWlyZWQiOiExfX07aWYoaXNSZXF1aXJlZChuKSl7YS5hdHRyaWJ1dGVzWyJhcmlhLXJlcXVpcmVkIl09ITA7YS5hdHRyaWJ1dGVzLnJlcXVpcmVkPSEwfXJldHVybiBjLkhUTUxSZXN1bHQuc3VjY2Vzcyh7bmFtZToibGFiZWwiLGF0dHJpYnV0ZXM6e2NsYXNzOlsieGZhTGFiZWwiXX0sY2hpbGRyZW46W2FdfSl9fWNsYXNzIFRpbWUgZXh0ZW5kcyBvLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJ0aW1lIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLm5hbWU9ZS5uYW1lfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9W3IuJGZpbmFsaXplXSgpe2NvbnN0IGU9dGhpc1tyLiRjb250ZW50XS50cmltKCk7dGhpc1tyLiRjb250ZW50XT1lP25ldyBEYXRlKGUpOm51bGx9W3IuJHRvSFRNTF0oZSl7cmV0dXJuIHZhbHVlVG9IdG1sKHRoaXNbci4kY29udGVudF0/dGhpc1tyLiRjb250ZW50XS50b1N0cmluZygpOiIiKX19Y2xhc3MgVGltZVN0YW1wIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwidGltZVN0YW1wIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLnNlcnZlcj1lLnNlcnZlcnx8IiI7dGhpcy50eXBlPSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLnR5cGUsWyJvcHRpb25hbCIsInJlcXVpcmVkIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgVG9vbFRpcCBleHRlbmRzIG8uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInRvb2xUaXAiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMucmlkPWUucmlkfHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIFRyYXZlcnNhbCBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInRyYXZlcnNhbCIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGw7dGhpcy50cmF2ZXJzZT1uZXcgby5YRkFPYmplY3RBcnJheX19Y2xhc3MgVHJhdmVyc2UgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJ0cmF2ZXJzZSIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5vcGVyYXRpb249KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUub3BlcmF0aW9uLFsibmV4dCIsImJhY2siLCJkb3duIiwiZmlyc3QiLCJsZWZ0IiwicmlnaHQiLCJ1cCJdKTt0aGlzLnJlZj1lLnJlZnx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5zY3JpcHQ9bnVsbH1nZXQgbmFtZSgpe3JldHVybiB0aGlzLm9wZXJhdGlvbn1bci4kaXNUcmFuc3BhcmVudF0oKXtyZXR1cm4hMX19Y2xhc3MgVWkgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJ1aSIsITApO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIiO3RoaXMuZXh0cmFzPW51bGw7dGhpcy5waWN0dXJlPW51bGw7dGhpcy5iYXJjb2RlPW51bGw7dGhpcy5idXR0b249bnVsbDt0aGlzLmNoZWNrQnV0dG9uPW51bGw7dGhpcy5jaG9pY2VMaXN0PW51bGw7dGhpcy5kYXRlVGltZUVkaXQ9bnVsbDt0aGlzLmRlZmF1bHRVaT1udWxsO3RoaXMuaW1hZ2VFZGl0PW51bGw7dGhpcy5udW1lcmljRWRpdD1udWxsO3RoaXMucGFzc3dvcmRFZGl0PW51bGw7dGhpcy5zaWduYXR1cmU9bnVsbDt0aGlzLnRleHRFZGl0PW51bGx9W3IuJGdldEV4dHJhXSgpe2lmKHZvaWQgMD09PXRoaXNbci4kZXh0cmFdKXtmb3IoY29uc3QgZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSl7aWYoImV4dHJhcyI9PT1lfHwicGljdHVyZSI9PT1lKWNvbnRpbnVlO2NvbnN0IHQ9dGhpc1tlXTtpZih0IGluc3RhbmNlb2Ygby5YRkFPYmplY3Qpe3RoaXNbci4kZXh0cmFdPXQ7cmV0dXJuIHR9fXRoaXNbci4kZXh0cmFdPW51bGx9cmV0dXJuIHRoaXNbci4kZXh0cmFdfVtyLiR0b0hUTUxdKGUpe2NvbnN0IHQ9dGhpc1tyLiRnZXRFeHRyYV0oKTtyZXR1cm4gdD90W3IuJHRvSFRNTF0oZSk6Yy5IVE1MUmVzdWx0LkVNUFRZfX1jbGFzcyBWYWxpZGF0ZSBleHRlbmRzIG8uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGYsInZhbGlkYXRlIiwhMCk7dGhpcy5mb3JtYXRUZXN0PSgwLGMuZ2V0U3RyaW5nT3B0aW9uKShlLmZvcm1hdFRlc3QsWyJ3YXJuaW5nIiwiZGlzYWJsZWQiLCJlcnJvciJdKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubnVsbFRlc3Q9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUubnVsbFRlc3QsWyJkaXNhYmxlZCIsImVycm9yIiwid2FybmluZyJdKTt0aGlzLnNjcmlwdFRlc3Q9KDAsYy5nZXRTdHJpbmdPcHRpb24pKGUuc2NyaXB0VGVzdCxbImVycm9yIiwiZGlzYWJsZWQiLCJ3YXJuaW5nIl0pO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmV4dHJhcz1udWxsO3RoaXMubWVzc2FnZT1udWxsO3RoaXMucGljdHVyZT1udWxsO3RoaXMuc2NyaXB0PW51bGx9fWNsYXNzIFZhbHVlIGV4dGVuZHMgby5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZiwidmFsdWUiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMub3ZlcnJpZGU9KDAsYy5nZXRJbnRlZ2VyKSh7ZGF0YTplLm92ZXJyaWRlLGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy5yZWxldmFudD0oMCxjLmdldFJlbGV2YW50KShlLnJlbGV2YW50KTt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiI7dGhpcy5hcmM9bnVsbDt0aGlzLmJvb2xlYW49bnVsbDt0aGlzLmRhdGU9bnVsbDt0aGlzLmRhdGVUaW1lPW51bGw7dGhpcy5kZWNpbWFsPW51bGw7dGhpcy5leERhdGE9bnVsbDt0aGlzLmZsb2F0PW51bGw7dGhpcy5pbWFnZT1udWxsO3RoaXMuaW50ZWdlcj1udWxsO3RoaXMubGluZT1udWxsO3RoaXMucmVjdGFuZ2xlPW51bGw7dGhpcy50ZXh0PW51bGw7dGhpcy50aW1lPW51bGx9W3IuJHNldFZhbHVlXShlKXtjb25zdCB0PXRoaXNbci4kZ2V0UGFyZW50XSgpO2lmKHQgaW5zdGFuY2VvZiBGaWVsZCYmdC51aT8uaW1hZ2VFZGl0KXtpZighdGhpcy5pbWFnZSl7dGhpcy5pbWFnZT1uZXcgSW1hZ2Uoe30pO3RoaXNbci4kYXBwZW5kQ2hpbGRdKHRoaXMuaW1hZ2UpfXRoaXMuaW1hZ2Vbci4kY29udGVudF09ZVtyLiRjb250ZW50XTtyZXR1cm59Y29uc3QgYT1lW3IuJG5vZGVOYW1lXTtpZihudWxsPT09dGhpc1thXSl7Zm9yKGNvbnN0IGUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpe2NvbnN0IHQ9dGhpc1tlXTtpZih0IGluc3RhbmNlb2Ygby5YRkFPYmplY3Qpe3RoaXNbZV09bnVsbDt0aGlzW3IuJHJlbW92ZUNoaWxkXSh0KX19dGhpc1tlW3IuJG5vZGVOYW1lXV09ZTt0aGlzW3IuJGFwcGVuZENoaWxkXShlKX1lbHNlIHRoaXNbYV1bci4kY29udGVudF09ZVtyLiRjb250ZW50XX1bci4kdGV4dF0oKXtpZih0aGlzLmV4RGF0YSlyZXR1cm4ic3RyaW5nIj09dHlwZW9mIHRoaXMuZXhEYXRhW3IuJGNvbnRlbnRdP3RoaXMuZXhEYXRhW3IuJGNvbnRlbnRdLnRyaW0oKTp0aGlzLmV4RGF0YVtyLiRjb250ZW50XVtyLiR0ZXh0XSgpLnRyaW0oKTtmb3IoY29uc3QgZSBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSl7aWYoImltYWdlIj09PWUpY29udGludWU7Y29uc3QgdD10aGlzW2VdO2lmKHQgaW5zdGFuY2VvZiBvLlhGQU9iamVjdClyZXR1cm4odFtyLiRjb250ZW50XXx8IiIpLnRvU3RyaW5nKCkudHJpbSgpfXJldHVybiBudWxsfVtyLiR0b0hUTUxdKGUpe2Zvcihjb25zdCB0IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKXtjb25zdCBhPXRoaXNbdF07aWYoYSBpbnN0YW5jZW9mIG8uWEZBT2JqZWN0KXJldHVybiBhW3IuJHRvSFRNTF0oZSl9cmV0dXJuIGMuSFRNTFJlc3VsdC5FTVBUWX19dC5WYWx1ZT1WYWx1ZTtjbGFzcyBWYXJpYWJsZXMgZXh0ZW5kcyBvLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihmLCJ2YXJpYWJsZXMiLCEwKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIjt0aGlzLmJvb2xlYW49bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kYXRlPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZGF0ZVRpbWU9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5kZWNpbWFsPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZXhEYXRhPW5ldyBvLlhGQU9iamVjdEFycmF5O3RoaXMuZmxvYXQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5pbWFnZT1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLmludGVnZXI9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy5tYW5pZmVzdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnNjcmlwdD1uZXcgby5YRkFPYmplY3RBcnJheTt0aGlzLnRleHQ9bmV3IG8uWEZBT2JqZWN0QXJyYXk7dGhpcy50aW1lPW5ldyBvLlhGQU9iamVjdEFycmF5fVtyLiRpc1RyYW5zcGFyZW50XSgpe3JldHVybiEwfX1jbGFzcyBUZW1wbGF0ZU5hbWVzcGFjZXtzdGF0aWNbbi4kYnVpbGRYRkFPYmplY3RdKGUsdCl7aWYoVGVtcGxhdGVOYW1lc3BhY2UuaGFzT3duUHJvcGVydHkoZSkpe2NvbnN0IGE9VGVtcGxhdGVOYW1lc3BhY2VbZV0odCk7YVtyLiRzZXRTZXRBdHRyaWJ1dGVzXSh0KTtyZXR1cm4gYX19c3RhdGljIGFwcGVhcmFuY2VGaWx0ZXIoZSl7cmV0dXJuIG5ldyBBcHBlYXJhbmNlRmlsdGVyKGUpfXN0YXRpYyBhcmMoZSl7cmV0dXJuIG5ldyBBcmMoZSl9c3RhdGljIGFyZWEoZSl7cmV0dXJuIG5ldyBBcmVhKGUpfXN0YXRpYyBhc3Npc3QoZSl7cmV0dXJuIG5ldyBBc3Npc3QoZSl9c3RhdGljIGJhcmNvZGUoZSl7cmV0dXJuIG5ldyBCYXJjb2RlKGUpfXN0YXRpYyBiaW5kKGUpe3JldHVybiBuZXcgQmluZChlKX1zdGF0aWMgYmluZEl0ZW1zKGUpe3JldHVybiBuZXcgQmluZEl0ZW1zKGUpfXN0YXRpYyBib29rZW5kKGUpe3JldHVybiBuZXcgQm9va2VuZChlKX1zdGF0aWMgYm9vbGVhbihlKXtyZXR1cm4gbmV3IEJvb2xlYW5FbGVtZW50KGUpfXN0YXRpYyBib3JkZXIoZSl7cmV0dXJuIG5ldyBCb3JkZXIoZSl9c3RhdGljIGJyZWFrKGUpe3JldHVybiBuZXcgQnJlYWsoZSl9c3RhdGljIGJyZWFrQWZ0ZXIoZSl7cmV0dXJuIG5ldyBCcmVha0FmdGVyKGUpfXN0YXRpYyBicmVha0JlZm9yZShlKXtyZXR1cm4gbmV3IEJyZWFrQmVmb3JlKGUpfXN0YXRpYyBidXR0b24oZSl7cmV0dXJuIG5ldyBCdXR0b24oZSl9c3RhdGljIGNhbGN1bGF0ZShlKXtyZXR1cm4gbmV3IENhbGN1bGF0ZShlKX1zdGF0aWMgY2FwdGlvbihlKXtyZXR1cm4gbmV3IENhcHRpb24oZSl9c3RhdGljIGNlcnRpZmljYXRlKGUpe3JldHVybiBuZXcgQ2VydGlmaWNhdGUoZSl9c3RhdGljIGNlcnRpZmljYXRlcyhlKXtyZXR1cm4gbmV3IENlcnRpZmljYXRlcyhlKX1zdGF0aWMgY2hlY2tCdXR0b24oZSl7cmV0dXJuIG5ldyBDaGVja0J1dHRvbihlKX1zdGF0aWMgY2hvaWNlTGlzdChlKXtyZXR1cm4gbmV3IENob2ljZUxpc3QoZSl9c3RhdGljIGNvbG9yKGUpe3JldHVybiBuZXcgQ29sb3IoZSl9c3RhdGljIGNvbWIoZSl7cmV0dXJuIG5ldyBDb21iKGUpfXN0YXRpYyBjb25uZWN0KGUpe3JldHVybiBuZXcgQ29ubmVjdChlKX1zdGF0aWMgY29udGVudEFyZWEoZSl7cmV0dXJuIG5ldyBDb250ZW50QXJlYShlKX1zdGF0aWMgY29ybmVyKGUpe3JldHVybiBuZXcgQ29ybmVyKGUpfXN0YXRpYyBkYXRlKGUpe3JldHVybiBuZXcgRGF0ZUVsZW1lbnQoZSl9c3RhdGljIGRhdGVUaW1lKGUpe3JldHVybiBuZXcgRGF0ZVRpbWUoZSl9c3RhdGljIGRhdGVUaW1lRWRpdChlKXtyZXR1cm4gbmV3IERhdGVUaW1lRWRpdChlKX1zdGF0aWMgZGVjaW1hbChlKXtyZXR1cm4gbmV3IERlY2ltYWwoZSl9c3RhdGljIGRlZmF1bHRVaShlKXtyZXR1cm4gbmV3IERlZmF1bHRVaShlKX1zdGF0aWMgZGVzYyhlKXtyZXR1cm4gbmV3IERlc2MoZSl9c3RhdGljIGRpZ2VzdE1ldGhvZChlKXtyZXR1cm4gbmV3IERpZ2VzdE1ldGhvZChlKX1zdGF0aWMgZGlnZXN0TWV0aG9kcyhlKXtyZXR1cm4gbmV3IERpZ2VzdE1ldGhvZHMoZSl9c3RhdGljIGRyYXcoZSl7cmV0dXJuIG5ldyBEcmF3KGUpfXN0YXRpYyBlZGdlKGUpe3JldHVybiBuZXcgRWRnZShlKX1zdGF0aWMgZW5jb2RpbmcoZSl7cmV0dXJuIG5ldyBFbmNvZGluZyhlKX1zdGF0aWMgZW5jb2RpbmdzKGUpe3JldHVybiBuZXcgRW5jb2RpbmdzKGUpfXN0YXRpYyBlbmNyeXB0KGUpe3JldHVybiBuZXcgRW5jcnlwdChlKX1zdGF0aWMgZW5jcnlwdERhdGEoZSl7cmV0dXJuIG5ldyBFbmNyeXB0RGF0YShlKX1zdGF0aWMgZW5jcnlwdGlvbihlKXtyZXR1cm4gbmV3IEVuY3J5cHRpb24oZSl9c3RhdGljIGVuY3J5cHRpb25NZXRob2QoZSl7cmV0dXJuIG5ldyBFbmNyeXB0aW9uTWV0aG9kKGUpfXN0YXRpYyBlbmNyeXB0aW9uTWV0aG9kcyhlKXtyZXR1cm4gbmV3IEVuY3J5cHRpb25NZXRob2RzKGUpfXN0YXRpYyBldmVudChlKXtyZXR1cm4gbmV3IEV2ZW50KGUpfXN0YXRpYyBleERhdGEoZSl7cmV0dXJuIG5ldyBFeERhdGEoZSl9c3RhdGljIGV4T2JqZWN0KGUpe3JldHVybiBuZXcgRXhPYmplY3QoZSl9c3RhdGljIGV4Y2xHcm91cChlKXtyZXR1cm4gbmV3IEV4Y2xHcm91cChlKX1zdGF0aWMgZXhlY3V0ZShlKXtyZXR1cm4gbmV3IEV4ZWN1dGUoZSl9c3RhdGljIGV4dHJhcyhlKXtyZXR1cm4gbmV3IEV4dHJhcyhlKX1zdGF0aWMgZmllbGQoZSl7cmV0dXJuIG5ldyBGaWVsZChlKX1zdGF0aWMgZmlsbChlKXtyZXR1cm4gbmV3IEZpbGwoZSl9c3RhdGljIGZpbHRlcihlKXtyZXR1cm4gbmV3IEZpbHRlcihlKX1zdGF0aWMgZmxvYXQoZSl7cmV0dXJuIG5ldyBGbG9hdChlKX1zdGF0aWMgZm9udChlKXtyZXR1cm4gbmV3IEZvbnQoZSl9c3RhdGljIGZvcm1hdChlKXtyZXR1cm4gbmV3IEZvcm1hdChlKX1zdGF0aWMgaGFuZGxlcihlKXtyZXR1cm4gbmV3IEhhbmRsZXIoZSl9c3RhdGljIGh5cGhlbmF0aW9uKGUpe3JldHVybiBuZXcgSHlwaGVuYXRpb24oZSl9c3RhdGljIGltYWdlKGUpe3JldHVybiBuZXcgSW1hZ2UoZSl9c3RhdGljIGltYWdlRWRpdChlKXtyZXR1cm4gbmV3IEltYWdlRWRpdChlKX1zdGF0aWMgaW50ZWdlcihlKXtyZXR1cm4gbmV3IEludGVnZXIoZSl9c3RhdGljIGlzc3VlcnMoZSl7cmV0dXJuIG5ldyBJc3N1ZXJzKGUpfXN0YXRpYyBpdGVtcyhlKXtyZXR1cm4gbmV3IEl0ZW1zKGUpfXN0YXRpYyBrZWVwKGUpe3JldHVybiBuZXcgS2VlcChlKX1zdGF0aWMga2V5VXNhZ2UoZSl7cmV0dXJuIG5ldyBLZXlVc2FnZShlKX1zdGF0aWMgbGluZShlKXtyZXR1cm4gbmV3IExpbmUoZSl9c3RhdGljIGxpbmVhcihlKXtyZXR1cm4gbmV3IExpbmVhcihlKX1zdGF0aWMgbG9ja0RvY3VtZW50KGUpe3JldHVybiBuZXcgTG9ja0RvY3VtZW50KGUpfXN0YXRpYyBtYW5pZmVzdChlKXtyZXR1cm4gbmV3IE1hbmlmZXN0KGUpfXN0YXRpYyBtYXJnaW4oZSl7cmV0dXJuIG5ldyBNYXJnaW4oZSl9c3RhdGljIG1kcChlKXtyZXR1cm4gbmV3IE1kcChlKX1zdGF0aWMgbWVkaXVtKGUpe3JldHVybiBuZXcgTWVkaXVtKGUpfXN0YXRpYyBtZXNzYWdlKGUpe3JldHVybiBuZXcgTWVzc2FnZShlKX1zdGF0aWMgbnVtZXJpY0VkaXQoZSl7cmV0dXJuIG5ldyBOdW1lcmljRWRpdChlKX1zdGF0aWMgb2NjdXIoZSl7cmV0dXJuIG5ldyBPY2N1cihlKX1zdGF0aWMgb2lkKGUpe3JldHVybiBuZXcgT2lkKGUpfXN0YXRpYyBvaWRzKGUpe3JldHVybiBuZXcgT2lkcyhlKX1zdGF0aWMgb3ZlcmZsb3coZSl7cmV0dXJuIG5ldyBPdmVyZmxvdyhlKX1zdGF0aWMgcGFnZUFyZWEoZSl7cmV0dXJuIG5ldyBQYWdlQXJlYShlKX1zdGF0aWMgcGFnZVNldChlKXtyZXR1cm4gbmV3IFBhZ2VTZXQoZSl9c3RhdGljIHBhcmEoZSl7cmV0dXJuIG5ldyBQYXJhKGUpfXN0YXRpYyBwYXNzd29yZEVkaXQoZSl7cmV0dXJuIG5ldyBQYXNzd29yZEVkaXQoZSl9c3RhdGljIHBhdHRlcm4oZSl7cmV0dXJuIG5ldyBQYXR0ZXJuKGUpfXN0YXRpYyBwaWN0dXJlKGUpe3JldHVybiBuZXcgUGljdHVyZShlKX1zdGF0aWMgcHJvdG8oZSl7cmV0dXJuIG5ldyBQcm90byhlKX1zdGF0aWMgcmFkaWFsKGUpe3JldHVybiBuZXcgUmFkaWFsKGUpfXN0YXRpYyByZWFzb24oZSl7cmV0dXJuIG5ldyBSZWFzb24oZSl9c3RhdGljIHJlYXNvbnMoZSl7cmV0dXJuIG5ldyBSZWFzb25zKGUpfXN0YXRpYyByZWN0YW5nbGUoZSl7cmV0dXJuIG5ldyBSZWN0YW5nbGUoZSl9c3RhdGljIHJlZihlKXtyZXR1cm4gbmV3IFJlZkVsZW1lbnQoZSl9c3RhdGljIHNjcmlwdChlKXtyZXR1cm4gbmV3IFNjcmlwdChlKX1zdGF0aWMgc2V0UHJvcGVydHkoZSl7cmV0dXJuIG5ldyBTZXRQcm9wZXJ0eShlKX1zdGF0aWMgc2lnbkRhdGEoZSl7cmV0dXJuIG5ldyBTaWduRGF0YShlKX1zdGF0aWMgc2lnbmF0dXJlKGUpe3JldHVybiBuZXcgU2lnbmF0dXJlKGUpfXN0YXRpYyBzaWduaW5nKGUpe3JldHVybiBuZXcgU2lnbmluZyhlKX1zdGF0aWMgc29saWQoZSl7cmV0dXJuIG5ldyBTb2xpZChlKX1zdGF0aWMgc3BlYWsoZSl7cmV0dXJuIG5ldyBTcGVhayhlKX1zdGF0aWMgc3RpcHBsZShlKXtyZXR1cm4gbmV3IFN0aXBwbGUoZSl9c3RhdGljIHN1YmZvcm0oZSl7cmV0dXJuIG5ldyBTdWJmb3JtKGUpfXN0YXRpYyBzdWJmb3JtU2V0KGUpe3JldHVybiBuZXcgU3ViZm9ybVNldChlKX1zdGF0aWMgc3ViamVjdEROKGUpe3JldHVybiBuZXcgU3ViamVjdEROKGUpfXN0YXRpYyBzdWJqZWN0RE5zKGUpe3JldHVybiBuZXcgU3ViamVjdEROcyhlKX1zdGF0aWMgc3VibWl0KGUpe3JldHVybiBuZXcgU3VibWl0KGUpfXN0YXRpYyB0ZW1wbGF0ZShlKXtyZXR1cm4gbmV3IFRlbXBsYXRlKGUpfXN0YXRpYyB0ZXh0KGUpe3JldHVybiBuZXcgVGV4dChlKX1zdGF0aWMgdGV4dEVkaXQoZSl7cmV0dXJuIG5ldyBUZXh0RWRpdChlKX1zdGF0aWMgdGltZShlKXtyZXR1cm4gbmV3IFRpbWUoZSl9c3RhdGljIHRpbWVTdGFtcChlKXtyZXR1cm4gbmV3IFRpbWVTdGFtcChlKX1zdGF0aWMgdG9vbFRpcChlKXtyZXR1cm4gbmV3IFRvb2xUaXAoZSl9c3RhdGljIHRyYXZlcnNhbChlKXtyZXR1cm4gbmV3IFRyYXZlcnNhbChlKX1zdGF0aWMgdHJhdmVyc2UoZSl7cmV0dXJuIG5ldyBUcmF2ZXJzZShlKX1zdGF0aWMgdWkoZSl7cmV0dXJuIG5ldyBVaShlKX1zdGF0aWMgdmFsaWRhdGUoZSl7cmV0dXJuIG5ldyBWYWxpZGF0ZShlKX1zdGF0aWMgdmFsdWUoZSl7cmV0dXJuIG5ldyBWYWx1ZShlKX1zdGF0aWMgdmFyaWFibGVzKGUpe3JldHVybiBuZXcgVmFyaWFibGVzKGUpfX10LlRlbXBsYXRlTmFtZXNwYWNlPVRlbXBsYXRlTmFtZXNwYWNlfSwoZSx0KT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0Lk5hbWVzcGFjZUlkcz10LiRidWlsZFhGQU9iamVjdD12b2lkIDA7Y29uc3QgYT1TeW1ib2woKTt0LiRidWlsZFhGQU9iamVjdD1hO3QuTmFtZXNwYWNlSWRzPXtjb25maWc6e2lkOjAsY2hlY2s6ZT0+ZS5zdGFydHNXaXRoKCJodHRwOi8vd3d3LnhmYS5vcmcvc2NoZW1hL3hjaS8iKX0sY29ubmVjdGlvblNldDp7aWQ6MSxjaGVjazplPT5lLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGZhLWNvbm5lY3Rpb24tc2V0LyIpfSxkYXRhc2V0czp7aWQ6MixjaGVjazplPT5lLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGZhLWRhdGEvIil9LGZvcm06e2lkOjMsY2hlY2s6ZT0+ZS5zdGFydHNXaXRoKCJodHRwOi8vd3d3LnhmYS5vcmcvc2NoZW1hL3hmYS1mb3JtLyIpfSxsb2NhbGVTZXQ6e2lkOjQsY2hlY2s6ZT0+ZS5zdGFydHNXaXRoKCJodHRwOi8vd3d3LnhmYS5vcmcvc2NoZW1hL3hmYS1sb2NhbGUtc2V0LyIpfSxwZGY6e2lkOjUsY2hlY2s6ZT0+Imh0dHA6Ly9ucy5hZG9iZS5jb20veGRwL3BkZi8iPT09ZX0sc2lnbmF0dXJlOntpZDo2LGNoZWNrOmU9PiJodHRwOi8vd3d3LnczLm9yZy8yMDAwLzA5L3htbGRzaWcjIj09PWV9LHNvdXJjZVNldDp7aWQ6NyxjaGVjazplPT5lLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGZhLXNvdXJjZS1zZXQvIil9LHN0eWxlc2hlZXQ6e2lkOjgsY2hlY2s6ZT0+Imh0dHA6Ly93d3cudzMub3JnLzE5OTkvWFNML1RyYW5zZm9ybSI9PT1lfSx0ZW1wbGF0ZTp7aWQ6OSxjaGVjazplPT5lLnN0YXJ0c1dpdGgoImh0dHA6Ly93d3cueGZhLm9yZy9zY2hlbWEveGZhLXRlbXBsYXRlLyIpfSx4ZGM6e2lkOjEwLGNoZWNrOmU9PmUuc3RhcnRzV2l0aCgiaHR0cDovL3d3dy54ZmEub3JnL3NjaGVtYS94ZGMvIil9LHhkcDp7aWQ6MTEsY2hlY2s6ZT0+Imh0dHA6Ly9ucy5hZG9iZS5jb20veGRwLyI9PT1lfSx4ZmRmOntpZDoxMixjaGVjazplPT4iaHR0cDovL25zLmFkb2JlLmNvbS94ZmRmLyI9PT1lfSx4aHRtbDp7aWQ6MTMsY2hlY2s6ZT0+Imh0dHA6Ly93d3cudzMub3JnLzE5OTkveGh0bWwiPT09ZX0seG1wbWV0YTp7aWQ6MTQsY2hlY2s6ZT0+Imh0dHA6Ly9ucy5hZG9iZS5jb20veG1wbWV0YS8iPT09ZX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuYWRkSFRNTD1mdW5jdGlvbiBhZGRIVE1MKGUsdCxhKXtjb25zdCBpPWVbci4kZXh0cmFdLHM9aS5hdmFpbGFibGVTcGFjZSxbbyxjLGwsaF09YTtzd2l0Y2goZS5sYXlvdXQpe2Nhc2UicG9zaXRpb24iOmkud2lkdGg9TWF0aC5tYXgoaS53aWR0aCxvK2wpO2kuaGVpZ2h0PU1hdGgubWF4KGkuaGVpZ2h0LGMraCk7aS5jaGlsZHJlbi5wdXNoKHQpO2JyZWFrO2Nhc2UibHItdGIiOmNhc2UicmwtdGIiOmlmKCFpLmxpbmV8fDE9PT1pLmF0dGVtcHQpe2kubGluZT1jcmVhdGVMaW5lKGUsW10pO2kuY2hpbGRyZW4ucHVzaChpLmxpbmUpO2kubnVtYmVySW5MaW5lPTB9aS5udW1iZXJJbkxpbmUrPTE7aS5saW5lLmNoaWxkcmVuLnB1c2godCk7aWYoMD09PWkuYXR0ZW1wdCl7aS5jdXJyZW50V2lkdGgrPWw7aS5oZWlnaHQ9TWF0aC5tYXgoaS5oZWlnaHQsaS5wcmV2SGVpZ2h0K2gpfWVsc2V7aS5jdXJyZW50V2lkdGg9bDtpLnByZXZIZWlnaHQ9aS5oZWlnaHQ7aS5oZWlnaHQrPWg7aS5hdHRlbXB0PTB9aS53aWR0aD1NYXRoLm1heChpLndpZHRoLGkuY3VycmVudFdpZHRoKTticmVhaztjYXNlInJsLXJvdyI6Y2FzZSJyb3ciOntpLmNoaWxkcmVuLnB1c2godCk7aS53aWR0aCs9bDtpLmhlaWdodD1NYXRoLm1heChpLmhlaWdodCxoKTtjb25zdCBlPSgwLG4ubWVhc3VyZVRvU3RyaW5nKShpLmhlaWdodCk7Zm9yKGNvbnN0IHQgb2YgaS5jaGlsZHJlbil0LmF0dHJpYnV0ZXMuc3R5bGUuaGVpZ2h0PWU7YnJlYWt9Y2FzZSJ0YWJsZSI6Y2FzZSJ0YiI6aS53aWR0aD1NYXRoLm1pbihzLndpZHRoLE1hdGgubWF4KGkud2lkdGgsbCkpO2kuaGVpZ2h0Kz1oO2kuY2hpbGRyZW4ucHVzaCh0KX19O3QuY2hlY2tEaW1lbnNpb25zPWZ1bmN0aW9uIGNoZWNrRGltZW5zaW9ucyhlLHQpe2lmKG51bGw9PT1lW3IuJGdldFRlbXBsYXRlUm9vdF0oKVtyLiRleHRyYV0uZmlyc3RVbnNwbGl0dGFibGUpcmV0dXJuITA7aWYoMD09PWUud3x8MD09PWUuaClyZXR1cm4hMDtjb25zdCBhPWVbci4kZ2V0U3ViZm9ybVBhcmVudF0oKSxuPWFbci4kZXh0cmFdPy5hdHRlbXB0fHwwLFssaSxzLG9dPWZ1bmN0aW9uIGdldFRyYW5zZm9ybWVkQkJveChlKXtsZXQgdCxhLHI9IiI9PT1lLnc/TmFOOmUudyxuPSIiPT09ZS5oP05hTjplLmgsW2ksc109WzAsMF07c3dpdGNoKGUuYW5jaG9yVHlwZXx8IiIpe2Nhc2UiYm90dG9tQ2VudGVyIjpbaSxzXT1bci8yLG5dO2JyZWFrO2Nhc2UiYm90dG9tTGVmdCI6W2ksc109WzAsbl07YnJlYWs7Y2FzZSJib3R0b21SaWdodCI6W2ksc109W3Isbl07YnJlYWs7Y2FzZSJtaWRkbGVDZW50ZXIiOltpLHNdPVtyLzIsbi8yXTticmVhaztjYXNlIm1pZGRsZUxlZnQiOltpLHNdPVswLG4vMl07YnJlYWs7Y2FzZSJtaWRkbGVSaWdodCI6W2ksc109W3Isbi8yXTticmVhaztjYXNlInRvcENlbnRlciI6W2ksc109W3IvMiwwXTticmVhaztjYXNlInRvcFJpZ2h0IjpbaSxzXT1bciwwXX1zd2l0Y2goZS5yb3RhdGV8fDApe2Nhc2UgMDpbdCxhXT1bLWksLXNdO2JyZWFrO2Nhc2UgOTA6W3QsYV09Wy1zLGldO1tyLG5dPVtuLC1yXTticmVhaztjYXNlIDE4MDpbdCxhXT1baSxzXTtbcixuXT1bLXIsLW5dO2JyZWFrO2Nhc2UgMjcwOlt0LGFdPVtzLC1pXTtbcixuXT1bLW4scl19cmV0dXJuW2UueCt0K01hdGgubWluKDAsciksZS55K2ErTWF0aC5taW4oMCxuKSxNYXRoLmFicyhyKSxNYXRoLmFicyhuKV19KGUpO3N3aXRjaChhLmxheW91dCl7Y2FzZSJsci10YiI6Y2FzZSJybC10YiI6cmV0dXJuIDA9PT1uP2Vbci4kZ2V0VGVtcGxhdGVSb290XSgpW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmU/IiIhPT1lLnc/TWF0aC5yb3VuZChzLXQud2lkdGgpPD0yOnQud2lkdGg+MjohKCIiIT09ZS5oJiZNYXRoLnJvdW5kKG8tdC5oZWlnaHQpPjIpJiYoIiIhPT1lLnc/TWF0aC5yb3VuZChzLXQud2lkdGgpPD0yfHwwPT09YVtyLiRleHRyYV0ubnVtYmVySW5MaW5lJiZ0LmhlaWdodD4yOnQud2lkdGg+Mik6ISFlW3IuJGdldFRlbXBsYXRlUm9vdF0oKVtyLiRleHRyYV0ubm9MYXlvdXRGYWlsdXJlfHwhKCIiIT09ZS5oJiZNYXRoLnJvdW5kKG8tdC5oZWlnaHQpPjIpJiYoKCIiPT09ZS53fHxNYXRoLnJvdW5kKHMtdC53aWR0aCk8PTJ8fCFhW3IuJGlzVGhlcmVNb3JlV2lkdGhdKCkpJiZ0LmhlaWdodD4yKTtjYXNlInRhYmxlIjpjYXNlInRiIjpyZXR1cm4hIWVbci4kZ2V0VGVtcGxhdGVSb290XSgpW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmV8fCgiIj09PWUuaHx8ZVtyLiRpc1NwbGl0dGFibGVdKCk/KCIiPT09ZS53fHxNYXRoLnJvdW5kKHMtdC53aWR0aCk8PTJ8fCFhW3IuJGlzVGhlcmVNb3JlV2lkdGhdKCkpJiZ0LmhlaWdodD4yOk1hdGgucm91bmQoby10LmhlaWdodCk8PTIpO2Nhc2UicG9zaXRpb24iOmlmKGVbci4kZ2V0VGVtcGxhdGVSb290XSgpW3IuJGV4dHJhXS5ub0xheW91dEZhaWx1cmUpcmV0dXJuITA7aWYoIiI9PT1lLmh8fE1hdGgucm91bmQobytpLXQuaGVpZ2h0KTw9MilyZXR1cm4hMDtyZXR1cm4gbytpPmVbci4kZ2V0VGVtcGxhdGVSb290XSgpW3IuJGV4dHJhXS5jdXJyZW50Q29udGVudEFyZWEuaDtjYXNlInJsLXJvdyI6Y2FzZSJyb3ciOnJldHVybiEhZVtyLiRnZXRUZW1wbGF0ZVJvb3RdKClbci4kZXh0cmFdLm5vTGF5b3V0RmFpbHVyZXx8KCIiPT09ZS5ofHxNYXRoLnJvdW5kKG8tdC5oZWlnaHQpPD0yKTtkZWZhdWx0OnJldHVybiEwfX07dC5mbHVzaEhUTUw9ZnVuY3Rpb24gZmx1c2hIVE1MKGUpe2lmKCFlW3IuJGV4dHJhXSlyZXR1cm4gbnVsbDtjb25zdCB0PXtuYW1lOiJkaXYiLGF0dHJpYnV0ZXM6ZVtyLiRleHRyYV0uYXR0cmlidXRlcyxjaGlsZHJlbjplW3IuJGV4dHJhXS5jaGlsZHJlbn07aWYoZVtyLiRleHRyYV0uZmFpbGluZ05vZGUpe2NvbnN0IGE9ZVtyLiRleHRyYV0uZmFpbGluZ05vZGVbci4kZmx1c2hIVE1MXSgpO2EmJihlLmxheW91dC5lbmRzV2l0aCgiLXRiIik/dC5jaGlsZHJlbi5wdXNoKGNyZWF0ZUxpbmUoZSxbYV0pKTp0LmNoaWxkcmVuLnB1c2goYSkpfWlmKDA9PT10LmNoaWxkcmVuLmxlbmd0aClyZXR1cm4gbnVsbDtyZXR1cm4gdH07dC5nZXRBdmFpbGFibGVTcGFjZT1mdW5jdGlvbiBnZXRBdmFpbGFibGVTcGFjZShlKXtjb25zdCB0PWVbci4kZXh0cmFdLmF2YWlsYWJsZVNwYWNlLGE9ZS5tYXJnaW4/ZS5tYXJnaW4udG9wSW5zZXQrZS5tYXJnaW4uYm90dG9tSW5zZXQ6MCxuPWUubWFyZ2luP2UubWFyZ2luLmxlZnRJbnNldCtlLm1hcmdpbi5yaWdodEluc2V0OjA7c3dpdGNoKGUubGF5b3V0KXtjYXNlImxyLXRiIjpjYXNlInJsLXRiIjpyZXR1cm4gMD09PWVbci4kZXh0cmFdLmF0dGVtcHQ/e3dpZHRoOnQud2lkdGgtbi1lW3IuJGV4dHJhXS5jdXJyZW50V2lkdGgsaGVpZ2h0OnQuaGVpZ2h0LWEtZVtyLiRleHRyYV0ucHJldkhlaWdodH06e3dpZHRoOnQud2lkdGgtbixoZWlnaHQ6dC5oZWlnaHQtYS1lW3IuJGV4dHJhXS5oZWlnaHR9O2Nhc2Uicmwtcm93IjpjYXNlInJvdyI6cmV0dXJue3dpZHRoOmVbci4kZXh0cmFdLmNvbHVtbldpZHRocy5zbGljZShlW3IuJGV4dHJhXS5jdXJyZW50Q29sdW1uKS5yZWR1Y2UoKChlLHQpPT5lK3QpKSxoZWlnaHQ6dC5oZWlnaHQtbn07Y2FzZSJ0YWJsZSI6Y2FzZSJ0YiI6cmV0dXJue3dpZHRoOnQud2lkdGgtbixoZWlnaHQ6dC5oZWlnaHQtYS1lW3IuJGV4dHJhXS5oZWlnaHR9O2RlZmF1bHQ6cmV0dXJuIHR9fTt2YXIgcj1hKDc4KSxuPWEoODMpO2Z1bmN0aW9uIGNyZWF0ZUxpbmUoZSx0KXtyZXR1cm57bmFtZToiZGl2IixhdHRyaWJ1dGVzOntjbGFzczpbImxyLXRiIj09PWUubGF5b3V0PyJ4ZmFMciI6InhmYVJsIl19LGNoaWxkcmVuOnR9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LmNvbXB1dGVCYm94PWZ1bmN0aW9uIGNvbXB1dGVCYm94KGUsdCxhKXtsZXQgbjtpZigiIiE9PWUudyYmIiIhPT1lLmgpbj1bZS54LGUueSxlLncsZS5oXTtlbHNle2lmKCFhKXJldHVybiBudWxsO2xldCBpPWUudztpZigiIj09PWkpe2lmKDA9PT1lLm1heFcpe2NvbnN0IHQ9ZVtyLiRnZXRTdWJmb3JtUGFyZW50XSgpO2k9InBvc2l0aW9uIj09PXQubGF5b3V0JiYiIiE9PXQudz8wOmUubWluV31lbHNlIGk9TWF0aC5taW4oZS5tYXhXLGEud2lkdGgpO3QuYXR0cmlidXRlcy5zdHlsZS53aWR0aD1tZWFzdXJlVG9TdHJpbmcoaSl9bGV0IHM9ZS5oO2lmKCIiPT09cyl7aWYoMD09PWUubWF4SCl7Y29uc3QgdD1lW3IuJGdldFN1YmZvcm1QYXJlbnRdKCk7cz0icG9zaXRpb24iPT09dC5sYXlvdXQmJiIiIT09dC5oPzA6ZS5taW5IfWVsc2Ugcz1NYXRoLm1pbihlLm1heEgsYS5oZWlnaHQpO3QuYXR0cmlidXRlcy5zdHlsZS5oZWlnaHQ9bWVhc3VyZVRvU3RyaW5nKHMpfW49W2UueCxlLnksaSxzXX1yZXR1cm4gbn07dC5jcmVhdGVXcmFwcGVyPWZ1bmN0aW9uIGNyZWF0ZVdyYXBwZXIoZSx0KXtjb25zdHthdHRyaWJ1dGVzOmF9PXQse3N0eWxlOm59PWEsaT17bmFtZToiZGl2IixhdHRyaWJ1dGVzOntjbGFzczpbInhmYVdyYXBwZXIiXSxzdHlsZTpPYmplY3QuY3JlYXRlKG51bGwpfSxjaGlsZHJlbjpbXX07YS5jbGFzcy5wdXNoKCJ4ZmFXcmFwcGVkIik7aWYoZS5ib3JkZXIpe2NvbnN0e3dpZHRoczphLGluc2V0czpzfT1lLmJvcmRlcltyLiRleHRyYV07bGV0IG8sYyxsPXNbMF0saD1zWzNdO2NvbnN0IHU9c1swXStzWzJdLGQ9c1sxXStzWzNdO3N3aXRjaChlLmJvcmRlci5oYW5kKXtjYXNlImV2ZW4iOmwtPWFbMF0vMjtoLT1hWzNdLzI7bz1gY2FsYygxMDAlICsgJHsoYVsxXSthWzNdKS8yLWR9cHgpYDtjPWBjYWxjKDEwMCUgKyAkeyhhWzBdK2FbMl0pLzItdX1weClgO2JyZWFrO2Nhc2UibGVmdCI6bC09YVswXTtoLT1hWzNdO289YGNhbGMoMTAwJSArICR7YVsxXSthWzNdLWR9cHgpYDtjPWBjYWxjKDEwMCUgKyAke2FbMF0rYVsyXS11fXB4KWA7YnJlYWs7Y2FzZSJyaWdodCI6bz1kP2BjYWxjKDEwMCUgLSAke2R9cHgpYDoiMTAwJSI7Yz11P2BjYWxjKDEwMCUgLSAke3V9cHgpYDoiMTAwJSJ9Y29uc3QgZj1bInhmYUJvcmRlciJdO2lzUHJpbnRPbmx5KGUuYm9yZGVyKSYmZi5wdXNoKCJ4ZmFQcmludE9ubHkiKTtjb25zdCBnPXtuYW1lOiJkaXYiLGF0dHJpYnV0ZXM6e2NsYXNzOmYsc3R5bGU6e3RvcDpgJHtsfXB4YCxsZWZ0OmAke2h9cHhgLHdpZHRoOm8saGVpZ2h0OmN9fSxjaGlsZHJlbjpbXX07Zm9yKGNvbnN0IGUgb2ZbImJvcmRlciIsImJvcmRlcldpZHRoIiwiYm9yZGVyQ29sb3IiLCJib3JkZXJSYWRpdXMiLCJib3JkZXJTdHlsZSJdKWlmKHZvaWQgMCE9PW5bZV0pe2cuYXR0cmlidXRlcy5zdHlsZVtlXT1uW2VdO2RlbGV0ZSBuW2VdfWkuY2hpbGRyZW4ucHVzaChnLHQpfWVsc2UgaS5jaGlsZHJlbi5wdXNoKHQpO2Zvcihjb25zdCBlIG9mWyJiYWNrZ3JvdW5kIiwiYmFja2dyb3VuZENsaXAiLCJ0b3AiLCJsZWZ0Iiwid2lkdGgiLCJoZWlnaHQiLCJtaW5XaWR0aCIsIm1pbkhlaWdodCIsIm1heFdpZHRoIiwibWF4SGVpZ2h0IiwidHJhbnNmb3JtIiwidHJhbnNmb3JtT3JpZ2luIiwidmlzaWJpbGl0eSJdKWlmKHZvaWQgMCE9PW5bZV0pe2kuYXR0cmlidXRlcy5zdHlsZVtlXT1uW2VdO2RlbGV0ZSBuW2VdfWkuYXR0cmlidXRlcy5zdHlsZS5wb3NpdGlvbj0iYWJzb2x1dGUiPT09bi5wb3NpdGlvbj8iYWJzb2x1dGUiOiJyZWxhdGl2ZSI7ZGVsZXRlIG4ucG9zaXRpb247aWYobi5hbGlnblNlbGYpe2kuYXR0cmlidXRlcy5zdHlsZS5hbGlnblNlbGY9bi5hbGlnblNlbGY7ZGVsZXRlIG4uYWxpZ25TZWxmfXJldHVybiBpfTt0LmZpeERpbWVuc2lvbnM9ZnVuY3Rpb24gZml4RGltZW5zaW9ucyhlKXtjb25zdCB0PWVbci4kZ2V0U3ViZm9ybVBhcmVudF0oKTtpZih0LmxheW91dD8uaW5jbHVkZXMoInJvdyIpKXtjb25zdCBhPXRbci4kZXh0cmFdLG49ZS5jb2xTcGFuO2xldCBpO2k9LTE9PT1uP2EuY29sdW1uV2lkdGhzLnNsaWNlKGEuY3VycmVudENvbHVtbikucmVkdWNlKCgoZSx0KT0+ZSt0KSwwKTphLmNvbHVtbldpZHRocy5zbGljZShhLmN1cnJlbnRDb2x1bW4sYS5jdXJyZW50Q29sdW1uK24pLnJlZHVjZSgoKGUsdCk9PmUrdCksMCk7aXNOYU4oaSl8fChlLnc9aSl9dC5sYXlvdXQmJiJwb3NpdGlvbiIhPT10LmxheW91dCYmKGUueD1lLnk9MCk7InRhYmxlIj09PWUubGF5b3V0JiYiIj09PWUudyYmQXJyYXkuaXNBcnJheShlLmNvbHVtbldpZHRocykmJihlLnc9ZS5jb2x1bW5XaWR0aHMucmVkdWNlKCgoZSx0KT0+ZSt0KSwwKSl9O3QuZml4VGV4dEluZGVudD1mdW5jdGlvbiBmaXhUZXh0SW5kZW50KGUpe2NvbnN0IHQ9KDAsaS5nZXRNZWFzdXJlbWVudCkoZS50ZXh0SW5kZW50LCIwcHgiKTtpZih0Pj0wKXJldHVybjtjb25zdCBhPSJwYWRkaW5nIisoImxlZnQiPT0oInJpZ2h0Ij09PWUudGV4dEFsaWduPyJyaWdodCI6ImxlZnQiKT8iTGVmdCI6IlJpZ2h0Iikscj0oMCxpLmdldE1lYXN1cmVtZW50KShlW2FdLCIwcHgiKTtlW2FdPXItdCsicHgifTt0LmZpeFVSTD1mdW5jdGlvbiBmaXhVUkwoZSl7Y29uc3QgdD0oMCxuLmNyZWF0ZVZhbGlkQWJzb2x1dGVVcmwpKGUsbnVsbCx7YWRkRGVmYXVsdFByb3RvY29sOiEwLHRyeUNvbnZlcnRFbmNvZGluZzohMH0pO3JldHVybiB0P3QuaHJlZjpudWxsfTt0LmlzUHJpbnRPbmx5PWlzUHJpbnRPbmx5O3QubGF5b3V0Q2xhc3M9ZnVuY3Rpb24gbGF5b3V0Q2xhc3MoZSl7c3dpdGNoKGUubGF5b3V0KXtjYXNlInBvc2l0aW9uIjpkZWZhdWx0OnJldHVybiJ4ZmFQb3NpdGlvbiI7Y2FzZSJsci10YiI6cmV0dXJuInhmYUxyVGIiO2Nhc2Uicmwtcm93IjpyZXR1cm4ieGZhUmxSb3ciO2Nhc2UicmwtdGIiOnJldHVybiJ4ZmFSbFRiIjtjYXNlInJvdyI6cmV0dXJuInhmYVJvdyI7Y2FzZSJ0YWJsZSI6cmV0dXJuInhmYVRhYmxlIjtjYXNlInRiIjpyZXR1cm4ieGZhVGIifX07dC5sYXlvdXROb2RlPWZ1bmN0aW9uIGxheW91dE5vZGUoZSx0KXtsZXQgYT1udWxsLG49bnVsbCxpPSExO2lmKCghZS53fHwhZS5oKSYmZS52YWx1ZSl7bGV0IHM9MCxvPTA7aWYoZS5tYXJnaW4pe3M9ZS5tYXJnaW4ubGVmdEluc2V0K2UubWFyZ2luLnJpZ2h0SW5zZXQ7bz1lLm1hcmdpbi50b3BJbnNldCtlLm1hcmdpbi5ib3R0b21JbnNldH1sZXQgYz1udWxsLGw9bnVsbDtpZihlLnBhcmEpe2w9T2JqZWN0LmNyZWF0ZShudWxsKTtjPSIiPT09ZS5wYXJhLmxpbmVIZWlnaHQ/bnVsbDplLnBhcmEubGluZUhlaWdodDtsLnRvcD0iIj09PWUucGFyYS5zcGFjZUFib3ZlPzA6ZS5wYXJhLnNwYWNlQWJvdmU7bC5ib3R0b209IiI9PT1lLnBhcmEuc3BhY2VCZWxvdz8wOmUucGFyYS5zcGFjZUJlbG93O2wubGVmdD0iIj09PWUucGFyYS5tYXJnaW5MZWZ0PzA6ZS5wYXJhLm1hcmdpbkxlZnQ7bC5yaWdodD0iIj09PWUucGFyYS5tYXJnaW5SaWdodD8wOmUucGFyYS5tYXJnaW5SaWdodH1sZXQgaD1lLmZvbnQ7aWYoIWgpe2NvbnN0IHQ9ZVtyLiRnZXRUZW1wbGF0ZVJvb3RdKCk7bGV0IGE9ZVtyLiRnZXRQYXJlbnRdKCk7Zm9yKDthJiZhIT09dDspe2lmKGEuZm9udCl7aD1hLmZvbnQ7YnJlYWt9YT1hW3IuJGdldFBhcmVudF0oKX19Y29uc3QgdT0oZS53fHx0LndpZHRoKS1zLGQ9ZVtyLiRnbG9iYWxEYXRhXS5mb250RmluZGVyO2lmKGUudmFsdWUuZXhEYXRhJiZlLnZhbHVlLmV4RGF0YVtyLiRjb250ZW50XSYmInRleHQvaHRtbCI9PT1lLnZhbHVlLmV4RGF0YS5jb250ZW50VHlwZSl7Y29uc3QgdD1sYXlvdXRUZXh0KGUudmFsdWUuZXhEYXRhW3IuJGNvbnRlbnRdLGgsbCxjLGQsdSk7bj10LndpZHRoO2E9dC5oZWlnaHQ7aT10LmlzQnJva2VufWVsc2V7Y29uc3QgdD1lLnZhbHVlW3IuJHRleHRdKCk7aWYodCl7Y29uc3QgZT1sYXlvdXRUZXh0KHQsaCxsLGMsZCx1KTtuPWUud2lkdGg7YT1lLmhlaWdodDtpPWUuaXNCcm9rZW59fW51bGw9PT1ufHxlLnd8fChuKz1zKTtudWxsPT09YXx8ZS5ofHwoYSs9byl9cmV0dXJue3c6bixoOmEsaXNCcm9rZW46aX19O3QubWVhc3VyZVRvU3RyaW5nPW1lYXN1cmVUb1N0cmluZzt0LnNldEFjY2Vzcz1mdW5jdGlvbiBzZXRBY2Nlc3MoZSx0KXtzd2l0Y2goZS5hY2Nlc3Mpe2Nhc2Uibm9uSW50ZXJhY3RpdmUiOnQucHVzaCgieGZhTm9uSW50ZXJhY3RpdmUiKTticmVhaztjYXNlInJlYWRPbmx5Ijp0LnB1c2goInhmYVJlYWRPbmx5Iik7YnJlYWs7Y2FzZSJwcm90ZWN0ZWQiOnQucHVzaCgieGZhRGlzYWJsZWQiKX19O3Quc2V0Rm9udEZhbWlseT1mdW5jdGlvbiBzZXRGb250RmFtaWx5KGUsdCxhLHIpe2lmKCFhKXtkZWxldGUgci5mb250RmFtaWx5O3JldHVybn1jb25zdCBuPSgwLGkuc3RyaXBRdW90ZXMpKGUudHlwZWZhY2UpO3IuZm9udEZhbWlseT1gIiR7bn0iYDtjb25zdCBvPWEuZmluZChuKTtpZihvKXtjb25zdHtmb250RmFtaWx5OmF9PW8ucmVndWxhci5jc3NGb250SW5mbzthIT09biYmKHIuZm9udEZhbWlseT1gIiR7YX0iYCk7Y29uc3QgaT1nZXRDdXJyZW50UGFyYSh0KTtpZihpJiYiIiE9PWkubGluZUhlaWdodClyZXR1cm47aWYoci5saW5lSGVpZ2h0KXJldHVybjtjb25zdCBjPSgwLHMuc2VsZWN0Rm9udCkoZSxvKTtjJiYoci5saW5lSGVpZ2h0PU1hdGgubWF4KDEuMixjLmxpbmVIZWlnaHQpKX19O3Quc2V0TWluTWF4RGltZW5zaW9ucz1mdW5jdGlvbiBzZXRNaW5NYXhEaW1lbnNpb25zKGUsdCl7aWYoInBvc2l0aW9uIj09PWVbci4kZ2V0U3ViZm9ybVBhcmVudF0oKS5sYXlvdXQpe2UubWluVz4wJiYodC5taW5XaWR0aD1tZWFzdXJlVG9TdHJpbmcoZS5taW5XKSk7ZS5tYXhXPjAmJih0Lm1heFdpZHRoPW1lYXN1cmVUb1N0cmluZyhlLm1heFcpKTtlLm1pbkg+MCYmKHQubWluSGVpZ2h0PW1lYXN1cmVUb1N0cmluZyhlLm1pbkgpKTtlLm1heEg+MCYmKHQubWF4SGVpZ2h0PW1lYXN1cmVUb1N0cmluZyhlLm1heEgpKX19O3Quc2V0UGFyYT1mdW5jdGlvbiBzZXRQYXJhKGUsdCxhKXtpZihhLmF0dHJpYnV0ZXMuY2xhc3M/LmluY2x1ZGVzKCJ4ZmFSaWNoIikpe2lmKHQpeyIiPT09ZS5oJiYodC5oZWlnaHQ9ImF1dG8iKTsiIj09PWUudyYmKHQud2lkdGg9ImF1dG8iKX1jb25zdCBuPWdldEN1cnJlbnRQYXJhKGUpO2lmKG4pe2NvbnN0IGU9YS5hdHRyaWJ1dGVzLnN0eWxlO2UuZGlzcGxheT0iZmxleCI7ZS5mbGV4RGlyZWN0aW9uPSJjb2x1bW4iO3N3aXRjaChuLnZBbGlnbil7Y2FzZSJ0b3AiOmUuanVzdGlmeUNvbnRlbnQ9InN0YXJ0IjticmVhaztjYXNlImJvdHRvbSI6ZS5qdXN0aWZ5Q29udGVudD0iZW5kIjticmVhaztjYXNlIm1pZGRsZSI6ZS5qdXN0aWZ5Q29udGVudD0iY2VudGVyIn1jb25zdCB0PW5bci4kdG9TdHlsZV0oKTtmb3IoY29uc3RbYSxyXW9mIE9iamVjdC5lbnRyaWVzKHQpKWEgaW4gZXx8KGVbYV09cil9fX07dC50b1N0eWxlPWZ1bmN0aW9uIHRvU3R5bGUoZSwuLi50KXtjb25zdCBhPU9iamVjdC5jcmVhdGUobnVsbCk7Zm9yKGNvbnN0IGkgb2YgdCl7Y29uc3QgdD1lW2ldO2lmKG51bGwhPT10KWlmKGwuaGFzT3duUHJvcGVydHkoaSkpbFtpXShlLGEpO2Vsc2UgaWYodCBpbnN0YW5jZW9mIGMuWEZBT2JqZWN0KXtjb25zdCBlPXRbci4kdG9TdHlsZV0oKTtlP09iamVjdC5hc3NpZ24oYSxlKTooMCxuLndhcm4pKGAoREVCVUcpIC0gWEZBIC0gc3R5bGUgZm9yICR7aX0gbm90IGltcGxlbWVudGVkIHlldGApfX1yZXR1cm4gYX07dmFyIHI9YSg3OCksbj1hKDIpLGk9YSg4NCkscz1hKDg1KSxvPWEoODYpLGM9YSg4Nyk7ZnVuY3Rpb24gbWVhc3VyZVRvU3RyaW5nKGUpe3JldHVybiJzdHJpbmciPT10eXBlb2YgZT8iMHB4IjpOdW1iZXIuaXNJbnRlZ2VyKGUpP2Ake2V9cHhgOmAke2UudG9GaXhlZCgyKX1weGB9Y29uc3QgbD17YW5jaG9yVHlwZShlLHQpe2NvbnN0IGE9ZVtyLiRnZXRTdWJmb3JtUGFyZW50XSgpO2lmKGEmJighYS5sYXlvdXR8fCJwb3NpdGlvbiI9PT1hLmxheW91dCkpeyJ0cmFuc2Zvcm0iaW4gdHx8KHQudHJhbnNmb3JtPSIiKTtzd2l0Y2goZS5hbmNob3JUeXBlKXtjYXNlImJvdHRvbUNlbnRlciI6dC50cmFuc2Zvcm0rPSJ0cmFuc2xhdGUoLTUwJSwgLTEwMCUpIjticmVhaztjYXNlImJvdHRvbUxlZnQiOnQudHJhbnNmb3JtKz0idHJhbnNsYXRlKDAsLTEwMCUpIjticmVhaztjYXNlImJvdHRvbVJpZ2h0Ijp0LnRyYW5zZm9ybSs9InRyYW5zbGF0ZSgtMTAwJSwtMTAwJSkiO2JyZWFrO2Nhc2UibWlkZGxlQ2VudGVyIjp0LnRyYW5zZm9ybSs9InRyYW5zbGF0ZSgtNTAlLC01MCUpIjticmVhaztjYXNlIm1pZGRsZUxlZnQiOnQudHJhbnNmb3JtKz0idHJhbnNsYXRlKDAsLTUwJSkiO2JyZWFrO2Nhc2UibWlkZGxlUmlnaHQiOnQudHJhbnNmb3JtKz0idHJhbnNsYXRlKC0xMDAlLC01MCUpIjticmVhaztjYXNlInRvcENlbnRlciI6dC50cmFuc2Zvcm0rPSJ0cmFuc2xhdGUoLTUwJSwwKSI7YnJlYWs7Y2FzZSJ0b3BSaWdodCI6dC50cmFuc2Zvcm0rPSJ0cmFuc2xhdGUoLTEwMCUsMCkifX19LGRpbWVuc2lvbnMoZSx0KXtjb25zdCBhPWVbci4kZ2V0U3ViZm9ybVBhcmVudF0oKTtsZXQgbj1lLnc7Y29uc3QgaT1lLmg7aWYoYS5sYXlvdXQ/LmluY2x1ZGVzKCJyb3ciKSl7Y29uc3QgdD1hW3IuJGV4dHJhXSxpPWUuY29sU3BhbjtsZXQgcztpZigtMT09PWkpe3M9dC5jb2x1bW5XaWR0aHMuc2xpY2UodC5jdXJyZW50Q29sdW1uKS5yZWR1Y2UoKChlLHQpPT5lK3QpLDApO3QuY3VycmVudENvbHVtbj0wfWVsc2V7cz10LmNvbHVtbldpZHRocy5zbGljZSh0LmN1cnJlbnRDb2x1bW4sdC5jdXJyZW50Q29sdW1uK2kpLnJlZHVjZSgoKGUsdCk9PmUrdCksMCk7dC5jdXJyZW50Q29sdW1uPSh0LmN1cnJlbnRDb2x1bW4rZS5jb2xTcGFuKSV0LmNvbHVtbldpZHRocy5sZW5ndGh9aXNOYU4ocyl8fChuPWUudz1zKX10LndpZHRoPSIiIT09bj9tZWFzdXJlVG9TdHJpbmcobik6ImF1dG8iO3QuaGVpZ2h0PSIiIT09aT9tZWFzdXJlVG9TdHJpbmcoaSk6ImF1dG8ifSxwb3NpdGlvbihlLHQpe2NvbnN0IGE9ZVtyLiRnZXRTdWJmb3JtUGFyZW50XSgpO2lmKCFhPy5sYXlvdXR8fCJwb3NpdGlvbiI9PT1hLmxheW91dCl7dC5wb3NpdGlvbj0iYWJzb2x1dGUiO3QubGVmdD1tZWFzdXJlVG9TdHJpbmcoZS54KTt0LnRvcD1tZWFzdXJlVG9TdHJpbmcoZS55KX19LHJvdGF0ZShlLHQpe2lmKGUucm90YXRlKXsidHJhbnNmb3JtImluIHR8fCh0LnRyYW5zZm9ybT0iIik7dC50cmFuc2Zvcm0rPWByb3RhdGUoLSR7ZS5yb3RhdGV9ZGVnKWA7dC50cmFuc2Zvcm1PcmlnaW49InRvcCBsZWZ0In19LHByZXNlbmNlKGUsdCl7c3dpdGNoKGUucHJlc2VuY2Upe2Nhc2UiaW52aXNpYmxlIjp0LnZpc2liaWxpdHk9ImhpZGRlbiI7YnJlYWs7Y2FzZSJoaWRkZW4iOmNhc2UiaW5hY3RpdmUiOnQuZGlzcGxheT0ibm9uZSJ9fSxoQWxpZ24oZSx0KXtpZigicGFyYSI9PT1lW3IuJG5vZGVOYW1lXSlzd2l0Y2goZS5oQWxpZ24pe2Nhc2UianVzdGlmeUFsbCI6dC50ZXh0QWxpZ249Imp1c3RpZnktYWxsIjticmVhaztjYXNlInJhZGl4Ijp0LnRleHRBbGlnbj0ibGVmdCI7YnJlYWs7ZGVmYXVsdDp0LnRleHRBbGlnbj1lLmhBbGlnbn1lbHNlIHN3aXRjaChlLmhBbGlnbil7Y2FzZSJsZWZ0Ijp0LmFsaWduU2VsZj0ic3RhcnQiO2JyZWFrO2Nhc2UiY2VudGVyIjp0LmFsaWduU2VsZj0iY2VudGVyIjticmVhaztjYXNlInJpZ2h0Ijp0LmFsaWduU2VsZj0iZW5kIn19LG1hcmdpbihlLHQpe2UubWFyZ2luJiYodC5tYXJnaW49ZS5tYXJnaW5bci4kdG9TdHlsZV0oKS5tYXJnaW4pfX07ZnVuY3Rpb24gbGF5b3V0VGV4dChlLHQsYSxuLGkscyl7Y29uc3QgYz1uZXcgby5UZXh0TWVhc3VyZSh0LGEsbixpKTsic3RyaW5nIj09dHlwZW9mIGU/Yy5hZGRTdHJpbmcoZSk6ZVtyLiRwdXNoR2x5cGhzXShjKTtyZXR1cm4gYy5jb21wdXRlKHMpfWZ1bmN0aW9uIGlzUHJpbnRPbmx5KGUpe3JldHVybiBlLnJlbGV2YW50Lmxlbmd0aD4wJiYhZS5yZWxldmFudFswXS5leGNsdWRlZCYmInByaW50Ij09PWUucmVsZXZhbnRbMF0udmlld25hbWV9ZnVuY3Rpb24gZ2V0Q3VycmVudFBhcmEoZSl7Y29uc3QgdD1lW3IuJGdldFRlbXBsYXRlUm9vdF0oKVtyLiRleHRyYV0ucGFyYVN0YWNrO3JldHVybiB0Lmxlbmd0aD90LmF0KC0xKTpudWxsfX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkhUTUxSZXN1bHQ9dm9pZCAwO3QuZ2V0QkJveD1mdW5jdGlvbiBnZXRCQm94KGUpe2NvbnN0IHQ9LTE7aWYoIWUpcmV0dXJue3g6dCx5OnQsd2lkdGg6dCxoZWlnaHQ6dH07Y29uc3QgYT1lLnRyaW0oKS5zcGxpdCgvXHMqLFxzKi8pLm1hcCgoZT0+Z2V0TWVhc3VyZW1lbnQoZSwiLTEiKSkpO2lmKGEubGVuZ3RoPDR8fGFbMl08MHx8YVszXTwwKXJldHVybnt4OnQseTp0LHdpZHRoOnQsaGVpZ2h0OnR9O2NvbnN0W3IsbixpLHNdPWE7cmV0dXJue3g6cix5Om4sd2lkdGg6aSxoZWlnaHQ6c319O3QuZ2V0Q29sb3I9ZnVuY3Rpb24gZ2V0Q29sb3IoZSx0PVswLDAsMF0pe2xldFthLHIsbl09dDtpZighZSlyZXR1cm57cjphLGc6cixiOm59O2NvbnN0IGk9ZS50cmltKCkuc3BsaXQoL1xzKixccyovKS5tYXAoKGU9Pk1hdGgubWluKE1hdGgubWF4KDAscGFyc2VJbnQoZS50cmltKCksMTApKSwyNTUpKSkubWFwKChlPT5pc05hTihlKT8wOmUpKTtpZihpLmxlbmd0aDwzKXJldHVybntyOmEsZzpyLGI6bn07W2EscixuXT1pO3JldHVybntyOmEsZzpyLGI6bn19O3QuZ2V0RmxvYXQ9ZnVuY3Rpb24gZ2V0RmxvYXQoe2RhdGE6ZSxkZWZhdWx0VmFsdWU6dCx2YWxpZGF0ZTphfSl7aWYoIWUpcmV0dXJuIHQ7ZT1lLnRyaW0oKTtjb25zdCByPXBhcnNlRmxvYXQoZSk7aWYoIWlzTmFOKHIpJiZhKHIpKXJldHVybiByO3JldHVybiB0fTt0LmdldEludGVnZXI9ZnVuY3Rpb24gZ2V0SW50ZWdlcih7ZGF0YTplLGRlZmF1bHRWYWx1ZTp0LHZhbGlkYXRlOmF9KXtpZighZSlyZXR1cm4gdDtlPWUudHJpbSgpO2NvbnN0IHI9cGFyc2VJbnQoZSwxMCk7aWYoIWlzTmFOKHIpJiZhKHIpKXJldHVybiByO3JldHVybiB0fTt0LmdldEtleXdvcmQ9Z2V0S2V5d29yZDt0LmdldE1lYXN1cmVtZW50PWdldE1lYXN1cmVtZW50O3QuZ2V0UmF0aW89ZnVuY3Rpb24gZ2V0UmF0aW8oZSl7aWYoIWUpcmV0dXJue251bToxLGRlbjoxfTtjb25zdCB0PWUudHJpbSgpLnNwbGl0KC9ccyo6XHMqLykubWFwKChlPT5wYXJzZUZsb2F0KGUpKSkuZmlsdGVyKChlPT4haXNOYU4oZSkpKTsxPT09dC5sZW5ndGgmJnQucHVzaCgxKTtpZigwPT09dC5sZW5ndGgpcmV0dXJue251bToxLGRlbjoxfTtjb25zdFthLHJdPXQ7cmV0dXJue251bTphLGRlbjpyfX07dC5nZXRSZWxldmFudD1mdW5jdGlvbiBnZXRSZWxldmFudChlKXtpZighZSlyZXR1cm5bXTtyZXR1cm4gZS50cmltKCkuc3BsaXQoL1xzKy8pLm1hcCgoZT0+KHtleGNsdWRlZDoiLSI9PT1lWzBdLHZpZXduYW1lOmUuc3Vic3RyaW5nKDEpfSkpKX07dC5nZXRTdHJpbmdPcHRpb249ZnVuY3Rpb24gZ2V0U3RyaW5nT3B0aW9uKGUsdCl7cmV0dXJuIGdldEtleXdvcmQoe2RhdGE6ZSxkZWZhdWx0VmFsdWU6dFswXSx2YWxpZGF0ZTplPT50LmluY2x1ZGVzKGUpfSl9O3Quc3RyaXBRdW90ZXM9ZnVuY3Rpb24gc3RyaXBRdW90ZXMoZSl7aWYoZS5zdGFydHNXaXRoKCInIil8fGUuc3RhcnRzV2l0aCgnIicpKXJldHVybiBlLnNsaWNlKDEsLTEpO3JldHVybiBlfTt2YXIgcj1hKDIpO2NvbnN0IG49e3B0OmU9PmUsY206ZT0+ZS8yLjU0KjcyLG1tOmU9PmUvMjUuNCo3MixpbjplPT43MiplLHB4OmU9PmV9LGk9LyhbKy1dP1xkK1wuP1xkKikoLiopLztmdW5jdGlvbiBnZXRLZXl3b3JkKHtkYXRhOmUsZGVmYXVsdFZhbHVlOnQsdmFsaWRhdGU6YX0pe3JldHVybiBlJiZhKGU9ZS50cmltKCkpP2U6dH1mdW5jdGlvbiBnZXRNZWFzdXJlbWVudChlLHQ9IjAiKXt0fHw9IjAiO2lmKCFlKXJldHVybiBnZXRNZWFzdXJlbWVudCh0KTtjb25zdCBhPWUudHJpbSgpLm1hdGNoKGkpO2lmKCFhKXJldHVybiBnZXRNZWFzdXJlbWVudCh0KTtjb25zdFsscixzXT1hLG89cGFyc2VGbG9hdChyKTtpZihpc05hTihvKSlyZXR1cm4gZ2V0TWVhc3VyZW1lbnQodCk7aWYoMD09PW8pcmV0dXJuIDA7Y29uc3QgYz1uW3NdO3JldHVybiBjP2Mobyk6b31jbGFzcyBIVE1MUmVzdWx0e3N0YXRpYyBnZXQgRkFJTFVSRSgpe3JldHVybigwLHIuc2hhZG93KSh0aGlzLCJGQUlMVVJFIixuZXcgSFRNTFJlc3VsdCghMSxudWxsLG51bGwsbnVsbCkpfXN0YXRpYyBnZXQgRU1QVFkoKXtyZXR1cm4oMCxyLnNoYWRvdykodGhpcywiRU1QVFkiLG5ldyBIVE1MUmVzdWx0KCEwLG51bGwsbnVsbCxudWxsKSl9Y29uc3RydWN0b3IoZSx0LGEscil7dGhpcy5zdWNjZXNzPWU7dGhpcy5odG1sPXQ7dGhpcy5iYm94PWE7dGhpcy5icmVha05vZGU9cn1pc0JyZWFrKCl7cmV0dXJuISF0aGlzLmJyZWFrTm9kZX1zdGF0aWMgYnJlYWtOb2RlKGUpe3JldHVybiBuZXcgSFRNTFJlc3VsdCghMSxudWxsLG51bGwsZSl9c3RhdGljIHN1Y2Nlc3MoZSx0PW51bGwpe3JldHVybiBuZXcgSFRNTFJlc3VsdCghMCxlLHQsbnVsbCl9fXQuSFRNTFJlc3VsdD1IVE1MUmVzdWx0fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuRm9udEZpbmRlcj12b2lkIDA7dC5nZXRNZXRyaWNzPWZ1bmN0aW9uIGdldE1ldHJpY3MoZSx0PSExKXtsZXQgYT1udWxsO2lmKGUpe2NvbnN0IHQ9KDAsbi5zdHJpcFF1b3RlcykoZS50eXBlZmFjZSksaT1lW3IuJGdsb2JhbERhdGFdLmZvbnRGaW5kZXIuZmluZCh0KTthPXNlbGVjdEZvbnQoZSxpKX1pZighYSlyZXR1cm57bGluZUhlaWdodDoxMixsaW5lR2FwOjIsbGluZU5vR2FwOjEwfTtjb25zdCBpPWUuc2l6ZXx8MTAscz1hLmxpbmVIZWlnaHQ/TWF0aC5tYXgodD8wOjEuMixhLmxpbmVIZWlnaHQpOjEuMixvPXZvaWQgMD09PWEubGluZUdhcD8uMjphLmxpbmVHYXA7cmV0dXJue2xpbmVIZWlnaHQ6cyppLGxpbmVHYXA6byppLGxpbmVOb0dhcDpNYXRoLm1heCgxLHMtbykqaX19O3Quc2VsZWN0Rm9udD1zZWxlY3RGb250O3ZhciByPWEoNzgpLG49YSg4NCksaT1hKDIpO3QuRm9udEZpbmRlcj1jbGFzcyBGb250RmluZGVye2NvbnN0cnVjdG9yKGUpe3RoaXMuZm9udHM9bmV3IE1hcDt0aGlzLmNhY2hlPW5ldyBNYXA7dGhpcy53YXJuZWQ9bmV3IFNldDt0aGlzLmRlZmF1bHRGb250PW51bGw7dGhpcy5hZGQoZSl9YWRkKGUsdD1udWxsKXtmb3IoY29uc3QgdCBvZiBlKXRoaXMuYWRkUGRmRm9udCh0KTtmb3IoY29uc3QgZSBvZiB0aGlzLmZvbnRzLnZhbHVlcygpKWUucmVndWxhcnx8KGUucmVndWxhcj1lLml0YWxpY3x8ZS5ib2xkfHxlLmJvbGRpdGFsaWMpO2lmKCF0fHwwPT09dC5zaXplKXJldHVybjtjb25zdCBhPXRoaXMuZm9udHMuZ2V0KCJQZGZKUy1GYWxsYmFjay1QZGZKUy1YRkEiKTtmb3IoY29uc3QgZSBvZiB0KXRoaXMuZm9udHMuc2V0KGUsYSl9YWRkUGRmRm9udChlKXtjb25zdCB0PWUuY3NzRm9udEluZm8sYT10LmZvbnRGYW1pbHk7bGV0IHI9dGhpcy5mb250cy5nZXQoYSk7aWYoIXIpe3I9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLmZvbnRzLnNldChhLHIpO3RoaXMuZGVmYXVsdEZvbnR8fCh0aGlzLmRlZmF1bHRGb250PXIpfWxldCBuPSIiO2NvbnN0IGk9cGFyc2VGbG9hdCh0LmZvbnRXZWlnaHQpOzAhPT1wYXJzZUZsb2F0KHQuaXRhbGljQW5nbGUpP249aT49NzAwPyJib2xkaXRhbGljIjoiaXRhbGljIjppPj03MDAmJihuPSJib2xkIik7aWYoIW4peyhlLm5hbWUuaW5jbHVkZXMoIkJvbGQiKXx8ZS5wc05hbWU/LmluY2x1ZGVzKCJCb2xkIikpJiYobj0iYm9sZCIpOyhlLm5hbWUuaW5jbHVkZXMoIkl0YWxpYyIpfHxlLm5hbWUuZW5kc1dpdGgoIkl0Iil8fGUucHNOYW1lPy5pbmNsdWRlcygiSXRhbGljIil8fGUucHNOYW1lPy5lbmRzV2l0aCgiSXQiKSkmJihuKz0iaXRhbGljIil9bnx8KG49InJlZ3VsYXIiKTtyW25dPWV9Z2V0RGVmYXVsdCgpe3JldHVybiB0aGlzLmRlZmF1bHRGb250fWZpbmQoZSx0PSEwKXtsZXQgYT10aGlzLmZvbnRzLmdldChlKXx8dGhpcy5jYWNoZS5nZXQoZSk7aWYoYSlyZXR1cm4gYTtjb25zdCByPS8sfC18X3wgfGJvbGRpdGFsaWN8Ym9sZHxpdGFsaWN8cmVndWxhcnxpdC9naTtsZXQgbj1lLnJlcGxhY2VBbGwociwiIik7YT10aGlzLmZvbnRzLmdldChuKTtpZihhKXt0aGlzLmNhY2hlLnNldChlLGEpO3JldHVybiBhfW49bi50b0xvd2VyQ2FzZSgpO2NvbnN0IHM9W107Zm9yKGNvbnN0W2UsdF1vZiB0aGlzLmZvbnRzLmVudHJpZXMoKSllLnJlcGxhY2VBbGwociwiIikudG9Mb3dlckNhc2UoKS5zdGFydHNXaXRoKG4pJiZzLnB1c2godCk7aWYoMD09PXMubGVuZ3RoKWZvcihjb25zdFssZV1vZiB0aGlzLmZvbnRzLmVudHJpZXMoKSllLnJlZ3VsYXIubmFtZT8ucmVwbGFjZUFsbChyLCIiKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobikmJnMucHVzaChlKTtpZigwPT09cy5sZW5ndGgpe249bi5yZXBsYWNlQWxsKC9wc210fG10L2dpLCIiKTtmb3IoY29uc3RbZSx0XW9mIHRoaXMuZm9udHMuZW50cmllcygpKWUucmVwbGFjZUFsbChyLCIiKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobikmJnMucHVzaCh0KX1pZigwPT09cy5sZW5ndGgpZm9yKGNvbnN0IGUgb2YgdGhpcy5mb250cy52YWx1ZXMoKSllLnJlZ3VsYXIubmFtZT8ucmVwbGFjZUFsbChyLCIiKS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgobikmJnMucHVzaChlKTtpZihzLmxlbmd0aD49MSl7MSE9PXMubGVuZ3RoJiZ0JiYoMCxpLndhcm4pKGBYRkEgLSBUb28gbWFueSBjaG9pY2VzIHRvIGd1ZXNzIHRoZSBjb3JyZWN0IGZvbnQ6ICR7ZX1gKTt0aGlzLmNhY2hlLnNldChlLHNbMF0pO3JldHVybiBzWzBdfWlmKHQmJiF0aGlzLndhcm5lZC5oYXMoZSkpe3RoaXMud2FybmVkLmFkZChlKTsoMCxpLndhcm4pKGBYRkEgLSBDYW5ub3QgZmluZCB0aGUgZm9udDogJHtlfWApfXJldHVybiBudWxsfX07ZnVuY3Rpb24gc2VsZWN0Rm9udChlLHQpe3JldHVybiJpdGFsaWMiPT09ZS5wb3N0dXJlPyJib2xkIj09PWUud2VpZ2h0P3QuYm9sZGl0YWxpYzp0Lml0YWxpYzoiYm9sZCI9PT1lLndlaWdodD90LmJvbGQ6dC5yZWd1bGFyfX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlRleHRNZWFzdXJlPXZvaWQgMDt2YXIgcj1hKDg1KTtjbGFzcyBGb250SW5mb3tjb25zdHJ1Y3RvcihlLHQsYSxuKXt0aGlzLmxpbmVIZWlnaHQ9YTt0aGlzLnBhcmFNYXJnaW49dHx8e3RvcDowLGJvdHRvbTowLGxlZnQ6MCxyaWdodDowfTtpZighZSl7W3RoaXMucGRmRm9udCx0aGlzLnhmYUZvbnRdPXRoaXMuZGVmYXVsdEZvbnQobik7cmV0dXJufXRoaXMueGZhRm9udD17dHlwZWZhY2U6ZS50eXBlZmFjZSxwb3N0dXJlOmUucG9zdHVyZSx3ZWlnaHQ6ZS53ZWlnaHQsc2l6ZTplLnNpemUsbGV0dGVyU3BhY2luZzplLmxldHRlclNwYWNpbmd9O2NvbnN0IGk9bi5maW5kKGUudHlwZWZhY2UpO2lmKGkpe3RoaXMucGRmRm9udD0oMCxyLnNlbGVjdEZvbnQpKGUsaSk7dGhpcy5wZGZGb250fHwoW3RoaXMucGRmRm9udCx0aGlzLnhmYUZvbnRdPXRoaXMuZGVmYXVsdEZvbnQobikpfWVsc2VbdGhpcy5wZGZGb250LHRoaXMueGZhRm9udF09dGhpcy5kZWZhdWx0Rm9udChuKX1kZWZhdWx0Rm9udChlKXtjb25zdCB0PWUuZmluZCgiSGVsdmV0aWNhIiwhMSl8fGUuZmluZCgiTXlyaWFkIFBybyIsITEpfHxlLmZpbmQoIkFyaWFsIiwhMSl8fGUuZ2V0RGVmYXVsdCgpO2lmKHQ/LnJlZ3VsYXIpe2NvbnN0IGU9dC5yZWd1bGFyO3JldHVybltlLHt0eXBlZmFjZTplLmNzc0ZvbnRJbmZvLmZvbnRGYW1pbHkscG9zdHVyZToibm9ybWFsIix3ZWlnaHQ6Im5vcm1hbCIsc2l6ZToxMCxsZXR0ZXJTcGFjaW5nOjB9XX1yZXR1cm5bbnVsbCx7dHlwZWZhY2U6IkNvdXJpZXIiLHBvc3R1cmU6Im5vcm1hbCIsd2VpZ2h0OiJub3JtYWwiLHNpemU6MTAsbGV0dGVyU3BhY2luZzowfV19fWNsYXNzIEZvbnRTZWxlY3Rvcntjb25zdHJ1Y3RvcihlLHQsYSxyKXt0aGlzLmZvbnRGaW5kZXI9cjt0aGlzLnN0YWNrPVtuZXcgRm9udEluZm8oZSx0LGEscildfXB1c2hEYXRhKGUsdCxhKXtjb25zdCByPXRoaXMuc3RhY2suYXQoLTEpO2Zvcihjb25zdCB0IG9mWyJ0eXBlZmFjZSIsInBvc3R1cmUiLCJ3ZWlnaHQiLCJzaXplIiwibGV0dGVyU3BhY2luZyJdKWVbdF18fChlW3RdPXIueGZhRm9udFt0XSk7Zm9yKGNvbnN0IGUgb2ZbInRvcCIsImJvdHRvbSIsImxlZnQiLCJyaWdodCJdKWlzTmFOKHRbZV0pJiYodFtlXT1yLnBhcmFNYXJnaW5bZV0pO2NvbnN0IG49bmV3IEZvbnRJbmZvKGUsdCxhfHxyLmxpbmVIZWlnaHQsdGhpcy5mb250RmluZGVyKTtuLnBkZkZvbnR8fChuLnBkZkZvbnQ9ci5wZGZGb250KTt0aGlzLnN0YWNrLnB1c2gobil9cG9wRm9udCgpe3RoaXMuc3RhY2sucG9wKCl9dG9wRm9udCgpe3JldHVybiB0aGlzLnN0YWNrLmF0KC0xKX19dC5UZXh0TWVhc3VyZT1jbGFzcyBUZXh0TWVhc3VyZXtjb25zdHJ1Y3RvcihlLHQsYSxyKXt0aGlzLmdseXBocz1bXTt0aGlzLmZvbnRTZWxlY3Rvcj1uZXcgRm9udFNlbGVjdG9yKGUsdCxhLHIpO3RoaXMuZXh0cmFIZWlnaHQ9MH1wdXNoRGF0YShlLHQsYSl7dGhpcy5mb250U2VsZWN0b3IucHVzaERhdGEoZSx0LGEpfXBvcEZvbnQoZSl7cmV0dXJuIHRoaXMuZm9udFNlbGVjdG9yLnBvcEZvbnQoKX1hZGRQYXJhKCl7Y29uc3QgZT10aGlzLmZvbnRTZWxlY3Rvci50b3BGb250KCk7dGhpcy5leHRyYUhlaWdodCs9ZS5wYXJhTWFyZ2luLnRvcCtlLnBhcmFNYXJnaW4uYm90dG9tfWFkZFN0cmluZyhlKXtpZighZSlyZXR1cm47Y29uc3QgdD10aGlzLmZvbnRTZWxlY3Rvci50b3BGb250KCksYT10LnhmYUZvbnQuc2l6ZTtpZih0LnBkZkZvbnQpe2NvbnN0IHI9dC54ZmFGb250LmxldHRlclNwYWNpbmcsbj10LnBkZkZvbnQsaT1uLmxpbmVIZWlnaHR8fDEuMixzPXQubGluZUhlaWdodHx8TWF0aC5tYXgoMS4yLGkpKmEsbz1pLSh2b2lkIDA9PT1uLmxpbmVHYXA/LjI6bi5saW5lR2FwKSxjPU1hdGgubWF4KDEsbykqYSxsPWEvMWUzLGg9bi5kZWZhdWx0V2lkdGh8fG4uY2hhcnNUb0dseXBocygiICIpWzBdLndpZHRoO2Zvcihjb25zdCB0IG9mIGUuc3BsaXQoL1tcdTIwMjlcbl0vKSl7Y29uc3QgZT1uLmVuY29kZVN0cmluZyh0KS5qb2luKCIiKSxhPW4uY2hhcnNUb0dseXBocyhlKTtmb3IoY29uc3QgZSBvZiBhKXtjb25zdCB0PWUud2lkdGh8fGg7dGhpcy5nbHlwaHMucHVzaChbdCpsK3IscyxjLGUudW5pY29kZSwhMV0pfXRoaXMuZ2x5cGhzLnB1c2goWzAsMCwwLCJcbiIsITBdKX10aGlzLmdseXBocy5wb3AoKX1lbHNle2Zvcihjb25zdCB0IG9mIGUuc3BsaXQoL1tcdTIwMjlcbl0vKSl7Zm9yKGNvbnN0IGUgb2YgdC5zcGxpdCgiIikpdGhpcy5nbHlwaHMucHVzaChbYSwxLjIqYSxhLGUsITFdKTt0aGlzLmdseXBocy5wdXNoKFswLDAsMCwiXG4iLCEwXSl9dGhpcy5nbHlwaHMucG9wKCl9fWNvbXB1dGUoZSl7bGV0IHQ9LTEsYT0wLHI9MCxuPTAsaT0wLHM9MCxvPSExLGM9ITA7Zm9yKGxldCBsPTAsaD10aGlzLmdseXBocy5sZW5ndGg7bDxoO2wrKyl7Y29uc3RbaCx1LGQsZixnXT10aGlzLmdseXBoc1tsXSxwPSIgIj09PWYsbT1jP2Q6dTtpZihnKXtyPU1hdGgubWF4KHIsaSk7aT0wO24rPXM7cz1tO3Q9LTE7YT0wO2M9ITF9ZWxzZSBpZihwKWlmKGkraD5lKXtyPU1hdGgubWF4KHIsaSk7aT0wO24rPXM7cz1tO3Q9LTE7YT0wO289ITA7Yz0hMX1lbHNle3M9TWF0aC5tYXgobSxzKTthPWk7aSs9aDt0PWx9ZWxzZSBpZihpK2g+ZSl7bis9cztzPW07aWYoLTEhPT10KXtsPXQ7cj1NYXRoLm1heChyLGEpO2k9MDt0PS0xO2E9MH1lbHNle3I9TWF0aC5tYXgocixpKTtpPWh9bz0hMDtjPSExfWVsc2V7aSs9aDtzPU1hdGgubWF4KG0scyl9fXI9TWF0aC5tYXgocixpKTtuKz1zK3RoaXMuZXh0cmFIZWlnaHQ7cmV0dXJue3dpZHRoOjEuMDIqcixoZWlnaHQ6bixpc0Jyb2tlbjpvfX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuWG1sT2JqZWN0PXQuWEZBT2JqZWN0QXJyYXk9dC5YRkFPYmplY3Q9dC5YRkFBdHRyaWJ1dGU9dC5TdHJpbmdPYmplY3Q9dC5PcHRpb25PYmplY3Q9dC5PcHRpb24xMD10Lk9wdGlvbjAxPXQuSW50ZWdlck9iamVjdD10LkNvbnRlbnRPYmplY3Q9dm9pZCAwO3ZhciByPWEoNzgpLG49YSg4NCksaT1hKDIpLHM9YSgzKSxvPWEoODEpLGM9YSg4OCk7Y29uc3QgbD1TeW1ib2woKSxoPVN5bWJvbCgpLHU9U3ltYm9sKCksZD1TeW1ib2woIl9jaGlsZHJlbiIpLGY9U3ltYm9sKCksZz1TeW1ib2woKSxwPVN5bWJvbCgpLG09U3ltYm9sKCksYj1TeW1ib2woKSx5PVN5bWJvbCgpLHc9U3ltYm9sKCksUz1TeW1ib2woKSx4PVN5bWJvbCgpLEM9U3ltYm9sKCJwYXJlbnQiKSxrPVN5bWJvbCgpLHY9U3ltYm9sKCksRj1TeW1ib2woKTtsZXQgTz0wO2NvbnN0IFQ9by5OYW1lc3BhY2VJZHMuZGF0YXNldHMuaWQ7Y2xhc3MgWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUsdCxhPSExKXt0aGlzW3IuJG5hbWVzcGFjZUlkXT1lO3RoaXNbci4kbm9kZU5hbWVdPXQ7dGhpc1t3XT1hO3RoaXNbQ109bnVsbDt0aGlzW2RdPVtdO3RoaXNbci4kdWlkXT1gJHt0fSR7TysrfWA7dGhpc1tyLiRnbG9iYWxEYXRhXT1udWxsfWdldCBpc1hGQU9iamVjdCgpe3JldHVybiEwfWdldCBpc1hGQU9iamVjdEFycmF5KCl7cmV0dXJuITF9Y3JlYXRlTm9kZXMoZSl7bGV0IHQ9dGhpcyxhPW51bGw7Zm9yKGNvbnN0e25hbWU6bixpbmRleDppfW9mIGUpe2ZvcihsZXQgZT0wLHM9aXNGaW5pdGUoaSk/aTowO2U8PXM7ZSsrKXtjb25zdCBlPXRbci4kbmFtZXNwYWNlSWRdPT09VD8tMTp0W3IuJG5hbWVzcGFjZUlkXTthPW5ldyBYbWxPYmplY3QoZSxuKTt0W3IuJGFwcGVuZENoaWxkXShhKX10PWF9cmV0dXJuIGF9W3IuJG9uQ2hpbGRdKGUpe2lmKCF0aGlzW3ddfHwhdGhpc1tyLiRvbkNoaWxkQ2hlY2tdKGUpKXJldHVybiExO2NvbnN0IHQ9ZVtyLiRub2RlTmFtZV0sYT10aGlzW3RdO2lmKCEoYSBpbnN0YW5jZW9mIFhGQU9iamVjdEFycmF5KSl7bnVsbCE9PWEmJnRoaXNbci4kcmVtb3ZlQ2hpbGRdKGEpO3RoaXNbdF09ZTt0aGlzW3IuJGFwcGVuZENoaWxkXShlKTtyZXR1cm4hMH1pZihhLnB1c2goZSkpe3RoaXNbci4kYXBwZW5kQ2hpbGRdKGUpO3JldHVybiEwfWxldCBuPSIiO3RoaXMuaWQ/bj1gIChpZDogJHt0aGlzLmlkfSlgOnRoaXMubmFtZSYmKG49YCAobmFtZTogJHt0aGlzLm5hbWV9ICR7dGhpcy5oLnZhbHVlfSlgKTsoMCxpLndhcm4pKGBYRkEgLSBub2RlICIke3RoaXNbci4kbm9kZU5hbWVdfSIke259IGhhcyBhbHJlYWR5IGVub3VnaCAiJHt0fSIhYCk7cmV0dXJuITF9W3IuJG9uQ2hpbGRDaGVja10oZSl7cmV0dXJuIHRoaXMuaGFzT3duUHJvcGVydHkoZVtyLiRub2RlTmFtZV0pJiZlW3IuJG5hbWVzcGFjZUlkXT09PXRoaXNbci4kbmFtZXNwYWNlSWRdfVtyLiRpc05zQWdub3N0aWNdKCl7cmV0dXJuITF9W3IuJGFjY2VwdFdoaXRlc3BhY2VdKCl7cmV0dXJuITF9W3IuJGlzQ0RBVEFYbWxdKCl7cmV0dXJuITF9W3IuJGlzQmluZGFibGVdKCl7cmV0dXJuITF9W3IuJHBvcFBhcmFdKCl7dGhpcy5wYXJhJiZ0aGlzW3IuJGdldFRlbXBsYXRlUm9vdF0oKVtyLiRleHRyYV0ucGFyYVN0YWNrLnBvcCgpfVtyLiRwdXNoUGFyYV0oKXt0aGlzW3IuJGdldFRlbXBsYXRlUm9vdF0oKVtyLiRleHRyYV0ucGFyYVN0YWNrLnB1c2godGhpcy5wYXJhKX1bci4kc2V0SWRdKGUpe3RoaXMuaWQmJnRoaXNbci4kbmFtZXNwYWNlSWRdPT09by5OYW1lc3BhY2VJZHMudGVtcGxhdGUuaWQmJmUuc2V0KHRoaXMuaWQsdGhpcyl9W3IuJGdldFRlbXBsYXRlUm9vdF0oKXtyZXR1cm4gdGhpc1tyLiRnbG9iYWxEYXRhXS50ZW1wbGF0ZX1bci4kaXNTcGxpdHRhYmxlXSgpe3JldHVybiExfVtyLiRpc1RoZXJlTW9yZVdpZHRoXSgpe3JldHVybiExfVtyLiRhcHBlbmRDaGlsZF0oZSl7ZVtDXT10aGlzO3RoaXNbZF0ucHVzaChlKTshZVtyLiRnbG9iYWxEYXRhXSYmdGhpc1tyLiRnbG9iYWxEYXRhXSYmKGVbci4kZ2xvYmFsRGF0YV09dGhpc1tyLiRnbG9iYWxEYXRhXSl9W3IuJHJlbW92ZUNoaWxkXShlKXtjb25zdCB0PXRoaXNbZF0uaW5kZXhPZihlKTt0aGlzW2RdLnNwbGljZSh0LDEpfVtyLiRoYXNTZXR0YWJsZVZhbHVlXSgpe3JldHVybiB0aGlzLmhhc093blByb3BlcnR5KCJ2YWx1ZSIpfVtyLiRzZXRWYWx1ZV0oZSl7fVtyLiRvblRleHRdKGUpe31bci4kZmluYWxpemVdKCl7fVtyLiRjbGVhbl0oZSl7ZGVsZXRlIHRoaXNbd107aWYodGhpc1tyLiRjbGVhbnVwXSl7ZS5jbGVhbih0aGlzW3IuJGNsZWFudXBdKTtkZWxldGUgdGhpc1tyLiRjbGVhbnVwXX19W3IuJGluZGV4T2ZdKGUpe3JldHVybiB0aGlzW2RdLmluZGV4T2YoZSl9W3IuJGluc2VydEF0XShlLHQpe3RbQ109dGhpczt0aGlzW2RdLnNwbGljZShlLDAsdCk7IXRbci4kZ2xvYmFsRGF0YV0mJnRoaXNbci4kZ2xvYmFsRGF0YV0mJih0W3IuJGdsb2JhbERhdGFdPXRoaXNbci4kZ2xvYmFsRGF0YV0pfVtyLiRpc1RyYW5zcGFyZW50XSgpe3JldHVybiF0aGlzLm5hbWV9W3IuJGxhc3RBdHRyaWJ1dGVdKCl7cmV0dXJuIiJ9W3IuJHRleHRdKCl7cmV0dXJuIDA9PT10aGlzW2RdLmxlbmd0aD90aGlzW3IuJGNvbnRlbnRdOnRoaXNbZF0ubWFwKChlPT5lW3IuJHRleHRdKCkpKS5qb2luKCIiKX1nZXRbdV0oKXtjb25zdCBlPU9iamVjdC5nZXRQcm90b3R5cGVPZih0aGlzKTtpZighZS5fYXR0cmlidXRlcyl7Y29uc3QgdD1lLl9hdHRyaWJ1dGVzPW5ldyBTZXQ7Zm9yKGNvbnN0IGUgb2YgT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpe2lmKG51bGw9PT10aGlzW2VdfHx0aGlzW2VdaW5zdGFuY2VvZiBYRkFPYmplY3R8fHRoaXNbZV1pbnN0YW5jZW9mIFhGQU9iamVjdEFycmF5KWJyZWFrO3QuYWRkKGUpfX1yZXR1cm4oMCxpLnNoYWRvdykodGhpcyx1LGUuX2F0dHJpYnV0ZXMpfVtyLiRpc0Rlc2NlbmRlbnRdKGUpe2xldCB0PXRoaXM7Zm9yKDt0Oyl7aWYodD09PWUpcmV0dXJuITA7dD10W3IuJGdldFBhcmVudF0oKX1yZXR1cm4hMX1bci4kZ2V0UGFyZW50XSgpe3JldHVybiB0aGlzW0NdfVtyLiRnZXRTdWJmb3JtUGFyZW50XSgpe3JldHVybiB0aGlzW3IuJGdldFBhcmVudF0oKX1bci4kZ2V0Q2hpbGRyZW5dKGU9bnVsbCl7cmV0dXJuIGU/dGhpc1tlXTp0aGlzW2RdfVtyLiRkdW1wXSgpe2NvbnN0IGU9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzW3IuJGNvbnRlbnRdJiYoZS4kY29udGVudD10aGlzW3IuJGNvbnRlbnRdKTtmb3IoY29uc3QgdCBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlOYW1lcyh0aGlzKSl7Y29uc3QgYT10aGlzW3RdO251bGwhPT1hJiYoYSBpbnN0YW5jZW9mIFhGQU9iamVjdD9lW3RdPWFbci4kZHVtcF0oKTphIGluc3RhbmNlb2YgWEZBT2JqZWN0QXJyYXk/YS5pc0VtcHR5KCl8fChlW3RdPWEuZHVtcCgpKTplW3RdPWEpfXJldHVybiBlfVtyLiR0b1N0eWxlXSgpe3JldHVybiBudWxsfVtyLiR0b0hUTUxdKCl7cmV0dXJuIG4uSFRNTFJlc3VsdC5FTVBUWX0qW3IuJGdldENvbnRhaW5lZENoaWxkcmVuXSgpe2Zvcihjb25zdCBlIG9mIHRoaXNbci4kZ2V0Q2hpbGRyZW5dKCkpeWllbGQgZX0qW21dKGUsdCl7Zm9yKGNvbnN0IGEgb2YgdGhpc1tyLiRnZXRDb250YWluZWRDaGlsZHJlbl0oKSlpZighZXx8dD09PWUuaGFzKGFbci4kbm9kZU5hbWVdKSl7Y29uc3QgZT10aGlzW3IuJGdldEF2YWlsYWJsZVNwYWNlXSgpLHQ9YVtyLiR0b0hUTUxdKGUpO3Quc3VjY2Vzc3x8KHRoaXNbci4kZXh0cmFdLmZhaWxpbmdOb2RlPWEpO3lpZWxkIHR9fVtyLiRmbHVzaEhUTUxdKCl7cmV0dXJuIG51bGx9W3IuJGFkZEhUTUxdKGUsdCl7dGhpc1tyLiRleHRyYV0uY2hpbGRyZW4ucHVzaChlKX1bci4kZ2V0QXZhaWxhYmxlU3BhY2VdKCl7fVtyLiRjaGlsZHJlblRvSFRNTF0oe2ZpbHRlcjplPW51bGwsaW5jbHVkZTp0PSEwfSl7aWYodGhpc1tyLiRleHRyYV0uZ2VuZXJhdG9yKXtjb25zdCBlPXRoaXNbci4kZ2V0QXZhaWxhYmxlU3BhY2VdKCksdD10aGlzW3IuJGV4dHJhXS5mYWlsaW5nTm9kZVtyLiR0b0hUTUxdKGUpO2lmKCF0LnN1Y2Nlc3MpcmV0dXJuIHQ7dC5odG1sJiZ0aGlzW3IuJGFkZEhUTUxdKHQuaHRtbCx0LmJib3gpO2RlbGV0ZSB0aGlzW3IuJGV4dHJhXS5mYWlsaW5nTm9kZX1lbHNlIHRoaXNbci4kZXh0cmFdLmdlbmVyYXRvcj10aGlzW21dKGUsdCk7Zm9yKDs7KXtjb25zdCBlPXRoaXNbci4kZXh0cmFdLmdlbmVyYXRvci5uZXh0KCk7aWYoZS5kb25lKWJyZWFrO2NvbnN0IHQ9ZS52YWx1ZTtpZighdC5zdWNjZXNzKXJldHVybiB0O3QuaHRtbCYmdGhpc1tyLiRhZGRIVE1MXSh0Lmh0bWwsdC5iYm94KX10aGlzW3IuJGV4dHJhXS5nZW5lcmF0b3I9bnVsbDtyZXR1cm4gbi5IVE1MUmVzdWx0LkVNUFRZfVtyLiRzZXRTZXRBdHRyaWJ1dGVzXShlKXt0aGlzW3ZdPW5ldyBTZXQoT2JqZWN0LmtleXMoZSkpfVt5XShlKXtjb25zdCB0PXRoaXNbdV0sYT10aGlzW3ZdO3JldHVyblsuLi5lXS5maWx0ZXIoKGU9PnQuaGFzKGUpJiYhYS5oYXMoZSkpKX1bci4kcmVzb2x2ZVByb3RvdHlwZXNdKGUsdD1uZXcgU2V0KXtmb3IoY29uc3QgYSBvZiB0aGlzW2RdKWFba10oZSx0KX1ba10oZSx0KXtjb25zdCBhPXRoaXNbYl0oZSx0KTthP3RoaXNbbF0oYSxlLHQpOnRoaXNbci4kcmVzb2x2ZVByb3RvdHlwZXNdKGUsdCl9W2JdKGUsdCl7Y29uc3R7dXNlOmEsdXNlaHJlZjpufT10aGlzO2lmKCFhJiYhbilyZXR1cm4gbnVsbDtsZXQgcz1udWxsLG89bnVsbCxoPW51bGwsdT1hO2lmKG4pe3U9bjtuLnN0YXJ0c1dpdGgoIiNzb20oIikmJm4uZW5kc1dpdGgoIikiKT9vPW4uc2xpY2UoNSwtMSk6bi5zdGFydHNXaXRoKCIuI3NvbSgiKSYmbi5lbmRzV2l0aCgiKSIpP289bi5zbGljZSg2LC0xKTpuLnN0YXJ0c1dpdGgoIiMiKT9oPW4uc2xpY2UoMSk6bi5zdGFydHNXaXRoKCIuIyIpJiYoaD1uLnNsaWNlKDIpKX1lbHNlIGEuc3RhcnRzV2l0aCgiIyIpP2g9YS5zbGljZSgxKTpvPWE7dGhpcy51c2U9dGhpcy51c2VocmVmPSIiO2lmKGgpcz1lLmdldChoKTtlbHNle3M9KDAsYy5zZWFyY2hOb2RlKShlLmdldChyLiRyb290KSx0aGlzLG8sITAsITEpO3MmJihzPXNbMF0pfWlmKCFzKXsoMCxpLndhcm4pKGBYRkEgLSBJbnZhbGlkIHByb3RvdHlwZSByZWZlcmVuY2U6ICR7dX0uYCk7cmV0dXJuIG51bGx9aWYoc1tyLiRub2RlTmFtZV0hPT10aGlzW3IuJG5vZGVOYW1lXSl7KDAsaS53YXJuKShgWEZBIC0gSW5jb21wYXRpYmxlIHByb3RvdHlwZTogJHtzW3IuJG5vZGVOYW1lXX0gIT09ICR7dGhpc1tyLiRub2RlTmFtZV19LmApO3JldHVybiBudWxsfWlmKHQuaGFzKHMpKXsoMCxpLndhcm4pKCJYRkEgLSBDeWNsZSBkZXRlY3RlZCBpbiBwcm90b3R5cGVzIHVzZS4iKTtyZXR1cm4gbnVsbH10LmFkZChzKTtjb25zdCBkPXNbYl0oZSx0KTtkJiZzW2xdKGQsZSx0KTtzW3IuJHJlc29sdmVQcm90b3R5cGVzXShlLHQpO3QuZGVsZXRlKHMpO3JldHVybiBzfVtsXShlLHQsYSl7aWYoYS5oYXMoZSkpeygwLGkud2FybikoIlhGQSAtIEN5Y2xlIGRldGVjdGVkIGluIHByb3RvdHlwZXMgdXNlLiIpO3JldHVybn0hdGhpc1tyLiRjb250ZW50XSYmZVtyLiRjb250ZW50XSYmKHRoaXNbci4kY29udGVudF09ZVtyLiRjb250ZW50XSk7bmV3IFNldChhKS5hZGQoZSk7Zm9yKGNvbnN0IHQgb2YgdGhpc1t5XShlW3ZdKSl7dGhpc1t0XT1lW3RdO3RoaXNbdl0mJnRoaXNbdl0uYWRkKHQpfWZvcihjb25zdCBuIG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKXtpZih0aGlzW3VdLmhhcyhuKSljb250aW51ZTtjb25zdCBpPXRoaXNbbl0scz1lW25dO2lmKGkgaW5zdGFuY2VvZiBYRkFPYmplY3RBcnJheSl7Zm9yKGNvbnN0IGUgb2YgaVtkXSllW2tdKHQsYSk7Zm9yKGxldCBuPWlbZF0ubGVuZ3RoLG89c1tkXS5sZW5ndGg7bjxvO24rKyl7Y29uc3Qgcz1lW2RdW25dW3IuJGNsb25lXSgpO2lmKCFpLnB1c2gocykpYnJlYWs7c1tDXT10aGlzO3RoaXNbZF0ucHVzaChzKTtzW2tdKHQsYSl9fWVsc2UgaWYobnVsbD09PWkpe2lmKG51bGwhPT1zKXtjb25zdCBlPXNbci4kY2xvbmVdKCk7ZVtDXT10aGlzO3RoaXNbbl09ZTt0aGlzW2RdLnB1c2goZSk7ZVtrXSh0LGEpfX1lbHNle2lbci4kcmVzb2x2ZVByb3RvdHlwZXNdKHQsYSk7cyYmaVtsXShzLHQsYSl9fX1zdGF0aWNbZl0oZSl7cmV0dXJuIEFycmF5LmlzQXJyYXkoZSk/ZS5tYXAoKGU9PlhGQU9iamVjdFtmXShlKSkpOiJvYmplY3QiPT10eXBlb2YgZSYmbnVsbCE9PWU/T2JqZWN0LmFzc2lnbih7fSxlKTplfVtyLiRjbG9uZV0oKXtjb25zdCBlPU9iamVjdC5jcmVhdGUoT2JqZWN0LmdldFByb3RvdHlwZU9mKHRoaXMpKTtmb3IoY29uc3QgdCBvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHRoaXMpKXRyeXtlW3RdPXRoaXNbdF19Y2F0Y2h7KDAsaS5zaGFkb3cpKGUsdCx0aGlzW3RdKX1lW3IuJHVpZF09YCR7ZVtyLiRub2RlTmFtZV19JHtPKyt9YDtlW2RdPVtdO2Zvcihjb25zdCB0IG9mIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKXtpZih0aGlzW3VdLmhhcyh0KSl7ZVt0XT1YRkFPYmplY3RbZl0odGhpc1t0XSk7Y29udGludWV9Y29uc3QgYT10aGlzW3RdO2VbdF09YSBpbnN0YW5jZW9mIFhGQU9iamVjdEFycmF5P25ldyBYRkFPYmplY3RBcnJheShhW1NdKTpudWxsfWZvcihjb25zdCB0IG9mIHRoaXNbZF0pe2NvbnN0IGE9dFtyLiRub2RlTmFtZV0sbj10W3IuJGNsb25lXSgpO2VbZF0ucHVzaChuKTtuW0NdPWU7bnVsbD09PWVbYV0/ZVthXT1uOmVbYV1bZF0ucHVzaChuKX1yZXR1cm4gZX1bci4kZ2V0Q2hpbGRyZW5dKGU9bnVsbCl7cmV0dXJuIGU/dGhpc1tkXS5maWx0ZXIoKHQ9PnRbci4kbm9kZU5hbWVdPT09ZSkpOnRoaXNbZF19W3IuJGdldENoaWxkcmVuQnlDbGFzc10oZSl7cmV0dXJuIHRoaXNbZV19W3IuJGdldENoaWxkcmVuQnlOYW1lXShlLHQsYT0hMCl7cmV0dXJuIEFycmF5LmZyb20odGhpc1tyLiRnZXRDaGlsZHJlbkJ5TmFtZUl0XShlLHQsYSkpfSpbci4kZ2V0Q2hpbGRyZW5CeU5hbWVJdF0oZSx0LGE9ITApe2lmKCJwYXJlbnQiIT09ZSl7Zm9yKGNvbnN0IGEgb2YgdGhpc1tkXSl7YVtyLiRub2RlTmFtZV09PT1lJiYoeWllbGQgYSk7YS5uYW1lPT09ZSYmKHlpZWxkIGEpOyh0fHxhW3IuJGlzVHJhbnNwYXJlbnRdKCkpJiYoeWllbGQqYVtyLiRnZXRDaGlsZHJlbkJ5TmFtZUl0XShlLHQsITEpKX1hJiZ0aGlzW3VdLmhhcyhlKSYmKHlpZWxkIG5ldyBYRkFBdHRyaWJ1dGUodGhpcyxlLHRoaXNbZV0pKX1lbHNlIHlpZWxkIHRoaXNbQ119fXQuWEZBT2JqZWN0PVhGQU9iamVjdDtjbGFzcyBYRkFPYmplY3RBcnJheXtjb25zdHJ1Y3RvcihlPTEvMCl7dGhpc1tTXT1lO3RoaXNbZF09W119Z2V0IGlzWEZBT2JqZWN0KCl7cmV0dXJuITF9Z2V0IGlzWEZBT2JqZWN0QXJyYXkoKXtyZXR1cm4hMH1wdXNoKGUpe2lmKHRoaXNbZF0ubGVuZ3RoPD10aGlzW1NdKXt0aGlzW2RdLnB1c2goZSk7cmV0dXJuITB9KDAsaS53YXJuKShgWEZBIC0gbm9kZSAiJHtlW3IuJG5vZGVOYW1lXX0iIGFjY2VwdHMgbm8gbW9yZSB0aGFuICR7dGhpc1tTXX0gY2hpbGRyZW5gKTtyZXR1cm4hMX1pc0VtcHR5KCl7cmV0dXJuIDA9PT10aGlzW2RdLmxlbmd0aH1kdW1wKCl7cmV0dXJuIDE9PT10aGlzW2RdLmxlbmd0aD90aGlzW2RdWzBdW3IuJGR1bXBdKCk6dGhpc1tkXS5tYXAoKGU9PmVbci4kZHVtcF0oKSkpfVtyLiRjbG9uZV0oKXtjb25zdCBlPW5ldyBYRkFPYmplY3RBcnJheSh0aGlzW1NdKTtlW2RdPXRoaXNbZF0ubWFwKChlPT5lW3IuJGNsb25lXSgpKSk7cmV0dXJuIGV9Z2V0IGNoaWxkcmVuKCl7cmV0dXJuIHRoaXNbZF19Y2xlYXIoKXt0aGlzW2RdLmxlbmd0aD0wfX10LlhGQU9iamVjdEFycmF5PVhGQU9iamVjdEFycmF5O2NsYXNzIFhGQUF0dHJpYnV0ZXtjb25zdHJ1Y3RvcihlLHQsYSl7dGhpc1tDXT1lO3RoaXNbci4kbm9kZU5hbWVdPXQ7dGhpc1tyLiRjb250ZW50XT1hO3RoaXNbci4kY29uc3VtZWRdPSExO3RoaXNbci4kdWlkXT0iYXR0cmlidXRlIitPKyt9W3IuJGdldFBhcmVudF0oKXtyZXR1cm4gdGhpc1tDXX1bci4kaXNEYXRhVmFsdWVdKCl7cmV0dXJuITB9W3IuJGdldERhdGFWYWx1ZV0oKXtyZXR1cm4gdGhpc1tyLiRjb250ZW50XS50cmltKCl9W3IuJHNldFZhbHVlXShlKXtlPWUudmFsdWV8fCIiO3RoaXNbci4kY29udGVudF09ZS50b1N0cmluZygpfVtyLiR0ZXh0XSgpe3JldHVybiB0aGlzW3IuJGNvbnRlbnRdfVtyLiRpc0Rlc2NlbmRlbnRdKGUpe3JldHVybiB0aGlzW0NdPT09ZXx8dGhpc1tDXVtyLiRpc0Rlc2NlbmRlbnRdKGUpfX10LlhGQUF0dHJpYnV0ZT1YRkFBdHRyaWJ1dGU7Y2xhc3MgWG1sT2JqZWN0IGV4dGVuZHMgWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUsdCxhPXt9KXtzdXBlcihlLHQpO3RoaXNbci4kY29udGVudF09IiI7dGhpc1tnXT1udWxsO2lmKCIjdGV4dCIhPT10KXtjb25zdCBlPW5ldyBNYXA7dGhpc1toXT1lO2Zvcihjb25zdFt0LHJdb2YgT2JqZWN0LmVudHJpZXMoYSkpZS5zZXQodCxuZXcgWEZBQXR0cmlidXRlKHRoaXMsdCxyKSk7aWYoYS5oYXNPd25Qcm9wZXJ0eShyLiRuc0F0dHJpYnV0ZXMpKXtjb25zdCBlPWFbci4kbnNBdHRyaWJ1dGVzXS54ZmEuZGF0YU5vZGU7dm9pZCAwIT09ZSYmKCJkYXRhR3JvdXAiPT09ZT90aGlzW2ddPSExOiJkYXRhVmFsdWUiPT09ZSYmKHRoaXNbZ109ITApKX19dGhpc1tyLiRjb25zdW1lZF09ITF9W3IuJHRvU3RyaW5nXShlKXtjb25zdCB0PXRoaXNbci4kbm9kZU5hbWVdO2lmKCIjdGV4dCI9PT10KXtlLnB1c2goKDAscy5lbmNvZGVUb1htbFN0cmluZykodGhpc1tyLiRjb250ZW50XSkpO3JldHVybn1jb25zdCBhPSgwLGkudXRmOFN0cmluZ1RvU3RyaW5nKSh0KSxuPXRoaXNbci4kbmFtZXNwYWNlSWRdPT09VD8ieGZhOiI6IiI7ZS5wdXNoKGA8JHtufSR7YX1gKTtmb3IoY29uc3RbdCxhXW9mIHRoaXNbaF0uZW50cmllcygpKXtjb25zdCBuPSgwLGkudXRmOFN0cmluZ1RvU3RyaW5nKSh0KTtlLnB1c2goYCAke259PSIkeygwLHMuZW5jb2RlVG9YbWxTdHJpbmcpKGFbci4kY29udGVudF0pfSJgKX1udWxsIT09dGhpc1tnXSYmKHRoaXNbZ10/ZS5wdXNoKCcgeGZhOmRhdGFOb2RlPSJkYXRhVmFsdWUiJyk6ZS5wdXNoKCcgeGZhOmRhdGFOb2RlPSJkYXRhR3JvdXAiJykpO2lmKHRoaXNbci4kY29udGVudF18fDAhPT10aGlzW2RdLmxlbmd0aCl7ZS5wdXNoKCI+Iik7aWYodGhpc1tyLiRjb250ZW50XSkic3RyaW5nIj09dHlwZW9mIHRoaXNbci4kY29udGVudF0/ZS5wdXNoKCgwLHMuZW5jb2RlVG9YbWxTdHJpbmcpKHRoaXNbci4kY29udGVudF0pKTp0aGlzW3IuJGNvbnRlbnRdW3IuJHRvU3RyaW5nXShlKTtlbHNlIGZvcihjb25zdCB0IG9mIHRoaXNbZF0pdFtyLiR0b1N0cmluZ10oZSk7ZS5wdXNoKGA8LyR7bn0ke2F9PmApfWVsc2UgZS5wdXNoKCIvPiIpfVtyLiRvbkNoaWxkXShlKXtpZih0aGlzW3IuJGNvbnRlbnRdKXtjb25zdCBlPW5ldyBYbWxPYmplY3QodGhpc1tyLiRuYW1lc3BhY2VJZF0sIiN0ZXh0Iik7dGhpc1tyLiRhcHBlbmRDaGlsZF0oZSk7ZVtyLiRjb250ZW50XT10aGlzW3IuJGNvbnRlbnRdO3RoaXNbci4kY29udGVudF09IiJ9dGhpc1tyLiRhcHBlbmRDaGlsZF0oZSk7cmV0dXJuITB9W3IuJG9uVGV4dF0oZSl7dGhpc1tyLiRjb250ZW50XSs9ZX1bci4kZmluYWxpemVdKCl7aWYodGhpc1tyLiRjb250ZW50XSYmdGhpc1tkXS5sZW5ndGg+MCl7Y29uc3QgZT1uZXcgWG1sT2JqZWN0KHRoaXNbci4kbmFtZXNwYWNlSWRdLCIjdGV4dCIpO3RoaXNbci4kYXBwZW5kQ2hpbGRdKGUpO2Vbci4kY29udGVudF09dGhpc1tyLiRjb250ZW50XTtkZWxldGUgdGhpc1tyLiRjb250ZW50XX19W3IuJHRvSFRNTF0oKXtyZXR1cm4iI3RleHQiPT09dGhpc1tyLiRub2RlTmFtZV0/bi5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6IiN0ZXh0Iix2YWx1ZTp0aGlzW3IuJGNvbnRlbnRdfSk6bi5IVE1MUmVzdWx0LkVNUFRZfVtyLiRnZXRDaGlsZHJlbl0oZT1udWxsKXtyZXR1cm4gZT90aGlzW2RdLmZpbHRlcigodD0+dFtyLiRub2RlTmFtZV09PT1lKSk6dGhpc1tkXX1bci4kZ2V0QXR0cmlidXRlc10oKXtyZXR1cm4gdGhpc1toXX1bci4kZ2V0Q2hpbGRyZW5CeUNsYXNzXShlKXtjb25zdCB0PXRoaXNbaF0uZ2V0KGUpO3JldHVybiB2b2lkIDAhPT10P3Q6dGhpc1tyLiRnZXRDaGlsZHJlbl0oZSl9KltyLiRnZXRDaGlsZHJlbkJ5TmFtZUl0XShlLHQpe2NvbnN0IGE9dGhpc1toXS5nZXQoZSk7YSYmKHlpZWxkIGEpO2Zvcihjb25zdCBhIG9mIHRoaXNbZF0pe2Fbci4kbm9kZU5hbWVdPT09ZSYmKHlpZWxkIGEpO3QmJih5aWVsZCphW3IuJGdldENoaWxkcmVuQnlOYW1lSXRdKGUsdCkpfX0qW3IuJGdldEF0dHJpYnV0ZUl0XShlLHQpe2NvbnN0IGE9dGhpc1toXS5nZXQoZSk7IWF8fHQmJmFbci4kY29uc3VtZWRdfHwoeWllbGQgYSk7Zm9yKGNvbnN0IGEgb2YgdGhpc1tkXSl5aWVsZCphW3IuJGdldEF0dHJpYnV0ZUl0XShlLHQpfSpbci4kZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXRdKGUsdCxhKXtmb3IoY29uc3QgbiBvZiB0aGlzW2RdKXtuW3IuJG5vZGVOYW1lXSE9PWV8fGEmJm5bci4kY29uc3VtZWRdfHwoeWllbGQgbik7dCYmKHlpZWxkKm5bci4kZ2V0UmVhbENoaWxkcmVuQnlOYW1lSXRdKGUsdCxhKSl9fVtyLiRpc0RhdGFWYWx1ZV0oKXtyZXR1cm4gbnVsbD09PXRoaXNbZ10/MD09PXRoaXNbZF0ubGVuZ3RofHx0aGlzW2RdWzBdW3IuJG5hbWVzcGFjZUlkXT09PW8uTmFtZXNwYWNlSWRzLnhodG1sLmlkOnRoaXNbZ119W3IuJGdldERhdGFWYWx1ZV0oKXtyZXR1cm4gbnVsbD09PXRoaXNbZ10/MD09PXRoaXNbZF0ubGVuZ3RoP3RoaXNbci4kY29udGVudF0udHJpbSgpOnRoaXNbZF1bMF1bci4kbmFtZXNwYWNlSWRdPT09by5OYW1lc3BhY2VJZHMueGh0bWwuaWQ/dGhpc1tkXVswXVtyLiR0ZXh0XSgpLnRyaW0oKTpudWxsOnRoaXNbci4kY29udGVudF0udHJpbSgpfVtyLiRzZXRWYWx1ZV0oZSl7ZT1lLnZhbHVlfHwiIjt0aGlzW3IuJGNvbnRlbnRdPWUudG9TdHJpbmcoKX1bci4kZHVtcF0oZT0hMSl7Y29uc3QgdD1PYmplY3QuY3JlYXRlKG51bGwpO2UmJih0LiRucz10aGlzW3IuJG5hbWVzcGFjZUlkXSk7dGhpc1tyLiRjb250ZW50XSYmKHQuJGNvbnRlbnQ9dGhpc1tyLiRjb250ZW50XSk7dC4kbmFtZT10aGlzW3IuJG5vZGVOYW1lXTt0LmNoaWxkcmVuPVtdO2Zvcihjb25zdCBhIG9mIHRoaXNbZF0pdC5jaGlsZHJlbi5wdXNoKGFbci4kZHVtcF0oZSkpO3QuYXR0cmlidXRlcz1PYmplY3QuY3JlYXRlKG51bGwpO2Zvcihjb25zdFtlLGFdb2YgdGhpc1toXSl0LmF0dHJpYnV0ZXNbZV09YVtyLiRjb250ZW50XTtyZXR1cm4gdH19dC5YbWxPYmplY3Q9WG1sT2JqZWN0O2NsYXNzIENvbnRlbnRPYmplY3QgZXh0ZW5kcyBYRkFPYmplY3R7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlLHQpO3RoaXNbci4kY29udGVudF09IiJ9W3IuJG9uVGV4dF0oZSl7dGhpc1tyLiRjb250ZW50XSs9ZX1bci4kZmluYWxpemVdKCl7fX10LkNvbnRlbnRPYmplY3Q9Q29udGVudE9iamVjdDtjbGFzcyBPcHRpb25PYmplY3QgZXh0ZW5kcyBDb250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUsdCxhKXtzdXBlcihlLHQpO3RoaXNbeF09YX1bci4kZmluYWxpemVdKCl7dGhpc1tyLiRjb250ZW50XT0oMCxuLmdldEtleXdvcmQpKHtkYXRhOnRoaXNbci4kY29udGVudF0sZGVmYXVsdFZhbHVlOnRoaXNbeF1bMF0sdmFsaWRhdGU6ZT0+dGhpc1t4XS5pbmNsdWRlcyhlKX0pfVtyLiRjbGVhbl0oZSl7c3VwZXJbci4kY2xlYW5dKGUpO2RlbGV0ZSB0aGlzW3hdfX10Lk9wdGlvbk9iamVjdD1PcHRpb25PYmplY3Q7Y2xhc3MgU3RyaW5nT2JqZWN0IGV4dGVuZHMgQ29udGVudE9iamVjdHtbci4kZmluYWxpemVdKCl7dGhpc1tyLiRjb250ZW50XT10aGlzW3IuJGNvbnRlbnRdLnRyaW0oKX19dC5TdHJpbmdPYmplY3Q9U3RyaW5nT2JqZWN0O2NsYXNzIEludGVnZXJPYmplY3QgZXh0ZW5kcyBDb250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUsdCxhLHIpe3N1cGVyKGUsdCk7dGhpc1twXT1hO3RoaXNbRl09cn1bci4kZmluYWxpemVdKCl7dGhpc1tyLiRjb250ZW50XT0oMCxuLmdldEludGVnZXIpKHtkYXRhOnRoaXNbci4kY29udGVudF0sZGVmYXVsdFZhbHVlOnRoaXNbcF0sdmFsaWRhdGU6dGhpc1tGXX0pfVtyLiRjbGVhbl0oZSl7c3VwZXJbci4kY2xlYW5dKGUpO2RlbGV0ZSB0aGlzW3BdO2RlbGV0ZSB0aGlzW0ZdfX10LkludGVnZXJPYmplY3Q9SW50ZWdlck9iamVjdDt0Lk9wdGlvbjAxPWNsYXNzIE9wdGlvbjAxIGV4dGVuZHMgSW50ZWdlck9iamVjdHtjb25zdHJ1Y3RvcihlLHQpe3N1cGVyKGUsdCwwLChlPT4xPT09ZSkpfX07dC5PcHRpb24xMD1jbGFzcyBPcHRpb24xMCBleHRlbmRzIEludGVnZXJPYmplY3R7Y29uc3RydWN0b3IoZSx0KXtzdXBlcihlLHQsMSwoZT0+MD09PWUpKX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuY3JlYXRlRGF0YU5vZGU9ZnVuY3Rpb24gY3JlYXRlRGF0YU5vZGUoZSx0LGEpe2NvbnN0IGk9cGFyc2VFeHByZXNzaW9uKGEpO2lmKCFpKXJldHVybiBudWxsO2lmKGkuc29tZSgoZT0+ZS5vcGVyYXRvcj09PW8uZG90RG90KSkpcmV0dXJuIG51bGw7Y29uc3Qgcz1jLmdldChpWzBdLm5hbWUpO2xldCBsPTA7aWYocyl7ZT1zKGUsdCk7bD0xfWVsc2UgZT10fHxlO2ZvcihsZXQgdD1pLmxlbmd0aDtsPHQ7bCsrKXtjb25zdHtuYW1lOnQsb3BlcmF0b3I6YSxpbmRleDpzfT1pW2xdO2lmKCFpc0Zpbml0ZShzKSl7aVtsXS5pbmRleD0wO3JldHVybiBlLmNyZWF0ZU5vZGVzKGkuc2xpY2UobCkpfWxldCBjO3N3aXRjaChhKXtjYXNlIG8uZG90OmM9ZVtyLiRnZXRDaGlsZHJlbkJ5TmFtZV0odCwhMSk7YnJlYWs7Y2FzZSBvLmRvdERvdDpjPWVbci4kZ2V0Q2hpbGRyZW5CeU5hbWVdKHQsITApO2JyZWFrO2Nhc2Ugby5kb3RIYXNoOmM9ZVtyLiRnZXRDaGlsZHJlbkJ5Q2xhc3NdKHQpO2M9Yy5pc1hGQU9iamVjdEFycmF5P2MuY2hpbGRyZW46W2NdfWlmKDA9PT1jLmxlbmd0aClyZXR1cm4gZS5jcmVhdGVOb2RlcyhpLnNsaWNlKGwpKTtpZighKHM8Yy5sZW5ndGgpKXtpW2xdLmluZGV4PXMtYy5sZW5ndGg7cmV0dXJuIGUuY3JlYXRlTm9kZXMoaS5zbGljZShsKSl9e2NvbnN0IHQ9Y1tzXTtpZighdC5pc1hGQU9iamVjdCl7KDAsbi53YXJuKSgiWEZBIC0gQ2Fubm90IGNyZWF0ZSBhIG5vZGUuIik7cmV0dXJuIG51bGx9ZT10fX1yZXR1cm4gbnVsbH07dC5zZWFyY2hOb2RlPWZ1bmN0aW9uIHNlYXJjaE5vZGUoZSx0LGEsbj0hMCxpPSEwKXtjb25zdCBzPXBhcnNlRXhwcmVzc2lvbihhLG4pO2lmKCFzKXJldHVybiBudWxsO2NvbnN0IGg9Yy5nZXQoc1swXS5uYW1lKTtsZXQgdSxkPTA7aWYoaCl7dT0hMDtlPVtoKGUsdCldO2Q9MX1lbHNle3U9bnVsbD09PXQ7ZT1bdHx8ZV19Zm9yKGxldCBhPXMubGVuZ3RoO2Q8YTtkKyspe2NvbnN0e25hbWU6YSxjYWNoZU5hbWU6bixvcGVyYXRvcjpjLGluZGV4Omh9PXNbZF0sZj1bXTtmb3IoY29uc3QgdCBvZiBlKXtpZighdC5pc1hGQU9iamVjdCljb250aW51ZTtsZXQgZSxzO2lmKGkpe3M9bC5nZXQodCk7aWYoIXMpe3M9bmV3IE1hcDtsLnNldCh0LHMpfWU9cy5nZXQobil9aWYoIWUpe3N3aXRjaChjKXtjYXNlIG8uZG90OmU9dFtyLiRnZXRDaGlsZHJlbkJ5TmFtZV0oYSwhMSk7YnJlYWs7Y2FzZSBvLmRvdERvdDplPXRbci4kZ2V0Q2hpbGRyZW5CeU5hbWVdKGEsITApO2JyZWFrO2Nhc2Ugby5kb3RIYXNoOmU9dFtyLiRnZXRDaGlsZHJlbkJ5Q2xhc3NdKGEpO2U9ZS5pc1hGQU9iamVjdEFycmF5P2UuY2hpbGRyZW46W2VdfWkmJnMuc2V0KG4sZSl9ZS5sZW5ndGg+MCYmZi5wdXNoKGUpfWlmKDAhPT1mLmxlbmd0aHx8dXx8MCE9PWQpZT1pc0Zpbml0ZShoKT9mLmZpbHRlcigoZT0+aDxlLmxlbmd0aCkpLm1hcCgoZT0+ZVtoXSkpOmYuZmxhdCgpO2Vsc2V7Y29uc3QgYT10W3IuJGdldFBhcmVudF0oKTtpZighKHQ9YSkpcmV0dXJuIG51bGw7ZD0tMTtlPVt0XX19aWYoMD09PWUubGVuZ3RoKXJldHVybiBudWxsO3JldHVybiBlfTt2YXIgcj1hKDc4KSxuPWEoMik7Y29uc3QgaT0vXlteLltdKy8scz0vXlteXF1dKy8sbz17ZG90OjAsZG90RG90OjEsZG90SGFzaDoyLGRvdEJyYWNrZXQ6Myxkb3RQYXJlbjo0fSxjPW5ldyBNYXAoW1siJGRhdGEiLChlLHQpPT5lLmRhdGFzZXRzP2UuZGF0YXNldHMuZGF0YTplXSxbIiRyZWNvcmQiLChlLHQpPT4oZS5kYXRhc2V0cz9lLmRhdGFzZXRzLmRhdGE6ZSlbci4kZ2V0Q2hpbGRyZW5dKClbMF1dLFsiJHRlbXBsYXRlIiwoZSx0KT0+ZS50ZW1wbGF0ZV0sWyIkY29ubmVjdGlvblNldCIsKGUsdCk9PmUuY29ubmVjdGlvblNldF0sWyIkZm9ybSIsKGUsdCk9PmUuZm9ybV0sWyIkbGF5b3V0IiwoZSx0KT0+ZS5sYXlvdXRdLFsiJGhvc3QiLChlLHQpPT5lLmhvc3RdLFsiJGRhdGFXaW5kb3ciLChlLHQpPT5lLmRhdGFXaW5kb3ddLFsiJGV2ZW50IiwoZSx0KT0+ZS5ldmVudF0sWyIhIiwoZSx0KT0+ZS5kYXRhc2V0c10sWyIkeGZhIiwoZSx0KT0+ZV0sWyJ4ZmEiLChlLHQpPT5lXSxbIiQiLChlLHQpPT50XV0pLGw9bmV3IFdlYWtNYXA7ZnVuY3Rpb24gcGFyc2VFeHByZXNzaW9uKGUsdCxhPSEwKXtsZXQgcj1lLm1hdGNoKGkpO2lmKCFyKXJldHVybiBudWxsO2xldFtjXT1yO2NvbnN0IGw9W3tuYW1lOmMsY2FjaGVOYW1lOiIuIitjLGluZGV4OjAsanM6bnVsbCxmb3JtQ2FsYzpudWxsLG9wZXJhdG9yOm8uZG90fV07bGV0IGg9Yy5sZW5ndGg7Zm9yKDtoPGUubGVuZ3RoOyl7Y29uc3QgZD1oO2lmKCJbIj09PWUuY2hhckF0KGgrKykpe3I9ZS5zbGljZShoKS5tYXRjaChzKTtpZighcil7KDAsbi53YXJuKSgiWEZBIC0gSW52YWxpZCBpbmRleCBpbiBTT00gZXhwcmVzc2lvbiIpO3JldHVybiBudWxsfWwuYXQoLTEpLmluZGV4PSIqIj09PSh1PSh1PXJbMF0pLnRyaW0oKSk/MS8wOnBhcnNlSW50KHUsMTApfHwwO2grPXJbMF0ubGVuZ3RoKzE7Y29udGludWV9bGV0IGY7c3dpdGNoKGUuY2hhckF0KGgpKXtjYXNlIi4iOmlmKCF0KXJldHVybiBudWxsO2grKztmPW8uZG90RG90O2JyZWFrO2Nhc2UiIyI6aCsrO2Y9by5kb3RIYXNoO2JyZWFrO2Nhc2UiWyI6aWYoYSl7KDAsbi53YXJuKSgiWEZBIC0gU09NIGV4cHJlc3Npb24gY29udGFpbnMgYSBGb3JtQ2FsYyBzdWJleHByZXNzaW9uIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIG5vdy4iKTtyZXR1cm4gbnVsbH1mPW8uZG90QnJhY2tldDticmVhaztjYXNlIigiOmlmKGEpeygwLG4ud2FybikoIlhGQSAtIFNPTSBleHByZXNzaW9uIGNvbnRhaW5zIGEgSmF2YVNjcmlwdCBzdWJleHByZXNzaW9uIHdoaWNoIGlzIG5vdCBzdXBwb3J0ZWQgZm9yIG5vdy4iKTtyZXR1cm4gbnVsbH1mPW8uZG90UGFyZW47YnJlYWs7ZGVmYXVsdDpmPW8uZG90fXI9ZS5zbGljZShoKS5tYXRjaChpKTtpZighcilicmVhaztbY109cjtoKz1jLmxlbmd0aDtsLnB1c2goe25hbWU6YyxjYWNoZU5hbWU6ZS5zbGljZShkLGgpLG9wZXJhdG9yOmYsaW5kZXg6MCxqczpudWxsLGZvcm1DYWxjOm51bGx9KX12YXIgdTtyZXR1cm4gbH19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5EYXRhSGFuZGxlcj12b2lkIDA7dmFyIHI9YSg3OCk7dC5EYXRhSGFuZGxlcj1jbGFzcyBEYXRhSGFuZGxlcntjb25zdHJ1Y3RvcihlLHQpe3RoaXMuZGF0YT10O3RoaXMuZGF0YXNldD1lLmRhdGFzZXRzfHxudWxsfXNlcmlhbGl6ZShlKXtjb25zdCB0PVtbLTEsdGhpcy5kYXRhW3IuJGdldENoaWxkcmVuXSgpXV07Zm9yKDt0Lmxlbmd0aD4wOyl7Y29uc3QgYT10LmF0KC0xKSxbbixpXT1hO2lmKG4rMT09PWkubGVuZ3RoKXt0LnBvcCgpO2NvbnRpbnVlfWNvbnN0IHM9aVsrK2FbMF1dLG89ZS5nZXQoc1tyLiR1aWRdKTtpZihvKXNbci4kc2V0VmFsdWVdKG8pO2Vsc2V7Y29uc3QgdD1zW3IuJGdldEF0dHJpYnV0ZXNdKCk7Zm9yKGNvbnN0IGEgb2YgdC52YWx1ZXMoKSl7Y29uc3QgdD1lLmdldChhW3IuJHVpZF0pO2lmKHQpe2Fbci4kc2V0VmFsdWVdKHQpO2JyZWFrfX19Y29uc3QgYz1zW3IuJGdldENoaWxkcmVuXSgpO2MubGVuZ3RoPjAmJnQucHVzaChbLTEsY10pfWNvbnN0IGE9Wyc8eGZhOmRhdGFzZXRzIHhtbG5zOnhmYT0iaHR0cDovL3d3dy54ZmEub3JnL3NjaGVtYS94ZmEtZGF0YS8xLjAvIj4nXTtpZih0aGlzLmRhdGFzZXQpZm9yKGNvbnN0IGUgb2YgdGhpcy5kYXRhc2V0W3IuJGdldENoaWxkcmVuXSgpKSJkYXRhIiE9PWVbci4kbm9kZU5hbWVdJiZlW3IuJHRvU3RyaW5nXShhKTt0aGlzLmRhdGFbci4kdG9TdHJpbmddKGEpO2EucHVzaCgiPC94ZmE6ZGF0YXNldHM+Iik7cmV0dXJuIGEuam9pbigiIil9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlhGQVBhcnNlcj12b2lkIDA7dmFyIHI9YSg3OCksbj1hKDcxKSxpPWEoOTEpLHM9YSgyKTtjbGFzcyBYRkFQYXJzZXIgZXh0ZW5kcyBuLlhNTFBhcnNlckJhc2V7Y29uc3RydWN0b3IoZT1udWxsLHQ9ITEpe3N1cGVyKCk7dGhpcy5fYnVpbGRlcj1uZXcgaS5CdWlsZGVyKGUpO3RoaXMuX3N0YWNrPVtdO3RoaXMuX2dsb2JhbERhdGE9e3VzZWRUeXBlZmFjZXM6bmV3IFNldH07dGhpcy5faWRzPW5ldyBNYXA7dGhpcy5fY3VycmVudD10aGlzLl9idWlsZGVyLmJ1aWxkUm9vdCh0aGlzLl9pZHMpO3RoaXMuX2Vycm9yQ29kZT1uLlhNTFBhcnNlckVycm9yQ29kZS5Ob0Vycm9yO3RoaXMuX3doaXRlUmVnZXg9L15ccyskLzt0aGlzLl9uYnNwcz0vXHhhMCsvZzt0aGlzLl9yaWNoVGV4dD10fXBhcnNlKGUpe3RoaXMucGFyc2VYbWwoZSk7aWYodGhpcy5fZXJyb3JDb2RlPT09bi5YTUxQYXJzZXJFcnJvckNvZGUuTm9FcnJvcil7dGhpcy5fY3VycmVudFtyLiRmaW5hbGl6ZV0oKTtyZXR1cm4gdGhpcy5fY3VycmVudC5lbGVtZW50fX1vblRleHQoZSl7ZT1lLnJlcGxhY2UodGhpcy5fbmJzcHMsKGU9PmUuc2xpY2UoMSkrIiAiKSk7dGhpcy5fcmljaFRleHR8fHRoaXMuX2N1cnJlbnRbci4kYWNjZXB0V2hpdGVzcGFjZV0oKT90aGlzLl9jdXJyZW50W3IuJG9uVGV4dF0oZSx0aGlzLl9yaWNoVGV4dCk6dGhpcy5fd2hpdGVSZWdleC50ZXN0KGUpfHx0aGlzLl9jdXJyZW50W3IuJG9uVGV4dF0oZS50cmltKCkpfW9uQ2RhdGEoZSl7dGhpcy5fY3VycmVudFtyLiRvblRleHRdKGUpfV9ta0F0dHJpYnV0ZXMoZSx0KXtsZXQgYT1udWxsLG49bnVsbDtjb25zdCBpPU9iamVjdC5jcmVhdGUoe30pO2Zvcihjb25zdHtuYW1lOm8sdmFsdWU6Y31vZiBlKWlmKCJ4bWxucyI9PT1vKWE/KDAscy53YXJuKShgWEZBIC0gbXVsdGlwbGUgbmFtZXNwYWNlIGRlZmluaXRpb24gaW4gPCR7dH0+YCk6YT1jO2Vsc2UgaWYoby5zdGFydHNXaXRoKCJ4bWxuczoiKSl7Y29uc3QgZT1vLnN1YnN0cmluZyg2KTtufHwobj1bXSk7bi5wdXNoKHtwcmVmaXg6ZSx2YWx1ZTpjfSl9ZWxzZXtjb25zdCBlPW8uaW5kZXhPZigiOiIpO2lmKC0xPT09ZSlpW29dPWM7ZWxzZXtsZXQgdD1pW3IuJG5zQXR0cmlidXRlc107dHx8KHQ9aVtyLiRuc0F0dHJpYnV0ZXNdPU9iamVjdC5jcmVhdGUobnVsbCkpO2NvbnN0W2Esbl09W28uc2xpY2UoMCxlKSxvLnNsaWNlKGUrMSldOyh0W2FdfHw9T2JqZWN0LmNyZWF0ZShudWxsKSlbbl09Y319cmV0dXJuW2EsbixpXX1fZ2V0TmFtZUFuZFByZWZpeChlLHQpe2NvbnN0IGE9ZS5pbmRleE9mKCI6Iik7cmV0dXJuLTE9PT1hP1tlLG51bGxdOltlLnN1YnN0cmluZyhhKzEpLHQ/IiI6ZS5zdWJzdHJpbmcoMCxhKV19b25CZWdpbkVsZW1lbnQoZSx0LGEpe2NvbnN0W24saSxzXT10aGlzLl9ta0F0dHJpYnV0ZXModCxlKSxbbyxjXT10aGlzLl9nZXROYW1lQW5kUHJlZml4KGUsdGhpcy5fYnVpbGRlci5pc05zQWdub3N0aWMoKSksbD10aGlzLl9idWlsZGVyLmJ1aWxkKHtuc1ByZWZpeDpjLG5hbWU6byxhdHRyaWJ1dGVzOnMsbmFtZXNwYWNlOm4scHJlZml4ZXM6aX0pO2xbci4kZ2xvYmFsRGF0YV09dGhpcy5fZ2xvYmFsRGF0YTtpZihhKXtsW3IuJGZpbmFsaXplXSgpO3RoaXMuX2N1cnJlbnRbci4kb25DaGlsZF0obCkmJmxbci4kc2V0SWRdKHRoaXMuX2lkcyk7bFtyLiRjbGVhbl0odGhpcy5fYnVpbGRlcil9ZWxzZXt0aGlzLl9zdGFjay5wdXNoKHRoaXMuX2N1cnJlbnQpO3RoaXMuX2N1cnJlbnQ9bH19b25FbmRFbGVtZW50KGUpe2NvbnN0IHQ9dGhpcy5fY3VycmVudDtpZih0W3IuJGlzQ0RBVEFYbWxdKCkmJiJzdHJpbmciPT10eXBlb2YgdFtyLiRjb250ZW50XSl7Y29uc3QgZT1uZXcgWEZBUGFyc2VyO2UuX2dsb2JhbERhdGE9dGhpcy5fZ2xvYmFsRGF0YTtjb25zdCBhPWUucGFyc2UodFtyLiRjb250ZW50XSk7dFtyLiRjb250ZW50XT1udWxsO3Rbci4kb25DaGlsZF0oYSl9dFtyLiRmaW5hbGl6ZV0oKTt0aGlzLl9jdXJyZW50PXRoaXMuX3N0YWNrLnBvcCgpO3RoaXMuX2N1cnJlbnRbci4kb25DaGlsZF0odCkmJnRbci4kc2V0SWRdKHRoaXMuX2lkcyk7dFtyLiRjbGVhbl0odGhpcy5fYnVpbGRlcil9b25FcnJvcihlKXt0aGlzLl9lcnJvckNvZGU9ZX19dC5YRkFQYXJzZXI9WEZBUGFyc2VyfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuQnVpbGRlcj12b2lkIDA7dmFyIHI9YSg4MSksbj1hKDc4KSxpPWEoOTIpLHM9YSg4MCksbz1hKDEwMSksYz1hKDIpLGw9YSg4Nyk7Y2xhc3MgUm9vdCBleHRlbmRzIGwuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKC0xLCJyb290IixPYmplY3QuY3JlYXRlKG51bGwpKTt0aGlzLmVsZW1lbnQ9bnVsbDt0aGlzW24uJGlkc109ZX1bbi4kb25DaGlsZF0oZSl7dGhpcy5lbGVtZW50PWU7cmV0dXJuITB9W24uJGZpbmFsaXplXSgpe3N1cGVyW24uJGZpbmFsaXplXSgpO2lmKHRoaXMuZWxlbWVudC50ZW1wbGF0ZSBpbnN0YW5jZW9mIHMuVGVtcGxhdGUpe3RoaXNbbi4kaWRzXS5zZXQobi4kcm9vdCx0aGlzLmVsZW1lbnQpO3RoaXMuZWxlbWVudC50ZW1wbGF0ZVtuLiRyZXNvbHZlUHJvdG90eXBlc10odGhpc1tuLiRpZHNdKTt0aGlzLmVsZW1lbnQudGVtcGxhdGVbbi4kaWRzXT10aGlzW24uJGlkc119fX1jbGFzcyBFbXB0eSBleHRlbmRzIGwuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKCl7c3VwZXIoLTEsIiIsT2JqZWN0LmNyZWF0ZShudWxsKSl9W24uJG9uQ2hpbGRdKGUpe3JldHVybiExfX10LkJ1aWxkZXI9Y2xhc3MgQnVpbGRlcntjb25zdHJ1Y3RvcihlPW51bGwpe3RoaXMuX25hbWVzcGFjZVN0YWNrPVtdO3RoaXMuX25zQWdub3N0aWNMZXZlbD0wO3RoaXMuX25hbWVzcGFjZVByZWZpeGVzPW5ldyBNYXA7dGhpcy5fbmFtZXNwYWNlcz1uZXcgTWFwO3RoaXMuX25leHROc0lkPU1hdGgubWF4KC4uLk9iamVjdC52YWx1ZXMoci5OYW1lc3BhY2VJZHMpLm1hcCgoKHtpZDplfSk9PmUpKSk7dGhpcy5fY3VycmVudE5hbWVzcGFjZT1lfHxuZXcgby5Vbmtub3duTmFtZXNwYWNlKCsrdGhpcy5fbmV4dE5zSWQpfWJ1aWxkUm9vdChlKXtyZXR1cm4gbmV3IFJvb3QoZSl9YnVpbGQoe25zUHJlZml4OmUsbmFtZTp0LGF0dHJpYnV0ZXM6YSxuYW1lc3BhY2U6cyxwcmVmaXhlczpvfSl7Y29uc3QgYz1udWxsIT09cztpZihjKXt0aGlzLl9uYW1lc3BhY2VTdGFjay5wdXNoKHRoaXMuX2N1cnJlbnROYW1lc3BhY2UpO3RoaXMuX2N1cnJlbnROYW1lc3BhY2U9dGhpcy5fc2VhcmNoTmFtZXNwYWNlKHMpfW8mJnRoaXMuX2FkZE5hbWVzcGFjZVByZWZpeChvKTtpZihhLmhhc093blByb3BlcnR5KG4uJG5zQXR0cmlidXRlcykpe2NvbnN0IGU9aS5OYW1lc3BhY2VTZXRVcC5kYXRhc2V0cyx0PWFbbi4kbnNBdHRyaWJ1dGVzXTtsZXQgcj1udWxsO2Zvcihjb25zdFthLG5db2YgT2JqZWN0LmVudHJpZXModCkpe2lmKHRoaXMuX2dldE5hbWVzcGFjZVRvVXNlKGEpPT09ZSl7cj17eGZhOm59O2JyZWFrfX1yP2Fbbi4kbnNBdHRyaWJ1dGVzXT1yOmRlbGV0ZSBhW24uJG5zQXR0cmlidXRlc119Y29uc3QgbD10aGlzLl9nZXROYW1lc3BhY2VUb1VzZShlKSxoPWw/LltyLiRidWlsZFhGQU9iamVjdF0odCxhKXx8bmV3IEVtcHR5O2hbbi4kaXNOc0Fnbm9zdGljXSgpJiZ0aGlzLl9uc0Fnbm9zdGljTGV2ZWwrKzsoY3x8b3x8aFtuLiRpc05zQWdub3N0aWNdKCkpJiYoaFtuLiRjbGVhbnVwXT17aGFzTmFtZXNwYWNlOmMscHJlZml4ZXM6byxuc0Fnbm9zdGljOmhbbi4kaXNOc0Fnbm9zdGljXSgpfSk7cmV0dXJuIGh9aXNOc0Fnbm9zdGljKCl7cmV0dXJuIHRoaXMuX25zQWdub3N0aWNMZXZlbD4wfV9zZWFyY2hOYW1lc3BhY2UoZSl7bGV0IHQ9dGhpcy5fbmFtZXNwYWNlcy5nZXQoZSk7aWYodClyZXR1cm4gdDtmb3IoY29uc3RbYSx7Y2hlY2s6bn1db2YgT2JqZWN0LmVudHJpZXMoci5OYW1lc3BhY2VJZHMpKWlmKG4oZSkpe3Q9aS5OYW1lc3BhY2VTZXRVcFthXTtpZih0KXt0aGlzLl9uYW1lc3BhY2VzLnNldChlLHQpO3JldHVybiB0fWJyZWFrfXQ9bmV3IG8uVW5rbm93bk5hbWVzcGFjZSgrK3RoaXMuX25leHROc0lkKTt0aGlzLl9uYW1lc3BhY2VzLnNldChlLHQpO3JldHVybiB0fV9hZGROYW1lc3BhY2VQcmVmaXgoZSl7Zm9yKGNvbnN0e3ByZWZpeDp0LHZhbHVlOmF9b2YgZSl7Y29uc3QgZT10aGlzLl9zZWFyY2hOYW1lc3BhY2UoYSk7bGV0IHI9dGhpcy5fbmFtZXNwYWNlUHJlZml4ZXMuZ2V0KHQpO2lmKCFyKXtyPVtdO3RoaXMuX25hbWVzcGFjZVByZWZpeGVzLnNldCh0LHIpfXIucHVzaChlKX19X2dldE5hbWVzcGFjZVRvVXNlKGUpe2lmKCFlKXJldHVybiB0aGlzLl9jdXJyZW50TmFtZXNwYWNlO2NvbnN0IHQ9dGhpcy5fbmFtZXNwYWNlUHJlZml4ZXMuZ2V0KGUpO2lmKHQ/Lmxlbmd0aD4wKXJldHVybiB0LmF0KC0xKTsoMCxjLndhcm4pKGBVbmtub3duIG5hbWVzcGFjZSBwcmVmaXg6ICR7ZX0uYCk7cmV0dXJuIG51bGx9Y2xlYW4oZSl7Y29uc3R7aGFzTmFtZXNwYWNlOnQscHJlZml4ZXM6YSxuc0Fnbm9zdGljOnJ9PWU7dCYmKHRoaXMuX2N1cnJlbnROYW1lc3BhY2U9dGhpcy5fbmFtZXNwYWNlU3RhY2sucG9wKCkpO2EmJmEuZm9yRWFjaCgoKHtwcmVmaXg6ZX0pPT57dGhpcy5fbmFtZXNwYWNlUHJlZml4ZXMuZ2V0KGUpLnBvcCgpfSkpO3ImJnRoaXMuX25zQWdub3N0aWNMZXZlbC0tfX19LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5OYW1lc3BhY2VTZXRVcD12b2lkIDA7dmFyIHI9YSg5Myksbj1hKDk0KSxpPWEoOTUpLHM9YSg5Niksbz1hKDk3KSxjPWEoOTgpLGw9YSg4MCksaD1hKDk5KSx1PWEoMTAwKTtjb25zdCBkPXtjb25maWc6ci5Db25maWdOYW1lc3BhY2UsY29ubmVjdGlvbjpuLkNvbm5lY3Rpb25TZXROYW1lc3BhY2UsZGF0YXNldHM6aS5EYXRhc2V0c05hbWVzcGFjZSxsb2NhbGVTZXQ6cy5Mb2NhbGVTZXROYW1lc3BhY2Usc2lnbmF0dXJlOm8uU2lnbmF0dXJlTmFtZXNwYWNlLHN0eWxlc2hlZXQ6Yy5TdHlsZXNoZWV0TmFtZXNwYWNlLHRlbXBsYXRlOmwuVGVtcGxhdGVOYW1lc3BhY2UseGRwOmguWGRwTmFtZXNwYWNlLHhodG1sOnUuWGh0bWxOYW1lc3BhY2V9O3QuTmFtZXNwYWNlU2V0VXA9ZH0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkNvbmZpZ05hbWVzcGFjZT12b2lkIDA7dmFyIHI9YSg4MSksbj1hKDc4KSxpPWEoODcpLHM9YSg4NCksbz1hKDIpO2NvbnN0IGM9ci5OYW1lc3BhY2VJZHMuY29uZmlnLmlkO2NsYXNzIEFjcm9iYXQgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJhY3JvYmF0IiwhMCk7dGhpcy5hY3JvYmF0Nz1udWxsO3RoaXMuYXV0b1NhdmU9bnVsbDt0aGlzLmNvbW1vbj1udWxsO3RoaXMudmFsaWRhdGU9bnVsbDt0aGlzLnZhbGlkYXRlQXBwcm92YWxTaWduYXR1cmVzPW51bGw7dGhpcy5zdWJtaXRVcmw9bmV3IGkuWEZBT2JqZWN0QXJyYXl9fWNsYXNzIEFjcm9iYXQ3IGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiYWNyb2JhdDciLCEwKTt0aGlzLmR5bmFtaWNSZW5kZXI9bnVsbH19Y2xhc3MgQURCRV9KU0NvbnNvbGUgZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJBREJFX0pTQ29uc29sZSIsWyJkZWxlZ2F0ZSIsIkVuYWJsZSIsIkRpc2FibGUiXSl9fWNsYXNzIEFEQkVfSlNEZWJ1Z2dlciBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsIkFEQkVfSlNEZWJ1Z2dlciIsWyJkZWxlZ2F0ZSIsIkVuYWJsZSIsIkRpc2FibGUiXSl9fWNsYXNzIEFkZFNpbGVudFByaW50IGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJhZGRTaWxlbnRQcmludCIpfX1jbGFzcyBBZGRWaWV3ZXJQcmVmZXJlbmNlcyBleHRlbmRzIGkuT3B0aW9uMDF7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiYWRkVmlld2VyUHJlZmVyZW5jZXMiKX19Y2xhc3MgQWRqdXN0RGF0YSBleHRlbmRzIGkuT3B0aW9uMTB7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiYWRqdXN0RGF0YSIpfX1jbGFzcyBBZG9iZUV4dGVuc2lvbkxldmVsIGV4dGVuZHMgaS5JbnRlZ2VyT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImFkb2JlRXh0ZW5zaW9uTGV2ZWwiLDAsKGU9PmU+PTEmJmU8PTgpKX19Y2xhc3MgQWdlbnQgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJhZ2VudCIsITApO3RoaXMubmFtZT1lLm5hbWU/ZS5uYW1lLnRyaW0oKToiIjt0aGlzLmNvbW1vbj1uZXcgaS5YRkFPYmplY3RBcnJheX19Y2xhc3MgQWx3YXlzRW1iZWQgZXh0ZW5kcyBpLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiYWx3YXlzRW1iZWQiKX19Y2xhc3MgQW1kIGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiYW1kIil9fWNsYXNzIEFyZWEgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJhcmVhIik7dGhpcy5sZXZlbD0oMCxzLmdldEludGVnZXIpKHtkYXRhOmUubGV2ZWwsZGVmYXVsdFZhbHVlOjAsdmFsaWRhdGU6ZT0+ZT49MSYmZTw9M30pO3RoaXMubmFtZT0oMCxzLmdldFN0cmluZ09wdGlvbikoZS5uYW1lLFsiIiwiYmFyY29kZSIsImNvcmVpbml0IiwiZGV2aWNlRHJpdmVyIiwiZm9udCIsImdlbmVyYWwiLCJsYXlvdXQiLCJtZXJnZSIsInNjcmlwdCIsInNpZ25hdHVyZSIsInNvdXJjZVNldCIsInRlbXBsYXRlQ2FjaGUiXSl9fWNsYXNzIEF0dHJpYnV0ZXMgZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJhdHRyaWJ1dGVzIixbInByZXNlcnZlIiwiZGVsZWdhdGUiLCJpZ25vcmUiXSl9fWNsYXNzIEF1dG9TYXZlIGV4dGVuZHMgaS5PcHRpb25PYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiYXV0b1NhdmUiLFsiZGlzYWJsZWQiLCJlbmFibGVkIl0pfX1jbGFzcyBCYXNlIGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiYmFzZSIpfX1jbGFzcyBCYXRjaE91dHB1dCBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImJhdGNoT3V0cHV0Iik7dGhpcy5mb3JtYXQ9KDAscy5nZXRTdHJpbmdPcHRpb24pKGUuZm9ybWF0LFsibm9uZSIsImNvbmNhdCIsInppcCIsInppcENvbXByZXNzIl0pfX1jbGFzcyBCZWhhdmlvck92ZXJyaWRlIGV4dGVuZHMgaS5Db250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImJlaGF2aW9yT3ZlcnJpZGUiKX1bbi4kZmluYWxpemVdKCl7dGhpc1tuLiRjb250ZW50XT1uZXcgTWFwKHRoaXNbbi4kY29udGVudF0udHJpbSgpLnNwbGl0KC9ccysvKS5maWx0ZXIoKGU9PmUuaW5jbHVkZXMoIjoiKSkpLm1hcCgoZT0+ZS5zcGxpdCgiOiIsMikpKSl9fWNsYXNzIENhY2hlIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiY2FjaGUiLCEwKTt0aGlzLnRlbXBsYXRlQ2FjaGU9bnVsbH19Y2xhc3MgQ2hhbmdlIGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJjaGFuZ2UiKX19Y2xhc3MgQ29tbW9uIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiY29tbW9uIiwhMCk7dGhpcy5kYXRhPW51bGw7dGhpcy5sb2NhbGU9bnVsbDt0aGlzLmxvY2FsZVNldD1udWxsO3RoaXMubWVzc2FnaW5nPW51bGw7dGhpcy5zdXBwcmVzc0Jhbm5lcj1udWxsO3RoaXMudGVtcGxhdGU9bnVsbDt0aGlzLnZhbGlkYXRpb25NZXNzYWdpbmc9bnVsbDt0aGlzLnZlcnNpb25Db250cm9sPW51bGw7dGhpcy5sb2c9bmV3IGkuWEZBT2JqZWN0QXJyYXl9fWNsYXNzIENvbXByZXNzIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiY29tcHJlc3MiKTt0aGlzLnNjb3BlPSgwLHMuZ2V0U3RyaW5nT3B0aW9uKShlLnNjb3BlLFsiaW1hZ2VPbmx5IiwiZG9jdW1lbnQiXSl9fWNsYXNzIENvbXByZXNzTG9naWNhbFN0cnVjdHVyZSBleHRlbmRzIGkuT3B0aW9uMDF7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiY29tcHJlc3NMb2dpY2FsU3RydWN0dXJlIil9fWNsYXNzIENvbXByZXNzT2JqZWN0U3RyZWFtIGV4dGVuZHMgaS5PcHRpb24xMHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJjb21wcmVzc09iamVjdFN0cmVhbSIpfX1jbGFzcyBDb21wcmVzc2lvbiBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImNvbXByZXNzaW9uIiwhMCk7dGhpcy5jb21wcmVzc0xvZ2ljYWxTdHJ1Y3R1cmU9bnVsbDt0aGlzLmNvbXByZXNzT2JqZWN0U3RyZWFtPW51bGw7dGhpcy5sZXZlbD1udWxsO3RoaXMudHlwZT1udWxsfX1jbGFzcyBDb25maWcgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJjb25maWciLCEwKTt0aGlzLmFjcm9iYXQ9bnVsbDt0aGlzLnByZXNlbnQ9bnVsbDt0aGlzLnRyYWNlPW51bGw7dGhpcy5hZ2VudD1uZXcgaS5YRkFPYmplY3RBcnJheX19Y2xhc3MgQ29uZm9ybWFuY2UgZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJjb25mb3JtYW5jZSIsWyJBIiwiQiJdKX19Y2xhc3MgQ29udGVudENvcHkgZXh0ZW5kcyBpLk9wdGlvbjAxe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImNvbnRlbnRDb3B5Iil9fWNsYXNzIENvcGllcyBleHRlbmRzIGkuSW50ZWdlck9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJjb3BpZXMiLDEsKGU9PmU+PTEpKX19Y2xhc3MgQ3JlYXRvciBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImNyZWF0b3IiKX19Y2xhc3MgQ3VycmVudFBhZ2UgZXh0ZW5kcyBpLkludGVnZXJPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiY3VycmVudFBhZ2UiLDAsKGU9PmU+PTApKX19Y2xhc3MgRGF0YSBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImRhdGEiLCEwKTt0aGlzLmFkanVzdERhdGE9bnVsbDt0aGlzLmF0dHJpYnV0ZXM9bnVsbDt0aGlzLmluY3JlbWVudGFsTG9hZD1udWxsO3RoaXMub3V0cHV0WFNMPW51bGw7dGhpcy5yYW5nZT1udWxsO3RoaXMucmVjb3JkPW51bGw7dGhpcy5zdGFydE5vZGU9bnVsbDt0aGlzLnVyaT1udWxsO3RoaXMud2luZG93PW51bGw7dGhpcy54c2w9bnVsbDt0aGlzLmV4Y2x1ZGVOUz1uZXcgaS5YRkFPYmplY3RBcnJheTt0aGlzLnRyYW5zZm9ybT1uZXcgaS5YRkFPYmplY3RBcnJheX19Y2xhc3MgRGVidWcgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJkZWJ1ZyIsITApO3RoaXMudXJpPW51bGx9fWNsYXNzIERlZmF1bHRUeXBlZmFjZSBleHRlbmRzIGkuQ29udGVudE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJkZWZhdWx0VHlwZWZhY2UiKTt0aGlzLndyaXRpbmdTY3JpcHQ9KDAscy5nZXRTdHJpbmdPcHRpb24pKGUud3JpdGluZ1NjcmlwdCxbIioiLCJBcmFiaWMiLCJDeXJpbGxpYyIsIkVhc3RFdXJvcGVhblJvbWFuIiwiR3JlZWsiLCJIZWJyZXciLCJKYXBhbmVzZSIsIktvcmVhbiIsIlJvbWFuIiwiU2ltcGxpZmllZENoaW5lc2UiLCJUaGFpIiwiVHJhZGl0aW9uYWxDaGluZXNlIiwiVmlldG5hbWVzZSJdKX19Y2xhc3MgRGVzdGluYXRpb24gZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJkZXN0aW5hdGlvbiIsWyJwZGYiLCJwY2wiLCJwcyIsIndlYkNsaWVudCIsInpwbCJdKX19Y2xhc3MgRG9jdW1lbnRBc3NlbWJseSBleHRlbmRzIGkuT3B0aW9uMDF7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiZG9jdW1lbnRBc3NlbWJseSIpfX1jbGFzcyBEcml2ZXIgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJkcml2ZXIiLCEwKTt0aGlzLm5hbWU9ZS5uYW1lP2UubmFtZS50cmltKCk6IiI7dGhpcy5mb250SW5mbz1udWxsO3RoaXMueGRjPW51bGx9fWNsYXNzIER1cGxleE9wdGlvbiBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImR1cGxleE9wdGlvbiIsWyJzaW1wbGV4IiwiZHVwbGV4RmxpcExvbmdFZGdlIiwiZHVwbGV4RmxpcFNob3J0RWRnZSJdKX19Y2xhc3MgRHluYW1pY1JlbmRlciBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImR5bmFtaWNSZW5kZXIiLFsiZm9yYmlkZGVuIiwicmVxdWlyZWQiXSl9fWNsYXNzIEVtYmVkIGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJlbWJlZCIpfX1jbGFzcyBFbmNyeXB0IGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJlbmNyeXB0Iil9fWNsYXNzIEVuY3J5cHRpb24gZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJlbmNyeXB0aW9uIiwhMCk7dGhpcy5lbmNyeXB0PW51bGw7dGhpcy5lbmNyeXB0aW9uTGV2ZWw9bnVsbDt0aGlzLnBlcm1pc3Npb25zPW51bGx9fWNsYXNzIEVuY3J5cHRpb25MZXZlbCBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImVuY3J5cHRpb25MZXZlbCIsWyI0MGJpdCIsIjEyOGJpdCJdKX19Y2xhc3MgRW5mb3JjZSBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImVuZm9yY2UiKX19Y2xhc3MgRXF1YXRlIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiZXF1YXRlIik7dGhpcy5mb3JjZT0oMCxzLmdldEludGVnZXIpKHtkYXRhOmUuZm9yY2UsZGVmYXVsdFZhbHVlOjEsdmFsaWRhdGU6ZT0+MD09PWV9KTt0aGlzLmZyb209ZS5mcm9tfHwiIjt0aGlzLnRvPWUudG98fCIifX1jbGFzcyBFcXVhdGVSYW5nZSBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImVxdWF0ZVJhbmdlIik7dGhpcy5mcm9tPWUuZnJvbXx8IiI7dGhpcy50bz1lLnRvfHwiIjt0aGlzLl91bmljb2RlUmFuZ2U9ZS51bmljb2RlUmFuZ2V8fCIifWdldCB1bmljb2RlUmFuZ2UoKXtjb25zdCBlPVtdLHQ9L1VcKyhbMC05YS1mQS1GXSspLyxhPXRoaXMuX3VuaWNvZGVSYW5nZTtmb3IobGV0IHIgb2YgYS5zcGxpdCgiLCIpLm1hcCgoZT0+ZS50cmltKCkpKS5maWx0ZXIoKGU9PiEhZSkpKXtyPXIuc3BsaXQoIi0iLDIpLm1hcCgoZT0+e2NvbnN0IGE9ZS5tYXRjaCh0KTtyZXR1cm4gYT9wYXJzZUludChhWzFdLDE2KTowfSkpOzE9PT1yLmxlbmd0aCYmci5wdXNoKHJbMF0pO2UucHVzaChyKX1yZXR1cm4oMCxvLnNoYWRvdykodGhpcywidW5pY29kZVJhbmdlIixlKX19Y2xhc3MgRXhjbHVkZSBleHRlbmRzIGkuQ29udGVudE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJleGNsdWRlIil9W24uJGZpbmFsaXplXSgpe3RoaXNbbi4kY29udGVudF09dGhpc1tuLiRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKy8pLmZpbHRlcigoZT0+ZSYmWyJjYWxjdWxhdGUiLCJjbG9zZSIsImVudGVyIiwiZXhpdCIsImluaXRpYWxpemUiLCJyZWFkeSIsInZhbGlkYXRlIl0uaW5jbHVkZXMoZSkpKX19Y2xhc3MgRXhjbHVkZU5TIGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiZXhjbHVkZU5TIil9fWNsYXNzIEZsaXBMYWJlbCBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImZsaXBMYWJlbCIsWyJ1c2VQcmludGVyU2V0dGluZyIsIm9uIiwib2ZmIl0pfX1jbGFzcyBGb250SW5mbyBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImZvbnRJbmZvIiwhMCk7dGhpcy5lbWJlZD1udWxsO3RoaXMubWFwPW51bGw7dGhpcy5zdWJzZXRCZWxvdz1udWxsO3RoaXMuYWx3YXlzRW1iZWQ9bmV3IGkuWEZBT2JqZWN0QXJyYXk7dGhpcy5kZWZhdWx0VHlwZWZhY2U9bmV3IGkuWEZBT2JqZWN0QXJyYXk7dGhpcy5uZXZlckVtYmVkPW5ldyBpLlhGQU9iamVjdEFycmF5fX1jbGFzcyBGb3JtRmllbGRGaWxsaW5nIGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJmb3JtRmllbGRGaWxsaW5nIil9fWNsYXNzIEdyb3VwUGFyZW50IGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywiZ3JvdXBQYXJlbnQiKX19Y2xhc3MgSWZFbXB0eSBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImlmRW1wdHkiLFsiZGF0YVZhbHVlIiwiZGF0YUdyb3VwIiwiaWdub3JlIiwicmVtb3ZlIl0pfX1jbGFzcyBJbmNsdWRlWERQQ29udGVudCBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImluY2x1ZGVYRFBDb250ZW50Iil9fWNsYXNzIEluY3JlbWVudGFsTG9hZCBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImluY3JlbWVudGFsTG9hZCIsWyJub25lIiwiZm9yd2FyZE9ubHkiXSl9fWNsYXNzIEluY3JlbWVudGFsTWVyZ2UgZXh0ZW5kcyBpLk9wdGlvbjAxe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImluY3JlbWVudGFsTWVyZ2UiKX19Y2xhc3MgSW50ZXJhY3RpdmUgZXh0ZW5kcyBpLk9wdGlvbjAxe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImludGVyYWN0aXZlIil9fWNsYXNzIEpvZyBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImpvZyIsWyJ1c2VQcmludGVyU2V0dGluZyIsIm5vbmUiLCJwYWdlU2V0Il0pfX1jbGFzcyBMYWJlbFByaW50ZXIgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJsYWJlbFByaW50ZXIiLCEwKTt0aGlzLm5hbWU9KDAscy5nZXRTdHJpbmdPcHRpb24pKGUubmFtZSxbInpwbCIsImRwbCIsImlwbCIsInRjcGwiXSk7dGhpcy5iYXRjaE91dHB1dD1udWxsO3RoaXMuZmxpcExhYmVsPW51bGw7dGhpcy5mb250SW5mbz1udWxsO3RoaXMueGRjPW51bGx9fWNsYXNzIExheW91dCBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImxheW91dCIsWyJwYWdpbmF0ZSIsInBhbmVsIl0pfX1jbGFzcyBMZXZlbCBleHRlbmRzIGkuSW50ZWdlck9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJsZXZlbCIsMCwoZT0+ZT4wKSl9fWNsYXNzIExpbmVhcml6ZWQgZXh0ZW5kcyBpLk9wdGlvbjAxe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImxpbmVhcml6ZWQiKX19Y2xhc3MgTG9jYWxlIGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywibG9jYWxlIil9fWNsYXNzIExvY2FsZVNldCBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsImxvY2FsZVNldCIpfX1jbGFzcyBMb2cgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJsb2ciLCEwKTt0aGlzLm1vZGU9bnVsbDt0aGlzLnRocmVzaG9sZD1udWxsO3RoaXMudG89bnVsbDt0aGlzLnVyaT1udWxsfX1jbGFzcyBNYXBFbGVtZW50IGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywibWFwIiwhMCk7dGhpcy5lcXVhdGU9bmV3IGkuWEZBT2JqZWN0QXJyYXk7dGhpcy5lcXVhdGVSYW5nZT1uZXcgaS5YRkFPYmplY3RBcnJheX19Y2xhc3MgTWVkaXVtSW5mbyBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsIm1lZGl1bUluZm8iLCEwKTt0aGlzLm1hcD1udWxsfX1jbGFzcyBNZXNzYWdlIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywibWVzc2FnZSIsITApO3RoaXMubXNnSWQ9bnVsbDt0aGlzLnNldmVyaXR5PW51bGx9fWNsYXNzIE1lc3NhZ2luZyBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsIm1lc3NhZ2luZyIsITApO3RoaXMubWVzc2FnZT1uZXcgaS5YRkFPYmplY3RBcnJheX19Y2xhc3MgTW9kZSBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsIm1vZGUiLFsiYXBwZW5kIiwib3ZlcndyaXRlIl0pfX1jbGFzcyBNb2RpZnlBbm5vdHMgZXh0ZW5kcyBpLk9wdGlvbjAxe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsIm1vZGlmeUFubm90cyIpfX1jbGFzcyBNc2dJZCBleHRlbmRzIGkuSW50ZWdlck9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJtc2dJZCIsMSwoZT0+ZT49MSkpfX1jbGFzcyBOYW1lQXR0ciBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsIm5hbWVBdHRyIil9fWNsYXNzIE5ldmVyRW1iZWQgZXh0ZW5kcyBpLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywibmV2ZXJFbWJlZCIpfX1jbGFzcyBOdW1iZXJPZkNvcGllcyBleHRlbmRzIGkuSW50ZWdlck9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJudW1iZXJPZkNvcGllcyIsbnVsbCwoZT0+ZT49MiYmZTw9NSkpfX1jbGFzcyBPcGVuQWN0aW9uIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywib3BlbkFjdGlvbiIsITApO3RoaXMuZGVzdGluYXRpb249bnVsbH19Y2xhc3MgT3V0cHV0IGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywib3V0cHV0IiwhMCk7dGhpcy50bz1udWxsO3RoaXMudHlwZT1udWxsO3RoaXMudXJpPW51bGx9fWNsYXNzIE91dHB1dEJpbiBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsIm91dHB1dEJpbiIpfX1jbGFzcyBPdXRwdXRYU0wgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJvdXRwdXRYU0wiLCEwKTt0aGlzLnVyaT1udWxsfX1jbGFzcyBPdmVycHJpbnQgZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJvdmVycHJpbnQiLFsibm9uZSIsImJvdGgiLCJkcmF3IiwiZmllbGQiXSl9fWNsYXNzIFBhY2tldHMgZXh0ZW5kcyBpLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwYWNrZXRzIil9W24uJGZpbmFsaXplXSgpeyIqIiE9PXRoaXNbbi4kY29udGVudF0mJih0aGlzW24uJGNvbnRlbnRdPXRoaXNbbi4kY29udGVudF0udHJpbSgpLnNwbGl0KC9ccysvKS5maWx0ZXIoKGU9PlsiY29uZmlnIiwiZGF0YXNldHMiLCJ0ZW1wbGF0ZSIsInhmZGYiLCJ4c2x0Il0uaW5jbHVkZXMoZSkpKSl9fWNsYXNzIFBhZ2VPZmZzZXQgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwYWdlT2Zmc2V0Iik7dGhpcy54PSgwLHMuZ2V0SW50ZWdlcikoe2RhdGE6ZS54LGRlZmF1bHRWYWx1ZToidXNlWERDU2V0dGluZyIsdmFsaWRhdGU6ZT0+ITB9KTt0aGlzLnk9KDAscy5nZXRJbnRlZ2VyKSh7ZGF0YTplLnksZGVmYXVsdFZhbHVlOiJ1c2VYRENTZXR0aW5nIix2YWxpZGF0ZTplPT4hMH0pfX1jbGFzcyBQYWdlUmFuZ2UgZXh0ZW5kcyBpLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwYWdlUmFuZ2UiKX1bbi4kZmluYWxpemVdKCl7Y29uc3QgZT10aGlzW24uJGNvbnRlbnRdLnRyaW0oKS5zcGxpdCgvXHMrLykubWFwKChlPT5wYXJzZUludChlLDEwKSkpLHQ9W107Zm9yKGxldCBhPTAscj1lLmxlbmd0aDthPHI7YSs9Mil0LnB1c2goZS5zbGljZShhLGErMikpO3RoaXNbbi4kY29udGVudF09dH19Y2xhc3MgUGFnaW5hdGlvbiBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInBhZ2luYXRpb24iLFsic2ltcGxleCIsImR1cGxleFNob3J0RWRnZSIsImR1cGxleExvbmdFZGdlIl0pfX1jbGFzcyBQYWdpbmF0aW9uT3ZlcnJpZGUgZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwYWdpbmF0aW9uT3ZlcnJpZGUiLFsibm9uZSIsImZvcmNlRHVwbGV4IiwiZm9yY2VEdXBsZXhMb25nRWRnZSIsImZvcmNlRHVwbGV4U2hvcnRFZGdlIiwiZm9yY2VTaW1wbGV4Il0pfX1jbGFzcyBQYXJ0IGV4dGVuZHMgaS5JbnRlZ2VyT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInBhcnQiLDEsKGU9PiExKSl9fWNsYXNzIFBjbCBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInBjbCIsITApO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMuYmF0Y2hPdXRwdXQ9bnVsbDt0aGlzLmZvbnRJbmZvPW51bGw7dGhpcy5qb2c9bnVsbDt0aGlzLm1lZGl1bUluZm89bnVsbDt0aGlzLm91dHB1dEJpbj1udWxsO3RoaXMucGFnZU9mZnNldD1udWxsO3RoaXMuc3RhcGxlPW51bGw7dGhpcy54ZGM9bnVsbH19Y2xhc3MgUGRmIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicGRmIiwhMCk7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy5hZG9iZUV4dGVuc2lvbkxldmVsPW51bGw7dGhpcy5iYXRjaE91dHB1dD1udWxsO3RoaXMuY29tcHJlc3Npb249bnVsbDt0aGlzLmNyZWF0b3I9bnVsbDt0aGlzLmVuY3J5cHRpb249bnVsbDt0aGlzLmZvbnRJbmZvPW51bGw7dGhpcy5pbnRlcmFjdGl2ZT1udWxsO3RoaXMubGluZWFyaXplZD1udWxsO3RoaXMub3BlbkFjdGlvbj1udWxsO3RoaXMucGRmYT1udWxsO3RoaXMucHJvZHVjZXI9bnVsbDt0aGlzLnJlbmRlclBvbGljeT1udWxsO3RoaXMuc2NyaXB0TW9kZWw9bnVsbDt0aGlzLnNpbGVudFByaW50PW51bGw7dGhpcy5zdWJtaXRGb3JtYXQ9bnVsbDt0aGlzLnRhZ2dlZD1udWxsO3RoaXMudmVyc2lvbj1udWxsO3RoaXMudmlld2VyUHJlZmVyZW5jZXM9bnVsbDt0aGlzLnhkYz1udWxsfX1jbGFzcyBQZGZhIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicGRmYSIsITApO3RoaXMuYW1kPW51bGw7dGhpcy5jb25mb3JtYW5jZT1udWxsO3RoaXMuaW5jbHVkZVhEUENvbnRlbnQ9bnVsbDt0aGlzLnBhcnQ9bnVsbH19Y2xhc3MgUGVybWlzc2lvbnMgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwZXJtaXNzaW9ucyIsITApO3RoaXMuYWNjZXNzaWJsZUNvbnRlbnQ9bnVsbDt0aGlzLmNoYW5nZT1udWxsO3RoaXMuY29udGVudENvcHk9bnVsbDt0aGlzLmRvY3VtZW50QXNzZW1ibHk9bnVsbDt0aGlzLmZvcm1GaWVsZEZpbGxpbmc9bnVsbDt0aGlzLm1vZGlmeUFubm90cz1udWxsO3RoaXMucGxhaW50ZXh0TWV0YWRhdGE9bnVsbDt0aGlzLnByaW50PW51bGw7dGhpcy5wcmludEhpZ2hRdWFsaXR5PW51bGx9fWNsYXNzIFBpY2tUcmF5QnlQREZTaXplIGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwaWNrVHJheUJ5UERGU2l6ZSIpfX1jbGFzcyBQaWN0dXJlIGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicGljdHVyZSIpfX1jbGFzcyBQbGFpbnRleHRNZXRhZGF0YSBleHRlbmRzIGkuT3B0aW9uMDF7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicGxhaW50ZXh0TWV0YWRhdGEiKX19Y2xhc3MgUHJlc2VuY2UgZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwcmVzZW5jZSIsWyJwcmVzZXJ2ZSIsImRpc3NvbHZlIiwiZGlzc29sdmVTdHJ1Y3R1cmUiLCJpZ25vcmUiLCJyZW1vdmUiXSl9fWNsYXNzIFByZXNlbnQgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwcmVzZW50IiwhMCk7dGhpcy5iZWhhdmlvck92ZXJyaWRlPW51bGw7dGhpcy5jYWNoZT1udWxsO3RoaXMuY29tbW9uPW51bGw7dGhpcy5jb3BpZXM9bnVsbDt0aGlzLmRlc3RpbmF0aW9uPW51bGw7dGhpcy5pbmNyZW1lbnRhbE1lcmdlPW51bGw7dGhpcy5sYXlvdXQ9bnVsbDt0aGlzLm91dHB1dD1udWxsO3RoaXMub3ZlcnByaW50PW51bGw7dGhpcy5wYWdpbmF0aW9uPW51bGw7dGhpcy5wYWdpbmF0aW9uT3ZlcnJpZGU9bnVsbDt0aGlzLnNjcmlwdD1udWxsO3RoaXMudmFsaWRhdGU9bnVsbDt0aGlzLnhkcD1udWxsO3RoaXMuZHJpdmVyPW5ldyBpLlhGQU9iamVjdEFycmF5O3RoaXMubGFiZWxQcmludGVyPW5ldyBpLlhGQU9iamVjdEFycmF5O3RoaXMucGNsPW5ldyBpLlhGQU9iamVjdEFycmF5O3RoaXMucGRmPW5ldyBpLlhGQU9iamVjdEFycmF5O3RoaXMucHM9bmV3IGkuWEZBT2JqZWN0QXJyYXk7dGhpcy5zdWJtaXRVcmw9bmV3IGkuWEZBT2JqZWN0QXJyYXk7dGhpcy53ZWJDbGllbnQ9bmV3IGkuWEZBT2JqZWN0QXJyYXk7dGhpcy56cGw9bmV3IGkuWEZBT2JqZWN0QXJyYXl9fWNsYXNzIFByaW50IGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwcmludCIpfX1jbGFzcyBQcmludEhpZ2hRdWFsaXR5IGV4dGVuZHMgaS5PcHRpb24wMXtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwcmludEhpZ2hRdWFsaXR5Iil9fWNsYXNzIFByaW50U2NhbGluZyBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInByaW50U2NhbGluZyIsWyJhcHBkZWZhdWx0Iiwibm9TY2FsaW5nIl0pfX1jbGFzcyBQcmludGVyTmFtZSBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInByaW50ZXJOYW1lIil9fWNsYXNzIFByb2R1Y2VyIGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicHJvZHVjZXIiKX19Y2xhc3MgUHMgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJwcyIsITApO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMuYmF0Y2hPdXRwdXQ9bnVsbDt0aGlzLmZvbnRJbmZvPW51bGw7dGhpcy5qb2c9bnVsbDt0aGlzLm1lZGl1bUluZm89bnVsbDt0aGlzLm91dHB1dEJpbj1udWxsO3RoaXMuc3RhcGxlPW51bGw7dGhpcy54ZGM9bnVsbH19Y2xhc3MgUmFuZ2UgZXh0ZW5kcyBpLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicmFuZ2UiKX1bbi4kZmluYWxpemVdKCl7dGhpc1tuLiRjb250ZW50XT10aGlzW24uJGNvbnRlbnRdLnRyaW0oKS5zcGxpdCgvXHMqLFxzKi8sMikubWFwKChlPT5lLnNwbGl0KCItIikubWFwKChlPT5wYXJzZUludChlLnRyaW0oKSwxMCkpKSkpLmZpbHRlcigoZT0+ZS5ldmVyeSgoZT0+IWlzTmFOKGUpKSkpKS5tYXAoKGU9PnsxPT09ZS5sZW5ndGgmJmUucHVzaChlWzBdKTtyZXR1cm4gZX0pKX19Y2xhc3MgUmVjb3JkIGV4dGVuZHMgaS5Db250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInJlY29yZCIpfVtuLiRmaW5hbGl6ZV0oKXt0aGlzW24uJGNvbnRlbnRdPXRoaXNbbi4kY29udGVudF0udHJpbSgpO2NvbnN0IGU9cGFyc2VJbnQodGhpc1tuLiRjb250ZW50XSwxMCk7IWlzTmFOKGUpJiZlPj0wJiYodGhpc1tuLiRjb250ZW50XT1lKX19Y2xhc3MgUmVsZXZhbnQgZXh0ZW5kcyBpLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicmVsZXZhbnQiKX1bbi4kZmluYWxpemVdKCl7dGhpc1tuLiRjb250ZW50XT10aGlzW24uJGNvbnRlbnRdLnRyaW0oKS5zcGxpdCgvXHMrLyl9fWNsYXNzIFJlbmFtZSBleHRlbmRzIGkuQ29udGVudE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJyZW5hbWUiKX1bbi4kZmluYWxpemVdKCl7dGhpc1tuLiRjb250ZW50XT10aGlzW24uJGNvbnRlbnRdLnRyaW0oKTsodGhpc1tuLiRjb250ZW50XS50b0xvd2VyQ2FzZSgpLnN0YXJ0c1dpdGgoInhtbCIpfHxuZXcgUmVnRXhwKCJbXFxwe0x9X11bXFxwe0x9XFxkLl9cXHB7TX0tXSoiLCJ1IikudGVzdCh0aGlzW24uJGNvbnRlbnRdKSkmJigwLG8ud2FybikoIlhGQSAtIFJlbmFtZTogaW52YWxpZCBYRkEgbmFtZSIpfX1jbGFzcyBSZW5kZXJQb2xpY3kgZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJyZW5kZXJQb2xpY3kiLFsic2VydmVyIiwiY2xpZW50Il0pfX1jbGFzcyBSdW5TY3JpcHRzIGV4dGVuZHMgaS5PcHRpb25PYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywicnVuU2NyaXB0cyIsWyJib3RoIiwiY2xpZW50Iiwibm9uZSIsInNlcnZlciJdKX19Y2xhc3MgU2NyaXB0IGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywic2NyaXB0IiwhMCk7dGhpcy5jdXJyZW50UGFnZT1udWxsO3RoaXMuZXhjbHVkZT1udWxsO3RoaXMucnVuU2NyaXB0cz1udWxsfX1jbGFzcyBTY3JpcHRNb2RlbCBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInNjcmlwdE1vZGVsIixbIlhGQSIsIm5vbmUiXSl9fWNsYXNzIFNldmVyaXR5IGV4dGVuZHMgaS5PcHRpb25PYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywic2V2ZXJpdHkiLFsiaWdub3JlIiwiZXJyb3IiLCJpbmZvcm1hdGlvbiIsInRyYWNlIiwid2FybmluZyJdKX19Y2xhc3MgU2lsZW50UHJpbnQgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJzaWxlbnRQcmludCIsITApO3RoaXMuYWRkU2lsZW50UHJpbnQ9bnVsbDt0aGlzLnByaW50ZXJOYW1lPW51bGx9fWNsYXNzIFN0YXBsZSBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInN0YXBsZSIpO3RoaXMubW9kZT0oMCxzLmdldFN0cmluZ09wdGlvbikoZS5tb2RlLFsidXNlUHJpbnRlclNldHRpbmciLCJvbiIsIm9mZiJdKX19Y2xhc3MgU3RhcnROb2RlIGV4dGVuZHMgaS5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywic3RhcnROb2RlIil9fWNsYXNzIFN0YXJ0UGFnZSBleHRlbmRzIGkuSW50ZWdlck9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJzdGFydFBhZ2UiLDAsKGU9PiEwKSl9fWNsYXNzIFN1Ym1pdEZvcm1hdCBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInN1Ym1pdEZvcm1hdCIsWyJodG1sIiwiZGVsZWdhdGUiLCJmZGYiLCJ4bWwiLCJwZGYiXSl9fWNsYXNzIFN1Ym1pdFVybCBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInN1Ym1pdFVybCIpfX1jbGFzcyBTdWJzZXRCZWxvdyBleHRlbmRzIGkuSW50ZWdlck9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJzdWJzZXRCZWxvdyIsMTAwLChlPT5lPj0wJiZlPD0xMDApKX19Y2xhc3MgU3VwcHJlc3NCYW5uZXIgZXh0ZW5kcyBpLk9wdGlvbjAxe2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInN1cHByZXNzQmFubmVyIil9fWNsYXNzIFRhZ2dlZCBleHRlbmRzIGkuT3B0aW9uMDF7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywidGFnZ2VkIil9fWNsYXNzIFRlbXBsYXRlIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywidGVtcGxhdGUiLCEwKTt0aGlzLmJhc2U9bnVsbDt0aGlzLnJlbGV2YW50PW51bGw7dGhpcy5zdGFydFBhZ2U9bnVsbDt0aGlzLnVyaT1udWxsO3RoaXMueHNsPW51bGx9fWNsYXNzIFRocmVzaG9sZCBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInRocmVzaG9sZCIsWyJ0cmFjZSIsImVycm9yIiwiaW5mb3JtYXRpb24iLCJ3YXJuaW5nIl0pfX1jbGFzcyBUbyBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInRvIixbIm51bGwiLCJtZW1vcnkiLCJzdGRlcnIiLCJzdGRvdXQiLCJzeXN0ZW0iLCJ1cmkiXSl9fWNsYXNzIFRlbXBsYXRlQ2FjaGUgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJ0ZW1wbGF0ZUNhY2hlIik7dGhpcy5tYXhFbnRyaWVzPSgwLHMuZ2V0SW50ZWdlcikoe2RhdGE6ZS5tYXhFbnRyaWVzLGRlZmF1bHRWYWx1ZTo1LHZhbGlkYXRlOmU9PmU+PTB9KX19Y2xhc3MgVHJhY2UgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJ0cmFjZSIsITApO3RoaXMuYXJlYT1uZXcgaS5YRkFPYmplY3RBcnJheX19Y2xhc3MgVHJhbnNmb3JtIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywidHJhbnNmb3JtIiwhMCk7dGhpcy5ncm91cFBhcmVudD1udWxsO3RoaXMuaWZFbXB0eT1udWxsO3RoaXMubmFtZUF0dHI9bnVsbDt0aGlzLnBpY3R1cmU9bnVsbDt0aGlzLnByZXNlbmNlPW51bGw7dGhpcy5yZW5hbWU9bnVsbDt0aGlzLndoaXRlc3BhY2U9bnVsbH19Y2xhc3MgVHlwZSBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInR5cGUiLFsibm9uZSIsImFzY2lpODUiLCJhc2NpaUhleCIsImNjaXR0ZmF4IiwiZmxhdGUiLCJsenciLCJydW5MZW5ndGgiLCJuYXRpdmUiLCJ4ZHAiLCJtZXJnZWRYRFAiXSl9fWNsYXNzIFVyaSBleHRlbmRzIGkuU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInVyaSIpfX1jbGFzcyBWYWxpZGF0ZSBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInZhbGlkYXRlIixbInByZVN1Ym1pdCIsInByZVByaW50IiwicHJlRXhlY3V0ZSIsInByZVNhdmUiXSl9fWNsYXNzIFZhbGlkYXRlQXBwcm92YWxTaWduYXR1cmVzIGV4dGVuZHMgaS5Db250ZW50T2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInZhbGlkYXRlQXBwcm92YWxTaWduYXR1cmVzIil9W24uJGZpbmFsaXplXSgpe3RoaXNbbi4kY29udGVudF09dGhpc1tuLiRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKy8pLmZpbHRlcigoZT0+WyJkb2NSZWFkeSIsInBvc3RTaWduIl0uaW5jbHVkZXMoZSkpKX19Y2xhc3MgVmFsaWRhdGlvbk1lc3NhZ2luZyBleHRlbmRzIGkuT3B0aW9uT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInZhbGlkYXRpb25NZXNzYWdpbmciLFsiYWxsTWVzc2FnZXNJbmRpdmlkdWFsbHkiLCJhbGxNZXNzYWdlc1RvZ2V0aGVyIiwiZmlyc3RNZXNzYWdlT25seSIsIm5vTWVzc2FnZXMiXSl9fWNsYXNzIFZlcnNpb24gZXh0ZW5kcyBpLk9wdGlvbk9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJ2ZXJzaW9uIixbIjEuNyIsIjEuNiIsIjEuNSIsIjEuNCIsIjEuMyIsIjEuMiJdKX19Y2xhc3MgVmVyc2lvbkNvbnRyb2wgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJWZXJzaW9uQ29udHJvbCIpO3RoaXMub3V0cHV0QmVsb3c9KDAscy5nZXRTdHJpbmdPcHRpb24pKGUub3V0cHV0QmVsb3csWyJ3YXJuIiwiZXJyb3IiLCJ1cGRhdGUiXSk7dGhpcy5zb3VyY2VBYm92ZT0oMCxzLmdldFN0cmluZ09wdGlvbikoZS5zb3VyY2VBYm92ZSxbIndhcm4iLCJlcnJvciJdKTt0aGlzLnNvdXJjZUJlbG93PSgwLHMuZ2V0U3RyaW5nT3B0aW9uKShlLnNvdXJjZUJlbG93LFsidXBkYXRlIiwibWFpbnRhaW4iXSl9fWNsYXNzIFZpZXdlclByZWZlcmVuY2VzIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywidmlld2VyUHJlZmVyZW5jZXMiLCEwKTt0aGlzLkFEQkVfSlNDb25zb2xlPW51bGw7dGhpcy5BREJFX0pTRGVidWdnZXI9bnVsbDt0aGlzLmFkZFZpZXdlclByZWZlcmVuY2VzPW51bGw7dGhpcy5kdXBsZXhPcHRpb249bnVsbDt0aGlzLmVuZm9yY2U9bnVsbDt0aGlzLm51bWJlck9mQ29waWVzPW51bGw7dGhpcy5wYWdlUmFuZ2U9bnVsbDt0aGlzLnBpY2tUcmF5QnlQREZTaXplPW51bGw7dGhpcy5wcmludFNjYWxpbmc9bnVsbH19Y2xhc3MgV2ViQ2xpZW50IGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywid2ViQ2xpZW50IiwhMCk7dGhpcy5uYW1lPWUubmFtZT9lLm5hbWUudHJpbSgpOiIiO3RoaXMuZm9udEluZm89bnVsbDt0aGlzLnhkYz1udWxsfX1jbGFzcyBXaGl0ZXNwYWNlIGV4dGVuZHMgaS5PcHRpb25PYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywid2hpdGVzcGFjZSIsWyJwcmVzZXJ2ZSIsImx0cmltIiwibm9ybWFsaXplIiwicnRyaW0iLCJ0cmltIl0pfX1jbGFzcyBXaW5kb3cgZXh0ZW5kcyBpLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywid2luZG93Iil9W24uJGZpbmFsaXplXSgpe2NvbnN0IGU9dGhpc1tuLiRjb250ZW50XS50cmltKCkuc3BsaXQoL1xzKixccyovLDIpLm1hcCgoZT0+cGFyc2VJbnQoZSwxMCkpKTtpZihlLnNvbWUoKGU9PmlzTmFOKGUpKSkpdGhpc1tuLiRjb250ZW50XT1bMCwwXTtlbHNlezE9PT1lLmxlbmd0aCYmZS5wdXNoKGVbMF0pO3RoaXNbbi4kY29udGVudF09ZX19fWNsYXNzIFhkYyBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInhkYyIsITApO3RoaXMudXJpPW5ldyBpLlhGQU9iamVjdEFycmF5O3RoaXMueHNsPW5ldyBpLlhGQU9iamVjdEFycmF5fX1jbGFzcyBYZHAgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihjLCJ4ZHAiLCEwKTt0aGlzLnBhY2tldHM9bnVsbH19Y2xhc3MgWHNsIGV4dGVuZHMgaS5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoYywieHNsIiwhMCk7dGhpcy5kZWJ1Zz1udWxsO3RoaXMudXJpPW51bGx9fWNsYXNzIFpwbCBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGMsInpwbCIsITApO3RoaXMubmFtZT1lLm5hbWU/ZS5uYW1lLnRyaW0oKToiIjt0aGlzLmJhdGNoT3V0cHV0PW51bGw7dGhpcy5mbGlwTGFiZWw9bnVsbDt0aGlzLmZvbnRJbmZvPW51bGw7dGhpcy54ZGM9bnVsbH19Y2xhc3MgQ29uZmlnTmFtZXNwYWNle3N0YXRpY1tyLiRidWlsZFhGQU9iamVjdF0oZSx0KXtpZihDb25maWdOYW1lc3BhY2UuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIENvbmZpZ05hbWVzcGFjZVtlXSh0KX1zdGF0aWMgYWNyb2JhdChlKXtyZXR1cm4gbmV3IEFjcm9iYXQoZSl9c3RhdGljIGFjcm9iYXQ3KGUpe3JldHVybiBuZXcgQWNyb2JhdDcoZSl9c3RhdGljIEFEQkVfSlNDb25zb2xlKGUpe3JldHVybiBuZXcgQURCRV9KU0NvbnNvbGUoZSl9c3RhdGljIEFEQkVfSlNEZWJ1Z2dlcihlKXtyZXR1cm4gbmV3IEFEQkVfSlNEZWJ1Z2dlcihlKX1zdGF0aWMgYWRkU2lsZW50UHJpbnQoZSl7cmV0dXJuIG5ldyBBZGRTaWxlbnRQcmludChlKX1zdGF0aWMgYWRkVmlld2VyUHJlZmVyZW5jZXMoZSl7cmV0dXJuIG5ldyBBZGRWaWV3ZXJQcmVmZXJlbmNlcyhlKX1zdGF0aWMgYWRqdXN0RGF0YShlKXtyZXR1cm4gbmV3IEFkanVzdERhdGEoZSl9c3RhdGljIGFkb2JlRXh0ZW5zaW9uTGV2ZWwoZSl7cmV0dXJuIG5ldyBBZG9iZUV4dGVuc2lvbkxldmVsKGUpfXN0YXRpYyBhZ2VudChlKXtyZXR1cm4gbmV3IEFnZW50KGUpfXN0YXRpYyBhbHdheXNFbWJlZChlKXtyZXR1cm4gbmV3IEFsd2F5c0VtYmVkKGUpfXN0YXRpYyBhbWQoZSl7cmV0dXJuIG5ldyBBbWQoZSl9c3RhdGljIGFyZWEoZSl7cmV0dXJuIG5ldyBBcmVhKGUpfXN0YXRpYyBhdHRyaWJ1dGVzKGUpe3JldHVybiBuZXcgQXR0cmlidXRlcyhlKX1zdGF0aWMgYXV0b1NhdmUoZSl7cmV0dXJuIG5ldyBBdXRvU2F2ZShlKX1zdGF0aWMgYmFzZShlKXtyZXR1cm4gbmV3IEJhc2UoZSl9c3RhdGljIGJhdGNoT3V0cHV0KGUpe3JldHVybiBuZXcgQmF0Y2hPdXRwdXQoZSl9c3RhdGljIGJlaGF2aW9yT3ZlcnJpZGUoZSl7cmV0dXJuIG5ldyBCZWhhdmlvck92ZXJyaWRlKGUpfXN0YXRpYyBjYWNoZShlKXtyZXR1cm4gbmV3IENhY2hlKGUpfXN0YXRpYyBjaGFuZ2UoZSl7cmV0dXJuIG5ldyBDaGFuZ2UoZSl9c3RhdGljIGNvbW1vbihlKXtyZXR1cm4gbmV3IENvbW1vbihlKX1zdGF0aWMgY29tcHJlc3MoZSl7cmV0dXJuIG5ldyBDb21wcmVzcyhlKX1zdGF0aWMgY29tcHJlc3NMb2dpY2FsU3RydWN0dXJlKGUpe3JldHVybiBuZXcgQ29tcHJlc3NMb2dpY2FsU3RydWN0dXJlKGUpfXN0YXRpYyBjb21wcmVzc09iamVjdFN0cmVhbShlKXtyZXR1cm4gbmV3IENvbXByZXNzT2JqZWN0U3RyZWFtKGUpfXN0YXRpYyBjb21wcmVzc2lvbihlKXtyZXR1cm4gbmV3IENvbXByZXNzaW9uKGUpfXN0YXRpYyBjb25maWcoZSl7cmV0dXJuIG5ldyBDb25maWcoZSl9c3RhdGljIGNvbmZvcm1hbmNlKGUpe3JldHVybiBuZXcgQ29uZm9ybWFuY2UoZSl9c3RhdGljIGNvbnRlbnRDb3B5KGUpe3JldHVybiBuZXcgQ29udGVudENvcHkoZSl9c3RhdGljIGNvcGllcyhlKXtyZXR1cm4gbmV3IENvcGllcyhlKX1zdGF0aWMgY3JlYXRvcihlKXtyZXR1cm4gbmV3IENyZWF0b3IoZSl9c3RhdGljIGN1cnJlbnRQYWdlKGUpe3JldHVybiBuZXcgQ3VycmVudFBhZ2UoZSl9c3RhdGljIGRhdGEoZSl7cmV0dXJuIG5ldyBEYXRhKGUpfXN0YXRpYyBkZWJ1ZyhlKXtyZXR1cm4gbmV3IERlYnVnKGUpfXN0YXRpYyBkZWZhdWx0VHlwZWZhY2UoZSl7cmV0dXJuIG5ldyBEZWZhdWx0VHlwZWZhY2UoZSl9c3RhdGljIGRlc3RpbmF0aW9uKGUpe3JldHVybiBuZXcgRGVzdGluYXRpb24oZSl9c3RhdGljIGRvY3VtZW50QXNzZW1ibHkoZSl7cmV0dXJuIG5ldyBEb2N1bWVudEFzc2VtYmx5KGUpfXN0YXRpYyBkcml2ZXIoZSl7cmV0dXJuIG5ldyBEcml2ZXIoZSl9c3RhdGljIGR1cGxleE9wdGlvbihlKXtyZXR1cm4gbmV3IER1cGxleE9wdGlvbihlKX1zdGF0aWMgZHluYW1pY1JlbmRlcihlKXtyZXR1cm4gbmV3IER5bmFtaWNSZW5kZXIoZSl9c3RhdGljIGVtYmVkKGUpe3JldHVybiBuZXcgRW1iZWQoZSl9c3RhdGljIGVuY3J5cHQoZSl7cmV0dXJuIG5ldyBFbmNyeXB0KGUpfXN0YXRpYyBlbmNyeXB0aW9uKGUpe3JldHVybiBuZXcgRW5jcnlwdGlvbihlKX1zdGF0aWMgZW5jcnlwdGlvbkxldmVsKGUpe3JldHVybiBuZXcgRW5jcnlwdGlvbkxldmVsKGUpfXN0YXRpYyBlbmZvcmNlKGUpe3JldHVybiBuZXcgRW5mb3JjZShlKX1zdGF0aWMgZXF1YXRlKGUpe3JldHVybiBuZXcgRXF1YXRlKGUpfXN0YXRpYyBlcXVhdGVSYW5nZShlKXtyZXR1cm4gbmV3IEVxdWF0ZVJhbmdlKGUpfXN0YXRpYyBleGNsdWRlKGUpe3JldHVybiBuZXcgRXhjbHVkZShlKX1zdGF0aWMgZXhjbHVkZU5TKGUpe3JldHVybiBuZXcgRXhjbHVkZU5TKGUpfXN0YXRpYyBmbGlwTGFiZWwoZSl7cmV0dXJuIG5ldyBGbGlwTGFiZWwoZSl9c3RhdGljIGZvbnRJbmZvKGUpe3JldHVybiBuZXcgRm9udEluZm8oZSl9c3RhdGljIGZvcm1GaWVsZEZpbGxpbmcoZSl7cmV0dXJuIG5ldyBGb3JtRmllbGRGaWxsaW5nKGUpfXN0YXRpYyBncm91cFBhcmVudChlKXtyZXR1cm4gbmV3IEdyb3VwUGFyZW50KGUpfXN0YXRpYyBpZkVtcHR5KGUpe3JldHVybiBuZXcgSWZFbXB0eShlKX1zdGF0aWMgaW5jbHVkZVhEUENvbnRlbnQoZSl7cmV0dXJuIG5ldyBJbmNsdWRlWERQQ29udGVudChlKX1zdGF0aWMgaW5jcmVtZW50YWxMb2FkKGUpe3JldHVybiBuZXcgSW5jcmVtZW50YWxMb2FkKGUpfXN0YXRpYyBpbmNyZW1lbnRhbE1lcmdlKGUpe3JldHVybiBuZXcgSW5jcmVtZW50YWxNZXJnZShlKX1zdGF0aWMgaW50ZXJhY3RpdmUoZSl7cmV0dXJuIG5ldyBJbnRlcmFjdGl2ZShlKX1zdGF0aWMgam9nKGUpe3JldHVybiBuZXcgSm9nKGUpfXN0YXRpYyBsYWJlbFByaW50ZXIoZSl7cmV0dXJuIG5ldyBMYWJlbFByaW50ZXIoZSl9c3RhdGljIGxheW91dChlKXtyZXR1cm4gbmV3IExheW91dChlKX1zdGF0aWMgbGV2ZWwoZSl7cmV0dXJuIG5ldyBMZXZlbChlKX1zdGF0aWMgbGluZWFyaXplZChlKXtyZXR1cm4gbmV3IExpbmVhcml6ZWQoZSl9c3RhdGljIGxvY2FsZShlKXtyZXR1cm4gbmV3IExvY2FsZShlKX1zdGF0aWMgbG9jYWxlU2V0KGUpe3JldHVybiBuZXcgTG9jYWxlU2V0KGUpfXN0YXRpYyBsb2coZSl7cmV0dXJuIG5ldyBMb2coZSl9c3RhdGljIG1hcChlKXtyZXR1cm4gbmV3IE1hcEVsZW1lbnQoZSl9c3RhdGljIG1lZGl1bUluZm8oZSl7cmV0dXJuIG5ldyBNZWRpdW1JbmZvKGUpfXN0YXRpYyBtZXNzYWdlKGUpe3JldHVybiBuZXcgTWVzc2FnZShlKX1zdGF0aWMgbWVzc2FnaW5nKGUpe3JldHVybiBuZXcgTWVzc2FnaW5nKGUpfXN0YXRpYyBtb2RlKGUpe3JldHVybiBuZXcgTW9kZShlKX1zdGF0aWMgbW9kaWZ5QW5ub3RzKGUpe3JldHVybiBuZXcgTW9kaWZ5QW5ub3RzKGUpfXN0YXRpYyBtc2dJZChlKXtyZXR1cm4gbmV3IE1zZ0lkKGUpfXN0YXRpYyBuYW1lQXR0cihlKXtyZXR1cm4gbmV3IE5hbWVBdHRyKGUpfXN0YXRpYyBuZXZlckVtYmVkKGUpe3JldHVybiBuZXcgTmV2ZXJFbWJlZChlKX1zdGF0aWMgbnVtYmVyT2ZDb3BpZXMoZSl7cmV0dXJuIG5ldyBOdW1iZXJPZkNvcGllcyhlKX1zdGF0aWMgb3BlbkFjdGlvbihlKXtyZXR1cm4gbmV3IE9wZW5BY3Rpb24oZSl9c3RhdGljIG91dHB1dChlKXtyZXR1cm4gbmV3IE91dHB1dChlKX1zdGF0aWMgb3V0cHV0QmluKGUpe3JldHVybiBuZXcgT3V0cHV0QmluKGUpfXN0YXRpYyBvdXRwdXRYU0woZSl7cmV0dXJuIG5ldyBPdXRwdXRYU0woZSl9c3RhdGljIG92ZXJwcmludChlKXtyZXR1cm4gbmV3IE92ZXJwcmludChlKX1zdGF0aWMgcGFja2V0cyhlKXtyZXR1cm4gbmV3IFBhY2tldHMoZSl9c3RhdGljIHBhZ2VPZmZzZXQoZSl7cmV0dXJuIG5ldyBQYWdlT2Zmc2V0KGUpfXN0YXRpYyBwYWdlUmFuZ2UoZSl7cmV0dXJuIG5ldyBQYWdlUmFuZ2UoZSl9c3RhdGljIHBhZ2luYXRpb24oZSl7cmV0dXJuIG5ldyBQYWdpbmF0aW9uKGUpfXN0YXRpYyBwYWdpbmF0aW9uT3ZlcnJpZGUoZSl7cmV0dXJuIG5ldyBQYWdpbmF0aW9uT3ZlcnJpZGUoZSl9c3RhdGljIHBhcnQoZSl7cmV0dXJuIG5ldyBQYXJ0KGUpfXN0YXRpYyBwY2woZSl7cmV0dXJuIG5ldyBQY2woZSl9c3RhdGljIHBkZihlKXtyZXR1cm4gbmV3IFBkZihlKX1zdGF0aWMgcGRmYShlKXtyZXR1cm4gbmV3IFBkZmEoZSl9c3RhdGljIHBlcm1pc3Npb25zKGUpe3JldHVybiBuZXcgUGVybWlzc2lvbnMoZSl9c3RhdGljIHBpY2tUcmF5QnlQREZTaXplKGUpe3JldHVybiBuZXcgUGlja1RyYXlCeVBERlNpemUoZSl9c3RhdGljIHBpY3R1cmUoZSl7cmV0dXJuIG5ldyBQaWN0dXJlKGUpfXN0YXRpYyBwbGFpbnRleHRNZXRhZGF0YShlKXtyZXR1cm4gbmV3IFBsYWludGV4dE1ldGFkYXRhKGUpfXN0YXRpYyBwcmVzZW5jZShlKXtyZXR1cm4gbmV3IFByZXNlbmNlKGUpfXN0YXRpYyBwcmVzZW50KGUpe3JldHVybiBuZXcgUHJlc2VudChlKX1zdGF0aWMgcHJpbnQoZSl7cmV0dXJuIG5ldyBQcmludChlKX1zdGF0aWMgcHJpbnRIaWdoUXVhbGl0eShlKXtyZXR1cm4gbmV3IFByaW50SGlnaFF1YWxpdHkoZSl9c3RhdGljIHByaW50U2NhbGluZyhlKXtyZXR1cm4gbmV3IFByaW50U2NhbGluZyhlKX1zdGF0aWMgcHJpbnRlck5hbWUoZSl7cmV0dXJuIG5ldyBQcmludGVyTmFtZShlKX1zdGF0aWMgcHJvZHVjZXIoZSl7cmV0dXJuIG5ldyBQcm9kdWNlcihlKX1zdGF0aWMgcHMoZSl7cmV0dXJuIG5ldyBQcyhlKX1zdGF0aWMgcmFuZ2UoZSl7cmV0dXJuIG5ldyBSYW5nZShlKX1zdGF0aWMgcmVjb3JkKGUpe3JldHVybiBuZXcgUmVjb3JkKGUpfXN0YXRpYyByZWxldmFudChlKXtyZXR1cm4gbmV3IFJlbGV2YW50KGUpfXN0YXRpYyByZW5hbWUoZSl7cmV0dXJuIG5ldyBSZW5hbWUoZSl9c3RhdGljIHJlbmRlclBvbGljeShlKXtyZXR1cm4gbmV3IFJlbmRlclBvbGljeShlKX1zdGF0aWMgcnVuU2NyaXB0cyhlKXtyZXR1cm4gbmV3IFJ1blNjcmlwdHMoZSl9c3RhdGljIHNjcmlwdChlKXtyZXR1cm4gbmV3IFNjcmlwdChlKX1zdGF0aWMgc2NyaXB0TW9kZWwoZSl7cmV0dXJuIG5ldyBTY3JpcHRNb2RlbChlKX1zdGF0aWMgc2V2ZXJpdHkoZSl7cmV0dXJuIG5ldyBTZXZlcml0eShlKX1zdGF0aWMgc2lsZW50UHJpbnQoZSl7cmV0dXJuIG5ldyBTaWxlbnRQcmludChlKX1zdGF0aWMgc3RhcGxlKGUpe3JldHVybiBuZXcgU3RhcGxlKGUpfXN0YXRpYyBzdGFydE5vZGUoZSl7cmV0dXJuIG5ldyBTdGFydE5vZGUoZSl9c3RhdGljIHN0YXJ0UGFnZShlKXtyZXR1cm4gbmV3IFN0YXJ0UGFnZShlKX1zdGF0aWMgc3VibWl0Rm9ybWF0KGUpe3JldHVybiBuZXcgU3VibWl0Rm9ybWF0KGUpfXN0YXRpYyBzdWJtaXRVcmwoZSl7cmV0dXJuIG5ldyBTdWJtaXRVcmwoZSl9c3RhdGljIHN1YnNldEJlbG93KGUpe3JldHVybiBuZXcgU3Vic2V0QmVsb3coZSl9c3RhdGljIHN1cHByZXNzQmFubmVyKGUpe3JldHVybiBuZXcgU3VwcHJlc3NCYW5uZXIoZSl9c3RhdGljIHRhZ2dlZChlKXtyZXR1cm4gbmV3IFRhZ2dlZChlKX1zdGF0aWMgdGVtcGxhdGUoZSl7cmV0dXJuIG5ldyBUZW1wbGF0ZShlKX1zdGF0aWMgdGVtcGxhdGVDYWNoZShlKXtyZXR1cm4gbmV3IFRlbXBsYXRlQ2FjaGUoZSl9c3RhdGljIHRocmVzaG9sZChlKXtyZXR1cm4gbmV3IFRocmVzaG9sZChlKX1zdGF0aWMgdG8oZSl7cmV0dXJuIG5ldyBUbyhlKX1zdGF0aWMgdHJhY2UoZSl7cmV0dXJuIG5ldyBUcmFjZShlKX1zdGF0aWMgdHJhbnNmb3JtKGUpe3JldHVybiBuZXcgVHJhbnNmb3JtKGUpfXN0YXRpYyB0eXBlKGUpe3JldHVybiBuZXcgVHlwZShlKX1zdGF0aWMgdXJpKGUpe3JldHVybiBuZXcgVXJpKGUpfXN0YXRpYyB2YWxpZGF0ZShlKXtyZXR1cm4gbmV3IFZhbGlkYXRlKGUpfXN0YXRpYyB2YWxpZGF0ZUFwcHJvdmFsU2lnbmF0dXJlcyhlKXtyZXR1cm4gbmV3IFZhbGlkYXRlQXBwcm92YWxTaWduYXR1cmVzKGUpfXN0YXRpYyB2YWxpZGF0aW9uTWVzc2FnaW5nKGUpe3JldHVybiBuZXcgVmFsaWRhdGlvbk1lc3NhZ2luZyhlKX1zdGF0aWMgdmVyc2lvbihlKXtyZXR1cm4gbmV3IFZlcnNpb24oZSl9c3RhdGljIHZlcnNpb25Db250cm9sKGUpe3JldHVybiBuZXcgVmVyc2lvbkNvbnRyb2woZSl9c3RhdGljIHZpZXdlclByZWZlcmVuY2VzKGUpe3JldHVybiBuZXcgVmlld2VyUHJlZmVyZW5jZXMoZSl9c3RhdGljIHdlYkNsaWVudChlKXtyZXR1cm4gbmV3IFdlYkNsaWVudChlKX1zdGF0aWMgd2hpdGVzcGFjZShlKXtyZXR1cm4gbmV3IFdoaXRlc3BhY2UoZSl9c3RhdGljIHdpbmRvdyhlKXtyZXR1cm4gbmV3IFdpbmRvdyhlKX1zdGF0aWMgeGRjKGUpe3JldHVybiBuZXcgWGRjKGUpfXN0YXRpYyB4ZHAoZSl7cmV0dXJuIG5ldyBYZHAoZSl9c3RhdGljIHhzbChlKXtyZXR1cm4gbmV3IFhzbChlKX1zdGF0aWMgenBsKGUpe3JldHVybiBuZXcgWnBsKGUpfX10LkNvbmZpZ05hbWVzcGFjZT1Db25maWdOYW1lc3BhY2V9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5Db25uZWN0aW9uU2V0TmFtZXNwYWNlPXZvaWQgMDt2YXIgcj1hKDgxKSxuPWEoODcpO2NvbnN0IGk9ci5OYW1lc3BhY2VJZHMuY29ubmVjdGlvblNldC5pZDtjbGFzcyBDb25uZWN0aW9uU2V0IGV4dGVuZHMgbi5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoaSwiY29ubmVjdGlvblNldCIsITApO3RoaXMud3NkbENvbm5lY3Rpb249bmV3IG4uWEZBT2JqZWN0QXJyYXk7dGhpcy54bWxDb25uZWN0aW9uPW5ldyBuLlhGQU9iamVjdEFycmF5O3RoaXMueHNkQ29ubmVjdGlvbj1uZXcgbi5YRkFPYmplY3RBcnJheX19Y2xhc3MgRWZmZWN0aXZlSW5wdXRQb2xpY3kgZXh0ZW5kcyBuLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihpLCJlZmZlY3RpdmVJbnB1dFBvbGljeSIpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifX1jbGFzcyBFZmZlY3RpdmVPdXRwdXRQb2xpY3kgZXh0ZW5kcyBuLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihpLCJlZmZlY3RpdmVPdXRwdXRQb2xpY3kiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgT3BlcmF0aW9uIGV4dGVuZHMgbi5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoaSwib3BlcmF0aW9uIik7dGhpcy5pZD1lLmlkfHwiIjt0aGlzLmlucHV0PWUuaW5wdXR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMub3V0cHV0PWUub3V0cHV0fHwiIjt0aGlzLnVzZT1lLnVzZXx8IiI7dGhpcy51c2VocmVmPWUudXNlaHJlZnx8IiJ9fWNsYXNzIFJvb3RFbGVtZW50IGV4dGVuZHMgbi5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoaSwicm9vdEVsZW1lbnQiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgU29hcEFjdGlvbiBleHRlbmRzIG4uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGksInNvYXBBY3Rpb24iKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgU29hcEFkZHJlc3MgZXh0ZW5kcyBuLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihpLCJzb2FwQWRkcmVzcyIpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifX1jbGFzcyBVcmkgZXh0ZW5kcyBuLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihpLCJ1cmkiKTt0aGlzLmlkPWUuaWR8fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMudXNlPWUudXNlfHwiIjt0aGlzLnVzZWhyZWY9ZS51c2VocmVmfHwiIn19Y2xhc3MgV3NkbEFkZHJlc3MgZXh0ZW5kcyBuLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihpLCJ3c2RsQWRkcmVzcyIpO3RoaXMuaWQ9ZS5pZHx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51c2U9ZS51c2V8fCIiO3RoaXMudXNlaHJlZj1lLnVzZWhyZWZ8fCIifX1jbGFzcyBXc2RsQ29ubmVjdGlvbiBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGksIndzZGxDb25uZWN0aW9uIiwhMCk7dGhpcy5kYXRhRGVzY3JpcHRpb249ZS5kYXRhRGVzY3JpcHRpb258fCIiO3RoaXMubmFtZT1lLm5hbWV8fCIiO3RoaXMuZWZmZWN0aXZlSW5wdXRQb2xpY3k9bnVsbDt0aGlzLmVmZmVjdGl2ZU91dHB1dFBvbGljeT1udWxsO3RoaXMub3BlcmF0aW9uPW51bGw7dGhpcy5zb2FwQWN0aW9uPW51bGw7dGhpcy5zb2FwQWRkcmVzcz1udWxsO3RoaXMud3NkbEFkZHJlc3M9bnVsbH19Y2xhc3MgWG1sQ29ubmVjdGlvbiBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGksInhtbENvbm5lY3Rpb24iLCEwKTt0aGlzLmRhdGFEZXNjcmlwdGlvbj1lLmRhdGFEZXNjcmlwdGlvbnx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy51cmk9bnVsbH19Y2xhc3MgWHNkQ29ubmVjdGlvbiBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGksInhzZENvbm5lY3Rpb24iLCEwKTt0aGlzLmRhdGFEZXNjcmlwdGlvbj1lLmRhdGFEZXNjcmlwdGlvbnx8IiI7dGhpcy5uYW1lPWUubmFtZXx8IiI7dGhpcy5yb290RWxlbWVudD1udWxsO3RoaXMudXJpPW51bGx9fWNsYXNzIENvbm5lY3Rpb25TZXROYW1lc3BhY2V7c3RhdGljW3IuJGJ1aWxkWEZBT2JqZWN0XShlLHQpe2lmKENvbm5lY3Rpb25TZXROYW1lc3BhY2UuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIENvbm5lY3Rpb25TZXROYW1lc3BhY2VbZV0odCl9c3RhdGljIGNvbm5lY3Rpb25TZXQoZSl7cmV0dXJuIG5ldyBDb25uZWN0aW9uU2V0KGUpfXN0YXRpYyBlZmZlY3RpdmVJbnB1dFBvbGljeShlKXtyZXR1cm4gbmV3IEVmZmVjdGl2ZUlucHV0UG9saWN5KGUpfXN0YXRpYyBlZmZlY3RpdmVPdXRwdXRQb2xpY3koZSl7cmV0dXJuIG5ldyBFZmZlY3RpdmVPdXRwdXRQb2xpY3koZSl9c3RhdGljIG9wZXJhdGlvbihlKXtyZXR1cm4gbmV3IE9wZXJhdGlvbihlKX1zdGF0aWMgcm9vdEVsZW1lbnQoZSl7cmV0dXJuIG5ldyBSb290RWxlbWVudChlKX1zdGF0aWMgc29hcEFjdGlvbihlKXtyZXR1cm4gbmV3IFNvYXBBY3Rpb24oZSl9c3RhdGljIHNvYXBBZGRyZXNzKGUpe3JldHVybiBuZXcgU29hcEFkZHJlc3MoZSl9c3RhdGljIHVyaShlKXtyZXR1cm4gbmV3IFVyaShlKX1zdGF0aWMgd3NkbEFkZHJlc3MoZSl7cmV0dXJuIG5ldyBXc2RsQWRkcmVzcyhlKX1zdGF0aWMgd3NkbENvbm5lY3Rpb24oZSl7cmV0dXJuIG5ldyBXc2RsQ29ubmVjdGlvbihlKX1zdGF0aWMgeG1sQ29ubmVjdGlvbihlKXtyZXR1cm4gbmV3IFhtbENvbm5lY3Rpb24oZSl9c3RhdGljIHhzZENvbm5lY3Rpb24oZSl7cmV0dXJuIG5ldyBYc2RDb25uZWN0aW9uKGUpfX10LkNvbm5lY3Rpb25TZXROYW1lc3BhY2U9Q29ubmVjdGlvblNldE5hbWVzcGFjZX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkRhdGFzZXRzTmFtZXNwYWNlPXZvaWQgMDt2YXIgcj1hKDc4KSxuPWEoODEpLGk9YSg4Nyk7Y29uc3Qgcz1uLk5hbWVzcGFjZUlkcy5kYXRhc2V0cy5pZDtjbGFzcyBEYXRhIGV4dGVuZHMgaS5YbWxPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIocywiZGF0YSIsZSl9W3IuJGlzTnNBZ25vc3RpY10oKXtyZXR1cm4hMH19Y2xhc3MgRGF0YXNldHMgZXh0ZW5kcyBpLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihzLCJkYXRhc2V0cyIsITApO3RoaXMuZGF0YT1udWxsO3RoaXMuU2lnbmF0dXJlPW51bGx9W3IuJG9uQ2hpbGRdKGUpe2NvbnN0IHQ9ZVtyLiRub2RlTmFtZV07KCJkYXRhIj09PXQmJmVbci4kbmFtZXNwYWNlSWRdPT09c3x8IlNpZ25hdHVyZSI9PT10JiZlW3IuJG5hbWVzcGFjZUlkXT09PW4uTmFtZXNwYWNlSWRzLnNpZ25hdHVyZS5pZCkmJih0aGlzW3RdPWUpO3RoaXNbci4kYXBwZW5kQ2hpbGRdKGUpfX1jbGFzcyBEYXRhc2V0c05hbWVzcGFjZXtzdGF0aWNbbi4kYnVpbGRYRkFPYmplY3RdKGUsdCl7aWYoRGF0YXNldHNOYW1lc3BhY2UuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIERhdGFzZXRzTmFtZXNwYWNlW2VdKHQpfXN0YXRpYyBkYXRhc2V0cyhlKXtyZXR1cm4gbmV3IERhdGFzZXRzKGUpfXN0YXRpYyBkYXRhKGUpe3JldHVybiBuZXcgRGF0YShlKX19dC5EYXRhc2V0c05hbWVzcGFjZT1EYXRhc2V0c05hbWVzcGFjZX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LkxvY2FsZVNldE5hbWVzcGFjZT12b2lkIDA7dmFyIHI9YSg4MSksbj1hKDg3KSxpPWEoODQpO2NvbnN0IHM9ci5OYW1lc3BhY2VJZHMubG9jYWxlU2V0LmlkO2NsYXNzIENhbGVuZGFyU3ltYm9scyBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsImNhbGVuZGFyU3ltYm9scyIsITApO3RoaXMubmFtZT0iZ3JlZ29yaWFuIjt0aGlzLmRheU5hbWVzPW5ldyBuLlhGQU9iamVjdEFycmF5KDIpO3RoaXMuZXJhTmFtZXM9bnVsbDt0aGlzLm1lcmlkaWVtTmFtZXM9bnVsbDt0aGlzLm1vbnRoTmFtZXM9bmV3IG4uWEZBT2JqZWN0QXJyYXkoMil9fWNsYXNzIEN1cnJlbmN5U3ltYm9sIGV4dGVuZHMgbi5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIocywiY3VycmVuY3lTeW1ib2wiKTt0aGlzLm5hbWU9KDAsaS5nZXRTdHJpbmdPcHRpb24pKGUubmFtZSxbInN5bWJvbCIsImlzb25hbWUiLCJkZWNpbWFsIl0pfX1jbGFzcyBDdXJyZW5jeVN5bWJvbHMgZXh0ZW5kcyBuLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihzLCJjdXJyZW5jeVN5bWJvbHMiLCEwKTt0aGlzLmN1cnJlbmN5U3ltYm9sPW5ldyBuLlhGQU9iamVjdEFycmF5KDMpfX1jbGFzcyBEYXRlUGF0dGVybiBleHRlbmRzIG4uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsImRhdGVQYXR0ZXJuIik7dGhpcy5uYW1lPSgwLGkuZ2V0U3RyaW5nT3B0aW9uKShlLm5hbWUsWyJmdWxsIiwibG9uZyIsIm1lZCIsInNob3J0Il0pfX1jbGFzcyBEYXRlUGF0dGVybnMgZXh0ZW5kcyBuLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihzLCJkYXRlUGF0dGVybnMiLCEwKTt0aGlzLmRhdGVQYXR0ZXJuPW5ldyBuLlhGQU9iamVjdEFycmF5KDQpfX1jbGFzcyBEYXRlVGltZVN5bWJvbHMgZXh0ZW5kcyBuLkNvbnRlbnRPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIocywiZGF0ZVRpbWVTeW1ib2xzIil9fWNsYXNzIERheSBleHRlbmRzIG4uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsImRheSIpfX1jbGFzcyBEYXlOYW1lcyBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsImRheU5hbWVzIiwhMCk7dGhpcy5hYmJyPSgwLGkuZ2V0SW50ZWdlcikoe2RhdGE6ZS5hYmJyLGRlZmF1bHRWYWx1ZTowLHZhbGlkYXRlOmU9PjE9PT1lfSk7dGhpcy5kYXk9bmV3IG4uWEZBT2JqZWN0QXJyYXkoNyl9fWNsYXNzIEVyYSBleHRlbmRzIG4uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsImVyYSIpfX1jbGFzcyBFcmFOYW1lcyBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsImVyYU5hbWVzIiwhMCk7dGhpcy5lcmE9bmV3IG4uWEZBT2JqZWN0QXJyYXkoMil9fWNsYXNzIExvY2FsZSBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsImxvY2FsZSIsITApO3RoaXMuZGVzYz1lLmRlc2N8fCIiO3RoaXMubmFtZT0iaXNvbmFtZSI7dGhpcy5jYWxlbmRhclN5bWJvbHM9bnVsbDt0aGlzLmN1cnJlbmN5U3ltYm9scz1udWxsO3RoaXMuZGF0ZVBhdHRlcm5zPW51bGw7dGhpcy5kYXRlVGltZVN5bWJvbHM9bnVsbDt0aGlzLm51bWJlclBhdHRlcm5zPW51bGw7dGhpcy5udW1iZXJTeW1ib2xzPW51bGw7dGhpcy50aW1lUGF0dGVybnM9bnVsbDt0aGlzLnR5cGVGYWNlcz1udWxsfX1jbGFzcyBMb2NhbGVTZXQgZXh0ZW5kcyBuLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihzLCJsb2NhbGVTZXQiLCEwKTt0aGlzLmxvY2FsZT1uZXcgbi5YRkFPYmplY3RBcnJheX19Y2xhc3MgTWVyaWRpZW0gZXh0ZW5kcyBuLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihzLCJtZXJpZGllbSIpfX1jbGFzcyBNZXJpZGllbU5hbWVzIGV4dGVuZHMgbi5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIocywibWVyaWRpZW1OYW1lcyIsITApO3RoaXMubWVyaWRpZW09bmV3IG4uWEZBT2JqZWN0QXJyYXkoMil9fWNsYXNzIE1vbnRoIGV4dGVuZHMgbi5TdHJpbmdPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIocywibW9udGgiKX19Y2xhc3MgTW9udGhOYW1lcyBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsIm1vbnRoTmFtZXMiLCEwKTt0aGlzLmFiYnI9KDAsaS5nZXRJbnRlZ2VyKSh7ZGF0YTplLmFiYnIsZGVmYXVsdFZhbHVlOjAsdmFsaWRhdGU6ZT0+MT09PWV9KTt0aGlzLm1vbnRoPW5ldyBuLlhGQU9iamVjdEFycmF5KDEyKX19Y2xhc3MgTnVtYmVyUGF0dGVybiBleHRlbmRzIG4uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsIm51bWJlclBhdHRlcm4iKTt0aGlzLm5hbWU9KDAsaS5nZXRTdHJpbmdPcHRpb24pKGUubmFtZSxbImZ1bGwiLCJsb25nIiwibWVkIiwic2hvcnQiXSl9fWNsYXNzIE51bWJlclBhdHRlcm5zIGV4dGVuZHMgbi5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIocywibnVtYmVyUGF0dGVybnMiLCEwKTt0aGlzLm51bWJlclBhdHRlcm49bmV3IG4uWEZBT2JqZWN0QXJyYXkoNCl9fWNsYXNzIE51bWJlclN5bWJvbCBleHRlbmRzIG4uU3RyaW5nT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsIm51bWJlclN5bWJvbCIpO3RoaXMubmFtZT0oMCxpLmdldFN0cmluZ09wdGlvbikoZS5uYW1lLFsiZGVjaW1hbCIsImdyb3VwaW5nIiwicGVyY2VudCIsIm1pbnVzIiwiemVybyJdKX19Y2xhc3MgTnVtYmVyU3ltYm9scyBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsIm51bWJlclN5bWJvbHMiLCEwKTt0aGlzLm51bWJlclN5bWJvbD1uZXcgbi5YRkFPYmplY3RBcnJheSg1KX19Y2xhc3MgVGltZVBhdHRlcm4gZXh0ZW5kcyBuLlN0cmluZ09iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihzLCJ0aW1lUGF0dGVybiIpO3RoaXMubmFtZT0oMCxpLmdldFN0cmluZ09wdGlvbikoZS5uYW1lLFsiZnVsbCIsImxvbmciLCJtZWQiLCJzaG9ydCJdKX19Y2xhc3MgVGltZVBhdHRlcm5zIGV4dGVuZHMgbi5YRkFPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIocywidGltZVBhdHRlcm5zIiwhMCk7dGhpcy50aW1lUGF0dGVybj1uZXcgbi5YRkFPYmplY3RBcnJheSg0KX19Y2xhc3MgVHlwZUZhY2UgZXh0ZW5kcyBuLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihzLCJ0eXBlRmFjZSIsITApO3RoaXMubmFtZT0iInxlLm5hbWV9fWNsYXNzIFR5cGVGYWNlcyBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsInR5cGVGYWNlcyIsITApO3RoaXMudHlwZUZhY2U9bmV3IG4uWEZBT2JqZWN0QXJyYXl9fWNsYXNzIExvY2FsZVNldE5hbWVzcGFjZXtzdGF0aWNbci4kYnVpbGRYRkFPYmplY3RdKGUsdCl7aWYoTG9jYWxlU2V0TmFtZXNwYWNlLmhhc093blByb3BlcnR5KGUpKXJldHVybiBMb2NhbGVTZXROYW1lc3BhY2VbZV0odCl9c3RhdGljIGNhbGVuZGFyU3ltYm9scyhlKXtyZXR1cm4gbmV3IENhbGVuZGFyU3ltYm9scyhlKX1zdGF0aWMgY3VycmVuY3lTeW1ib2woZSl7cmV0dXJuIG5ldyBDdXJyZW5jeVN5bWJvbChlKX1zdGF0aWMgY3VycmVuY3lTeW1ib2xzKGUpe3JldHVybiBuZXcgQ3VycmVuY3lTeW1ib2xzKGUpfXN0YXRpYyBkYXRlUGF0dGVybihlKXtyZXR1cm4gbmV3IERhdGVQYXR0ZXJuKGUpfXN0YXRpYyBkYXRlUGF0dGVybnMoZSl7cmV0dXJuIG5ldyBEYXRlUGF0dGVybnMoZSl9c3RhdGljIGRhdGVUaW1lU3ltYm9scyhlKXtyZXR1cm4gbmV3IERhdGVUaW1lU3ltYm9scyhlKX1zdGF0aWMgZGF5KGUpe3JldHVybiBuZXcgRGF5KGUpfXN0YXRpYyBkYXlOYW1lcyhlKXtyZXR1cm4gbmV3IERheU5hbWVzKGUpfXN0YXRpYyBlcmEoZSl7cmV0dXJuIG5ldyBFcmEoZSl9c3RhdGljIGVyYU5hbWVzKGUpe3JldHVybiBuZXcgRXJhTmFtZXMoZSl9c3RhdGljIGxvY2FsZShlKXtyZXR1cm4gbmV3IExvY2FsZShlKX1zdGF0aWMgbG9jYWxlU2V0KGUpe3JldHVybiBuZXcgTG9jYWxlU2V0KGUpfXN0YXRpYyBtZXJpZGllbShlKXtyZXR1cm4gbmV3IE1lcmlkaWVtKGUpfXN0YXRpYyBtZXJpZGllbU5hbWVzKGUpe3JldHVybiBuZXcgTWVyaWRpZW1OYW1lcyhlKX1zdGF0aWMgbW9udGgoZSl7cmV0dXJuIG5ldyBNb250aChlKX1zdGF0aWMgbW9udGhOYW1lcyhlKXtyZXR1cm4gbmV3IE1vbnRoTmFtZXMoZSl9c3RhdGljIG51bWJlclBhdHRlcm4oZSl7cmV0dXJuIG5ldyBOdW1iZXJQYXR0ZXJuKGUpfXN0YXRpYyBudW1iZXJQYXR0ZXJucyhlKXtyZXR1cm4gbmV3IE51bWJlclBhdHRlcm5zKGUpfXN0YXRpYyBudW1iZXJTeW1ib2woZSl7cmV0dXJuIG5ldyBOdW1iZXJTeW1ib2woZSl9c3RhdGljIG51bWJlclN5bWJvbHMoZSl7cmV0dXJuIG5ldyBOdW1iZXJTeW1ib2xzKGUpfXN0YXRpYyB0aW1lUGF0dGVybihlKXtyZXR1cm4gbmV3IFRpbWVQYXR0ZXJuKGUpfXN0YXRpYyB0aW1lUGF0dGVybnMoZSl7cmV0dXJuIG5ldyBUaW1lUGF0dGVybnMoZSl9c3RhdGljIHR5cGVGYWNlKGUpe3JldHVybiBuZXcgVHlwZUZhY2UoZSl9c3RhdGljIHR5cGVGYWNlcyhlKXtyZXR1cm4gbmV3IFR5cGVGYWNlcyhlKX19dC5Mb2NhbGVTZXROYW1lc3BhY2U9TG9jYWxlU2V0TmFtZXNwYWNlfSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuU2lnbmF0dXJlTmFtZXNwYWNlPXZvaWQgMDt2YXIgcj1hKDgxKSxuPWEoODcpO2NvbnN0IGk9ci5OYW1lc3BhY2VJZHMuc2lnbmF0dXJlLmlkO2NsYXNzIFNpZ25hdHVyZSBleHRlbmRzIG4uWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGksInNpZ25hdHVyZSIsITApfX1jbGFzcyBTaWduYXR1cmVOYW1lc3BhY2V7c3RhdGljW3IuJGJ1aWxkWEZBT2JqZWN0XShlLHQpe2lmKFNpZ25hdHVyZU5hbWVzcGFjZS5oYXNPd25Qcm9wZXJ0eShlKSlyZXR1cm4gU2lnbmF0dXJlTmFtZXNwYWNlW2VdKHQpfXN0YXRpYyBzaWduYXR1cmUoZSl7cmV0dXJuIG5ldyBTaWduYXR1cmUoZSl9fXQuU2lnbmF0dXJlTmFtZXNwYWNlPVNpZ25hdHVyZU5hbWVzcGFjZX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlN0eWxlc2hlZXROYW1lc3BhY2U9dm9pZCAwO3ZhciByPWEoODEpLG49YSg4Nyk7Y29uc3QgaT1yLk5hbWVzcGFjZUlkcy5zdHlsZXNoZWV0LmlkO2NsYXNzIFN0eWxlc2hlZXQgZXh0ZW5kcyBuLlhGQU9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihpLCJzdHlsZXNoZWV0IiwhMCl9fWNsYXNzIFN0eWxlc2hlZXROYW1lc3BhY2V7c3RhdGljW3IuJGJ1aWxkWEZBT2JqZWN0XShlLHQpe2lmKFN0eWxlc2hlZXROYW1lc3BhY2UuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIFN0eWxlc2hlZXROYW1lc3BhY2VbZV0odCl9c3RhdGljIHN0eWxlc2hlZXQoZSl7cmV0dXJuIG5ldyBTdHlsZXNoZWV0KGUpfX10LlN0eWxlc2hlZXROYW1lc3BhY2U9U3R5bGVzaGVldE5hbWVzcGFjZX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlhkcE5hbWVzcGFjZT12b2lkIDA7dmFyIHI9YSg4MSksbj1hKDc4KSxpPWEoODcpO2NvbnN0IHM9ci5OYW1lc3BhY2VJZHMueGRwLmlkO2NsYXNzIFhkcCBleHRlbmRzIGkuWEZBT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKHMsInhkcCIsITApO3RoaXMudXVpZD1lLnV1aWR8fCIiO3RoaXMudGltZVN0YW1wPWUudGltZVN0YW1wfHwiIjt0aGlzLmNvbmZpZz1udWxsO3RoaXMuY29ubmVjdGlvblNldD1udWxsO3RoaXMuZGF0YXNldHM9bnVsbDt0aGlzLmxvY2FsZVNldD1udWxsO3RoaXMuc3R5bGVzaGVldD1uZXcgaS5YRkFPYmplY3RBcnJheTt0aGlzLnRlbXBsYXRlPW51bGx9W24uJG9uQ2hpbGRDaGVja10oZSl7Y29uc3QgdD1yLk5hbWVzcGFjZUlkc1tlW24uJG5vZGVOYW1lXV07cmV0dXJuIHQmJmVbbi4kbmFtZXNwYWNlSWRdPT09dC5pZH19Y2xhc3MgWGRwTmFtZXNwYWNle3N0YXRpY1tyLiRidWlsZFhGQU9iamVjdF0oZSx0KXtpZihYZHBOYW1lc3BhY2UuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIFhkcE5hbWVzcGFjZVtlXSh0KX1zdGF0aWMgeGRwKGUpe3JldHVybiBuZXcgWGRwKGUpfX10LlhkcE5hbWVzcGFjZT1YZHBOYW1lc3BhY2V9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5YaHRtbE5hbWVzcGFjZT12b2lkIDA7dmFyIHI9YSg3OCksbj1hKDgxKSxpPWEoODMpLHM9YSg4NCksbz1hKDg3KTtjb25zdCBjPW4uTmFtZXNwYWNlSWRzLnhodG1sLmlkLGw9U3ltYm9sKCksaD1uZXcgU2V0KFsiY29sb3IiLCJmb250IiwiZm9udC1mYW1pbHkiLCJmb250LXNpemUiLCJmb250LXN0cmV0Y2giLCJmb250LXN0eWxlIiwiZm9udC13ZWlnaHQiLCJtYXJnaW4iLCJtYXJnaW4tYm90dG9tIiwibWFyZ2luLWxlZnQiLCJtYXJnaW4tcmlnaHQiLCJtYXJnaW4tdG9wIiwibGV0dGVyLXNwYWNpbmciLCJsaW5lLWhlaWdodCIsIm9ycGhhbnMiLCJwYWdlLWJyZWFrLWFmdGVyIiwicGFnZS1icmVhay1iZWZvcmUiLCJwYWdlLWJyZWFrLWluc2lkZSIsInRhYi1pbnRlcnZhbCIsInRhYi1zdG9wIiwidGV4dC1hbGlnbiIsInRleHQtZGVjb3JhdGlvbiIsInRleHQtaW5kZW50IiwidmVydGljYWwtYWxpZ24iLCJ3aWRvd3MiLCJrZXJuaW5nLW1vZGUiLCJ4ZmEtZm9udC1ob3Jpem9udGFsLXNjYWxlIiwieGZhLWZvbnQtdmVydGljYWwtc2NhbGUiLCJ4ZmEtc3BhY2VydW4iLCJ4ZmEtdGFiLXN0b3BzIl0pLHU9bmV3IE1hcChbWyJwYWdlLWJyZWFrLWFmdGVyIiwiYnJlYWtBZnRlciJdLFsicGFnZS1icmVhay1iZWZvcmUiLCJicmVha0JlZm9yZSJdLFsicGFnZS1icmVhay1pbnNpZGUiLCJicmVha0luc2lkZSJdLFsia2VybmluZy1tb2RlIixlPT4ibm9uZSI9PT1lPyJub25lIjoibm9ybWFsIl0sWyJ4ZmEtZm9udC1ob3Jpem9udGFsLXNjYWxlIixlPT5gc2NhbGVYKCR7TWF0aC5tYXgoMCxNYXRoLm1pbihwYXJzZUludChlKS8xMDApKS50b0ZpeGVkKDIpfSlgXSxbInhmYS1mb250LXZlcnRpY2FsLXNjYWxlIixlPT5gc2NhbGVZKCR7TWF0aC5tYXgoMCxNYXRoLm1pbihwYXJzZUludChlKS8xMDApKS50b0ZpeGVkKDIpfSlgXSxbInhmYS1zcGFjZXJ1biIsIiJdLFsieGZhLXRhYi1zdG9wcyIsIiJdLFsiZm9udC1zaXplIiwoZSx0KT0+e2U9dC5mb250U2l6ZT0oMCxzLmdldE1lYXN1cmVtZW50KShlKTtyZXR1cm4oMCxpLm1lYXN1cmVUb1N0cmluZykoLjk5KmUpfV0sWyJsZXR0ZXItc3BhY2luZyIsZT0+KDAsaS5tZWFzdXJlVG9TdHJpbmcpKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKGUpKV0sWyJsaW5lLWhlaWdodCIsZT0+KDAsaS5tZWFzdXJlVG9TdHJpbmcpKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKGUpKV0sWyJtYXJnaW4iLGU9PigwLGkubWVhc3VyZVRvU3RyaW5nKSgoMCxzLmdldE1lYXN1cmVtZW50KShlKSldLFsibWFyZ2luLWJvdHRvbSIsZT0+KDAsaS5tZWFzdXJlVG9TdHJpbmcpKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKGUpKV0sWyJtYXJnaW4tbGVmdCIsZT0+KDAsaS5tZWFzdXJlVG9TdHJpbmcpKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKGUpKV0sWyJtYXJnaW4tcmlnaHQiLGU9PigwLGkubWVhc3VyZVRvU3RyaW5nKSgoMCxzLmdldE1lYXN1cmVtZW50KShlKSldLFsibWFyZ2luLXRvcCIsZT0+KDAsaS5tZWFzdXJlVG9TdHJpbmcpKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKGUpKV0sWyJ0ZXh0LWluZGVudCIsZT0+KDAsaS5tZWFzdXJlVG9TdHJpbmcpKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKGUpKV0sWyJmb250LWZhbWlseSIsZT0+ZV0sWyJ2ZXJ0aWNhbC1hbGlnbiIsZT0+KDAsaS5tZWFzdXJlVG9TdHJpbmcpKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKGUpKV1dKSxkPS9ccysvZyxmPS9bXHJcbl0rL2csZz0vXHJcbj8vZztmdW5jdGlvbiBtYXBTdHlsZShlLHQsYSl7Y29uc3Qgbj1PYmplY3QuY3JlYXRlKG51bGwpO2lmKCFlKXJldHVybiBuO2NvbnN0IG89T2JqZWN0LmNyZWF0ZShudWxsKTtmb3IoY29uc3RbdCxhXW9mIGUuc3BsaXQoIjsiKS5tYXAoKGU9PmUuc3BsaXQoIjoiLDIpKSkpe2NvbnN0IGU9dS5nZXQodCk7aWYoIiI9PT1lKWNvbnRpbnVlO2xldCByPWE7ZSYmKHI9InN0cmluZyI9PXR5cGVvZiBlP2U6ZShhLG8pKTt0LmVuZHNXaXRoKCJzY2FsZSIpP24udHJhbnNmb3JtPW4udHJhbnNmb3JtP2Ake25bdF19ICR7cn1gOnI6blt0LnJlcGxhY2VBbGwoLy0oW2EtekEtWl0pL2csKChlLHQpPT50LnRvVXBwZXJDYXNlKCkpKV09cn1uLmZvbnRGYW1pbHkmJigwLGkuc2V0Rm9udEZhbWlseSkoe3R5cGVmYWNlOm4uZm9udEZhbWlseSx3ZWlnaHQ6bi5mb250V2VpZ2h0fHwibm9ybWFsIixwb3N0dXJlOm4uZm9udFN0eWxlfHwibm9ybWFsIixzaXplOm8uZm9udFNpemV8fDB9LHQsdFtyLiRnbG9iYWxEYXRhXS5mb250RmluZGVyLG4pO2lmKGEmJm4udmVydGljYWxBbGlnbiYmIjBweCIhPT1uLnZlcnRpY2FsQWxpZ24mJm4uZm9udFNpemUpe2NvbnN0IGU9LjU4Myx0PS4zMzMsYT0oMCxzLmdldE1lYXN1cmVtZW50KShuLmZvbnRTaXplKTtuLmZvbnRTaXplPSgwLGkubWVhc3VyZVRvU3RyaW5nKShhKmUpO24udmVydGljYWxBbGlnbj0oMCxpLm1lYXN1cmVUb1N0cmluZykoTWF0aC5zaWduKCgwLHMuZ2V0TWVhc3VyZW1lbnQpKG4udmVydGljYWxBbGlnbikpKmEqdCl9YSYmbi5mb250U2l6ZSYmKG4uZm9udFNpemU9YGNhbGMoJHtuLmZvbnRTaXplfSAqIHZhcigtLXNjYWxlLWZhY3RvcikpYCk7KDAsaS5maXhUZXh0SW5kZW50KShuKTtyZXR1cm4gbn1jb25zdCBwPW5ldyBTZXQoWyJib2R5IiwiaHRtbCJdKTtjbGFzcyBYaHRtbE9iamVjdCBleHRlbmRzIG8uWG1sT2JqZWN0e2NvbnN0cnVjdG9yKGUsdCl7c3VwZXIoYyx0KTt0aGlzW2xdPSExO3RoaXMuc3R5bGU9ZS5zdHlsZXx8IiJ9W3IuJGNsZWFuXShlKXtzdXBlcltyLiRjbGVhbl0oZSk7dGhpcy5zdHlsZT1mdW5jdGlvbiBjaGVja1N0eWxlKGUpe3JldHVybiBlLnN0eWxlP2Uuc3R5bGUudHJpbSgpLnNwbGl0KC9ccyo7XHMqLykuZmlsdGVyKChlPT4hIWUpKS5tYXAoKGU9PmUuc3BsaXQoL1xzKjpccyovLDIpKSkuZmlsdGVyKCgoW3QsYV0pPT57ImZvbnQtZmFtaWx5Ij09PXQmJmVbci4kZ2xvYmFsRGF0YV0udXNlZFR5cGVmYWNlcy5hZGQoYSk7cmV0dXJuIGguaGFzKHQpfSkpLm1hcCgoZT0+ZS5qb2luKCI6IikpKS5qb2luKCI7Iik6IiJ9KHRoaXMpfVtyLiRhY2NlcHRXaGl0ZXNwYWNlXSgpe3JldHVybiFwLmhhcyh0aGlzW3IuJG5vZGVOYW1lXSl9W3IuJG9uVGV4dF0oZSx0PSExKXtpZih0KXRoaXNbbF09ITA7ZWxzZXtlPWUucmVwbGFjZUFsbChmLCIiKTt0aGlzLnN0eWxlLmluY2x1ZGVzKCJ4ZmEtc3BhY2VydW46eWVzIil8fChlPWUucmVwbGFjZUFsbChkLCIgIikpfWUmJih0aGlzW3IuJGNvbnRlbnRdKz1lKX1bci4kcHVzaEdseXBoc10oZSx0PSEwKXtjb25zdCBhPU9iamVjdC5jcmVhdGUobnVsbCksbj17dG9wOk5hTixib3R0b206TmFOLGxlZnQ6TmFOLHJpZ2h0Ok5hTn07bGV0IGk9bnVsbDtmb3IoY29uc3RbZSx0XW9mIHRoaXMuc3R5bGUuc3BsaXQoIjsiKS5tYXAoKGU9PmUuc3BsaXQoIjoiLDIpKSkpc3dpdGNoKGUpe2Nhc2UiZm9udC1mYW1pbHkiOmEudHlwZWZhY2U9KDAscy5zdHJpcFF1b3RlcykodCk7YnJlYWs7Y2FzZSJmb250LXNpemUiOmEuc2l6ZT0oMCxzLmdldE1lYXN1cmVtZW50KSh0KTticmVhaztjYXNlImZvbnQtd2VpZ2h0IjphLndlaWdodD10O2JyZWFrO2Nhc2UiZm9udC1zdHlsZSI6YS5wb3N0dXJlPXQ7YnJlYWs7Y2FzZSJsZXR0ZXItc3BhY2luZyI6YS5sZXR0ZXJTcGFjaW5nPSgwLHMuZ2V0TWVhc3VyZW1lbnQpKHQpO2JyZWFrO2Nhc2UibWFyZ2luIjpjb25zdCBlPXQuc3BsaXQoLyBcdC8pLm1hcCgoZT0+KDAscy5nZXRNZWFzdXJlbWVudCkoZSkpKTtzd2l0Y2goZS5sZW5ndGgpe2Nhc2UgMTpuLnRvcD1uLmJvdHRvbT1uLmxlZnQ9bi5yaWdodD1lWzBdO2JyZWFrO2Nhc2UgMjpuLnRvcD1uLmJvdHRvbT1lWzBdO24ubGVmdD1uLnJpZ2h0PWVbMV07YnJlYWs7Y2FzZSAzOm4udG9wPWVbMF07bi5ib3R0b209ZVsyXTtuLmxlZnQ9bi5yaWdodD1lWzFdO2JyZWFrO2Nhc2UgNDpuLnRvcD1lWzBdO24ubGVmdD1lWzFdO24uYm90dG9tPWVbMl07bi5yaWdodD1lWzNdfWJyZWFrO2Nhc2UibWFyZ2luLXRvcCI6bi50b3A9KDAscy5nZXRNZWFzdXJlbWVudCkodCk7YnJlYWs7Y2FzZSJtYXJnaW4tYm90dG9tIjpuLmJvdHRvbT0oMCxzLmdldE1lYXN1cmVtZW50KSh0KTticmVhaztjYXNlIm1hcmdpbi1sZWZ0IjpuLmxlZnQ9KDAscy5nZXRNZWFzdXJlbWVudCkodCk7YnJlYWs7Y2FzZSJtYXJnaW4tcmlnaHQiOm4ucmlnaHQ9KDAscy5nZXRNZWFzdXJlbWVudCkodCk7YnJlYWs7Y2FzZSJsaW5lLWhlaWdodCI6aT0oMCxzLmdldE1lYXN1cmVtZW50KSh0KX1lLnB1c2hEYXRhKGEsbixpKTtpZih0aGlzW3IuJGNvbnRlbnRdKWUuYWRkU3RyaW5nKHRoaXNbci4kY29udGVudF0pO2Vsc2UgZm9yKGNvbnN0IHQgb2YgdGhpc1tyLiRnZXRDaGlsZHJlbl0oKSkiI3RleHQiIT09dFtyLiRub2RlTmFtZV0/dFtyLiRwdXNoR2x5cGhzXShlKTplLmFkZFN0cmluZyh0W3IuJGNvbnRlbnRdKTt0JiZlLnBvcEZvbnQoKX1bci4kdG9IVE1MXShlKXtjb25zdCB0PVtdO3RoaXNbci4kZXh0cmFdPXtjaGlsZHJlbjp0fTt0aGlzW3IuJGNoaWxkcmVuVG9IVE1MXSh7fSk7aWYoMD09PXQubGVuZ3RoJiYhdGhpc1tyLiRjb250ZW50XSlyZXR1cm4gcy5IVE1MUmVzdWx0LkVNUFRZO2xldCBhO2E9dGhpc1tsXT90aGlzW3IuJGNvbnRlbnRdP3RoaXNbci4kY29udGVudF0ucmVwbGFjZUFsbChnLCJcbiIpOnZvaWQgMDp0aGlzW3IuJGNvbnRlbnRdfHx2b2lkIDA7cmV0dXJuIHMuSFRNTFJlc3VsdC5zdWNjZXNzKHtuYW1lOnRoaXNbci4kbm9kZU5hbWVdLGF0dHJpYnV0ZXM6e2hyZWY6dGhpcy5ocmVmLHN0eWxlOm1hcFN0eWxlKHRoaXMuc3R5bGUsdGhpcyx0aGlzW2xdKX0sY2hpbGRyZW46dCx2YWx1ZTphfSl9fWNsYXNzIEEgZXh0ZW5kcyBYaHRtbE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJhIik7dGhpcy5ocmVmPSgwLGkuZml4VVJMKShlLmhyZWYpfHwiIn19Y2xhc3MgQiBleHRlbmRzIFhodG1sT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsImIiKX1bci4kcHVzaEdseXBoc10oZSl7ZS5wdXNoRm9udCh7d2VpZ2h0OiJib2xkIn0pO3N1cGVyW3IuJHB1c2hHbHlwaHNdKGUpO2UucG9wRm9udCgpfX1jbGFzcyBCb2R5IGV4dGVuZHMgWGh0bWxPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSwiYm9keSIpfVtyLiR0b0hUTUxdKGUpe2NvbnN0IHQ9c3VwZXJbci4kdG9IVE1MXShlKSx7aHRtbDphfT10O2lmKCFhKXJldHVybiBzLkhUTUxSZXN1bHQuRU1QVFk7YS5uYW1lPSJkaXYiO2EuYXR0cmlidXRlcy5jbGFzcz1bInhmYVJpY2giXTtyZXR1cm4gdH19Y2xhc3MgQnIgZXh0ZW5kcyBYaHRtbE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJiciIpfVtyLiR0ZXh0XSgpe3JldHVybiJcbiJ9W3IuJHB1c2hHbHlwaHNdKGUpe2UuYWRkU3RyaW5nKCJcbiIpfVtyLiR0b0hUTUxdKGUpe3JldHVybiBzLkhUTUxSZXN1bHQuc3VjY2Vzcyh7bmFtZToiYnIifSl9fWNsYXNzIEh0bWwgZXh0ZW5kcyBYaHRtbE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJodG1sIil9W3IuJHRvSFRNTF0oZSl7Y29uc3QgdD1bXTt0aGlzW3IuJGV4dHJhXT17Y2hpbGRyZW46dH07dGhpc1tyLiRjaGlsZHJlblRvSFRNTF0oe30pO2lmKDA9PT10Lmxlbmd0aClyZXR1cm4gcy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImRpdiIsYXR0cmlidXRlczp7Y2xhc3M6WyJ4ZmFSaWNoIl0sc3R5bGU6e319LHZhbHVlOnRoaXNbci4kY29udGVudF18fCIifSk7aWYoMT09PXQubGVuZ3RoKXtjb25zdCBlPXRbMF07aWYoZS5hdHRyaWJ1dGVzPy5jbGFzcy5pbmNsdWRlcygieGZhUmljaCIpKXJldHVybiBzLkhUTUxSZXN1bHQuc3VjY2VzcyhlKX1yZXR1cm4gcy5IVE1MUmVzdWx0LnN1Y2Nlc3Moe25hbWU6ImRpdiIsYXR0cmlidXRlczp7Y2xhc3M6WyJ4ZmFSaWNoIl0sc3R5bGU6e319LGNoaWxkcmVuOnR9KX19Y2xhc3MgSSBleHRlbmRzIFhodG1sT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsImkiKX1bci4kcHVzaEdseXBoc10oZSl7ZS5wdXNoRm9udCh7cG9zdHVyZToiaXRhbGljIn0pO3N1cGVyW3IuJHB1c2hHbHlwaHNdKGUpO2UucG9wRm9udCgpfX1jbGFzcyBMaSBleHRlbmRzIFhodG1sT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsImxpIil9fWNsYXNzIE9sIGV4dGVuZHMgWGh0bWxPYmplY3R7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSwib2wiKX19Y2xhc3MgUCBleHRlbmRzIFhodG1sT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsInAiKX1bci4kcHVzaEdseXBoc10oZSl7c3VwZXJbci4kcHVzaEdseXBoc10oZSwhMSk7ZS5hZGRTdHJpbmcoIlxuIik7ZS5hZGRQYXJhKCk7ZS5wb3BGb250KCl9W3IuJHRleHRdKCl7cmV0dXJuIHRoaXNbci4kZ2V0UGFyZW50XSgpW3IuJGdldENoaWxkcmVuXSgpLmF0KC0xKT09PXRoaXM/c3VwZXJbci4kdGV4dF0oKTpzdXBlcltyLiR0ZXh0XSgpKyJcbiJ9fWNsYXNzIFNwYW4gZXh0ZW5kcyBYaHRtbE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJzcGFuIil9fWNsYXNzIFN1YiBleHRlbmRzIFhodG1sT2JqZWN0e2NvbnN0cnVjdG9yKGUpe3N1cGVyKGUsInN1YiIpfX1jbGFzcyBTdXAgZXh0ZW5kcyBYaHRtbE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJzdXAiKX19Y2xhc3MgVWwgZXh0ZW5kcyBYaHRtbE9iamVjdHtjb25zdHJ1Y3RvcihlKXtzdXBlcihlLCJ1bCIpfX1jbGFzcyBYaHRtbE5hbWVzcGFjZXtzdGF0aWNbbi4kYnVpbGRYRkFPYmplY3RdKGUsdCl7aWYoWGh0bWxOYW1lc3BhY2UuaGFzT3duUHJvcGVydHkoZSkpcmV0dXJuIFhodG1sTmFtZXNwYWNlW2VdKHQpfXN0YXRpYyBhKGUpe3JldHVybiBuZXcgQShlKX1zdGF0aWMgYihlKXtyZXR1cm4gbmV3IEIoZSl9c3RhdGljIGJvZHkoZSl7cmV0dXJuIG5ldyBCb2R5KGUpfXN0YXRpYyBicihlKXtyZXR1cm4gbmV3IEJyKGUpfXN0YXRpYyBodG1sKGUpe3JldHVybiBuZXcgSHRtbChlKX1zdGF0aWMgaShlKXtyZXR1cm4gbmV3IEkoZSl9c3RhdGljIGxpKGUpe3JldHVybiBuZXcgTGkoZSl9c3RhdGljIG9sKGUpe3JldHVybiBuZXcgT2woZSl9c3RhdGljIHAoZSl7cmV0dXJuIG5ldyBQKGUpfXN0YXRpYyBzcGFuKGUpe3JldHVybiBuZXcgU3BhbihlKX1zdGF0aWMgc3ViKGUpe3JldHVybiBuZXcgU3ViKGUpfXN0YXRpYyBzdXAoZSl7cmV0dXJuIG5ldyBTdXAoZSl9c3RhdGljIHVsKGUpe3JldHVybiBuZXcgVWwoZSl9fXQuWGh0bWxOYW1lc3BhY2U9WGh0bWxOYW1lc3BhY2V9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5Vbmtub3duTmFtZXNwYWNlPXZvaWQgMDt2YXIgcj1hKDgxKSxuPWEoODcpO2NsYXNzIFVua25vd25OYW1lc3BhY2V7Y29uc3RydWN0b3IoZSl7dGhpcy5uYW1lc3BhY2VJZD1lfVtyLiRidWlsZFhGQU9iamVjdF0oZSx0KXtyZXR1cm4gbmV3IG4uWG1sT2JqZWN0KHRoaXMubmFtZXNwYWNlSWQsZSx0KX19dC5Vbmtub3duTmFtZXNwYWNlPVVua25vd25OYW1lc3BhY2V9LChlLHQsYSk9PntPYmplY3QuZGVmaW5lUHJvcGVydHkodCwiX19lc01vZHVsZSIse3ZhbHVlOiEwfSk7dC5EYXRhc2V0UmVhZGVyPXZvaWQgMDt2YXIgcj1hKDIpLG49YSgzKSxpPWEoNzEpO2Z1bmN0aW9uIGRlY29kZVN0cmluZyhlKXt0cnl7cmV0dXJuKDAsci5zdHJpbmdUb1VURjhTdHJpbmcpKGUpfWNhdGNoKHQpeygwLHIud2FybikoYFVURi04IGRlY29kaW5nIGZhaWxlZDogIiR7dH0iLmApO3JldHVybiBlfX1jbGFzcyBEYXRhc2V0WE1MUGFyc2VyIGV4dGVuZHMgaS5TaW1wbGVYTUxQYXJzZXJ7Y29uc3RydWN0b3IoZSl7c3VwZXIoZSk7dGhpcy5ub2RlPW51bGx9b25FbmRFbGVtZW50KGUpe2NvbnN0IHQ9c3VwZXIub25FbmRFbGVtZW50KGUpO2lmKHQmJiJ4ZmE6ZGF0YXNldHMiPT09ZSl7dGhpcy5ub2RlPXQ7dGhyb3cgbmV3IEVycm9yKCJBYm9ydGluZyBEYXRhc2V0WE1MUGFyc2VyLiIpfX19dC5EYXRhc2V0UmVhZGVyPWNsYXNzIERhdGFzZXRSZWFkZXJ7Y29uc3RydWN0b3IoZSl7aWYoZS5kYXRhc2V0cyl0aGlzLm5vZGU9bmV3IGkuU2ltcGxlWE1MUGFyc2VyKHtoYXNBdHRyaWJ1dGVzOiEwfSkucGFyc2VGcm9tU3RyaW5nKGUuZGF0YXNldHMpLmRvY3VtZW50RWxlbWVudDtlbHNle2NvbnN0IHQ9bmV3IERhdGFzZXRYTUxQYXJzZXIoe2hhc0F0dHJpYnV0ZXM6ITB9KTt0cnl7dC5wYXJzZUZyb21TdHJpbmcoZVsieGRwOnhkcCJdKX1jYXRjaHt9dGhpcy5ub2RlPXQubm9kZX19Z2V0VmFsdWUoZSl7aWYoIXRoaXMubm9kZXx8IWUpcmV0dXJuIiI7Y29uc3QgdD10aGlzLm5vZGUuc2VhcmNoTm9kZSgoMCxuLnBhcnNlWEZBUGF0aCkoZSksMCk7aWYoIXQpcmV0dXJuIiI7Y29uc3QgYT10LmZpcnN0Q2hpbGQ7cmV0dXJuInZhbHVlIj09PWE/Lm5vZGVOYW1lP3QuY2hpbGRyZW4ubWFwKChlPT5kZWNvZGVTdHJpbmcoZS50ZXh0Q29udGVudCkpKTpkZWNvZGVTdHJpbmcodC50ZXh0Q29udGVudCl9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0LlhSZWY9dm9pZCAwO3ZhciByPWEoMiksbj1hKDQpLGk9YSgxNikscz1hKDMpLG89YSg1KSxjPWEoNzQpO3QuWFJlZj1jbGFzcyBYUmVmeyNCPW51bGw7Y29uc3RydWN0b3IoZSx0KXt0aGlzLnN0cmVhbT1lO3RoaXMucGRmTWFuYWdlcj10O3RoaXMuZW50cmllcz1bXTt0aGlzLl94cmVmU3Rtcz1uZXcgU2V0O3RoaXMuX2NhY2hlTWFwPW5ldyBNYXA7dGhpcy5fcGVuZGluZ1JlZnM9bmV3IG4uUmVmU2V0O3RoaXMuX25ld1BlcnNpc3RlbnRSZWZOdW09bnVsbDt0aGlzLl9uZXdUZW1wb3JhcnlSZWZOdW09bnVsbH1nZXROZXdQZXJzaXN0ZW50UmVmKGUpe251bGw9PT10aGlzLl9uZXdQZXJzaXN0ZW50UmVmTnVtJiYodGhpcy5fbmV3UGVyc2lzdGVudFJlZk51bT10aGlzLmVudHJpZXMubGVuZ3RofHwxKTtjb25zdCB0PXRoaXMuX25ld1BlcnNpc3RlbnRSZWZOdW0rKzt0aGlzLl9jYWNoZU1hcC5zZXQodCxlKTtyZXR1cm4gbi5SZWYuZ2V0KHQsMCl9Z2V0TmV3VGVtcG9yYXJ5UmVmKCl7bnVsbD09PXRoaXMuX25ld1RlbXBvcmFyeVJlZk51bSYmKHRoaXMuX25ld1RlbXBvcmFyeVJlZk51bT10aGlzLmVudHJpZXMubGVuZ3RofHwxKTtyZXR1cm4gbi5SZWYuZ2V0KHRoaXMuX25ld1RlbXBvcmFyeVJlZk51bSsrLDApfXJlc2V0TmV3VGVtcG9yYXJ5UmVmKCl7dGhpcy5fbmV3VGVtcG9yYXJ5UmVmTnVtPW51bGx9c2V0U3RhcnRYUmVmKGUpe3RoaXMuc3RhcnRYUmVmUXVldWU9W2VdfXBhcnNlKGU9ITEpe2xldCB0LGEsaTtpZihlKXsoMCxyLndhcm4pKCJJbmRleGluZyBhbGwgUERGIG9iamVjdHMiKTt0PXRoaXMuaW5kZXhPYmplY3RzKCl9ZWxzZSB0PXRoaXMucmVhZFhSZWYoKTt0LmFzc2lnblhyZWYodGhpcyk7dGhpcy50cmFpbGVyPXQ7dHJ5e2E9dC5nZXQoIkVuY3J5cHQiKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2Ygcy5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLHIud2FybikoYFhSZWYucGFyc2UgLSBJbnZhbGlkICJFbmNyeXB0IiByZWZlcmVuY2U6ICIke2V9Ii5gKX1pZihhIGluc3RhbmNlb2Ygbi5EaWN0KXtjb25zdCBlPXQuZ2V0KCJJRCIpLHI9ZT8ubGVuZ3RoP2VbMF06IiI7YS5zdXBwcmVzc0VuY3J5cHRpb249ITA7dGhpcy5lbmNyeXB0PW5ldyBjLkNpcGhlclRyYW5zZm9ybUZhY3RvcnkoYSxyLHRoaXMucGRmTWFuYWdlci5wYXNzd29yZCl9dHJ5e2k9dC5nZXQoIlJvb3QiKX1jYXRjaChlKXtpZihlIGluc3RhbmNlb2Ygcy5NaXNzaW5nRGF0YUV4Y2VwdGlvbil0aHJvdyBlOygwLHIud2FybikoYFhSZWYucGFyc2UgLSBJbnZhbGlkICJSb290IiByZWZlcmVuY2U6ICIke2V9Ii5gKX1pZihpIGluc3RhbmNlb2Ygbi5EaWN0KXRyeXtpZihpLmdldCgiUGFnZXMiKWluc3RhbmNlb2Ygbi5EaWN0KXt0aGlzLnJvb3Q9aTtyZXR1cm59fWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBzLk1pc3NpbmdEYXRhRXhjZXB0aW9uKXRocm93IGU7KDAsci53YXJuKShgWFJlZi5wYXJzZSAtIEludmFsaWQgIlBhZ2VzIiByZWZlcmVuY2U6ICIke2V9Ii5gKX1pZighZSl0aHJvdyBuZXcgcy5YUmVmUGFyc2VFeGNlcHRpb247dGhyb3cgbmV3IHIuSW52YWxpZFBERkV4Y2VwdGlvbigiSW52YWxpZCBSb290IHJlZmVyZW5jZS4iKX1wcm9jZXNzWFJlZlRhYmxlKGUpeyJ0YWJsZVN0YXRlImluIHRoaXN8fCh0aGlzLnRhYmxlU3RhdGU9e2VudHJ5TnVtOjAsc3RyZWFtUG9zOmUubGV4ZXIuc3RyZWFtLnBvcyxwYXJzZXJCdWYxOmUuYnVmMSxwYXJzZXJCdWYyOmUuYnVmMn0pO2NvbnN0IHQ9dGhpcy5yZWFkWFJlZlRhYmxlKGUpO2lmKCEoMCxuLmlzQ21kKSh0LCJ0cmFpbGVyIikpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiB0YWJsZTogY291bGQgbm90IGZpbmQgdHJhaWxlciBkaWN0aW9uYXJ5Iik7bGV0IGE9ZS5nZXRPYmooKTthIGluc3RhbmNlb2Ygbi5EaWN0fHwhYS5kaWN0fHwoYT1hLmRpY3QpO2lmKCEoYSBpbnN0YW5jZW9mIG4uRGljdCkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiB0YWJsZTogY291bGQgbm90IHBhcnNlIHRyYWlsZXIgZGljdGlvbmFyeSIpO2RlbGV0ZSB0aGlzLnRhYmxlU3RhdGU7cmV0dXJuIGF9cmVhZFhSZWZUYWJsZShlKXtjb25zdCB0PWUubGV4ZXIuc3RyZWFtLGE9dGhpcy50YWJsZVN0YXRlO3QucG9zPWEuc3RyZWFtUG9zO2UuYnVmMT1hLnBhcnNlckJ1ZjE7ZS5idWYyPWEucGFyc2VyQnVmMjtsZXQgaTtmb3IoOzspe2lmKCEoImZpcnN0RW50cnlOdW0iaW4gYSl8fCEoImVudHJ5Q291bnQiaW4gYSkpe2lmKCgwLG4uaXNDbWQpKGk9ZS5nZXRPYmooKSwidHJhaWxlciIpKWJyZWFrO2EuZmlyc3RFbnRyeU51bT1pO2EuZW50cnlDb3VudD1lLmdldE9iaigpfWxldCBzPWEuZmlyc3RFbnRyeU51bTtjb25zdCBvPWEuZW50cnlDb3VudDtpZighTnVtYmVyLmlzSW50ZWdlcihzKXx8IU51bWJlci5pc0ludGVnZXIobykpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiB0YWJsZTogd3JvbmcgdHlwZXMgaW4gc3Vic2VjdGlvbiBoZWFkZXIiKTtmb3IobGV0IGk9YS5lbnRyeU51bTtpPG87aSsrKXthLnN0cmVhbVBvcz10LnBvczthLmVudHJ5TnVtPWk7YS5wYXJzZXJCdWYxPWUuYnVmMTthLnBhcnNlckJ1ZjI9ZS5idWYyO2NvbnN0IGM9e307Yy5vZmZzZXQ9ZS5nZXRPYmooKTtjLmdlbj1lLmdldE9iaigpO2NvbnN0IGw9ZS5nZXRPYmooKTtpZihsIGluc3RhbmNlb2Ygbi5DbWQpc3dpdGNoKGwuY21kKXtjYXNlImYiOmMuZnJlZT0hMDticmVhaztjYXNlIm4iOmMudW5jb21wcmVzc2VkPSEwfWlmKCFOdW1iZXIuaXNJbnRlZ2VyKGMub2Zmc2V0KXx8IU51bWJlci5pc0ludGVnZXIoYy5nZW4pfHwhYy5mcmVlJiYhYy51bmNvbXByZXNzZWQpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYEludmFsaWQgZW50cnkgaW4gWFJlZiBzdWJzZWN0aW9uOiAke3N9LCAke299YCk7MD09PWkmJmMuZnJlZSYmMT09PXMmJihzPTApO3RoaXMuZW50cmllc1tpK3NdfHwodGhpcy5lbnRyaWVzW2krc109Yyl9YS5lbnRyeU51bT0wO2Euc3RyZWFtUG9zPXQucG9zO2EucGFyc2VyQnVmMT1lLmJ1ZjE7YS5wYXJzZXJCdWYyPWUuYnVmMjtkZWxldGUgYS5maXJzdEVudHJ5TnVtO2RlbGV0ZSBhLmVudHJ5Q291bnR9aWYodGhpcy5lbnRyaWVzWzBdJiYhdGhpcy5lbnRyaWVzWzBdLmZyZWUpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgWFJlZiB0YWJsZTogdW5leHBlY3RlZCBmaXJzdCBvYmplY3QiKTtyZXR1cm4gaX1wcm9jZXNzWFJlZlN0cmVhbShlKXtpZighKCJzdHJlYW1TdGF0ZSJpbiB0aGlzKSl7Y29uc3QgdD1lLmRpY3QsYT10LmdldCgiVyIpO2xldCByPXQuZ2V0KCJJbmRleCIpO3J8fChyPVswLHQuZ2V0KCJTaXplIildKTt0aGlzLnN0cmVhbVN0YXRlPXtlbnRyeVJhbmdlczpyLGJ5dGVXaWR0aHM6YSxlbnRyeU51bTowLHN0cmVhbVBvczplLnBvc319dGhpcy5yZWFkWFJlZlN0cmVhbShlKTtkZWxldGUgdGhpcy5zdHJlYW1TdGF0ZTtyZXR1cm4gZS5kaWN0fXJlYWRYUmVmU3RyZWFtKGUpe2NvbnN0IHQ9dGhpcy5zdHJlYW1TdGF0ZTtlLnBvcz10LnN0cmVhbVBvcztjb25zdFthLG4saV09dC5ieXRlV2lkdGhzLHM9dC5lbnRyeVJhbmdlcztmb3IoO3MubGVuZ3RoPjA7KXtjb25zdFtvLGNdPXM7aWYoIU51bWJlci5pc0ludGVnZXIobyl8fCFOdW1iZXIuaXNJbnRlZ2VyKGMpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBJbnZhbGlkIFhSZWYgcmFuZ2UgZmllbGRzOiAke299LCAke2N9YCk7aWYoIU51bWJlci5pc0ludGVnZXIoYSl8fCFOdW1iZXIuaXNJbnRlZ2VyKG4pfHwhTnVtYmVyLmlzSW50ZWdlcihpKSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgSW52YWxpZCBYUmVmIGVudHJ5IGZpZWxkcyBsZW5ndGg6ICR7b30sICR7Y31gKTtmb3IobGV0IHM9dC5lbnRyeU51bTtzPGM7KytzKXt0LmVudHJ5TnVtPXM7dC5zdHJlYW1Qb3M9ZS5wb3M7bGV0IGM9MCxsPTAsaD0wO2ZvcihsZXQgdD0wO3Q8YTsrK3Qpe2NvbnN0IHQ9ZS5nZXRCeXRlKCk7aWYoLTE9PT10KXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJJbnZhbGlkIFhSZWYgYnl0ZVdpZHRocyAndHlwZScuIik7Yz1jPDw4fHR9MD09PWEmJihjPTEpO2ZvcihsZXQgdD0wO3Q8bjsrK3Qpe2NvbnN0IHQ9ZS5nZXRCeXRlKCk7aWYoLTE9PT10KXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJJbnZhbGlkIFhSZWYgYnl0ZVdpZHRocyAnb2Zmc2V0Jy4iKTtsPWw8PDh8dH1mb3IobGV0IHQ9MDt0PGk7Kyt0KXtjb25zdCB0PWUuZ2V0Qnl0ZSgpO2lmKC0xPT09dCl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiSW52YWxpZCBYUmVmIGJ5dGVXaWR0aHMgJ2dlbmVyYXRpb24nLiIpO2g9aDw8OHx0fWNvbnN0IHU9e307dS5vZmZzZXQ9bDt1Lmdlbj1oO3N3aXRjaChjKXtjYXNlIDA6dS5mcmVlPSEwO2JyZWFrO2Nhc2UgMTp1LnVuY29tcHJlc3NlZD0hMDticmVhaztjYXNlIDI6YnJlYWs7ZGVmYXVsdDp0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcihgSW52YWxpZCBYUmVmIGVudHJ5IHR5cGU6ICR7Y31gKX10aGlzLmVudHJpZXNbbytzXXx8KHRoaXMuZW50cmllc1tvK3NdPXUpfXQuZW50cnlOdW09MDt0LnN0cmVhbVBvcz1lLnBvcztzLnNwbGljZSgwLDIpfX1pbmRleE9iamVjdHMoKXtmdW5jdGlvbiByZWFkVG9rZW4oZSx0KXtsZXQgYT0iIixyPWVbdF07Zm9yKDsxMCE9PXImJjEzIT09ciYmNjAhPT1yJiYhKCsrdD49ZS5sZW5ndGgpOyl7YSs9U3RyaW5nLmZyb21DaGFyQ29kZShyKTtyPWVbdF19cmV0dXJuIGF9ZnVuY3Rpb24gc2tpcFVudGlsKGUsdCxhKXtjb25zdCByPWEubGVuZ3RoLG49ZS5sZW5ndGg7bGV0IGk9MDtmb3IoO3Q8bjspe2xldCBuPTA7Zm9yKDtuPHImJmVbdCtuXT09PWFbbl07KSsrbjtpZihuPj1yKWJyZWFrO3QrKztpKyt9cmV0dXJuIGl9Y29uc3QgZT0vXGIoZW5kb2JqfFxkK1xzK1xkK1xzK29ianx4cmVmfHRyYWlsZXJccyo8PClcYi9nLHQ9L1xiKHN0YXJ0eHJlZnxcZCtccytcZCtccytvYmopXGIvZyxhPS9eKFxkKylccysoXGQrKVxzK29ialxiLyxvPW5ldyBVaW50OEFycmF5KFsxMTYsMTE0LDk3LDEwNSwxMDgsMTAxLDExNF0pLGM9bmV3IFVpbnQ4QXJyYXkoWzExNSwxMTYsOTcsMTE0LDExNiwxMjAsMTE0LDEwMSwxMDJdKSxsPW5ldyBVaW50OEFycmF5KFs0Nyw4OCw4MiwxMDEsMTAyXSk7dGhpcy5lbnRyaWVzLmxlbmd0aD0wO3RoaXMuX2NhY2hlTWFwLmNsZWFyKCk7Y29uc3QgaD10aGlzLnN0cmVhbTtoLnBvcz0wO2NvbnN0IHU9aC5nZXRCeXRlcygpLGQ9KDAsci5ieXRlc1RvU3RyaW5nKSh1KSxmPXUubGVuZ3RoO2xldCBnPWguc3RhcnQ7Y29uc3QgcD1bXSxtPVtdO2Zvcig7ZzxmOyl7bGV0IG49dVtnXTtpZig5PT09bnx8MTA9PT1ufHwxMz09PW58fDMyPT09bil7KytnO2NvbnRpbnVlfWlmKDM3PT09bil7ZG97KytnO2lmKGc+PWYpYnJlYWs7bj11W2ddfXdoaWxlKDEwIT09biYmMTMhPT1uKTtjb250aW51ZX1jb25zdCBiPXJlYWRUb2tlbih1LGcpO2xldCB5O2lmKGIuc3RhcnRzV2l0aCgieHJlZiIpJiYoND09PWIubGVuZ3RofHwvXHMvLnRlc3QoYls0XSkpKXtnKz1za2lwVW50aWwodSxnLG8pO3AucHVzaChnKTtnKz1za2lwVW50aWwodSxnLGMpfWVsc2UgaWYoeT1hLmV4ZWMoYikpe2NvbnN0IHQ9MHx5WzFdLGE9MHx5WzJdLG49ZytiLmxlbmd0aDtsZXQgbyxjPSExO2lmKHRoaXMuZW50cmllc1t0XSl7aWYodGhpcy5lbnRyaWVzW3RdLmdlbj09PWEpdHJ5e25ldyBpLlBhcnNlcih7bGV4ZXI6bmV3IGkuTGV4ZXIoaC5tYWtlU3ViU3RyZWFtKG4pKX0pLmdldE9iaigpO2M9ITB9Y2F0Y2goZSl7ZSBpbnN0YW5jZW9mIHMuUGFyc2VyRU9GRXhjZXB0aW9uPygwLHIud2FybikoYGluZGV4T2JqZWN0cyAtLSBjaGVja2luZyBvYmplY3QgKCR7Yn0pOiAiJHtlfSIuYCk6Yz0hMH19ZWxzZSBjPSEwO2MmJih0aGlzLmVudHJpZXNbdF09e29mZnNldDpnLWguc3RhcnQsZ2VuOmEsdW5jb21wcmVzc2VkOiEwfSk7ZS5sYXN0SW5kZXg9bjtjb25zdCBwPWUuZXhlYyhkKTtpZihwKXtvPWUubGFzdEluZGV4KzEtZztpZigiZW5kb2JqIiE9PXBbMV0peygwLHIud2FybikoYGluZGV4T2JqZWN0czogRm91bmQgIiR7cFsxXX0iIGluc2lkZSBvZiBhbm90aGVyICJvYmoiLCBjYXVzZWQgYnkgbWlzc2luZyAiZW5kb2JqIiAtLSB0cnlpbmcgdG8gcmVjb3Zlci5gKTtvLT1wWzFdLmxlbmd0aCsxfX1lbHNlIG89Zi1nO2NvbnN0IHc9dS5zdWJhcnJheShnLGcrbyksUz1za2lwVW50aWwodywwLGwpO2lmKFM8byYmd1tTKzVdPDY0KXttLnB1c2goZy1oLnN0YXJ0KTt0aGlzLl94cmVmU3Rtcy5hZGQoZy1oLnN0YXJ0KX1nKz1vfWVsc2UgaWYoYi5zdGFydHNXaXRoKCJ0cmFpbGVyIikmJig3PT09Yi5sZW5ndGh8fC9ccy8udGVzdChiWzddKSkpe3AucHVzaChnKTtjb25zdCBlPWcrYi5sZW5ndGg7bGV0IGE7dC5sYXN0SW5kZXg9ZTtjb25zdCBuPXQuZXhlYyhkKTtpZihuKXthPXQubGFzdEluZGV4KzEtZztpZigic3RhcnR4cmVmIiE9PW5bMV0peygwLHIud2FybikoYGluZGV4T2JqZWN0czogRm91bmQgIiR7blsxXX0iIGFmdGVyICJ0cmFpbGVyIiwgY2F1c2VkIGJ5IG1pc3NpbmcgInN0YXJ0eHJlZiIgLS0gdHJ5aW5nIHRvIHJlY292ZXIuYCk7YS09blsxXS5sZW5ndGgrMX19ZWxzZSBhPWYtZztnKz1hfWVsc2UgZys9Yi5sZW5ndGgrMX1mb3IoY29uc3QgZSBvZiBtKXt0aGlzLnN0YXJ0WFJlZlF1ZXVlLnB1c2goZSk7dGhpcy5yZWFkWFJlZighMCl9Y29uc3QgYj1bXTtsZXQgeSx3LFM9ITE7Zm9yKGNvbnN0IGUgb2YgcCl7aC5wb3M9ZTtjb25zdCB0PW5ldyBpLlBhcnNlcih7bGV4ZXI6bmV3IGkuTGV4ZXIoaCkseHJlZjp0aGlzLGFsbG93U3RyZWFtczohMCxyZWNvdmVyeU1vZGU6ITB9KSxhPXQuZ2V0T2JqKCk7aWYoISgwLG4uaXNDbWQpKGEsInRyYWlsZXIiKSljb250aW51ZTtjb25zdCByPXQuZ2V0T2JqKCk7aWYociBpbnN0YW5jZW9mIG4uRGljdCl7Yi5wdXNoKHIpO3IuaGFzKCJFbmNyeXB0IikmJihTPSEwKX19Zm9yKGNvbnN0IGUgb2ZbLi4uYiwiZ2VuRmFsbGJhY2siLC4uLmJdKXtpZigiZ2VuRmFsbGJhY2siPT09ZSl7aWYoIXcpYnJlYWs7dGhpcy5fZ2VuZXJhdGlvbkZhbGxiYWNrPSEwO2NvbnRpbnVlfWxldCB0PSExO3RyeXtjb25zdCBhPWUuZ2V0KCJSb290Iik7aWYoIShhIGluc3RhbmNlb2Ygbi5EaWN0KSljb250aW51ZTtjb25zdCByPWEuZ2V0KCJQYWdlcyIpO2lmKCEociBpbnN0YW5jZW9mIG4uRGljdCkpY29udGludWU7Y29uc3QgaT1yLmdldCgiQ291bnQiKTtOdW1iZXIuaXNJbnRlZ2VyKGkpJiYodD0hMCl9Y2F0Y2goZSl7dz1lO2NvbnRpbnVlfWlmKHQmJighU3x8ZS5oYXMoIkVuY3J5cHQiKSkmJmUuaGFzKCJJRCIpKXJldHVybiBlO3k9ZX1pZih5KXJldHVybiB5O2lmKHRoaXMudG9wRGljdClyZXR1cm4gdGhpcy50b3BEaWN0O3Rocm93IG5ldyByLkludmFsaWRQREZFeGNlcHRpb24oIkludmFsaWQgUERGIHN0cnVjdHVyZS4iKX1yZWFkWFJlZihlPSExKXtjb25zdCB0PXRoaXMuc3RyZWFtLGE9bmV3IFNldDtmb3IoO3RoaXMuc3RhcnRYUmVmUXVldWUubGVuZ3RoOyl7dHJ5e2NvbnN0IGU9dGhpcy5zdGFydFhSZWZRdWV1ZVswXTtpZihhLmhhcyhlKSl7KDAsci53YXJuKSgicmVhZFhSZWYgLSBza2lwcGluZyBYUmVmIHRhYmxlIHNpbmNlIGl0IHdhcyBhbHJlYWR5IHBhcnNlZC4iKTt0aGlzLnN0YXJ0WFJlZlF1ZXVlLnNoaWZ0KCk7Y29udGludWV9YS5hZGQoZSk7dC5wb3M9ZSt0LnN0YXJ0O2NvbnN0IHM9bmV3IGkuUGFyc2VyKHtsZXhlcjpuZXcgaS5MZXhlcih0KSx4cmVmOnRoaXMsYWxsb3dTdHJlYW1zOiEwfSk7bGV0IGMsbD1zLmdldE9iaigpO2lmKCgwLG4uaXNDbWQpKGwsInhyZWYiKSl7Yz10aGlzLnByb2Nlc3NYUmVmVGFibGUocyk7dGhpcy50b3BEaWN0fHwodGhpcy50b3BEaWN0PWMpO2w9Yy5nZXQoIlhSZWZTdG0iKTtpZihOdW1iZXIuaXNJbnRlZ2VyKGwpJiYhdGhpcy5feHJlZlN0bXMuaGFzKGwpKXt0aGlzLl94cmVmU3Rtcy5hZGQobCk7dGhpcy5zdGFydFhSZWZRdWV1ZS5wdXNoKGwpO3RoaXMuI0I/Pz1sfX1lbHNle2lmKCFOdW1iZXIuaXNJbnRlZ2VyKGwpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJJbnZhbGlkIFhSZWYgc3RyZWFtIGhlYWRlciIpO2lmKCEoTnVtYmVyLmlzSW50ZWdlcihzLmdldE9iaigpKSYmKDAsbi5pc0NtZCkocy5nZXRPYmooKSwib2JqIikmJihsPXMuZ2V0T2JqKCkpaW5zdGFuY2VvZiBvLkJhc2VTdHJlYW0pKXRocm93IG5ldyByLkZvcm1hdEVycm9yKCJJbnZhbGlkIFhSZWYgc3RyZWFtIik7Yz10aGlzLnByb2Nlc3NYUmVmU3RyZWFtKGwpO3RoaXMudG9wRGljdHx8KHRoaXMudG9wRGljdD1jKTtpZighYyl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiRmFpbGVkIHRvIHJlYWQgWFJlZiBzdHJlYW0iKX1sPWMuZ2V0KCJQcmV2Iik7TnVtYmVyLmlzSW50ZWdlcihsKT90aGlzLnN0YXJ0WFJlZlF1ZXVlLnB1c2gobCk6bCBpbnN0YW5jZW9mIG4uUmVmJiZ0aGlzLnN0YXJ0WFJlZlF1ZXVlLnB1c2gobC5udW0pfWNhdGNoKGUpe2lmKGUgaW5zdGFuY2VvZiBzLk1pc3NpbmdEYXRhRXhjZXB0aW9uKXRocm93IGU7KDAsci5pbmZvKSgiKHdoaWxlIHJlYWRpbmcgWFJlZik6ICIrZSl9dGhpcy5zdGFydFhSZWZRdWV1ZS5zaGlmdCgpfWlmKHRoaXMudG9wRGljdClyZXR1cm4gdGhpcy50b3BEaWN0O2lmKCFlKXRocm93IG5ldyBzLlhSZWZQYXJzZUV4Y2VwdGlvbn1nZXQgbGFzdFhSZWZTdHJlYW1Qb3MoKXtyZXR1cm4gdGhpcy4jQj8/KHRoaXMuX3hyZWZTdG1zLnNpemU+MD9NYXRoLm1heCguLi50aGlzLl94cmVmU3Rtcyk6bnVsbCl9Z2V0RW50cnkoZSl7Y29uc3QgdD10aGlzLmVudHJpZXNbZV07cmV0dXJuIHQmJiF0LmZyZWUmJnQub2Zmc2V0P3Q6bnVsbH1mZXRjaElmUmVmKGUsdD0hMSl7cmV0dXJuIGUgaW5zdGFuY2VvZiBuLlJlZj90aGlzLmZldGNoKGUsdCk6ZX1mZXRjaChlLHQ9ITEpe2lmKCEoZSBpbnN0YW5jZW9mIG4uUmVmKSl0aHJvdyBuZXcgRXJyb3IoInJlZiBvYmplY3QgaXMgbm90IGEgcmVmZXJlbmNlIik7Y29uc3QgYT1lLm51bSxpPXRoaXMuX2NhY2hlTWFwLmdldChhKTtpZih2b2lkIDAhPT1pKXtpIGluc3RhbmNlb2Ygbi5EaWN0JiYhaS5vYmpJZCYmKGkub2JqSWQ9ZS50b1N0cmluZygpKTtyZXR1cm4gaX1sZXQgcz10aGlzLmdldEVudHJ5KGEpO2lmKG51bGw9PT1zKXt0aGlzLl9jYWNoZU1hcC5zZXQoYSxzKTtyZXR1cm4gc31pZih0aGlzLl9wZW5kaW5nUmVmcy5oYXMoZSkpe3RoaXMuX3BlbmRpbmdSZWZzLnJlbW92ZShlKTsoMCxyLndhcm4pKGBJZ25vcmluZyBjaXJjdWxhciByZWZlcmVuY2U6ICR7ZX0uYCk7cmV0dXJuIG4uQ0lSQ1VMQVJfUkVGfXRoaXMuX3BlbmRpbmdSZWZzLnB1dChlKTt0cnl7cz1zLnVuY29tcHJlc3NlZD90aGlzLmZldGNoVW5jb21wcmVzc2VkKGUscyx0KTp0aGlzLmZldGNoQ29tcHJlc3NlZChlLHMsdCk7dGhpcy5fcGVuZGluZ1JlZnMucmVtb3ZlKGUpfWNhdGNoKHQpe3RoaXMuX3BlbmRpbmdSZWZzLnJlbW92ZShlKTt0aHJvdyB0fXMgaW5zdGFuY2VvZiBuLkRpY3Q/cy5vYmpJZD1lLnRvU3RyaW5nKCk6cyBpbnN0YW5jZW9mIG8uQmFzZVN0cmVhbSYmKHMuZGljdC5vYmpJZD1lLnRvU3RyaW5nKCkpO3JldHVybiBzfWZldGNoVW5jb21wcmVzc2VkKGUsdCxhPSExKXtjb25zdCBjPWUuZ2VuO2xldCBsPWUubnVtO2lmKHQuZ2VuIT09Yyl7Y29uc3QgaT1gSW5jb25zaXN0ZW50IGdlbmVyYXRpb24gaW4gWFJlZjogJHtlfWA7aWYodGhpcy5fZ2VuZXJhdGlvbkZhbGxiYWNrJiZ0LmdlbjxjKXsoMCxyLndhcm4pKGkpO3JldHVybiB0aGlzLmZldGNoVW5jb21wcmVzc2VkKG4uUmVmLmdldChsLHQuZ2VuKSx0LGEpfXRocm93IG5ldyBzLlhSZWZFbnRyeUV4Y2VwdGlvbihpKX1jb25zdCBoPXRoaXMuc3RyZWFtLm1ha2VTdWJTdHJlYW0odC5vZmZzZXQrdGhpcy5zdHJlYW0uc3RhcnQpLHU9bmV3IGkuUGFyc2VyKHtsZXhlcjpuZXcgaS5MZXhlcihoKSx4cmVmOnRoaXMsYWxsb3dTdHJlYW1zOiEwfSksZD11LmdldE9iaigpLGY9dS5nZXRPYmooKSxnPXUuZ2V0T2JqKCk7aWYoZCE9PWx8fGYhPT1jfHwhKGcgaW5zdGFuY2VvZiBuLkNtZCkpdGhyb3cgbmV3IHMuWFJlZkVudHJ5RXhjZXB0aW9uKGBCYWQgKHVuY29tcHJlc3NlZCkgWFJlZiBlbnRyeTogJHtlfWApO2lmKCJvYmoiIT09Zy5jbWQpe2lmKGcuY21kLnN0YXJ0c1dpdGgoIm9iaiIpKXtsPXBhcnNlSW50KGcuY21kLnN1YnN0cmluZygzKSwxMCk7aWYoIU51bWJlci5pc05hTihsKSlyZXR1cm4gbH10aHJvdyBuZXcgcy5YUmVmRW50cnlFeGNlcHRpb24oYEJhZCAodW5jb21wcmVzc2VkKSBYUmVmIGVudHJ5OiAke2V9YCl9KHQ9dGhpcy5lbmNyeXB0JiYhYT91LmdldE9iaih0aGlzLmVuY3J5cHQuY3JlYXRlQ2lwaGVyVHJhbnNmb3JtKGwsYykpOnUuZ2V0T2JqKCkpaW5zdGFuY2VvZiBvLkJhc2VTdHJlYW18fHRoaXMuX2NhY2hlTWFwLnNldChsLHQpO3JldHVybiB0fWZldGNoQ29tcHJlc3NlZChlLHQsYT0hMSl7Y29uc3QgYz10Lm9mZnNldCxsPXRoaXMuZmV0Y2gobi5SZWYuZ2V0KGMsMCkpO2lmKCEobCBpbnN0YW5jZW9mIG8uQmFzZVN0cmVhbSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoImJhZCBPYmpTdG0gc3RyZWFtIik7Y29uc3QgaD1sLmRpY3QuZ2V0KCJGaXJzdCIpLHU9bC5kaWN0LmdldCgiTiIpO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKGgpfHwhTnVtYmVyLmlzSW50ZWdlcih1KSl0aHJvdyBuZXcgci5Gb3JtYXRFcnJvcigiaW52YWxpZCBmaXJzdCBhbmQgbiBwYXJhbWV0ZXJzIGZvciBPYmpTdG0gc3RyZWFtIik7bGV0IGQ9bmV3IGkuUGFyc2VyKHtsZXhlcjpuZXcgaS5MZXhlcihsKSx4cmVmOnRoaXMsYWxsb3dTdHJlYW1zOiEwfSk7Y29uc3QgZj1uZXcgQXJyYXkodSksZz1uZXcgQXJyYXkodSk7Zm9yKGxldCBlPTA7ZTx1OysrZSl7Y29uc3QgdD1kLmdldE9iaigpO2lmKCFOdW1iZXIuaXNJbnRlZ2VyKHQpKXRocm93IG5ldyByLkZvcm1hdEVycm9yKGBpbnZhbGlkIG9iamVjdCBudW1iZXIgaW4gdGhlIE9ialN0bSBzdHJlYW06ICR7dH1gKTtjb25zdCBhPWQuZ2V0T2JqKCk7aWYoIU51bWJlci5pc0ludGVnZXIoYSkpdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoYGludmFsaWQgb2JqZWN0IG9mZnNldCBpbiB0aGUgT2JqU3RtIHN0cmVhbTogJHthfWApO2ZbZV09dDtnW2VdPWF9Y29uc3QgcD0obC5zdGFydHx8MCkraCxtPW5ldyBBcnJheSh1KTtmb3IobGV0IGU9MDtlPHU7KytlKXtjb25zdCB0PWU8dS0xP2dbZSsxXS1nW2VdOnZvaWQgMDtpZih0PDApdGhyb3cgbmV3IHIuRm9ybWF0RXJyb3IoIkludmFsaWQgb2Zmc2V0IGluIHRoZSBPYmpTdG0gc3RyZWFtLiIpO2Q9bmV3IGkuUGFyc2VyKHtsZXhlcjpuZXcgaS5MZXhlcihsLm1ha2VTdWJTdHJlYW0ocCtnW2VdLHQsbC5kaWN0KSkseHJlZjp0aGlzLGFsbG93U3RyZWFtczohMH0pO2NvbnN0IGE9ZC5nZXRPYmooKTttW2VdPWE7aWYoYSBpbnN0YW5jZW9mIG8uQmFzZVN0cmVhbSljb250aW51ZTtjb25zdCBuPWZbZV0scz10aGlzLmVudHJpZXNbbl07cyYmcy5vZmZzZXQ9PT1jJiZzLmdlbj09PWUmJnRoaXMuX2NhY2hlTWFwLnNldChuLGEpfWlmKHZvaWQgMD09PSh0PW1bdC5nZW5dKSl0aHJvdyBuZXcgcy5YUmVmRW50cnlFeGNlcHRpb24oYEJhZCAoY29tcHJlc3NlZCkgWFJlZiBlbnRyeTogJHtlfWApO3JldHVybiB0fWFzeW5jIGZldGNoSWZSZWZBc3luYyhlLHQpe3JldHVybiBlIGluc3RhbmNlb2Ygbi5SZWY/dGhpcy5mZXRjaEFzeW5jKGUsdCk6ZX1hc3luYyBmZXRjaEFzeW5jKGUsdCl7dHJ5e3JldHVybiB0aGlzLmZldGNoKGUsdCl9Y2F0Y2goYSl7aWYoIShhIGluc3RhbmNlb2Ygcy5NaXNzaW5nRGF0YUV4Y2VwdGlvbikpdGhyb3cgYTthd2FpdCB0aGlzLnBkZk1hbmFnZXIucmVxdWVzdFJhbmdlKGEuYmVnaW4sYS5lbmQpO3JldHVybiB0aGlzLmZldGNoQXN5bmMoZSx0KX19Z2V0Q2F0YWxvZ09iaigpe3JldHVybiB0aGlzLnJvb3R9fX0sKGUsdCxhKT0+e09iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LCJfX2VzTW9kdWxlIix7dmFsdWU6ITB9KTt0Lk1lc3NhZ2VIYW5kbGVyPXZvaWQgMDt2YXIgcj1hKDIpO2NvbnN0IG49MSxpPTIscz0xLG89MixjPTMsbD00LGg9NSx1PTYsZD03LGY9ODtmdW5jdGlvbiB3cmFwUmVhc29uKGUpe2UgaW5zdGFuY2VvZiBFcnJvcnx8Im9iamVjdCI9PXR5cGVvZiBlJiZudWxsIT09ZXx8KDAsci51bnJlYWNoYWJsZSkoJ3dyYXBSZWFzb246IEV4cGVjdGVkICJyZWFzb24iIHRvIGJlIGEgKHBvc3NpYmx5IGNsb25lZCkgRXJyb3IuJyk7c3dpdGNoKGUubmFtZSl7Y2FzZSJBYm9ydEV4Y2VwdGlvbiI6cmV0dXJuIG5ldyByLkFib3J0RXhjZXB0aW9uKGUubWVzc2FnZSk7Y2FzZSJNaXNzaW5nUERGRXhjZXB0aW9uIjpyZXR1cm4gbmV3IHIuTWlzc2luZ1BERkV4Y2VwdGlvbihlLm1lc3NhZ2UpO2Nhc2UiUGFzc3dvcmRFeGNlcHRpb24iOnJldHVybiBuZXcgci5QYXNzd29yZEV4Y2VwdGlvbihlLm1lc3NhZ2UsZS5jb2RlKTtjYXNlIlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbiI6cmV0dXJuIG5ldyByLlVuZXhwZWN0ZWRSZXNwb25zZUV4Y2VwdGlvbihlLm1lc3NhZ2UsZS5zdGF0dXMpO2Nhc2UiVW5rbm93bkVycm9yRXhjZXB0aW9uIjpyZXR1cm4gbmV3IHIuVW5rbm93bkVycm9yRXhjZXB0aW9uKGUubWVzc2FnZSxlLmRldGFpbHMpO2RlZmF1bHQ6cmV0dXJuIG5ldyByLlVua25vd25FcnJvckV4Y2VwdGlvbihlLm1lc3NhZ2UsZS50b1N0cmluZygpKX19dC5NZXNzYWdlSGFuZGxlcj1jbGFzcyBNZXNzYWdlSGFuZGxlcntjb25zdHJ1Y3RvcihlLHQsYSl7dGhpcy5zb3VyY2VOYW1lPWU7dGhpcy50YXJnZXROYW1lPXQ7dGhpcy5jb21PYmo9YTt0aGlzLmNhbGxiYWNrSWQ9MTt0aGlzLnN0cmVhbUlkPTE7dGhpcy5zdHJlYW1TaW5rcz1PYmplY3QuY3JlYXRlKG51bGwpO3RoaXMuc3RyZWFtQ29udHJvbGxlcnM9T2JqZWN0LmNyZWF0ZShudWxsKTt0aGlzLmNhbGxiYWNrQ2FwYWJpbGl0aWVzPU9iamVjdC5jcmVhdGUobnVsbCk7dGhpcy5hY3Rpb25IYW5kbGVyPU9iamVjdC5jcmVhdGUobnVsbCk7dGhpcy5fb25Db21PYmpPbk1lc3NhZ2U9ZT0+e2NvbnN0IHQ9ZS5kYXRhO2lmKHQudGFyZ2V0TmFtZSE9PXRoaXMuc291cmNlTmFtZSlyZXR1cm47aWYodC5zdHJlYW0pe3RoaXMuI0UodCk7cmV0dXJufWlmKHQuY2FsbGJhY2spe2NvbnN0IGU9dC5jYWxsYmFja0lkLGE9dGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tlXTtpZighYSl0aHJvdyBuZXcgRXJyb3IoYENhbm5vdCByZXNvbHZlIGNhbGxiYWNrICR7ZX1gKTtkZWxldGUgdGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tlXTtpZih0LmNhbGxiYWNrPT09bilhLnJlc29sdmUodC5kYXRhKTtlbHNle2lmKHQuY2FsbGJhY2shPT1pKXRocm93IG5ldyBFcnJvcigiVW5leHBlY3RlZCBjYWxsYmFjayBjYXNlIik7YS5yZWplY3Qod3JhcFJlYXNvbih0LnJlYXNvbikpfXJldHVybn1jb25zdCByPXRoaXMuYWN0aW9uSGFuZGxlclt0LmFjdGlvbl07aWYoIXIpdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIGFjdGlvbiBmcm9tIHdvcmtlcjogJHt0LmFjdGlvbn1gKTtpZih0LmNhbGxiYWNrSWQpe2NvbnN0IGU9dGhpcy5zb3VyY2VOYW1lLHM9dC5zb3VyY2VOYW1lO25ldyBQcm9taXNlKChmdW5jdGlvbihlKXtlKHIodC5kYXRhKSl9KSkudGhlbigoZnVuY3Rpb24ocil7YS5wb3N0TWVzc2FnZSh7c291cmNlTmFtZTplLHRhcmdldE5hbWU6cyxjYWxsYmFjazpuLGNhbGxiYWNrSWQ6dC5jYWxsYmFja0lkLGRhdGE6cn0pfSksKGZ1bmN0aW9uKHIpe2EucG9zdE1lc3NhZ2Uoe3NvdXJjZU5hbWU6ZSx0YXJnZXROYW1lOnMsY2FsbGJhY2s6aSxjYWxsYmFja0lkOnQuY2FsbGJhY2tJZCxyZWFzb246d3JhcFJlYXNvbihyKX0pfSkpfWVsc2UgdC5zdHJlYW1JZD90aGlzLiNOKHQpOnIodC5kYXRhKX07YS5hZGRFdmVudExpc3RlbmVyKCJtZXNzYWdlIix0aGlzLl9vbkNvbU9iak9uTWVzc2FnZSl9b24oZSx0KXtjb25zdCBhPXRoaXMuYWN0aW9uSGFuZGxlcjtpZihhW2VdKXRocm93IG5ldyBFcnJvcihgVGhlcmUgaXMgYWxyZWFkeSBhbiBhY3Rpb25OYW1lIGNhbGxlZCAiJHtlfSJgKTthW2VdPXR9c2VuZChlLHQsYSl7dGhpcy5jb21PYmoucG9zdE1lc3NhZ2Uoe3NvdXJjZU5hbWU6dGhpcy5zb3VyY2VOYW1lLHRhcmdldE5hbWU6dGhpcy50YXJnZXROYW1lLGFjdGlvbjplLGRhdGE6dH0sYSl9c2VuZFdpdGhQcm9taXNlKGUsdCxhKXtjb25zdCBuPXRoaXMuY2FsbGJhY2tJZCsrLGk9bmV3IHIuUHJvbWlzZUNhcGFiaWxpdHk7dGhpcy5jYWxsYmFja0NhcGFiaWxpdGllc1tuXT1pO3RyeXt0aGlzLmNvbU9iai5wb3N0TWVzc2FnZSh7c291cmNlTmFtZTp0aGlzLnNvdXJjZU5hbWUsdGFyZ2V0TmFtZTp0aGlzLnRhcmdldE5hbWUsYWN0aW9uOmUsY2FsbGJhY2tJZDpuLGRhdGE6dH0sYSl9Y2F0Y2goZSl7aS5yZWplY3QoZSl9cmV0dXJuIGkucHJvbWlzZX1zZW5kV2l0aFN0cmVhbShlLHQsYSxuKXtjb25zdCBpPXRoaXMuc3RyZWFtSWQrKyxvPXRoaXMuc291cmNlTmFtZSxjPXRoaXMudGFyZ2V0TmFtZSxsPXRoaXMuY29tT2JqO3JldHVybiBuZXcgUmVhZGFibGVTdHJlYW0oe3N0YXJ0OmE9Pntjb25zdCBzPW5ldyByLlByb21pc2VDYXBhYmlsaXR5O3RoaXMuc3RyZWFtQ29udHJvbGxlcnNbaV09e2NvbnRyb2xsZXI6YSxzdGFydENhbGw6cyxwdWxsQ2FsbDpudWxsLGNhbmNlbENhbGw6bnVsbCxpc0Nsb3NlZDohMX07bC5wb3N0TWVzc2FnZSh7c291cmNlTmFtZTpvLHRhcmdldE5hbWU6YyxhY3Rpb246ZSxzdHJlYW1JZDppLGRhdGE6dCxkZXNpcmVkU2l6ZTphLmRlc2lyZWRTaXplfSxuKTtyZXR1cm4gcy5wcm9taXNlfSxwdWxsOmU9Pntjb25zdCB0PW5ldyByLlByb21pc2VDYXBhYmlsaXR5O3RoaXMuc3RyZWFtQ29udHJvbGxlcnNbaV0ucHVsbENhbGw9dDtsLnBvc3RNZXNzYWdlKHtzb3VyY2VOYW1lOm8sdGFyZ2V0TmFtZTpjLHN0cmVhbTp1LHN0cmVhbUlkOmksZGVzaXJlZFNpemU6ZS5kZXNpcmVkU2l6ZX0pO3JldHVybiB0LnByb21pc2V9LGNhbmNlbDplPT57KDAsci5hc3NlcnQpKGUgaW5zdGFuY2VvZiBFcnJvciwiY2FuY2VsIG11c3QgaGF2ZSBhIHZhbGlkIHJlYXNvbiIpO2NvbnN0IHQ9bmV3IHIuUHJvbWlzZUNhcGFiaWxpdHk7dGhpcy5zdHJlYW1Db250cm9sbGVyc1tpXS5jYW5jZWxDYWxsPXQ7dGhpcy5zdHJlYW1Db250cm9sbGVyc1tpXS5pc0Nsb3NlZD0hMDtsLnBvc3RNZXNzYWdlKHtzb3VyY2VOYW1lOm8sdGFyZ2V0TmFtZTpjLHN0cmVhbTpzLHN0cmVhbUlkOmkscmVhc29uOndyYXBSZWFzb24oZSl9KTtyZXR1cm4gdC5wcm9taXNlfX0sYSl9I04oZSl7Y29uc3QgdD1lLnN0cmVhbUlkLGE9dGhpcy5zb3VyY2VOYW1lLG49ZS5zb3VyY2VOYW1lLGk9dGhpcy5jb21PYmoscz10aGlzLG89dGhpcy5hY3Rpb25IYW5kbGVyW2UuYWN0aW9uXSx1PXtlbnF1ZXVlKGUscz0xLG8pe2lmKHRoaXMuaXNDYW5jZWxsZWQpcmV0dXJuO2NvbnN0IGM9dGhpcy5kZXNpcmVkU2l6ZTt0aGlzLmRlc2lyZWRTaXplLT1zO2lmKGM+MCYmdGhpcy5kZXNpcmVkU2l6ZTw9MCl7dGhpcy5zaW5rQ2FwYWJpbGl0eT1uZXcgci5Qcm9taXNlQ2FwYWJpbGl0eTt0aGlzLnJlYWR5PXRoaXMuc2lua0NhcGFiaWxpdHkucHJvbWlzZX1pLnBvc3RNZXNzYWdlKHtzb3VyY2VOYW1lOmEsdGFyZ2V0TmFtZTpuLHN0cmVhbTpsLHN0cmVhbUlkOnQsY2h1bms6ZX0sbyl9LGNsb3NlKCl7aWYoIXRoaXMuaXNDYW5jZWxsZWQpe3RoaXMuaXNDYW5jZWxsZWQ9ITA7aS5wb3N0TWVzc2FnZSh7c291cmNlTmFtZTphLHRhcmdldE5hbWU6bixzdHJlYW06YyxzdHJlYW1JZDp0fSk7ZGVsZXRlIHMuc3RyZWFtU2lua3NbdF19fSxlcnJvcihlKXsoMCxyLmFzc2VydCkoZSBpbnN0YW5jZW9mIEVycm9yLCJlcnJvciBtdXN0IGhhdmUgYSB2YWxpZCByZWFzb24iKTtpZighdGhpcy5pc0NhbmNlbGxlZCl7dGhpcy5pc0NhbmNlbGxlZD0hMDtpLnBvc3RNZXNzYWdlKHtzb3VyY2VOYW1lOmEsdGFyZ2V0TmFtZTpuLHN0cmVhbTpoLHN0cmVhbUlkOnQscmVhc29uOndyYXBSZWFzb24oZSl9KX19LHNpbmtDYXBhYmlsaXR5Om5ldyByLlByb21pc2VDYXBhYmlsaXR5LG9uUHVsbDpudWxsLG9uQ2FuY2VsOm51bGwsaXNDYW5jZWxsZWQ6ITEsZGVzaXJlZFNpemU6ZS5kZXNpcmVkU2l6ZSxyZWFkeTpudWxsfTt1LnNpbmtDYXBhYmlsaXR5LnJlc29sdmUoKTt1LnJlYWR5PXUuc2lua0NhcGFiaWxpdHkucHJvbWlzZTt0aGlzLnN0cmVhbVNpbmtzW3RdPXU7bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3QobyhlLmRhdGEsdSkpfSkpLnRoZW4oKGZ1bmN0aW9uKCl7aS5wb3N0TWVzc2FnZSh7c291cmNlTmFtZTphLHRhcmdldE5hbWU6bixzdHJlYW06ZixzdHJlYW1JZDp0LHN1Y2Nlc3M6ITB9KX0pLChmdW5jdGlvbihlKXtpLnBvc3RNZXNzYWdlKHtzb3VyY2VOYW1lOmEsdGFyZ2V0TmFtZTpuLHN0cmVhbTpmLHN0cmVhbUlkOnQscmVhc29uOndyYXBSZWFzb24oZSl9KX0pKX0jRShlKXtjb25zdCB0PWUuc3RyZWFtSWQsYT10aGlzLnNvdXJjZU5hbWUsbj1lLnNvdXJjZU5hbWUsaT10aGlzLmNvbU9iaixnPXRoaXMuc3RyZWFtQ29udHJvbGxlcnNbdF0scD10aGlzLnN0cmVhbVNpbmtzW3RdO3N3aXRjaChlLnN0cmVhbSl7Y2FzZSBmOmUuc3VjY2Vzcz9nLnN0YXJ0Q2FsbC5yZXNvbHZlKCk6Zy5zdGFydENhbGwucmVqZWN0KHdyYXBSZWFzb24oZS5yZWFzb24pKTticmVhaztjYXNlIGQ6ZS5zdWNjZXNzP2cucHVsbENhbGwucmVzb2x2ZSgpOmcucHVsbENhbGwucmVqZWN0KHdyYXBSZWFzb24oZS5yZWFzb24pKTticmVhaztjYXNlIHU6aWYoIXApe2kucG9zdE1lc3NhZ2Uoe3NvdXJjZU5hbWU6YSx0YXJnZXROYW1lOm4sc3RyZWFtOmQsc3RyZWFtSWQ6dCxzdWNjZXNzOiEwfSk7YnJlYWt9cC5kZXNpcmVkU2l6ZTw9MCYmZS5kZXNpcmVkU2l6ZT4wJiZwLnNpbmtDYXBhYmlsaXR5LnJlc29sdmUoKTtwLmRlc2lyZWRTaXplPWUuZGVzaXJlZFNpemU7bmV3IFByb21pc2UoKGZ1bmN0aW9uKGUpe2UocC5vblB1bGw/LigpKX0pKS50aGVuKChmdW5jdGlvbigpe2kucG9zdE1lc3NhZ2Uoe3NvdXJjZU5hbWU6YSx0YXJnZXROYW1lOm4sc3RyZWFtOmQsc3RyZWFtSWQ6dCxzdWNjZXNzOiEwfSl9KSwoZnVuY3Rpb24oZSl7aS5wb3N0TWVzc2FnZSh7c291cmNlTmFtZTphLHRhcmdldE5hbWU6bixzdHJlYW06ZCxzdHJlYW1JZDp0LHJlYXNvbjp3cmFwUmVhc29uKGUpfSl9KSk7YnJlYWs7Y2FzZSBsOigwLHIuYXNzZXJ0KShnLCJlbnF1ZXVlIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyIik7aWYoZy5pc0Nsb3NlZClicmVhaztnLmNvbnRyb2xsZXIuZW5xdWV1ZShlLmNodW5rKTticmVhaztjYXNlIGM6KDAsci5hc3NlcnQpKGcsImNsb3NlIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyIik7aWYoZy5pc0Nsb3NlZClicmVhaztnLmlzQ2xvc2VkPSEwO2cuY29udHJvbGxlci5jbG9zZSgpO3RoaXMuI1IoZyx0KTticmVhaztjYXNlIGg6KDAsci5hc3NlcnQpKGcsImVycm9yIHNob3VsZCBoYXZlIHN0cmVhbSBjb250cm9sbGVyIik7Zy5jb250cm9sbGVyLmVycm9yKHdyYXBSZWFzb24oZS5yZWFzb24pKTt0aGlzLiNSKGcsdCk7YnJlYWs7Y2FzZSBvOmUuc3VjY2Vzcz9nLmNhbmNlbENhbGwucmVzb2x2ZSgpOmcuY2FuY2VsQ2FsbC5yZWplY3Qod3JhcFJlYXNvbihlLnJlYXNvbikpO3RoaXMuI1IoZyx0KTticmVhaztjYXNlIHM6aWYoIXApYnJlYWs7bmV3IFByb21pc2UoKGZ1bmN0aW9uKHQpe3QocC5vbkNhbmNlbD8uKHdyYXBSZWFzb24oZS5yZWFzb24pKSl9KSkudGhlbigoZnVuY3Rpb24oKXtpLnBvc3RNZXNzYWdlKHtzb3VyY2VOYW1lOmEsdGFyZ2V0TmFtZTpuLHN0cmVhbTpvLHN0cmVhbUlkOnQsc3VjY2VzczohMH0pfSksKGZ1bmN0aW9uKGUpe2kucG9zdE1lc3NhZ2Uoe3NvdXJjZU5hbWU6YSx0YXJnZXROYW1lOm4sc3RyZWFtOm8sc3RyZWFtSWQ6dCxyZWFzb246d3JhcFJlYXNvbihlKX0pfSkpO3Auc2lua0NhcGFiaWxpdHkucmVqZWN0KHdyYXBSZWFzb24oZS5yZWFzb24pKTtwLmlzQ2FuY2VsbGVkPSEwO2RlbGV0ZSB0aGlzLnN0cmVhbVNpbmtzW3RdO2JyZWFrO2RlZmF1bHQ6dGhyb3cgbmV3IEVycm9yKCJVbmV4cGVjdGVkIHN0cmVhbSBjYXNlIil9fWFzeW5jI1IoZSx0KXthd2FpdCBQcm9taXNlLmFsbFNldHRsZWQoW2Uuc3RhcnRDYWxsPy5wcm9taXNlLGUucHVsbENhbGw/LnByb21pc2UsZS5jYW5jZWxDYWxsPy5wcm9taXNlXSk7ZGVsZXRlIHRoaXMuc3RyZWFtQ29udHJvbGxlcnNbdF19ZGVzdHJveSgpe3RoaXMuY29tT2JqLnJlbW92ZUV2ZW50TGlzdGVuZXIoIm1lc3NhZ2UiLHRoaXMuX29uQ29tT2JqT25NZXNzYWdlKX19fSwoZSx0LGEpPT57T2JqZWN0LmRlZmluZVByb3BlcnR5KHQsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO3QuUERGV29ya2VyU3RyZWFtPXZvaWQgMDt2YXIgcj1hKDIpO3QuUERGV29ya2VyU3RyZWFtPWNsYXNzIFBERldvcmtlclN0cmVhbXtjb25zdHJ1Y3RvcihlKXt0aGlzLl9tc2dIYW5kbGVyPWU7dGhpcy5fY29udGVudExlbmd0aD1udWxsO3RoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyPW51bGw7dGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycz1bXX1nZXRGdWxsUmVhZGVyKCl7KDAsci5hc3NlcnQpKCF0aGlzLl9mdWxsUmVxdWVzdFJlYWRlciwiUERGV29ya2VyU3RyZWFtLmdldEZ1bGxSZWFkZXIgY2FuIG9ubHkgYmUgY2FsbGVkIG9uY2UuIik7dGhpcy5fZnVsbFJlcXVlc3RSZWFkZXI9bmV3IFBERldvcmtlclN0cmVhbVJlYWRlcih0aGlzLl9tc2dIYW5kbGVyKTtyZXR1cm4gdGhpcy5fZnVsbFJlcXVlc3RSZWFkZXJ9Z2V0UmFuZ2VSZWFkZXIoZSx0KXtjb25zdCBhPW5ldyBQREZXb3JrZXJTdHJlYW1SYW5nZVJlYWRlcihlLHQsdGhpcy5fbXNnSGFuZGxlcik7dGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5wdXNoKGEpO3JldHVybiBhfWNhbmNlbEFsbFJlcXVlc3RzKGUpe3RoaXMuX2Z1bGxSZXF1ZXN0UmVhZGVyPy5jYW5jZWwoZSk7Zm9yKGNvbnN0IHQgb2YgdGhpcy5fcmFuZ2VSZXF1ZXN0UmVhZGVycy5zbGljZSgwKSl0LmNhbmNlbChlKX19O2NsYXNzIFBERldvcmtlclN0cmVhbVJlYWRlcntjb25zdHJ1Y3RvcihlKXt0aGlzLl9tc2dIYW5kbGVyPWU7dGhpcy5vblByb2dyZXNzPW51bGw7dGhpcy5fY29udGVudExlbmd0aD1udWxsO3RoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQ9ITE7dGhpcy5faXNTdHJlYW1pbmdTdXBwb3J0ZWQ9ITE7Y29uc3QgdD10aGlzLl9tc2dIYW5kbGVyLnNlbmRXaXRoU3RyZWFtKCJHZXRSZWFkZXIiKTt0aGlzLl9yZWFkZXI9dC5nZXRSZWFkZXIoKTt0aGlzLl9oZWFkZXJzUmVhZHk9dGhpcy5fbXNnSGFuZGxlci5zZW5kV2l0aFByb21pc2UoIlJlYWRlckhlYWRlcnNSZWFkeSIpLnRoZW4oKGU9Pnt0aGlzLl9pc1N0cmVhbWluZ1N1cHBvcnRlZD1lLmlzU3RyZWFtaW5nU3VwcG9ydGVkO3RoaXMuX2lzUmFuZ2VTdXBwb3J0ZWQ9ZS5pc1JhbmdlU3VwcG9ydGVkO3RoaXMuX2NvbnRlbnRMZW5ndGg9ZS5jb250ZW50TGVuZ3RofSkpfWdldCBoZWFkZXJzUmVhZHkoKXtyZXR1cm4gdGhpcy5faGVhZGVyc1JlYWR5fWdldCBjb250ZW50TGVuZ3RoKCl7cmV0dXJuIHRoaXMuX2NvbnRlbnRMZW5ndGh9Z2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCl7cmV0dXJuIHRoaXMuX2lzU3RyZWFtaW5nU3VwcG9ydGVkfWdldCBpc1JhbmdlU3VwcG9ydGVkKCl7cmV0dXJuIHRoaXMuX2lzUmFuZ2VTdXBwb3J0ZWR9YXN5bmMgcmVhZCgpe2NvbnN0e3ZhbHVlOmUsZG9uZTp0fT1hd2FpdCB0aGlzLl9yZWFkZXIucmVhZCgpO3JldHVybiB0P3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06e3ZhbHVlOmUuYnVmZmVyLGRvbmU6ITF9fWNhbmNlbChlKXt0aGlzLl9yZWFkZXIuY2FuY2VsKGUpfX1jbGFzcyBQREZXb3JrZXJTdHJlYW1SYW5nZVJlYWRlcntjb25zdHJ1Y3RvcihlLHQsYSl7dGhpcy5fbXNnSGFuZGxlcj1hO3RoaXMub25Qcm9ncmVzcz1udWxsO2NvbnN0IHI9dGhpcy5fbXNnSGFuZGxlci5zZW5kV2l0aFN0cmVhbSgiR2V0UmFuZ2VSZWFkZXIiLHtiZWdpbjplLGVuZDp0fSk7dGhpcy5fcmVhZGVyPXIuZ2V0UmVhZGVyKCl9Z2V0IGlzU3RyZWFtaW5nU3VwcG9ydGVkKCl7cmV0dXJuITF9YXN5bmMgcmVhZCgpe2NvbnN0e3ZhbHVlOmUsZG9uZTp0fT1hd2FpdCB0aGlzLl9yZWFkZXIucmVhZCgpO3JldHVybiB0P3t2YWx1ZTp2b2lkIDAsZG9uZTohMH06e3ZhbHVlOmUuYnVmZmVyLGRvbmU6ITF9fWNhbmNlbChlKXt0aGlzLl9yZWFkZXIuY2FuY2VsKGUpfX19XSx0PXt9O2Z1bmN0aW9uIF9fd19wZGZqc19yZXF1aXJlX18oYSl7dmFyIHI9dFthXTtpZih2b2lkIDAhPT1yKXJldHVybiByLmV4cG9ydHM7dmFyIG49dFthXT17ZXhwb3J0czp7fX07ZVthXShuLG4uZXhwb3J0cyxfX3dfcGRmanNfcmVxdWlyZV9fKTtyZXR1cm4gbi5leHBvcnRzfXZhciBhPXt9OygoKT0+e3ZhciBlPWE7T2JqZWN0LmRlZmluZVByb3BlcnR5KGUsIl9fZXNNb2R1bGUiLHt2YWx1ZTohMH0pO09iamVjdC5kZWZpbmVQcm9wZXJ0eShlLCJXb3JrZXJNZXNzYWdlSGFuZGxlciIse2VudW1lcmFibGU6ITAsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHQuV29ya2VyTWVzc2FnZUhhbmRsZXJ9fSk7dmFyIHQ9X193X3BkZmpzX3JlcXVpcmVfXygxKX0pKCk7cmV0dXJuIGF9KSgpKSk7\";\nfunction Fl(l) {\n  return !!(typeof l == \"object\" && l && \"gen\" in l && \"num\" in l);\n}\nasync function tl(l, d) {\n  return typeof d == \"string\" ? l.getDestination(d) : d;\n}\nasync function Ol(l, d) {\n  return d && Fl(d[0]) ? d[0] : null;\n}\nconst Cl = (l) => l.type === \"XYZ\" && l.spec.length === 3, nl = (l) => l.type === \"Fit\" && l.spec.length === 0, Kl = (l) => l.type === \"FitH\" && l.spec.length === 1, ol = (l) => l.type === \"FitV\" && l.spec.length === 1, Ql = (l) => l.type === \"FitR\" && l.spec.length === 4, El = (l) => l.type === \"FitB\" && l.spec.length === 0, gl = (l) => l.type === \"FitBH\" && l.spec.length === 1, Hl = (l) => l.type === \"FitBV\" && l.spec.length === 1;\nfunction Pl(l, d) {\n  const Z = { type: l, spec: d };\n  return Cl(Z) || nl(Z) || Kl(Z) || ol(Z) || Ql(Z) || El(Z) || gl(Z) || Hl(Z) ? Z : (console.warn(\"no location type found for \", l, d), null);\n}\nconst Bl = (l) => l && l.every((d) => !isNaN(d));\nfunction vl(l) {\n  D.GlobalWorkerOptions.workerSrc = l;\n}\nfunction fl(l, d = {\n  onProgress: void 0,\n  onPassword: void 0,\n  onError: void 0,\n  password: \"\"\n}) {\n  var L;\n  (L = D.GlobalWorkerOptions) != null && L.workerSrc || vl(kl);\n  const Z = e(), b = e(0), W = e({});\n  function c(X) {\n    const y = D.getDocument(X);\n    if (d.onProgress && (y.onProgress = d.onProgress), d.onPassword)\n      y.onPassword = d.onPassword;\n    else if (d.password) {\n      const T = (Y, m) => {\n        Y(d.password ?? \"\");\n      };\n      y.onPassword = T;\n    }\n    y.promise.then(\n      async (T) => {\n        Z.value = T.loadingTask, b.value = T.numPages;\n        const Y = await T.getMetadata(), m = await T.getAttachments(), h = await T.getJSActions(), z = await T.getOutline();\n        W.value = {\n          metadata: Y,\n          attachments: m,\n          javascript: h,\n          outline: z\n        };\n      },\n      (T) => {\n        typeof d.onError == \"function\" && d.onError(T);\n      }\n    );\n  }\n  async function N(X) {\n    var I;\n    const y = await ((I = Z.value) == null ? void 0 : I.promise);\n    if (!y)\n      return null;\n    const T = await tl(y, X), Y = await Ol(y, T);\n    if (!Y || !T)\n      return null;\n    const m = await y.getPageIndex(Y), h = T[1].name, z = T.slice(2), u = Bl(z) ? Pl(h, z) : null;\n    return { pageIndex: m, location: u ?? { type: \"Fit\", spec: [] } };\n  }\n  return Vl(l) ? (l.value && c(l.value), U(l, () => {\n    l.value && c(l.value);\n  })) : l && c(l), {\n    pdf: Z,\n    pages: b,\n    info: W,\n    getPDFDestination: N\n  };\n}\nconst rl = {\n  install(l) {\n    l.component(ll.name, ll);\n  }\n};\nexport {\n  ll as VuePDF,\n  rl as VuePDFPlugin,\n  rl as default,\n  fl as usePDF\n};\n"],
  "mappings": "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",
  "names": ["exports", "module", "_", "exports", "module", "_", "exports", "module", "_", "exports", "module", "_", "exports", "module", "_", "exports", "module", "_", "isNodeJS", "process", "versions", "nw", "electron", "type", "exports", "IDENTITY_MATRIX", "FONT_IDENTITY_MATRIX", "MAX_IMAGE_SIZE_TO_CACHE", "LINE_FACTOR", "LINE_DESCENT_FACTOR", "BASELINE_FACTOR", "RenderingIntentFlag", "ANY", "DISPLAY", "PRINT", "SAVE", "ANNOTATIONS_FORMS", "ANNOTATIONS_STORAGE", "ANNOTATIONS_DISABLE", "OPLIST", "AnnotationMode", "DISABLE", "ENABLE", "ENABLE_FORMS", "ENABLE_STORAGE", "AnnotationEditorPrefix", "AnnotationEditorType", "NONE", "FREETEXT", "STAMP", "INK", "AnnotationEditorParamsType", "RESIZE", "CREATE", "FREETEXT_SIZE", "FREETEXT_COLOR", "FREETEXT_OPACITY", "INK_COLOR", "INK_THICKNESS", "INK_OPACITY", "PermissionFlag", "MODIFY_CONTENTS", "COPY", "MODIFY_ANNOTATIONS", "FILL_INTERACTIVE_FORMS", "COPY_FOR_ACCESSIBILITY", "ASSEMBLE", "PRINT_HIGH_QUALITY", "TextRenderingMode", "FILL", "STROKE", "FILL_STROKE", "INVISIBLE", "FILL_ADD_TO_PATH", "STROKE_ADD_TO_PATH", "FILL_STROKE_ADD_TO_PATH", "ADD_TO_PATH", "FILL_STROKE_MASK", "ADD_TO_PATH_FLAG", "ImageKind", "GRAYSCALE_1BPP", "RGB_24BPP", "RGBA_32BPP", "AnnotationType", "TEXT", "LINK", "LINE", "SQUARE", "CIRCLE", "POLYGON", "POLYLINE", "HIGHLIGHT", "UNDERLINE", "SQUIGGLY", "STRIKEOUT", "CARET", "POPUP", "FILEATTACHMENT", "SOUND", "MOVIE", "WIDGET", "SCREEN", "PRINTERMARK", "TRAPNET", "WATERMARK", "THREED", "REDACT", "AnnotationReplyType", "GROUP", "REPLY", "AnnotationFlag", "HIDDEN", "NOZOOM", "NOROTATE", "NOVIEW", "READONLY", "LOCKED", "TOGGLENOVIEW", "LOCKEDCONTENTS", "AnnotationFieldFlag", "REQUIRED", "NOEXPORT", "MULTILINE", "PASSWORD", "NOTOGGLETOOFF", "RADIO", "PUSHBUTTON", "COMBO", "EDIT", "SORT", "FILESELECT", "MULTISELECT", "DONOTSPELLCHECK", "DONOTSCROLL", "COMB", "RICHTEXT", "RADIOSINUNISON", "COMMITONSELCHANGE", "AnnotationBorderStyleType", "SOLID", "DASHED", "BEVELED", "INSET", "AnnotationActionEventType", "E", "X", "D", "U", "Fo", "Bl", "PO", "PC", "PV", "PI", "K", "F", "V", "C", "DocumentActionEventType", "WC", "WS", "DS", "WP", "DP", "PageActionEventType", "O", "VerbosityLevel", "ERRORS", "WARNINGS", "INFOS", "CMapCompressionType", "BINARY", "OPS", "dependency", "setLineWidth", "setLineCap", "setLineJoin", "setMiterLimit", "setDash", "setRenderingIntent", "setFlatness", "setGState", "save", "restore", "transform", "moveTo", "lineTo", "curveTo", "curveTo2", "curveTo3", "closePath", "rectangle", "stroke", "closeStroke", "fill", "eoFill", "fillStroke", "eoFillStroke", "closeFillStroke", "closeEOFillStroke", "endPath", "clip", "eoClip", "beginText", "endText", "setCharSpacing", "setWordSpacing", "setHScale", "setLeading", "setFont", "setTextRenderingMode", "setTextRise", "moveText", "setLeadingMoveText", "setTextMatrix", "nextLine", "showText", "showSpacedText", "nextLineShowText", "nextLineSetSpacingShowText", "setCharWidth", "setCharWidthAndBounds", "setStrokeColorSpace", "setFillColorSpace", "setStrokeColor", "setStrokeColorN", "setFillColor", "setFillColorN", "setStrokeGray", "setFillGray", "setStrokeRGBColor", "setFillRGBColor", "setStrokeCMYKColor", "setFillCMYKColor", "shadingFill", "beginInlineImage", "beginImageData", "endInlineImage", "paintXObject", "markPoint", "markPointProps", "beginMarkedContent", "beginMarkedContentProps", "endMarkedContent", "beginCompat", "endCompat", "paintFormXObjectBegin", "paintFormXObjectEnd", "beginGroup", "endGroup", "beginAnnotation", "endAnnotation", "paintImageMaskXObject", "paintImageMaskXObjectGroup", "paintImageXObject", "paintInlineImageXObject", "paintInlineImageXObjectGroup", "paintImageXObjectRepeat", "paintImageMaskXObjectRepeat", "paintSolidColorImageMask", "constructPath", "PasswordResponses", "NEED_PASSWORD", "INCORRECT_PASSWORD", "verbosity", "setVerbosityLevel", "level", "Number", "isInteger", "getVerbosityLevel", "info", "msg", "console", "log", "warn", "unreachable", "Error", "assert", "cond", "_isValidProtocol", "url", "protocol", "createValidAbsoluteUrl", "baseUrl", "options", "addDefaultProtocol", "startsWith", "dots", "match", "length", "tryConvertEncoding", "stringToUTF8String", "absoluteUrl", "URL", "shadow", "obj", "prop", "value", "nonSerializable", "Object", "defineProperty", "enumerable", "configurable", "writable", "BaseException", "BaseExceptionClosure", "message", "name", "constructor", "prototype", "PasswordException", "code", "UnknownErrorException", "details", "InvalidPDFException", "MissingPDFException", "UnexpectedResponseException", "status", "FormatError", "AbortException", "bytesToString", "bytes", "undefined", "MAX_ARGUMENT_COUNT", "String", "fromCharCode", "apply", "strBuf", "i", "chunkEnd", "Math", "min", "chunk", "subarray", "push", "join", "stringToBytes", "str", "Uint8Array", "charCodeAt", "string32", "objectSize", "keys", "objectFromMap", "map", "create", "key", "isLittleEndian", "buffer8", "view32", "Uint32Array", "buffer", "isEvalSupported", "Function", "FeatureTest", "isOffscreenCanvasSupported", "OffscreenCanvas", "platform", "navigator", "isWin", "isMac", "includes", "isCSSRoundSupported", "globalThis", "CSS", "supports", "hexNumbers", "Array", "n", "toString", "padStart", "Util", "makeHexColor", "r", "g", "b", "scaleMinMax", "minMax", "temp", "m1", "m2", "applyTransform", "p", "m", "xt", "yt", "applyInverseTransform", "d", "getAxialAlignedBoundingBox", "p1", "p2", "slice", "p3", "p4", "max", "inverseTransform", "singularValueDecompose2dScale", "transpose", "a", "c", "first", "second", "sqrt", "sx", "sy", "normalizeRect", "rect", "intersect", "rect1", "rect2", "xLow", "xHigh", "yLow", "yHigh", "bezierBoundingBox", "x0", "y0", "x1", "y1", "x2", "y2", "x3", "y3", "tvalues", "bounds", "t", "t1", "t2", "b2ac", "sqrtb2ac", "abs", "j", "mt", "jlen", "PDFStringTranslateTable", "stringToPDFString", "encoding", "decoder", "TextDecoder", "fatal", "decode", "ex", "ii", "charAt", "decodeURIComponent", "escape", "utf8StringToString", "unescape", "encodeURIComponent", "isArrayBuffer", "v", "byteLength", "isArrayEqual", "arr1", "arr2", "getModificationDate", "date", "Date", "getUTCFullYear", "getUTCMonth", "getUTCDate", "getUTCHours", "getUTCMinutes", "getUTCSeconds", "PromiseCapability", "promise", "Promise", "resolve", "reject", "data", "reason", "settled", "NormalizeRegex", "NormalizationMap", "normalizeUnicode", "Map", "replaceAll", "_", "normalize", "get", "getUuid", "crypto", "randomUUID", "buf", "getRandomValues", "floor", "random", "AnnotationPrefix", "_util", "require", "_annotation_storage", "_display_utils", "_font_loader", "_displayNode_utils", "_canvas", "_worker_options", "_message_handler", "_metadata", "_optional_content_config", "_transport_stream", "_displayFetch_stream", "_displayNetwork", "_displayNode_stream", "_displaySvg", "_xfa_text", "DEFAULT_RANGE_CHUNK_SIZE", "RENDERING_CANCELLED_TIMEOUT", "DELAYED_CLEANUP_TIMEOUT", "DefaultCanvasFactory", "NodeCanvasFactory", "DOMCanvasFactory", "DefaultCMapReaderFactory", "NodeCMapReaderFactory", "DOMCMapReaderFactory", "DefaultFilterFactory", "NodeFilterFactory", "DOMFilterFactory", "DefaultStandardFontDataFactory", "NodeStandardFontDataFactory", "DOMStandardFontDataFactory", "getDocument", "src", "range", "task", "PDFDocumentLoadingTask", "docId", "getUrlProp", "getDataProp", "httpHeaders", "withCredentials", "password", "rangeTransport", "PDFDataRangeTransport", "rangeChunkSize", "worker", "PDFWorker", "docBaseUrl", "isDataScheme", "cMapUrl", "cMapPacked", "CMapReaderFactory", "standardFontDataUrl", "StandardFontDataFactory", "ignoreErrors", "stopAtErrors", "maxImageSize", "canvasMaxAreaInBytes", "disableFontFace", "fontExtraProperties", "enableXfa", "ownerDocument", "document", "disableRange", "disableStream", "disableAutoFetch", "pdfBug", "NaN", "useSystemFonts", "useWorkerFetch", "isValidFetchUrl", "baseURI", "canvasFactory", "filterFactory", "styleElement", "transportFactory", "cMapReaderFactory", "isCompressed", "standardFontDataFactory", "workerParams", "port", "GlobalWorkerOptions", "workerPort", "fromPort", "_worker", "fetchDocParams", "apiVersion", "evaluatorOptions", "transportParams", "then", "destroyed", "workerIdPromise", "_fetchDocument", "networkStreamPromise", "networkStream", "PDFDataTransportStream", "initialData", "progressiveDone", "contentDispositionFilename", "createPDFNetworkStream", "params", "PDFNodeStream", "PDFFetchStream", "PDFNetworkStream", "all", "workerId", "messageHandler", "MessageHandler", "transport", "WorkerTransport", "_transport", "send", "catch", "_capability", "source", "sendWithPromise", "val", "href", "window", "location", "Buffer", "isNaN", "onPassword", "onProgress", "destroy", "_a", "_pendingDestroy", "_rangeListeners", "_progressListeners", "_progressiveReadListeners", "_progressiveDoneListeners", "_readyCapability", "addRangeListener", "listener", "addProgressListener", "addProgressiveReadListener", "addProgressiveDoneListener", "onDataRange", "begin", "onDataProgress", "loaded", "total", "onDataProgressiveRead", "onDataProgressiveDone", "transportReady", "requestDataRange", "end", "abort", "PDFDocumentProxy", "pdfInfo", "_pdfInfo", "deprecated", "getJSActions", "js", "jsArr", "annotationStorage", "numPages", "fingerprints", "isPureXfa", "_htmlForXfa", "allXfaHtml", "getPage", "pageNumber", "getPageIndex", "ref", "getDestinations", "getDestination", "id", "getPageLabels", "getPageLayout", "getPageMode", "getViewerPreferences", "getOpenAction", "getAttachments", "getDocJSActions", "getOutline", "getOptionalContentConfig", "getPermissions", "getMetadata", "getMarkInfo", "getData", "saveDocument", "getDownloadInfo", "downloadInfoCapability", "cleanup", "keepLoadedFonts", "startCleanup", "loadingTask", "loadingParams", "getFieldObjects", "hasJSActions", "getCalculationOrderIds", "PDFPageProxy", "pageIndex", "pageInfo", "_pageIndex", "_pageInfo", "_stats", "StatTimer", "_pdfBug", "commonObjs", "objs", "PDFObjects", "_maybeCleanupAfterRender", "_intentStates", "rotate", "userUnit", "view", "getViewport", "scale", "rotation", "offsetX", "offsetY", "dontFlip", "PageViewport", "viewBox", "getAnnotations", "intent", "intentArgs", "getRenderingIntent", "renderingIntent", "getPageJSActions", "getXfa", "children", "render", "canvasContext", "viewport", "annotationMode", "background", "optionalContentConfigPromise", "annotationCanvasMap", "pageColors", "printAnnotationStorage", "time", "intentState", "cacheKey", "set", "streamReaderCancelTimeout", "clearTimeout", "intentPrint", "displayReadyCapability", "operatorList", "fnArray", "argsArray", "lastChunk", "separateAnnots", "_pumpOperatorList", "complete", "error", "renderTasks", "delete", "internalRenderTask", "capability", "_abortOperatorList", "timeEnd", "_b", "InternalRenderTask", "callback", "useRequestAnimationFrame", "Set", "add", "renderTask", "transparency", "optionalContentConfig", "initializeGraphics", "operatorListChanged", "getOperatorList", "opListReadCapability", "opListTask", "streamTextContent", "includeMarkedContent", "disableNormalization", "TEXT_CONTENT_CHUNK_SIZE", "sendWithStream", "highWaterMark", "size", "textContent", "items", "getTextContent", "xfa", "XfaText", "readableStream", "pump", "reader", "read", "done", "assign", "styles", "getReader", "getStructTree", "_destroy", "waitOn", "values", "force", "completed", "cancel", "clear", "resetStats", "success", "_startRenderPage", "_renderPageChunk", "operatorListChunk", "annotationStorageSerializable", "transfers", "streamReader", "RenderingCancelledException", "delay", "extraDelay", "setTimeout", "curCacheKey", "curIntentState", "stats", "tryCleanup", "delayed", "abortDelayedCleanup", "LoopbackPort", "postMessage", "transfer", "event", "structuredClone", "call", "addEventListener", "removeEventListener", "terminate", "PDFWorkerUtil", "isWorkerDisabled", "fallbackWorkerSrc", "fakeWorkerId", "__non_webpack_require__", "pdfjsFilePath", "currentScript", "replace", "isSameOrigin", "otherUrl", "base", "origin", "other", "createCDNWrapper", "wrapper", "createObjectURL", "Blob", "_port", "_webWorker", "_messageHandler", "has", "WeakMap", "_initializeFromPort", "_initialize", "on", "_mainThreadWorkerMessageHandler", "workerSrc", "Worker", "terminateEarly", "onWorkerError", "_setupFakeWorker", "sendTest", "testObj", "_setupFakeWorkerGlobal", "WorkerMessageHandler", "workerHandler", "setup", "cachedPort", "pdfjsWorker", "loader", "mainWorkerMessageHandler", "eval", "loadScript", "factory", "fontLoader", "FontLoader", "_params", "destroyCapability", "_networkStream", "_fullReader", "_lastProgress", "setupMessageHandler", "AnnotationStorage", "isOpList", "SerializableEmpty", "PrintAnnotationStorage", "serializable", "hash", "page", "hasOwnProperty", "resetModified", "terminated", "cancelAllRequests", "sink", "getFullReader", "evt", "onPull", "close", "ArrayBuffer", "enqueue", "onCancel", "ready", "readyReason", "headersCapability", "fullReader", "headersReady", "isStreamingSupported", "isRangeSupported", "contentLength", "rangeReader", "getRangeReader", "_numPages", "htmlForXfa", "exception", "updatePassword", "exportedData", "exportedError", "inspectFont", "FontInspector", "enabled", "font", "fontAdded", "FontFaceObject", "bind", "finally", "imageData", "pageProxy", "bitmap", "width", "height", "fetch", "filename", "cachedPromise", "num", "gen", "results", "OptionalContentConfig", "metadata", "Metadata", "cleanupSuccessful", "cacheSimpleMethod", "objId", "ensureObj", "RenderTask", "onContinue", "form", "canvas", "operatorListIdx", "running", "graphicsReadyCallback", "graphicsReady", "_useRequestAnimationFrame", "cancelled", "_cancelBound", "_continueBound", "_continue", "_scheduleNextBound", "_scheduleNext", "_nextBound", "_next", "StepperManager", "stepper", "init", "nextBreakPoint", "getNextBreakPoint", "gfx", "CanvasGraphics", "beginDrawing", "endDrawing", "updateOperatorList", "requestAnimationFrame", "executeOperatorList", "WeakSet", "version", "build", "_editor", "_murmurhash", "freeze", "onSetModified", "onResetModified", "onAnnotationEditor", "getValue", "defaultValue", "getRawValue", "remove", "AnnotationEditor", "setValue", "modified", "entry", "entries", "_type", "getAll", "setAll", "print", "MurmurHash3_64", "context", "hasBitmap", "serialized", "serialize", "update", "JSON", "stringify", "hexdigest", "setModified", "parent", "clone", "_tools", "parameters", "focusin", "focusout", "_initialOptions", "_uiManager", "_focusEventsAllowed", "_l10nPromise", "_zIndex", "div", "uiManager", "annotationElementId", "_willKeepAspectRatio", "isCentered", "_structTreeParentId", "rawDims", "pageWidth", "pageHeight", "pageX", "pageY", "pageRotation", "viewParameters", "pageDimensions", "pageTranslation", "parentDimensions", "x", "y", "isAttachedToDOM", "deleted", "editorType", "getPrototypeOf", "_defaultLineColor", "_colorManager", "getHexCode", "deleteAnnotationElement", "editor", "fakeEditor", "FakeEditor", "getNextId", "addToAnnotationStorage", "initialize", "l10n", "strings", "_borderLineWidth", "style", "getComputedStyle", "documentElement", "parseFloat", "getPropertyValue", "updateDefaultParams", "_value", "defaultPropertiesToUpdate", "isHandlingMimeForPasting", "mime", "paste", "item", "propertiesToUpdate", "_isDraggable", "classList", "toggle", "center", "parentRotation", "fixAndSetPosition", "addCommands", "currentLayer", "setInBackground", "zIndex", "setInForeground", "setParent", "setSelected", "target", "relatedTarget", "closest", "preventDefault", "isMultipleSelection", "commitOrRemove", "isEmpty", "commit", "setAt", "tx", "ty", "screenToPageTranslation", "translate", "translateInPage", "scrollIntoView", "block", "drag", "parentWidth", "parentHeight", "getBoundingClientRect", "findNewParent", "bx", "by", "left", "toFixed", "top", "moveInDOM", "pageTranslationToScreen", "parentScale", "realScale", "scaledWidth", "scaledHeight", "round", "setDims", "SMALL_EDITOR_SIZE", "fixDims", "widthPercent", "endsWith", "heightPercent", "getInitialTranslation", "addAltTextButton", "altText", "createElement", "className", "setAttribute", "tabIndex", "noContextMenu", "stopPropagation", "editAltText", "capture", "append", "PERCENT", "getClientDimensions", "altTextData", "decorative", "maxWidth", "maxHeight", "bindEvents", "pointerdown", "button", "ctrlKey", "moveEditorInDOM", "_setParentAndPosition", "changeParent", "getRect", "shiftX", "shiftY", "getRectInCurrentCoords", "onceAdded", "enableEditMode", "disableEditMode", "isInEditMode", "shouldGetKeyboardEvents", "needsToBeRebuilt", "rebuild", "isForCopying", "deserialize", "removeEditor", "isResizable", "makeResizable", "select", "unselect", "contains", "activeElement", "focus", "updateParams", "disableEditing", "hidden", "enableEditing", "enterInEditMode", "contentDiv", "isEditing", "setActiveEditor", "setAspectRatio", "aspectRatio", "MIN_SIZE", "getBaseTranslation", "rotatePoint", "angle", "getRotationMatrix", "createResizers", "classes", "prepend", "resizerPointerdown", "boundResizerPointermove", "savedDraggable", "pointerMoveOptions", "passive", "savedX", "savedY", "savedWidth", "savedHeight", "savedParentCursor", "cursor", "savedCursor", "pointerUpCallback", "newX", "newY", "newWidth", "newHeight", "cmd", "undo", "mustExec", "resizerPointermove", "minWidth", "minHeight", "rotationMatrix", "transf", "invRotationMatrix", "invTransf", "getPoint", "getOpposite", "isDiagonal", "isHorizontal", "w", "h", "point", "oppositePoint", "transfOppositePoint", "oppositeX", "oppositeY", "ratioX", "ratioY", "deltaX", "deltaY", "movementX", "movementY", "oldDiag", "hypot", "setAltTextButtonState", "tooltip", "DELAY_TO_SHOW_TOOLTIP", "_eventBus", "dispatch", "subtype", "action", "innerText", "parentNode", "setUpDragSession", "isSelected", "pointerMoveCallback", "e", "dragSelectedEditors", "endDragSession", "shiftKey", "metaKey", "toggleSelected", "ColorManager", "element", "names", "opacityToHex", "opacity", "IdManager", "getId", "ImageManager", "_id", "_isSVGFittingCanvas", "svg", "ctx", "getContext", "image", "Image", "drawImage", "getImageData", "getFromFile", "file", "lastModified", "getFromUrl", "getFromId", "refCounter", "getSvgUrl", "isSvg", "svgUrl", "deleteId", "isValidId", "rawData", "response", "ok", "statusText", "blob", "mustRemoveAspectRatioPromise", "fileReader", "FileReader", "imageElement", "imagePromise", "onload", "result", "onerror", "readAsDataURL", "createImageBitmap", "CommandManager", "maxSize", "overwriteIfSameType", "keepUndo", "next", "splice", "redo", "hasSomethingToUndo", "hasSomethingToRedo", "KeyboardManager", "callbacks", "allKeys", "isMacKey", "split", "at", "exec", "self", "bubbles", "args", "checker", "altKey", "_colors", "colors", "getColorValues", "convert", "color", "rgb", "getRGB", "matchMedia", "matches", "RGB", "every", "_colorsMapping", "AnnotationEditorUIManager", "container", "viewer", "altTextManager", "eventBus", "pdfDocument", "blur", "copy", "cut", "keydown", "onEditingAction", "onPageChanging", "onScaleChanging", "onRotationChanging", "hasSelectedEditor", "_on", "PixelsPerInch", "PDF_TO_CSS_UNITS", "_keyboardManager", "proto", "arrowChecker", "hasSomethingToControl", "small", "TRANSLATE_SMALL", "big", "TRANSLATE_BIG", "selectAll", "unselectAll", "translateSelectedEditors", "_off", "layer", "hcmFilter", "addHCMFilter", "foreground", "direction", "focusMainContainer", "findParent", "layerX", "layerY", "disableUserSelect", "addShouldRescale", "removeShouldRescale", "pagesRotation", "hasSelection", "lastEditor", "lastActiveElement", "once", "addEditListeners", "removeEditListeners", "editors", "clipboardData", "setData", "parse", "isArray", "newEditors", "deserializedEditor", "getActive", "setEditingState", "registerEditorTypes", "types", "getLayer", "currentPageIndex", "addLayer", "enable", "disable", "removeLayer", "updateMode", "mode", "editId", "updateToolbar", "addNewEditor", "enableWaiting", "mustWait", "disableClick", "enableClick", "getEditors", "getEditor", "addEditor", "addDeletedAnnotationElement", "isDeletedAnnotationElement", "removeDeletedAnnotationElement", "ed", "noCommit", "totalX", "totalY", "TIME_TO_WAIT", "savedPageIndex", "newPageIndex", "mustBeAddedInUndoStack", "move", "addOrRebuild", "isActive", "getMode", "imageManager", "addFocusManager", "removeFocusManager", "addKeyboardManager", "removeKeyboardManager", "addCopyPasteListeners", "removeCopyPasteListeners", "dispatchUpdateStates", "hasChanged", "some", "dispatchUpdateUI", "enableAll", "disableAll", "addEditorToLayer", "selectEditors", "_base_factory", "SVG_NS", "PDF", "BaseFilterFactory", "addFilter", "maps", "tableR", "tableG", "tableB", "mapR", "mapG", "mapB", "bufferR", "bufferG", "bufferB", "filter", "fgColor", "bgColor", "fgRGB", "bgRGB", "table", "getSteps", "start", "arr", "addHighlightHCMFilter", "newFgColor", "newBgColor", "fgGray", "bgGray", "newFgRGB", "newBgRGB", "fg", "bg", "step", "newStart", "newStep", "prev", "k", "keepHCM", "cache", "defs", "visibility", "contain", "position", "createElementNS", "body", "addGrayConversion", "feColorMatrix", "createFilter", "appendFeFunc", "feComponentTransfer", "func", "feFunc", "addTransferMapConversion", "rTable", "gTable", "bTable", "BaseCanvasFactory", "_document", "_createCanvas", "fetchData", "asTypedArray", "arrayBuffer", "text", "request", "XMLHttpRequest", "open", "responseType", "onreadystatechange", "readyState", "DONE", "responseText", "BaseCMapReaderFactory", "_fetchData", "compressionType", "cMapData", "BaseStandardFontDataFactory", "DOMSVGFactory", "BaseSVGFactory", "_createSVG", "centerX", "centerY", "rotateA", "rotateB", "rotateC", "rotateD", "offsetCanvasX", "offsetCanvasY", "convertToViewportPoint", "convertToViewportRectangle", "topLeft", "bottomRight", "convertToPdfPoint", "trim", "substring", "toLowerCase", "isPdfFile", "test", "getFilenameFromUrl", "onlyStripPath", "lastIndexOf", "getPdfFilenameFromUrl", "defaultFilename", "reURI", "reFilename", "splitURI", "suggestedFilename", "started", "times", "now", "outBuf", "longest", "padEnd", "removeScriptElement", "script", "head", "pdfDateStringRegex", "PDFDateString", "toDateObject", "input", "RegExp", "year", "parseInt", "month", "day", "hour", "minute", "universalTimeRelation", "offsetHour", "offsetMinute", "UTC", "getXfaPageViewport", "xfaPage", "attributes", "colorRGB", "span", "computedColor", "getCurrentTransform", "f", "getTransform", "getCurrentTransformInverse", "invertSelf", "setLayerDimensions", "mustFlip", "mustRotate", "useRound", "widthStr", "heightStr", "reset", "canvasAndContext", "skipDimensions", "SEED", "MASK_HIGH", "MASK_LOW", "seed", "h1", "h2", "blockCounts", "tailLength", "dataUint32", "k1", "k2", "C1", "C2", "C1_LOW", "C2_LOW", "nativeFontFaces", "loadingRequests", "loadTestFontId", "addNativeFontFace", "nativeFontFace", "fonts", "removeNativeFontFace", "insertRule", "rule", "getElementsByTagName", "styleSheet", "sheet", "cssRules", "loadSystemFont", "loadedName", "isFontLoadingAPISupported", "fontFace", "FontFace", "load", "baseFontName", "attached", "missingFile", "systemFontInfo", "createNativeFontFace", "family", "createFontFaceRule", "isSyncFontLoadingSupported", "_queueLoadingCallback", "_prepareFontLoadEvent", "hasFonts", "supported", "userAgent", "completeRequest", "otherRequest", "shift", "_loadTestFont", "testFont", "atob", "int32", "offset", "spliceString", "s", "insert", "chunk1", "chunk2", "called", "isFontReady", "fillText", "COMMENT_OFFSET", "CFF_CHECKSUM_OFFSET", "XXXX_VALUE", "checksum", "btoa", "fontFamily", "translatedData", "compiledGlyphs", "_inspectFont", "cssFontInfo", "css", "weight", "fontWeight", "italicAngle", "mimetype", "getPathGenerator", "character", "cmds", "jsBuf", "current", "fs", "readFile", "Canvas", "createCanvas", "_pattern_helper", "_image_utils", "MIN_FONT_SIZE", "MAX_FONT_SIZE", "MAX_GROUP_SIZE", "EXECUTION_TIME", "EXECUTION_STEPS", "MAX_SIZE_TO_COMPILE", "FULL_CHUNK_HEIGHT", "mirrorContextOperations", "destCtx", "_removeMirroring", "__originalSave", "__originalRestore", "__originalRotate", "__originalScale", "__originalTranslate", "__originalTransform", "__originalSetTransform", "setTransform", "__originalResetTransform", "resetTransform", "__originalClip", "__originalMoveTo", "__originalLineTo", "__originalBezierCurveTo", "bezierCurveTo", "__originalRect", "__originalClosePath", "__originalBeginPath", "beginPath", "ctxSave", "ctxRestore", "ctxTranslate", "ctxScale", "ctxTransform", "ctxSetTransform", "ctxResetTransform", "ctxRotate", "cp1x", "cp1y", "cp2x", "cp2y", "CachedCanvases", "getCanvas", "canvasEntry", "drawImageAtIntegerCoords", "srcImg", "srcX", "srcY", "srcW", "srcH", "destX", "destY", "destW", "destH", "tlX", "rTlX", "tlY", "rTlY", "brX", "rWidth", "brY", "rHeight", "sign", "scaleX", "scaleY", "compileType3Glyph", "imgData", "POINT_TO_PROCESS_LIMIT", "POINT_TYPES", "width1", "points", "j0", "lineSize", "pos", "elem", "mask", "count", "sum", "steps", "Int32Array", "path", "Path2D", "p0", "pp", "drawOutline", "CanvasExtraState", "alphaIsShape", "fontSize", "fontSizeScale", "textMatrix", "textMatrixScale", "fontMatrix", "leading", "lineX", "lineY", "charSpacing", "wordSpacing", "textHScale", "textRenderingMode", "textRise", "fillColor", "strokeColor", "patternFill", "fillAlpha", "strokeAlpha", "lineWidth", "activeSMask", "transferMaps", "startNewPathAndClipBox", "clipBox", "setCurrentPoint", "updatePathMinMax", "minX", "minY", "maxX", "maxY", "updateRectMinMax", "updateScalingPathMinMax", "updateCurvePathMinMax", "box", "getPathBoundingBox", "pathType", "PathType", "xStrokePad", "yStrokePad", "updateClipFromPath", "isEmptyClip", "Infinity", "getClippedPathBoundingBox", "putBinaryImageData", "ImageData", "putImageData", "partialChunkHeight", "fullChunks", "totalChunks", "chunkImgData", "createImageData", "srcPos", "destPos", "dest", "thisChunkHeight", "elemsInThisChunk", "kind", "srcLength", "dest32", "dest32DataLength", "fullSrcDiff", "white", "black", "srcDiff", "kEnd", "kEndUnrolled", "srcByte", "putBinaryImageMask", "convertBlackAndWhiteToRGBA", "nonBlackColor", "copyCtxState", "sourceCtx", "properties", "property", "setLineDash", "getLineDash", "lineDashOffset", "resetCtxToDefault", "strokeStyle", "fillStyle", "fillRule", "globalAlpha", "lineCap", "lineJoin", "miterLimit", "globalCompositeOperation", "composeSMaskBackdrop", "r0", "g0", "b0", "alpha", "alpha_", "composeSMaskAlpha", "maskData", "layerData", "transferMap", "composeSMaskLuminosity", "genericComposeSMask", "maskCtx", "layerCtx", "backdrop", "layerOffsetX", "layerOffsetY", "maskOffsetX", "maskOffsetY", "hasBackdrop", "composeFn", "PIXELS_TO_PROCESS", "chunkSize", "ceil", "row", "chunkHeight", "composeSMask", "smask", "layerBox", "layerWidth", "layerHeight", "getImageSmoothingEnabled", "interpolate", "fround", "actualScale", "devicePixelRatio", "LINE_CAP_STYLES", "LINE_JOIN_STYLES", "NORMAL_CLIP", "EO_CLIP", "canvasCtx", "markedContentStack", "stateStack", "pendingClip", "pendingEOFill", "res", "xobjs", "groupStack", "processingType3", "baseTransform", "baseTransformStack", "groupLevel", "smaskStack", "smaskCounter", "tempSMask", "suspendedCtx", "contentVisible", "cachedCanvases", "cachedPatterns", "viewportScale", "outputScaleX", "outputScaleY", "_cachedScaleForStroking", "_cachedGetSinglePixelWidth", "_cachedBitmapsMap", "getObject", "fallback", "savedFillStyle", "fillRect", "transparentCanvas", "compositeCtx", "executionStartIdx", "continueCallback", "argsArrayLen", "chunkOperations", "endTime", "fnId", "breakIt", "depObjId", "objsPool", "HTMLCanvasElement", "_scaleImage", "img", "widthScale", "heightScale", "paintWidth", "paintHeight", "tmpCanvasId", "tmpCanvas", "tmpCtx", "clearRect", "_createMaskCanvas", "isPatternFill", "currentTransform", "scaled", "maskCanvas", "mainKey", "cachedImage", "maskToCanvas", "cord1", "cord2", "drawnWidth", "drawnHeight", "fillCanvas", "fillCtx", "imageSmoothingEnabled", "inverse", "getPattern", "limit", "dashArray", "dashPhase", "flatness", "states", "checkSMaskState", "inSMaskMode", "beginSMaskMode", "endSMaskMode", "cacheId", "scratchCanvas", "compose", "dirtyBox", "old", "pop", "ops", "startX", "startY", "isScalingMatrix", "minMaxForBezier", "xw", "yh", "consumePath", "rescaleAndStroke", "needRestore", "paths", "pendingTextPaths", "addToPath", "spacing", "fontRefName", "fontObj", "fontDirection", "isType3Font", "typeface", "fallbackName", "bold", "italic", "browserFontSize", "rise", "paintChar", "patternTransform", "fillStrokeMode", "isAddToPathSet", "strokeText", "isFontSubpixelAAEnabled", "glyphs", "showType3Text", "glyphsLength", "vertical", "spacingDir", "defaultVMetrics", "widthAdvanceScale", "simpleFillText", "pattern", "getSinglePixelWidth", "isInvalidPDFjsFont", "chars", "glyph", "unicode", "restoreNeeded", "isSpace", "fontChar", "accent", "scaledX", "scaledY", "vmetric", "vx", "vy", "remeasure", "measuredWidth", "measureText", "characterScaleX", "isInFont", "scaledAccentX", "scaledAccentY", "charWidth", "isTextInvisible", "spacingLength", "charProcOperatorList", "operatorListId", "transformed", "xWidth", "yWidth", "llx", "lly", "urx", "ury", "getColorN_Pattern", "IR", "canvasGraphicsFactory", "createCanvasGraphics", "TilingPattern", "_getPattern", "arguments", "matrix", "getShadingPattern", "SHADING", "inv", "bbox", "group", "currentCtx", "isolated", "knockout", "canvasBounds", "groupCtx", "startTransformInverse", "currentMtx", "hasOwnCanvas", "canvasWidth", "canvasHeight", "annotationCanvas", "savedCtx", "compiled", "skewX", "skewY", "positions", "trans", "images", "applyTransferMapsToCanvas", "applyTransferMapsToBitmap", "imgToPaint", "HTMLElement", "tag", "visible", "isVisible", "isContentVisible", "absDet", "normX", "normY", "getScaleForStroking", "scaledLineWidth", "scaledXLineWidth", "scaledYLineWidth", "baseArea", "saveRestore", "dashes", "restoreInitialState", "drawFilter", "hcmFilterId", "savedFilter", "op", "applyBoundingBox", "region", "BaseShadingPattern", "RadialAxialShadingPattern", "_bbox", "_colorStops", "_p0", "_p1", "_r0", "_r1", "_createGradient", "grad", "createLinearGradient", "createRadialGradient", "colorStop", "addColorStop", "owner", "ownerBBox", "createPattern", "domMatrix", "DOMMatrix", "drawTriangle", "c1", "c2", "c3", "coords", "rowSize", "tmp", "c1r", "c1g", "c1b", "c2r", "c2g", "c2b", "c3r", "c3g", "c3b", "xa", "car", "cag", "cab", "xb", "cbr", "cbg", "cbb", "x1_", "x2_", "drawFigure", "figure", "ps", "cs", "verticesPerRow", "rows", "cols", "q", "MeshShadingPattern", "_coords", "_figures", "_bounds", "_background", "_createMeshCanvas", "combinedScale", "backgroundColor", "EXPECTED_SCALE", "MAX_PATTERN_SIZE", "BORDER_SIZE", "boundsWidth", "boundsHeight", "paddedWidth", "paddedHeight", "matrixScale", "temporaryPatternCanvas", "DummyShadingPattern", "PaintType", "COLORED", "UNCOLORED", "xstep", "ystep", "paintType", "tilingType", "createPatternCanvas", "curMatrixScale", "dimx", "getSizeAndScale", "dimy", "graphics", "setFillAndStrokeStyleToContext", "adjustedX0", "adjustedY0", "adjustedX1", "adjustedY1", "clipBbox", "realOutputSize", "bboxWidth", "bboxHeight", "cssColor", "convertToRGBA", "convertRGBToRGBA", "inverseDecode", "zeroMapping", "oneMapping", "widthInSource", "widthRemainder", "len32", "src32", "s1", "s2", "s3", "jj", "grayToRGBA", "CallbackKind", "UNKNOWN", "DATA", "ERROR", "StreamKind", "CANCEL", "CANCEL_COMPLETE", "CLOSE", "ENQUEUE", "PULL", "PULL_COMPLETE", "START_COMPLETE", "wrapReason", "sourceName", "targetName", "comObj", "callbackId", "streamId", "streamSinks", "streamControllers", "callbackCapabilities", "actionHandler", "_onComObjOnMessage", "stream", "cbSourceName", "cbTargetName", "actionName", "handler", "ah", "queueingStrategy", "ReadableStream", "controller", "startCapability", "startCall", "pullCall", "cancelCall", "isClosed", "desiredSize", "pull", "pullCapability", "cancelCapability", "createStreamSink", "streamSink", "isCancelled", "lastDesiredSize", "sinkCapability", "processStreamMessage", "streamController", "deleteStreamController", "allSettled", "parsedData", "getRaw", "INTERNAL", "Symbol", "OptionalContentGroup", "_setVisible", "internal", "creator", "order", "groups", "baseState", "off", "getHash", "expression", "policy", "ids", "setVisibility", "hasInitialVisibility", "getOrder", "getGroups", "getGroup", "evaluateVisibilityExpression", "array", "operator", "state", "pdfDataRangeTransport", "_queuedChunks", "_progressiveDone", "_contentDispositionFilename", "_pdfDataRangeTransport", "_isStreamingSupported", "_isRangeSupported", "_contentLength", "_fullRequestReader", "_rangeReaders", "_onReceiveData", "_onProgress", "_onProgressiveDone", "_enqueue", "found", "_begin", "_progressiveDataLength", "_loaded", "_removeRangeReader", "indexOf", "queuedChunks", "PDFDataTransportStreamReader", "PDFDataTransportStreamRangeReader", "_stream", "_done", "_filename", "_requests", "_headersReady", "requestCapability", "_end", "_queuedChunk", "requestsCapability", "_network_utils", "createFetchOptions", "headers", "abortController", "method", "signal", "credentials", "redirect", "createHeaders", "Headers", "getArrayBuffer", "isHttp", "_rangeRequestReaders", "PDFFetchStreamReader", "PDFFetchStreamRangeReader", "_reader", "_withCredentials", "_headersCapability", "_disableRange", "_rangeChunkSize", "_abortController", "AbortController", "_headers", "validateResponseStatus", "createResponseStatusError", "getResponseHeader", "allowRangeRequests", "suggestedLength", "validateRangeRequestCapabilities", "extractFilenameFromHeader", "_readCapability", "_content_disposition", "returnValues", "contentEncoding", "contentDisposition", "getFilenameFromContentDispositionHeader", "needsEncodingFixup", "toParamRegExp", "rfc2616unquote", "rfc5987decode", "rfc2047decode", "fixupEncoding", "rfc2231getparam", "attributePattern", "flags", "textdecode", "contentDispositionStr", "iter", "quot", "part", "parts", "quotindex", "extvalue", "encodingend", "langvalue", "charset", "hex", "OK_RESPONSE", "PARTIAL_CONTENT_RESPONSE", "xhr", "NetworkManager", "currXhrId", "pendingRequests", "requestRange", "listeners", "requestFull", "xhrId", "pendingRequest", "setRequestHeader", "expectedStatus", "onError", "onStateChange", "onprogress", "onHeadersReceived", "onDone", "xhrStatus", "ok_response_on_range_request", "rangeHeader", "getRequestXhr", "isPendingRequest", "abortRequest", "_source", "_manager", "_onRangeRequestReaderClosed", "PDFNetworkStreamFullRequestReader", "PDFNetworkStreamRangeRequestReader", "onClosed", "manager", "_onHeadersReceived", "_onDone", "_onError", "_url", "_fullRequestId", "_headersReceivedCapability", "_cachedChunks", "_storedError", "fullRequestXhrId", "fullRequestXhr", "lengthComputable", "_requestId", "_close", "fileUriRegex", "parseUrl", "sourceUrl", "parsedUrl", "host", "isFsUrl", "PDFNodeStreamFsFullReader", "PDFNodeStreamFullReader", "PDFNodeStreamFsRangeReader", "PDFNodeStreamRangeReader", "BaseFullReader", "_readableStream", "_error", "_setReadableStream", "BaseRangeReader", "createRequestOptions", "auth", "hostname", "handleResponse", "statusCode", "_request", "http", "https", "_httpHeaders", "Range", "lstat", "stat", "createReadStream", "SVG_DEFAULTS", "fontStyle", "XML_NS", "XLINK_NS", "contentType", "forceDataSchema", "digits", "b1", "b2", "b3", "d1", "d2", "d3", "d4", "convertImgDataToPng", "PNG_HEADER", "CHUNK_WRAPPER_SIZE", "crcTable", "crc32", "crc", "writePngChunk", "len", "adler32", "deflateSync", "literals", "deflateSyncUncompressed", "node", "from", "output", "maxBlockLength", "deflateBlocks", "idat", "pi", "adler", "encode", "isMask", "bitDepth", "colorType", "offsetLiterals", "offsetBytes", "ihdr", "pngLength", "SVGExtraState", "dependencies", "activeClipUrl", "clipGroup", "maskId", "opListToTree", "opList", "opTree", "opListElement", "fn", "pf", "pm", "acos", "clipCount", "maskCount", "shadingCount", "SVGGraphics", "svgFactory", "transformMatrix", "transformStack", "extraStack", "embedFonts", "embeddedFonts", "cssStyle", "_operatorIdMapping", "tgrp", "executeOpTree", "loadDependencies", "getSVG", "svgElement", "convertOpList", "operatorIdMapping", "opTreeElement", "lineMatrix", "xcoords", "ycoords", "tspan", "setAttributeNS", "txtElement", "txtgrp", "lineWidthScale", "_setStrokeAttributes", "_ensureTransformGroup", "addFontStyle", "hasChildNodes", "setStrokeAlpha", "setFillAlpha", "_makeColorN_Pattern", "_makeShadingPattern", "_makeTilingPattern", "tilingId", "tx0", "ty0", "tx1", "ty1", "xscale", "yscale", "txstep", "tystep", "tiling", "childNodes", "shadingId", "colorStops", "gradient", "point0", "point1", "focalPoint", "circlePoint", "focalRadius", "circleRadius", "stop", "getAttributeNS", "clipId", "clipPath", "clipElement", "cloneNode", "imgSrc", "cliprect", "imgEl", "definitions", "rootGroup", "_ensureClipGroup", "walk", "shouldBuildText", "child", "MAX_TEXT_DIVS_TO_RENDER", "DEFAULT_FONT_SIZE", "DEFAULT_FONT_ASCENT", "ascentCache", "getCtx", "getAscent", "cachedAscent", "metrics", "ascent", "fontBoundingBoxAscent", "descent", "fontBoundingBoxDescent", "ratio", "pixels", "appendText", "geom", "textDiv", "textDivProperties", "hasText", "hasEOL", "_textDivs", "_transform", "atan2", "fontName", "fontHeight", "fontAscent", "_isOffscreenCanvasSupported", "sin", "cos", "scaleFactorStr", "divStyle", "_container", "_rootContainer", "_pageWidth", "_pageHeight", "dir", "_fontInspectorEnabled", "dataset", "shouldScaleText", "absScaleX", "absScaleY", "_textDivProperties", "_isReadableStream", "_layoutText", "layout", "prevFontSize", "prevFontFamily", "_canceled", "textDivs", "textDivsLength", "TextLayerRenderTask", "textContentSource", "textContentItemsStr", "_textContentSource", "_textContentItemsStr", "_layoutTextParams", "_processItems", "styleCache", "br", "_render", "renderTextLayer", "textContentStream", "scaleFactor", "updateTextLayer", "mustRescale", "_freetext", "_ink", "_stamp", "AnnotationEditorLayer", "accessibilityManager", "annotationLayer", "pointerup", "editorTypes", "FreeTextEditor", "InkEditor", "StampEditor", "_initialized", "addInkEditorIfNeeded", "isCommitting", "pointerEvents", "annotationElementIds", "editables", "getEditableAnnotations", "editable", "hide", "hiddenAnnotationIds", "getEditableAnnotation", "show", "currentActive", "attach", "detach", "removePointerInTextLayer", "moveElementInDOM", "addUndoableEditor", "pasteEditor", "annotationType", "annotationEditorType", "createNewEditor", "createAndAddNewEditor", "getCenterPoint", "innerWidth", "innerHeight", "_annotation_layer", "editorDivBlur", "editorDivFocus", "editorDivInput", "editorDivKeydown", "_defaultColor", "_defaultFontSize", "_translateEmpty", "_internalPadding", "overlayDiv", "editorDiv", "contentEditable", "removeAttribute", "preventScroll", "savedText", "newText", "trimEnd", "setText", "dblclick", "baseX", "baseY", "posX", "posY", "FreeTextAnnotationElement", "defaultAppearanceData", "fontColor", "textPosition", "padding", "structTreeParentId", "updateFontSize", "setFontsize", "savedFontsize", "updateColor", "savedColor", "extractText", "divs", "setEditorDimensions", "savedDisplay", "display", "setContent", "replaceChildren", "line", "createTextNode", "hasElementChanged", "cheatInitialRect", "_freeTextDefaultContent", "_scripting_utils", "_displayL10n_utils", "_xfa_layer", "DEFAULT_TAB_INDEX", "GetElementsByNameSet", "getRectDims", "AnnotationElementFactory", "LinkAnnotationElement", "TextAnnotationElement", "fieldType", "TextWidgetAnnotationElement", "radioButton", "RadioButtonWidgetAnnotationElement", "checkBox", "CheckboxWidgetAnnotationElement", "PushButtonWidgetAnnotationElement", "ChoiceWidgetAnnotationElement", "SignatureWidgetAnnotationElement", "WidgetAnnotationElement", "PopupAnnotationElement", "LineAnnotationElement", "SquareAnnotationElement", "CircleAnnotationElement", "PolylineAnnotationElement", "CaretAnnotationElement", "InkAnnotationElement", "PolygonAnnotationElement", "HighlightAnnotationElement", "UnderlineAnnotationElement", "SquigglyAnnotationElement", "StrikeOutAnnotationElement", "StampAnnotationElement", "FileAttachmentAnnotationElement", "AnnotationElement", "isRenderable", "ignoreBorder", "createQuadrilaterals", "linkService", "downloadManager", "imageResourcesPath", "renderForms", "enableScripting", "_fieldObjects", "fieldObjects", "_createContainer", "_createQuadrilaterals", "_hasPopupData", "titleObj", "contentsObj", "richText", "hasPopupData", "popupRef", "noRotate", "setRotation", "borderStyle", "borderWidth", "horizontalRadius", "horizontalCornerRadius", "verticalRadius", "verticalCornerRadius", "radius", "borderRadius", "borderBottomStyle", "borderColor", "elementWidth", "elementHeight", "_commonActions", "setColor", "jsName", "styleName", "detail", "colorArray", "ColorConverters", "noView", "noPrint", "userName", "title", "readonly", "disabled", "required", "_setRequired", "textColor", "_dispatchEventFromSandbox", "actions", "jsEvent", "commonActions", "_setDefaultPropertiesFromJS", "storedData", "eventProxy", "quadPoints", "rectBlX", "rectBlY", "rectTrX", "rectTrY", "trX", "trY", "blX", "blY", "svgBuffer", "rectWidth", "rectHeight", "backgroundImage", "_createPopup", "popup", "modificationDate", "parentRect", "elements", "_getElementsByName", "skipId", "fields", "fieldObj", "exportValues", "exportValue", "domElement", "querySelector", "getElementsByName", "getAttribute", "maybeShow", "forceHide", "getElementsToTriggerPopup", "addHighlightArea", "triggers", "_editOnDoubleClick", "isTooltipOnly", "link", "isBound", "addLinkAttributes", "newWindow", "_bindNamedAction", "attachment", "_bindAttachment", "setOCGState", "_bindLink", "Action", "_bindJSAction", "resetForm", "_bindResetFormAction", "destination", "getDestinationHash", "onclick", "goToDestination", "getAnchorUrl", "executeNamedAction", "openOrDownloadData", "content", "otherClickAction", "resetFormFields", "refs", "resetFormRefs", "include", "allFields", "fieldIds", "fieldName", "field", "storage", "allIds", "dispatchEvent", "Event", "setInternalLink", "bindSetOCGState", "executeSetOCGState", "alt", "l10nId", "l10nArgs", "alternativeText", "showElementAndHideCanvas", "previousSibling", "nodeName", "_getKeyModifier", "_setEventListener", "elementData", "baseName", "eventName", "valueGetter", "modifier", "focused", "_setEventListeners", "getter", "Blur", "Focus", "_setBackgroundColor", "_setTextStyle", "TEXT_ALIGNMENT", "computedFontSize", "roundToOneDecimal", "multiLine", "numberOfLines", "lineHeight", "textAlignment", "textAlign", "isRequired", "hasAppearance", "fieldValue", "setPropertyOnSiblings", "keyInStorage", "maxLen", "charLimit", "fieldFormattedValues", "formattedValue", "comb", "userValue", "lastCommittedValue", "commitKey", "doNotScroll", "overflowY", "overflowX", "readOnly", "maxLength", "defaultFieldValue", "blurListener", "scrollLeft", "selRange", "setSelectionRange", "willCommit", "selStart", "selectionStart", "selEnd", "selectionEnd", "_blurListener", "Keystroke", "inputType", "change", "fieldWidth", "combWidth", "letterSpacing", "verticalAlign", "checked", "checkbox", "curChecked", "buttonValue", "radio", "pdfButtonValue", "linkElement", "lastChild", "selectElement", "addAnEmptyEntry", "combo", "multiSelect", "multiple", "option", "selected", "optionElement", "displayValue", "removeEmptyEntry", "noneOptionElement", "isExport", "selectedIndex", "selectedValues", "getItems", "multipleSelection", "index", "findIndex", "selectChild", "before", "indices", "changeEx", "keyDown", "PopupElement", "elementIds", "dateObject", "toLocaleDateString", "toLocaleTimeString", "trigger", "flatMap", "baseColor", "outlineColor", "BACKGROUND_ENLIGHT", "header", "localized", "XfaLayer", "xfaHtml", "html", "contents", "_formatContents", "useParentRect", "normalizedRect", "HORIZONTAL_SPACE_AFTER_ANNOTATION", "popupLeft", "popupTop", "lines", "lineSpan", "lineCoordinates", "square", "circle", "containerClassName", "svgElementName", "coordinate", "vertices", "polyline", "inkList", "inkLists", "download", "AnnotationLayer", "NullL10n", "annotations", "popupToElements", "elementParams", "noHTML", "isPopupAnnotation", "rendered", "appendElement", "contentElement", "firstChild", "setAnnotationCanvasMap", "replaceWith", "makeColorComp", "scaleAndClamp", "CMYK_G", "G_CMYK", "G_RGB", "G_rgb", "G_HTML", "G", "RGB_G", "RGB_rgb", "RGB_HTML", "T_HTML", "T_rgb", "CMYK_RGB", "CMYK_rgb", "CMYK_HTML", "components", "RGB_CMYK", "DEFAULT_L10N_STRINGS", "of_pages", "page_of_pages", "document_properties_kb", "document_properties_mb", "document_properties_date_string", "document_properties_page_size_unit_inches", "document_properties_page_size_unit_millimeters", "document_properties_page_size_orientation_portrait", "document_properties_page_size_orientation_landscape", "document_properties_page_size_name_a3", "document_properties_page_size_name_a4", "document_properties_page_size_name_letter", "document_properties_page_size_name_legal", "document_properties_page_size_dimension_string", "document_properties_page_size_dimension_name_string", "document_properties_linearized_yes", "document_properties_linearized_no", "additional_layers", "page_landmark", "thumb_page_title", "thumb_page_canvas", "find_reached_top", "find_reached_bottom", "find_not_found", "page_scale_width", "page_scale_fit", "page_scale_auto", "page_scale_actual", "page_scale_percent", "loading_error", "invalid_file_error", "missing_file_error", "unexpected_response_error", "rendering_error", "annotation_date_string", "printing_not_supported", "printing_not_ready", "web_fonts_disabled", "free_text2_default_content", "editor_free_text2_aria_label", "editor_ink2_aria_label", "editor_ink_canvas_aria_label", "editor_alt_text_button_label", "editor_alt_text_edit_button_label", "editor_alt_text_decorative_tooltip", "print_progress_percent", "getL10nFallback", "formatL10nValue", "getLanguage", "getDirection", "setupStorage", "xfaOn", "xfaOff", "setAttributes", "isHTMLAnchorElement", "HTMLAnchorElement", "dataId", "root", "rootHtml", "stack", "rootDiv", "childHtml", "xmlns", "el", "querySelectorAll", "canvasPointermove", "canvasPointerleave", "canvasPointerup", "canvasPointerdown", "thickness", "bezierPath2D", "allRawPaths", "currentPath", "translationX", "translationY", "_defaultThickness", "_defaultOpacity", "disconnect", "setDimensions", "roundedWidth", "roundedHeight", "bezier", "p10", "p11", "p20", "p21", "p30", "p31", "path2D", "updateThickness", "savedThickness", "updateOpacity", "savedOpacity", "getInitialBBox", "setStroke", "startDrawing", "draw", "lastX", "lastY", "lastPoint", "stopDrawing", "xy", "drawPoints", "lastPoints", "xMin", "xMax", "yMin", "yMax", "makeBezierCurve", "prevX", "prevY", "generateBezierPoints", "bezierPoints", "control1", "control2", "redraw", "createObserver", "ResizeObserver", "contentRect", "observe", "setCanvasDims", "setScaleFactor", "scaleFactorW", "scaleFactorH", "updateTransform", "buildPath2D", "toPDFCoordinates", "fromPDFCoordinates", "serializePaths", "p40", "p41", "getBbox", "getPadding", "fitToContent", "firstTime", "prevTranslationX", "prevTranslationY", "unscaledPadding", "bitmapUrl", "bitmapFile", "supportedTypes", "supportedTypesStr", "getAsFile", "bitmapId", "accessibilityData", "stamps", "area", "prevData", "getBitmapFetched", "fromId", "getBitmapDone", "getBitmap", "accept", "files", "click", "MAX_RATIO", "factor", "scaleBitmap", "bitmapWidth", "bitmapHeight", "prevWidth", "prevHeight", "offscreen", "transferToImageBitmap", "drawBitmap", "serializeBitmap", "toUrl", "toDataURL", "module", "_api", "_text_layer", "_annotation_editor_layer", "pdfjsVersion", "pdfjsBuild"]
}
